{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"un",
				"unordered_map\tstandard header (since c++11)"
			],
			[
				"vec",
				"vector\tstandard header"
			],
			[
				"str",
				"string\tstandard header"
			],
			[
				"__F",
				"__FRAMEWORK_H__"
			],
			[
				"LOG",
				"LOG_DBG"
			],
			[
				"Ren",
				"RenderTargetView"
			],
			[
				"Im",
				"ImageType"
			],
			[
				"ar",
				"arraySize"
			],
			[
				"p",
				"pTexture"
			],
			[
				"T",
				"Texture"
			],
			[
				"VkR",
				"VkResourceType"
			],
			[
				"de",
				"device"
			],
			[
				"De",
				"Device"
			],
			[
				"st",
				"static_assert"
			],
			[
				"cre",
				"createViewCommon"
			],
			[
				"getD",
				"getDepthStencilView"
			],
			[
				"lo",
				"logError"
			],
			[
				"pB",
				"pBackBufferFBO"
			],
			[
				"tex",
				"texture"
			],
			[
				"msg",
				"msgBox"
			],
			[
				"t",
				"type"
			],
			[
				"run",
				"runtime_error"
			],
			[
				"init",
				"initVkShaderStageInfo"
			],
			[
				"get",
				"getShader"
			],
			[
				"pre",
				"prepareForDraw"
			],
			[
				"REnder",
				"RenderContext"
			],
			[
				"image",
				"imageCount"
			],
			[
				"files",
				"filesystem"
			],
			[
				"inc",
				"include"
			],
			[
				"end",
				"endif"
			],
			[
				"si",
				"size"
			],
			[
				"tmp",
				"tmp_objs"
			],
			[
				"tm",
				"tmp_objs"
			],
			[
				"obje",
				"objects"
			],
			[
				"dele",
				"deleted"
			],
			[
				"re",
				"rebuild_scene"
			],
			[
				"del",
				"_delete_objects"
			],
			[
				"Obj",
				"ObjectInfo"
			],
			[
				"im",
				"image_render_mode"
			],
			[
				"pbo",
				"pbo_buff_size"
			],
			[
				"pb",
				"pbo_ready"
			],
			[
				"nr",
				"nrm_"
			],
			[
				"cpu",
				"rtao_cpu_buffers"
			],
			[
				"bu",
				"buf_size"
			],
			[
				"ob",
				"ob_info"
			],
			[
				"ob_",
				"ob_item_ptr"
			],
			[
				"cast",
				"cast_shadow"
			],
			[
				"ao",
				"ao_use_bump"
			],
			[
				"sam",
				"sample_num"
			],
			[
				"ret",
				"return"
			],
			[
				"tri",
				"tri_count"
			],
			[
				"emb",
				"embree_mode"
			],
			[
				"em",
				"embree_mode"
			],
			[
				"eevee_occlu",
				"EEVEE_occlusion_trace_free"
			],
			[
				"NU",
				"NULL"
			],
			[
				"is",
				"is_edit_mode"
			],
			[
				"cas",
				"cast_shadow"
			],
			[
				"x",
				"xform"
			],
			[
				"me",
				"mesh_eval"
			],
			[
				"rtcCo",
				"rtcCommitScene"
			],
			[
				"RTCG",
				"RTCGeometry"
			],
			[
				"rt",
				"rtcReleaseGeometry"
			],
			[
				"RTC",
				"RTCScene"
			],
			[
				"pi",
				"pixels"
			],
			[
				"pri",
				"printf\tprintf …"
			],
			[
				"ra",
				"ray"
			],
			[
				"num",
				"num_pixels"
			],
			[
				"ray",
				"rays"
			],
			[
				"RT",
				"RTCRay"
			],
			[
				"ma",
				"malloc"
			],
			[
				"R",
				"RTCRay"
			],
			[
				"STRE",
				"RAYS_STREAM_SIZE"
			],
			[
				"job",
				"job_id"
			],
			[
				"arg",
				"args"
			],
			[
				"pr",
				"printf\tprintf …"
			],
			[
				"stre",
				"stream_size"
			],
			[
				"embre",
				"embree_context"
			],
			[
				"rtc",
				"rtcReleaseScene"
			],
			[
				"update_",
				"update_tlas"
			],
			[
				"def",
				"default"
			],
			[
				"gpu",
				"gpu_bias"
			],
			[
				"rta",
				"rtao_denoise_p_phi"
			],
			[
				"siz",
				"sizeof"
			],
			[
				"MEM_",
				"MEM_SAFE_FREE"
			],
			[
				"gtao_embree_",
				"gtao_embree_final"
			],
			[
				"tr",
				"true"
			],
			[
				"sce",
				"scene"
			],
			[
				"MEM",
				"MEM_SAFE_FREE"
			],
			[
				"e",
				"e_data"
			],
			[
				"ocll",
				"datatoc_ambient_occlusion_lib_glsl"
			],
			[
				"N",
				"Ng_x"
			],
			[
				"dir",
				"dir_x"
			],
			[
				"r",
				"ray"
			],
			[
				"BLI_str",
				"BLI_string_joinN"
			],
			[
				"fra",
				"frag_shader_lib"
			],
			[
				"com",
				"common_data"
			],
			[
				"sei",
				"sizeof"
			],
			[
				"new",
				"new_item"
			],
			[
				"it",
				"item_in_tree"
			],
			[
				"Objec",
				"ObjectsMapItem"
			],
			[
				"Ob",
				"ObjectsMapItem"
			],
			[
				"ObjectMap",
				"ObjectsMapItem"
			],
			[
				"n",
				"NULL"
			],
			[
				"embe",
				"embree_objects_map"
			],
			[
				"Object",
				"ObjectInfo"
			],
			[
				"O",
				"Object"
			],
			[
				"_eve",
				"_evem_ob_map_init"
			],
			[
				"ObjectMa",
				"ObjectsMapEntry"
			],
			[
				"EVE",
				"EVEM_object_exist"
			],
			[
				"v",
				"void"
			],
			[
				"s",
				"struct\tstruct"
			],
			[
				"curr",
				"curr_idx"
			],
			[
				"en",
				"enabled_effects"
			],
			[
				"use",
				"use_gpu_buff"
			],
			[
				"PVZ_oc",
				"PVZ_occlusion_trace_build_prim_rays_cpu"
			],
			[
				"PVZ_",
				"PVZ_occlusion_trace_build_prim_rays_buffer"
			],
			[
				"size",
				"sizeof"
			],
			[
				"EVEM",
				"EVEM_Matrix44f"
			],
			[
				"ca",
				"cam_pos"
			],
			[
				"ME",
				"MEM_freeN"
			],
			[
				"camer",
				"camera"
			],
			[
				"came",
				"camera"
			],
			[
				"prim",
				"prim_rays_buff"
			],
			[
				"prm",
				"prim_rays_buff"
			],
			[
				"eve",
				"evem_data"
			],
			[
				"GPU",
				"GPU_texture"
			],
			[
				"ver",
				"vertices"
			],
			[
				"embr",
				"embree_data"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp",
			"settings":
			{
				"buffer_size": 18914,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 450 files for \"ParameterBlock\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n  128          bool createCounter)\n  129      {\n  130:         const auto& pDefaultBlock = pProgram->getReflector()->getDefaultParameterBlock();\n  131          const ReflectionVar* pVar = pDefaultBlock ? pDefaultBlock->getResource(name).get() : nullptr;\n  132          if (pVar == nullptr)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12NvApiExDesc.h:\n   85      inline std::optional<uint32_t> findNvApiShaderRegister(ProgramKernels::SharedConstPtr const& pKernels)\n   86      {\n   87:         auto pBlock = pKernels->getReflector()->getDefaultParameterBlock();\n   88          auto pVar = pBlock->getResource(\"g_NvidiaExt\");\n   89          if (!pVar) return std::optional<uint32_t>();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n   54                  Sampler::SharedPtr pPointSampler;\n   55  \n   56:                 ParameterBlock::SharedPtr pSrcRectBuffer;\n   57                  float2 prevSrcRectOffset = float2(0, 0);\n   58                  float2 prevSrcReftScale = float2(0, 0);\n   ..\n   83                  assert(blitData.pPass && blitData.pFbo);\n   84  \n   85:                 blitData.pSrcRectBuffer = blitData.pPass->getVars()->getParameterBlock(\"SrcRectCB\");\n   86                  blitData.offsetVarOffset = blitData.pSrcRectBuffer->getVariableOffset(\"gOffset\");\n   87                  blitData.scaleVarOffset = blitData.pSrcRectBuffer->getVariableOffset(\"gScale\");\n   ..\n   95                  blitData.pPointSampler = Sampler::create(desc);\n   96  \n   97:                 const auto& pDefaultBlockReflection = blitData.pPass->getProgram()->getReflector()->getDefaultParameterBlock();\n   98                  blitData.texBindLoc = pDefaultBlockReflection->getResourceBinding(\"gTex\");\n   99  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n   34      class Texture;\n   35      class Buffer;\n   36:     class ParameterBlock;\n   37  \n   38      class dlldecl Resource : public std::enable_shared_from_this<Resource>\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RootSignature.cpp:\n  124      //\n  125      static void addParamBlockSets(\n  126:         const ParameterBlockReflection*     pBlock,\n  127          RootSignature::Desc&                ioDesc)\n  128      {\n  ...\n  141          }\n  142  \n  143:         uint32_t parameterBlockRangeCount = pBlock->getParameterBlockSubObjectRangeCount();\n  144          for (uint32_t i = 0; i < parameterBlockRangeCount; ++i )\n  145          {\n  146:             uint32_t rangeIndex = pBlock->getParameterBlockSubObjectRangeIndex(i);\n  147  \n  148              auto& resourceRange = pBlock->getResourceRange(rangeIndex);\n  149              auto& bindingInfo = pBlock->getResourceRangeBindingInfo(rangeIndex);\n  150:             assert(bindingInfo.flavor == ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock);\n  151              assert(resourceRange.count == 1); // TODO: The code here does not handle arrays of sub-objects\n  152  \n  ...\n  157      // Add the root descriptors from `pBlock` to the root signature being built.\n  158      static void addRootDescriptors(\n  159:         const ParameterBlockReflection*     pBlock,\n  160          RootSignature::Desc&                ioDesc)\n  161      {\n  ...\n  179              auto& bindingInfo = pBlock->getResourceRangeBindingInfo(rangeIndex);\n  180  \n  181:             if (bindingInfo.flavor != ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ConstantBuffer &&\n  182:                 bindingInfo.flavor != ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock)\n  183                  continue;\n  184  \n  ...\n  194          assert(pReflector);\n  195          RootSignature::Desc d;\n  196:         addParamBlockSets(pReflector->getDefaultParameterBlock().get(), d);\n  197:         addRootDescriptors(pReflector->getDefaultParameterBlock().get(), d);\n  198          return RootSignature::create(d);\n  199      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RootSignature.h:\n   37      /** The root signature defines what resources are bound to the pipeline.\n   38  \n   39:         The layout is defined by traversing the ParameterBlock hierarchy\n   40          of a program to find all required root parameters. These are then\n   41          arranged consecutively in the following order in the root signature:\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"ParameterBlock.h\"\n   30  #include \"Utils/StringUtils.h\"\n   31  #include \"Core/API/CopyContext.h\"\n   ..\n  248      }\n  249  \n  250:     ParameterBlock::~ParameterBlock() = default;\n  251  \n  252:     ParameterBlock::SharedPtr ParameterBlock::create(const std::shared_ptr<const ProgramVersion>& pProgramVersion, const ReflectionType::SharedConstPtr& pElementType)\n  253      {\n  254          if (!pElementType) throw std::exception(\"Can't create a parameter block without type information\");\n  255:         auto pReflection = ParameterBlockReflection::create(pProgramVersion.get(), pElementType);\n  256          return create(pReflection);\n  257      }\n  258  \n  259:     ParameterBlock::SharedPtr ParameterBlock::create(const ParameterBlockReflection::SharedConstPtr& pReflection)\n  260      {\n  261          assert(pReflection);\n  262:         return SharedPtr(new ParameterBlock(pReflection->getProgramVersion(), pReflection));\n  263      }\n  264  \n  265:     ParameterBlock::SharedPtr ParameterBlock::create(const std::shared_ptr<const ProgramVersion>& pProgramVersion, const std::string& typeName)\n  266      {\n  267          assert(pProgramVersion);\n  268:         return ParameterBlock::create(pProgramVersion, pProgramVersion->getReflector()->findType(typeName));\n  269      }\n  270  \n  271:     ParameterBlock::ParameterBlock(const std::shared_ptr<const ProgramVersion>& pProgramVersion, const ParameterBlockReflection::SharedConstPtr& pReflection)\n  272          : mpReflector(pReflection)\n  273          , mpProgramVersion(pProgramVersion)\n  ...\n  278          assert(pElementType);\n  279  \n  280:         // TODO: this counting should move to `ParameterBlockReflection`\n  281          auto rangeCount = pElementType->getResourceRangeCount();\n  282          for(uint32_t rr = 0; rr < rangeCount; ++rr)\n  ...\n  313          }\n  314  \n  315:         mParameterBlocks.resize(state.cbCount);\n  316          mSRVs.resize(state.srvCount);\n  317          mUAVs.resize(state.uavCount);\n  ...\n  322      }\n  323  \n  324:     void ParameterBlock::createConstantBuffers(const ShaderVar& var)\n  325      {\n  326          auto pType = var.getType();\n  ...\n  343                  case ReflectionResourceType::Type::ConstantBuffer:\n  344                      {\n  345:                         auto pCB = ParameterBlock::create(pResourceType->getParameterBlockReflector());\n  346:                         var.setParameterBlock(pCB);\n  347                      }\n  348                      break;\n  ...\n  359      }\n  360  \n  361:     ShaderVar ParameterBlock::getRootVar() const\n  362      {\n  363:         return ShaderVar(const_cast<ParameterBlock*>(this));\n  364      }\n  365  \n  366:     ShaderVar ParameterBlock::findMember(const std::string& varName) const\n  367      {\n  368          return getRootVar().findMember(varName);\n  369      }\n  370  \n  371:     ShaderVar ParameterBlock::findMember(uint32_t index) const\n  372      {\n  373          return getRootVar().findMember(index);\n  374      }\n  375  \n  376:     static ShaderVar getBufferBindLocation(ParameterBlock const* pObject, const std::string& name, ReflectionResourceType::Type bufferType)\n  377      {\n  378          auto var = pObject->getRootVar()[name];\n  ...\n  391      }\n  392  \n  393:     bool ParameterBlock::checkResourceIndices(const BindLocation& bindLocation, const char* funcName) const\n  394      {\n  395  #if _LOG_ENABLED\n  ...\n  417  \n  418      template<size_t N>\n  419:     bool ParameterBlock::checkDescriptorType(const BindLocation& bindLocation, const std::array<DescriptorSet::Type, N>& allowedTypes, const char* funcName) const\n  420      {\n  421  #if _LOG_ENABLED\n  ...\n  432      }\n  433  \n  434:     bool ParameterBlock::checkDescriptorSrvUavCommon(\n  435          const BindLocation& bindLocation,\n  436          const std::variant<ShaderResourceView::SharedPtr, UnorderedAccessView::SharedPtr>& pView,\n  ...\n  470      }\n  471  \n  472:     bool ParameterBlock::checkRootDescriptorResourceCompatibility(const Resource::SharedPtr& pResource, const std::string& funcName) const\n  473      {\n  474          if (!pResource) return true;\n  ...\n  517      }\n  518  \n  519:     size_t ParameterBlock::getFlatIndex(const BindLocation& bindLocation) const\n  520      {\n  521          auto rangeIndex = bindLocation.getResourceRangeIndex();\n  ...\n  524      }\n  525  \n  526:     bool ParameterBlock::setParameterBlock(const std::string& name, const ParameterBlock::SharedPtr& pCB)\n  527      {\n  528          auto var = getBufferBindLocation(this, name, ReflectionResourceType::Type::ConstantBuffer);\n  529          if(!var.isValid())\n  530          {\n  531:             logError(\"Parameter block \\\"\" + name + \"\\\" was not found. Ignoring setParameterBlock() call.\");\n  532              return false;\n  533          }\n  534:         return var.setParameterBlock(pCB);\n  535      }\n  536  \n  537:     uint32_t ParameterBlock::getDescriptorSetIndex(const BindLocation& bindLocation)\n  538      {\n  539          return mpReflector->getResourceRangeBindingInfo(bindLocation.getResourceRangeIndex()).descriptorSetIndex;\n  540      }\n  541  \n  542:     void ParameterBlock::markDescriptorSetDirty(const BindLocation& bindLocation)\n  543      {\n  544          markDescriptorSetDirty(getDescriptorSetIndex(bindLocation));\n  545      }\n  546  \n  547:     void ParameterBlock::markDescriptorSetDirty(uint32_t index) const\n  548      {\n  549:         if (index == ParameterBlockReflection::kInvalidIndex) return;\n  550          assert(index < mSets.size());\n  551  \n  ...\n  555      }\n  556  \n  557:     void ParameterBlock::markUniformDataDirty() const\n  558      {\n  559          auto epoch = mEpochOfLastChange++;\n  ...\n  569      }\n  570  \n  571:     bool ParameterBlock::setParameterBlock(const BindLocation& bindLocation, const ParameterBlock::SharedPtr& pBlock)\n  572      {\n  573:         if (!checkResourceIndices(bindLocation, \"setParameterBlock\")) return false;\n  574:         if (!checkDescriptorType(bindLocation, kCbvDescriptorType, \"setParameterBlock\")) return false;\n  575:         auto& assigned = mParameterBlocks[getFlatIndex(bindLocation)];\n  576  \n  577  #if 0\n  ...\n  590      }\n  591  \n  592:     ParameterBlock::SharedPtr ParameterBlock::getParameterBlock(const std::string& name) const\n  593      {\n  594          auto var = getBufferBindLocation(this, name, ReflectionResourceType::Type::ConstantBuffer);\n  595          if (!var.isValid())\n  596          {\n  597:             logError(\"Parameter block \\\"\" + name + \"\\\" was not found. Ignoring getParameterBlock() call.\");\n  598              return nullptr;\n  599          }\n  600:         return var.getParameterBlock();\n  601      }\n  602  \n  603:     ParameterBlock::SharedPtr ParameterBlock::getParameterBlock(const BindLocation& bindLocation) const\n  604      {\n  605:         if (!checkResourceIndices(bindLocation, \"getParameterBlock\")) return nullptr;\n  606:         if (!checkDescriptorType(bindLocation, kCbvDescriptorType, \"getParameterBlock\")) return nullptr;\n  607:         return mParameterBlocks[getFlatIndex(bindLocation)].pBlock;\n  608      }\n  609  \n  610:     bool ParameterBlock::setResourceSrvUavCommon(const BindLocation& bindLoc, const Resource::SharedPtr& pResource, const char* funcName)\n  611      {\n  612          size_t flatIndex = getFlatIndex(bindLoc);\n  ...\n  640      }\n  641  \n  642:     Resource::SharedPtr ParameterBlock::getResourceSrvUavCommon(const BindLocation& bindLoc, const char* funcName) const\n  643      {\n  644          if (!checkResourceIndices(bindLoc, funcName)) return nullptr;\n  ...\n  665      }\n  666  \n  667:     std::pair<Resource::SharedPtr, bool> ParameterBlock::getRootDescriptor(uint32_t resourceRangeIndex, uint32_t arrayIndex) const\n  668      {\n  669          assert(mpReflector->getResourceRangeBindingInfo(resourceRangeIndex).isRootDescriptor());\n  ...\n  680      }\n  681  \n  682:     bool ParameterBlock::setBuffer(const std::string& name, const Buffer::SharedPtr& pBuf)\n  683      {\n  684          // Find the buffer\n  ...\n  690      }\n  691  \n  692:     bool ParameterBlock::setBuffer(const BindLocation& bindLocation, const Buffer::SharedPtr& pBuf)\n  693      {\n  694          if (!bindLocation.isValid()) return false;\n  ...\n  697      }\n  698  \n  699:     Buffer::SharedPtr ParameterBlock::getBuffer(const std::string& name) const\n  700      {\n  701          // Find the buffer\n  ...\n  707      }\n  708  \n  709:     Buffer::SharedPtr ParameterBlock::getBuffer(const BindLocation& bindLocation) const\n  710      {\n  711          if (!bindLocation.isValid()) return nullptr;\n  ...\n  714      }\n  715  \n  716:     bool ParameterBlock::setSampler(const BindLocation& bindLocation, const Sampler::SharedPtr& pSampler)\n  717      {\n  718          if (!checkResourceIndices(bindLocation, \"setSampler()\")) return false;\n  ...\n  729      }\n  730  \n  731:     bool ParameterBlock::setSampler(const std::string& name, const Sampler::SharedPtr& pSampler)\n  732      {\n  733          auto var = getRootVar()[name];\n  ...\n  738      }\n  739  \n  740:     Sampler::SharedPtr ParameterBlock::getSampler(const std::string& name) const\n  741      {\n  742          auto var = getRootVar()[name];\n  ...\n  747      }\n  748  \n  749:     const Sampler::SharedPtr& ParameterBlock::getSampler(const BindLocation& bindLocation) const\n  750      {\n  751          static Sampler::SharedPtr pNull = nullptr;\n  ...\n  756      }\n  757  \n  758:     ShaderResourceView::SharedPtr ParameterBlock::getSrv(const BindLocation& bindLocation) const\n  759      {\n  760          if (!checkResourceIndices(bindLocation, \"getSrv()\")) return nullptr;\n  ...\n  764      }\n  765  \n  766:     UnorderedAccessView::SharedPtr ParameterBlock::getUav(const BindLocation& bindLocation) const\n  767      {\n  768          if (!checkResourceIndices(bindLocation, \"getUav()\")) return nullptr;\n  ...\n  772      }\n  773  \n  774:     bool ParameterBlock::setTexture(const std::string& name, const Texture::SharedPtr& pTexture)\n  775      {\n  776          auto var = getRootVar()[name];\n  ...\n  781      }\n  782  \n  783:     bool ParameterBlock::setTexture(const BindLocation& bindLocation, const Texture::SharedPtr& pTexture)\n  784      {\n  785          return setResourceSrvUavCommon(bindLocation, pTexture, \"setTexture()\");\n  786      }\n  787  \n  788:     Texture::SharedPtr ParameterBlock::getTexture(const std::string& name) const\n  789      {\n  790          auto var = getRootVar()[name];\n  ...\n  795      }\n  796  \n  797:     Texture::SharedPtr ParameterBlock::getTexture(const BindLocation& bindLocation) const\n  798      {\n  799          return getResourceSrvUavCommon(bindLocation, \"getTexture()\")->asTexture();\n  800      }\n  801  \n  802:     bool ParameterBlock::setSrv(const BindLocation& bindLocation, const ShaderResourceView::SharedPtr& pSrv)\n  803      {\n  804          if (!checkDescriptorSrvUavCommon(bindLocation, pSrv, \"setSrv()\")) return false;\n  ...\n  817      }\n  818  \n  819:     bool ParameterBlock::setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav)\n  820      {\n  821          if (!checkDescriptorSrvUavCommon(bindLocation, pUav, \"setUav()\")) return false;\n  ...\n  835      }\n  836  \n  837:     Buffer::ConstSharedPtrRef ParameterBlock::getUnderlyingConstantBuffer() const\n  838      {\n  839          updateSpecialization();\n  ...\n  856              // There are actually Slang reflection APIs that could tell us what we\n  857              // need to know (the starting offset of this extra \"pending\" data),\n  858:             // but the way the Falcor `ParameterBlockReflection` is structured today,\n  859              // we haven't held onto the relevant Slang reflection objects.\n  860              //\n  ...\n  875      }\n  876  \n  877:     ConstantBufferView::SharedPtr ParameterBlock::getUnderlyingConstantBufferView()\n  878      {\n  879          if (mUnderlyingConstantBuffer.pCBV == nullptr)\n  ...\n  925      }\n  926  \n  927:     UniformShaderVarOffset ParameterBlock::getVariableOffset(const std::string& varName) const\n  928      {\n  929          return getElementType()->getZeroOffset()[varName];\n  930      }\n  931  \n  932:     static bool hasChangedSince(ParameterBlock::ChangeEpoch current, ParameterBlock::ChangeEpoch lastObserved)\n  933      {\n  934          return current > lastObserved;\n  935      }\n  936  \n  937:     void ParameterBlock::checkForIndirectChanges(ParameterBlockReflection const* pReflector) const\n  938      {\n  939          // First off, we will recursively check any parameter blocks attached to use\n  ...\n  951                  continue;\n  952  \n  953:             case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface:\n  954:             case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ConstantBuffer:\n  955                  break;\n  956              }\n  ...\n  962              for(uint32_t i = 0; i < rangeInfo.count; ++i)\n  963              {\n  964:                 auto& assigned = getAssignedParameterBlock(r, i);\n  965                  auto& pSubObject = assigned.pBlock;\n  966  \n  ...\n  985                  for(uint32_t i = 0; i < subObjectCount; ++i)\n  986                  {\n  987:                     auto& assigned = getAssignedParameterBlock(resourceRangeIndex, i);\n  988                      auto& pSubObject = assigned.pBlock;\n  989  \n  ...\n 1006          {\n 1007              auto rangeBindingInfo = pReflector->getResourceRangeBindingInfo(r);\n 1008:             if(rangeBindingInfo.flavor != ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface)\n 1009                  continue;\n 1010  \n ....\n 1015              for(uint32_t i = 0; i < rangeInfo.count; ++i)\n 1016              {\n 1017:                 auto& assigned = getAssignedParameterBlock(r, i);\n 1018                  auto& pSubObject = assigned.pBlock;\n 1019  \n ....\n 1039                  continue;\n 1040  \n 1041:             case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface:\n 1042:             case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ConstantBuffer:\n 1043                  break;\n 1044              }\n ....\n 1050              for(uint32_t i = 0; i < rangeInfo.count; ++i)\n 1051              {\n 1052:                 auto& assigned = getAssignedParameterBlock(r, i);\n 1053                  auto& pSubObject = assigned.pBlock;\n 1054  \n ....\n 1058      }\n 1059  \n 1060:     ParameterBlock::ChangeEpoch ParameterBlock::computeEpochOfLastChange(ParameterBlock* pBlock)\n 1061      {\n 1062          pBlock->checkForIndirectChanges(pBlock->mpReflector.get());\n ....\n 1064      }\n 1065  \n 1066:     void ParameterBlock::validateUnderlyingConstantBuffer(\n 1067:         ParameterBlockReflection const* pReflector)\n 1068      {\n 1069          // There is no need to allocate and fill in the underlying constant\n ....\n 1109      }\n 1110  \n 1111:     void ParameterBlock::writeIntoBuffer(\n 1112:         ParameterBlockReflection const*   pReflector,\n 1113          char*                           pBuffer,\n 1114          size_t                          bufferSize)\n ....\n 1122          {\n 1123              auto rangeBindingInfo = pReflector->getResourceRangeBindingInfo(rr);\n 1124:             if(rangeBindingInfo.flavor != ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface)\n 1125                  continue;\n 1126  \n ....\n 1132              {\n 1133                  assert(ii == 0);\n 1134:                 auto pSubObject = getParameterBlock(rr, ii);\n 1135  \n 1136                  size_t subObjectOffset = rangeBindingInfo.regIndex;\n ....\n 1184  \n 1185      template<typename VarType>\n 1186:     bool ParameterBlock::setVariable(UniformShaderVarOffset offset, const VarType& value)\n 1187      {\n 1188          if(checkVariableByOffset<VarType>(offset.getByteOffset(), 1, getElementType().get()))\n ....\n 1196      }\n 1197  \n 1198: #define set_constant_by_offset(_t) template dlldecl bool ParameterBlock::setVariable(UniformShaderVarOffset offset, const _t& value)\n 1199  \n 1200      set_constant_by_offset(bool);\n ....\n 1234  #undef set_constant_by_offset\n 1235  \n 1236:     bool ParameterBlock::setBlob(const void* pSrc, size_t offset, size_t size)\n 1237      {\n 1238          if((_LOG_ENABLED != 0) && (offset + size > mData.size()))\n ....\n 1247      }\n 1248  \n 1249:     bool ParameterBlock::setBlob(const void* pSrc, UniformShaderVarOffset loc, size_t size)\n 1250      {\n 1251          return setBlob(pSrc, loc.getByteOffset(), size);\n 1252      }\n 1253  \n 1254:     size_t ParameterBlock::getElementSize() const\n 1255      {\n 1256          return getElementType()->getByteSize();\n 1257      }\n 1258  \n 1259:     void ParameterBlock::renderUI(Gui::Widgets& widget)\n 1260      {\n 1261          VariablesBufferUI variablesBufferUI(*this);\n ....\n 1292      }\n 1293  \n 1294:     ParameterBlock::SharedPtr const& ParameterBlock::getParameterBlock(uint32_t resourceRangeIndex, uint32_t arrayIndex) const\n 1295      {\n 1296          auto rangeInfo = mpReflector->getElementType()->getResourceRange(resourceRangeIndex);\n 1297:         return mParameterBlocks[rangeInfo.baseIndex + arrayIndex].pBlock;\n 1298      }\n 1299  \n 1300:     ParameterBlock::AssignedParameterBlock const& ParameterBlock::getAssignedParameterBlock(uint32_t resourceRangeIndex, uint32_t arrayIndex) const\n 1301      {\n 1302          auto rangeInfo = mpReflector->getElementType()->getResourceRange(resourceRangeIndex);\n 1303:         return mParameterBlocks[rangeInfo.baseIndex + arrayIndex];\n 1304      }\n 1305  \n 1306:     bool ParameterBlock::bindIntoDescriptorSet(\n 1307:         const ParameterBlockReflection* pReflector,\n 1308          DescriptorSet::SharedPtr        pDescSet,\n 1309          uint32_t                        setIndex,\n ....\n 1325      }\n 1326  \n 1327:     bool ParameterBlock::bindResourcesIntoDescriptorSet(\n 1328:         const ParameterBlockReflection* pReflector,\n 1329          DescriptorSet::SharedPtr        pDescSet,\n 1330          uint32_t                        setIndex,\n ....\n 1354                          // TODO(tfoley): Shouldn't actually be setting CBV here,\n 1355                          // since that should be the responsibility of the nested\n 1356:                         // `ParameterBlock`.\n 1357                          //\n 1358:                         ParameterBlock* pCB = mCBs[flatIndex].get();\n 1359                          ConstantBufferView::SharedPtr pView = pCB ? pCB->getCbv() : ConstantBufferView::getNullView();\n 1360                          pDescSet->setCbv(destRangeIndex, descriptorIndex, pView.get());\n ....\n 1411                  assert(subObjectCount == 1);\n 1412  \n 1413:                 auto pSubObject = getParameterBlock(resourceRangeIndex, i);\n 1414:                 if( pReflector->getResourceRangeBindingInfo(resourceRangeIndex).flavor == ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface )\n 1415                  {\n 1416                      pSubObject->bindResourcesIntoDescriptorSet(\n ....\n 1434      }\n 1435  \n 1436:     bool ParameterBlock::updateSpecialization() const\n 1437      {\n 1438          auto pSlangTypeLayout = getElementType()->getSlangTypeLayout();\n ....\n 1454      }\n 1455  \n 1456:     void ParameterBlock::collectSpecializationArgs(ParameterBlock::SpecializationArgs& ioArgs) const\n 1457      {\n 1458          auto pReflector = getReflection();\n ....\n 1464              switch( rangeBindingInfo.flavor )\n 1465              {\n 1466:             case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface:\n 1467                  {\n 1468                      // For now we only support declarations of single interface-type\n ....\n 1479                      assert(rangeInfo.count == 1);\n 1480  \n 1481:                     auto pSubObject = getParameterBlock(r, 0);\n 1482  \n 1483                      // TODO: We should actually be querying the specialized element type\n ....\n 1493                  break;\n 1494  \n 1495:             case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ConstantBuffer:\n 1496:             case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock:\n 1497                  {\n 1498                      assert(rangeInfo.count == 1);\n 1499:                     auto pSubObject = getParameterBlock(r, 0);\n 1500                      pSubObject->collectSpecializationArgs(ioArgs);\n 1501                  }\n ....\n 1508      }\n 1509  \n 1510:     bool ParameterBlock::updateSpecializationImpl() const\n 1511      {\n 1512          // We want to compute the specialized layout that this object\n ....\n 1549          auto pSpecializedSlangTypeLayout = pSlangSession->getTypeLayout(pSpecializedSlangType);\n 1550  \n 1551:         mpSpecializedReflector = ParameterBlockReflection::create(mpProgramVersion.get(), pSpecializedSlangTypeLayout);\n 1552  \n 1553          return true;\n 1554      }\n 1555  \n 1556:     bool ParameterBlock::prepareDefaultConstantBufferAndResources(\n 1557          CopyContext*                        pContext,\n 1558:         ParameterBlockReflection const*     pReflector)\n 1559      {\n 1560          if( pReflector->hasDefaultConstantBuffer() )\n ....\n 1566      }\n 1567  \n 1568:     bool ParameterBlock::prepareResources(\n 1569          CopyContext*                    pContext,\n 1570:         ParameterBlockReflection const* pReflector)\n 1571      {\n 1572          // Prepare all bound resources by inserting appropriate barriers/transitions as needed.\n ....\n 1586          {\n 1587              auto& bindingInfo = pReflector->getResourceRangeBindingInfo(resourceRangeIndex);\n 1588:             if (bindingInfo.flavor == ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Simple ||\n 1589:                 bindingInfo.flavor == ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::RootDescriptor)\n 1590              {\n 1591                  continue;\n ....\n 1598              for(uint32_t i = 0; i < objectCount; ++i)\n 1599              {\n 1600:                 auto& assigned = getAssignedParameterBlock(resourceRangeIndex, i);\n 1601                  auto pSubBlock = assigned.pBlock;\n 1602  \n 1603                  switch(bindingInfo.flavor)\n 1604                  {\n 1605:                 case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ConstantBuffer:\n 1606                      if( !pSubBlock->prepareDefaultConstantBufferAndResources(pContext, pSubObjectReflector) )\n 1607                      {\n ....\n 1610                      break;\n 1611  \n 1612:                 case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock:\n 1613                      if( !pSubBlock->prepareDescriptorSets(pContext, pSubObjectReflector) )\n 1614                      {\n ....\n 1617                      break;\n 1618  \n 1619:                 case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface:\n 1620                      if( !pSubBlock->prepareResources(pContext, pSubObjectReflector) )\n 1621                      {\n ....\n 1634      }\n 1635  \n 1636:     bool ParameterBlock::prepareDescriptorSets(CopyContext* pContext)\n 1637      {\n 1638          // Note: allocating and filling in descriptor sets will always\n ....\n 1647      }\n 1648  \n 1649:     bool ParameterBlock::prepareDescriptorSets(\n 1650          CopyContext*                    pContext,\n 1651:         const ParameterBlockReflection* pReflector)\n 1652      {\n 1653          // We first need to check for \"indirect\" changes, where a write to\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n   40      class ProgramVersion;\n   41  \n   42:     /** Shared pointer class for `ParameterBlock` and derived classes.\n   43          This smart pointer type adds syntax sugar for `operator[]` so that it implicitly operates on a `ShaderVar` derived from the contents of the buffer.\n   44      */\n   45      template<typename T>\n   46:     class ParameterBlockSharedPtr : public std::shared_ptr<T>\n   47      {\n   48      public:\n   49:         ParameterBlockSharedPtr() : std::shared_ptr<T>() {}\n   50:         explicit ParameterBlockSharedPtr(T* pObject) : std::shared_ptr<T>(pObject) {}\n   51:         constexpr ParameterBlockSharedPtr(nullptr_t) : std::shared_ptr<T>(nullptr) {}\n   52:         ParameterBlockSharedPtr(const std::shared_ptr<T>& pObject) : std::shared_ptr<T>(pObject) {}\n   53  \n   54:         /** Implicitly convert a `ShaderVar` to a `ParameterBlock` pointer.\n   55          */\n   56:         ParameterBlockSharedPtr(const ShaderVar& var) : std::shared_ptr<T>(var.getParameterBlock()) {}\n   57  \n   58          /** Get a shader variable that points to the root/contents of the parameter block.\n   ..\n   98      /** A parameter block. This block stores all the parameter data associated with a specific type in shader code\n   99      */\n  100:     class dlldecl ParameterBlock\n  101      {\n  102      public:\n  103:         using SharedPtr = ParameterBlockSharedPtr<ParameterBlock>;\n  104:         using SharedConstPtr = std::shared_ptr<const ParameterBlock>;\n  105          using ConstSharedPtrRef = const SharedPtr&;\n  106:         ~ParameterBlock();\n  107  \n  108:         using BindLocation = ParameterBlockReflection::BindLocation;\n  109  \n  110          /** Create a new object that holds a value of the given type.\n  ...\n  114          /** Create a new object that holds a value described by the given reflector.\n  115          */\n  116:         static SharedPtr create(const ParameterBlockReflection::SharedConstPtr& pReflection);\n  117  \n  118          /** Create a new object that holds a value of the type with the given name in the given program.\n  ...\n  189              \\return false is the call failed, otherwise true\n  190          */\n  191:         bool setParameterBlock(const std::string& name, const ParameterBlock::SharedPtr& pBlock);\n  192  \n  193          /** Bind a parameter block by index.\n  ...\n  197              \\return false is the call failed, otherwise true\n  198          */\n  199:         bool setParameterBlock(const BindLocation& bindLocation, const ParameterBlock::SharedPtr& pBlock);\n  200  \n  201          /** Get a parameter block.\n  ...\n  203              \\return If the name is valid, a shared pointer to the parameter block. Otherwise returns nullptr\n  204          */\n  205:         ParameterBlock::SharedPtr getParameterBlock(const std::string& name) const;\n  206  \n  207          /** Get a parameter block.\n  ...\n  209              \\return If the indices is valid, a shared pointer to the parameter block. Otherwise returns nullptr\n  210          */\n  211:         ParameterBlock::SharedPtr getParameterBlock(const BindLocation& bindLocation) const;\n  212  \n  213          /** Bind a texture. Based on the shader reflection, it will be bound as either an SRV or a UAV\n  ...\n  276          /** Get the parameter block's reflection interface\n  277          */\n  278:         ParameterBlockReflection::SharedConstPtr getReflection() const { return mpReflector; }\n  279  \n  280          /** Get the block reflection type\n  ...\n  311  \n  312          bool updateSpecialization() const;\n  313:         ParameterBlockReflection::SharedConstPtr getSpecializedReflector() const { return mpSpecializedReflector; }\n  314  \n  315          bool prepareDescriptorSets(CopyContext* pCopyContext);\n  ...\n  321  \n  322          void renderUI(Gui::Widgets& widget);\n  323:         ParameterBlock::ConstSharedPtrRef getParameterBlock(uint32_t resourceRangeIndex, uint32_t arrayIndex) const;\n  324  \n  325          // Delete some functions. If they are not deleted, the compiler will try to convert the uints to string, resulting in runtime error\n  ...\n  345          friend class VariablesBufferUI;\n  346  \n  347:         ParameterBlock(\n  348              const std::shared_ptr<const ProgramVersion>& pProgramVersion,\n  349:             const ParameterBlockReflection::SharedConstPtr& pReflection);\n  350  \n  351          std::shared_ptr<const ProgramVersion> mpProgramVersion;\n  352:         ParameterBlockReflection::SharedConstPtr mpReflector;\n  353:         mutable ParameterBlockReflection::SharedConstPtr mpSpecializedReflector;\n  354          std::vector<uint8_t> mData;\n  355  \n  ...\n  362  \n  363          void validateUnderlyingConstantBuffer(\n  364:             ParameterBlockReflection const*   pReflector);\n  365  \n  366          void writeIntoBuffer(\n  367:             ParameterBlockReflection const*   pReflector,\n  368              char*                           pBuffer,\n  369              size_t                          bufferSize);\n  ...\n  371          bool prepareDescriptorSets(\n  372              CopyContext*                    pCopyContext,\n  373:             const ParameterBlockReflection* pReflector);\n  374          bool prepareDefaultConstantBufferAndResources(\n  375              CopyContext*                        pContext,\n  376:             ParameterBlockReflection const*     pReflector);\n  377          bool prepareResources(\n  378              CopyContext*                    pContext,\n  379:             ParameterBlockReflection const* pReflector);\n  380  \n  381          bool bindIntoDescriptorSet(\n  382:             const ParameterBlockReflection*   pReflector,\n  383              DescriptorSet::SharedPtr        pDescSet,\n  384              uint32_t                        setIndex,\n  ...\n  386  \n  387          bool bindResourcesIntoDescriptorSet(\n  388:             const ParameterBlockReflection*   pReflector,\n  389              DescriptorSet::SharedPtr        pDescSet,\n  390              uint32_t                        setIndex,\n  ...\n  403          };\n  404  \n  405:         struct AssignedParameterBlock\n  406          {\n  407:             ParameterBlock::SharedPtr   pBlock;\n  408              mutable ChangeEpoch epochOfLastObservedChange = 0;\n  409          };\n  410  \n  411:         std::vector<AssignedParameterBlock>     mParameterBlocks;\n  412          std::vector<AssignedSRV>                mSRVs;              ///< All SRVs bound to descriptor sets or root descriptors.\n  413          std::vector<AssignedUAV>                mUAVs;              ///< All UAVs bound to descriptor sets or root descriptors.\n  414          std::vector<Sampler::SharedPtr>         mSamplers;\n  415  \n  416:         AssignedParameterBlock const& getAssignedParameterBlock(uint32_t resourceRangeIndex, uint32_t arrayIndex) const;\n  417  \n  418          size_t getFlatIndex(const BindLocation& bindLocation) const;\n  ...\n  433          mutable ChangeEpoch mEpochOfLastChange = 1;\n  434  \n  435:         static ChangeEpoch getEpochOfLastChange(ParameterBlock* pBlock) { return pBlock->mEpochOfLastChange; }\n  436:         static ChangeEpoch computeEpochOfLastChange(ParameterBlock* pBlock);\n  437  \n  438:         void checkForIndirectChanges(ParameterBlockReflection const* pReflector) const;\n  439  \n  440          mutable uint32_t mDescriptorSetResourceDataVersion = 0;\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/VariablesBufferUI.h:\n   33      // Forward declares for gui draw func\n   34      class Gui;\n   35:     class ParameterBlock;\n   36  \n   37      class dlldecl VariablesBufferUI\n   38      {\n   39      public:\n   40:         VariablesBufferUI(ParameterBlock& variablesBufferRef) : mVariablesBufferRef(variablesBufferRef) {}\n   41          void renderUI(Gui::Widgets& widget);\n   42  \n   43      private:\n   44:         ParameterBlock& mVariablesBufferRef;\n   45          static std::unordered_map<std::string, int32_t> mGuiArrayIndices;\n   46  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.cpp:\n  629      static ComPtr<slang::IComponentType> doSlangSpecialization(\n  630          slang::IComponentType*                      pSlangProgram,\n  631:         ParameterBlock::SpecializationArgs const&   specializationArgs,\n  632          std::string&                                log)\n  633      {\n  ...\n  660          // parameters here, using the global `ProgramVars`.\n  661          //\n  662:         ParameterBlock::SpecializationArgs specializationArgs;\n  663          pVars->collectSpecializationArgs(specializationArgs);\n  664  \n  ...\n  701          // ordering of parameters at the global scope or within a\n  702          // given entry-point group will not change, so that when\n  703:         // `ParameterBlock`s and their descriptor tables/sets are allocated\n  704          // using the unspecialized `ProgramReflection`, they will still\n  705          // be valid to bind to the specialized program.\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.cpp:\n  205          switch (pSlangType->unwrapArray()->getKind())\n  206          {\n  207:         case TypeReflection::Kind::ParameterBlock:\n  208          case TypeReflection::Kind::ConstantBuffer:\n  209              return ReflectionResourceType::Type::ConstantBuffer;\n  ...\n  480          VariableLayoutReflection*   pSlangLayout,\n  481          ShaderVarOffset::RangeIndex rangeIndex,\n  482:         ParameterBlockReflection*   pBlock,\n  483          ReflectionPath*             pPath,\n  484          ProgramVersion const*       pProgramVersion);\n  ...\n  486      ReflectionType::SharedPtr reflectType(\n  487          TypeLayoutReflection*       pSlangType,\n  488:         ParameterBlockReflection*   pBlock,\n  489          ReflectionPath*             pPath,\n  490          ProgramVersion const*       pProgramVersion);\n  ...\n  530                  // functions to handle this stuff.\n  531                  //\n  532:                 if(pp->pVar->getType()->getKind() == slang::TypeReflection::Kind::ParameterBlock\n  533                      && hasUsage(pp->pVar->getTypeLayout(), SLANG_PARAMETER_CATEGORY_REGISTER_SPACE)\n  534                      && category != SLANG_PARAMETER_CATEGORY_REGISTER_SPACE)\n  ...\n  564                  // to compute this.\n  565                  //\n  566:                 if(pp->pVar->getTypeLayout()->getKind() == slang::TypeReflection::Kind::ParameterBlock)\n  567                  {\n  568                      return offset + (uint32_t) getRegisterIndexFromPath(pp, SLANG_PARAMETER_CATEGORY_REGISTER_SPACE);\n  ...\n  585      ReflectionType::SharedPtr reflectResourceType(\n  586          TypeLayoutReflection*       pSlangType,\n  587:         ParameterBlockReflection*   pBlock,\n  588          ReflectionPath*             pPath,\n  589          ProgramVersion const*       pProgramVersion)\n  ...\n  635  \n  636          ParameterCategory category = getParameterCategory(pSlangType);\n  637:         ParameterBlockReflection::ResourceRangeBindingInfo bindingInfo;\n  638          bindingInfo.regIndex = (uint32_t)getRegisterIndexFromPath(pPath->pPrimary, category);\n  639          bindingInfo.regSpace = getRegisterSpaceFromPath(pPath->pPrimary, category);\n  640  \n  641:         if (isRootDescriptor) bindingInfo.flavor = ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::RootDescriptor;\n  642  \n  643          switch (type)\n  ...\n  666          {\n  667              // We have a sub-parameter-block (whether a true parameter block, or just a constant buffer)\n  668:             auto pSubBlock = ParameterBlockReflection::createEmpty(pProgramVersion);\n  669              const auto& pElementLayout = pSlangType->getElementTypeLayout();\n  670              auto pElementType = reflectType(\n  ...\n  677              if (pElementType->getByteSize() != 0)\n  678              {\n  679:                 ParameterBlockReflection::DefaultConstantBufferBindingInfo defaultConstantBufferInfo;\n  680                  defaultConstantBufferInfo.regIndex = bindingInfo.regIndex;\n  681                  defaultConstantBufferInfo.regSpace = bindingInfo.regSpace;\n  ...\n  686  \n  687              pType->setStructType(pElementType);\n  688:             pType->setParameterBlockReflector(pSubBlock);\n  689  \n  690              // TODO: `pSubBlock` should probably get stored on the\n  691              // `ReflectionResourceType` somwhere, so that we can\n  692              // retrieve it later without having to use a parent\n  693:             // `ParameterBlockReflection` to look it up.\n  694  \n  695:             if (pSlangType->getKind() == slang::TypeReflection::Kind::ParameterBlock)\n  696              {\n  697:                 bindingInfo.flavor = ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock;\n  698              }\n  699              else\n  700              {\n  701:                 bindingInfo.flavor = ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ConstantBuffer;\n  702              }\n  703              bindingInfo.pSubObjectReflector = pSubBlock;\n  ...\n  716      ReflectionType::SharedPtr reflectStructType(\n  717          TypeLayoutReflection*       pSlangType,\n  718:         ParameterBlockReflection*   pBlock,\n  719          ReflectionPath*             pPath,\n  720          ProgramVersion const*       pProgramVersion)\n  ...\n  757      ReflectionType::SharedPtr reflectArrayType(\n  758          TypeLayoutReflection*       pSlangType,\n  759:         ParameterBlockReflection*   pBlock,\n  760          ReflectionPath*             pPath,\n  761          ProgramVersion const*       pProgramVersion)\n  ...\n  786      ReflectionType::SharedPtr reflectInterfaceType(\n  787          TypeLayoutReflection*       pSlangType,\n  788:         ParameterBlockReflection*   pBlock,\n  789          ReflectionPath*             pPath,\n  790          ProgramVersion const*       pProgramVersion)\n  ...\n  793  \n  794          ParameterCategory category = getParameterCategory(pSlangType);\n  795:         ParameterBlockReflection::ResourceRangeBindingInfo bindingInfo;\n  796          bindingInfo.regIndex = (uint32_t)getRegisterIndexFromPath(pPath->pPrimary, category);\n  797          bindingInfo.regSpace = getRegisterSpaceFromPath(pPath->pPrimary, category);\n  798  \n  799:         bindingInfo.flavor = ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface;\n  800  \n  801          if(auto pSlangPendingTypeLayout = pSlangType->getPendingDataTypeLayout())\n  ...\n  805              subPath.pDeferred = nullptr;\n  806  \n  807:             auto pPendingBlock = ParameterBlockReflection::createEmpty(pProgramVersion);\n  808              auto pPendingType = reflectType(\n  809                  pSlangPendingTypeLayout,\n  ...\n  817              pPendingBlock->finalize();\n  818  \n  819:             pType->setParameterBlockReflector(pPendingBlock);\n  820  \n  821              bindingInfo.pSubObjectReflector = pPendingBlock;\n  ...\n  836      ReflectionType::SharedPtr reflectSpecializedType(\n  837          TypeLayoutReflection*       pSlangType,\n  838:         ParameterBlockReflection*   pBlock,\n  839          ReflectionPath*             pPath,\n  840          ProgramVersion const*       pProgramVersion)\n  ...\n  861      ReflectionType::SharedPtr reflectType(\n  862          TypeLayoutReflection*       pSlangType,\n  863:         ParameterBlockReflection*   pBlock,\n  864          ReflectionPath*             pPath,\n  865          ProgramVersion const*       pProgramVersion)\n  ...\n  869          switch (kind)\n  870          {\n  871:         case TypeReflection::Kind::ParameterBlock:\n  872              kind = kind;\n  873          case TypeReflection::Kind::Resource:\n  ...\n  912              {\n  913              case TypeReflection::Kind::ConstantBuffer:\n  914:             case TypeReflection::Kind::ParameterBlock:\n  915              case TypeReflection::Kind::None:\n  916                  category = ParameterCategory::ConstantBuffer;\n  ...\n  929          VariableLayoutReflection*   pSlangLayout,\n  930          ShaderVarOffset::RangeIndex rangeIndex,\n  931:         ParameterBlockReflection*   pBlock,\n  932          ReflectionPath*             pPath,\n  933          ProgramVersion const*       pProgramVersion)\n  ...\n  956          VariableLayoutReflection*   pSlangLayout,\n  957          ShaderVarOffset::RangeIndex rangeIndex,\n  958:         ParameterBlockReflection*   pBlock,\n  959          ProgramVersion const*       pProgramVersion)\n  960      {\n  ...\n 1052      }\n 1053  \n 1054:     std::shared_ptr<const ProgramVersion> ParameterBlockReflection::getProgramVersion() const\n 1055      {\n 1056          return mpProgramVersion->shared_from_this();\n ....\n 1067          ReflectionStructType::SharedPtr pGlobalStruct = ReflectionStructType::create(0, \"\", nullptr);\n 1068  \n 1069:         ParameterBlockReflection::SharedPtr pDefaultBlock = ParameterBlockReflection::createEmpty(pProgramVersion);\n 1070          pDefaultBlock->setElementType(pGlobalStruct);\n 1071:         setDefaultParameterBlock(pDefaultBlock);\n 1072      }\n 1073  \n 1074      EntryPointGroupReflection::EntryPointGroupReflection(\n 1075          ProgramVersion const* pProgramVersion)\n 1076:         : ParameterBlockReflection(pProgramVersion)\n 1077      {}\n 1078  \n ....\n 1185              auto regSpace = getRegisterSpaceFromPath(path.pPrimary, category);\n 1186  \n 1187:             ParameterBlockReflection::DefaultConstantBufferBindingInfo defaultConstantBufferInfo;\n 1188              defaultConstantBufferInfo.regIndex = regIndex;\n 1189              defaultConstantBufferInfo.regSpace = regSpace;\n ....\n 1240          // For the most part the program scope needs to be refelcted like a struct type\n 1241          ReflectionStructType::SharedPtr pGlobalStruct = ReflectionStructType::create(0, \"\", nullptr);\n 1242:         ParameterBlockReflection::SharedPtr pDefaultBlock = ParameterBlockReflection::createEmpty(pProgramVersion);\n 1243          pDefaultBlock->setElementType(pGlobalStruct);\n 1244  \n ....\n 1257  \n 1258          pDefaultBlock->finalize();\n 1259:         setDefaultParameterBlock(pDefaultBlock);\n 1260  \n 1261          auto pProgram = pProgramVersion->getProgram();\n ....\n 1303      }\n 1304  \n 1305:     void ProgramReflection::setDefaultParameterBlock(const ParameterBlockReflection::SharedPtr& pBlock)\n 1306      {\n 1307          mpDefaultBlock = pBlock;\n ....\n 1405      //\n 1406  \n 1407:     ParameterBlockReflection::ParameterBlockReflection(\n 1408          ProgramVersion const* pProgramVersion)\n 1409          : mpProgramVersion(pProgramVersion)\n ....\n 1411      }\n 1412  \n 1413:     ParameterBlockReflection::SharedPtr ParameterBlockReflection::createEmpty(\n 1414          ProgramVersion const* pProgramVersion)\n 1415      {\n 1416:         return SharedPtr(new ParameterBlockReflection(pProgramVersion));\n 1417      }\n 1418  \n 1419:     void ParameterBlockReflection::setElementType(\n 1420          ReflectionType::SharedConstPtr const& pElementType)\n 1421      {\n ....\n 1424      }\n 1425  \n 1426:     ParameterBlockReflection::SharedPtr ParameterBlockReflection::create(\n 1427          ProgramVersion const* pProgramVersion,\n 1428          ReflectionType::SharedConstPtr const& pElementType)\n ....\n 1503      }\n 1504  \n 1505:     ParameterBlockReflection::SharedPtr ParameterBlockReflection::create(\n 1506          ProgramVersion const* pProgramVersion,\n 1507          slang::TypeLayoutReflection* pSlangElementType)\n 1508      {\n 1509:         auto pResult = ParameterBlockReflection::createEmpty(pProgramVersion);\n 1510  \n 1511          ReflectionPath path;\n ....\n 1562      }\n 1563  \n 1564:     const ReflectionVar::SharedConstPtr ParameterBlockReflection::getResource(const std::string& name) const\n 1565      {\n 1566          return getElementType()->findMember(name);\n 1567      }\n 1568  \n 1569:     void ParameterBlockReflection::addResourceRange(\n 1570          ResourceRangeBindingInfo const& bindingInfo)\n 1571      {\n ....\n 1573      }\n 1574  \n 1575:     struct ParameterBlockReflectionFinalizer\n 1576      {\n 1577          struct SetIndex\n ....\n 1594  \n 1595          std::map<SetIndex, uint32_t> newSetIndices;\n 1596:         ParameterBlockReflection* pPrimaryReflector;\n 1597  \n 1598          uint32_t computeDescriptorSetIndex(\n ....\n 1618          uint32_t computeDescriptorSetIndex(\n 1619              const ReflectionType::ResourceRange&                    range,\n 1620:             const ParameterBlockReflection::ResourceRangeBindingInfo& bindingInfo)\n 1621          {\n 1622              return computeDescriptorSetIndex(bindingInfo.regSpace, range.descriptorType);\n ....\n 1625          void addSubObjectResources(\n 1626              uint32_t subObjectResourceRangeIndex,\n 1627:             ParameterBlockReflection const* pSubObjectReflector,\n 1628              bool shouldSkipDefaultConstantBufferRange)\n 1629          {\n ....\n 1644                  auto& setInfo = pPrimaryReflector->mDescriptorSets[setIndex];\n 1645  \n 1646:                 ParameterBlockReflection::DescriptorSetInfo::SubObjectInfo subObjectInfo;\n 1647                  subObjectInfo.resourceRangeIndexOfSubObject = subObjectResourceRangeIndex;\n 1648                  subObjectInfo.setIndexInSubObject = subSetIndex;\n ....\n 1670          }\n 1671  \n 1672:         void finalize(ParameterBlockReflection* pReflector)\n 1673          {\n 1674              pPrimaryReflector = pReflector;\n ....\n 1703                  switch (rangeBindingInfo.flavor)\n 1704                  {\n 1705:                 case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Simple:\n 1706                  {\n 1707                      auto setIndex = computeDescriptorSetIndex(range, rangeBindingInfo);\n ....\n 1720                  break;\n 1721  \n 1722:                 case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::RootDescriptor:\n 1723                      if (range.count > 1)\n 1724                      {\n ....\n 1728                      break;\n 1729  \n 1730:                 case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ConstantBuffer:\n 1731:                 case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock:\n 1732:                 case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface:\n 1733                      break;\n 1734                  default:\n ....\n 1742                  auto& rangeBindingInfo = pReflector->mResourceRanges[rangeIndex];\n 1743  \n 1744:                 if (rangeBindingInfo.flavor != ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ConstantBuffer)\n 1745                      continue;\n 1746  \n ....\n 1752              {\n 1753                  auto& rangeBindingInfo = pReflector->mResourceRanges[rangeIndex];\n 1754:                 if (rangeBindingInfo.flavor != ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock)\n 1755                      continue;\n 1756  \n 1757:                 pReflector->mParameterBlockSubObjectRangeIndices.push_back(rangeIndex);\n 1758              }\n 1759  \n ....\n 1763                  auto& rangeBindingInfo = pReflector->mResourceRanges[rangeIndex];\n 1764  \n 1765:                 if(rangeBindingInfo.flavor != ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::Interface)\n 1766                      continue;\n 1767  \n ....\n 1777      };\n 1778  \n 1779:     bool ParameterBlockReflection::hasDefaultConstantBuffer() const\n 1780      {\n 1781          // A parameter block needs a \"default\" constant buffer whenever its element type requires it to store ordinary/uniform data\n ....\n 1783      }\n 1784  \n 1785:     void ParameterBlockReflection::setDefaultConstantBufferBindingInfo(DefaultConstantBufferBindingInfo const& info)\n 1786      {\n 1787          mDefaultConstantBufferBindingInfo = info;\n 1788      }\n 1789  \n 1790:     ParameterBlockReflection::DefaultConstantBufferBindingInfo const& ParameterBlockReflection::getDefaultConstantBufferBindingInfo() const\n 1791      {\n 1792          return mDefaultConstantBufferBindingInfo;\n 1793      }\n 1794  \n 1795:     void ParameterBlockReflection::finalize()\n 1796      {\n 1797          assert(getElementType()->getResourceRangeCount() == mResourceRanges.size());\n 1798  \n 1799:         ParameterBlockReflectionFinalizer finalizer;\n 1800          finalizer.finalize(this);\n 1801      }\n ....\n 1806      }\n 1807  \n 1808:     ParameterBlockReflection::SharedConstPtr ProgramReflection::getParameterBlock(const std::string& name) const\n 1809      {\n 1810          if(name == \"\")\n 1811              return mpDefaultBlock;\n 1812  \n 1813:         return mpDefaultBlock->getElementType()->findMember(name)->getType()->asResourceType()->getParameterBlockReflector()->shared_from_this();\n 1814      }\n 1815  \n ....\n 2006          , mName(name) {}\n 2007  \n 2008:     ParameterBlockReflection::BindLocation ParameterBlockReflection::getResourceBinding(const std::string& name) const\n 2009      {\n 2010          return getElementType()->getMemberOffset(name);\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n   41      class ReflectionArrayType;\n   42      class ReflectionInterfaceType;\n   43:     class ParameterBlockReflection;\n   44  \n   45      /** Represents the offset of a uniform shader variable relative to its enclosing type/buffer/block.\n   ..\n   52      to indicate that a particular uniform variable is not present.\n   53  \n   54:     A `UniformShaderVarOffset` can be obtained from a reflection type or `ParameterBlock` using the\n   55      `[]` subscript operator:\n   56  \n   ..\n  191      for both the range and array indices), to indicate that a particular resource variable is not present.\n  192  \n  193:     A `ResourceShaderVarOffset` can be obtained from a reflection type or `ParameterBlock` using the\n  194      `[]` subscript operator:\n  195  \n  ...\n  198  \n  199      Please note that the concepts of resource \"ranges\" are largely an implementation detail of\n  200:     the `ParameterBlock` type, and most user code should not attempt to explicitly work with\n  201      or reason about resource ranges. In particular, there is *no* correspondance between resource\n  202      range indices and the `register`s or `binding`s assigned to shader parameters.\n  ...\n  337      shader variable is not present.\n  338  \n  339:     A `ShaderVarOffset` can be obtained from a reflection type or `ParameterBlock` using the\n  340      `[]` subscript operator:\n  341  \n  ...\n  507      shader variable is not present.\n  508  \n  509:     A `TypedShaderVarOffset` can be obtained from a reflection type or `ParameterBlock` using the\n  510      `[]` subscript operator:\n  511  \n  ...\n  707  \n  708          The `ResourceRange` type is mostly an implementation detail\n  709:         of `ReflectionType` that supports `ParameterBlock` and users\n  710          should probably not rely on this information.\n  711          */\n  ...\n  725              flattened arrays, where would this range start?\n  726  \n  727:             This is entirely an implementation detail of `ParameterBlock`.\n  728              */\n  729              uint32_t baseIndex;\n  ...\n 1045          const ReflectionType::SharedConstPtr& getStructType() const { return mpStructType; }\n 1046  \n 1047:         const std::shared_ptr<const ParameterBlockReflection>& getParameterBlockReflector() const { return mpParameterBlockReflector; }\n 1048:         void setParameterBlockReflector(const std::shared_ptr<const ParameterBlockReflection>& pReflector)\n 1049          {\n 1050:             mpParameterBlockReflector = pReflector;\n 1051          }\n 1052  \n ....\n 1087          Type mType;\n 1088          ReflectionType::SharedConstPtr mpStructType;   // For constant- and structured-buffers\n 1089:         std::shared_ptr<const ParameterBlockReflection> mpParameterBlockReflector; // For constant buffers and parameter blocks\n 1090      };\n 1091  \n ....\n 1105          bool operator==(const ReflectionType& other) const override;\n 1106  \n 1107:         const std::shared_ptr<const ParameterBlockReflection>& getParameterBlockReflector() const { return mpParameterBlockReflector; }\n 1108:         void setParameterBlockReflector(const std::shared_ptr<const ParameterBlockReflection>& pReflector)\n 1109          {\n 1110:             mpParameterBlockReflector = pReflector;\n 1111          }\n 1112  \n ....\n 1115              slang::TypeLayoutReflection*    pSlangTypeLayout);\n 1116  \n 1117:         std::shared_ptr<const ParameterBlockReflection> mpParameterBlockReflector; // For interface types that have been specialized\n 1118      };\n 1119  \n ....\n 1168      /** A reflection object describing a parameter block\n 1169      */\n 1170:     class dlldecl ParameterBlockReflection : public std::enable_shared_from_this<ParameterBlockReflection>\n 1171      {\n 1172      public:\n 1173:         using SharedPtr = std::shared_ptr<ParameterBlockReflection>;\n 1174:         using SharedConstPtr = std::shared_ptr<const ParameterBlockReflection>;\n 1175  \n 1176          static const uint32_t kInvalidIndex = 0xffffffff;\n ....\n 1206          /// Information on how a particular descriptor set should be filled in.\n 1207          ///\n 1208:         /// A single `ParameterBlock` may map to zero or more distinct descriptor\n 1209          /// sets, depending on what members it contains, and how those members\n 1210          /// are mapped to API registers/spaces.\n ....\n 1260          The resource ranges of a parameter block mirror those of its element type 1-to-1.\n 1261          Things like the descriptor type and count for a range can thus be queried on\n 1262:         the element type, while the `ParameterBlockReflection` stores additional information\n 1263          pertinent to how resource ranges are bound to the pipeline state.\n 1264          */\n ....\n 1270                  RootDescriptor, ///< A resource root descriptor (buffers only)\n 1271                  ConstantBuffer, ///< A sub-object for a constant buffer\n 1272:                 ParameterBlock, ///< A sub-object for a parameter block\n 1273                  Interface,      ///< A sub-object for an interface-type parameter\n 1274              };\n ....\n 1282  \n 1283              /// The reflection object for a sub-object range.\n 1284:             ParameterBlockReflection::SharedConstPtr pSubObjectReflector;\n 1285  \n 1286              bool isDescriptorSet() const { return flavor == Flavor::Simple; }\n ....\n 1305              ResourceRangeBindingInfo const& bindingInfo);\n 1306  \n 1307:         friend struct ParameterBlockReflectionFinalizer;\n 1308          void finalize();\n 1309  \n ....\n 1325          uint32_t getRootDescriptorRangeIndex(uint32_t index) const { return mRootDescriptorRangeIndices[index]; }\n 1326  \n 1327:         uint32_t getParameterBlockSubObjectRangeCount() const { return (uint32_t) mParameterBlockSubObjectRangeIndices.size(); }\n 1328:         uint32_t getParameterBlockSubObjectRangeIndex(uint32_t index) const { return mParameterBlockSubObjectRangeIndices[index]; }\n 1329  \n 1330          std::shared_ptr<const ProgramVersion> getProgramVersion() const;\n ....\n 1336  \n 1337      protected:\n 1338:         ParameterBlockReflection(\n 1339              ProgramVersion const* pProgramVersion);\n 1340  \n ....\n 1342          /// The element type of the parameter block\n 1343          ///\n 1344:         /// For a `ConstantBuffer<T>` or `ParameterBlock<T>`,\n 1345          /// this will be the type `T`.\n 1346          ///\n ....\n 1363          ///\n 1364          /// Note: this array does *not* include information for descriptor\n 1365:         /// sets that correspond to `ParameterBlock` sub-objects, since\n 1366          /// they are required to allocate and maintain their own\n 1367          /// descriptor sets that this object can simply re-use.\n ....\n 1373          ///\n 1374          /// Note: this array does *not* include information for root descriptors\n 1375:         /// that correspond to `ParameterBlock` and `ConstantBuffer` sub-objects, since they\n 1376          /// are required to allocate and maintain their own root descriptor range indices.\n 1377          ///\n ....\n 1382          /// along with the descriptor sets directly stored on the parameter block\n 1383          ///\n 1384:         std::vector<uint32_t> mParameterBlockSubObjectRangeIndices;\n 1385  \n 1386          ProgramVersion const* mpProgramVersion = nullptr;\n 1387      };\n 1388  \n 1389:     typedef ParameterBlockReflection ParameterBlockReflection;\n 1390  \n 1391:     class dlldecl EntryPointGroupReflection : public ParameterBlockReflection, public inherit_shared_from_this<ParameterBlockReflection, EntryPointGroupReflection>\n 1392      {\n 1393      public:\n ....\n 1395          using SharedConstPtr = std::shared_ptr<const EntryPointGroupReflection>;\n 1396  \n 1397:         using inherit_shared_from_this<ParameterBlockReflection, EntryPointGroupReflection>::shared_from_this;\n 1398  \n 1399          static SharedPtr create(\n ....\n 1408      typedef EntryPointGroupReflection EntryPointBaseReflection;\n 1409  \n 1410:     /** Reflection object for an entire program. Essentially, it's a collection of ParameterBlocks\n 1411      */\n 1412      class dlldecl ProgramReflection\n ....\n 1428          using VariableMap = std::unordered_map<std::string, ShaderVariable>;\n 1429  \n 1430:         using BindLocation = ParameterBlockReflection::BindLocation;\n 1431  \n 1432          /** Create a new object for a Slang reflector object\n ....\n 1445          /** Get parameter block by name\n 1446          */\n 1447:         ParameterBlockReflection::SharedConstPtr getParameterBlock(const std::string& name) const;\n 1448  \n 1449          /** Get the default (unnamed) parameter block.\n 1450          */\n 1451:         ParameterBlockReflection::SharedConstPtr getDefaultParameterBlock() const { return mpDefaultBlock; }\n 1452  \n 1453          /** For compute-shaders, return the required thread-group size\n ....\n 1494          ProgramReflection(ProgramVersion const* pProgramVersion);\n 1495          ProgramReflection(const ProgramReflection&) = default;\n 1496:         void setDefaultParameterBlock(const ParameterBlockReflection::SharedPtr& pBlock);\n 1497  \n 1498          ProgramVersion const* mpProgramVersion;\n 1499  \n 1500:         ParameterBlockReflection::SharedPtr mpDefaultBlock;\n 1501          uint3 mThreadGroupSize;\n 1502          bool mIsSampleFrequency = false;\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVars.cpp:\n   58      ProgramVars::ProgramVars(\n   59          const ProgramReflection::SharedConstPtr& pReflector)\n   60:         : ParameterBlock(pReflector->getProgramVersion(), pReflector->getDefaultParameterBlock())\n   61          , mpReflector(pReflector)\n   62      {\n   ..\n  175  \n  176      template<bool forGraphics>\n  177:     void bindRootConstants(CopyContext* pContext, uint32_t rootIndex, ParameterBlock* pParameterBlock, const ParameterBlockReflection* pParameterBlockReflector)\n  178      {\n  179          #ifdef _WIN32\n  180:         uint32_t count = uint32_t(pParameterBlockReflector->getElementType()->getByteSize() / sizeof(uint32_t));\n  181:         void const* pSrc = pParameterBlock->getRawData();\n  182          if (forGraphics)\n  183          {\n  ...\n  200  \n  201      template<bool forGraphics>\n  202:     bool bindParameterBlockSets(\n  203:         ParameterBlock*                 pParameterBlock,\n  204:         const ParameterBlockReflection* pParameterBlockReflector,\n  205          CopyContext*                    pContext,\n  206          RootSignature*                  pRootSignature,\n  ...\n  209          uint32_t&                       rootConstIndex)\n  210      {\n  211:         auto defaultConstantBufferInfo = pParameterBlockReflector->getDefaultConstantBufferBindingInfo();\n  212          if( defaultConstantBufferInfo.useRootConstants )\n  213          {\n  214              uint32_t rootIndex = rootConstIndex++;\n  215  \n  216:             bindRootConstants<forGraphics>(pContext, rootIndex, pParameterBlock, pParameterBlockReflector);\n  217          }\n  218  \n  219:         auto descriptorSetCount = pParameterBlockReflector->getDescriptorSetCount();\n  220          for(uint32_t s = 0; s < descriptorSetCount; ++s)\n  221          {\n  222:             auto pSet = pParameterBlock->getDescriptorSet(s);\n  223  \n  224              uint32_t rootIndex = descSetIndex++;\n  ...\n  228  \n  229          // Iterate over parameter blocks to recursively bind their descriptor sets.\n  230:         auto parameterBlockRangeCount = pParameterBlockReflector->getParameterBlockSubObjectRangeCount();\n  231          for(uint32_t i = 0; i < parameterBlockRangeCount; ++i)\n  232          {\n  233:             auto resourceRangeIndex = pParameterBlockReflector->getParameterBlockSubObjectRangeIndex(i);\n  234:             auto& resourceRange = pParameterBlockReflector->getResourceRange(resourceRangeIndex);\n  235:             auto& bindingInfo = pParameterBlockReflector->getResourceRangeBindingInfo(resourceRangeIndex);\n  236  \n  237              auto pSubObjectReflector = bindingInfo.pSubObjectReflector;\n  ...\n  240              for(uint32_t i = 0; i < objectCount; ++i)\n  241              {\n  242:                 auto pSubBlock = pParameterBlock->getParameterBlock(resourceRangeIndex, i);\n  243:                 if(!bindParameterBlockSets<forGraphics>(pSubBlock.get(), pSubObjectReflector.get(), pContext, pRootSignature, bindRootSig, descSetIndex, rootConstIndex))\n  244                  {\n  245                      return false;\n  ...\n  252  \n  253      template<bool forGraphics>\n  254:     bool bindParameterBlockRootDescs(\n  255:         ParameterBlock*                 pParameterBlock,\n  256:         const ParameterBlockReflection* pParameterBlockReflector,\n  257          CopyContext*                    pContext,\n  258          RootSignature*                  pRootSignature,\n  ...\n  260          uint32_t&                       rootDescIndex)\n  261      {\n  262:         auto rootDescriptorRangeCount = pParameterBlockReflector->getRootDescriptorRangeCount();\n  263          for (uint32_t i = 0; i < rootDescriptorRangeCount; ++i)\n  264          {\n  265:             auto resourceRangeIndex = pParameterBlockReflector->getRootDescriptorRangeIndex(i);\n  266:             auto& resourceRange = pParameterBlockReflector->getResourceRange(resourceRangeIndex);\n  267  \n  268              assert(resourceRange.count == 1); // Root descriptors cannot be arrays\n  269:             auto [pResource, isUav] = pParameterBlock->getRootDescriptor(resourceRangeIndex, 0);\n  270  \n  271              bindRootDescriptor<forGraphics>(pContext, rootDescIndex++, pResource, isUav);\n  ...\n  273  \n  274          // Iterate over constant buffers and parameter blocks to recursively bind their root descriptors.\n  275:         uint32_t resourceRangeCount = pParameterBlockReflector->getResourceRangeCount();\n  276          for (uint32_t resourceRangeIndex = 0; resourceRangeIndex < resourceRangeCount; ++resourceRangeIndex)\n  277          {\n  278:             auto& resourceRange = pParameterBlockReflector->getResourceRange(resourceRangeIndex);\n  279:             auto& bindingInfo = pParameterBlockReflector->getResourceRangeBindingInfo(resourceRangeIndex);\n  280  \n  281:             if (bindingInfo.flavor != ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ConstantBuffer &&\n  282:                 bindingInfo.flavor != ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock)\n  283                  continue;\n  284  \n  ...\n  288              for (uint32_t i = 0; i < objectCount; ++i)\n  289              {\n  290:                 auto pSubBlock = pParameterBlock->getParameterBlock(resourceRangeIndex, i);\n  291:                 if (!bindParameterBlockRootDescs<forGraphics>(pSubBlock.get(), pSubObjectReflector.get(), pContext, pRootSignature, bindRootSig, rootDescIndex))\n  292                  {\n  293                      return false;\n  ...\n  300  \n  301      template<bool forGraphics>\n  302:     bool bindRootSetsCommon(ParameterBlock* pVars, CopyContext* pContext, bool bindRootSig, RootSignature* pRootSignature)\n  303      {\n  304          if(!pVars->prepareDescriptorSets(pContext)) return false;\n  ...\n  308          uint32_t rootConstIndex = pRootSignature->getRootConstantBaseIndex();\n  309  \n  310:         if (!bindParameterBlockSets<forGraphics>(pVars, pVars->getSpecializedReflector().get(), pContext, pRootSignature, bindRootSig, descSetIndex, rootConstIndex)) return false;\n  311:         if (!bindParameterBlockRootDescs<forGraphics>(pVars, pVars->getSpecializedReflector().get(), pContext, pRootSignature, bindRootSig, rootDescIndex)) return false;\n  312  \n  313          return true;\n  ...\n  315  \n  316      template<bool forGraphics>\n  317:     bool applyProgramVarsCommon(ParameterBlock* pVars, CopyContext* pContext, bool bindRootSig, RootSignature* pRootSignature)\n  318      {\n  319          if (bindRootSig)\n  ...\n  334      bool ProgramVars::updateSpecializationImpl() const\n  335      {\n  336:         ParameterBlock::SpecializationArgs specializationArgs;\n  337          collectSpecializationArgs(specializationArgs);\n  338          if( specializationArgs.size() == 0 )\n  339          {\n  340:             mpSpecializedReflector = ParameterBlock::mpReflector;\n  341              return false;\n  342          }\n  ...\n  345  \n  346          auto pProgramKernels = mpProgramVersion->getKernels(this);\n  347:         mpSpecializedReflector = pProgramKernels->getReflector()->getDefaultParameterBlock();\n  348          return false;\n  349      }\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVars.h:\n   37      class ComputeContext;\n   38  \n   39:     class dlldecl EntryPointGroupVars  : public ParameterBlock\n   40      {\n   41      public:\n   42:         using SharedPtr = ParameterBlockSharedPtr<EntryPointGroupVars>;\n   43          using SharedConstPtr = std::shared_ptr<const EntryPointGroupVars>;\n   44  \n   ..\n   58      protected:\n   59          EntryPointGroupVars(const EntryPointGroupReflection::SharedConstPtr& pReflector, uint32_t groupIndexInProgram)\n   60:             : ParameterBlock(pReflector->getProgramVersion(), pReflector)\n   61              , mGroupIndexInProgram(groupIndexInProgram)\n   62          {\n   ..\n   71          It's a high-level abstraction of variables-related concepts such as CBs, texture and sampler assignments, root-signature, descriptor tables, etc.\n   72      */\n   73:     class dlldecl ProgramVars : public ParameterBlock\n   74      {\n   75      public:\n   76:         using SharedPtr = ParameterBlockSharedPtr<ProgramVars>;\n   77          using SharedConstPtr = std::shared_ptr<const ProgramVars>;\n   78  \n   ..\n  102      {\n  103      public:\n  104:         using SharedPtr = ParameterBlockSharedPtr<GraphicsVars>;\n  105          using SharedConstPtr = std::shared_ptr<const GraphicsVars>;\n  106          using ConstSharedPtrRef = const SharedPtr&;\n  ...\n  125  \n  126      template<bool forGraphics>\n  127:     bool applyProgramVarsCommon(ParameterBlock* pVars, CopyContext* pContext, bool bindRootSig, RootSignature* pRootSignature);\n  128  \n  129      class dlldecl ComputeVars : public ProgramVars\n  130      {\n  131      public:\n  132:         using SharedPtr = ParameterBlockSharedPtr<ComputeVars>;\n  133          using SharedConstPtr = std::shared_ptr<const ComputeVars>;\n  134          using ConstSharedPtrRef = const SharedPtr&;\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVersion.cpp:\n  164          std::string specializationKey;\n  165  \n  166:         ParameterBlock::SpecializationArgs specializationArgs;\n  167          pVars->collectSpecializationArgs(specializationArgs);\n  168  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.cpp:\n   33      ShaderVar::ShaderVar() : mpBlock(nullptr) {}\n   34      ShaderVar::ShaderVar(const ShaderVar& other) : mpBlock(other.mpBlock), mOffset(other.mOffset) {}\n   35:     ShaderVar::ShaderVar(ParameterBlock* pObject, const TypedShaderVarOffset& offset) : mpBlock(pObject), mOffset(offset) {}\n   36:     ShaderVar::ShaderVar(ParameterBlock* pObject) : mpBlock(pObject), mOffset(pObject->getElementType().get(), ShaderVarOffset::kZero) {}\n   37  \n   38      ShaderVar ShaderVar::findMember(const std::string& name) const\n   ..\n   52              {\n   53              case ReflectionResourceType::Type::ConstantBuffer:\n   54:                 return getParameterBlock()->getRootVar().findMember(name);\n   55              default:\n   56                  break;\n   ..\n   87              {\n   88              case ReflectionResourceType::Type::ConstantBuffer:\n   89:                 return getParameterBlock()->getRootVar().findMember(index);\n   90              default:\n   91                  break;\n   ..\n  157              {\n  158              case ReflectionResourceType::Type::ConstantBuffer:\n  159:                 return getParameterBlock()->getRootVar()[index];\n  160              default:\n  161                  break;\n  ...\n  204              {\n  205              case ReflectionResourceType::Type::ConstantBuffer:\n  206:                 return getParameterBlock()->getRootVar()[offset];\n  207              default:\n  208                  break;\n  ...\n  229              {\n  230              case ReflectionResourceType::Type::ConstantBuffer:\n  231:                 return getParameterBlock()->getRootVar()[loc];\n  232              default:\n  233                  break;\n  ...\n  309      }\n  310  \n  311:     bool ShaderVar::setParameterBlock(const std::shared_ptr<ParameterBlock>& pBlock) const\n  312      {\n  313:         return mpBlock->setParameterBlock(mOffset, pBlock);\n  314      }\n  315  \n  ...\n  329      }\n  330  \n  331:     bool ShaderVar::setImpl(const std::shared_ptr<ParameterBlock>& pBlock) const\n  332      {\n  333:         return mpBlock->setParameterBlock(mOffset, pBlock);\n  334      }\n  335  \n  ...\n  345              {\n  346              case ReflectionResourceType::Type::ConstantBuffer:\n  347:                 return getParameterBlock()->getRootVar().setBlob(data, size);\n  348              default:\n  349                  break;\n  ...\n  374      }\n  375  \n  376:     std::shared_ptr<ParameterBlock> ShaderVar::getParameterBlock() const\n  377      {\n  378:         return mpBlock->getParameterBlock(mOffset);\n  379      }\n  380  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.h:\n   34  namespace Falcor\n   35  {\n   36:     class ParameterBlock;\n   37      template<typename T>\n   38:     class ParameterBlockSharedPtr;\n   39  \n   40      /** A \"pointer\" to a shader variable stored in some parameter block.\n   41  \n   42:     A `ShaderVar` works like a pointer to the data \"inside\" a `ParameterBlock`.\n   43      It keeps track of three things:\n   44  \n   ..\n   48  \n   49      Typically a `ShaderVar` is created using the `getRootVar()` operation\n   50:     on `ParameterBlock`, which yields a shader variable that points to\n   51      the entire \"contents\" of the parameter block.\n   52  \n   ..\n   85          /** Create a shader variable pointer into `pObject` at the given `offset`.\n   86          */\n   87:         ShaderVar(ParameterBlock* pObject, const TypedShaderVarOffset& offset);\n   88  \n   89          /** Create a shader variable pointer to the content of `pObject`.\n   90          */\n   91:         explicit ShaderVar(ParameterBlock* pObject);\n   92  \n   93          /** Check if this shader variable pointer is valid/non-null.\n   ..\n  233              Logs an error and returns `false` if this variable doesn't point at a parameter block.\n  234          */\n  235:         bool setParameterBlock(const std::shared_ptr<ParameterBlock>& pBlock) const;\n  236  \n  237          /** Get the parameter block that this variable points to.\n  238              Logs an error and returns null if this variable doesn't point at a parameter block.\n  239          */\n  240:         std::shared_ptr<ParameterBlock> getParameterBlock() const;\n  241  \n  242          /** Set the value of the data pointed to by this shader variable.\n  ...\n  342  \n  343              Note: if a caller uses the resulting pointer to write to the variable (e.g.,\n  344:             by casting away the `const`-ness, then the underlying `ParameterBlock` will\n  345              not automatically be marked dirty, and it is possible that the effects of that\n  346              write will not be visible.\n  ...\n  356              since we do not want to perform reference-counting each and every time a `ShaderVar` gets created or destroyed.\n  357          */\n  358:         ParameterBlock*   mpBlock;\n  359  \n  360          /** The offset into the object where this variable points.\n  ...\n  379          bool setImpl(const Sampler::SharedPtr& pSampler) const;\n  380          bool setImpl(const Buffer::SharedPtr& pBuffer) const;\n  381:         bool setImpl(const std::shared_ptr<ParameterBlock>& pBlock) const;\n  382              \n  383          template<typename T>\n  384:         bool setImpl(const ParameterBlockSharedPtr<T>& pBlock) const\n  385          {\n  386:             return setImpl(std::static_pointer_cast<ParameterBlock>(pBlock));\n  387          }\n  388  \n  ...\n  391  }\n  392  \n  393: #include \"Core/BufferTypes/ParameterBlock.h\"\n  394  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang:\n   43  #endif\n   44  \n   45: ParameterBlock<LightCollection> gLightCollection;\n   46  \n   47  RWByteAddressBuffer gTexelSum;          ///< Sum over texels (RGB) + number of texels (A) in RGBA32Float format. Using raw buffer for fp32 atomics compatibility.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n  351  \n  352              // Bind scene.\n  353:             mIntegrator.pVars[\"gScene\"] = mpScene->getParameterBlock();\n  354  \n  355              // Bind light collection.\n  ...\n  367          {\n  368              // Bind scene.\n  369:             mpFinalizeIntegration[\"gScene\"] = mpScene->getParameterBlock();\n  370  \n  371              mpFinalizeIntegration[\"gTexelSum\"] = mIntegrator.pResultBuffer;\n  ...\n  437  \n  438          // Bind scene.\n  439:         mpTriangleListBuilder[\"gScene\"] = mpScene->getParameterBlock();\n  440  \n  441          // Bind our output buffers.\n  ...\n  471  \n  472          // Bind scene.\n  473:         mpTrianglePositionUpdater[\"gScene\"] = mpScene->getParameterBlock();\n  474  \n  475          // Bind our resources.\n\n/home/max/dev/Falcor/src/Falcor/Falcor.h:\n   71  \n   72  // Core/BufferTypes\n   73: #include \"Core/BufferTypes/ParameterBlock.h\"\n   74  #include \"Core/BufferTypes/VariablesBufferUI.h\"\n   75  \n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj:\n  100        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  101      </ClInclude>\n  102:     <ClInclude Include=\"Core\\BufferTypes\\ParameterBlock.h\" />\n  103      <ClInclude Include=\"Core\\BufferTypes\\VariablesBufferUI.h\" />\n  104      <ClInclude Include=\"Core\\FalcorConfig.h\" />\n  ...\n  548        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  549      </ClCompile>\n  550:     <ClCompile Include=\"Core\\BufferTypes\\ParameterBlock.cpp\" />\n  551      <ClCompile Include=\"Core\\BufferTypes\\VariablesBufferUI.cpp\" />\n  552      <ClCompile Include=\"Core\\Framework.cpp\" />\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj.filters:\n  383        <Filter>Core\\Program</Filter>\n  384      </ClInclude>\n  385:     <ClInclude Include=\"Core\\BufferTypes\\ParameterBlock.h\">\n  386        <Filter>Core\\BufferTypes</Filter>\n  387      </ClInclude>\n  ...\n 1090        <Filter>Core\\Program</Filter>\n 1091      </ClCompile>\n 1092:     <ClCompile Include=\"Core\\BufferTypes\\ParameterBlock.cpp\">\n 1093        <Filter>Core\\BufferTypes</Filter>\n 1094      </ClCompile>\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVars.cpp:\n  153          uint32_t                        uniqueEntryPointGroupIndex,\n  154          const RtStateObject*            pRtso,\n  155:         ParameterBlock*                 pVars,\n  156          RtVarsContext*                  pContext\n  157          )\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVars.h:\n   38      {\n   39      public:\n   40:         using SharedPtr = ParameterBlockSharedPtr<RtProgramVars>;\n   41:         using SharedConstPtr = ParameterBlockSharedPtr<const RtProgramVars>;\n   42  \n   43          /** Create a new ray tracing vars object.\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/BasePasses/ComputePass.h:\n   35      {\n   36      public:\n   37:         using SharedPtr = ParameterBlockSharedPtr<ComputePass>;\n   38  \n   39          /** Create a new compute pass from file.\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/BasePasses/FullScreenPass.h:\n   35      {\n   36      public:\n   37:         using SharedPtr = ParameterBlockSharedPtr<FullScreenPass>;\n   38  \n   39          virtual ~FullScreenPass();\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/BasePasses/RasterPass.h:\n   35      {\n   36      public:\n   37:         using SharedPtr = ParameterBlockSharedPtr<RasterPass>;\n   38  \n   39          /** Create a new object.\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/BasePasses/RasterScenePass.h:\n   36      {\n   37      public:\n   38:         //using SharedPtr = ParameterBlockSharedPtr::shared_ptr<RasterScenePass>;\n   39:         using SharedPtr = ParameterBlockSharedPtr<RasterScenePass>;\n   40  \n   41          /** Create a new object.\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/AnimationController.cpp:\n  206      void AnimationController::bindBuffers()\n  207      {\n  208:         ParameterBlock* pBlock = mpScene->mpSceneBlock.get();\n  209          pBlock->setBuffer(kWorldMatricesBufferName, mpWorldMatricesBuffer);\n  210          pBlock->setBuffer(kPreviousWorldMatrices, mpPrevWorldMatricesBuffer);\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/Skinning.slang:\n  123  };\n  124  \n  125: ParameterBlock<SkinningData> gData;\n  126  \n  127  [numthreads(256, 1, 1)]\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.h:\n   29  #include \"CameraData.slang\"\n   30  #include \"Utils/SampleGenerators/CPUSampleGenerator.h\"\n   31: #include \"Core/BufferTypes/ParameterBlock.h\"\n   32  \n   33  namespace Falcor\n   34  {\n   35      struct BoundingBox;\n   36:     class ParameterBlock;\n   37      class Gui;\n   38  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbe.h:\n   36      class Gui;\n   37      class ProgramVars;\n   38:     class ParameterBlock;\n   39  \n   40      class dlldecl LightProbe\n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp:\n  154  \n  155          // Save bind locations for resourced updated during draw\n  156:         mBindLocations.simulateCB = pSimulateCs->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"PerFrame\");\n  157:         mBindLocations.drawCB = pDrawProgram->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"PerFrame\");\n  158:         mBindLocations.emitCB = pEmitCs->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"PerEmit\");\n  159      }\n  160  \n  ...\n  185  \n  186          //Send vars and call\n  187:         mEmitResources.pVars->getParameterBlock(mBindLocations.emitCB)->setBlob(&emitData, 0u, sizeof(EmitData));\n  188          uint32_t numGroups = div_round_up(num, kParticleEmitThreads);\n  189          pCtx->dispatch(mEmitResources.pState.get(), mEmitResources.pVars.get(), {1, numGroups, 1});\n  ...\n  207              perFrame.dt = dt;\n  208              perFrame.maxParticles = mMaxParticles;\n  209:             mSimulateResources.pVars->getParameterBlock(mBindLocations.simulateCB)->setBlob(&perFrame, 0u, sizeof(SimulateWithSortPerFrame));\n  210              mpAliveList->setBlob(mSortDataReset.data(), 0, sizeof(SortData) * mMaxParticles);\n  211          }\n  ...\n  215              perFrame.dt = dt;\n  216              perFrame.maxParticles = mMaxParticles;\n  217:             mSimulateResources.pVars->getParameterBlock(mBindLocations.simulateCB)->setBlob(&perFrame, 0u, sizeof(SimulatePerFrame));\n  218          }\n  219  \n  ...\n  233          cbuf.view = view;\n  234          cbuf.proj = proj;\n  235:         mDrawResources.pVars->getParameterBlock(mBindLocations.drawCB)->setBlob(&cbuf, 0, sizeof(cbuf));\n  236  \n  237          //particle draw uses many of render context's existing state's properties\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n   60          }\n   61  \n   62:         const std::string kParameterBlockName = \"gScene\";\n   63          const std::string kMeshBufferName = \"meshes\";\n   64          const std::string kMeshInstanceBufferName = \"meshInstances\";\n   ..\n  155  \n  156          pState->setVao(mpVao);\n  157:         pVars->setParameterBlock(\"gScene\", mpSceneBlock);\n  158  \n  159          bool overrideRS = !is_set(flags, RenderFlags::UserRasterizerState);\n  ...\n  201          GraphicsProgram::SharedPtr pProgram = GraphicsProgram::createFromFile(\"Scene/SceneBlock.slang\", \"\", \"main\");\n  202          pProgram->addDefines(getSceneDefines());\n  203:         ParameterBlockReflection::SharedConstPtr pReflection = pProgram->getReflector()->getParameterBlock(kParameterBlockName);\n  204          assert(pReflection);\n  205  \n  206:         mpSceneBlock = ParameterBlock::create(pReflection);\n  207          mpMeshesBuffer = Buffer::createStructured(mpSceneBlock[kMeshBufferName], (uint32_t)mMeshDesc.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  208          mpMeshInstancesBuffer = Buffer::createStructured(mpSceneBlock[kMeshInstanceBufferName], (uint32_t)mMeshInstanceData.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.h:\n  335              Note that the camera is not bound automatically.\n  336          */\n  337:         ParameterBlock::ConstSharedPtrRef getParameterBlock() const { return mpSceneBlock; }\n  338  \n  339  #ifdef FALCOR_D3D12\n  ...\n  494          Buffer::SharedPtr mpMaterialsBuffer;\n  495          Buffer::SharedPtr mpLightsBuffer;\n  496:         ParameterBlock::SharedPtr mpSceneBlock;\n  497  \n  498          // Camera\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.slang:\n  488  };\n  489  \n  490: ParameterBlock<Scene> gScene;\n  491  \n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/DebugDrawer.cpp:\n  185      void DebugDrawer::render(RenderContext* pContext, GraphicsState* pState, GraphicsVars* pVars, Camera *pCamera)\n  186      {\n  187: //      ParameterBlock* pCB = pVars->getParameterBlock(\"InternalPerFrameCB\").get();\n  188  //      if (pCB != nullptr) pCamera->setShaderData(pCB, 0);\n  189  \n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.cpp:\n   77          GraphicsVars::SharedPtr mpProgramVars;\n   78          std::vector<Texture::SharedPtr> mpImages;\n   79:         ParameterBlockReflection::BindLocation mGuiImageLoc;\n   80          float mScaleFactor = 1.0f;\n   81          std::unordered_map<std::string, ImFont*> mFontMap;\n   ..\n  217          mpLayout->addBufferLayout(0, pBufLayout);\n  218  \n  219:         mGuiImageLoc = mpProgram->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"guiImage\");\n  220      }\n  221  \n\n498 matches across 38 files\n\n\nSearching 450 files for \"LightCollection\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/BuildTriangleList.cs.slang:\n   30  import Scene.Scene;\n   31  import Utils.Color.ColorHelpers;\n   32: import Experimental.Scene.Lights.LightCollection;\n   33  \n   34  cbuffer CB\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang:\n   31  */\n   32  import Scene.Scene;\n   33: import Experimental.Scene.Lights.LightCollection;\n   34  \n   35  // Setup NvApi. We need this for fp32 atomics.\n   ..\n   43  #endif\n   44  \n   45: ParameterBlock<LightCollection> gLightCollection;\n   46  \n   47  RWByteAddressBuffer gTexelSum;          ///< Sum over texels (RGB) + number of texels (A) in RGBA32Float format. Using raw buffer for fp32 atomics compatibility.\n   ..\n   65      // Fetch light index\n   66      const uint triIdx = vtxIdx / 3;\n   67:     const uint id = gLightCollection.getLightIdx(triIdx);\n   68  \n   69      VsOut vsOut;\n   ..\n   73  \n   74      // Check if triangle is textured.\n   75:     if (gScene.isEmissiveTextured(gLightCollection.getMaterialID(triIdx)))\n   76      {\n   77          // TODO: We could do these computations in a geometry shader once per triangle,\n   ..\n   82          for (uint j = 0; j < 3; j++)\n   83          {\n   84:             uv[j] = gLightCollection.getVtxTexCoord(triIdx + j);\n   85          }\n   86          const float2 uvMin = min(min(uv[0], uv[1]), uv[2]);\n   ..\n   88  \n   89          // Pass on texture coordinate unmodified for pixel to use.\n   90:         vsOut.uv = gLightCollection.getVtxTexCoord(vtxIdx);                 // Normalized (u,v) coordinate.\n   91  \n   92          // Query texture dimensions.\n   93          float width = 0, height = 0, mips = 0;\n   94:         gScene.materialResources[gLightCollection.meshData[id].materialID].emissive.GetDimensions(0, width, height, mips);\n   95  \n   96          // Compute raster position in texture space.\n   ..\n  125      const float2 uv = vsIn.uv;        // Interpolated texture coordinate.\n  126      const uint lightIdx = vsIn.lightIdx;\n  127:     float3 color = gScene.materialResources[gLightCollection.meshData[lightIdx].materialID].emissive.SampleLevel(gPointSampler, uv, 0.f).rgb;  // Sampler at mip 0\n  128  \n  129      // Compute weighted color. TODO: For now assume full coverage (= 1.0 in weight).\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang:\n   29  /** Shared utility functions for emissive light sampler implementations.\n   30  \n   31:      These functions rely on LightCollection, which is a container holding the\n   32       global list of all emissive triangles in the scene.\n   33  \n   ..\n   41  import Scene.ShadingData;\n   42  import Utils.Math.MathHelpers;\n   43: import Experimental.Scene.Lights.LightCollection;\n   44  import Experimental.Scene.Lights.EmissiveLightSamplerInterface;\n   45  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.cpp:\n   41      {\n   42          // Make sure the light collection is created.\n   43:         mpScene->getLightCollection(pRenderContext);\n   44      }\n   45  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.h:\n   28  #pragma once\n   29  #include \"EmissiveLightSampler.h\"\n   30: #include \"LightCollection.h\"\n   31  \n   32  namespace Falcor\n   ..\n   34      /** Emissive light sampler using uniform sampling of the lights.\n   35  \n   36:         This class wraps a LightCollection object, which holds the set of lights to sample.\n   37      */\n   38      class dlldecl EmissiveUniformSampler : public EmissiveLightSampler, public inherit_shared_from_this<EmissiveLightSampler, EmissiveUniformSampler>\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang:\n   38      EmissiveLightSamplerInterface.slang for usage information).\n   39  \n   40:     The struct wraps a LightCollection that stores the pre-processed lights.\n   41      The program should instantiate the struct below. See EmissiveLightSampler.slang.\n   42  */\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/FinalizeIntegration.cs.slang:\n   30  import Scene.Scene;\n   31  import Utils.Color.ColorHelpers;\n   32: import Experimental.Scene.Lights.LightCollection;\n   33  \n   34  cbuffer CB\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.cpp:\n   36  namespace Falcor\n   37  {\n   38:     LightBVH::SharedPtr LightBVH::create(const LightCollection::SharedConstPtr& pLightCollection)\n   39      {\n   40:         return SharedPtr(new LightBVH(pLightCollection));\n   41      }\n   42  \n   ..\n   49  \n   50          const ComputeVars::SharedPtr& pLeafUpdaterVars = mLeafUpdater->getVars();\n   51:         mpLightCollection->setShaderData(pLeafUpdaterVars[\"CB\"][\"gLights\"]);\n   52          pLeafUpdaterVars[\"CB\"][\"gLightBVH\"][\"nodes\"] = mpBVHNodesBuffer;\n   53          pLeafUpdaterVars[\"gNodeOffsets\"] = mpNodeOffsetsBuffer;\n   54  \n   55          const ComputeVars::SharedPtr& pInternalUpdaterVars = mInternalUpdater->getVars();\n   56:         mpLightCollection->setShaderData(pInternalUpdaterVars[\"CB\"][\"gLights\"]);\n   57          pInternalUpdaterVars[\"CB\"][\"gLightBVH\"][\"nodes\"] = mpBVHNodesBuffer;\n   58          pInternalUpdaterVars[\"gNodeOffsets\"] = mpNodeOffsetsBuffer;\n   ..\n  183      }\n  184  \n  185:     LightBVH::LightBVH(const LightCollection::SharedConstPtr& pLightCollection) : mpLightCollection(pLightCollection)\n  186      {\n  187          verifyStaticParams();\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.h:\n   28  #pragma once\n   29  #include \"LightBVHStaticParams.slang\"\n   30: #include \"LightCollection.h\"\n   31  \n   32  #include \"Utils/AlignedAllocator.h\"\n   ..\n  127  \n  128          /** Creates an empty LightBVH object. Use a LightBVHBuilder to build the BVH.\n  129:             \\param[in] pLightCollection The light collection around which the BVH will be built.\n  130          */\n  131:         static SharedPtr create(const LightCollection::SharedConstPtr& pLightCollection);\n  132  \n  133          /** Refit all the BVH nodes to the underlying geometry, without changing the hierarchy.\n  ...\n  193  \n  194      protected:\n  195:         LightBVH(const LightCollection::SharedConstPtr& pLightCollection);\n  196  \n  197          void computeStats();\n  ...\n  225  \n  226          // Internal state\n  227:         const LightCollection::SharedConstPtr mpLightCollection;\n  228  \n  229          ComputePass::SharedPtr                mLeafUpdater;             ///< Compute pass for refitting the leaf nodes.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp:\n  221  \n  222          // Get global list of emissive triangles.\n  223:         assert(bvh.mpLightCollection);\n  224:         const auto& triangles = bvh.mpLightCollection->getMeshLightTriangles();\n  225          if (triangles.empty()) return;\n  226  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHRefit.cs.slang:\n   29  \n   30  import Experimental.Scene.Lights.LightBVH;\n   31: import Experimental.Scene.Lights.LightCollection;\n   32  \n   33  cbuffer CB\n   34  {\n   35:     LightCollection     gLights;              ///< The light sources.\n   36      RWLightBVH          gLightBVH;            ///< The BVH around the light sources.\n   37      uint                gFirstNodeIndex;      ///< The index of the first node to be processed.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp:\n   58  \n   59          // Check if light collection has changed.\n   60:         if (is_set(mpScene->getUpdates(), Scene::UpdateFlags::LightCollectionChanged))\n   61          {\n   62              if (mOptions.buildOptions.allowRefitting && !mNeedsRebuild) needsRefit = true;\n   ..\n  171          if (!mpBVHBuilder) throw std::exception(\"Failed to create BVH builder\");\n  172  \n  173:         mpBVH = LightBVH::create(pScene->getLightCollection(pRenderContext));\n  174          if (!mpBVH) throw std::exception(\"Failed to create BVH\");\n  175      }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h:\n   31  #include \"LightBVH.h\"\n   32  #include \"LightBVHBuilder.h\"\n   33: #include \"LightCollection.h\"\n   34  #include \"LightBVHSamplerSharedDefinitions.slang\"\n   35  \n   ..\n   44      /** Emissive light sampler using a light BVH.\n   45  \n   46:         This class wraps a LightCollection object, which holds the set of lights to sample.\n   47          Internally, the class build a BVH over the light sources.\n   48      */\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang:\n   34  import Experimental.Scene.Lights.LightBVH;\n   35  import Experimental.Scene.Lights.LightBVHSamplerSharedDefinitions;\n   36: import Experimental.Scene.Lights.LightCollection;\n   37  import Experimental.Scene.Lights.EmissiveLightSamplerHelpers;\n   38  import Experimental.Scene.Lights.EmissiveLightSamplerInterface;\n   ..\n   55      EmissiveLightSamplerInterface.slang for usage information).\n   56  \n   57:     The struct wraps a LightCollection that stores the pre-processed lights,\n   58      and a LightBVH that stores the data structure used for sampling.\n   59      The program should instantiate the struct below. See EmissiveLightSampler.slang.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"LightCollection.h\"\n   30: #include \"LightCollectionShared.slang\"\n   31  #include \"Scene/Scene.h\"\n   32  #include <sstream>\n   ..\n   45      }\n   46  \n   47:     LightCollection::SharedPtr LightCollection::create(RenderContext* pRenderContext, const std::shared_ptr<Scene>& pScene)\n   48      {\n   49:         SharedPtr ptr = SharedPtr(new LightCollection());\n   50          return ptr->init(pRenderContext, pScene) ? ptr : nullptr;\n   51      }\n   52  \n   53:     bool LightCollection::update(RenderContext* pRenderContext, UpdateStatus* pUpdateStatus)\n   54      {\n   55:         PROFILE(\"LightCollection::update()\");\n   56  \n   57          if (pUpdateStatus)\n   ..\n   99      }\n  100  \n  101:     void LightCollection::renderUI(Gui::Widgets& widget)\n  102      {\n  103          // Prints stats about the number of lights etc.\n  ...\n  119      }\n  120  \n  121:     bool LightCollection::init(RenderContext* pRenderContext, const std::shared_ptr<Scene>& pScene)\n  122      {\n  123          assert(pScene);\n  ...\n  145      }\n  146  \n  147:     bool LightCollection::initIntegrator()\n  148      {\n  149          // The current algorithm rasterizes emissive triangles in texture space,\n  ...\n  155          if (findFileInShaderDirectories(\"NVAPI/nvHLSLExtns.h\", s) == false)\n  156          {\n  157:             logError(\"LightCollection relies on NVAPI, which appears to be missing. Please make sure you have NVAPI installed (instructions are in the readme file)\");\n  158              return false;\n  159          }\n  ...\n  196      }\n  197  \n  198:     bool LightCollection::setupMeshLights()\n  199      {\n  200          mMeshLights.clear();\n  ...\n  242      }\n  243  \n  244:     void LightCollection::build(RenderContext* pRenderContext)\n  245      {\n  246          if (mTriangleCount == 0)\n  ...\n  272      }\n  273  \n  274:     void LightCollection::prepareTriangleData(RenderContext* pRenderContext)\n  275      {\n  276          // Create GPU buffers.\n  ...\n  280  \n  281          mpMeshLightsVertexPos = Buffer::create(bufSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  282:         mpMeshLightsVertexPos->setName(\"LightCollection_MeshLightsVertexPos\");\n  283          mpMeshLightsTexCoords = Buffer::create(uvBufSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  284:         mpMeshLightsTexCoords->setName(\"LightCollection_MeshLightsTexCoords\");\n  285          mpTriangleData = Buffer::createStructured(mpTriangleListBuilder->getProgram().get(), \"gTriangleData\", mTriangleCount);\n  286:         mpTriangleData->setName(\"LightCollection_TriangleData\");\n  287  \n  288          // Compute triangle data (vertices, uv-coordinates, materialID) for all mesh lights.\n  ...\n  290      }\n  291  \n  292:     void LightCollection::prepareMeshData()\n  293      {\n  294          assert(mMeshLights.size() > 0);\n  ...\n  321          // Create the GPU buffer.\n  322          mpPerMeshInstanceOffset = Buffer::createStructured(sizeof(uint32_t), instanceCount, Resource::BindFlags::ShaderResource);\n  323:         mpPerMeshInstanceOffset->setName(\"LightCollection_PerMeshInstanceOffset\");\n  324  \n  325          const size_t sizeInBytes = triangleOffsets.size() * sizeof(triangleOffsets[0]);\n  ...\n  328      }\n  329  \n  330:     void LightCollection::integrateEmissive(RenderContext* pRenderContext)\n  331      {\n  332          assert(mTriangleCount > 0);\n  ...\n  340              {\n  341                  mIntegrator.pResultBuffer = Buffer::create(bufSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  342:                 mIntegrator.pResultBuffer->setName(\"LightCollection_IntegratorResults\");\n  343                  assert(mIntegrator.pResultBuffer);\n  344              }\n  ...\n  354  \n  355              // Bind light collection.\n  356:             setShaderData(mIntegrator.pVars[\"gLightCollection\"]);\n  357  \n  358              // Bind our resources.\n  ...\n  382      }\n  383  \n  384:     void LightCollection::computeStats() const\n  385      {\n  386          if (mStatsValid) return;\n  ...\n  432      }\n  433  \n  434:     void LightCollection::buildTriangleList(RenderContext* pRenderContext)\n  435      {\n  436          assert(mMeshLights.size() > 0);\n  ...\n  461      }\n  462  \n  463:     void LightCollection::updateTrianglePositions(RenderContext* pRenderContext, const std::vector<uint32_t>& updatedLights)\n  464      {\n  465          // This pass pre-transforms all emissive triangles into world space and updates their area and face normals.\n  ...\n  487      }\n  488  \n  489:     bool LightCollection::setShaderData(const ShaderVar& var) const\n  490      {\n  491          assert(var.isValid());\n  ...\n  522      }\n  523  \n  524:     void LightCollection::copyDataToStagingBuffer(RenderContext* pRenderContext) const\n  525      {\n  526          if (mStagingBufferValid) return;\n  ...\n  531          {\n  532              mpStagingBuffer = Buffer::create(stagingSize, Resource::BindFlags::None, Buffer::CpuAccess::Read);\n  533:             mpStagingBuffer->setName(\"LightCollection_StagingBuffer\");\n  534              mCPUInvalidData = CPUOutOfDateFlags::All;\n  535          }\n  ...\n  558      }\n  559  \n  560:     void LightCollection::syncCPUData() const\n  561      {\n  562          if (mCPUInvalidData == CPUOutOfDateFlags::None) return;\n  ...\n  566          if (!mStagingBufferValid)\n  567          {\n  568:             logWarning(\"LightCollection::syncCPUData() performance warning - Call LightCollection::prepareSyncCPUData() ahead of time if possible\");\n  569              prepareSyncCPUData(gpDevice->getRenderContext());\n  570          }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.h:\n   38  \n   39          This class has utility functions for updating and pre-processing the mesh lights.\n   40:         The LightCollection can be used standalone, but more commonly it will be wrapped\n   41          by an emissive light sampler.\n   42      */\n   43:     class dlldecl LightCollection : public std::enable_shared_from_this<LightCollection>\n   44      {\n   45      public:\n   46:         using SharedPtr = std::shared_ptr<LightCollection>;\n   47:         using ConstSharedPtrRef = const std::shared_ptr<LightCollection>&;\n   48:         using SharedConstPtr = std::shared_ptr<const LightCollection>;\n   49  \n   50          enum class UpdateFlags : uint32_t\n   ..\n  106  \n  107  \n  108:         ~LightCollection() = default;\n  109  \n  110          /** Creates a light collection for the given scene.\n  ...\n  175  \n  176      protected:\n  177:         LightCollection() = default;\n  178  \n  179          bool init(RenderContext* pRenderContext, const std::shared_ptr<Scene>& pScene);\n  ...\n  233      };\n  234  \n  235:     enum_class_operators(LightCollection::CPUOutOfDateFlags);\n  236:     enum_class_operators(LightCollection::UpdateFlags);\n  237  }\n  238  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.slang:\n   29  \n   30  import Scene.ShadingData;\n   31: __exported import Experimental.Scene.Lights.LightCollectionShared;\n   32  __exported import Experimental.Scene.Lights.MeshLightData;\n   33  \n   ..\n   37      quantities such as emitted flux are pre-computed.\n   38  \n   39:     The user code instantiates LightCollection in e.g. a parameter block and\n   40      calls member functions on the CPU-side class to update/bind it to their program.\n   41  */\n   42: struct LightCollection\n   43  {\n   44      uint                                triangleCount;          ///< Total number of triangles in all mesh lights.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/MeshLightData.slang:\n   42  {\n   43      uint        meshInstanceID      = kInvalidIndex;    ///< Mesh instance ID in the scene (= getGlobalHitID()).\n   44:     uint        triangleOffset      = kInvalidIndex;    ///< Offset into LightCollection's global list of emissive triangles.\n   45      uint        triangleCount       = 0;                ///< Number of triangles in mesh light.\n   46      uint        materialID          = kInvalidIndex;    ///< Material ID (index into scene.materials array).\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/UpdateTriangleVertices.cs.slang:\n   29  \n   30  import Scene.Scene;\n   31: import Experimental.Scene.Lights.LightCollection;\n   32  \n   33  cbuffer CB\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj:\n  130      <ClInclude Include=\"Experimental\\Scene\\Lights\\LightBVHSampler.h\" />\n  131      <ShaderSource Include=\"Experimental\\Scene\\Lights\\EmissiveLightSamplerType.slangh\" />\n  132:     <ClInclude Include=\"Experimental\\Scene\\Lights\\LightCollection.h\" />\n  133      <ShaderSource Include=\"Experimental\\Scene\\Lights\\FinalizeIntegration.cs.slang\" />\n  134      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightBVHSamplerSharedDefinitions.slang\" />\n  135      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightBVHStaticParams.slang\" />\n  136:     <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightCollectionShared.slang\" />\n  137      <ClInclude Include=\"Raytracing\\RtProgramVars.h\" />\n  138      <ClInclude Include=\"Raytracing\\RtProgramVarsHelper.h\" />\n  ...\n  586      <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVHBuilder.cpp\" />\n  587      <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVHSampler.cpp\" />\n  588:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightCollection.cpp\" />\n  589      <ClCompile Include=\"Raytracing\\RtProgramVars.cpp\" />\n  590      <ClCompile Include=\"Raytracing\\RtProgramVarsHelper.cpp\" />\n  ...\n  672      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightBVHRefit.cs.slang\" />\n  673      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightBVHSampler.slang\" />\n  674:     <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightCollection.slang\" />\n  675      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightHelpers.slang\" />\n  676      <ShaderSource Include=\"Experimental\\Scene\\Material\\MaterialHelpers.slang\" />\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj.filters:\n  473        <Filter>Experimental\\Scene\\Lights</Filter>\n  474      </ClInclude>\n  475:     <ClInclude Include=\"Experimental\\Scene\\Lights\\LightCollection.h\">\n  476        <Filter>Experimental\\Scene\\Lights</Filter>\n  477      </ClInclude>\n  ...\n 1150        <Filter>Experimental\\Scene\\Lights</Filter>\n 1151      </ClCompile>\n 1152:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightCollection.cpp\">\n 1153        <Filter>Experimental\\Scene\\Lights</Filter>\n 1154      </ClCompile>\n ....\n 1230        <Filter>Experimental\\Scene\\Lights</Filter>\n 1231      </ShaderSource>\n 1232:     <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightCollection.slang\">\n 1233        <Filter>Experimental\\Scene\\Lights</Filter>\n 1234      </ShaderSource>\n ....\n 1398        <Filter>Experimental\\Scene\\Lights</Filter>\n 1399      </ShaderSource>\n 1400:     <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightCollectionShared.slang\">\n 1401        <Filter>Experimental\\Scene\\Lights</Filter>\n 1402      </ShaderSource>\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.cpp:\n  452                  lightingChanged = mpEmissiveSampler->update(pRenderContext);\n  453  \n  454:                 const auto& lightCollection = mpScene->getLightCollection(pRenderContext);\n  455  \n  456                  // Update shared parameters.\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n  140      }\n  141  \n  142:     LightCollection::ConstSharedPtrRef Scene::getLightCollection(RenderContext* pContext)\n  143      {\n  144:         if (!mpLightCollection)\n  145          {\n  146:             mpLightCollection = LightCollection::create(pContext, shared_from_this());\n  147:             mpLightCollection->setShaderData(mpSceneBlock[\"lightCollection\"]);\n  148          }\n  149:         return mpLightCollection;\n  150      }\n  151  \n  ...\n  484  \n  485          // Update light collection\n  486:         if (mpLightCollection && mpLightCollection->update(pContext)) mUpdates |= UpdateFlags::LightCollectionChanged;\n  487  \n  488          return mUpdates;\n  ...\n  575              statsGroup.text(oss.str());\n  576  \n  577:             if (mpLightCollection)\n  578              {\n  579                  auto lightCollectionGroup = Gui::Group(widget, \"Mesh lights\", true);\n  580:                 if (lightCollectionGroup.open()) mpLightCollection->renderUI(lightCollectionGroup);\n  581                  lightCollectionGroup.release();\n  582              }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.h:\n   36  #include \"Animation/AnimationController.h\"\n   37  #include \"Camera/CameraController.h\"\n   38: #include \"Experimental/Scene/Lights/LightCollection.h\"\n   39  #include \"SceneTypes.slang\"\n   40  \n   ..\n  106              LightPropertiesChanged      = 0x20, ///< Other light changes not included in LightIntensityChanged and LightsMoved\n  107              SceneGraphChanged           = 0x40, ///< Any transform in the scene graph changed.\n  108:             LightCollectionChanged      = 0x80, ///< Light collection changed (mesh lights)\n  109              MaterialsChanged            = 0x100,///< Materials changed\n  110  \n  ...\n  244              \\return Returns the light collection.\n  245          */\n  246:         LightCollection::ConstSharedPtrRef getLightCollection(RenderContext* pContext);\n  247  \n  248          /** Get the light probe or nullptr if it doesn't exist.\n  ...\n  478          std::vector<Material::SharedPtr> mMaterials;        ///< Bound to parameter block\n  479          std::vector<AnimatedObject<Light>> mLights;         ///< Bound to parameter block\n  480:         LightCollection::SharedPtr mpLightCollection;       ///< Bound to parameter block\n  481          LightProbe::SharedPtr mpLightProbe;                 ///< Bound to parameter block\n  482          Texture::SharedPtr mpEnvMap;                        ///< Not bound to anything, not rendered automatically. Can be used to render a skybox\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.slang:\n   37  import TextureSampler;\n   38  import Utils.Attributes;\n   39: import Experimental.Scene.Lights.LightCollection;\n   40  import Experimental.Scene.Material.TexLODHelpers;\n   41  \n   ..\n   68      // Lights and camera\n   69      StructuredBuffer<LightData> lights;\n   70:     LightCollection lightCollection;\n   71      LightProbeData lightProbe;\n   72      Texture2D envMap;\n\n119 matches across 25 files\n\n\nSearching 450 files for \"FrameRate\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Renderer.h:\n   33  {\n   34      class Clock;\n   35:     class FrameRate;\n   36  \n   37      /** Sample configuration\n   ..\n   64          virtual Clock& getGlobalClock() = 0;\n   65  \n   66:         /** Get the global FrameRate object\n   67          */\n   68:         virtual FrameRate& getFrameRate() = 0;\n   69  \n   70          /** Resize the swap-chain buffers*/\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n  117                      mVsyncOn = !mVsyncOn;\n  118                      gpDevice->toggleVSync(mVsyncOn);\n  119:                     mFrameRate.reset();\n  120                      mClock.setTime(0);\n  121                      break;\n  ...\n  296          pBar = nullptr;\n  297  \n  298:         mFrameRate.reset();\n  299          mpWindow->msgLoop();\n  300  \n  ...\n  442              }\n  443  \n  444:             mpGui->render(getRenderContext(), gpDevice->getSwapChainFbo(), (float)mFrameRate.getLastFrameTime());\n  445          }\n  446      }\n  ...\n  454  \n  455          mClock.tick();\n  456:         mFrameRate.newFrame();\n  457          if (mVideoCapture.fixedTimeDelta) { mClock.setTime(mVideoCapture.currentTime); }\n  458  \n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.h:\n   31  #include \"Renderer.h\"\n   32  #include \"Utils/ArgList.h\"\n   33: #include \"Utils/Timing/FrameRate.h\"\n   34  #include \"Utils/UI/Gui.h\"\n   35  #include \"Utils/UI/TextRenderer.h\"\n   ..\n   75          Window* getWindow() override { return mpWindow.get(); }\n   76          Clock& getGlobalClock() override { return mClock; }\n   77:         FrameRate& getFrameRate() override { return mFrameRate; }\n   78          void resizeSwapChain(uint32_t width, uint32_t height) override;\n   79          bool isKeyPressed(const KeyboardEvent::Key& key) override;\n   ..\n  125          bool mShowUI = true;\n  126          bool mCaptureScreen = false;\n  127:         FrameRate mFrameRate;\n  128          Clock mClock;\n  129  \n\n/home/max/dev/Falcor/src/Falcor/Falcor.h:\n  145  #include \"Utils/Timing/CpuTimer.h\"\n  146  #include \"Utils/Timing/Clock.h\"\n  147: #include \"Utils/Timing/FrameRate.h\"\n  148  #include \"Utils/Timing/Profiler.h\"\n  149  #include \"Utils/UI/Font.h\"\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj:\n  271      <ClInclude Include=\"Utils\\Timing\\Clock.h\" />\n  272      <ClInclude Include=\"Utils\\Timing\\CpuTimer.h\" />\n  273:     <ClInclude Include=\"Utils\\Timing\\FrameRate.h\" />\n  274      <ClInclude Include=\"Utils\\Timing\\Profiler.h\" />\n  275      <ClInclude Include=\"Utils\\UI\\DebugDrawer.h\" />\n  ...\n  651      <ClCompile Include=\"Utils\\Threading.cpp\" />\n  652      <ClCompile Include=\"Utils\\Timing\\Clock.cpp\" />\n  653:     <ClCompile Include=\"Utils\\Timing\\FrameRate.cpp\" />\n  654      <ClCompile Include=\"Utils\\Timing\\Profiler.cpp\" />\n  655      <ClCompile Include=\"Utils\\UI\\DebugDrawer.cpp\" />\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj.filters:\n  196        <Filter>Utils\\Timing</Filter>\n  197      </ClInclude>\n  198:     <ClInclude Include=\"Utils\\Timing\\FrameRate.h\">\n  199        <Filter>Utils\\Timing</Filter>\n  200      </ClInclude>\n  ...\n 1054        <Filter>Utils</Filter>\n 1055      </ClCompile>\n 1056:     <ClCompile Include=\"Utils\\Timing\\FrameRate.cpp\">\n 1057        <Filter>Utils\\Timing</Filter>\n 1058      </ClCompile>\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/FrameRate.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"FrameRate.h\"\n   30  #include <sstream>\n   31  \n   32  namespace Falcor\n   33  {\n   34:     std::string FrameRate::getMsg(bool vsyncOn) const\n   35      {\n   36          float msPerFrame = (float)getAverageFrameTime();\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/FrameRate.h:\n   34      /** Framerate calculator\n   35      */\n   36:     class dlldecl FrameRate\n   37      {\n   38      public:\n   39:         FrameRate()\n   40          {\n   41              mFrameTimes.resize(sFrameWindow);\n   ..\n   95      };\n   96  \n   97:     inline std::string to_string(const FrameRate& fr, bool vsyncOn = false) { return fr.getMsg(vsyncOn); }\n   98  }\n   99  \n\n24 matches across 8 files\n\n\nSearching 450 files for \"setMainWindowHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.h:\n   53          \\param[in] windowHandle Window handle.\n   54      */\n   55:     dlldecl void setMainWindowHandle(WindowHandle windowHandle);\n   56  \n   57      /** Adds an icon to the foreground window.\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp:\n   45      static HWND gMainWindowHandle;\n   46  \n   47:     void setMainWindowHandle(HWND windowHandle)\n   48      {\n   49          gMainWindowHandle = windowHandle;\n\n/home/max/dev/Falcor/src/Falcor/Core/Window.cpp:\n  434          assert(pWindow->mApiHandle.pDisplay != nullptr);\n  435  #endif\n  436:         setMainWindowHandle(pWindow->mApiHandle);\n  437  \n  438          pWindow->updateWindowSize();\n\n3 matches across 3 files\n\n\nSearching 25 files for \"setMainWindowHandle\" (case sensitive)\n\n0 matches\n\nSearching 742 files for \"setMainWindowHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.h:\n   53          \\param[in] windowHandle Window handle.\n   54      */\n   55:     dlldecl void setMainWindowHandle(WindowHandle windowHandle);\n   56  \n   57      /** Adds an icon to the foreground window.\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp:\n   45      static HWND gMainWindowHandle;\n   46  \n   47:     void setMainWindowHandle(HWND windowHandle)\n   48      {\n   49          gMainWindowHandle = windowHandle;\n\n/home/max/dev/Falcor/src/Falcor/Core/Window.cpp:\n  434          assert(pWindow->mApiHandle.pDisplay != nullptr);\n  435  #endif\n  436:         setMainWindowHandle(pWindow->mApiHandle);\n  437  \n  438          pWindow->updateWindowSize();\n\n3 matches across 3 files\n\n\nSearching 742 files for \"postQuitMessage\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.h:\n  416      /** Post a quit message with an exit code\n  417      */\n  418:     dlldecl void postQuitMessage(int32_t exitCode);\n  419      /*! @} */\n  420  };\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp:\n  732      }\n  733  \n  734:     void postQuitMessage(int32_t exitCode)\n  735      {\n  736          PostQuitMessage(exitCode);\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n  451  \n  452          // Check clock exit condition\n  453:         if (mClock.shouldExit()) postQuitMessage(0);\n  454  \n  455          mClock.tick();\n  ...\n  652          sampleDesc.field(pauseTime).field(showUI);\n  653  #undef field\n  654:         auto exit = [](int32_t errorCode) { postQuitMessage(errorCode); };\n  655          m.func_(\"exit\", exit, \"errorCode\"_a = 0);\n  656  \n\n4 matches across 3 files\n\n\nSearching 742 files for \"PostQuitMessage\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Linux/Linux.cpp:\n  544      void postQuitMessage(int32_t exitCode)\n  545      {\n  546:         PostQuitMessage(exitCode);\n  547      }\n  548  \n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp:\n  734      void postQuitMessage(int32_t exitCode)\n  735      {\n  736:         PostQuitMessage(exitCode);\n  737      }\n  738  \n\n2 matches across 2 files\n\n\nSearching 742 files for \"postQuitMessage\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.h:\n  416      /** Post a quit message with an exit code\n  417      */\n  418:     dlldecl void postQuitMessage(int32_t exitCode);\n  419      /*! @} */\n  420  };\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp:\n  732      }\n  733  \n  734:     void postQuitMessage(int32_t exitCode)\n  735      {\n  736          PostQuitMessage(exitCode);\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n  451  \n  452          // Check clock exit condition\n  453:         if (mClock.shouldExit()) postQuitMessage(0);\n  454  \n  455          mClock.tick();\n  ...\n  652          sampleDesc.field(pauseTime).field(showUI);\n  653  #undef field\n  654:         auto exit = [](int32_t errorCode) { postQuitMessage(errorCode); };\n  655          m.func_(\"exit\", exit, \"errorCode\"_a = 0);\n  656  \n\n4 matches across 3 files\n\n\nSearching 742 files for \"sFrameWindow\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/FrameRate.h:\n   39          FrameRate()\n   40          {\n   41:             mFrameTimes.resize(sFrameWindow);\n   42              reset();\n   43          }\n   ..\n   58          {\n   59              mFrameCount++;\n   60:             mFrameTimes[mFrameCount % sFrameWindow] = mClock.tick().getRealTimeDelta();\n   61              mClock.setTime(0).tick();\n   62          }\n   ..\n   66          double getAverageFrameTime() const\n   67          {\n   68:             uint64_t frames = std::min(mFrameCount, sFrameWindow);\n   69              double elapsedTime = 0;\n   70              for(uint64_t i = 0; i < frames; i++) elapsedTime += mFrameTimes[i];\n   ..\n   77          double getLastFrameTime() const\n   78          {\n   79:             return mFrameTimes[mFrameCount % sFrameWindow];\n   80          }\n   81  \n   ..\n   94  \n   95      public:\n   96:         static const uint64_t sFrameWindow = 60;\n   97      };\n   98  \n\n5 matches in 1 file\n\n\nSearching 742 files for \"ShaderResourceView\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n  209      }\n  210  \n  211:     ShaderResourceView::SharedPtr Buffer::getSRV(uint32_t firstElement, uint32_t elementCount)\n  212      {\n  213          auto createFunc = [](Buffer* pBuffer, uint32_t firstElement, uint32_t elementCount)\n  214          {\n  215:             return ShaderResourceView::create(pBuffer->shared_from_this(), firstElement, elementCount);\n  216          };\n  217  \n  218:         return findViewCommon<ShaderResourceView>(this, firstElement, elementCount, mSrvs, createFunc);\n  219      }\n  220  \n  221:     ShaderResourceView::SharedPtr Buffer::getSRV()\n  222      {\n  223          return getSRV(0);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h:\n  186              \\param[in] elementCount The number of elements to bind\n  187          */\n  188:         ShaderResourceView::SharedPtr getSRV(uint32_t firstElement, uint32_t elementCount = kMaxPossible);\n  189  \n  190          /** Get an unordered access view.\n  ...\n  196          /** Get a shader-resource view for the entire resource\n  197          */\n  198:         virtual ShaderResourceView::SharedPtr getSRV() override;\n  199  \n  200          /** Get an unordered access view for the entire resource\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorSet.cpp:\n   94      }\n   95  \n   96:     void DescriptorSet::setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv)\n   97      {\n   98          setCpuHandle(this, rangeIndex, descIndex, pSrv->getApiHandle()->getCpuHandle(0));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  416      }\n  417  \n  418:     void RenderContext::blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect, const uint4& dstRect, Sampler::Filter filter)\n  419      {\n  420          auto& blitData = sApiData.blitData;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n   50          D3D12_SHADER_RESOURCE_VIEW_DESC desc = {};\n   51  \n   52:         uint32_t bufferElementCount = ShaderResourceView::kMaxPossible;\n   53          if (pBuffer->isTyped())\n   54          {\n   ..\n   69          }\n   70  \n   71:         bool useDefaultCount = (elementCount == ShaderResourceView::kMaxPossible);\n   72          assert(useDefaultCount || (firstElement + elementCount) <= bufferElementCount); // Check range\n   73          desc.Buffer.FirstElement = firstElement;\n   ..\n  271      }\n  272  \n  273:     ShaderResourceView::ApiHandle createSrvDescriptor(const D3D12_SHADER_RESOURCE_VIEW_DESC& desc, Resource::ApiHandle resHandle)\n  274      {\n  275          DescriptorSet::Layout layout;\n  276          layout.addRange(DescriptorSet::Type::TextureSrv, 0, 1);\n  277:         ShaderResourceView::ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  278:         gpDevice->getApiHandle()->CreateShaderResourceView(resHandle, &desc, handle->getCpuHandle(0));\n  279  \n  280          return handle;\n  281      }\n  282  \n  283:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  284      {\n  285          if (!pTexture && getNullView()) return getNullView();\n  ...\n  300          }\n  301  \n  302:         SharedPtr pObj = SharedPtr(new ShaderResourceView(pTexture, createSrvDescriptor(desc, resHandle), mostDetailedMip, mipCount, firstArraySlice, arraySize));\n  303          return pObj;\n  304      }\n  305  \n  306:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount)\n  307      {\n  308          if (!pBuffer && getNullView()) return getNullView();\n  ...\n  323          }\n  324  \n  325:         SharedPtr pObj = SharedPtr(new ShaderResourceView(pBuffer, createSrvDescriptor(desc, resHandle), firstElement, elementCount));\n  326          return pObj;\n  327      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DescriptorSet.h:\n   31  namespace Falcor\n   32  {\n   33:     class ShaderResourceView;\n   34      class UnorderedAccessView;\n   35      class ConstantBufferView;\n   ..\n  102          const ApiData* getApiData() const { return mpApiData.get(); }\n  103  \n  104:         void setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv);\n  105          void setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav);\n  106          void setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n  162              \\param[in] dstRect Target rectangle to blit to, specified by [left, up, right, down]\n  163          */\n  164:         void blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect = uint4(-1), const uint4& dstRect = uint4(-1), Sampler::Filter = Sampler::Filter::Linear);\n  165  \n  166          /** Submit the command list\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n  153              Buffer and Texture have overloads which allow you to create a view into part of the resource\n  154          */\n  155:         virtual ShaderResourceView::SharedPtr getSRV() = 0;\n  156          virtual UnorderedAccessView::SharedPtr getUAV() = 0;\n  157  \n  ...\n  184          std::string mName;\n  185  \n  186:         mutable std::unordered_map<ResourceViewInfo, ShaderResourceView::SharedPtr, ViewInfoHashFunc> mSrvs;\n  187          mutable std::unordered_map<ResourceViewInfo, RenderTargetView::SharedPtr, ViewInfoHashFunc> mRtvs;\n  188          mutable std::unordered_map<ResourceViewInfo, DepthStencilView::SharedPtr, ViewInfoHashFunc> mDsvs;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.cpp:\n   36      void createNullViews()\n   37      {\n   38:         gNullViews.srv = ShaderResourceView::create(getEmptyTexture(), 0, 1, 0, 1);\n   39          gNullViews.dsv = DepthStencilView::create(getEmptyTexture(), 0, 0, 1);\n   40          gNullViews.uav = UnorderedAccessView::create(getEmptyTexture(), 0, 0, 1);\n   ..\n   48      }\n   49  \n   50:     ShaderResourceView::SharedPtr  ShaderResourceView::getNullView()  { return gNullViews.srv; }\n   51      DepthStencilView::SharedPtr    DepthStencilView::getNullView()    { return gNullViews.dsv; }\n   52      UnorderedAccessView::SharedPtr UnorderedAccessView::getNullView() { return gNullViews.uav; }\n   ..\n   56      SCRIPT_BINDING(ResourceView)\n   57      {\n   58:         m.regClass(ShaderResourceView);\n   59          m.regClass(RenderTargetView);\n   60          m.regClass(UnorderedAccessView);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  103      };\n  104  \n  105:     class dlldecl ShaderResourceView : public ResourceView<SrvHandle>\n  106      {\n  107      public:\n  108:         using SharedPtr = std::shared_ptr<ShaderResourceView>;\n  109:         using SharedConstPtr = std::shared_ptr<const ShaderResourceView>;\n  110  \n  111          static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize);\n  ...\n  114  \n  115          // This is currently used by RtScene to create an SRV for the TLAS, since the create() functions above assume texture or buffer types.\n  116:         ShaderResourceView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  117              : ResourceView(pResource, handle, mostDetailedMip, mipCount, firstArraySlice, arraySize) {}\n  118      private:\n  119  \n  120:         ShaderResourceView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t firstElement, uint32_t elementCount)\n  121              : ResourceView(pResource, handle, firstElement, elementCount) {}\n  122      };\n  ...\n  180      struct NullResourceViews\n  181      {\n  182:         ShaderResourceView::SharedPtr srv;\n  183          ConstantBufferView::SharedPtr cbv;\n  184          RenderTargetView::SharedPtr   rtv;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  217      }\n  218  \n  219:     ShaderResourceView::SharedPtr Texture::getSRV()\n  220      {\n  221          return getSRV(0);\n  ...\n  237      }\n  238  \n  239:     ShaderResourceView::SharedPtr Texture::getSRV(uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  240      {\n  241          auto createFunc = [](Texture* pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  242          {\n  243:             return ShaderResourceView::create(pTexture->shared_from_this(), mostDetailedMip, mipCount, firstArraySlice, arraySize);\n  244          };\n  245  \n  246:         return findViewCommon<ShaderResourceView>(this, mostDetailedMip, mipCount, firstArraySlice, arraySize, mSrvs, createFunc);\n  247      }\n  248  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.h:\n  177          /** Get a shader-resource view for the entire resource\n  178          */\n  179:         virtual ShaderResourceView::SharedPtr getSRV() override;\n  180  \n  181          /** Get an unordered access view for the entire resource\n  ...\n  189              \\param[in] arraySize The array size. If this is equal to Texture#kMaxPossible, will create a view ranging from firstArraySlice to the texture's array size\n  190          */\n  191:         ShaderResourceView::SharedPtr getSRV(uint32_t mostDetailedMip, uint32_t mipCount = kMaxPossible, uint32_t firstArraySlice = 0, uint32_t arraySize = kMaxPossible);\n  192  \n  193          /** Get a render-target view.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n  104      }\n  105  \n  106:     void DescriptorSet::setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv)\n  107      {\n  108          setSrvUavCommon<false>(mApiHandle, mLayout.getRange(rangeIndex).baseRegIndex, descIndex, pSrv, mLayout.getRange(rangeIndex).type);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n  289      }\n  290  \n  291:     void RenderContext::blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect, const uint4& dstRect, Sampler::Filter filter)\n  292      {\n  293          const Texture* pTexture = dynamic_cast<const Texture*>(pSrc->getResource());\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  145  \n  146      // based on D3D code\n  147:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  148      {\n  149          if (!pTexture && getNullView()) return getNullView();\n  150  \n  151          //Resource::ApiHandle resHandle = pTexture->getApiHandle();\n  152:         //return SharedPtr(new ShaderResourceView(pTexture, resHandle, mostDetailedMip, mipCount, firstArraySlice, arraySize));\n  153          return getNullView();\n  154      }\n  155      /*\n  156:     ShaderResourceView::SharedPtr ShaderResourceView::create(ResourceWeakPtr pResource, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  157      {\n  158          Resource::SharedConstPtr pSharedPtr = pResource.lock();\n  ...\n  163  \n  164          auto view = createViewCommon(pSharedPtr, mostDetailedMip, mipCount, firstArraySlice, arraySize);\n  165:         return SharedPtr(new ShaderResourceView(pResource, view, mostDetailedMip, mipCount, firstArraySlice, arraySize));\n  166      }\n  167      */\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  440      bool ParameterBlock::checkDescriptorSrvUavCommon(\n  441          const BindLocation& bindLocation,\n  442:         const std::variant<ShaderResourceView::SharedPtr, UnorderedAccessView::SharedPtr>& pView,\n  443          const char* funcName) const\n  444      {\n  ...\n  461              auto pResource = isUav\n  462                  ? getResourceFromView(std::get<UnorderedAccessView::SharedPtr>(pView).get())\n  463:                 : getResourceFromView(std::get<ShaderResourceView::SharedPtr>(pView).get());\n  464              if (!checkRootDescriptorResourceCompatibility(pResource, funcName)) return false;\n  465  \n  ...\n  629          else if (isSrvType(bindLoc.getType()))\n  630          {\n  631:             auto pSRV = pResource ? pResource->getSRV() : ShaderResourceView::getNullView();\n  632              if (!checkDescriptorSrvUavCommon(bindLoc, pSRV, funcName)) return false;\n  633              auto& assignedSRV = mSRVs[flatIndex];\n  ...\n  762      }\n  763  \n  764:     ShaderResourceView::SharedPtr ParameterBlock::getSrv(const BindLocation& bindLocation) const\n  765      {\n  766          if (!checkResourceIndices(bindLocation, \"getSrv()\")) return nullptr;\n  ...\n  806      }\n  807  \n  808:     bool ParameterBlock::setSrv(const BindLocation& bindLocation, const ShaderResourceView::SharedPtr& pSrv)\n  809      {\n  810          if (!checkDescriptorSrvUavCommon(bindLocation, pSrv, \"setSrv()\")) return false;\n  ...\n  813          auto& assignedSRV = mSRVs[flatIndex];\n  814  \n  815:         const ShaderResourceView::SharedPtr pView = pSrv ? pSrv : ShaderResourceView::getNullView();\n  816          if(assignedSRV.pView == pView) return true;\n  817  \n  ...\n 1382                      {\n 1383                          auto pView = mSRVs[flatIndex].pView;\n 1384:                         if(!pView) pView = ShaderResourceView::getNullView();\n 1385                          pDescSet->setSrv(destRangeIndex, descriptorIndex, pView.get());\n 1386                      }\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  229              \\param[in] pSrv The shader-resource-view object to bind\n  230          */\n  231:         bool setSrv(const BindLocation& bindLocation, const ShaderResourceView::SharedPtr& pSrv);\n  232  \n  233          /** Bind a UAV.\n  ...\n  241              \\return If the bind-location is valid, a shared pointer to the SRV. Otherwise returns nullptr\n  242          */\n  243:         ShaderResourceView::SharedPtr getSrv(const BindLocation& bindLocation) const;\n  244  \n  245          /** Get a UAV object\n  ...\n  393          struct AssignedSRV\n  394          {\n  395:             ShaderResourceView::SharedPtr pView;\n  396              Resource::SharedPtr pResource;\n  397          };\n  ...\n  423          bool checkDescriptorSrvUavCommon(\n  424              const BindLocation& bindLocation,\n  425:             const std::variant<ShaderResourceView::SharedPtr, UnorderedAccessView::SharedPtr>& pView,\n  426              const char* funcName) const;\n  427          bool checkRootDescriptorResourceCompatibility(const Resource::SharedPtr& pResource, const std::string& funcName) const;\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVars.cpp:\n  162                  pContext->getLowLevelData()->getCommandList()->SetGraphicsRootUnorderedAccessView(rootIndex, gpuAddress);\n  163              else\n  164:                 pContext->getLowLevelData()->getCommandList()->SetGraphicsRootShaderResourceView(rootIndex, gpuAddress);\n  165          }\n  166          else\n  ...\n  169                  pContext->getLowLevelData()->getCommandList()->SetComputeRootUnorderedAccessView(rootIndex, gpuAddress);\n  170              else\n  171:                 pContext->getLowLevelData()->getCommandList()->SetComputeRootShaderResourceView(rootIndex, gpuAddress);\n  172          }\n  173          #endif\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.cpp:\n  299      }\n  300  \n  301:     bool ShaderVar::setSrv(const ShaderResourceView::SharedPtr& pSrv) const\n  302      {\n  303          return mpBlock->setSrv(mOffset, pSrv);\n  ...\n  394      }\n  395  \n  396:     ShaderResourceView::SharedPtr ShaderVar::getSrv() const\n  397      {\n  398          return mpBlock->getSrv(mOffset);\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.h:\n  213              Logs an error and returns `false` if this variable doesn't point at a shader resource view.\n  214          */\n  215:         bool setSrv(const ShaderResourceView::SharedPtr& pSrv) const;\n  216  \n  217          /** Get the shader resource view that this variable points to.\n  218              Logs an error and returns null if this variable doesn't point at a shader resource view.\n  219          */\n  220:         ShaderResourceView::SharedPtr getSrv() const;\n  221  \n  222          /** Set the unordered access view that this variable points to.\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.cpp:\n  135      }\n  136  \n  137:     void RtVarsCmdList::SetGraphicsRootShaderResourceView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)\n  138      {\n  139          uint32_t rootOffset = mpRootSignature->getElementByteOffset(RootParameterIndex);\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.h:\n   47          void SetGraphicsRoot32BitConstants(UINT RootParameterIndex, UINT Num32BitValuesToSet, const void *pSrcData, UINT DestOffsetIn32BitValues);\n   48          void SetGraphicsRootConstantBufferView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);\n   49:         void SetGraphicsRootShaderResourceView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);\n   50          void SetGraphicsRootUnorderedAccessView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation);\n   51  \n   ..\n   89          void SetComputeRoot32BitConstants(UINT RootParameterIndex, UINT Num32BitValuesToSet, const void *pSrcData, UINT DestOffsetIn32BitValues) { should_not_get_here(); }\n   90          void SetComputeRootConstantBufferView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation) { should_not_get_here(); }\n   91:         void SetComputeRootShaderResourceView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation) { should_not_get_here(); }\n   92          void SetComputeRootUnorderedAccessView(UINT RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation) { should_not_get_here(); }\n   93          void IASetIndexBuffer(const D3D12_INDEX_BUFFER_VIEW *pView) { should_not_get_here(); }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n 1062              layout.addRange(DescriptorSet::Type::TextureSrv, 0, 1);\n 1063              DescriptorSet::SharedPtr pSet = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n 1064:             gpDevice->getApiHandle()->CreateShaderResourceView(nullptr, &srvDesc, pSet->getCpuHandle(0));\n 1065  \n 1066              ResourceWeakPtr pWeak = tlas.pTlas;\n 1067:             tlas.pSrv = std::make_shared<ShaderResourceView>(pWeak, pSet, 0, 1, 0, 1);\n 1068          }\n 1069  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.h:\n  527          {\n  528              Buffer::SharedPtr pTlas;\n  529:             ShaderResourceView::SharedPtr pSrv;         ///< Shader Resource View for binding the TLAS\n  530              Buffer::SharedPtr pInstanceDescs;           ///< Buffer holding instance descs for the TLAS\n  531              UpdateMode updateMode = UpdateMode::Rebuild; ///< Update mode this TLAS was created with.\n\n72 matches across 24 files\n\n\nSearching 742 files for \"ShaderResourceView::create\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n  213          auto createFunc = [](Buffer* pBuffer, uint32_t firstElement, uint32_t elementCount)\n  214          {\n  215:             return ShaderResourceView::create(pBuffer->shared_from_this(), firstElement, elementCount);\n  216          };\n  217  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  281      }\n  282  \n  283:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  284      {\n  285          if (!pTexture && getNullView()) return getNullView();\n  ...\n  304      }\n  305  \n  306:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount)\n  307      {\n  308          if (!pBuffer && getNullView()) return getNullView();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.cpp:\n   36      void createNullViews()\n   37      {\n   38:         gNullViews.srv = ShaderResourceView::create(getEmptyTexture(), 0, 1, 0, 1);\n   39          gNullViews.dsv = DepthStencilView::create(getEmptyTexture(), 0, 0, 1);\n   40          gNullViews.uav = UnorderedAccessView::create(getEmptyTexture(), 0, 0, 1);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  241          auto createFunc = [](Texture* pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  242          {\n  243:             return ShaderResourceView::create(pTexture->shared_from_this(), mostDetailedMip, mipCount, firstArraySlice, arraySize);\n  244          };\n  245  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  145  \n  146      // based on D3D code\n  147:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  148      {\n  149          if (!pTexture && getNullView()) return getNullView();\n  ...\n  154      }\n  155      /*\n  156:     ShaderResourceView::SharedPtr ShaderResourceView::create(ResourceWeakPtr pResource, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  157      {\n  158          Resource::SharedConstPtr pSharedPtr = pResource.lock();\n\n7 matches across 5 files\n\n\nSearching 742 files for \"sFrameWindow\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/FrameRate.h:\n   39          FrameRate()\n   40          {\n   41:             mFrameTimes.resize(sFrameWindow);\n   42              reset();\n   43          }\n   ..\n   58          {\n   59              mFrameCount++;\n   60:             mFrameTimes[mFrameCount % sFrameWindow] = mClock.tick().getRealTimeDelta();\n   61              mClock.setTime(0).tick();\n   62          }\n   ..\n   66          double getAverageFrameTime() const\n   67          {\n   68:             uint64_t frames = std::min(mFrameCount, sFrameWindow);\n   69              double elapsedTime = 0;\n   70              for(uint64_t i = 0; i < frames; i++) elapsedTime += mFrameTimes[i];\n   ..\n   77          double getLastFrameTime() const\n   78          {\n   79:             return mFrameTimes[mFrameCount % sFrameWindow];\n   80          }\n   81  \n   ..\n   94  \n   95      public:\n   96:         static const uint64_t sFrameWindow = 60;\n   97      };\n   98  \n\n5 matches in 1 file\n\n\nSearching 742 files for \"msgBox\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Linux/Linux.cpp:\n   61      };\n   62  \n   63:     MsgBoxButton msgBox(const std::string& msg, MsgBoxType mbType, MsgBoxIcon icon)\n   64      {\n   65          if (!gtk_init_check(0, nullptr))\n   ..\n  168              if (execv(linuxAppName.c_str(), (char* const*)argv.data()))\n  169              {\n  170:                 msgBox(\"Failed to launch process\");\n  171              }\n  172          }\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.cpp:\n   42      std::string gMsgBoxTitle = \"Falcor\";\n   43  \n   44:     void msgBoxTitle(const std::string& title)\n   45      {\n   46          gMsgBoxTitle = title;\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.h:\n  110          \\return An enum indicating which button was clicked.\n  111      */\n  112:     dlldecl MsgBoxButton msgBox(const std::string& msg, MsgBoxType type = MsgBoxType::Ok, MsgBoxIcon icon = MsgBoxIcon::None);\n  113  \n  114      /** Custom message box button.\n  ...\n  131          \\return The id of the button that was clicked.\n  132      */\n  133:     dlldecl uint32_t msgBox(const std::string& msg, std::vector<MsgBoxCustomButton> buttons, MsgBoxIcon icon = MsgBoxIcon::None, uint32_t defaultButtonId = uint32_t(-1));\n  134  \n  135      /** Set the title for message boxes. The default value is \"Falcor\"\n  136      */\n  137:     dlldecl void msgBoxTitle(const std::string& title);\n  138  \n  139      /** Finds a file in one of the media directories. The arguments must not alias.\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp:\n   50      }\n   51  \n   52:     MsgBoxButton msgBox(const std::string& msg, MsgBoxType type, MsgBoxIcon icon)\n   53      {\n   54          const MsgBoxCustomButton buttonOk{uint32_t(MsgBoxButton::Ok), \"Ok\"};\n   ..\n   71          }\n   72  \n   73:         return (MsgBoxButton)msgBox(msg, buttons, icon);\n   74      }\n   75  \n   76:     uint32_t msgBox(const std::string& msg, std::vector<MsgBoxCustomButton> buttons, MsgBoxIcon icon, uint32_t defaultButtonId)\n   77      {\n   78          assert(buttons.size() > 0);\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphImportExport.cpp:\n   63      {\n   64          logError(e.what(), Logger::MsgBox::None);\n   65:         auto res = msgBox(std::string(\"Error when importing graph from file `\" + filename + \"`\\n\" + e.what() + \"\\n\\nWould you like to try and reload the file?\").c_str(), MsgBoxType::YesNo);\n   66          return (res == MsgBoxButton::No);\n   67      }\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphUI.cpp:\n  426          if (passUIIt == mRenderPassUI.end())\n  427          {\n  428:             msgBox(\"Error setting graph output. Can't find node name.\");\n  429              return;\n  430          }\n  ...\n  433          if (outputIt == passUI.mNameToIndexOutput.end())\n  434          {\n  435:             msgBox(\"Error setting graph output. Can't find output name.\");\n  436              return;\n  437          }\n  ...\n  460      {\n  461          std::string warningMsg = std::string(\"Warning: Edge \") + srcString + \" - \" + dstString + \" can auto-resolve.\\n\";\n  462:         MsgBoxButton button = msgBox(warningMsg, MsgBoxType::OkCancel);\n  463  \n  464          if (button == MsgBoxButton::Ok)\n\n/home/max/dev/Falcor/src/Falcor/Utils/Logger.cpp:\n  174  \n  175                  // Show message box\n  176:                 auto result = msgBox(msg, buttons, icon);\n  177                  if (result == Debug) debugBreak();\n  178                  else if (result == Abort) exit(1);\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/VideoCapture.cpp:\n   96              if (VideoEncoder::isFormatSupported(texFormat) == false)\n   97              {\n   98:                 auto res = msgBox(\"Trying to record graph output \" + outputName + \" but the resource format is not supported by the video encoder.\\nWould you like to capture the output as an RGBA8Srgb resource?\\n\\nFor HDR textures, this operation will clamp the results\", MsgBoxType::YesNo);\n   99                  if(res == MsgBoxButton::No) continue;\n  100                  encoder.pBlitTex = createTextureForBlit(pTex.get());\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  633      try\n  634      {\n  635:         msgBoxTitle(\"Mogwai\");\n  636  \n  637          IRenderer::UniquePtr pRenderer = std::make_unique<Mogwai::Renderer>();\n\n/home/max/dev/Falcor/src/Mogwai/MogwaiSettings.cpp:\n   43              s += \" 'F11'  - Toggle Main Menu Auto-Hide\\n\";\n   44              s += \"\\n\" + gpFramework->getKeyboardShortcutsStr();\n   45:             msgBox(s);\n   46          }\n   47  \n   ..\n   51              s += \"Powered by Falcor \";\n   52              s += FALCOR_VERSION_STRING;\n   53:             msgBox(s);\n   54          }\n   55  \n\n/home/max/dev/Falcor/src/Samples/ModelViewer/ModelViewer.cpp:\n   57      if(!pBuilder)\n   58      {\n   59:         msgBox(\"Could not load model\");\n   60          return;\n   61      }\n\n/home/max/dev/Falcor/src/Samples/ProjectTemplate/ProjectTemplate.cpp:\n   39      if (w.button(\"Click Here\"))\n   40      {\n   41:         msgBox(\"Now why would you do that?\");\n   42      }\n   43  }\n\n/home/max/dev/Falcor/src/Tools/RenderGraphEditor/RenderGraphEditor.cpp:\n   91      else if (ext == \"py\")\n   92      {\n   93:         if (mViewerRunning) { msgBox(\"Viewer is running. Please close the viewer before loading a graph file.\", MsgBoxType::Ok); }\n   94          else loadGraphsFromFile(filename);\n   95      }\n   ..\n  161          if (mViewerRunning)\n  162          {\n  163:             msgBox(\"Viewer is running. Please close the viewer before loading a graph file.\", MsgBoxType::Ok);\n  164          }\n  165          else\n  ...\n  181          catch (const std::exception&)\n  182          {\n  183:             MsgBoxButton msgBoxButton = msgBox(\"Attempting to save invalid graph.\\nGraph may not execute correctly when loaded\\nAre you sure you want to save the graph?\"\n  184                  , MsgBoxType::OkCancel);\n  185:             saveGraph = !(msgBoxButton == MsgBoxButton::Cancel);\n  186          }\n  187  \n  ...\n  294          if (valid) s += \"The graph is valid\";\n  295          else s += std::string(\"The graph is invalid.\");\n  296:         msgBox(s);\n  297          mCurrentLog += s;\n  298      }\n  ...\n  339          catch (const std::exception& e)\n  340          {\n  341:             openViewer = msgBox(std::string(\"Graph is invalid :\\n \") + e.what() + \"\\n Are you sure you want to attempt preview?\", MsgBoxType::OkCancel) == MsgBoxButton::Ok;\n  342          }\n  343  \n  ...\n  461          if (nameToIndexIt != mGraphNamesToIndex.end())\n  462          {\n  463:             MsgBoxButton button = msgBox(\"Warning! Graph is already open. Update graph from file?\", MsgBoxType::YesNo);\n  464              if (button == MsgBoxButton::Yes)\n  465              {\n\n28 matches across 13 files\n\n\nSearching 742 files for \"RenderTargetView\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Fbo.cpp:\n  103      void Fbo::initApiHandle() const {}\n  104  \n  105:     RenderTargetView::SharedPtr Fbo::getRenderTargetView(uint32_t rtIndex) const\n  106      {\n  107          const auto& rt = mColorAttachments[rtIndex];\n  ...\n  112          else\n  113          {\n  114:             return RenderTargetView::getNullView();\n  115          }\n  116      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  138      }\n  139  \n  140:     void RenderContext::clearRtv(const RenderTargetView* pRtv, const float4& color)\n  141      {\n  142          resourceBarrier(pRtv->getResource(), Resource::State::RenderTarget);\n  143:         mpLowLevelData->getCommandList()->ClearRenderTargetView(pRtv->getApiHandle()->getCpuHandle(0), glm::value_ptr(color), 0, nullptr);\n  144          mCommandsPending = true;\n  145      }\n  ...\n  193          // We are setting the entire RTV array to make sure everything that was previously bound is detached\n  194          uint32_t colorTargets = Fbo::getMaxColorTargetCount();\n  195:         auto pNullRtv = RenderTargetView::getNullView();\n  196          std::vector<HeapCpuHandle> pRTV(colorTargets, pNullRtv->getApiHandle()->getCpuHandle(0));\n  197          HeapCpuHandle pDSV = DepthStencilView::getNullView()->getApiHandle()->getCpuHandle(0);\n  ...\n  204                  if (pTexture)\n  205                  {\n  206:                     pRTV[i] = pFbo->getRenderTargetView(i)->getApiHandle()->getCpuHandle(0);\n  207                      pCtx->resourceBarrier(pTexture.get(), Resource::State::RenderTarget);\n  208                  }\n  ...\n  416      }\n  417  \n  418:     void RenderContext::blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect, const uint4& dstRect, Sampler::Filter filter)\n  419      {\n  420          auto& blitData = sApiData.blitData;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  412      }\n  413  \n  414:     RenderTargetView::~RenderTargetView() = default;\n  415  \n  416:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  417      {\n  418          if (!pTexture && getNullView()) return getNullView();\n  ...\n  435          layout.addRange(DescriptorSet::Type::Rtv, 0, 1);\n  436          ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  437:         gpDevice->getApiHandle()->CreateRenderTargetView(resHandle, &desc, handle->getCpuHandle(0));\n  438  \n  439:         SharedPtr pObj = SharedPtr(new RenderTargetView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  440          return pObj;\n  441      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/FBO.h:\n  216          /** Get a render target view to a color target.\n  217          */\n  218:         RenderTargetView::SharedPtr getRenderTargetView(uint32_t rtIndex) const;\n  219  \n  220          struct SamplePosition\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp:\n   53                  if (pFbo->getColorTexture(i))\n   54                  {\n   55:                     clearRtv(pFbo->getRenderTargetView(i).get(), color);\n   56                  }\n   57              }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n   90              \\param[in] color The clear color\n   91          */\n   92:         void clearRtv(const RenderTargetView* pRtv, const float4& color);\n   93  \n   94          /** Clear a depth-stencil view.\n   ..\n  162              \\param[in] dstRect Target rectangle to blit to, specified by [left, up, right, down]\n  163          */\n  164:         void blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect = uint4(-1), const uint4& dstRect = uint4(-1), Sampler::Filter = Sampler::Filter::Linear);\n  165  \n  166          /** Submit the command list\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n   90          /** Default value used in create*() methods\n   91          */\n   92:         static const uint32_t kMaxPossible = RenderTargetView::kMaxPossible;\n   93  \n   94          virtual ~Resource() = 0;\n   ..\n  185  \n  186          mutable std::unordered_map<ResourceViewInfo, ShaderResourceView::SharedPtr, ViewInfoHashFunc> mSrvs;\n  187:         mutable std::unordered_map<ResourceViewInfo, RenderTargetView::SharedPtr, ViewInfoHashFunc> mRtvs;\n  188          mutable std::unordered_map<ResourceViewInfo, DepthStencilView::SharedPtr, ViewInfoHashFunc> mDsvs;\n  189          mutable std::unordered_map<ResourceViewInfo, UnorderedAccessView::SharedPtr, ViewInfoHashFunc> mUavs;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.cpp:\n   39          gNullViews.dsv = DepthStencilView::create(getEmptyTexture(), 0, 0, 1);\n   40          gNullViews.uav = UnorderedAccessView::create(getEmptyTexture(), 0, 0, 1);\n   41:         gNullViews.rtv = RenderTargetView::create(getEmptyTexture(), 0, 0, 1);\n   42          gNullViews.cbv = ConstantBufferView::create(Buffer::SharedPtr());\n   43      }\n   ..\n   51      DepthStencilView::SharedPtr    DepthStencilView::getNullView()    { return gNullViews.dsv; }\n   52      UnorderedAccessView::SharedPtr UnorderedAccessView::getNullView() { return gNullViews.uav; }\n   53:     RenderTargetView::SharedPtr    RenderTargetView::getNullView()    { return gNullViews.rtv; }\n   54      ConstantBufferView::SharedPtr  ConstantBufferView::getNullView()  { return gNullViews.cbv; }\n   55  \n   ..\n   57      {\n   58          m.regClass(ShaderResourceView);\n   59:         m.regClass(RenderTargetView);\n   60          m.regClass(UnorderedAccessView);\n   61          m.regClass(ConstantBufferView);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  152      };\n  153  \n  154:     class dlldecl RenderTargetView : public ResourceView<RtvHandle>\n  155      {\n  156      public:\n  157:         using SharedPtr = std::shared_ptr<RenderTargetView>;\n  158:         using SharedConstPtr = std::shared_ptr<const RenderTargetView>;\n  159          static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  160          static SharedPtr getNullView();\n  161:         ~RenderTargetView();\n  162      private:\n  163:         RenderTargetView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  164              ResourceView(pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  165      };\n  ...\n  182          ShaderResourceView::SharedPtr srv;\n  183          ConstantBufferView::SharedPtr cbv;\n  184:         RenderTargetView::SharedPtr   rtv;\n  185          UnorderedAccessView::SharedPtr uav;\n  186          DepthStencilView::SharedPtr dsv;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  227      }\n  228  \n  229:     RenderTargetView::SharedPtr Texture::getRTV(uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  230      {\n  231          auto createFunc = [](Texture* pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  232          {\n  233:             printf(\"RenderTargetView::create\\n\");\n  234:             auto result = RenderTargetView::create(pTexture->shared_from_this(), mostDetailedMip, firstArraySlice, arraySize);\n  235              if(!result) {\n  236:                 printf(\"ERROR RenderTargetView::create returned NULL\\n\");\n  237              }\n  238              return result;\n  239          };\n  240  \n  241:         auto result = findViewCommon<RenderTargetView>(this, mipLevel, 1, firstArraySlice, arraySize, mRtvs, createFunc);\n  242          if(!result) {\n  243:             printf(\"ERROR findViewCommon<RenderTargetView> returned NULL\\n\");\n  244          }\n  245  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.h:\n  196              \\param[in] arraySize The array size. If this is equal to Texture#kMaxPossible, will create a view ranging from firstArraySlice to the texture's array size\n  197          */\n  198:         RenderTargetView::SharedPtr getRTV(uint32_t mipLevel = 0, uint32_t firstArraySlice = 0, uint32_t arraySize = kMaxPossible);\n  199  \n  200          /** Get a depth stencil view.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n  107      }\n  108  \n  109:     template void clearColorImageCommon(CopyContext* pCtx, const RenderTargetView* pView, const float4& clearVal);\n  110  \n  111      void ComputeContext::clearUAV(const UnorderedAccessView* pUav, const float4& value)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   67              {\n   68                  printf(\"FIAH-0-1\\n\");\n   69:                 assert(arraySize == -1 || arraySize == getRenderTargetView(i)->getViewInfo().arraySize);\n   70:                 auto g = getRenderTargetView(i);\n   71                  if (!g) {\n   72                      printf(\"ERROR render target view is NULL\\n\");\n   ..\n   74                  auto v = g->getViewInfo();\n   75                  printf(\"FIAH-0-2\\n\");\n   76:                 arraySize = getRenderTargetView(i)->getViewInfo().arraySize;\n   77                  printf(\"FIAH-0-3\\n\");\n   78:                 attachments[rtCount] = getRenderTargetView(i)->getApiHandle();\n   79                  printf(\"FIAH-0-4\\n\");\n   80                  rtCount++;\n   ..\n  126      }\n  127  \n  128:     RenderTargetView::SharedPtr Fbo::getRenderTargetView(uint32_t rtIndex) const\n  129      {\n  130          printf(\"gRTV-0\\n\");\n  ...\n  141          {   \n  142              printf(\"gRTV-2\\n\");\n  143:             return RenderTargetView::getNullView();\n  144          }\n  145      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   48      void clearColorImageCommon(CopyContext* pCtx, const ViewType* pView, const ClearType& clearVal);\n   49  \n   50:     void RenderContext::clearRtv(const RenderTargetView* pRtv, const float4& color)\n   51      {\n   52          clearColorImageCommon(this, pRtv, color);\n   ..\n  289      }\n  290  \n  291:     void RenderContext::blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect, const uint4& dstRect, Sampler::Filter filter)\n  292      {\n  293          const Texture* pTexture = dynamic_cast<const Texture*>(pSrc->getResource());\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  266          */\n  267      }\n  268:     RenderTargetView::~RenderTargetView()\n  269      {\n  270:         static std::vector<RenderTargetView::ApiHandle> hdl;\n  271          hdl.push_back(mApiHandle);\n  272      }\n  273      // based on D3D code\n  274:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  275      {\n  276:         printf(\"RenderTargetView::create\\n\");\n  277          if (!pTexture && getNullView()) return getNullView();\n  278:         printf(\"RenderTargetView::create 1\\n\");\n  279          return getNullView();\n  280      }\n  281      /*\n  282:     RenderTargetView::SharedPtr RenderTargetView::create(ResourceWeakPtr pResource, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  283      {\n  284          Resource::SharedConstPtr pSharedPtr = pResource.lock();\n  ...\n  287          if (pSharedPtr == nullptr && gNullRtv== nullptr)\n  288          {\n  289:             gNullRtv = SharedPtr(new RenderTargetView(pResource, nullptr, mipLevel, firstArraySlice, arraySize));\n  290          }\n  291  \n  ...\n  295              if (pSharedPtr->getApiHandle().getType() == VkResourceType::Buffer)\n  296              {\n  297:                 logWarning(\"Cannot create RenderTargetView from a buffer!\");\n  298                  return gNullRtv;\n  299              }\n  ...\n  301              // Create view\n  302              auto view = createViewCommon(pSharedPtr, mipLevel, 1, firstArraySlice, arraySize);\n  303:             return SharedPtr(new RenderTargetView(pResource, view, mipLevel, firstArraySlice, arraySize));\n  304          }\n  305          else\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n   56          auto pCurrentFbo = mpTargetFBO;\n   57          mpTargetFBO = Fbo::create2D(width, height, pBackBufferFBO->getDesc());\n   58:         gpDevice->getRenderContext()->blit(pCurrentFbo->getColorTexture(0)->getSRV(), mpTargetFBO->getRenderTargetView(0));\n   59  \n   60          // Tell the GUI the swap-chain size changed\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.h:\n   95          void SOSetTargets(UINT StartSlot, UINT NumViews, const D3D12_STREAM_OUTPUT_BUFFER_VIEW *pViews) { should_not_get_here(); }\n   96          void ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, FLOAT Depth, UINT8 Stencil, UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   97:         void ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, const FLOAT ColorRGBA[ 4 ], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   98          void ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource *pResource, const FLOAT Values[4], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   99          void ClearUnorderedAccessViewUint(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource *pResource, const UINT Values[4], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  564                  Texture::SharedPtr pOutTex = std::dynamic_pointer_cast<Texture>(pGraph->getOutput(mGraphs[mActiveGraph].mainOutput));\n  565                  assert(pOutTex);\n  566:                 pRenderContext->blit(pOutTex->getSRV(), pTargetFbo->getRenderTargetView(0));\n  567              }\n  568          }\n\n/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp:\n  154      for (uint32_t i = 1; i < 3; i++)\n  155      {\n  156:         const auto& pRtv = mpFbo->getRenderTargetView(i).get();\n  157          if (pRtv->getResource() != nullptr) pContext->clearRtv(pRtv, float4(0));\n  158      }\n\n/home/max/dev/Falcor/src/RenderPasses/SkyBox/SkyBox.cpp:\n  143      mpFbo->attachDepthStencilTarget(renderData[kDepth]->asTexture());\n  144  \n  145:     pRenderContext->clearRtv(mpFbo->getRenderTargetView(0).get(), float4(0));\n  146  \n  147      if (!mpScene) return;\n\n/home/max/dev/Falcor/src/RenderPasses/SVGFPass/SVGFPass.cpp:\n  380          if (i == std::min(mFeedbackTap, mFilterIterations - 1))\n  381          {\n  382:             pRenderContext->blit(curTargetFbo->getColorTexture(0)->getSRV(), mpFilteredPastFbo->getRenderTargetView(0));\n  383          }\n  384  \n  ...\n  388      if (mFeedbackTap < 0)\n  389      {\n  390:         pRenderContext->blit(mpCurReprojFbo->getColorTexture(0)->getSRV(), mpFilteredPastFbo->getRenderTargetView(0));\n  391      }\n  392  }\n\n/home/max/dev/Falcor/src/Samples/CudaInterop/CudaInterop.cpp:\n   64      uint32_t format = (getFormatType(mpInputTex->getFormat()) == FormatType::Float) ? cudaChannelFormatKindFloat : cudaChannelFormatKindUnsigned;\n   65      launchCopySurface(mInputSurf, mOutputSurf, mWidth, mHeight, format);\n   66:     pRenderContext->blit(mpOutputTex->getSRV(), pTargetFbo->getRenderTargetView(0));\n   67  }\n   68  \n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n  115      pContext->clearUAV(mpRtOut->getUAV().get(), kClearColor);\n  116      mpScene->raytrace(pContext, mpRaytraceProgram.get(), mpRtVars, uint3(pTargetFbo->getWidth(), pTargetFbo->getHeight(), 1));\n  117:     pContext->blit(mpRtOut->getSRV(), pTargetFbo->getRenderTargetView(0));\n  118  }\n  119  \n\n70 matches across 23 files\n\n\nSearching 742 files for \"ConstTextureSharedPtrRef\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  281      }\n  282  \n  283:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  284      {\n  285          if (!pTexture && getNullView()) return getNullView();\n  ...\n  327      }\n  328  \n  329:     DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  330      {\n  331          if (!pTexture && getNullView()) return getNullView();\n  ...\n  362      }\n  363  \n  364:     UnorderedAccessView::SharedPtr UnorderedAccessView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  365      {\n  366          if (!pTexture && getNullView()) return getNullView();\n  ...\n  414      RenderTargetView::~RenderTargetView() = default;\n  415  \n  416:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  417      {\n  418          if (!pTexture && getNullView()) return getNullView();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n   35      class Buffer;\n   36      using ResourceWeakPtr = std::weak_ptr<Resource>;\n   37:     using ConstTextureSharedPtrRef = const std::shared_ptr<Texture>&;\n   38      using ConstBufferSharedPtrRef = const std::shared_ptr<Buffer>&;\n   39  \n   ..\n  109          using SharedConstPtr = std::shared_ptr<const ShaderResourceView>;\n  110  \n  111:         static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize);\n  112          static SharedPtr create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount);\n  113          static SharedPtr getNullView();\n  ...\n  128          using SharedConstPtr = std::shared_ptr<const DepthStencilView>;\n  129  \n  130:         static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  131          static SharedPtr getNullView();\n  132      private:\n  ...\n  141          using SharedConstPtr = std::shared_ptr<const UnorderedAccessView>;\n  142  \n  143:         static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  144          static SharedPtr create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount);\n  145          static SharedPtr getNullView();\n  ...\n  157          using SharedPtr = std::shared_ptr<RenderTargetView>;\n  158          using SharedConstPtr = std::shared_ptr<const RenderTargetView>;\n  159:         static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  160          static SharedPtr getNullView();\n  161          ~RenderTargetView();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  146  \n  147      // based on D3D code\n  148:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  149      {\n  150          if (!pTexture && getNullView()) return getNullView();\n  ...\n  193      }\n  194      // based on D3D code\n  195:     DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  196      {\n  197          if (!pTexture && getNullView()) return getNullView();\n  ...\n  218      */\n  219      // based on D3D code\n  220:     UnorderedAccessView::SharedPtr UnorderedAccessView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  221      {\n  222          if (!pTexture && getNullView()) return getNullView();\n  ...\n  272      }\n  273      // based on D3D code\n  274:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  275      {\n  276          printf(\"RenderTargetView::create\\n\");\n\n13 matches across 3 files\n\n\nSearching 742 files for \"DeviceHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorHeap.cpp:\n   34      D3D12DescriptorHeap::D3D12DescriptorHeap(D3D12_DESCRIPTOR_HEAP_TYPE type, uint32_t chunkCount) : mMaxChunkCount(chunkCount), mType(type)\n   35      {\n   36:         DeviceHandle pDevice = gpDevice->getApiHandle();\n   37          mDescriptorSize = pDevice->GetDescriptorHandleIncrementSize(type);\n   38      }\n   ..\n   43      {\n   44          assert(gpDevice);\n   45:         DeviceHandle pDevice = gpDevice->getApiHandle();\n   46  \n   47          uint32_t chunkCount = (descCount + kDescPerChunk - 1) / kDescPerChunk;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Device.cpp:\n  123      }\n  124  \n  125:     DeviceHandle createDevice(IDXGIFactory4* pFactory, D3D_FEATURE_LEVEL requestedFeatureLevel, const std::vector<UUID>& experimentalFeatures)\n  126      {\n  127          // Feature levels to try creating devices. Listed in descending order so the highest supported level is used.\n  ...\n  141          // Find the HW adapter\n  142          IDXGIAdapter1Ptr pAdapter;\n  143:         DeviceHandle pDevice;\n  144          D3D_FEATURE_LEVEL deviceFeatureLevel;\n  145  \n  ...\n  202      }\n  203  \n  204:     Device::SupportedFeatures getSupportedFeatures(DeviceHandle pDevice)\n  205      {\n  206          Device::SupportedFeatures supported = Device::SupportedFeatures::None;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  203  \n  204      using WindowHandle = HWND;\n  205:     using DeviceHandle = ID3D12DevicePtr;\n  206      using CommandListHandle = ID3D12GraphicsCommandListPtr;\n  207      using CommandQueueHandle = ID3D12CommandQueuePtr;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.h:\n   50          using SharedPtr = std::shared_ptr<Device>;\n   51          using SharedConstPtr = std::shared_ptr<const Device>;\n   52:         using ApiHandle = DeviceHandle;\n   53          static const uint32_t kQueueTypeCount = (uint32_t)LowLevelContextData::CommandQueueType::Count;\n   54  \n   ..\n  129          /** Get the native API handle\n  130          */\n  131:         const DeviceHandle& getApiHandle() { return mApiHandle; }\n  132  \n  133          /** Present the back-buffer to the window\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   84  #endif\n   85  \n   86:     using DeviceHandle = VkDeviceData::SharedPtr;\n   87      using CommandListHandle = VkCommandBuffer;\n   88      using CommandQueueHandle = VkQueue;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDevice.cpp:\n  656          if (initMemoryTypes(physicalDevice, mpApiData) == false) return false;\n  657  \n  658:         mApiHandle = DeviceHandle::create(instance, physicalDevice, device, surface);\n  659          mGpuTimestampFrequency = getPhysicalDeviceLimits().timestampPeriod / (1000 * 1000);\n  660  \n\n10 matches across 6 files\n\n\nSearching 742 files for \"CreateRenderTargetView\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  435          layout.addRange(DescriptorSet::Type::Rtv, 0, 1);\n  436          ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  437:         gpDevice->getApiHandle()->CreateRenderTargetView(resHandle, &desc, handle->getCpuHandle(0));\n  438  \n  439          SharedPtr pObj = SharedPtr(new RenderTargetView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  327          layout.addRange(DescriptorSet::Type::Rtv, 0, 1);\n  328          ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  329:         gpDevice->getApiHandle()->CreateRenderTargetView(resHandle, &desc, handle->getCpuHandle(0));\n  330  \n  331          SharedPtr pObj = SharedPtr(new RenderTargetView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n\n2 matches across 2 files\n\n\nSearching 742 files for \"FIAH\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   56      void Fbo::initApiHandle() const\n   57      {\n   58:         printf(\"FIAH-0\\n\");\n   59          // Bind the color buffers\n   60          uint32_t arraySize = -1;\n   ..\n   63          for (uint32_t i = 0; i < Fbo::getMaxColorTargetCount(); i++)\n   64          {\n   65:             printf(\"FIAH-0-0\\n\");\n   66              if(mColorAttachments[i].pTexture)\n   67              {\n   68:                 printf(\"FIAH-0-1\\n\");\n   69                  assert(arraySize == -1 || arraySize == getRenderTargetView(i)->getViewInfo().arraySize);\n   70                  auto g = getRenderTargetView(i);\n   ..\n   73                  }\n   74                  auto v = g->getViewInfo();\n   75:                 printf(\"FIAH-0-2\\n\");\n   76                  arraySize = getRenderTargetView(i)->getViewInfo().arraySize;\n   77:                 printf(\"FIAH-0-3\\n\");\n   78                  attachments[rtCount] = getRenderTargetView(i)->getApiHandle();\n   79:                 printf(\"FIAH-0-4\\n\");\n   80                  rtCount++;\n   81              }\n   82          }\n   83:         printf(\"FIAH-1\\n\");\n   84          // Bind the depth buffer\n   85          if(mDepthStencil.pTexture)\n   ..\n   90              rtCount++;\n   91          }\n   92:         printf(\"FIAH-2\\n\");\n   93          // Render Pass\n   94          RenderPassCreateInfo renderPassInfo;\n   ..\n   96          VkRenderPass pass;\n   97          vkCreateRenderPass(gpDevice->getApiHandle(), &renderPassInfo.info, nullptr, &pass);\n   98:         printf(\"FIAH-3\\n\");\n   99          // Framebuffer\n  100          VkFramebufferCreateInfo frameBufferInfo = {};\n  ...\n  108  \n  109          VkFramebuffer frameBuffer;\n  110:         printf(\"FIAH-4\\n\");\n  111          vkCreateFramebuffer(gpDevice->getApiHandle(), &frameBufferInfo, nullptr, &frameBuffer);\n  112  \n  113:         printf(\"FIAH-5\\n\");\n  114          if (mApiHandle) gpDevice->releaseResource(std::static_pointer_cast<VkBaseApiHandle>(mApiHandle));\n  115          mApiHandle = ApiHandle::create(pass, frameBuffer);\n  116  \n  117:         printf(\"FIAH done\\n\");\n  118      }\n  119  \n\n12 matches in 1 file\n\n\nSearching 742 files for \"FIAH\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   58      void Fbo::initApiHandle() const\n   59      {\n   60:         printf(\"FIAH-0 for %s attachments\\n\", Fbo::getMaxColorTargetCount());\n   61          // Bind the color buffers\n   62          uint32_t arraySize = -1;\n   ..\n   65          for (uint32_t i = 0; i < Fbo::getMaxColorTargetCount(); i++)\n   66          {\n   67:             printf(\"FIAH-0-0 i %s\\n\", i);\n   68              if(mColorAttachments[i].pTexture)\n   69              {\n   70:                 printf(\"FIAH-0-1\\n\");\n   71                  assert(arraySize == -1 || arraySize == getRenderTargetView(i)->getViewInfo().arraySize);\n   72                  auto g = getRenderTargetView(i);\n   ..\n   75                  }\n   76                  auto v = g->getViewInfo();\n   77:                 printf(\"FIAH-0-2\\n\");\n   78                  arraySize = getRenderTargetView(i)->getViewInfo().arraySize;\n   79:                 printf(\"FIAH-0-3\\n\");\n   80                  attachments[rtCount] = getRenderTargetView(i)->getApiHandle();\n   81:                 printf(\"FIAH-0-4\\n\");\n   82                  rtCount++;\n   83              }\n   84          }\n   85:         printf(\"FIAH-1\\n\");\n   86          // Bind the depth buffer\n   87          if(mDepthStencil.pTexture)\n   ..\n   92              rtCount++;\n   93          }\n   94:         printf(\"FIAH-2\\n\");\n   95          // Render Pass\n   96          RenderPassCreateInfo renderPassInfo;\n   ..\n   98          VkRenderPass pass;\n   99          vkCreateRenderPass(gpDevice->getApiHandle(), &renderPassInfo.info, nullptr, &pass);\n  100:         printf(\"FIAH-3\\n\");\n  101          // Framebuffer\n  102          VkFramebufferCreateInfo frameBufferInfo = {};\n  ...\n  110  \n  111          VkFramebuffer frameBuffer;\n  112:         printf(\"FIAH-4\\n\");\n  113          vkCreateFramebuffer(gpDevice->getApiHandle(), &frameBufferInfo, nullptr, &frameBuffer);\n  114  \n  115:         printf(\"FIAH-5\\n\");\n  116          if (mApiHandle) gpDevice->releaseResource(std::static_pointer_cast<VkBaseApiHandle>(mApiHandle));\n  117          mApiHandle = ApiHandle::create(pass, frameBuffer);\n  118  \n  119:         printf(\"FIAH done\\n\");\n  120      }\n  121  \n\n12 matches in 1 file\n\n\nSearching 742 files for \"2222-1\" (case sensitive)\n\n0 matches\n\nSearching 742 files for \"222-1\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n   76          printf(\"222\\n\");\n   77          mpUploadHeap = GpuMemoryHeap::create(GpuMemoryHeap::Type::Upload, 1024 * 1024 * 2, mpFrameFence);\n   78:         printf(\"222-1\\n\");\n   79          mpRenderContext = RenderContext::create(mCmdQueues[(uint32_t)LowLevelContextData::CommandQueueType::Direct][0]);\n   80          createNullViews();\n\n1 match in 1 file\n\n\nSearching 742 files for \"222-1\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n   76          printf(\"222\\n\");\n   77          mpUploadHeap = GpuMemoryHeap::create(GpuMemoryHeap::Type::Upload, 1024 * 1024 * 2, mpFrameFence);\n   78:         printf(\"222-1\\n\");\n   79          mpRenderContext = RenderContext::create(mCmdQueues[(uint32_t)LowLevelContextData::CommandQueueType::Direct][0]);\n   80          printf(\"222-2\\n\");\n\n1 match in 1 file\n\n\nSearching 742 files for \"DepthStencilView\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Fbo.cpp:\n  116      }\n  117  \n  118:     DepthStencilView::SharedPtr Fbo::getDepthStencilView() const\n  119      {\n  120          if(mDepthStencil.pTexture)\n  ...\n  124          else\n  125          {\n  126:             return DepthStencilView::getNullView();\n  127          }\n  128      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  145      }\n  146  \n  147:     void RenderContext::clearDsv(const DepthStencilView* pDsv, float depth, uint8_t stencil, bool clearDepth, bool clearStencil)\n  148      {\n  149          uint32_t flags = clearDepth ? D3D12_CLEAR_FLAG_DEPTH : 0;\n  ...\n  151  \n  152          resourceBarrier(pDsv->getResource(), Resource::State::DepthStencil);\n  153:         mpLowLevelData->getCommandList()->ClearDepthStencilView(pDsv->getApiHandle()->getCpuHandle(0), D3D12_CLEAR_FLAGS(flags), depth, stencil, 0, nullptr);\n  154          mCommandsPending = true;\n  155      }\n  ...\n  195          auto pNullRtv = RenderTargetView::getNullView();\n  196          std::vector<HeapCpuHandle> pRTV(colorTargets, pNullRtv->getApiHandle()->getCpuHandle(0));\n  197:         HeapCpuHandle pDSV = DepthStencilView::getNullView()->getApiHandle()->getCpuHandle(0);\n  198  \n  199          if (pFbo)\n  ...\n  212              if(pTexture)\n  213              {\n  214:                 pDSV = pFbo->getDepthStencilView()->getApiHandle()->getCpuHandle(0);\n  215                  if (pTexture)\n  216                  {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  327      }\n  328  \n  329:     DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  330      {\n  331          if (!pTexture && getNullView()) return getNullView();\n  ...\n  348          layout.addRange(DescriptorSet::Type::Dsv, 0, 1);\n  349          ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  350:         gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  351  \n  352:         return SharedPtr(new DepthStencilView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  353      }\n  354  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/FBO.h:\n  212          /** Get a depth-stencil view to the depth-stencil target.\n  213          */\n  214:         DepthStencilView::SharedPtr getDepthStencilView() const;\n  215  \n  216          /** Get a render target view to a color target.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp:\n   60          if (clearDepth || clearStencil)\n   61          {\n   62:             clearDsv(pFbo->getDepthStencilView().get(), depth, stencil, clearDepth, clearStencil);\n   63          }\n   64      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n   99              \\param[in] clearStencil Optional. Controls whether or not to clear the stencil channel\n  100          */\n  101:         void clearDsv(const DepthStencilView* pDsv, float depth, uint8_t stencil, bool clearDepth = true, bool clearStencil = true);\n  102  \n  103          /** Clear a texture. The function will use the bind-flags to find the optimal API call to make\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n  186          mutable std::unordered_map<ResourceViewInfo, ShaderResourceView::SharedPtr, ViewInfoHashFunc> mSrvs;\n  187          mutable std::unordered_map<ResourceViewInfo, RenderTargetView::SharedPtr, ViewInfoHashFunc> mRtvs;\n  188:         mutable std::unordered_map<ResourceViewInfo, DepthStencilView::SharedPtr, ViewInfoHashFunc> mDsvs;\n  189          mutable std::unordered_map<ResourceViewInfo, UnorderedAccessView::SharedPtr, ViewInfoHashFunc> mUavs;\n  190      };\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.cpp:\n   37      {\n   38          gNullViews.srv = ShaderResourceView::create(getEmptyTexture(), 0, 1, 0, 1);\n   39:         gNullViews.dsv = DepthStencilView::create(getEmptyTexture(), 0, 0, 1);\n   40          gNullViews.uav = UnorderedAccessView::create(getEmptyTexture(), 0, 0, 1);\n   41          gNullViews.rtv = RenderTargetView::create(getEmptyTexture(), 0, 0, 1);\n   ..\n   49  \n   50      ShaderResourceView::SharedPtr  ShaderResourceView::getNullView()  { return gNullViews.srv; }\n   51:     DepthStencilView::SharedPtr    DepthStencilView::getNullView()    { return gNullViews.dsv; }\n   52      UnorderedAccessView::SharedPtr UnorderedAccessView::getNullView() { return gNullViews.uav; }\n   53      RenderTargetView::SharedPtr    RenderTargetView::getNullView()    { return gNullViews.rtv; }\n   ..\n   60          m.regClass(UnorderedAccessView);\n   61          m.regClass(ConstantBufferView);\n   62:         m.regClass(DepthStencilView);\n   63      }\n   64  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  122      };\n  123  \n  124:     class dlldecl DepthStencilView : public ResourceView<DsvHandle>\n  125      {\n  126      public:\n  127:         using SharedPtr = std::shared_ptr<DepthStencilView>;\n  128:         using SharedConstPtr = std::shared_ptr<const DepthStencilView>;\n  129  \n  130          static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  131          static SharedPtr getNullView();\n  132      private:\n  133:         DepthStencilView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  134              ResourceView(pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  135      };\n  ...\n  184          RenderTargetView::SharedPtr   rtv;\n  185          UnorderedAccessView::SharedPtr uav;\n  186:         DepthStencilView::SharedPtr dsv;\n  187      };\n  188  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  197      }\n  198  \n  199:     DepthStencilView::SharedPtr Texture::getDSV(uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  200      {\n  201          auto createFunc = [](Texture* pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  202          {\n  203:             return DepthStencilView::create(pTexture->shared_from_this(), mostDetailedMip, firstArraySlice, arraySize);\n  204          };\n  205  \n  206:         return findViewCommon<DepthStencilView>(this, mipLevel, 1, firstArraySlice, arraySize, mDsvs, createFunc);\n  207      }\n  208  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.h:\n  203              \\param[in] arraySize The array size. If this is equal to Texture#kMaxPossible, will create a view ranging from firstArraySlice to the texture's array size\n  204          */\n  205:         DepthStencilView::SharedPtr getDSV(uint32_t mipLevel = 0, uint32_t firstArraySlice = 0, uint32_t arraySize = kMaxPossible);\n  206  \n  207          /** Get an unordered access view.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   87          if(mDepthStencil.pTexture)\n   88          {\n   89:             assert(arraySize == -1 || arraySize == getDepthStencilView()->getViewInfo().arraySize);\n   90:             if (arraySize == -1) arraySize = getDepthStencilView()->getViewInfo().arraySize;\n   91:             attachments[rtCount] = getDepthStencilView()->getApiHandle();\n   92              rtCount++;\n   93          }\n   ..\n  147      }\n  148  \n  149:     DepthStencilView::SharedPtr Fbo::getDepthStencilView() const\n  150      {\n  151          if (mDepthStencil.pTexture)\n  ...\n  155          else\n  156          {\n  157:             return DepthStencilView::getNullView();\n  158          }\n  159      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   54      }\n   55  \n   56:     void RenderContext::clearDsv(const DepthStencilView* pDsv, float depth, uint8_t stencil, bool clearDepth, bool clearStencil)\n   57      {\n   58          resourceBarrier(pDsv->getResource(), Resource::State::CopyDest);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  193      }\n  194      // based on D3D code\n  195:     DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  196      {\n  197:         printf(\"DepthStencilView::create\\n\");\n  198  \n  199          if (!pTexture && getNullView()) return getNullView();\n  ...\n  217          //ApiHandle\n  218          auto handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  219:         //gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  220  \n  221:         return SharedPtr(new DepthStencilView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  222      }\n  223      /*\n  224:     DepthStencilView::SharedPtr DepthStencilView::create(ResourceWeakPtr pResource, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  225      {\n  226          Resource::SharedConstPtr pSharedPtr = pResource.lock();\n  ...\n  232          if (pSharedPtr->getApiHandle().getType() == VkResourceType::Buffer)\n  233          {\n  234:             logWarning(\"Cannot create DepthStencilView from a buffer!\");\n  235              return gNullDsv;\n  236          }\n  237  \n  238          auto view = createViewCommon(pSharedPtr, mipLevel, 1, firstArraySlice, arraySize);\n  239:         return SharedPtr(new DepthStencilView(pResource, view, mipLevel, firstArraySlice, arraySize));\n  240      }\n  241      */\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.h:\n   94          void IASetVertexBuffers(UINT StartSlot, UINT NumViews, const D3D12_VERTEX_BUFFER_VIEW *pViews) { should_not_get_here(); }\n   95          void SOSetTargets(UINT StartSlot, UINT NumViews, const D3D12_STREAM_OUTPUT_BUFFER_VIEW *pViews) { should_not_get_here(); }\n   96:         void ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, FLOAT Depth, UINT8 Stencil, UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   97          void ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, const FLOAT ColorRGBA[ 4 ], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   98          void ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource *pResource, const FLOAT Values[4], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n\n47 matches across 15 files\n\n\nSearching 742 files for \"DepthStencilView\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Fbo.cpp:\n  116      }\n  117  \n  118:     DepthStencilView::SharedPtr Fbo::getDepthStencilView() const\n  119      {\n  120          if(mDepthStencil.pTexture)\n  ...\n  124          else\n  125          {\n  126:             return DepthStencilView::getNullView();\n  127          }\n  128      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  145      }\n  146  \n  147:     void RenderContext::clearDsv(const DepthStencilView* pDsv, float depth, uint8_t stencil, bool clearDepth, bool clearStencil)\n  148      {\n  149          uint32_t flags = clearDepth ? D3D12_CLEAR_FLAG_DEPTH : 0;\n  ...\n  151  \n  152          resourceBarrier(pDsv->getResource(), Resource::State::DepthStencil);\n  153:         mpLowLevelData->getCommandList()->ClearDepthStencilView(pDsv->getApiHandle()->getCpuHandle(0), D3D12_CLEAR_FLAGS(flags), depth, stencil, 0, nullptr);\n  154          mCommandsPending = true;\n  155      }\n  ...\n  195          auto pNullRtv = RenderTargetView::getNullView();\n  196          std::vector<HeapCpuHandle> pRTV(colorTargets, pNullRtv->getApiHandle()->getCpuHandle(0));\n  197:         HeapCpuHandle pDSV = DepthStencilView::getNullView()->getApiHandle()->getCpuHandle(0);\n  198  \n  199          if (pFbo)\n  ...\n  212              if(pTexture)\n  213              {\n  214:                 pDSV = pFbo->getDepthStencilView()->getApiHandle()->getCpuHandle(0);\n  215                  if (pTexture)\n  216                  {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  327      }\n  328  \n  329:     DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  330      {\n  331          if (!pTexture && getNullView()) return getNullView();\n  ...\n  348          layout.addRange(DescriptorSet::Type::Dsv, 0, 1);\n  349          ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  350:         gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  351  \n  352:         return SharedPtr(new DepthStencilView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  353      }\n  354  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/FBO.h:\n  212          /** Get a depth-stencil view to the depth-stencil target.\n  213          */\n  214:         DepthStencilView::SharedPtr getDepthStencilView() const;\n  215  \n  216          /** Get a render target view to a color target.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp:\n   60          if (clearDepth || clearStencil)\n   61          {\n   62:             clearDsv(pFbo->getDepthStencilView().get(), depth, stencil, clearDepth, clearStencil);\n   63          }\n   64      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n   99              \\param[in] clearStencil Optional. Controls whether or not to clear the stencil channel\n  100          */\n  101:         void clearDsv(const DepthStencilView* pDsv, float depth, uint8_t stencil, bool clearDepth = true, bool clearStencil = true);\n  102  \n  103          /** Clear a texture. The function will use the bind-flags to find the optimal API call to make\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n  186          mutable std::unordered_map<ResourceViewInfo, ShaderResourceView::SharedPtr, ViewInfoHashFunc> mSrvs;\n  187          mutable std::unordered_map<ResourceViewInfo, RenderTargetView::SharedPtr, ViewInfoHashFunc> mRtvs;\n  188:         mutable std::unordered_map<ResourceViewInfo, DepthStencilView::SharedPtr, ViewInfoHashFunc> mDsvs;\n  189          mutable std::unordered_map<ResourceViewInfo, UnorderedAccessView::SharedPtr, ViewInfoHashFunc> mUavs;\n  190      };\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.cpp:\n   37      {\n   38          gNullViews.srv = ShaderResourceView::create(getEmptyTexture(), 0, 1, 0, 1);\n   39:         gNullViews.dsv = DepthStencilView::create(getEmptyTexture(), 0, 0, 1);\n   40          gNullViews.uav = UnorderedAccessView::create(getEmptyTexture(), 0, 0, 1);\n   41          gNullViews.rtv = RenderTargetView::create(getEmptyTexture(), 0, 0, 1);\n   ..\n   49  \n   50      ShaderResourceView::SharedPtr  ShaderResourceView::getNullView()  { return gNullViews.srv; }\n   51:     DepthStencilView::SharedPtr    DepthStencilView::getNullView()    { return gNullViews.dsv; }\n   52      UnorderedAccessView::SharedPtr UnorderedAccessView::getNullView() { return gNullViews.uav; }\n   53      RenderTargetView::SharedPtr    RenderTargetView::getNullView()    { return gNullViews.rtv; }\n   ..\n   60          m.regClass(UnorderedAccessView);\n   61          m.regClass(ConstantBufferView);\n   62:         m.regClass(DepthStencilView);\n   63      }\n   64  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  122      };\n  123  \n  124:     class dlldecl DepthStencilView : public ResourceView<DsvHandle>\n  125      {\n  126      public:\n  127:         using SharedPtr = std::shared_ptr<DepthStencilView>;\n  128:         using SharedConstPtr = std::shared_ptr<const DepthStencilView>;\n  129  \n  130          static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  131          static SharedPtr getNullView();\n  132      private:\n  133:         DepthStencilView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  134              ResourceView(pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  135      };\n  ...\n  184          RenderTargetView::SharedPtr   rtv;\n  185          UnorderedAccessView::SharedPtr uav;\n  186:         DepthStencilView::SharedPtr dsv;\n  187      };\n  188  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  197      }\n  198  \n  199:     DepthStencilView::SharedPtr Texture::getDSV(uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  200      {\n  201          auto createFunc = [](Texture* pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  202          {\n  203:             return DepthStencilView::create(pTexture->shared_from_this(), mostDetailedMip, firstArraySlice, arraySize);\n  204          };\n  205  \n  206:         return findViewCommon<DepthStencilView>(this, mipLevel, 1, firstArraySlice, arraySize, mDsvs, createFunc);\n  207      }\n  208  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.h:\n  203              \\param[in] arraySize The array size. If this is equal to Texture#kMaxPossible, will create a view ranging from firstArraySlice to the texture's array size\n  204          */\n  205:         DepthStencilView::SharedPtr getDSV(uint32_t mipLevel = 0, uint32_t firstArraySlice = 0, uint32_t arraySize = kMaxPossible);\n  206  \n  207          /** Get an unordered access view.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   87          if(mDepthStencil.pTexture)\n   88          {\n   89:             assert(arraySize == -1 || arraySize == getDepthStencilView()->getViewInfo().arraySize);\n   90:             if (arraySize == -1) arraySize = getDepthStencilView()->getViewInfo().arraySize;\n   91:             attachments[rtCount] = getDepthStencilView()->getApiHandle();\n   92              rtCount++;\n   93          }\n   ..\n  147      }\n  148  \n  149:     DepthStencilView::SharedPtr Fbo::getDepthStencilView() const\n  150      {\n  151          if (mDepthStencil.pTexture)\n  ...\n  155          else\n  156          {\n  157:             return DepthStencilView::getNullView();\n  158          }\n  159      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   54      }\n   55  \n   56:     void RenderContext::clearDsv(const DepthStencilView* pDsv, float depth, uint8_t stencil, bool clearDepth, bool clearStencil)\n   57      {\n   58          resourceBarrier(pDsv->getResource(), Resource::State::CopyDest);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  193      }\n  194      // based on D3D code\n  195:     DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  196      {\n  197:         printf(\"DepthStencilView::create\\n\");\n  198  \n  199          if (!pTexture && getNullView()) return getNullView();\n  ...\n  217          //ApiHandle\n  218          auto handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  219:         //gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  220  \n  221:         return SharedPtr(new DepthStencilView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  222      }\n  223      /*\n  224:     DepthStencilView::SharedPtr DepthStencilView::create(ResourceWeakPtr pResource, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  225      {\n  226          Resource::SharedConstPtr pSharedPtr = pResource.lock();\n  ...\n  232          if (pSharedPtr->getApiHandle().getType() == VkResourceType::Buffer)\n  233          {\n  234:             logWarning(\"Cannot create DepthStencilView from a buffer!\");\n  235              return gNullDsv;\n  236          }\n  237  \n  238          auto view = createViewCommon(pSharedPtr, mipLevel, 1, firstArraySlice, arraySize);\n  239:         return SharedPtr(new DepthStencilView(pResource, view, mipLevel, firstArraySlice, arraySize));\n  240      }\n  241      */\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.h:\n   94          void IASetVertexBuffers(UINT StartSlot, UINT NumViews, const D3D12_VERTEX_BUFFER_VIEW *pViews) { should_not_get_here(); }\n   95          void SOSetTargets(UINT StartSlot, UINT NumViews, const D3D12_STREAM_OUTPUT_BUFFER_VIEW *pViews) { should_not_get_here(); }\n   96:         void ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, FLOAT Depth, UINT8 Stencil, UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   97          void ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, const FLOAT ColorRGBA[ 4 ], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   98          void ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource *pResource, const FLOAT Values[4], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n\n47 matches across 15 files\n\n\nSearching 742 files for \"RenderTargetView\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Fbo.cpp:\n  103      void Fbo::initApiHandle() const {}\n  104  \n  105:     RenderTargetView::SharedPtr Fbo::getRenderTargetView(uint32_t rtIndex) const\n  106      {\n  107          const auto& rt = mColorAttachments[rtIndex];\n  ...\n  112          else\n  113          {\n  114:             return RenderTargetView::getNullView();\n  115          }\n  116      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  138      }\n  139  \n  140:     void RenderContext::clearRtv(const RenderTargetView* pRtv, const float4& color)\n  141      {\n  142          resourceBarrier(pRtv->getResource(), Resource::State::RenderTarget);\n  143:         mpLowLevelData->getCommandList()->ClearRenderTargetView(pRtv->getApiHandle()->getCpuHandle(0), glm::value_ptr(color), 0, nullptr);\n  144          mCommandsPending = true;\n  145      }\n  ...\n  193          // We are setting the entire RTV array to make sure everything that was previously bound is detached\n  194          uint32_t colorTargets = Fbo::getMaxColorTargetCount();\n  195:         auto pNullRtv = RenderTargetView::getNullView();\n  196          std::vector<HeapCpuHandle> pRTV(colorTargets, pNullRtv->getApiHandle()->getCpuHandle(0));\n  197          HeapCpuHandle pDSV = DepthStencilView::getNullView()->getApiHandle()->getCpuHandle(0);\n  ...\n  204                  if (pTexture)\n  205                  {\n  206:                     pRTV[i] = pFbo->getRenderTargetView(i)->getApiHandle()->getCpuHandle(0);\n  207                      pCtx->resourceBarrier(pTexture.get(), Resource::State::RenderTarget);\n  208                  }\n  ...\n  416      }\n  417  \n  418:     void RenderContext::blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect, const uint4& dstRect, Sampler::Filter filter)\n  419      {\n  420          auto& blitData = sApiData.blitData;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  412      }\n  413  \n  414:     RenderTargetView::~RenderTargetView() = default;\n  415  \n  416:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  417      {\n  418          if (!pTexture && getNullView()) return getNullView();\n  ...\n  435          layout.addRange(DescriptorSet::Type::Rtv, 0, 1);\n  436          ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  437:         gpDevice->getApiHandle()->CreateRenderTargetView(resHandle, &desc, handle->getCpuHandle(0));\n  438  \n  439:         SharedPtr pObj = SharedPtr(new RenderTargetView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  440          return pObj;\n  441      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/FBO.h:\n  216          /** Get a render target view to a color target.\n  217          */\n  218:         RenderTargetView::SharedPtr getRenderTargetView(uint32_t rtIndex) const;\n  219  \n  220          struct SamplePosition\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp:\n   53                  if (pFbo->getColorTexture(i))\n   54                  {\n   55:                     clearRtv(pFbo->getRenderTargetView(i).get(), color);\n   56                  }\n   57              }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n   90              \\param[in] color The clear color\n   91          */\n   92:         void clearRtv(const RenderTargetView* pRtv, const float4& color);\n   93  \n   94          /** Clear a depth-stencil view.\n   ..\n  162              \\param[in] dstRect Target rectangle to blit to, specified by [left, up, right, down]\n  163          */\n  164:         void blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect = uint4(-1), const uint4& dstRect = uint4(-1), Sampler::Filter = Sampler::Filter::Linear);\n  165  \n  166          /** Submit the command list\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n   90          /** Default value used in create*() methods\n   91          */\n   92:         static const uint32_t kMaxPossible = RenderTargetView::kMaxPossible;\n   93  \n   94          virtual ~Resource() = 0;\n   ..\n  185  \n  186          mutable std::unordered_map<ResourceViewInfo, ShaderResourceView::SharedPtr, ViewInfoHashFunc> mSrvs;\n  187:         mutable std::unordered_map<ResourceViewInfo, RenderTargetView::SharedPtr, ViewInfoHashFunc> mRtvs;\n  188          mutable std::unordered_map<ResourceViewInfo, DepthStencilView::SharedPtr, ViewInfoHashFunc> mDsvs;\n  189          mutable std::unordered_map<ResourceViewInfo, UnorderedAccessView::SharedPtr, ViewInfoHashFunc> mUavs;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.cpp:\n   39          gNullViews.dsv = DepthStencilView::create(getEmptyTexture(), 0, 0, 1);\n   40          gNullViews.uav = UnorderedAccessView::create(getEmptyTexture(), 0, 0, 1);\n   41:         gNullViews.rtv = RenderTargetView::create(getEmptyTexture(), 0, 0, 1);\n   42          gNullViews.cbv = ConstantBufferView::create(Buffer::SharedPtr());\n   43      }\n   ..\n   51      DepthStencilView::SharedPtr    DepthStencilView::getNullView()    { return gNullViews.dsv; }\n   52      UnorderedAccessView::SharedPtr UnorderedAccessView::getNullView() { return gNullViews.uav; }\n   53:     RenderTargetView::SharedPtr    RenderTargetView::getNullView()    { return gNullViews.rtv; }\n   54      ConstantBufferView::SharedPtr  ConstantBufferView::getNullView()  { return gNullViews.cbv; }\n   55  \n   ..\n   57      {\n   58          m.regClass(ShaderResourceView);\n   59:         m.regClass(RenderTargetView);\n   60          m.regClass(UnorderedAccessView);\n   61          m.regClass(ConstantBufferView);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  152      };\n  153  \n  154:     class dlldecl RenderTargetView : public ResourceView<RtvHandle>\n  155      {\n  156      public:\n  157:         using SharedPtr = std::shared_ptr<RenderTargetView>;\n  158:         using SharedConstPtr = std::shared_ptr<const RenderTargetView>;\n  159          static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  160          static SharedPtr getNullView();\n  161:         ~RenderTargetView();\n  162      private:\n  163:         RenderTargetView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  164              ResourceView(pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  165      };\n  ...\n  182          ShaderResourceView::SharedPtr srv;\n  183          ConstantBufferView::SharedPtr cbv;\n  184:         RenderTargetView::SharedPtr   rtv;\n  185          UnorderedAccessView::SharedPtr uav;\n  186          DepthStencilView::SharedPtr dsv;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  227      }\n  228  \n  229:     RenderTargetView::SharedPtr Texture::getRTV(uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  230      {\n  231          auto createFunc = [](Texture* pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  232          {\n  233:             printf(\"RenderTargetView::create\\n\");\n  234:             auto result = RenderTargetView::create(pTexture->shared_from_this(), mostDetailedMip, firstArraySlice, arraySize);\n  235              if(!result) {\n  236:                 printf(\"ERROR RenderTargetView::create returned NULL\\n\");\n  237              }\n  238              return result;\n  239          };\n  240  \n  241:         auto result = findViewCommon<RenderTargetView>(this, mipLevel, 1, firstArraySlice, arraySize, mRtvs, createFunc);\n  242          if(!result) {\n  243:             printf(\"ERROR findViewCommon<RenderTargetView> returned NULL\\n\");\n  244          }\n  245  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.h:\n  196              \\param[in] arraySize The array size. If this is equal to Texture#kMaxPossible, will create a view ranging from firstArraySlice to the texture's array size\n  197          */\n  198:         RenderTargetView::SharedPtr getRTV(uint32_t mipLevel = 0, uint32_t firstArraySlice = 0, uint32_t arraySize = kMaxPossible);\n  199  \n  200          /** Get a depth stencil view.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n  107      }\n  108  \n  109:     template void clearColorImageCommon(CopyContext* pCtx, const RenderTargetView* pView, const float4& clearVal);\n  110  \n  111      void ComputeContext::clearUAV(const UnorderedAccessView* pUav, const float4& value)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   69              {\n   70                  printf(\"FIAH-0-1\\n\");\n   71:                 assert(arraySize == -1 || arraySize == getRenderTargetView(i)->getViewInfo().arraySize);\n   72:                 auto g = getRenderTargetView(i);\n   73                  if (!g) {\n   74                      printf(\"ERROR render target view is NULL\\n\");\n   ..\n   76                  auto v = g->getViewInfo();\n   77                  printf(\"FIAH-0-2\\n\");\n   78:                 arraySize = getRenderTargetView(i)->getViewInfo().arraySize;\n   79                  printf(\"FIAH-0-3\\n\");\n   80:                 attachments[rtCount] = getRenderTargetView(i)->getApiHandle();\n   81                  printf(\"FIAH-0-4\\n\");\n   82                  rtCount++;\n   ..\n  128      }\n  129  \n  130:     RenderTargetView::SharedPtr Fbo::getRenderTargetView(uint32_t rtIndex) const\n  131      {\n  132          printf(\"gRTV-0\\n\");\n  ...\n  143          {   \n  144              printf(\"gRTV-2\\n\");\n  145:             return RenderTargetView::getNullView();\n  146          }\n  147      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   48      void clearColorImageCommon(CopyContext* pCtx, const ViewType* pView, const ClearType& clearVal);\n   49  \n   50:     void RenderContext::clearRtv(const RenderTargetView* pRtv, const float4& color)\n   51      {\n   52          clearColorImageCommon(this, pRtv, color);\n   ..\n  289      }\n  290  \n  291:     void RenderContext::blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect, const uint4& dstRect, Sampler::Filter filter)\n  292      {\n  293          const Texture* pTexture = dynamic_cast<const Texture*>(pSrc->getResource());\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  290          */\n  291      }\n  292:     RenderTargetView::~RenderTargetView()\n  293      {\n  294:         static std::vector<RenderTargetView::ApiHandle> hdl;\n  295          hdl.push_back(mApiHandle);\n  296      }\n  297      // based on D3D code\n  298      /*\n  299:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  300      {\n  301:         printf(\"RenderTargetView::create\\n\");\n  302          if (!pTexture && getNullView()) return getNullView();\n  303  \n  ...\n  308              if (pTexture->getApiHandle().getType() == VkResourceType::Buffer)\n  309              {\n  310:                 logWarning(\"Cannot create RenderTargetView from a buffer!\");\n  311                  return getNullView();\n  312              }\n  ...\n  320      */\n  321  \n  322:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  323      {\n  324:         printf(\"RenderTargetView::create\\n\");\n  325:         RenderTargetView::SharedPtr gNullRtv = nullptr;\n  326  \n  327          if (!pTexture)\n  328          {\n  329:             gNullRtv =  SharedPtr(new RenderTargetView(pTexture, nullptr, mipLevel, firstArraySlice, arraySize));\n  330          }\n  331  \n  ...\n  334          if (pTexture->getApiHandle().getType() == VkResourceType::Buffer)\n  335          {\n  336:             logWarning(\"Cannot create RenderTargetView from a buffer!\");\n  337              return gNullRtv;\n  338          }\n  ...\n  340          // Create view\n  341          auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  342:         return SharedPtr(new RenderTargetView(pTexture, view, mipLevel, firstArraySlice, arraySize));\n  343  \n  344  \n  ...\n  347          //layout.addRange(DescriptorSet::Type::Rtv, 0, 1);\n  348          //ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  349:         //gpDevice->getApiHandle()->CreateRenderTargetView(resHandle, &desc, handle->getCpuHandle(0));\n  350  \n  351:         //SharedPtr pObj = SharedPtr(new RenderTargetView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  352          //return pObj;\n  353      }\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n   56          auto pCurrentFbo = mpTargetFBO;\n   57          mpTargetFBO = Fbo::create2D(width, height, pBackBufferFBO->getDesc());\n   58:         gpDevice->getRenderContext()->blit(pCurrentFbo->getColorTexture(0)->getSRV(), mpTargetFBO->getRenderTargetView(0));\n   59  \n   60          // Tell the GUI the swap-chain size changed\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.h:\n   95          void SOSetTargets(UINT StartSlot, UINT NumViews, const D3D12_STREAM_OUTPUT_BUFFER_VIEW *pViews) { should_not_get_here(); }\n   96          void ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, FLOAT Depth, UINT8 Stencil, UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   97:         void ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, const FLOAT ColorRGBA[ 4 ], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   98          void ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource *pResource, const FLOAT Values[4], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   99          void ClearUnorderedAccessViewUint(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource *pResource, const UINT Values[4], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  564                  Texture::SharedPtr pOutTex = std::dynamic_pointer_cast<Texture>(pGraph->getOutput(mGraphs[mActiveGraph].mainOutput));\n  565                  assert(pOutTex);\n  566:                 pRenderContext->blit(pOutTex->getSRV(), pTargetFbo->getRenderTargetView(0));\n  567              }\n  568          }\n\n/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp:\n  154      for (uint32_t i = 1; i < 3; i++)\n  155      {\n  156:         const auto& pRtv = mpFbo->getRenderTargetView(i).get();\n  157          if (pRtv->getResource() != nullptr) pContext->clearRtv(pRtv, float4(0));\n  158      }\n\n/home/max/dev/Falcor/src/RenderPasses/SkyBox/SkyBox.cpp:\n  143      mpFbo->attachDepthStencilTarget(renderData[kDepth]->asTexture());\n  144  \n  145:     pRenderContext->clearRtv(mpFbo->getRenderTargetView(0).get(), float4(0));\n  146  \n  147      if (!mpScene) return;\n\n/home/max/dev/Falcor/src/RenderPasses/SVGFPass/SVGFPass.cpp:\n  380          if (i == std::min(mFeedbackTap, mFilterIterations - 1))\n  381          {\n  382:             pRenderContext->blit(curTargetFbo->getColorTexture(0)->getSRV(), mpFilteredPastFbo->getRenderTargetView(0));\n  383          }\n  384  \n  ...\n  388      if (mFeedbackTap < 0)\n  389      {\n  390:         pRenderContext->blit(mpCurReprojFbo->getColorTexture(0)->getSRV(), mpFilteredPastFbo->getRenderTargetView(0));\n  391      }\n  392  }\n\n/home/max/dev/Falcor/src/Samples/CudaInterop/CudaInterop.cpp:\n   64      uint32_t format = (getFormatType(mpInputTex->getFormat()) == FormatType::Float) ? cudaChannelFormatKindFloat : cudaChannelFormatKindUnsigned;\n   65      launchCopySurface(mInputSurf, mOutputSurf, mWidth, mHeight, format);\n   66:     pRenderContext->blit(mpOutputTex->getSRV(), pTargetFbo->getRenderTargetView(0));\n   67  }\n   68  \n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n  115      pContext->clearUAV(mpRtOut->getUAV().get(), kClearColor);\n  116      mpScene->raytrace(pContext, mpRaytraceProgram.get(), mpRtVars, uint3(pTargetFbo->getWidth(), pTargetFbo->getHeight(), 1));\n  117:     pContext->blit(mpRtOut->getSRV(), pTargetFbo->getRenderTargetView(0));\n  118  }\n  119  \n\n74 matches across 23 files\n\n\nSearching 742 files for \"FIAH-1\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   83              }\n   84          }\n   85:         printf(\"FIAH-1\\n\");\n   86          // Bind the depth buffer\n   87          if(mDepthStencil.pTexture)\n\n1 match in 1 file\n\n\nSearching 742 files for \"CreateDepthStencilView\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  348          layout.addRange(DescriptorSet::Type::Dsv, 0, 1);\n  349          ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  350:         gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  351  \n  352          return SharedPtr(new DepthStencilView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  228          //ApiHandle \n  229          auto handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout)->getApiHandle();\n  230:         //gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  231          printf(\"DepthStencilView::create 0\\n\");\n  232          auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n\n2 matches across 2 files\n\n\nSearching 742 files for \"DeviceHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorHeap.cpp:\n   34      D3D12DescriptorHeap::D3D12DescriptorHeap(D3D12_DESCRIPTOR_HEAP_TYPE type, uint32_t chunkCount) : mMaxChunkCount(chunkCount), mType(type)\n   35      {\n   36:         DeviceHandle pDevice = gpDevice->getApiHandle();\n   37          mDescriptorSize = pDevice->GetDescriptorHandleIncrementSize(type);\n   38      }\n   ..\n   43      {\n   44          assert(gpDevice);\n   45:         DeviceHandle pDevice = gpDevice->getApiHandle();\n   46  \n   47          uint32_t chunkCount = (descCount + kDescPerChunk - 1) / kDescPerChunk;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Device.cpp:\n  123      }\n  124  \n  125:     DeviceHandle createDevice(IDXGIFactory4* pFactory, D3D_FEATURE_LEVEL requestedFeatureLevel, const std::vector<UUID>& experimentalFeatures)\n  126      {\n  127          // Feature levels to try creating devices. Listed in descending order so the highest supported level is used.\n  ...\n  141          // Find the HW adapter\n  142          IDXGIAdapter1Ptr pAdapter;\n  143:         DeviceHandle pDevice;\n  144          D3D_FEATURE_LEVEL deviceFeatureLevel;\n  145  \n  ...\n  202      }\n  203  \n  204:     Device::SupportedFeatures getSupportedFeatures(DeviceHandle pDevice)\n  205      {\n  206          Device::SupportedFeatures supported = Device::SupportedFeatures::None;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  203  \n  204      using WindowHandle = HWND;\n  205:     using DeviceHandle = ID3D12DevicePtr;\n  206      using CommandListHandle = ID3D12GraphicsCommandListPtr;\n  207      using CommandQueueHandle = ID3D12CommandQueuePtr;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.h:\n   50          using SharedPtr = std::shared_ptr<Device>;\n   51          using SharedConstPtr = std::shared_ptr<const Device>;\n   52:         using ApiHandle = DeviceHandle;\n   53          static const uint32_t kQueueTypeCount = (uint32_t)LowLevelContextData::CommandQueueType::Count;\n   54  \n   ..\n  129          /** Get the native API handle\n  130          */\n  131:         const DeviceHandle& getApiHandle() { return mApiHandle; }\n  132  \n  133          /** Present the back-buffer to the window\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   84  #endif\n   85  \n   86:     using DeviceHandle = VkDeviceData::SharedPtr;\n   87      using CommandListHandle = VkCommandBuffer;\n   88      using CommandQueueHandle = VkQueue;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDevice.cpp:\n  656          if (initMemoryTypes(physicalDevice, mpApiData) == false) return false;\n  657  \n  658:         mApiHandle = DeviceHandle::create(instance, physicalDevice, device, surface);\n  659          mGpuTimestampFrequency = getPhysicalDeviceLimits().timestampPeriod / (1000 * 1000);\n  660  \n\n10 matches across 6 files\n\n\nSearching 742 files for \"ApiHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/BlendState.h:\n  198          /** Get the API handle\n  199          */\n  200:         const BlendStateHandle& getApiHandle() const;\n  201  \n  202      private:\n  203          BlendState(const Desc& Desc) : mDesc(Desc) {}\n  204          const Desc mDesc;\n  205:         BlendStateHandle mApiHandle;\n  206      };\n  207  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n   59  \n   60      size_t getBufferDataAlignment(const Buffer* pBuffer);\n   61:     void* mapBufferApi(const Buffer::ApiHandle& apiHandle, size_t size);\n   62  \n   63      Buffer::Buffer(size_t size, BindFlags bindFlags, CpuAccess cpuAccess)\n   ..\n  166          SharedPtr pBuffer = SharedPtr(new Buffer(size, bindFlags, CpuAccess::None));\n  167          pBuffer->mpAliasedResource = pBaseResource;\n  168:         pBuffer->mApiHandle = pBaseResource->getApiHandle();\n  169          pBuffer->mGpuVaOffset = offset;\n  170          return pBuffer;\n  171      }\n  172  \n  173:     Buffer::SharedPtr Buffer::createFromApiHandle(ApiHandle handle, size_t size, Resource::BindFlags bindFlags, CpuAccess cpuAccess)\n  174      {\n  175          assert(handle);\n  176          Buffer::SharedPtr pBuffer = SharedPtr(new Buffer(size, bindFlags, cpuAccess));\n  177:         pBuffer->mApiHandle = handle;\n  178          return pBuffer;\n  179      }\n  ...\n  189          else\n  190          {\n  191:             gpDevice->releaseResource(mApiHandle);\n  192          }\n  193      }\n  ...\n  285              mpCBV = nullptr;\n  286              mDynamicData = gpDevice->getUploadHeap()->allocate(mSize, getBufferDataAlignment(this));\n  287:             mApiHandle = mDynamicData.pResourceHandle;\n  288              mGpuVaOffset = mDynamicData.offset;\n  289              invalidateViews();\n  ...\n  304              {\n  305                  assert(mBindFlags == BindFlags::None);\n  306:                 return mapBufferApi(mApiHandle, mSize);\n  307              }\n  308              else\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h:\n  180              \\return A pointer to a new buffer object, or throws an exception if creation failed.\n  181          */\n  182:         static SharedPtr createFromApiHandle(ApiHandle handle, size_t size, Resource::BindFlags bindFlags, CpuAccess cpuAccess);\n  183  \n  184          /** Get a shader-resource view.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ComputeStateObject.cpp:\n   42      ComputeStateObject::~ComputeStateObject()\n   43      {\n   44:         gpDevice->releaseResource(mApiHandle);\n   45      }\n   46  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/ComputeStateObject.h:\n   37          using SharedPtr = std::shared_ptr<ComputeStateObject>;\n   38          using SharedConstPtr = std::shared_ptr<const ComputeStateObject>;\n   39:         using ApiHandle = ComputeStateHandle;\n   40  \n   41          class dlldecl Desc\n   ..\n   61          static SharedPtr create(const Desc& desc);\n   62  \n   63:         const ApiHandle& getApiHandle() { return mApiHandle; }\n   64          const Desc& getDesc() const { return mDesc; }\n   65  \n   ..\n   69  \n   70          Desc mDesc;\n   71:         ApiHandle mApiHandle;\n   72      };\n   73  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Buffer.cpp:\n   36      {\n   37          assert(gpDevice);\n   38:         ID3D12Device* pDevice = gpDevice->getApiHandle();\n   39  \n   40          // Create the buffer\n   ..\n   53  \n   54          D3D12_RESOURCE_STATES d3dState = getD3D12ResourceState(initState);\n   55:         ID3D12ResourcePtr pApiHandle;\n   56          D3D12_HEAP_FLAGS heapFlags = is_set(bindFlags, ResourceBindFlags::Shared) ? D3D12_HEAP_FLAG_SHARED : D3D12_HEAP_FLAG_NONE;\n   57:         d3d_call(pDevice->CreateCommittedResource(&heapProps, heapFlags, &bufDesc, d3dState, nullptr, IID_PPV_ARGS(&pApiHandle)));\n   58          \n   59          // Map and upload data if needed\n   60:         return pApiHandle;\n   61      }\n   62  \n   ..\n   71      }\n   72  \n   73:     void* mapBufferApi(const Buffer::ApiHandle& apiHandle, size_t size)\n   74      {\n   75          D3D12_RANGE r{ 0, size };\n   ..\n   98                  assert(gpDevice);\n   99                  mDynamicData = gpDevice->getUploadHeap()->allocate(mSize, getBufferDataAlignment(this));\n  100:                 mApiHandle = mDynamicData.pResourceHandle;\n  101                  mGpuVaOffset = mDynamicData.offset;\n  102              }\n  ...\n  105          {\n  106              mState.global = Resource::State::CopyDest;\n  107:             mApiHandle = createBuffer(mState.global, mSize, kReadbackHeapProps, mBindFlags);\n  108          }\n  109          else\n  ...\n  111              mState.global = Resource::State::Common;\n  112              if (is_set(mBindFlags, BindFlags::AccelerationStructure)) mState.global = Resource::State::AccelerationStructure;\n  113:             mApiHandle = createBuffer(mState.global, mSize, kDefaultHeapProps, mBindFlags);\n  114          }\n  115      }\n  ...\n  117      uint64_t Buffer::getGpuAddress() const\n  118      {\n  119:         return mGpuVaOffset + mApiHandle->GetGPUVirtualAddress();\n  120      }\n  121  \n  ...\n  126          if (mpStagingResource)\n  127          {\n  128:             mpStagingResource->mApiHandle->Unmap(0, &r);\n  129          }\n  130          else if (mCpuAccess == CpuAccess::Read)\n  131          {\n  132:             mApiHandle->Unmap(0, &r);\n  133          }\n  134      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ComputeContext.cpp:\n   56                  argDesc.Type = D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH;\n   57                  sigDesc.pArgumentDescs = &argDesc;\n   58:                 gpDevice->getApiHandle()->CreateCommandSignature(&sigDesc, nullptr, IID_PPV_ARGS(&sApiData.pDispatchCommandSig));\n   59              }\n   60              sApiData.refCount++;\n   ..\n   91              if (applyComputeVars(pVars, pCSO->getDesc().getProgramKernels()->getRootSignature().get()) == false) return false;\n   92          }\n   93:         else mpLowLevelData->getCommandList()->SetComputeRootSignature(RootSignature::getEmpty()->getApiHandle());\n   94  \n   95          mpLastBoundComputeVars = pVars;\n   96:         mpLowLevelData->getCommandList()->SetPipelineState(pCSO->getApiHandle());\n   97          mCommandsPending = true;\n   98          return true;\n   ..\n  119      {\n  120          pContext->resourceBarrier(pUav->getResource(), Resource::State::UnorderedAccess);\n  121:         UavHandle uav = pUav->getApiHandle();\n  122          if (typeid(ClearType) == typeid(float4))\n  123          {\n  124:             pList->ClearUnorderedAccessViewFloat(uav->getGpuHandle(0), uav->getCpuHandle(0), pUav->getResource()->getApiHandle(), (float*)value_ptr(clear), 0, nullptr);\n  125          }\n  126          else if (typeid(ClearType) == typeid(uint4))\n  127          {\n  128:             pList->ClearUnorderedAccessViewUint(uav->getGpuHandle(0), uav->getCpuHandle(0), pUav->getResource()->getApiHandle(), (uint32_t*)value_ptr(clear), 0, nullptr);\n  129          }\n  130          else\n  ...\n  158          if (prepareForDispatch(pState, pVars) == false) return;\n  159          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  160:         mpLowLevelData->getCommandList()->ExecuteIndirect(sApiData.pDispatchCommandSig, 1, pArgBuffer->getApiHandle(), argBufferOffset, nullptr, 0);\n  161      }\n  162  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ComputeStateObject.cpp:\n   54      }\n   55  \n   56:     ComputeStateObject::ApiHandle getNvApiComputePsoHandle(const std::vector<NvApiPsoExDesc>& nvDescVec, const D3D12_COMPUTE_PIPELINE_STATE_DESC& desc)\n   57      {\n   58          assert(nvDescVec.size() <= 1);\n   ..\n   67              }\n   68          }\n   69:         ComputeStateObject::ApiHandle apiHandle;\n   70:         auto ret = NvAPI_D3D12_CreateComputePipelineState(gpDevice->getApiHandle(), &desc, (NvU32)nvDescVec.size(), ppPSOExtensionsDesc, &apiHandle);\n   71  \n   72          if (ret != NVAPI_OK || apiHandle == nullptr)\n   ..\n   86  #else\n   87      bool getNvApiComputePsoDesc(const ComputeStateObject::Desc& desc, std::vector<NvApiPsoExDesc>& nvApiPsoExDescs) { should_not_get_here(); return false; }\n   88:     ComputeStateObject::ApiHandle getNvApiComputePsoHandle(const std::vector<NvApiPsoExDesc>& psoDesc, const D3D12_COMPUTE_PIPELINE_STATE_DESC& desc) { should_not_get_here(); return nullptr; }\n   89      bool getIsNvApiComputePsoRequired(const ComputeStateObject::Desc& desc) { return false; }\n   90  #endif\n   ..\n   97  \n   98          D3D12_COMPUTE_PIPELINE_STATE_DESC desc = {};\n   99:         desc.CS = pComputeShader->getApiHandle();\n  100:         desc.pRootSignature = mDesc.mpRootSignature ? mDesc.mpRootSignature->getApiHandle() : nullptr;\n  101  \n  102          if (getIsNvApiComputePsoRequired(mDesc))\n  ...\n  106              if (!ret) throw std::exception(\"Failed to create compute PSO desc with NVAPI extensions\");\n  107  \n  108:             mApiHandle = getNvApiComputePsoHandle(nvApiDesc, desc);\n  109:             if (mApiHandle == nullptr) throw std::exception(\"Failed to create compute PSO with NVAPI extensions\");\n  110          }\n  111          else\n  112          {\n  113:             d3d_call(gpDevice->getApiHandle()->CreateComputePipelineState(&desc, IID_PPV_ARGS(&mApiHandle)));\n  114          }\n  115      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12CopyContext.cpp:\n   45              if (pData->pHeaps[i])\n   46              {\n   47:                 pHeaps[heapCount] = pData->pHeaps[i]->getApiHandle();\n   48                  heapCount++;\n   49              }\n   ..\n   83  \n   84          // Get the footprint\n   85:         D3D12_RESOURCE_DESC texDesc = pTexture->getApiHandle()->GetDesc();\n   86          std::vector<D3D12_PLACED_SUBRESOURCE_FOOTPRINT> footprint(subresourceCount);\n   87          std::vector<uint32_t> rowCount(subresourceCount);\n   ..\n  104          else\n  105          {\n  106:             ID3D12Device* pDevice = gpDevice->getApiHandle();\n  107              pDevice->GetCopyableFootprints(&texDesc, firstSubresource, subresourceCount, 0, footprint.data(), rowCount.data(), rowSize.data(), &bufferSize);\n  108          }\n  ...\n  112          // Map the buffer\n  113          uint8_t* pDst = (uint8_t*)pBuffer->map(Buffer::MapType::WriteDiscard);\n  114:         ID3D12ResourcePtr pResource = pBuffer->getApiHandle();\n  115  \n  116          // Get the offset from the beginning of the resource\n  ...\n  134              footprint[s].Offset += vaOffset;\n  135              uint32_t subresource = s + firstSubresource;\n  136:             D3D12_TEXTURE_COPY_LOCATION dstLoc = { pTexture->getApiHandle(), D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX, subresource };\n  137              D3D12_TEXTURE_COPY_LOCATION srcLoc = { pResource, D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT, footprint[s] };\n  138  \n  ...\n  148          pThis->mpContext = pCtx;\n  149          //Get footprint\n  150:         D3D12_RESOURCE_DESC texDesc = pTexture->getApiHandle()->GetDesc();\n  151          D3D12_PLACED_SUBRESOURCE_FOOTPRINT& footprint = pThis->mFootprint;\n  152          uint64_t rowSize;\n  153          uint64_t size;\n  154:         ID3D12Device* pDevice = gpDevice->getApiHandle();\n  155          pDevice->GetCopyableFootprints(&texDesc, subresourceIndex, 1, 0, &footprint, &pThis->mRowCount, &rowSize, &size);\n  156  \n  ...\n  159  \n  160          //Copy from texture to buffer\n  161:         D3D12_TEXTURE_COPY_LOCATION srcLoc = { pTexture->getApiHandle(), D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX, subresourceIndex };\n  162:         D3D12_TEXTURE_COPY_LOCATION dstLoc = { pThis->mpBuffer->getApiHandle(), D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT, footprint };\n  163          pCtx->resourceBarrier(pTexture, Resource::State::CopySource);\n  164          pCtx->getLowLevelData()->getCommandList()->CopyTextureRegion(&dstLoc, 0, 0, 0, &srcLoc, nullptr);\n  ...\n  205          barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n  206          barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  207:         barrier.Transition.pResource = pResource->getApiHandle();\n  208          barrier.Transition.StateBefore = getD3D12ResourceState(pResource->getGlobalState());\n  209          barrier.Transition.StateAfter = getD3D12ResourceState(newState);\n  ...\n  268          barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_UAV;\n  269          barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  270:         barrier.UAV.pResource = pResource->getApiHandle();\n  271  \n  272          // Check that resource has required bind flags for UAV barrier to be supported\n  ...\n  281          resourceBarrier(pDst, Resource::State::CopyDest);\n  282          resourceBarrier(pSrc, Resource::State::CopySource);\n  283:         mpLowLevelData->getCommandList()->CopyResource(pDst->getApiHandle(), pSrc->getApiHandle());\n  284          mCommandsPending = true;\n  285      }\n  ...\n  293          D3D12_TEXTURE_COPY_LOCATION pDstCopyLoc;\n  294  \n  295:         pDstCopyLoc.pResource = pDst->getApiHandle();\n  296          pDstCopyLoc.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;\n  297          pDstCopyLoc.SubresourceIndex = dstSubresourceIdx;\n  298  \n  299:         pSrcCopyLoc.pResource = pSrc->getApiHandle();\n  300          pSrcCopyLoc.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;\n  301          pSrcCopyLoc.SubresourceIndex = srcSubresourceIdx;\n  ...\n  309          resourceBarrier(pDst, Resource::State::CopyDest);\n  310          resourceBarrier(pSrc, Resource::State::CopySource);\n  311:         mpLowLevelData->getCommandList()->CopyBufferRegion(pDst->getApiHandle(), dstOffset, pSrc->getApiHandle(), pSrc->getGpuAddressOffset() + srcOffset, numBytes);\n  312          mCommandsPending = true;\n  313      }\n  ...\n  321          dstLoc.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;\n  322          dstLoc.SubresourceIndex = dstSubresource;\n  323:         dstLoc.pResource = pDst->getApiHandle();\n  324  \n  325          D3D12_TEXTURE_COPY_LOCATION srcLoc = {};\n  326          srcLoc.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;\n  327          srcLoc.SubresourceIndex = srcSubresource;\n  328:         srcLoc.pResource = pSrc->getApiHandle();\n  329  \n  330          D3D12_BOX box;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorHeap.cpp:\n   34      D3D12DescriptorHeap::D3D12DescriptorHeap(D3D12_DESCRIPTOR_HEAP_TYPE type, uint32_t chunkCount) : mMaxChunkCount(chunkCount), mType(type)\n   35      {\n   36:         DeviceHandle pDevice = gpDevice->getApiHandle();\n   37          mDescriptorSize = pDevice->GetDescriptorHandleIncrementSize(type);\n   38      }\n   ..\n   43      {\n   44          assert(gpDevice);\n   45:         DeviceHandle pDevice = gpDevice->getApiHandle();\n   46  \n   47          uint32_t chunkCount = (descCount + kDescPerChunk - 1) / kDescPerChunk;\n   ..\n   52          desc.Type = type;\n   53          desc.NumDescriptors = chunkCount * kDescPerChunk;\n   54:         if (FAILED(pDevice->CreateDescriptorHeap(&desc, IID_PPV_ARGS(&pHeap->mApiHandle))))\n   55          {\n   56              throw std::exception(\"Failed to create descriptor heap\");\n   57          }\n   58  \n   59:         pHeap->mCpuHeapStart = pHeap->mApiHandle->GetCPUDescriptorHandleForHeapStart();\n   60:         pHeap->mGpuHeapStart = pHeap->mApiHandle->GetGPUDescriptorHandleForHeapStart();\n   61          return pHeap;\n   62      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorHeap.h:\n   36          using SharedPtr = std::shared_ptr<D3D12DescriptorHeap>;\n   37          using SharedConstPtr = std::shared_ptr<const D3D12DescriptorHeap>;\n   38:         using ApiHandle = DescriptorHeapHandle;\n   39          using CpuHandle = HeapCpuHandle;\n   40          using GpuHandle = HeapGpuHandle;\n   ..\n   79          \n   80          Allocation::SharedPtr allocateDescriptors(uint32_t count);\n   81:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n   82          D3D12_DESCRIPTOR_HEAP_TYPE getType() const { return mType; }\n   83  \n   ..\n   98          const uint32_t mMaxChunkCount = 0;\n   99          uint32_t mAllocatedChunks = 0;\n  100:         ApiHandle mApiHandle;\n  101          D3D12_DESCRIPTOR_HEAP_TYPE mType;\n  102  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorPool.cpp:\n   81      }\n   82  \n   83:     const DescriptorPool::ApiHandle& DescriptorPool::getApiHandle(uint32_t heapIndex) const\n   84      {\n   85          assert(heapIndex < arraysize(mpApiData->pHeaps));\n   86:         return mpApiData->pHeaps[heapIndex]->getApiHandle();\n   87      }\n   88  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorSet.cpp:\n   91      {\n   92          auto dstHandle = pSet->getCpuHandle(rangeIndex, descIndex);\n   93:         gpDevice->getApiHandle()->CopyDescriptorsSimple(1, dstHandle, handle, falcorToDxDescType(pSet->getRange(rangeIndex).type));\n   94      }\n   95  \n   96      void DescriptorSet::setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv)\n   97      {\n   98:         setCpuHandle(this, rangeIndex, descIndex, pSrv->getApiHandle()->getCpuHandle(0));\n   99      }\n  100  \n  101      void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav)\n  102      {\n  103:         setCpuHandle(this, rangeIndex, descIndex, pUav->getApiHandle()->getCpuHandle(0));\n  104      }\n  105  \n  106      void DescriptorSet::setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler)\n  107      {\n  108:         setCpuHandle(this, rangeIndex, descIndex, pSampler->getApiHandle()->getCpuHandle(0));\n  109      }\n  110  \n  ...\n  121      void DescriptorSet::setCbv(uint32_t rangeIndex, uint32_t descIndex, ConstantBufferView* pView)\n  122      {\n  123:         setCpuHandle(this, rangeIndex, descIndex, pView->getApiHandle()->getCpuHandle(0));\n  124      }\n  125  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Device.cpp:\n  111          IDXGISwapChain1Ptr pSwapChain;\n  112  \n  113:         HRESULT hr = pFactory->CreateSwapChainForHwnd(pCommandQueue, pWindow->getApiHandle(), &swapChainDesc, nullptr, nullptr, &pSwapChain);\n  114          if (FAILED(hr))\n  115          {\n  ...\n  308  \n  309          // Create the device\n  310:         mApiHandle = createDevice(mpApiData->pDxgiFactory, getD3DFeatureLevel(mDesc.apiMajorVersion, mDesc.apiMinorVersion), mDesc.experimentalFeatures);\n  311:         if (mApiHandle == nullptr) return false;\n  312  \n  313:         mSupportedFeatures = getSupportedFeatures(mApiHandle);\n  314  \n  315          if (mDesc.enableDebugLayer)\n  ...\n  317              MAKE_SMART_COM_PTR(ID3D12InfoQueue);\n  318              ID3D12InfoQueuePtr pInfoQueue;\n  319:             mApiHandle->QueryInterface(IID_PPV_ARGS(&pInfoQueue));\n  320              D3D12_MESSAGE_ID hideMessages[] =\n  321              {\n  ...\n  343  \n  344                  ID3D12CommandQueuePtr pQueue;\n  345:                 if (FAILED(mApiHandle->CreateCommandQueue(&cqDesc, IID_PPV_ARGS(&pQueue))))\n  346                  {\n  347                      logError(\"Failed to create command queue\");\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Fbo.cpp:\n   82      Fbo::~Fbo() = default;\n   83  \n   84:     const Fbo::ApiHandle& Fbo::getApiHandle() const\n   85      {\n   86:         UNSUPPORTED_IN_D3D12(\"Fbo::getApiHandle()\");\n   87:         return mApiHandle;\n   88      }\n   89      \n   ..\n  101      }\n  102  \n  103:     void Fbo::initApiHandle() const {}\n  104  \n  105      RenderTargetView::SharedPtr Fbo::getRenderTargetView(uint32_t rtIndex) const\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Formats.cpp:\n  118          D3D12_FEATURE_DATA_FORMAT_SUPPORT support;\n  119          support.Format = getDxgiFormat(format);\n  120:         d3d_call(gpDevice->getApiHandle()->CheckFeatureSupport(D3D12_FEATURE_FORMAT_SUPPORT, &support, sizeof(support)));\n  121  \n  122          ResourceBindFlags flags = ResourceBindFlags::None;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12GpuFence.cpp:\n   51  \n   52          assert(gpDevice);\n   53:         ID3D12Device* pDevice = gpDevice->getApiHandle().GetInterfacePtr();\n   54:         HRESULT hr = pDevice->CreateFence(pFence->mCpuValue, D3D12_FENCE_FLAG_NONE, IID_PPV_ARGS(&pFence->mApiHandle));\n   55          if (FAILED(hr))\n   56          {\n   ..\n   66      {\n   67          assert(pQueue);\n   68:         d3d_call(pQueue->Signal(mApiHandle, mCpuValue));\n   69          mCpuValue++;\n   70          return mCpuValue - 1;\n   ..\n   73      void GpuFence::syncGpu(CommandQueueHandle pQueue)\n   74      {\n   75:         d3d_call(pQueue->Wait(mApiHandle, mCpuValue - 1));\n   76      }\n   77  \n   ..\n   84          if (gpuVal < syncVal)\n   85          {\n   86:             d3d_call(mApiHandle->SetEventOnCompletion(syncVal, mpApiData->eventHandle));\n   87              WaitForSingleObject(mpApiData->eventHandle, INFINITE);\n   88          }\n   ..\n   91      uint64_t GpuFence::getGpuValue() const\n   92      {\n   93:         return mApiHandle->GetCompletedValue();\n   94      }\n   95  \n   96:     const ApiHandle& GpuFence::getApiHandle() const { \n   97:         return mApiHandle; \n   98      }\n   99  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12GpuTimer.cpp:\n   33      void GpuTimer::apiBegin()\n   34      {\n   35:         mpLowLevelData->getCommandList()->EndQuery(spHeap.lock()->getApiHandle(), D3D12_QUERY_TYPE_TIMESTAMP, mStart);\n   36      }\n   37  \n   38      void GpuTimer::apiEnd()\n   39      {\n   40:         mpLowLevelData->getCommandList()->EndQuery(spHeap.lock()->getApiHandle(), D3D12_QUERY_TYPE_TIMESTAMP, mEnd);\n   41      }\n   42  \n   43      void GpuTimer::apiResolve(uint64_t result[2])\n   44      {\n   45:         mpLowLevelData->getCommandList()->ResolveQueryData(spHeap.lock()->getApiHandle(), D3D12_QUERY_TYPE_TIMESTAMP, mStart, 2, mpResolveBuffer->getApiHandle(), 0);\n   46          uint64_t* pRes = (uint64_t*)mpResolveBuffer->map(Buffer::MapType::Read);\n   47          result[0] = pRes[0];\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12GraphicsStateObject.cpp:\n   55      }\n   56  \n   57:     GraphicsStateObject::ApiHandle getNvApiGraphicsPsoHandle(const std::vector<NvApiPsoExDesc>& nvDescVec, const D3D12_GRAPHICS_PIPELINE_STATE_DESC& desc)\n   58      {\n   59          const NVAPI_D3D12_PSO_EXTENSION_DESC* ppPSOExtensionsDesc[5];\n   ..\n   71              }\n   72          }\n   73:         GraphicsStateObject::ApiHandle apiHandle;\n   74:         auto ret = NvAPI_D3D12_CreateGraphicsPipelineState(gpDevice->getApiHandle(), &desc, (NvU32)nvDescVec.size(), ppPSOExtensionsDesc, &apiHandle);\n   75  \n   76          if (ret != NVAPI_OK || apiHandle == nullptr)\n   ..\n   89  #else\n   90      bool getNvApiGraphicsPsoDesc(const GraphicsStateObject::Desc& desc, std::vector<NvApiPsoExDesc>& nvApiPsoExDescs) { should_not_get_here(); return false; }\n   91:     GraphicsStateObject::ApiHandle getNvApiGraphicsPsoHandle(const std::vector<NvApiPsoExDesc>& psoDesc, const D3D12_GRAPHICS_PIPELINE_STATE_DESC& desc) { should_not_get_here(); return nullptr; }\n   92      bool getIsNvApiGraphicsPsoRequired(const GraphicsStateObject::Desc& desc) { return false; }\n   93  #endif\n   ..\n  105              if (!ret) throw std::exception(\"Failed to create graphics PSO desc with NVAPI extensions\");\n  106  \n  107:             mApiHandle = getNvApiGraphicsPsoHandle(nvApiDesc, d3dDesc);\n  108:             if (mApiHandle == nullptr) throw std::exception(\"Failed to create graphics PSO with NVAPI extensions\");\n  109          }\n  110          else\n  111          {\n  112:             d3d_call(gpDevice->getApiHandle()->CreateGraphicsPipelineState(&d3dDesc, IID_PPV_ARGS(&mApiHandle)));\n  113          }\n  114      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12LowLevelContextData.cpp:\n   37      {\n   38          ID3D12CommandAllocatorPtr pAllocator;\n   39:         if (FAILED(gpDevice->getApiHandle()->CreateCommandAllocator(type, IID_PPV_ARGS(&pAllocator))))\n   40          {\n   41              logError(\"Failed to create command allocator\");\n   ..\n   85          assert(mpAllocator);\n   86  \n   87:         d3d_call(gpDevice->getApiHandle()->CreateCommandList(0, cmdListType, mpAllocator, nullptr, IID_PPV_ARGS(&mpList)));\n   88          assert(mpList);\n   89      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12QueryHeap.cpp:\n   51      {\n   52          assert(gpDevice);\n   53:         ID3D12Device* pDevice = gpDevice->getApiHandle().GetInterfacePtr();\n   54          D3D12_QUERY_HEAP_DESC desc;\n   55          desc.Count = count;\n   ..\n   57          desc.Type = getD3D12HeapType(type);\n   58  \n   59:         d3d_call(pDevice->CreateQueryHeap(&desc, IID_PPV_ARGS(&mApiHandle)));\n   60      }\n   61  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RasterizerState.cpp:\n   33      RasterizerState::~RasterizerState() = default;\n   34  \n   35:     const RasterizerStateHandle& RasterizerState::getApiHandle() const\n   36      {\n   37:         UNSUPPORTED_IN_D3D12(\"RasterizerState::getApiHandle()\");\n   38:         return mApiHandle;\n   39      }\n   40  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  108                  argDesc.Type = D3D12_INDIRECT_ARGUMENT_TYPE_DRAW;\n  109                  sigDesc.pArgumentDescs = &argDesc;\n  110:                 d3d_call(gpDevice->getApiHandle()->CreateCommandSignature(&sigDesc, nullptr, IID_PPV_ARGS(&sApiData.pDrawCommandSig)));\n  111  \n  112                  // Draw index\n  ...\n  114                  argDesc.Type = D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED;\n  115                  sigDesc.pArgumentDescs = &argDesc;\n  116:                 d3d_call(gpDevice->getApiHandle()->CreateCommandSignature(&sigDesc, nullptr, IID_PPV_ARGS(&sApiData.pDrawIndexCommandSig)));\n  117              }\n  118  \n  ...\n  141      {\n  142          resourceBarrier(pRtv->getResource(), Resource::State::RenderTarget);\n  143:         mpLowLevelData->getCommandList()->ClearRenderTargetView(pRtv->getApiHandle()->getCpuHandle(0), glm::value_ptr(color), 0, nullptr);\n  144          mCommandsPending = true;\n  145      }\n  ...\n  151  \n  152          resourceBarrier(pDsv->getResource(), Resource::State::DepthStencil);\n  153:         mpLowLevelData->getCommandList()->ClearDepthStencilView(pDsv->getApiHandle()->getCpuHandle(0), D3D12_CLEAR_FLAGS(flags), depth, stencil, 0, nullptr);\n  154          mCommandsPending = true;\n  155      }\n  ...\n  194          uint32_t colorTargets = Fbo::getMaxColorTargetCount();\n  195          auto pNullRtv = RenderTargetView::getNullView();\n  196:         std::vector<HeapCpuHandle> pRTV(colorTargets, pNullRtv->getApiHandle()->getCpuHandle(0));\n  197:         HeapCpuHandle pDSV = DepthStencilView::getNullView()->getApiHandle()->getCpuHandle(0);\n  198  \n  199          if (pFbo)\n  ...\n  204                  if (pTexture)\n  205                  {\n  206:                     pRTV[i] = pFbo->getRenderTargetView(i)->getApiHandle()->getCpuHandle(0);\n  207                      pCtx->resourceBarrier(pTexture.get(), Resource::State::RenderTarget);\n  208                  }\n  ...\n  212              if(pTexture)\n  213              {\n  214:                 pDSV = pFbo->getDepthStencilView()->getApiHandle()->getCpuHandle(0);\n  215                  if (pTexture)\n  216                  {\n  ...\n  301                  if (applyGraphicsVars(pVars, pGSO->getDesc().getRootSignature().get()) == false) return false;\n  302              }\n  303:             else mpLowLevelData->getCommandList()->SetGraphicsRootSignature(RootSignature::getEmpty()->getApiHandle());\n  304              mpLastBoundGraphicsVars = pVars;\n  305          }\n  ...\n  314          if (is_set(StateBindFlags::Viewports, mBindFlags))          D3D12SetViewports(pList, &pState->getViewport(0));\n  315          if (is_set(StateBindFlags::Scissors, mBindFlags))           D3D12SetScissors(pList, &pState->getScissors(0));\n  316:         if (is_set(StateBindFlags::PipelineState, mBindFlags))      pList->SetPipelineState(pGSO->getApiHandle());\n  317  \n  318          BlendState::SharedPtr blendState = pState->getBlendState();\n  ...\n  352          pContext->resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  353          if (pCountBuffer != nullptr && pCountBuffer != pArgBuffer) pContext->resourceBarrier(pCountBuffer, Resource::State::IndirectArg);\n  354:         pCommandList->ExecuteIndirect(pCommandSig, maxCommandCount, pArgBuffer->getApiHandle(), argBufferOffset, (pCountBuffer != nullptr ? pCountBuffer->getApiHandle() : nullptr), countBufferOffset);\n  355      }\n  356  \n  ...\n  408  \n  409          auto pCmdList = getLowLevelData()->getCommandList();\n  410:         pCmdList->SetComputeRootSignature(pRtso->getGlobalRootSignature()->getApiHandle().GetInterfacePtr());\n  411  \n  412          // Dispatch\n  413          GET_COM_INTERFACE(pCmdList, ID3D12GraphicsCommandList4, pList4);\n  414:         pList4->SetPipelineState1(pRtso->getApiHandle().GetInterfacePtr());\n  415          pList4->DispatchRays(&raytraceDesc);\n  416      }\n  ...\n  483      {\n  484          DXGI_FORMAT format = getDxgiFormat(pDst->getFormat());\n  485:         mpLowLevelData->getCommandList()->ResolveSubresource(pDst->getApiHandle(), dstSubresource, pSrc->getApiHandle(), srcSubresource, format);\n  486          mCommandsPending = true;\n  487      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Resource.cpp:\n  140      {\n  141          std::wstring ws = string_2_wstring(mName);\n  142:         mApiHandle->SetName(ws.c_str());\n  143      }\n  144  \n  145  \n  146:     SharedResourceApiHandle Resource::createSharedApiHandle()\n  147      {\n  148:         ID3D12DevicePtr pDevicePtr = gpDevice->getApiHandle();\n  149          auto s = string_2_wstring(mName);\n  150:         SharedResourceApiHandle pHandle;\n  151  \n  152:         HRESULT res = pDevicePtr->CreateSharedHandle(mApiHandle, 0, GENERIC_ALL, s.c_str(), &pHandle);\n  153          if (res == S_OK) return pHandle;\n  154          else return nullptr;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  271      }\n  272  \n  273:     ShaderResourceView::ApiHandle createSrvDescriptor(const D3D12_SHADER_RESOURCE_VIEW_DESC& desc, Resource::ApiHandle resHandle)\n  274      {\n  275          DescriptorSet::Layout layout;\n  276          layout.addRange(DescriptorSet::Type::TextureSrv, 0, 1);\n  277:         ShaderResourceView::ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  278:         gpDevice->getApiHandle()->CreateShaderResourceView(resHandle, &desc, handle->getCpuHandle(0));\n  279  \n  280          return handle;\n  ...\n  286  \n  287          D3D12_SHADER_RESOURCE_VIEW_DESC desc;\n  288:         Resource::ApiHandle resHandle = nullptr;\n  289          if(pTexture)\n  290          {\n  291              desc = createTextureSrvDesc(pTexture.get(), firstArraySlice, arraySize, mostDetailedMip, mipCount);\n  292:             resHandle = pTexture->getApiHandle();\n  293          }\n  294          else\n  ...\n  309  \n  310          D3D12_SHADER_RESOURCE_VIEW_DESC desc;\n  311:         Resource::ApiHandle resHandle = nullptr;\n  312          if (pBuffer)\n  313          {\n  314              desc = createBufferSrvDesc(pBuffer.get(), firstElement, elementCount);\n  315:             resHandle = pBuffer->getApiHandle();\n  316          }\n  317          else\n  ...\n  332  \n  333          D3D12_DEPTH_STENCIL_VIEW_DESC desc;\n  334:         Resource::ApiHandle resHandle = nullptr;\n  335          if(pTexture)\n  336          {\n  337              desc = createDsvDesc(pTexture.get(), mipLevel, firstArraySlice, arraySize);\n  338:             resHandle = pTexture->getApiHandle();\n  339          }\n  340          else\n  ...\n  347          DescriptorSet::Layout layout;\n  348          layout.addRange(DescriptorSet::Type::Dsv, 0, 1);\n  349:         ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  350:         gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  351  \n  352          return SharedPtr(new DepthStencilView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  353      }\n  354  \n  355:     UnorderedAccessView::ApiHandle createUavDescriptor(const D3D12_UNORDERED_ACCESS_VIEW_DESC& desc, Resource::ApiHandle resHandle, Resource::ApiHandle counterHandle)\n  356      {\n  357          DescriptorSet::Layout layout;\n  358          layout.addRange(DescriptorSet::Type::TextureUav, 0, 1);\n  359:         UnorderedAccessView::ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  360:         gpDevice->getApiHandle()->CreateUnorderedAccessView(resHandle, counterHandle, &desc, handle->getCpuHandle(0));\n  361          return handle;\n  362      }\n  ...\n  367  \n  368          D3D12_UNORDERED_ACCESS_VIEW_DESC desc;\n  369:         Resource::ApiHandle resHandle = nullptr;\n  370  \n  371          if(pTexture != nullptr)\n  372          {\n  373              desc = createDsvRtvUavDescCommon<D3D12_UNORDERED_ACCESS_VIEW_DESC, true>(pTexture.get(), mipLevel, firstArraySlice, arraySize);\n  374:             resHandle = pTexture->getApiHandle();\n  375          }\n  376          else\n  ...\n  389  \n  390          D3D12_UNORDERED_ACCESS_VIEW_DESC desc;\n  391:         Resource::ApiHandle resHandle = nullptr;\n  392:         Resource::ApiHandle counterHandle = nullptr;\n  393  \n  394          if (pBuffer != nullptr)\n  395          {\n  396              desc = createBufferUavDesc(pBuffer.get(), firstElement, elementCount);\n  397:             resHandle = pBuffer->getApiHandle();\n  398  \n  399              if (pBuffer->getUAVCounter())\n  400              {\n  401:                 counterHandle = pBuffer->getUAVCounter()->getApiHandle();\n  402              }\n  403          }\n  ...\n  419  \n  420          D3D12_RENDER_TARGET_VIEW_DESC desc;\n  421:         Resource::ApiHandle resHandle = nullptr;\n  422          if(pTexture)\n  423          {\n  424              desc = createRtvDesc(pTexture.get(), mipLevel, firstArraySlice, arraySize);\n  425:             resHandle = pTexture->getApiHandle();\n  426          }\n  427          else\n  ...\n  434          DescriptorSet::Layout layout;\n  435          layout.addRange(DescriptorSet::Type::Rtv, 0, 1);\n  436:         ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  437:         gpDevice->getApiHandle()->CreateRenderTargetView(resHandle, &desc, handle->getCpuHandle(0));\n  438  \n  439          SharedPtr pObj = SharedPtr(new RenderTargetView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  ...\n  446  \n  447          D3D12_CONSTANT_BUFFER_VIEW_DESC desc;\n  448:         Resource::ApiHandle resHandle = nullptr;\n  449          if (pBuffer)\n  450          {\n  451              desc.BufferLocation = pBuffer->getGpuAddress();\n  452              desc.SizeInBytes = (uint32_t)pBuffer->getSize();\n  453:             resHandle = pBuffer->getApiHandle();\n  454          }\n  455          else\n  ...\n  460          DescriptorSet::Layout layout;\n  461          layout.addRange(DescriptorSet::Type::Cbv, 0, 1);\n  462:         ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  463:         gpDevice->getApiHandle()->CreateConstantBufferView(&desc, handle->getCpuHandle(0));\n  464  \n  465          SharedPtr pObj = SharedPtr(new ConstantBufferView(pBuffer, handle));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RootSignature.cpp:\n   69          }\n   70  \n   71:         createApiHandle(pSigBlob);\n   72      }\n   73  \n   74:     void RootSignature::createApiHandle(ID3DBlobPtr pSigBlob)\n   75      {\n   76:         Device::ApiHandle pDevice = gpDevice->getApiHandle();\n   77:         d3d_call(pDevice->CreateRootSignature(0, pSigBlob->GetBufferPointer(), pSigBlob->GetBufferSize(), IID_PPV_ARGS(&mApiHandle)));\n   78      }\n   79  \n   80      template<bool forGraphics>\n   81:     static void bindRootSigCommon(CopyContext* pCtx, const RootSignature::ApiHandle& rootSig)\n   82      {\n   83          if (forGraphics)\n   ..\n   93      void RootSignature::bindForCompute(CopyContext* pCtx)\n   94      {\n   95:         bindRootSigCommon<false>(pCtx, mApiHandle);\n   96      }\n   97  \n   98      void RootSignature::bindForGraphics(CopyContext* pCtx)\n   99      {\n  100:         bindRootSigCommon<true>(pCtx, mApiHandle);\n  101      }\n  102  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Sampler.cpp:\n   45          DescriptorSet::Layout layout;\n   46          layout.addRange(DescriptorSet::Type::Sampler, 0, 1);\n   47:         pSampler->mApiHandle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n   48:         gpDevice->getApiHandle()->CreateSampler(&d3dDesc, pSampler->mApiHandle->getCpuHandle(0));\n   49  \n   50          return pSampler;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Shader.cpp:\n   81          }\n   82  \n   83:         mApiHandle = { pData->pBlob->GetBufferPointer(), pData->pBlob->GetBufferSize() };\n   84          return true;\n   85      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12State.cpp:\n  533          desc = {};\n  534          assert(gsoDesc.getProgramKernels());\n  535: #define get_shader_handle(_type) gsoDesc.getProgramKernels()->getShader(_type) ? gsoDesc.getProgramKernels()->getShader(_type)->getApiHandle() : D3D12_SHADER_BYTECODE{}\n  536          desc.VS = get_shader_handle(ShaderType::Vertex);\n  537          desc.PS = get_shader_handle(ShaderType::Pixel);\n  ...\n  552          }\n  553          desc.SampleMask = gsoDesc.getSampleMask();\n  554:         desc.pRootSignature = gsoDesc.getRootSignature() ? gsoDesc.getRootSignature()->getApiHandle() : nullptr;\n  555  \n  556          uint32_t numRtvs = 0;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Texture.cpp:\n  143  \n  144          D3D12_HEAP_FLAGS heapFlags = is_set(mBindFlags, ResourceBindFlags::Shared) ? D3D12_HEAP_FLAG_SHARED : D3D12_HEAP_FLAG_NONE;\n  145:         d3d_call(gpDevice->getApiHandle()->CreateCommittedResource(&kDefaultHeapProps, heapFlags, &desc, D3D12_RESOURCE_STATE_COMMON, pClearVal, IID_PPV_ARGS(&mApiHandle)));\n  146  \n  147          if (pData)\n  ...\n  153      Texture::~Texture()\n  154      {\n  155:         gpDevice->releaseResource(mApiHandle);\n  156      }\n  157  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Vao.cpp:\n   31  namespace Falcor\n   32  {\n   33:     const VaoHandle& Vao::getApiHandle() const\n   34      {\n   35          UNSUPPORTED_IN_D3D12(\"VAO doesn't have an API handle\");\n   36:         return mApiHandle;\n   37      }\n   38  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  220      using GpuAddress = D3D12_GPU_VIRTUAL_ADDRESS;\n  221      using QueryHeapHandle = ID3D12QueryHeapPtr;\n  222:     using SharedResourceApiHandle = HANDLE;\n  223  \n  224      using GraphicsStateHandle = ID3D12PipelineStatePtr;\n  ...\n  239      using RasterizerStateHandle = void*;\n  240      using BlendStateHandle = void*;\n  241:     using DescriptorSetApiHandle = void*;\n  242  \n  243      inline constexpr uint32_t getMaxViewportCount() { return D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE; }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DepthStencilState.h:\n  178          /** Get the API handle\n  179          */\n  180:         const DepthStencilStateHandle& getApiHandle() const;\n  181  \n  182      private:\n  183:         DepthStencilStateHandle mApiHandle;\n  184          DepthStencilState(const Desc& Desc) : mDesc(Desc) {}\n  185          Desc mDesc;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DescriptorPool.h:\n   41          using SharedPtr = std::shared_ptr<DescriptorPool>;\n   42          using SharedConstPtr = std::shared_ptr<const DescriptorPool>;\n   43:         using ApiHandle = DescriptorHeapHandle;\n   44          using CpuHandle = HeapCpuHandle;\n   45          using GpuHandle = HeapGpuHandle;\n   ..\n   98          uint32_t getTotalDescCount() const { return mDesc.mTotalDescCount; }\n   99          bool isShaderVisible() const { return mDesc.mShaderVisible; }\n  100:         const ApiHandle& getApiHandle(uint32_t heapIndex) const;\n  101          const ApiData* getApiData() const { return mpApiData.get(); }\n  102          void executeDeferredReleases();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DescriptorSet.h:\n   60          using CpuHandle = DescriptorPool::CpuHandle;\n   61          using GpuHandle = DescriptorPool::GpuHandle;\n   62:         using ApiHandle = DescriptorSetApiHandle;\n   63          using ApiData = DescriptorSetApiData;\n   64  \n   ..\n   99          CpuHandle getCpuHandle(uint32_t rangeIndex, uint32_t descInRange = 0) const;\n  100          GpuHandle getGpuHandle(uint32_t rangeIndex, uint32_t descInRange = 0) const;\n  101:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n  102          const ApiData* getApiData() const { return mpApiData.get(); }\n  103  \n  ...\n  117          std::shared_ptr<ApiData> mpApiData;\n  118          DescriptorPool::SharedPtr mpPool;\n  119:         ApiHandle mApiHandle = {};\n  120      };\n  121  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n  118              // Create a texture object\n  119              auto pColorTex = Texture::SharedPtr(new Texture(width, height, 1, 1, 1, 1, colorFormat, Texture::Type::Texture2D, Texture::BindFlags::RenderTarget));\n  120:             pColorTex->mApiHandle = apiHandles[i];\n  121              // Create the FBO if it's required\n  122              if (mpSwapChainFbos[i] == nullptr) mpSwapChainFbos[i] = Fbo::create();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.h:\n   50          using SharedPtr = std::shared_ptr<Device>;\n   51          using SharedConstPtr = std::shared_ptr<const Device>;\n   52:         using ApiHandle = DeviceHandle;\n   53          static const uint32_t kQueueTypeCount = (uint32_t)LowLevelContextData::CommandQueueType::Count;\n   54  \n   ..\n  129          /** Get the native API handle\n  130          */\n  131:         const DeviceHandle& getApiHandle() { return mApiHandle; }\n  132  \n  133          /** Present the back-buffer to the window\n  ...\n  192  \n  193          Desc mDesc;\n  194:         ApiHandle mApiHandle;\n  195          GpuMemoryHeap::SharedPtr mpUploadHeap;\n  196          DescriptorPool::SharedPtr mpCpuDescPool;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/FBO.cpp:\n  409                  #endif\n  410              }\n  411:             initApiHandle();\n  412              printf(\"Fbo::finalize done\\n\");\n  413          }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/FBO.h:\n   40          using SharedPtr = std::shared_ptr<Fbo>;\n   41          using SharedConstPtr = std::shared_ptr<const Fbo>;\n   42:         using ApiHandle = FboHandle;\n   43  \n   44          class dlldecl Desc\n   ..\n  180          /** Get the object's API handle.      \n  181          */\n  182:         const ApiHandle& getApiHandle() const;\n  183  \n  184          /** Get the maximum number of color targets\n  ...\n  261          void applyColorAttachment(uint32_t rtIndex);\n  262          void applyDepthAttachment();\n  263:         void initApiHandle() const;\n  264  \n  265          /** Validates that the framebuffer attachments are OK. Throws an exception on error.\n  ...\n  284          mutable bool mIsZeroAttachment = false;\n  285  \n  286:         mutable ApiHandle mApiHandle = {};\n  287          void* mpPrivateData = nullptr;\n  288      };\n\n/home/max/dev/Falcor/src/Falcor/Core/API/GpuFence.h:\n   41          using SharedPtr = std::shared_ptr<GpuFence>;\n   42          using SharedConstPtr = std::shared_ptr<const GpuFence>;\n   43:         using ApiHandle = FenceHandle;\n   44          ~GpuFence();\n   45  \n   ..\n   51          /** Get the internal API handle\n   52          */\n   53:         const ApiHandle& getApiHandle() const;// { return mApiHandle; }\n   54  \n   55          /** Get the last value the GPU has signaled\n   ..\n   76          uint64_t mCpuValue;\n   77  \n   78:         ApiHandle mApiHandle;\n   79          FenceApiData* mpApiData = nullptr;\n   80      };\n\n/home/max/dev/Falcor/src/Falcor/Core/API/GraphicsStateObject.cpp:\n   78      GraphicsStateObject::~GraphicsStateObject()\n   79      {\n   80:         gpDevice->releaseResource(mApiHandle);\n   81      }\n   82  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/GraphicsStateObject.h:\n   43          using SharedPtr = std::shared_ptr<GraphicsStateObject>;\n   44          using SharedConstPtr = std::shared_ptr<const GraphicsStateObject>;\n   45:         using ApiHandle = GraphicsStateHandle;\n   46  \n   47          static const uint32_t kSampleMaskAll = -1;\n   ..\n  116          static SharedPtr create(const Desc& desc);\n  117  \n  118:         const ApiHandle& getApiHandle() { return mApiHandle; }\n  119  \n  120          const Desc& getDesc() const { return mDesc; }\n  ...\n  125  \n  126          Desc mDesc;\n  127:         ApiHandle mApiHandle;\n  128  \n  129          // Default state objects\n\n/home/max/dev/Falcor/src/Falcor/Core/API/QueryHeap.h:\n   35      public:\n   36          using SharedPtr = std::shared_ptr<QueryHeap>;\n   37:         using ApiHandle = QueryHeapHandle;\n   38  \n   39          enum class Type\n   ..\n   53          static SharedPtr create(Type type, uint32_t count) { return SharedPtr(new QueryHeap(type, count)); }\n   54  \n   55:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n   56          uint32_t getQueryCount() const { return mCount; }\n   57          Type getType() const { return mType; }\n   ..\n   80      private:\n   81          QueryHeap(Type type, uint32_t count);\n   82:         ApiHandle mApiHandle;\n   83          uint32_t mCount = 0;\n   84          uint32_t mCurrentObject = 0;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RasterizerState.h:\n  160          /** Get the API handle\n  161          */\n  162:         const RasterizerStateHandle& getApiHandle() const;\n  163      private:\n  164:         RasterizerStateHandle mApiHandle;\n  165          RasterizerState(const Desc& Desc) : mDesc(Desc) {}\n  166          Desc mDesc;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n   39      {\n   40      public:\n   41:         using ApiHandle = ResourceHandle;\n   42          using BindFlags = ResourceBindFlags;\n   43  \n   ..\n  114          /** Get the API handle\n  115          */\n  116:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n  117  \n  118          /** Creates a shared resource API handle.\n  119          */\n  120  #ifdef FALCOR_D3D12\n  121:         SharedResourceApiHandle createSharedApiHandle();\n  122  #endif\n  123  \n  ...\n  179          void apiSetName();\n  180  \n  181:         ApiHandle mApiHandle;\n  182          size_t mSize = 0;\n  183          GpuAddress mGpuVaOffset = 0;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n   72      /** Abstracts API resource views.\n   73      */\n   74:     template<typename ApiHandleType>\n   75      class dlldecl ResourceView\n   76      {\n   77      public:\n   78:         using ApiHandle = ApiHandleType;\n   79          static const uint32_t kMaxPossible = -1;\n   80          virtual ~ResourceView();\n   81  \n   82:         ResourceView(ResourceWeakPtr& pResource, ApiHandle handle, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n   83:             : mApiHandle(handle), mpResource(pResource), mViewInfo(mostDetailedMip, mipCount, firstArraySlice, arraySize) {}\n   84  \n   85:         ResourceView(ResourceWeakPtr& pResource, ApiHandle handle, uint32_t firstElement, uint32_t elementCount)\n   86:             : mApiHandle(handle), mpResource(pResource), mViewInfo(firstElement, elementCount) {}\n   87  \n   88          /** Get the raw API handle.\n   89          */\n   90:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n   91  \n   92          /** Get information about the view.\n   ..\n   98          Resource* getResource() const { return mpResource.lock().get(); }\n   99      protected:\n  100:         ApiHandle mApiHandle;\n  101          ResourceViewInfo mViewInfo;\n  102          ResourceWeakPtr mpResource;\n  ...\n  114  \n  115          // This is currently used by RtScene to create an SRV for the TLAS, since the create() functions above assume texture or buffer types.\n  116:         ShaderResourceView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  117              : ResourceView(pResource, handle, mostDetailedMip, mipCount, firstArraySlice, arraySize) {}\n  118      private:\n  119  \n  120:         ShaderResourceView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t firstElement, uint32_t elementCount)\n  121              : ResourceView(pResource, handle, firstElement, elementCount) {}\n  122      };\n  ...\n  131          static SharedPtr getNullView();\n  132      private:\n  133:         DepthStencilView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  134              ResourceView(pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  135      };\n  ...\n  145          static SharedPtr getNullView();\n  146      private:\n  147:         UnorderedAccessView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  148              ResourceView(pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  149  \n  150:         UnorderedAccessView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t firstElement, uint32_t elementCount)\n  151              : ResourceView(pResource, handle, firstElement, elementCount) {}\n  152      };\n  ...\n  161          ~RenderTargetView();\n  162      private:\n  163:         RenderTargetView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  164              ResourceView(pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  165      };\n  ...\n  174  \n  175      private:\n  176:         ConstantBufferView(ResourceWeakPtr pResource, ApiHandle handle) :\n  177              ResourceView(pResource, handle, 0, 1, 0, 1) {}        \n  178      };\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RootSignature.h:\n   53          using SharedPtr = std::shared_ptr<RootSignature>;\n   54          using SharedConstPtr = std::shared_ptr<const RootSignature>;\n   55:         using ApiHandle = RootSignatureHandle;\n   56  \n   57          using DescType = Falcor::DescriptorSet::Type;\n   ..\n  130          static SharedPtr createLocal(const EntryPointGroupReflection* pReflector);\n  131  \n  132:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n  133  \n  134          size_t getDescriptorSetCount() const { return mDesc.mSets.size(); }\n  ...\n  151          void apiInit();\n  152  #ifdef FALCOR_D3D12\n  153:         virtual void createApiHandle(ID3DBlobPtr pSigBlob);\n  154  #endif\n  155:         ApiHandle mApiHandle;\n  156          Desc mDesc;\n  157          static SharedPtr spEmptySig;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Sampler.h:\n   38          using SharedConstPtr = std::shared_ptr<const Sampler>;\n   39          using ConstSharedPtrRef = const SharedPtr&;\n   40:         using ApiHandle = SamplerHandle;\n   41  \n   42          /** Filter mode\n   ..\n  128          /** Get the API handle\n  129          */\n  130:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n  131  \n  132          /** Get the magnification filter\n  ...\n  189          Sampler(const Desc& desc);\n  190          Desc mDesc;\n  191:         ApiHandle mApiHandle = {};\n  192          static uint32_t getApiMaxAnisotropy();\n  193      };\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Shader.h:\n  138          using SharedPtr = std::shared_ptr<Shader>;\n  139          using SharedConstPtr = std::shared_ptr<const Shader>;\n  140:         using ApiHandle = ShaderHandle;\n  141  \n  142          typedef ComPtr<ISlangBlob> Blob;\n  ...\n  197          /** Get the API handle.\n  198          */\n  199:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n  200  \n  201          /** Get the shader Type\n  ...\n  217          ShaderType mType;\n  218          std::string mEntryPointName;\n  219:         ApiHandle mApiHandle;\n  220          void* mpPrivateData = nullptr;\n  221      };\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n   57      }\n   58  \n   59:     Texture::SharedPtr Texture::createFromApiHandle(ApiHandle handle, Type type, uint32_t width, uint32_t height, uint32_t depth, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize, uint32_t mipLevels, State initState, BindFlags bindFlags)\n   60      {\n   61          assert(handle);\n   ..\n   82          }\n   83          Texture::SharedPtr pTexture = SharedPtr(new Texture(width, height, depth, arraySize, mipLevels, sampleCount, format, type, bindFlags));\n   84:         pTexture->mApiHandle = handle;\n   85          pTexture->mState.global = initState;\n   86          pTexture->mState.isGlobal = true;\n   ..\n  349      uint32_t Texture::getTextureSizeInBytes()\n  350      {\n  351:         ID3D12DevicePtr pDevicePtr = gpDevice->getApiHandle();\n  352:         ID3D12ResourcePtr pTexResource = this->getApiHandle();\n  353  \n  354          D3D12_RESOURCE_ALLOCATION_INFO d3d12ResourceAllocationInfo;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.h:\n  105              \\return A pointer to a new texture, or throws an exception if creation failed.\n  106          */\n  107:         static SharedPtr createFromApiHandle(ApiHandle handle, Type type, uint32_t width, uint32_t height, uint32_t depth, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize, uint32_t mipLevels, State initState, BindFlags bindFlags);\n  108  \n  109          /** Create a 1D texture.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/VAO.h:\n   76          /** Get the API handle\n   77          */\n   78:         const VaoHandle& getApiHandle() const;\n   79  \n   80          /** Get the vertex buffer count\n   ..\n  113          Vao(const BufferVec& pVBs, const VertexLayout::SharedPtr& pLayout, const Buffer::SharedPtr& pIB, ResourceFormat ibFormat, Topology primTopology);\n  114  \n  115:         VaoHandle mApiHandle;\n  116          VertexLayout::SharedPtr mpVertexLayout;\n  117          BufferVec mpVBs;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n  100      using SamplerHandle = VkHandle<VkSampler>::SharedPtr;\n  101      using GpuAddress = size_t;\n  102:     using DescriptorSetApiHandle = VkDescriptorSet;\n  103      using QueryHeapHandle = VkHandle<VkQueryPool>::SharedPtr;\n  104  \n  ...\n  124      static const uint32_t kDefaultSwapChainBuffers = 3;\n  125  \n  126:     using ApiObjectHandle = VkBaseApiHandle::SharedPtr;\n  127  \n  128      uint32_t getMaxViewportCount();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKBuffer.cpp:\n   43  \n   44          VkDeviceMemory deviceMem;\n   45:         vk_call(vkAllocateMemory(gpDevice->getApiHandle(), &allocInfo, nullptr, &deviceMem));\n   46          return deviceMem;\n   47      }\n   48  \n   49:     void* mapBufferApi(const Buffer::ApiHandle& apiHandle, size_t size)\n   50      {\n   51          void* pData;\n   52:         vk_call(vkMapMemory(gpDevice->getApiHandle(), apiHandle, 0, size, 0, &pData));\n   53          return pData;\n   54      }\n   ..\n   72      {\n   73          VkMemoryRequirements reqs;\n   74:         vkGetBufferMemoryRequirements(gpDevice->getApiHandle(), pBuffer->getApiHandle(), &reqs);\n   75          return reqs.alignment;\n   76      }\n   77  \n   78:     Buffer::ApiHandle createBuffer(size_t size, Buffer::BindFlags bindFlags, GpuMemoryHeap::Type memType)\n   79      {\n   80          VkBufferCreateInfo bufferInfo = {};\n   ..\n   88          \n   89          VkBuffer buffer;\n   90:         vk_call(vkCreateBuffer(gpDevice->getApiHandle(), &bufferInfo, nullptr, &buffer));\n   91  \n   92          // Get the required buffer size\n   93          VkMemoryRequirements reqs;\n   94:         vkGetBufferMemoryRequirements(gpDevice->getApiHandle(), buffer, &reqs);\n   95  \n   96          VkDeviceMemory mem = allocateDeviceMemory(memType, reqs.memoryTypeBits, reqs.size);\n   97:         vk_call(vkBindBufferMemory(gpDevice->getApiHandle(), buffer, mem, 0));\n   98:         Buffer::ApiHandle apiHandle = Buffer::ApiHandle::create(buffer, mem);\n   99  \n  100          return apiHandle;\n  ...\n  106          {\n  107              mDynamicData = gpDevice->getUploadHeap()->allocate(mSize);\n  108:             mApiHandle = mDynamicData.pResourceHandle;\n  109          }\n  110          else\n  ...\n  112              if (mCpuAccess == CpuAccess::Read && mBindFlags == BindFlags::None)\n  113              {\n  114:                 mApiHandle = createBuffer(mSize, mBindFlags, Device::MemoryType::Readback);\n  115              }\n  116              else\n  117              {\n  118:                 mApiHandle = createBuffer(mSize, mBindFlags, Device::MemoryType::Default);\n  119              }\n  120          }\n  ...\n  138          {\n  139              assert(mCpuAccess == CpuAccess::Read);\n  140:             vkUnmapMemory(gpDevice->getApiHandle(), mApiHandle);\n  141          }\n  142      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n   57              if (applyComputeVars(pVars, pCSO->getDesc().getProgramKernels()->getRootSignature().get()) == false) return false;\n   58          }\n   59:         else mpLowLevelData->getCommandList()->SetComputeRootSignature(RootSignature::getEmpty()->getApiHandle());\n   60  \n   61          mpLastBoundComputeVars = pVars;\n   62:         mpLowLevelData->getCommandList()->SetPipelineState(pCSO->getApiHandle());\n   63          mCommandsPending = true;\n   64          return true;\n   ..\n   77          }\n   78          \n   79:         vkCmdBindPipeline(mpLowLevelData->getCommandList(), VK_PIPELINE_BIND_POINT_COMPUTE, pCSO->getApiHandle());\n   80          mpLastBoundComputeVars = pVars;\n   81          mCommandsPending = true;\n   ..\n   86      void clearColorImageCommon(CopyContext* pCtx, const ViewType* pView, const ClearType& clearVal)\n   87      {\n   88:         if(pView->getApiHandle().getType() != VkResourceType::Image)\n   89          {\n   90              logWarning(\"Looks like you are trying to clear a buffer. Vulkan only supports clearing Buffers with a single uint value. Please use the uint version of clearUav(). Call is ignored\");\n   ..\n  104          range.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  105  \n  106:         vkCmdClearColorImage(pCtx->getLowLevelData()->getCommandList(), pView->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &colVal, 1, &range);\n  107      }\n  108  \n  ...\n  117      void ComputeContext::clearUAV(const UnorderedAccessView* pUav, const uint4& value)\n  118      {\n  119:         if(pUav->getApiHandle().getType() == VkResourceType::Buffer)\n  120          {\n  121              if ((value.x != value.y) || ((value.x != value.z) && (value.x != value.w)))\n  ...\n  124              }\n  125              const Buffer* pBuffer = dynamic_cast<const Buffer*>(pUav->getResource());\n  126:             vkCmdFillBuffer(getLowLevelData()->getCommandList(), pBuffer->getApiHandle(), pBuffer->getGpuAddressOffset(), pBuffer->getSize(), value.x);\n  127          }\n  128          else\n  ...\n  167          if (prepareForDispatch(pState, pVars) == false) return;\n  168          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  169:         vkCmdDispatchIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), pArgBuffer->getGpuAddressOffset() + argBufferOffset);\n  170      }\n  171  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp:\n   43          info.sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;\n   44          info.stage = shaderStageInfos[0];\n   45:         info.layout = mDesc.mpRootSignature->getApiHandle();\n   46  \n   47          VkPipeline pipeline;\n   48:         if (VK_FAILED(vkCreateComputePipelines(gpDevice->getApiHandle(), VK_NULL_HANDLE, 1, &info, nullptr, &pipeline)))\n   49          {\n   50              #ifdef _WIN32\n   ..\n   54              #endif\n   55          }\n   56:         mApiHandle = ApiHandle::create(pipeline);\n   57      }\n   58  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n  200          pCtx->resourceBarrier(pTexture, Resource::State::CopyDest);\n  201          pCtx->resourceBarrier(pStaging.get(), Resource::State::CopySource);\n  202:         vkCmdCopyBufferToImage(pCtx->getLowLevelData()->getCommandList(), pStaging->getApiHandle(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &vkCopy);\n  203      }\n  204  \n  ...\n  231          pCtx->resourceBarrier(pTexture, Resource::State::CopySource);\n  232          pCtx->resourceBarrier(pThis->mpBuffer.get(), Resource::State::CopyDest);\n  233:         vkCmdCopyImageToBuffer(pCtx->getLowLevelData()->getCommandList(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pThis->mpBuffer->getApiHandle(), 1, &vkCopy);\n  234  \n  235          // Create a fence and signal\n  ...\n  262          barrier.newLayout = getImageLayout(newState);\n  263          barrier.oldLayout = getImageLayout(oldState);\n  264:         barrier.image = pTexture->getApiHandle();\n  265          barrier.subresourceRange.aspectMask = getAspectFlagsFromFormat(pTexture->getFormat());\n  266          barrier.subresourceRange.baseArrayLayer = arraySlice;\n  ...\n  276      bool CopyContext::textureBarrier(const Texture* pTexture, Resource::State newState)\n  277      {\n  278:         assert(pTexture->getApiHandle().getType() == VkResourceType::Image);\n  279  \n  280          VkImageLayout srcLayout = getImageLayout(pTexture->getGlobalState());\n  ...\n  287              barrier.oldLayout = srcLayout;\n  288              barrier.newLayout = dstLayout;\n  289:             barrier.image = pTexture->getApiHandle();\n  290              barrier.subresourceRange.aspectMask = getAspectFlagsFromFormat(pTexture->getFormat());\n  291              barrier.subresourceRange.baseArrayLayer = 0;\n  ...\n  310      {\n  311          assert(pBuffer);\n  312:         assert(pBuffer->getApiHandle().getType() == VkResourceType::Buffer);\n  313  \n  314          VkPipelineStageFlags srcStageMask = getShaderStageMask(pBuffer->getGlobalState(), true);\n  ...\n  321              barrier.srcAccessMask = getAccessMask(pBuffer->getGlobalState());\n  322              barrier.dstAccessMask = getAccessMask(newState);\n  323:             barrier.buffer = pBuffer->getApiHandle();\n  324              barrier.offset = pBuffer->getGpuAddressOffset();\n  325              barrier.size = pBuffer->getSize();\n  ...\n  373              resourceBarrier(pDst, Resource::State::CopyDest);\n  374              resourceBarrier(pSrc, Resource::State::CopySource);\n  375:             vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, mipCount, regions.data());\n  376          }\n  377          mCommandsPending = true;\n  ...\n  398          region.extent.height = pDst->getHeight(mipLevel);\n  399          region.extent.depth = pDst->getDepth(mipLevel);\n  400:         vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &region);\n  401  \n  402          mCommandsPending = true;\n  ...\n  412          region.size = numBytes;\n  413  \n  414:         vkCmdCopyBuffer(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), pDst->getApiHandle(), 1, &region);\n  415          mCommandsPending = true;\n  416      }\n  ...\n  443          region.extent.depth = (size.z == -1) ? pSrc->getDepth(mipLevel) - srcOffset.z : size.z;\n  444  \n  445:         vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), getImageLayout(Resource::State::CopySource), pDst->getApiHandle(), getImageLayout(Resource::State::CopyDest), 1, &region);\n  446  \n  447          mCommandsPending = true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorData.h:\n   45          ~DescriptorSetApiData()\n   46          {\n   47:             vkFreeDescriptorSets(gpDevice->getApiHandle(), pool, 1, &set);\n   48:             vkDestroyDescriptorSetLayout(gpDevice->getApiHandle(), layout, nullptr);\n   49          }\n   50      };\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp:\n   89  \n   90          VkDescriptorPool pool;\n   91:         if (VK_FAILED(vkCreateDescriptorPool(gpDevice->getApiHandle(), &info, nullptr, &pool)))\n   92          {\n   93              #ifdef _WIN32\n   ..\n   97              #endif\n   98          }\n   99:         mpApiData->descriptorPool = ApiHandle::create(pool);\n  100      }\n  101  \n  102:     const DescriptorPool::ApiHandle& DescriptorPool::getApiHandle(uint32_t heapIndex) const\n  103      {\n  104          return mpApiData->descriptorPool;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n   42          VkDescriptorSetAllocateInfo allocInfo = {};\n   43          allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;\n   44:         allocInfo.descriptorPool = mpPool->getApiHandle(0);\n   45          allocInfo.descriptorSetCount = 1;\n   46          allocInfo.pSetLayouts = &layout;\n   47:         vk_call(vkAllocateDescriptorSets(gpDevice->getApiHandle(), &allocInfo, &mApiHandle));\n   48:         mpApiData = std::make_shared<DescriptorSetApiData>(layout, mpPool->getApiHandle(0), mApiHandle);\n   49      }\n   50  \n   ..\n   67          VkDescriptorImageInfo image;\n   68          VkDescriptorBufferInfo buffer;\n   69:         typename ViewType::ApiHandle handle = pView->getApiHandle();\n   70          VkBufferView texelBufferView = {};\n   71  \n   ..\n   75              //if (pTypedBuffer) \n   76              //{\n   77:             //    texelBufferView = pTypedBuffer->getUAV()->getApiHandle();\n   78              //    write.pTexelBufferView = &texelBufferView;\n   79              //} else {\n   80                  Buffer* pBuffer = dynamic_cast<Buffer*>(pView->getResource());\n   81:                 buffer.buffer = pBuffer->getApiHandle();\n   82                  buffer.offset = pBuffer->getGpuAddressOffset();\n   83                  buffer.range = pBuffer->getSize();\n   ..\n  101          write.descriptorCount = 1;\n  102  \n  103:         vkUpdateDescriptorSets(gpDevice->getApiHandle(), 1, &write, 0, nullptr);\n  104      }\n  105  \n  106      void DescriptorSet::setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv)\n  107      {\n  108:         setSrvUavCommon<false>(mApiHandle, mLayout.getRange(rangeIndex).baseRegIndex, descIndex, pSrv, mLayout.getRange(rangeIndex).type);\n  109      }\n  110  \n  111      void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav)\n  112      {\n  113:         setSrvUavCommon<true>(mApiHandle, mLayout.getRange(rangeIndex).baseRegIndex, descIndex, pUav, mLayout.getRange(rangeIndex).type);\n  114      }\n  115  \n  ...\n  119          info.imageLayout = VK_IMAGE_LAYOUT_GENERAL;\n  120          info.imageView = nullptr;\n  121:         info.sampler = pSampler->getApiHandle();\n  122  \n  123          VkWriteDescriptorSet write = {};\n  124          write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;\n  125:         write.dstSet = mApiHandle;\n  126          write.dstBinding = mLayout.getRange(rangeIndex).baseRegIndex;\n  127          write.dstArrayElement = descIndex;\n  ...\n  130          write.pImageInfo = &info;\n  131  \n  132:         vkUpdateDescriptorSets(gpDevice->getApiHandle(), 1, &write, 0, nullptr);\n  133      }\n  134  \n  ...\n  138          const auto& pBuffer = dynamic_cast<const Buffer*>(pView->getResource());\n  139          assert(pBuffer);\n  140:         info.buffer = pBuffer->getApiHandle();\n  141          info.offset = pBuffer->getGpuAddressOffset();\n  142          info.range = pBuffer->getSize();\n  ...\n  144          VkWriteDescriptorSet write = {};\n  145          write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;\n  146:         write.dstSet = mApiHandle;\n  147          write.dstBinding = mLayout.getRange(rangeIndex).baseRegIndex;\n  148          write.dstArrayElement = descIndex;\n  ...\n  150          write.descriptorCount = 1;\n  151          write.pBufferInfo = &info;\n  152:         vkUpdateDescriptorSets(gpDevice->getApiHandle(), 1, &write, 0, nullptr);\n  153      }\n  154  \n  155      template<bool forGraphics>\n  156:     static void bindCommon(DescriptorSet::ApiHandle set, CopyContext* pCtx, const RootSignature* pRootSig, uint32_t bindLocation)\n  157      {\n  158          VkPipelineBindPoint bindPoint = forGraphics ? VK_PIPELINE_BIND_POINT_GRAPHICS : VK_PIPELINE_BIND_POINT_COMPUTE;\n  159          VkDescriptorSet vkSet = set;\n  160:         vkCmdBindDescriptorSets(pCtx->getLowLevelData()->getCommandList(), bindPoint, pRootSig->getApiHandle(), bindLocation, 1, &vkSet, 0, nullptr);\n  161      }\n  162  \n  163      void DescriptorSet::bindForGraphics(CopyContext* pCtx, const RootSignature* pRootSig, uint32_t rootIndex)\n  164      {\n  165:         bindCommon<true>(mApiHandle, pCtx, pRootSig, rootIndex);\n  166      }\n  167  \n  168      void DescriptorSet::bindForCompute(CopyContext* pCtx, const RootSignature* pRootSig, uint32_t rootIndex)\n  169      {\n  170:         bindCommon<false>(mApiHandle, pCtx, pRootSig, rootIndex);\n  171      }\n  172  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDevice.cpp:\n  130      {\n  131          uint32_t imageCount = 0;\n  132:         vkGetSwapchainImagesKHR(mApiHandle, mpApiData->swapchain, &imageCount, nullptr);\n  133          //assert(imageCount == apiHandles.size());\n  134          assert(imageCount == kSwapChainBuffersCount);\n  135  \n  136          std::vector<VkImage> swapchainImages(imageCount);\n  137:         vkGetSwapchainImagesKHR(mApiHandle, mpApiData->swapchain, &imageCount, swapchainImages.data());\n  138          for (size_t i = 0; i < swapchainImages.size(); i++)\n  139          {\n  ...\n  142  \n  143          // Get the back-buffer\n  144:         mCurrentBackBufferIndex = getCurrentBackBufferIndex(mApiHandle, kSwapChainBuffersCount, mpApiData);\n  145          return true;\n  146      }\n  ...\n  149      {\n  150          PFN_vkDestroyDebugReportCallbackEXT DestroyDebugReportCallback = VK_NULL_HANDLE;\n  151:         DestroyDebugReportCallback = (PFN_vkDestroyDebugReportCallbackEXT)vkGetInstanceProcAddr(mApiHandle, \"vkDestroyDebugReportCallbackEXT\");\n  152          if(DestroyDebugReportCallback)\n  153          {\n  154:             DestroyDebugReportCallback(mApiHandle, mpApiData->debugReportCallbackHandle, nullptr);\n  155          }\n  156:         vkDestroySwapchainKHR(mApiHandle, mpApiData->swapchain, nullptr);\n  157          for (auto& f : mpApiData->presentFences.f)\n  158          {\n  159:             vkDestroyFence(mApiHandle, f, nullptr);\n  160          }\n  161          safe_delete(mpApiData);\n  ...\n  494          VkWin32SurfaceCreateInfoKHR createInfo = {};\n  495          createInfo.sType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;\n  496:         createInfo.hwnd = pWindow->getApiHandle();\n  497          createInfo.hinstance = GetModuleHandle(nullptr);\n  498  \n  ...\n  501          VkXlibSurfaceCreateInfoKHR createInfo = {};\n  502          createInfo.sType = VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;\n  503:         createInfo.dpy = pWindow->getApiHandle().pDisplay;\n  504:         createInfo.window = pWindow->getApiHandle().window;\n  505  \n  506          VkResult result = vkCreateXlibSurfaceKHR(instance, &createInfo, nullptr, &surface);\n  ...\n  525          // Surface size\n  526          VkSurfaceCapabilitiesKHR surfaceCapabilities;\n  527:         vkGetPhysicalDeviceSurfaceCapabilitiesKHR(mApiHandle, mApiHandle, &surfaceCapabilities);\n  528          assert(surfaceCapabilities.supportedUsageFlags & (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_TRANSFER_SRC_BIT));\n  529  \n  ...\n  551  \n  552          uint32_t formatCount = 0;\n  553:         vkGetPhysicalDeviceSurfaceFormatsKHR(mApiHandle, mApiHandle, &formatCount, nullptr);\n  554          std::vector<VkSurfaceFormatKHR> surfaceFormats(formatCount);\n  555:         vkGetPhysicalDeviceSurfaceFormatsKHR(mApiHandle, mApiHandle, &formatCount, surfaceFormats.data());\n  556  \n  557          bool formatValid = false;\n  ...\n  573          // Select present mode\n  574          uint32_t presentModeCount = 0;\n  575:         vkGetPhysicalDeviceSurfacePresentModesKHR(mApiHandle, mApiHandle, &presentModeCount, nullptr);\n  576          std::vector<VkPresentModeKHR> presentModes(presentModeCount);\n  577:         vkGetPhysicalDeviceSurfacePresentModesKHR(mApiHandle, mApiHandle, &presentModeCount, presentModes.data());\n  578  \n  579          // Select present mode, FIFO for VSync, otherwise preferring MAILBOX -> IMMEDIATE -> FIFO\n  ...\n  599          VkSwapchainCreateInfoKHR info = {};\n  600          info.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;\n  601:         info.surface = mApiHandle;\n  602          uint32_t maxImageCount = surfaceCapabilities.maxImageCount ? surfaceCapabilities.maxImageCount : UINT32_MAX; // 0 means no limit on the number of images\n  603          info.minImageCount = clamp(kSwapChainBuffersCount, surfaceCapabilities.minImageCount, maxImageCount);\n  ...\n  616          info.oldSwapchain = VK_NULL_HANDLE;\n  617  \n  618:         if (VK_FAILED(vkCreateSwapchainKHR(mApiHandle, &info, nullptr, &mpApiData->swapchain)))\n  619          {\n  620              logError(\"Could not create swapchain.\");\n  ...\n  623  \n  624          uint32_t swapChainCount = 0;\n  625:         vkGetSwapchainImagesKHR(mApiHandle, mpApiData->swapchain, &swapChainCount, nullptr);\n  626          assert(swapChainCount == kSwapChainBuffersCount);\n  627  \n  ...\n  638          assert(pQueue);\n  639          vk_call(vkQueuePresentKHR(pQueue, &info));\n  640:         mCurrentBackBufferIndex = getCurrentBackBufferIndex(mApiHandle, kSwapChainBuffersCount, mpApiData);\n  641      }\n  642  \n  ...\n  656          if (initMemoryTypes(physicalDevice, mpApiData) == false) return false;\n  657  \n  658:         mApiHandle = DeviceHandle::create(instance, physicalDevice, device, surface);\n  659          mGpuTimestampFrequency = getPhysicalDeviceLimits().timestampPeriod / (1000 * 1000);\n  660  \n  ...\n  677      void Device::apiResizeSwapChain(uint32_t width, uint32_t height, ResourceFormat colorFormat)\n  678      {\n  679:         vkDestroySwapchainKHR(mApiHandle, mpApiData->swapchain, nullptr);\n  680          createSwapChain(colorFormat);\n  681      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   40      Fbo::~Fbo()\n   41      {\n   42:         gpDevice->releaseResource(std::static_pointer_cast<VkBaseApiHandle>(mApiHandle));\n   43      }\n   44  \n   45:     const Fbo::ApiHandle& Fbo::getApiHandle() const\n   46      {\n   47          finalize();\n   48:         return mApiHandle;\n   49      }\n   50  \n   ..\n   56      }\n   57  \n   58:     void Fbo::initApiHandle() const\n   59      {\n   60          printf(\"FIAH-0 for %d attachments\\n\", Fbo::getMaxColorTargetCount());\n   ..\n   78                  arraySize = getRenderTargetView(i)->getViewInfo().arraySize;\n   79                  printf(\"FIAH-0-3\\n\");\n   80:                 attachments[rtCount] = getRenderTargetView(i)->getApiHandle();\n   81                  printf(\"FIAH-0-4\\n\");\n   82                  rtCount++;\n   ..\n   99              }\n  100              printf(\"FIAH-1-1-0\\n\");\n  101:             auto test2 = test->getApiHandle();\n  102              if(!test2) {\n  103:                 printf(\"ERROR getDepthStencilView->getApiHandle() returned NULL\\n\");\n  104              }\n  105:             attachments[rtCount] = getDepthStencilView()->getApiHandle();\n  106              printf(\"FIAH-1-2\\n\");\n  107              rtCount++;\n  ...\n  112          initVkRenderPassInfo(*mpDesc, renderPassInfo);\n  113          VkRenderPass pass;\n  114:         vkCreateRenderPass(gpDevice->getApiHandle(), &renderPassInfo.info, nullptr, &pass);\n  115          printf(\"FIAH-3\\n\");\n  116          // Framebuffer\n  ...\n  126          VkFramebuffer frameBuffer;\n  127          printf(\"FIAH-4\\n\");\n  128:         vkCreateFramebuffer(gpDevice->getApiHandle(), &frameBufferInfo, nullptr, &frameBuffer);\n  129  \n  130          printf(\"FIAH-5\\n\");\n  131:         if (mApiHandle) gpDevice->releaseResource(std::static_pointer_cast<VkBaseApiHandle>(mApiHandle));\n  132:         mApiHandle = ApiHandle::create(pass, frameBuffer);\n  133  \n  134          printf(\"FIAH done\\n\");\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFormats.cpp:\n  115      {\n  116          VkFormatProperties p;\n  117:         vkGetPhysicalDeviceFormatProperties(gpDevice->getApiHandle(), getVkFormat(format), &p);\n  118  \n  119          auto convertFlags = [](VkFormatFeatureFlags vk) -> ResourceBindFlags\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGpuFence.cpp:\n   33  namespace Falcor\n   34  {\n   35:     using ApiHandle = FenceHandle;\n   36  \n   37      // #VKTODO This entire class seems overly complicated. Need to make sure that there are no performance issues\n   ..\n   41          info.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;\n   42          VkFence fence;\n   43:         vkCreateFence(gpDevice->getApiHandle(), &info, nullptr, &fence);\n   44          return fence;\n   45      }\n   ..\n   47      void destroyFence(VkFence fence)\n   48      {\n   49:         vkDestroyFence(gpDevice->getApiHandle(), fence, nullptr);\n   50      }\n   51  \n   52      void resetFence(VkFence fence)\n   53      {\n   54:         vkResetFences(gpDevice->getApiHandle(), 1, &fence);\n   55      }\n   56  \n   ..\n   60          semaphoreInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;\n   61          VkSemaphore sem;\n   62:         vkCreateSemaphore(gpDevice->getApiHandle(), &semaphoreInfo, nullptr, &sem);\n   63          return sem;\n   64      };\n   ..\n   66      void destroySemaphore(VkSemaphore semaphore)\n   67      {\n   68:         vkDestroySemaphore(gpDevice->getApiHandle(), semaphore, nullptr);\n   69      }\n   70  \n   ..\n  187      }\n  188  \n  189:     const ApiHandle& GpuFence::getApiHandle() const\n  190      {\n  191          const auto& fence = mpApiData->semaphoreQueue.getObject(); // #VKTODO Figure this out. It is implemented like this based on the internal usage in VkDevice.cpp, but might not be what the user expects\n  ...\n  228          auto& activeFences = mpApiData->fenceQueue.getActiveObjects();\n  229          std::vector<VkFence> fenceVec(activeFences.begin(), activeFences.end());\n  230:         vk_call(vkWaitForFences(gpDevice->getApiHandle(), (uint32_t)fenceVec.size(), fenceVec.data(), true, UINT64_MAX));\n  231          mpApiData->gpuValue += fenceVec.size();\n  232          mpApiData->fenceQueue.popAllObjects();\n  ...\n  240          {\n  241              VkFence fence = activeFences.front();\n  242:             if (vkGetFenceStatus(gpDevice->getApiHandle(), fence) == VK_SUCCESS)\n  243              {\n  244                  mpApiData->fenceQueue.popFront();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp:\n   33  namespace Falcor\n   34  {\n   35:     Buffer::ApiHandle createBuffer(size_t size, Buffer::BindFlags bindFlags, GpuMemoryHeap::Type memType);\n   36  \n   37      void GpuMemoryHeap::initBasePageData(BaseData& data, size_t size)\n   ..\n   40          data.pResourceHandle = createBuffer(size, Buffer::BindFlags::Constant | Buffer::BindFlags::Vertex | Buffer::BindFlags::Index, mType);\n   41          data.offset = 0;\n   42:         vk_call(vkMapMemory(gpDevice->getApiHandle(), data.pResourceHandle, 0, VK_WHOLE_SIZE, 0, (void**)&data.pData));\n   43      }\n   44  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGpuTimer.cpp:\n   35      void GpuTimer::apiBegin()\n   36      {\n   37:         mpLowLevelData->getCommandList()->EndQuery(spHeap.lock()->getApiHandle(), D3D12_QUERY_TYPE_TIMESTAMP, mStart);\n   38      }\n   39  \n   40      void GpuTimer::apiEnd()\n   41      {\n   42:         mpLowLevelData->getCommandList()->EndQuery(spHeap.lock()->getApiHandle(), D3D12_QUERY_TYPE_TIMESTAMP, mEnd);\n   43      }\n   44      */\n   ..\n   46      void GpuTimer::apiBegin()\n   47     {\n   48:         auto mpHeap = spHeap.lock()->getApiHandle();\n   49          vkCmdResetQueryPool(mpLowLevelData->getCommandList(), mpHeap, mStart, 2);\n   50          vkCmdWriteTimestamp(mpLowLevelData->getCommandList(), VK_PIPELINE_STAGE_ALL_COMMANDS_BIT, mpHeap, mStart);\n   ..\n   53      void GpuTimer::apiEnd()\n   54      {\n   55:         auto mpHeap = spHeap.lock()->getApiHandle();\n   56          vkCmdWriteTimestamp(mpLowLevelData->getCommandList(), VK_PIPELINE_STAGE_ALL_COMMANDS_BIT, mpHeap, mEnd);\n   57      }\n   ..\n   59      void GpuTimer::apiResolve(uint64_t result[2])\n   60      {\n   61:         auto mpHeap = spHeap.lock()->getApiHandle();\n   62:         vk_call(vkGetQueryPoolResults(gpDevice->getApiHandle(), mpHeap, mStart, 2, sizeof(uint64_t) * 2, result, sizeof(result[0]), VK_QUERY_RESULT_64_BIT | VK_QUERY_RESULT_WAIT_BIT));\n   63      }\n   64  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp:\n   94          pipelineCreateInfo.pColorBlendState = &blendInfo.info;\n   95          pipelineCreateInfo.pDynamicState = &dynamicInfo;\n   96:         pipelineCreateInfo.layout = mDesc.mpRootSignature->getApiHandle();\n   97          pipelineCreateInfo.renderPass = mDesc.getRenderPass();\n   98          pipelineCreateInfo.subpass = 0;\n   99  \n  100          VkPipeline pipeline;\n  101:         if (VK_FAILED(vkCreateGraphicsPipelines(gpDevice->getApiHandle(), VK_NULL_HANDLE, 1, &pipelineCreateInfo, nullptr, &pipeline)))\n  102          {\n  103              #ifdef _WIN32\n  ...\n  107              #endif\n  108          }\n  109:         mApiHandle = ApiHandle::create(pipeline);\n  110      }\n  111  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp:\n   48          cmdBufAllocateInfo.commandBufferCount = 1;\n   49          VkCommandBuffer cmdBuf;\n   50:         vk_call(vkAllocateCommandBuffers(gpDevice->getApiHandle(), &cmdBufAllocateInfo, &cmdBuf));\n   51          return cmdBuf;\n   52      }\n   ..\n   80          commandPoolCreateInfo.queueFamilyIndex = gpDevice->getApiCommandQueueType(type);\n   81          VkCommandPool pool;\n   82:         if (VK_FAILED(vkCreateCommandPool(gpDevice->getApiHandle(), &commandPoolCreateInfo, nullptr, &pool)))\n   83          {\n   84              logError(\"Could not create command pool\");\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VkQueryHeap.cpp:\n   56          info.pipelineStatistics = VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM;\n   57          VkQueryPool pool;\n   58:         vk_call(vkCreateQueryPool(gpDevice->getApiHandle(), &info, nullptr, &pool));\n   59:         mApiHandle = ApiHandle::create(pool);\n   60      }\n   61  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRasterizerState.cpp:\n   33      RasterizerState::~RasterizerState() = default;\n   34  \n   35:     const RasterizerStateHandle& RasterizerState::getApiHandle() const\n   36      {\n   37:         UNSUPPORTED_IN_VULKAN(\"RasterizerState::getApiHandle()\");\n   38:         return mApiHandle;\n   39      }\n   40  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   71          range.aspectMask |= clearStencil ? VK_IMAGE_ASPECT_STENCIL_BIT : 0;\n   72  \n   73:         vkCmdClearDepthStencilImage(mpLowLevelData->getCommandList(), pDsv->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &val, 1, &range);\n   74          mCommandsPending = true;\n   75      }\n   ..\n  121              const Buffer* pVB = pVao->getVertexBuffer(i).get();\n  122              VkDeviceSize offset = pVB->getGpuAddressOffset();\n  123:             VkBuffer handle = pVB->getApiHandle();\n  124              vkCmdBindVertexBuffers(cmdList, i, 1, &handle, &offset);\n  125              pCtx->resourceBarrier(pVB, Resource::State::VertexBuffer);\n  ...\n  130          {\n  131              VkDeviceSize offset = pIB->getGpuAddressOffset();\n  132:             VkBuffer handle = pIB->getApiHandle();\n  133              vkCmdBindIndexBuffer(cmdList, handle, offset, getVkIndexType(pVao->getIndexBufferFormat()));\n  134              pCtx->resourceBarrier(pIB, Resource::State::IndexBuffer);\n  ...\n  139      {\n  140          // Begin Render Pass\n  141:         const auto& fboHandle = pFbo->getApiHandle();\n  142          VkRenderPassBeginInfo beginInfo = {};\n  143          beginInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;\n  ...\n  196          if (is_set(RenderContext::StateBindFlags::PipelineState, mBindFlags))\n  197          {\n  198:             vkCmdBindPipeline(mpLowLevelData->getCommandList(), VK_PIPELINE_BIND_POINT_GRAPHICS, pGSO->getApiHandle());\n  199          }\n  200          if (is_set(RenderContext::StateBindFlags::Fbo, mBindFlags))\n  ...\n  253          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  254          if (prepareForDraw(pState, pVars) == false) return;\n  255:         vkCmdDrawIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), 1, 0);\n  256          endVkDraw(mpLowLevelData->getCommandList());\n  257      }\n  ...\n  261          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  262          if (prepareForDraw(pState, pVars) == false) return;\n  263:         vkCmdDrawIndexedIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), 1, 0);\n  264          endVkDraw(mpLowLevelData->getCommandList());\n  265      }\n  ...\n  306              resolve.extent.depth = 1;\n  307  \n  308:             vkCmdResolveImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &resolve);\n  309          }\n  310          else\n  ...\n  316              // Vulkan spec requires VK_FILTER_NEAREST if blit source is a depth and/or stencil format\n  317              VkFilter vkFilter = isDepthStencilFormat(pTexture->getFormat()) ? VK_FILTER_NEAREST : getVkFilter(filter);\n  318:             vkCmdBlitImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &blt, vkFilter);\n  319          }\n  320          mCommandsPending = true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n   37      VkImageAspectFlags getAspectFlagsFromFormat(ResourceFormat format, bool ignoreStencil = false);\n   38  \n   39:     template<typename ApiHandleType>\n   40:     ResourceView<ApiHandleType>::~ResourceView()\n   41      {\n   42:         gpDevice->releaseResource(mApiHandle);\n   43      }\n   44  \n   ..\n   83  \n   84          outInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;\n   85:         outInfo.image = pTexture->getApiHandle();\n   86          outInfo.viewType = getViewType(pTexture->getType(), pTexture->getArraySize() > 1);\n   87          outInfo.format = getVkFormat(texFormat);\n   ..\n  104          VkBufferViewCreateInfo outInfo = {};\n  105          outInfo.sType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;\n  106:         outInfo.buffer = pTypedBuffer->getApiHandle();\n  107          outInfo.offset = 0;\n  108          outInfo.range = VK_WHOLE_SIZE;\n  ...\n  118          assert(pResource);\n  119  \n  120:         switch (pResource->getApiHandle().getType())\n  121          {\n  122          case VkResourceType::Image:\n  ...\n  126              printf(\"createViewCommon-0-0\\n\");\n  127              VkImageView imageView;\n  128:             vk_call(vkCreateImageView(gpDevice->getApiHandle(), &info, nullptr, &imageView));\n  129              printf(\"createViewCommon-0-1\\n\");\n  130              return VkResource<VkImageView, VkBufferView>::SharedPtr::create(imageView, nullptr);\n  ...\n  140              {\n  141                  VkBufferViewCreateInfo info = initializeBufferViewInfo(pTypedBuffer);\n  142:                 vk_call(vkCreateBufferView(gpDevice->getApiHandle(), &info, nullptr, &bufferView));\n  143              }\n  144              return VkResource<VkImageView, VkBufferView>::SharedPtr::create(bufferView, nullptr);\n  ...\n  157          if (!pTexture && getNullView()) return getNullView();\n  158  \n  159:         //Resource::ApiHandle resHandle = pTexture->getApiHandle();\n  160          //return SharedPtr(new ShaderResourceView(pTexture, resHandle, mostDetailedMip, mipCount, firstArraySlice, arraySize));\n  161          return getNullView();\n  ...\n  181          /*\n  182          D3D12_SHADER_RESOURCE_VIEW_DESC desc;\n  183:         Resource::ApiHandle resHandle = nullptr;\n  184          if (pBuffer)\n  185          {\n  186              desc = createBufferSrvDesc(pBuffer.get(), firstElement, elementCount);\n  187:             resHandle = pBuffer->getApiHandle();\n  188          }\n  189          else\n  ...\n  208  \n  209          //D3D12_DEPTH_STENCIL_VIEW_DESC desc;\n  210:         Resource::ApiHandle resHandle = nullptr;\n  211          if(pTexture)\n  212          {\n  213              //desc = createDsvDesc(pTexture.get(), mipLevel, firstArraySlice, arraySize);\n  214:             resHandle = pTexture->getApiHandle();\n  215          }\n  216          //else\n  ...\n  223          DescriptorSet::Layout layout;\n  224          layout.addRange(DescriptorSet::Type::Dsv, 0, 1);\n  225:         //ApiHandle \n  226:         auto handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout)->getApiHandle();\n  227:         //gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  228          printf(\"DepthStencilView::create 0\\n\");\n  229          auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  ...\n  240          }\n  241  \n  242:         if (pSharedPtr->getApiHandle().getType() == VkResourceType::Buffer)\n  243          {\n  244              logWarning(\"Cannot create DepthStencilView from a buffer!\");\n  ...\n  276          /*\n  277          D3D12_UNORDERED_ACCESS_VIEW_DESC desc;\n  278:         Resource::ApiHandle resHandle = nullptr;\n  279:         Resource::ApiHandle counterHandle = nullptr;\n  280  \n  281          if (pBuffer != nullptr)\n  282          {\n  283              desc = createBufferUavDesc(pBuffer.get(), firstElement, elementCount);\n  284:             resHandle = pBuffer->getApiHandle();\n  285  \n  286              if (pBuffer->getUAVCounter())\n  287              {\n  288:                 counterHandle = pBuffer->getUAVCounter()->getApiHandle();\n  289              }\n  290          }\n  ...\n  301      RenderTargetView::~RenderTargetView()\n  302      {\n  303:         static std::vector<RenderTargetView::ApiHandle> hdl;\n  304:         hdl.push_back(mApiHandle);\n  305      }\n  306      // based on D3D code\n  ...\n  315          {\n  316              // Check type\n  317:             if (pTexture->getApiHandle().getType() == VkResourceType::Buffer)\n  318              {\n  319                  logWarning(\"Cannot create RenderTargetView from a buffer!\");\n  ...\n  341  \n  342          // Check type\n  343:         if (pTexture->getApiHandle().getType() == VkResourceType::Buffer)\n  344          {\n  345              logWarning(\"Cannot create RenderTargetView from a buffer!\");\n  ...\n  355          //DescriptorSet::Layout layout;\n  356          //layout.addRange(DescriptorSet::Type::Rtv, 0, 1);\n  357:         //ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  358:         //gpDevice->getApiHandle()->CreateRenderTargetView(resHandle, &desc, handle->getCpuHandle(0));\n  359  \n  360          //SharedPtr pObj = SharedPtr(new RenderTargetView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRootSignature.cpp:\n   89          layoutInfo.pBindings = bindings.data();\n   90          VkDescriptorSetLayout vkHandle;\n   91:         vk_call(vkCreateDescriptorSetLayout(gpDevice->getApiHandle(), &layoutInfo, nullptr, &vkHandle));\n   92          return vkHandle;\n   93      }\n   ..\n  114          pipelineLayoutInfo.setLayoutCount = (uint32_t)vkSetLayouts.size();\n  115          VkPipelineLayout layout;\n  116:         vk_call(vkCreatePipelineLayout(gpDevice->getApiHandle(), &pipelineLayoutInfo, nullptr, &layout));\n  117:         mApiHandle = ApiHandle::create(layout, vkSetLayouts);\n  118      }\n  119  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKSampler.cpp:\n   45          initVkSamplerInfo(pSampler.get(), info);\n   46          VkSampler handle;\n   47:         vk_call(vkCreateSampler(gpDevice->getApiHandle(), &info, nullptr, &handle));\n   48:         pSampler->mApiHandle = ApiHandle::create(handle);\n   49          return pSampler;\n   50      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKShader.cpp:\n   46  \n   47          VkShaderModule shaderModule;\n   48:         if (VK_FAILED(vkCreateShaderModule(gpDevice->getApiHandle(), &moduleCreateInfo, nullptr, &shaderModule)))\n   49          {\n   50              logError(\"Could not create shader!\");\n   51              return false;\n   52          }\n   53:         mApiHandle = ApiHandle::create(shaderModule);\n   54          return true;\n   55      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp:\n   32  namespace Falcor\n   33  {\n   34:     template<> VkHandle<VkSwapchainKHR>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroySwapchainKHR(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   35:     template<> VkHandle<VkCommandPool>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyCommandPool(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   36:     template<> VkHandle<VkSemaphore>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroySemaphore(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   37:     template<> VkHandle<VkSampler>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE && gpDevice) vkDestroySampler(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   38:     template<> VkHandle<VkDescriptorSetLayout>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyDescriptorSetLayout(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   39:     template<> VkHandle<VkPipeline>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyPipeline(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   40:     template<> VkHandle<VkShaderModule>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyShaderModule(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   41:     template<> VkHandle<VkPipelineLayout>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyPipelineLayout(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   42:     template<> VkHandle<VkDescriptorPool>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyDescriptorPool(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   43:     template<> VkHandle<VkQueryPool>::~VkHandle() { if (mApiHandle != VK_NULL_HANDLE && gpDevice) vkDestroyQueryPool(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   44  \n   45      VkDeviceData::~VkDeviceData()\n   ..\n   63              {\n   64              case VkResourceType::Image:\n   65:                 vkDestroyImage(gpDevice->getApiHandle(), mImage, nullptr);\n   66                  break;\n   67              case VkResourceType::Buffer:\n   68:                 vkDestroyBuffer(gpDevice->getApiHandle(), mBuffer, nullptr);\n   69                  break;\n   70              default:\n   71                  should_not_get_here();\n   72              }\n   73:             vkFreeMemory(gpDevice->getApiHandle(), mDeviceMem, nullptr);\n   74          }\n   75      }\n   ..\n   82          {\n   83          case VkResourceType::Image:\n   84:             vkDestroyImageView(gpDevice->getApiHandle(), mImage, nullptr);\n   85              break;\n   86          case VkResourceType::Buffer:\n   87:             vkDestroyBufferView(gpDevice->getApiHandle(), mBuffer, nullptr);\n   88              break;\n   89          default:\n   ..\n   94      VkFbo::~VkFbo()\n   95      {\n   96:         vkDestroyRenderPass(gpDevice->getApiHandle(), mVkRenderPass, nullptr);\n   97:         vkDestroyFramebuffer(gpDevice->getApiHandle(), mVkFbo, nullptr);\n   98      }\n   99  \n  100      VkRootSignature::~VkRootSignature()\n  101      {\n  102:         vkDestroyPipelineLayout(gpDevice->getApiHandle(), mApiHandle, nullptr);\n  103          for (auto& s : mSets)\n  104          {\n  105:             vkDestroyDescriptorSetLayout(gpDevice->getApiHandle(), s, nullptr);\n  106          }\n  107      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKSmartHandle.h:\n   30  namespace Falcor\n   31  {\n   32:     class VkBaseApiHandle : public std::enable_shared_from_this<VkBaseApiHandle>\n   33      {\n   34      public:\n   35:         using SharedPtr = std::shared_ptr<VkBaseApiHandle>;\n   36:         virtual ~VkBaseApiHandle() = default;\n   37      };\n   38  \n   39:     template<typename ApiHandle>\n   40:     class VkHandle : public VkBaseApiHandle, public inherit_shared_from_this<VkBaseApiHandle, VkHandle<ApiHandle>>\n   41      {\n   42      public:\n   43:         class SharedPtr : public std::shared_ptr<VkHandle<ApiHandle>>\n   44          {\n   45          public:\n   46              SharedPtr() = default;\n   47:             SharedPtr(VkHandle<ApiHandle>* pHandle) : std::shared_ptr<VkHandle<ApiHandle>>(pHandle) {}\n   48:             static SharedPtr create(ApiHandle handle) { return SharedPtr(new VkHandle(handle)); }\n   49:             operator ApiHandle() const { return get()->mApiHandle; }\n   50          private:\n   51:             VkHandle<ApiHandle>* get() const { return std::shared_ptr< VkHandle<ApiHandle>>::get(); }\n   52          };\n   53  \n   ..\n   60      private:\n   61          friend class SharedPtr;\n   62:         VkHandle(const ApiHandle& apiHandle) : mApiHandle(apiHandle) {}\n   63:         ApiHandle mApiHandle;\n   64      };\n   65  \n   66:     class VkRootSignature : public VkBaseApiHandle, public inherit_shared_from_this<VkBaseApiHandle, VkRootSignature>\n   67      {\n   68      public:\n   ..\n   73              SharedPtr(VkRootSignature* pHandle) : std::shared_ptr<VkRootSignature>(pHandle) {}\n   74              static SharedPtr create(VkPipelineLayout layout, const std::vector<VkDescriptorSetLayout>& sets) { return SharedPtr(new VkRootSignature(layout, sets)); }\n   75:             operator VkPipelineLayout() const { return get()->mApiHandle; }\n   76          private:\n   77              VkRootSignature* get() const { return std::shared_ptr<VkRootSignature>::get(); }\n   ..\n   81      private:\n   82          friend class SharedPtr;\n   83:         VkRootSignature(VkPipelineLayout layout, const std::vector<VkDescriptorSetLayout>& sets) : mApiHandle(layout), mSets(sets) {}\n   84:         VkPipelineLayout mApiHandle;\n   85          std::vector<VkDescriptorSetLayout> mSets;\n   86      };\n   87      \n   88:     class VkDeviceData : public VkBaseApiHandle, public inherit_shared_from_this<VkBaseApiHandle, VkDeviceData>\n   89      {\n   90      public:\n   ..\n  127  \n  128      template<typename ImageType, typename BufferType>\n  129:     class VkResource : public VkBaseApiHandle, public inherit_shared_from_this<VkBaseApiHandle, VkResource<ImageType, BufferType>>\n  130      {\n  131      public:\n  ...\n  163      };\n  164  \n  165:     class VkFbo : public VkBaseApiHandle\n  166      {\n  167      public:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKState.cpp:\n   75                  info.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;\n   76                  info.stage = getVkShaderStage(type);\n   77:                 info.module = pShader->getApiHandle();\n   78                  info.pName = \"main\";\n   79                  infosOut.push_back(info);\n   ..\n   97                  info.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;\n   98                  info.stage = getVkShaderStage(type);\n   99:                 info.module = pShader->getApiHandle();\n  100                  info.pName = \"main\";\n  101                  infosOut.push_back(info);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n   42      {\n   43          // #VKTODO the `if` is here because of the black texture in VkResourceView.cpp\n   44:         if(gpDevice )gpDevice->releaseResource(std::static_pointer_cast<VkBaseApiHandle>(mApiHandle));\n   45      }\n   46  \n   ..\n  121      {\n  122          VkFormatProperties p;\n  123:         vkGetPhysicalDeviceFormatProperties(gpDevice->getApiHandle(), format, &p);\n  124          auto featureBits = getFormatFeatureBitsFromUsage(usage);\n  125          if((p.optimalTilingFeatures & featureBits) == featureBits) return VK_IMAGE_TILING_OPTIMAL;\n  ...\n  158  \n  159          VkImage image;\n  160:         auto result = vkCreateImage(gpDevice->getApiHandle(), &imageInfo, nullptr, &image);\n  161          if (VK_FAILED(result))\n  162          {\n  ...\n  170          // Allocate the GPU memory\n  171          VkMemoryRequirements memRequirements;\n  172:         vkGetImageMemoryRequirements(gpDevice->getApiHandle(), image, &memRequirements);\n  173          VkDeviceMemory deviceMem = allocateDeviceMemory(Device::MemoryType::Default, memRequirements.memoryTypeBits, memRequirements.size);\n  174:         vkBindImageMemory(gpDevice->getApiHandle(), image, deviceMem, 0);\n  175:         mApiHandle = ApiHandle::create(image, deviceMem);\n  176          if (pData != nullptr)\n  177          {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKVao.cpp:\n   31  namespace Falcor\n   32  {\n   33:     const VaoHandle& Vao::getApiHandle() const\n   34      {\n   35:         return mApiHandle;\n   36      }\n   37  }\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVersion.h:\n  192              const std::string& name = \"\");\n  193  \n  194:         ProgramHandle mApiHandle = ProgramHandle();\n  195          const std::string mName;\n  196  \n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n  288  #ifdef _WIN32\n  289          // Set the icon\n  290:         setWindowIcon(\"Framework\\\\Nvidia.ico\", mpWindow->getApiHandle());\n  291  \n  292          if (argc == 0 || argv == nullptr)\n\n/home/max/dev/Falcor/src/Falcor/Core/State/GraphicsState.cpp:\n   99              mDesc.setFboFormats(mpFbo ? mpFbo->getDesc() : Fbo::Desc());\n  100  #ifdef FALCOR_VK\n  101:             mDesc.setRenderPass(mpFbo ? (VkRenderPass)mpFbo->getApiHandle() : VK_NULL_HANDLE);\n  102  #endif\n  103              mDesc.setVertexLayout(mpVao->getVertexLayout());\n\n/home/max/dev/Falcor/src/Falcor/Core/Window.cpp:\n  427          pWindow->mpGLFWWindow = pGLFWWindow;\n  428  #ifdef _WIN32\n  429:         pWindow->mApiHandle = glfwGetWin32Window(pGLFWWindow);\n  430:         assert(pWindow->mApiHandle);\n  431  #else\n  432:         pWindow->mApiHandle.pDisplay = glfwGetX11Display();\n  433:         pWindow->mApiHandle.window = glfwGetX11Window(pGLFWWindow);\n  434:         assert(pWindow->mApiHandle.pDisplay != nullptr);\n  435  #endif\n  436:         setMainWindowHandle(pWindow->mApiHandle);\n  437  \n  438          pWindow->updateWindowSize();\n\n/home/max/dev/Falcor/src/Falcor/Core/Window.h:\n   39          using SharedPtr = std::shared_ptr<Window>;\n   40          using SharedConstPtr = std::shared_ptr<const Window>;\n   41:         using ApiHandle = WindowHandle;\n   42  \n   43          /** Window mode\n   ..\n  113          /** Get the native window handle\n  114          */\n  115:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n  116  \n  117          /** Get the width of the window's client area\n  ...\n  131          Desc mDesc;\n  132          GLFWwindow* mpGLFWWindow;\n  133:         ApiHandle mApiHandle;\n  134          float2 mMouseScale;\n  135          const float2& getMouseScale() const { return mMouseScale; }\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtStateObject.cpp:\n   78                      if (intersectionExport.size())\n   79                      {\n   80:                         rtsoHelper.addLocalRootSignature(&intersectionExport, 1, pEntryPointGroup->getLocalRootSignature()->getApiHandle().GetInterfacePtr());\n   81                          rtsoHelper.addShaderConfig(&intersectionExport, 1, pEntryPointGroup->getMaxPayloadSize(), pEntryPointGroup->getMaxAttributesSize());\n   82                      }\n   ..\n   84                      if (ahsExport.size())\n   85                      {\n   86:                         rtsoHelper.addLocalRootSignature(&ahsExport, 1, pEntryPointGroup->getLocalRootSignature()->getApiHandle().GetInterfacePtr());\n   87                          rtsoHelper.addShaderConfig(&ahsExport, 1, pEntryPointGroup->getMaxPayloadSize(), pEntryPointGroup->getMaxAttributesSize());\n   88                      }\n   ..\n   90                      if (chsExport.size())\n   91                      {\n   92:                         rtsoHelper.addLocalRootSignature(&chsExport, 1, pEntryPointGroup->getLocalRootSignature()->getApiHandle().GetInterfacePtr());\n   93                          rtsoHelper.addShaderConfig(&chsExport, 1, pEntryPointGroup->getMaxPayloadSize(), pEntryPointGroup->getMaxAttributesSize());\n   94                      }\n   ..\n  105  \n  106                      // Root signature\n  107:                     rtsoHelper.addLocalRootSignature(&exportName, 1, pEntryPointGroup->getLocalRootSignature()->getApiHandle().GetInterfacePtr());\n  108                      // Payload size\n  109                      rtsoHelper.addShaderConfig(&exportName, 1, pEntryPointGroup->getMaxPayloadSize(), pEntryPointGroup->getMaxAttributesSize());\n  ...\n  115          // Add an empty global root-signature\n  116          RootSignature* pRootSig = desc.mpGlobalRootSignature ? desc.mpGlobalRootSignature.get() : RootSignature::getEmpty().get();\n  117:         rtsoHelper.addGlobalRootSignature(pRootSig->getApiHandle());\n  118  \n  119          // Create the state\n  120          D3D12_STATE_OBJECT_DESC objectDesc = rtsoHelper.getDesc();\n  121:         GET_COM_INTERFACE(gpDevice->getApiHandle(), ID3D12Device5, pDevice5);\n  122:         d3d_call(pDevice5->CreateStateObject(&objectDesc, IID_PPV_ARGS(&pState->mApiHandle)));\n  123  \n  124          MAKE_SMART_COM_PTR(ID3D12StateObjectProperties);\n  125:         ID3D12StateObjectPropertiesPtr pRtsoProps = pState->getApiHandle();\n  126  \n  127          for( const auto& pBaseEntryPointGroup : pKernels->getUniqueEntryPointGroups() )\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtStateObject.h:\n   35          using SharedPtr = std::shared_ptr<RtStateObject>;\n   36          using SharedConstPtr = std::shared_ptr<const RtStateObject>;\n   37:         using ApiHandle = ID3D12StateObjectPtr;\n   38  \n   39          class dlldecl Desc\n   ..\n   55  \n   56          static SharedPtr create(const Desc& desc);\n   57:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n   58  \n   59          const ProgramKernels::SharedConstPtr& getKernels() const { return mDesc.mpKernels; };\n   ..\n   66      private:\n   67          RtStateObject(const Desc& d) : mDesc(d) {}\n   68:         ApiHandle mApiHandle;\n   69  \n   70          std::vector<void const*> mShaderIdentifiers;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n  884              if (blas.pBlas == nullptr)\n  885              {\n  886:                 GET_COM_INTERFACE(gpDevice->getApiHandle(), ID3D12Device5, pDevice5);\n  887                  pDevice5->GetRaytracingAccelerationStructurePrebuildInfo(&inputs, &blas.prebuildInfo);\n  888  \n  ...\n 1007          {\n 1008              // Prebuild\n 1009:             GET_COM_INTERFACE(gpDevice->getApiHandle(), ID3D12Device5, pDevice5);\n 1010              pDevice5->GetRaytracingAccelerationStructurePrebuildInfo(&inputs, &mTlasPrebuildInfo);\n 1011              mpTlasScratch = Buffer::create(mTlasPrebuildInfo.ScratchDataSizeInBytes, Buffer::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n ....\n 1036          }\n 1037  \n 1038:         assert((inputs.NumDescs != 0) && tlas.pInstanceDescs->getApiHandle() && tlas.pTlas->getApiHandle() && mpTlasScratch->getApiHandle());\n 1039  \n 1040          asDesc.Inputs.InstanceDescs = tlas.pInstanceDescs->getGpuAddress();\n ....\n 1062              layout.addRange(DescriptorSet::Type::TextureSrv, 0, 1);\n 1063              DescriptorSet::SharedPtr pSet = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n 1064:             gpDevice->getApiHandle()->CreateShaderResourceView(nullptr, &srvDesc, pSet->getCpuHandle(0));\n 1065  \n 1066              ResourceWeakPtr pWeak = tlas.pTlas;\n\n/home/max/dev/Falcor/src/Falcor/Utils/Image/Bitmap.cpp:\n   38      {\n   39          VkFormatProperties p;\n   40:         vkGetPhysicalDeviceFormatProperties(gpDevice->getApiHandle(), VK_FORMAT_R32G32B32_SFLOAT, &p);\n   41          return p.optimalTilingFeatures != 0;\n   42      }\n\n/home/max/dev/Falcor/src/Samples/CudaInterop/FalcorCUDA.cpp:\n  151      bool importTextureToMipmappedArray(Falcor::Texture::SharedPtr pTex, cudaMipmappedArray_t & mipmappedArray, uint32_t cudaUsageFlags)\n  152      {\n  153:         HANDLE sharedHandle = pTex->createSharedApiHandle();\n  154          if (sharedHandle == NULL)\n  155          {\n\n618 matches across 90 files\n\n\nSearching 742 files for \"111\" (case sensitive)\n\n/home/max/dev/Falcor/src/Externals/xoshiro/splitmix64.c:\n   24  \tuint64_t z = (x += 0x9e3779b97f4a7c15);\n   25  \tz = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9;\n   26: \tz = (z ^ (z >> 27)) * 0x94d049bb133111eb;\n   27  \treturn z ^ (z >> 31);\n   28  }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n   69              .setDescCount(DescriptorPool::Type::RawBufferUav, 2 * 1024);\n   70  #endif\n   71:         printf(\"111\\n\");\n   72          mpFrameFence = GpuFence::create();\n   73          mpGpuDescPool = DescriptorPool::create(poolDesc, mpFrameFence);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/TextureLoader.cpp:\n  437          case 110:\n  438              return FORMAT_R16G16B16A16_SNORM;\n  439:         case 111:\n  440              return FORMAT_R16_FLOAT;\n  441          case 112:\n\n/home/max/dev/Falcor/src/Falcor/Data/Framework/Nvidia.ico:\n    <binary>\n\n/home/max/dev/Falcor/src/Falcor/Utils/Image/DXHeader.h:\n  154          FORMAT_Y216                        = 109,\n  155          FORMAT_NV11                        = 110,\n  156:         FORMAT_AI44                        = 111,\n  157          FORMAT_IA44                        = 112,\n  158          FORMAT_P8                          = 113,\n\n/home/max/dev/Falcor/src/Falcor/Utils/Sampling/Pseudorandom/SplitMix64.slang:\n   56      uint64_t z = (rng.state += 0x9E3779B97F4A7C15ull);\n   57      z = (z ^ (z >> 30)) * 0xBF58476D1CE4E5B9ull;\n   58:     z = (z ^ (z >> 27)) * 0x94D049BB133111EBull;\n   59      return z ^ (z >> 31);\n   60  }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/HalfUtilsTests.cpp:\n   37      1 sign bit, 5 exponent bits, 10 mantissa bits.\n   38  \n   39:     If exponent is 11111: mantissa==0 is +-inf, mantissa!=0 it's NaN.\n   40      If exponent is 00000: mantissa==0 it's +-0, mantissa!=0 it's a denorm with exponent 2^-14.\n   41      Else normalized numbers with exponent offset by 15: value = sign x 2^(exp-15) x 1.mantissa.\n   ..\n  119              {\n  120                  float a = 0x1.0040p0f; // 1.0000 0000 01 00 0000 = 1 +  64/65536 (exactly representable)\n  121:                 float b = 0x1.005fp0f; // 1.0000 0000 01 01 1111 = 1 +  95/65536 (slightly under)\n  122                  float c = 0x1.0060p0f; // 1.0000 0000 01 10 0000 = 1 +  96/65536 (half-way)\n  123                  float d = 0x1.0061p0f; // 1.0000 0000 01 10 0001 = 1 +  97/65536 (slightly over)\n  ...\n  139              {\n  140                  float a = 0x1.0080p0f; // 1.0000 0000 1000 0000 = 1 + 128/65536 (exactly representable)\n  141:                 float b = 0x1.00dfp0f; // 1.0000 0000 1001 1111 = 1 + 223/65536 (slightly under)\n  142:                 float c = 0x1.00e0p0f; // 1.0000 0000 1110 0000 = 1 + 224/65536 (half-way)\n  143:                 float d = 0x1.00e1p0f; // 1.0000 0000 1110 0001 = 1 + 225/65536 (slightly over)\n  144                  float e = 0x1.0100p0f; // 1.0000 0001 0000 0000 = 1 + 256/65536 (exactly representable)\n  145  \n\n19 matches across 7 files\n\n\nSearching 742 files for \"printf(\"11\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n   69              .setDescCount(DescriptorPool::Type::RawBufferUav, 2 * 1024);\n   70  #endif\n   71:         printf(\"111\\n\");\n   72          mpFrameFence = GpuFence::create();\n   73          mpGpuDescPool = DescriptorPool::create(poolDesc, mpFrameFence);\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  665              if (!values.empty()) Logger::setLogFilePath(values.front().asString());\n  666          }\n  667:         printf(\"11\\n\");\n  668          Sample::run(config, pRenderer, argc, argv);\n  669          printf(\"22\\n\");\n\n2 matches across 2 files\n\n\nSearching 742 files for \"createViewCommon\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  111      }\n  112  \n  113:     VkResource<VkImageView, VkBufferView>::SharedPtr createViewCommon(const Resource::SharedConstPtr& pSharedPtr, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  114      {\n  115:         printf(\"createViewCommon\\n\");\n  116  \n  117          const Resource* pResource = pSharedPtr.get();\n  ...\n  122              case VkResourceType::Image:\n  123              {\n  124:                 printf(\"createViewCommon-0\\n\");\n  125                  VkImageViewCreateInfo info = initializeImageViewInfo((const Texture*)pResource, mostDetailedMip, mipCount, firstArraySlice, arraySize);\n  126:                 printf(\"createViewCommon-0-0\\n\");\n  127                  VkImageView imageView;\n  128                  vk_call(vkCreateImageView(gpDevice->getApiHandle(), &info, nullptr, &imageView));\n  129:                 printf(\"createViewCommon-0-1\\n\");\n  130                  return VkResource<VkImageView, VkBufferView>::SharedPtr::create(imageView, nullptr);\n  131              }\n  ...\n  133              case VkResourceType::Buffer:\n  134              {\n  135:                 printf(\"createViewCommon-1\\n\");\n  136                  // We only create views for TypedBuffers\n  137                  VkBufferView bufferView = {};\n  ...\n  146  \n  147              default:\n  148:                 printf(\"createViewCommon-2\\n\");\n  149                  should_not_get_here();\n  150                  return VkResource<VkImageView, VkBufferView>::SharedPtr();\n  ...\n  170          }\n  171  \n  172:         auto view = createViewCommon(pSharedPtr, mostDetailedMip, mipCount, firstArraySlice, arraySize);\n  173          return SharedPtr(new ShaderResourceView(pResource, view, mostDetailedMip, mipCount, firstArraySlice, arraySize));\n  174      }\n  ...\n  227          //gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  228          printf(\"DepthStencilView::create 0\\n\");\n  229:         auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  230          if (!view) {\n  231:             printf(\"ERROR createViewCommon is NULL\\n\");\n  232          } else {\n  233:             printf(\"OK createViewCommon\\n\");\n  234          }\n  235          printf(\"DepthStencilView::create 1\\n\");\n  ...\n  254          }\n  255  \n  256:         auto view = createViewCommon(pSharedPtr, mipLevel, 1, firstArraySlice, arraySize);\n  257          return SharedPtr(new DepthStencilView(pResource, view, mipLevel, firstArraySlice, arraySize));\n  258      }\n  ...\n  274          }\n  275  \n  276:         auto view = createViewCommon(pSharedPtr, mipLevel, 1, firstArraySlice, arraySize);\n  277          return SharedPtr(new UnorderedAccessView(pResource, view, mipLevel, firstArraySlice, arraySize));\n  278      }\n  ...\n  330  \n  331              // Create view\n  332:             auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  333          }\n  334  \n  ...\n  356  \n  357          // Create view\n  358:         auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  359          return SharedPtr(new RenderTargetView(pTexture, view, mipLevel, firstArraySlice, arraySize));\n  360  \n\n15 matches in 1 file\n\n\nSearching 742 files for \"printf(\"222\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n   74          poolDesc.setShaderVisible(false).setDescCount(DescriptorPool::Type::Rtv, 16 * 1024).setDescCount(DescriptorPool::Type::Dsv, 1024);\n   75          mpCpuDescPool = DescriptorPool::create(poolDesc, mpFrameFence);\n   76:         printf(\"222\\n\");\n   77          mpUploadHeap = GpuMemoryHeap::create(GpuMemoryHeap::Type::Upload, 1024 * 1024 * 2, mpFrameFence);\n   78:         printf(\"222-1\\n\");\n   79          mpRenderContext = RenderContext::create(mCmdQueues[(uint32_t)LowLevelContextData::CommandQueueType::Direct][0]);\n   80:         printf(\"222-2\\n\");\n   81          createNullViews();\n   82:         printf(\"222-3\\n\");\n   83          //mpRenderContext = RenderContext::create(mCmdQueues[(uint32_t)LowLevelContextData::CommandQueueType::Direct][0]);\n   84          printf(\"333\\n\");\n\n4 matches in 1 file\n\n\nSearching 743 files for \"printf(\"222\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n   74          poolDesc.setShaderVisible(false).setDescCount(DescriptorPool::Type::Rtv, 16 * 1024).setDescCount(DescriptorPool::Type::Dsv, 1024);\n   75          mpCpuDescPool = DescriptorPool::create(poolDesc, mpFrameFence);\n   76:         printf(\"222\\n\");\n   77          mpUploadHeap = GpuMemoryHeap::create(GpuMemoryHeap::Type::Upload, 1024 * 1024 * 2, mpFrameFence);\n   78:         printf(\"222-1\\n\");\n   79          mpRenderContext = RenderContext::create(mCmdQueues[(uint32_t)LowLevelContextData::CommandQueueType::Direct][0]);\n   80:         printf(\"222-2\\n\");\n   81          createNullViews();\n   82:         printf(\"222-3\\n\");\n   83          //mpRenderContext = RenderContext::create(mCmdQueues[(uint32_t)LowLevelContextData::CommandQueueType::Direct][0]);\n   84          printf(\"333\\n\");\n\n4 matches in 1 file\n\n\nSearching 743 files for \"createBlackTexture\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n   43      }\n   44  \n   45:     Texture::SharedPtr createBlackTexture()\n   46      {\n   47:         printf(\"Texture::SharedPtr createBlackTexture\\n\");\n   48          uint8_t blackPixel[4] = { 0 };\n   49          return Texture::create2D(1, 1, ResourceFormat::RGBA8Unorm, 1, 1, blackPixel, Resource::BindFlags::ShaderResource | Resource::BindFlags::RenderTarget | Resource::BindFlags::UnorderedAccess);\n   ..\n   52      ResourceWeakPtr getEmptyTexture()\n   53      {\n   54:         static Texture::SharedPtr sBlackTexture = createBlackTexture();\n   55          return sBlackTexture;\n   56      }\n\n3 matches in 1 file\n\n\nSearching 743 files for \"sBlackTexture\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n   52      ResourceWeakPtr getEmptyTexture()\n   53      {\n   54:         static Texture::SharedPtr sBlackTexture = createBlackTexture();\n   55:         return sBlackTexture;\n   56      }\n   57  \n\n2 matches in 1 file\n\n\nSearching 743 files for \"printf(\"Exe\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Linux/Linux.cpp:\n  240              path = p.parent_path().string().c_str();\n  241          }\n  242:         printf(\"Executable dir is: %s\\n\", path.c_str());\n  243          static std::string strpath(path);\n  244          return strpath;\n  ...\n  266      {\n  267          static std::string filename = fs::path(program_invocation_name).filename().string();\n  268:         printf(\"Executable filename: %s\\n\", filename.c_str());\n  269          return filename;\n  270      }\n\n2 matches in 1 file\n\n\nSearching 743 files for \"bad_weak_ptr\" (case sensitive)\n\n0 matches\n\nSearching 743 files for \"ConstTextureSharedPtrRef\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  281      }\n  282  \n  283:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  284      {\n  285          if (!pTexture && getNullView()) return getNullView();\n  ...\n  327      }\n  328  \n  329:     DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  330      {\n  331          if (!pTexture && getNullView()) return getNullView();\n  ...\n  362      }\n  363  \n  364:     UnorderedAccessView::SharedPtr UnorderedAccessView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  365      {\n  366          if (!pTexture && getNullView()) return getNullView();\n  ...\n  414      RenderTargetView::~RenderTargetView() = default;\n  415  \n  416:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  417      {\n  418          if (!pTexture && getNullView()) return getNullView();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n   35      class Buffer;\n   36      using ResourceWeakPtr = std::weak_ptr<Resource>;\n   37:     using ConstTextureSharedPtrRef = const std::shared_ptr<Texture>&;\n   38      using ConstBufferSharedPtrRef = const std::shared_ptr<Buffer>&;\n   39  \n   ..\n  109          using SharedConstPtr = std::shared_ptr<const ShaderResourceView>;\n  110  \n  111:         static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize);\n  112          static SharedPtr create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount);\n  113          static SharedPtr getNullView();\n  ...\n  128          using SharedConstPtr = std::shared_ptr<const DepthStencilView>;\n  129  \n  130:         static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  131          static SharedPtr getNullView();\n  132      private:\n  ...\n  141          using SharedConstPtr = std::shared_ptr<const UnorderedAccessView>;\n  142  \n  143:         static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  144          static SharedPtr create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount);\n  145          static SharedPtr getNullView();\n  ...\n  157          using SharedPtr = std::shared_ptr<RenderTargetView>;\n  158          using SharedConstPtr = std::shared_ptr<const RenderTargetView>;\n  159:         static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  160          static SharedPtr getNullView();\n  161          ~RenderTargetView();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  154  \n  155      // based on D3D code\n  156:     ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  157      {\n  158          if (!pTexture && getNullView()) return getNullView();\n  ...\n  201      }\n  202      // based on D3D code\n  203:     DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  204      {\n  205          printf(\"DepthStencilView::create\\n\");\n  ...\n  264      */\n  265      // based on D3D code\n  266:     UnorderedAccessView::SharedPtr UnorderedAccessView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  267      {\n  268          if (!pTexture && getNullView()) return getNullView();\n  ...\n  319      // based on D3D code\n  320      /*\n  321:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  322      {\n  323          printf(\"RenderTargetView::create\\n\");\n  ...\n  342      */\n  343  \n  344:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  345      {\n  346          printf(\"RenderTargetView::create\\n\");\n\n14 matches across 3 files\n\n\nSearching 743 files for \"createCommonView\" (case sensitive)\n\n0 matches\n\nSearching 743 files for \"createViewCommon\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  114  \n  115      // SharedConstPtr = std::shared_ptr<const Resource>;\n  116:     VkResource<VkImageView, VkBufferView>::SharedPtr createViewCommon(const Resource::SharedConstPtr& pSharedPtr, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  117      {\n  118          return nullptr;\n  ...\n  157  \n  158          //Resource::ApiHandle resHandle = pTexture->getApiHandle();\n  159:         auto view = createViewCommon(pTexture, mostDetailedMip, mipCount, firstArraySlice, arraySize);\n  160          return SharedPtr(new ShaderResourceView(pTexture, view, mostDetailedMip, mipCount, firstArraySlice, arraySize));\n  161      }\n  ...\n  185          }\n  186  \n  187:         auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  188          return SharedPtr(new DepthStencilView(pTexture, view, mipLevel, firstArraySlice, arraySize));\n  189      }\n  ...\n  198          }\n  199  \n  200:         auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  201          return SharedPtr(new UnorderedAccessView(pTexture, view, mipLevel, firstArraySlice, arraySize));\n  202      }\n  ...\n  234  \n  235              // Create view\n  236:             auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  237          }\n  238  \n  ...\n  253  \n  254          // Create view\n  255:         auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  256          return SharedPtr(new RenderTargetView(pTexture, view, mipLevel, firstArraySlice, arraySize));\n  257      }\n\n6 matches in 1 file\n\n\nSearching 743 files for \"gRTV-1\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n  149          if (rt.pTexture)\n  150          {   \n  151:             printf(\"gRTV-1\\n\");\n  152              if(!rt.pTexture){\n  153                  printf(\"ERROR rt.pTexture is NULL\\n\");\n\n1 match in 1 file\n\n\nSearching 743 files for \"RenderTargetView\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Fbo.cpp:\n  103      void Fbo::initApiHandle() const {}\n  104  \n  105:     RenderTargetView::SharedPtr Fbo::getRenderTargetView(uint32_t rtIndex) const\n  106      {\n  107          const auto& rt = mColorAttachments[rtIndex];\n  ...\n  112          else\n  113          {\n  114:             return RenderTargetView::getNullView();\n  115          }\n  116      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  138      }\n  139  \n  140:     void RenderContext::clearRtv(const RenderTargetView* pRtv, const float4& color)\n  141      {\n  142          resourceBarrier(pRtv->getResource(), Resource::State::RenderTarget);\n  143:         mpLowLevelData->getCommandList()->ClearRenderTargetView(pRtv->getApiHandle()->getCpuHandle(0), glm::value_ptr(color), 0, nullptr);\n  144          mCommandsPending = true;\n  145      }\n  ...\n  193          // We are setting the entire RTV array to make sure everything that was previously bound is detached\n  194          uint32_t colorTargets = Fbo::getMaxColorTargetCount();\n  195:         auto pNullRtv = RenderTargetView::getNullView();\n  196          std::vector<HeapCpuHandle> pRTV(colorTargets, pNullRtv->getApiHandle()->getCpuHandle(0));\n  197          HeapCpuHandle pDSV = DepthStencilView::getNullView()->getApiHandle()->getCpuHandle(0);\n  ...\n  204                  if (pTexture)\n  205                  {\n  206:                     pRTV[i] = pFbo->getRenderTargetView(i)->getApiHandle()->getCpuHandle(0);\n  207                      pCtx->resourceBarrier(pTexture.get(), Resource::State::RenderTarget);\n  208                  }\n  ...\n  416      }\n  417  \n  418:     void RenderContext::blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect, const uint4& dstRect, Sampler::Filter filter)\n  419      {\n  420          auto& blitData = sApiData.blitData;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  412      }\n  413  \n  414:     RenderTargetView::~RenderTargetView() = default;\n  415  \n  416:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  417      {\n  418          if (!pTexture && getNullView()) return getNullView();\n  ...\n  435          layout.addRange(DescriptorSet::Type::Rtv, 0, 1);\n  436          ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  437:         gpDevice->getApiHandle()->CreateRenderTargetView(resHandle, &desc, handle->getCpuHandle(0));\n  438  \n  439:         SharedPtr pObj = SharedPtr(new RenderTargetView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  440          return pObj;\n  441      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/FBO.h:\n  216          /** Get a render target view to a color target.\n  217          */\n  218:         RenderTargetView::SharedPtr getRenderTargetView(uint32_t rtIndex) const;\n  219  \n  220          struct SamplePosition\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp:\n   53                  if (pFbo->getColorTexture(i))\n   54                  {\n   55:                     clearRtv(pFbo->getRenderTargetView(i).get(), color);\n   56                  }\n   57              }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n   90              \\param[in] color The clear color\n   91          */\n   92:         void clearRtv(const RenderTargetView* pRtv, const float4& color);\n   93  \n   94          /** Clear a depth-stencil view.\n   ..\n  162              \\param[in] dstRect Target rectangle to blit to, specified by [left, up, right, down]\n  163          */\n  164:         void blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect = uint4(-1), const uint4& dstRect = uint4(-1), Sampler::Filter = Sampler::Filter::Linear);\n  165  \n  166          /** Submit the command list\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n   90          /** Default value used in create*() methods\n   91          */\n   92:         static const uint32_t kMaxPossible = RenderTargetView::kMaxPossible;\n   93  \n   94          virtual ~Resource() = 0;\n   ..\n  185  \n  186          mutable std::unordered_map<ResourceViewInfo, ShaderResourceView::SharedPtr, ViewInfoHashFunc> mSrvs;\n  187:         mutable std::unordered_map<ResourceViewInfo, RenderTargetView::SharedPtr, ViewInfoHashFunc> mRtvs;\n  188          mutable std::unordered_map<ResourceViewInfo, DepthStencilView::SharedPtr, ViewInfoHashFunc> mDsvs;\n  189          mutable std::unordered_map<ResourceViewInfo, UnorderedAccessView::SharedPtr, ViewInfoHashFunc> mUavs;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.cpp:\n   49          gNullViews.uav = UnorderedAccessView::create(createBlackTexture(), 0, 0, 1);\n   50          LOG_DBG(\"create rtv\");\n   51:         //gNullViews.rtv = RenderTargetView::create(getEmptyTexture(), 0, 0, 1);\n   52:         gNullViews.rtv = RenderTargetView::create(createBlackTexture(), 0, 0, 1);\n   53          LOG_DBG(\"create cbv\");\n   54          gNullViews.cbv = ConstantBufferView::create(Buffer::SharedPtr());\n   ..\n   63      DepthStencilView::SharedPtr    DepthStencilView::getNullView()    { return gNullViews.dsv; }\n   64      UnorderedAccessView::SharedPtr UnorderedAccessView::getNullView() { return gNullViews.uav; }\n   65:     RenderTargetView::SharedPtr    RenderTargetView::getNullView()    { return gNullViews.rtv; }\n   66      ConstantBufferView::SharedPtr  ConstantBufferView::getNullView()  { return gNullViews.cbv; }\n   67  \n   ..\n   69      {\n   70          m.regClass(ShaderResourceView);\n   71:         m.regClass(RenderTargetView);\n   72          m.regClass(UnorderedAccessView);\n   73          m.regClass(ConstantBufferView);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  152      };\n  153  \n  154:     class dlldecl RenderTargetView : public ResourceView<RtvHandle>\n  155      {\n  156      public:\n  157:         using SharedPtr = std::shared_ptr<RenderTargetView>;\n  158:         using SharedConstPtr = std::shared_ptr<const RenderTargetView>;\n  159          static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  160          static SharedPtr getNullView();\n  161:         ~RenderTargetView();\n  162      private:\n  163:         RenderTargetView(ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  164              ResourceView(pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  165      };\n  ...\n  182          ShaderResourceView::SharedPtr srv;\n  183          ConstantBufferView::SharedPtr cbv;\n  184:         RenderTargetView::SharedPtr   rtv;\n  185          UnorderedAccessView::SharedPtr uav;\n  186          DepthStencilView::SharedPtr dsv;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  227      }\n  228  \n  229:     RenderTargetView::SharedPtr Texture::getRTV(uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  230      {\n  231          auto createFunc = [](Texture* pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  232          {\n  233:             return RenderTargetView::create(pTexture->shared_from_this(), mostDetailedMip, firstArraySlice, arraySize);\n  234          };\n  235  \n  236:         auto result = findViewCommon<RenderTargetView>(this, mipLevel, 1, firstArraySlice, arraySize, mRtvs, createFunc);\n  237          if(!result) {\n  238:             LOG_ERR(\"ERROR findViewCommon<RenderTargetView> returned NULL\");\n  239          }\n  240  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.h:\n  196              \\param[in] arraySize The array size. If this is equal to Texture#kMaxPossible, will create a view ranging from firstArraySlice to the texture's array size\n  197          */\n  198:         RenderTargetView::SharedPtr getRTV(uint32_t mipLevel = 0, uint32_t firstArraySlice = 0, uint32_t arraySize = kMaxPossible);\n  199  \n  200          /** Get a depth stencil view.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n  107      }\n  108  \n  109:     template void clearColorImageCommon(CopyContext* pCtx, const RenderTargetView* pView, const float4& clearVal);\n  110  \n  111      void ComputeContext::clearUAV(const UnorderedAccessView* pUav, const float4& value)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   65              if(mColorAttachments[i].pTexture)\n   66              {\n   67:                 assert(arraySize == -1 || arraySize == getRenderTargetView(i)->getViewInfo().arraySize);\n   68:                 arraySize = getRenderTargetView(i)->getViewInfo().arraySize;\n   69                  LOG_DBG(\"arraySize: %u\", arraySize);\n   70:                 auto hndl = getRenderTargetView(i)->getApiHandle();\n   71                  LOG_DBG(\"handle ok\");\n   72:                 attachments[rtCount] = getRenderTargetView(i)->getApiHandle();\n   73                  LOG_DBG(\"attachments ok\");\n   74                  rtCount++;\n   ..\n  126      }\n  127  \n  128:     RenderTargetView::SharedPtr Fbo::getRenderTargetView(uint32_t rtIndex) const\n  129      {\n  130          printf(\"gRTV-0\\n\");\n  ...\n  138          {   \n  139              printf(\"gRTV-2\\n\");\n  140:             return RenderTargetView::getNullView();\n  141          }\n  142      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   48      void clearColorImageCommon(CopyContext* pCtx, const ViewType* pView, const ClearType& clearVal);\n   49  \n   50:     void RenderContext::clearRtv(const RenderTargetView* pRtv, const float4& color)\n   51      {\n   52          clearColorImageCommon(this, pRtv, color);\n   ..\n  289      }\n  290  \n  291:     void RenderContext::blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect, const uint4& dstRect, Sampler::Filter filter)\n  292      {\n  293          const Texture* pTexture = dynamic_cast<const Texture*>(pSrc->getResource());\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  211      }\n  212  \n  213:     RenderTargetView::~RenderTargetView()\n  214      {\n  215:         static std::vector<RenderTargetView::ApiHandle> hdl;\n  216          hdl.push_back(mApiHandle);\n  217      }\n  218      // based on D3D code\n  219      /*\n  220:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  221      {\n  222:         printf(\"RenderTargetView::create\\n\");\n  223          if (!pTexture && getNullView()) return getNullView();\n  224  \n  ...\n  229              if (pTexture->getApiHandle().getType() == VkResourceType::Buffer)\n  230              {\n  231:                 logWarning(\"Cannot create RenderTargetView from a buffer!\");\n  232                  return getNullView();\n  233              }\n  ...\n  241      */\n  242  \n  243:     RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  244      {\n  245          if (!pTexture && getNullView()) return getNullView();\n  ...\n  248          if (pTexture->getApiHandle().getType() == VkResourceType::Buffer)\n  249          {\n  250:             logWarning(\"Cannot create RenderTargetView from a buffer!\");\n  251              return getNullView();\n  252          }\n  ...\n  254          // Create view\n  255          auto view = createViewCommon(pTexture, mipLevel, 1, firstArraySlice, arraySize);\n  256:         return SharedPtr(new RenderTargetView(pTexture, view, mipLevel, firstArraySlice, arraySize));\n  257      }\n  258      \n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n   56          auto pCurrentFbo = mpTargetFBO;\n   57          mpTargetFBO = Fbo::create2D(width, height, pBackBufferFBO->getDesc());\n   58:         gpDevice->getRenderContext()->blit(pCurrentFbo->getColorTexture(0)->getSRV(), mpTargetFBO->getRenderTargetView(0));\n   59  \n   60          // Tell the GUI the swap-chain size changed\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.h:\n   95          void SOSetTargets(UINT StartSlot, UINT NumViews, const D3D12_STREAM_OUTPUT_BUFFER_VIEW *pViews) { should_not_get_here(); }\n   96          void ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, FLOAT Depth, UINT8 Stencil, UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   97:         void ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, const FLOAT ColorRGBA[ 4 ], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   98          void ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource *pResource, const FLOAT Values[4], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n   99          void ClearUnorderedAccessViewUint(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource *pResource, const UINT Values[4], UINT NumRects, const D3D12_RECT *pRects) { should_not_get_here(); }\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  567                  Texture::SharedPtr pOutTex = std::dynamic_pointer_cast<Texture>(pGraph->getOutput(mGraphs[mActiveGraph].mainOutput));\n  568                  assert(pOutTex);\n  569:                 pRenderContext->blit(pOutTex->getSRV(), pTargetFbo->getRenderTargetView(0));\n  570              }\n  571          }\n\n/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp:\n  154      for (uint32_t i = 1; i < 3; i++)\n  155      {\n  156:         const auto& pRtv = mpFbo->getRenderTargetView(i).get();\n  157          if (pRtv->getResource() != nullptr) pContext->clearRtv(pRtv, float4(0));\n  158      }\n\n/home/max/dev/Falcor/src/RenderPasses/SkyBox/SkyBox.cpp:\n  143      mpFbo->attachDepthStencilTarget(renderData[kDepth]->asTexture());\n  144  \n  145:     pRenderContext->clearRtv(mpFbo->getRenderTargetView(0).get(), float4(0));\n  146  \n  147      if (!mpScene) return;\n\n/home/max/dev/Falcor/src/RenderPasses/SVGFPass/SVGFPass.cpp:\n  380          if (i == std::min(mFeedbackTap, mFilterIterations - 1))\n  381          {\n  382:             pRenderContext->blit(curTargetFbo->getColorTexture(0)->getSRV(), mpFilteredPastFbo->getRenderTargetView(0));\n  383          }\n  384  \n  ...\n  388      if (mFeedbackTap < 0)\n  389      {\n  390:         pRenderContext->blit(mpCurReprojFbo->getColorTexture(0)->getSRV(), mpFilteredPastFbo->getRenderTargetView(0));\n  391      }\n  392  }\n\n/home/max/dev/Falcor/src/Samples/CudaInterop/CudaInterop.cpp:\n   64      uint32_t format = (getFormatType(mpInputTex->getFormat()) == FormatType::Float) ? cudaChannelFormatKindFloat : cudaChannelFormatKindUnsigned;\n   65      launchCopySurface(mInputSurf, mOutputSurf, mWidth, mHeight, format);\n   66:     pRenderContext->blit(mpOutputTex->getSRV(), pTargetFbo->getRenderTargetView(0));\n   67  }\n   68  \n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n  115      pContext->clearUAV(mpRtOut->getUAV().get(), kClearColor);\n  116      mpScene->raytrace(pContext, mpRaytraceProgram.get(), mpRtVars, uint3(pTargetFbo->getWidth(), pTargetFbo->getHeight(), 1));\n  117:     pContext->blit(mpRtOut->getSRV(), pTargetFbo->getRenderTargetView(0));\n  118  }\n  119  \n\n68 matches across 23 files\n\n\nSearching 743 files for \"RtvHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  211      using FenceHandle = ID3D12FencePtr;\n  212      using ResourceHandle = ID3D12ResourcePtr;\n  213:     using RtvHandle = std::shared_ptr<DescriptorSet>;\n  214      using DsvHandle = std::shared_ptr<DescriptorSet>;\n  215      using SrvHandle = std::shared_ptr<DescriptorSet>;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  152      };\n  153  \n  154:     class dlldecl RenderTargetView : public ResourceView<RtvHandle>\n  155      {\n  156      public:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   92      using FenceHandle = VkSemaphore;\n   93      using ResourceHandle = VkResource<VkImage, VkBuffer>::SharedPtr;\n   94:     using RtvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   95      using DsvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   96      using SrvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n\n3 matches across 3 files\n\n\nSearching 743 files for \"RtvHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  211      using FenceHandle = ID3D12FencePtr;\n  212      using ResourceHandle = ID3D12ResourcePtr;\n  213:     using RtvHandle = std::shared_ptr<DescriptorSet>;\n  214      using DsvHandle = std::shared_ptr<DescriptorSet>;\n  215      using SrvHandle = std::shared_ptr<DescriptorSet>;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  152      };\n  153  \n  154:     class dlldecl RenderTargetView : public ResourceView<RtvHandle>\n  155      {\n  156      public:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   92      using FenceHandle = VkSemaphore;\n   93      using ResourceHandle = VkResource<VkImage, VkBuffer>::SharedPtr;\n   94:     using RtvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   95      using DsvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   96      using SrvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n\n3 matches across 3 files\n\n\nSearching 743 files for \"RtvHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  211      using FenceHandle = ID3D12FencePtr;\n  212      using ResourceHandle = ID3D12ResourcePtr;\n  213:     using RtvHandle = std::shared_ptr<DescriptorSet>;\n  214      using DsvHandle = std::shared_ptr<DescriptorSet>;\n  215      using SrvHandle = std::shared_ptr<DescriptorSet>;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  152      };\n  153  \n  154:     class dlldecl RenderTargetView : public ResourceView<RtvHandle>\n  155      {\n  156      public:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   93      using FenceHandle = VkSemaphore;\n   94      using ResourceHandle = VkResource<VkImage, VkBuffer>::SharedPtr;\n   95:     using RtvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   96      using DsvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   97      using SrvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n\n3 matches across 3 files\n\n\nSearching 743 files for \"RtvHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  211      using FenceHandle = ID3D12FencePtr;\n  212      using ResourceHandle = ID3D12ResourcePtr;\n  213:     using RtvHandle = std::shared_ptr<DescriptorSet>;\n  214      using DsvHandle = std::shared_ptr<DescriptorSet>;\n  215      using SrvHandle = std::shared_ptr<DescriptorSet>;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  152      };\n  153  \n  154:     class dlldecl RenderTargetView : public ResourceView<RtvHandle>\n  155      {\n  156      public:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   93      using FenceHandle = VkSemaphore;\n   94      using ResourceHandle = VkResource<VkImage, VkBuffer>::SharedPtr;\n   95:     using RtvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   96      using DsvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   97      using SrvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n\n3 matches across 3 files\n\n\nSearching 743 files for \"Core/API/GpuTimer\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12GpuTimer.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/GpuTimer.h\"\n   30  \n   31  namespace Falcor\n\n/home/max/dev/Falcor/src/Falcor/Falcor.h:\n   58  #include \"Falcor/Core/API/Formats.h\"\n   59  #include \"Falcor/Core/API/GpuFence.h\"\n   60: #include \"Falcor/Core/API/GpuTimer.h\"\n   61  #include \"Falcor/Core/API/GraphicsStateObject.h\"\n   62  #include \"Falcor/Core/API/LowLevelContextData.h\"\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/Profiler.cpp:\n   28  #include \"stdafx.h\"\n   29  #include \"Profiler.h\"\n   30: #include \"Core/API/GpuTimer.h\"\n   31  #include <sstream>\n   32  #include <fstream>\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/Profiler.h:\n   30  #include <unordered_map>\n   31  #include \"CpuTimer.h\"\n   32: #include \"Core/API/GpuTimer.h\"\n   33  \n   34  namespace Falcor\n\n4 matches across 4 files\n\n\nSearching 743 files for \"Core/API/LowLevel\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12LowLevelContextData.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/LowLevelContextData.h\"\n   30  #include \"Core/API/Device.h\"\n   31  #include \"D3D12ApiData.h\"\n\n/home/max/dev/Falcor/src/Falcor/Core/API/GpuTimer.h:\n   27   **************************************************************************/\n   28  #pragma once\n   29: #include \"Core/API/LowLevelContextData.h\"\n   30  #include \"Core/API/QueryHeap.h\"\n   31  #include \"Core/API/Buffer.h\"\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKBuffer.cpp:\n   29  #include \"Falcor/Core/API/Buffer.h\"\n   30  #include \"Falcor/Core/API/Device.h\"\n   31: //#include \"Falcor/Core/API/LowLevel/ResourceAllocator.h\"\n   32  #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n   33  #include \"Falcor/Core/API/Device.h\"\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Falcor/Core/API/LowLevelContextData.h\"\n   30  #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n   31  #include \"Falcor/Core/API/Device.h\"\n\n/home/max/dev/Falcor/src/Falcor/Falcor.h:\n   60  #include \"Falcor/Core/API/GpuTimer.h\"\n   61  #include \"Falcor/Core/API/GraphicsStateObject.h\"\n   62: #include \"Falcor/Core/API/LowLevelContextData.h\"\n   63  #include \"Falcor/Core/API/QueryHeap.h\"\n   64  #include \"Falcor/Core/API/RasterizerState.h\"\n\n5 matches across 5 files\n\n\nSearching 743 files for \"Core/API/GpuFenc\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12GpuFence.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/GpuFence.h\"\n   30  #include \"Core/API/Device.h\"\n   31  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/GpuMemoryHeap.h:\n   28  #pragma once\n   29  #include <queue>\n   30: #include \"Core/API/GpuFence.h\"\n   31  \n   32  namespace Falcor\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDevice.cpp:\n   31  #include \"Falcor/Core/API/Device.h\"\n   32  #include \"Falcor/Core/API/DescriptorPool.h\"\n   33: #include \"Falcor/Core/API/GpuFence.h\"\n   34  #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n   35  #include \"Falcor.h\"\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGpuFence.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Falcor/Core/API/GpuFence.h\"\n   30  #include \"Falcor/Core/API/Device.h\"\n   31  #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n\n/home/max/dev/Falcor/src/Falcor/Falcor.h:\n   57  #include \"Falcor/Core/API/FencedPool.h\"\n   58  #include \"Falcor/Core/API/Formats.h\"\n   59: #include \"Falcor/Core/API/GpuFence.h\"\n   60  #include \"Falcor/Core/API/GpuTimer.h\"\n   61  #include \"Falcor/Core/API/GraphicsStateObject.h\"\n\n5 matches across 5 files\n\n\nSearching 743 files for \"Utils/String\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Resource.cpp:\n   28  #include \"stdafx.h\"\n   29  #include \"D3D12Resource.h\"\n   30: #include \"Utils/StringUtils.h\"\n   31  \n   32  namespace Falcor\n\n/home/max/dev/Falcor/src/Falcor/Core/API/TextureLoader.cpp:\n   32  #include \"Falcor/Utils/Image/DDSHeader.h\"\n   33  #include \"Falcor/Utils/BinaryFileStream.h\"\n   34: #include \"Falcor/Utils/StringUtils.h\"\n   35  \n   36  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n   28  #include \"stdafx.h\"\n   29  #include \"ParameterBlock.h\"\n   30: #include \"Utils/StringUtils.h\"\n   31  #include \"Core/API/CopyContext.h\"\n   32  #include \"Core/API/Device.h\"\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Linux/Linux.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: // #include \"Utils/StringUtils.h\"\n   30  #include \"Falcor/Core/Platform/OS.h\"\n   31  // #include \"Utils/Logger.h\"\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/MonitorInfo.cpp:\n   31  #include <SetupApi.h>\n   32  #include <cfgmgr32.h>\n   33: #include \"Utils/StringUtils.h\"\n   34  \n   35  #pragma comment(lib, \"setupapi.lib\")\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Utils/StringUtils.h\"\n   30  #include \"OS.h\"\n   31  #include <filesystem>\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.cpp:\n   29  #include \"Program.h\"\n   30  #include \"slang/slang.h\"\n   31: #include \"Utils/StringUtils.h\"\n   32  \n   33  namespace Falcor\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.cpp:\n   28  #include \"stdafx.h\"\n   29  #include \"ProgramReflection.h\"\n   30: #include \"Utils/StringUtils.h\"\n   31  #include \"slang/slang.h\"\n   32  #include <map>\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n   30  #include \"RenderGraph/RenderPassLibrary.h\"\n   31  #include \"Core/Platform/ProgressBar.h\"\n   32: #include \"Utils/StringUtils.h\"\n   33  #include <sstream>\n   34  #include <fstream>\n\n/home/max/dev/Falcor/src/Falcor/Falcor.h:\n  128  #include \"Falcor/Utils/BinaryFileStream.h\"\n  129  #include \"Falcor/Utils/Logger.h\"\n  130: #include \"Falcor/Utils/StringUtils.h\"\n  131  #include \"Falcor/Utils/TermColor.h\"\n  132  #include \"Falcor/Utils/Threading.h\"\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtStateObject.cpp:\n   29  #include \"RtStateObject.h\"\n   30  #include \"RtStateObjectHelper.h\"\n   31: #include \"Utils/StringUtils.h\"\n   32  #include \"Core/API/Device.h\"\n   33  #include \"ShaderTable.h\"\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphIR.cpp:\n   29  #include \"RenderGraphIR.h\"\n   30  #include \"RenderGraph.h\"\n   31: #include \"Utils/StringUtils.h\"\n   32  \n   33  namespace Falcor\n\n/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.cpp:\n   32  #include \"assimp/pbrmaterial.h\"\n   33  #include \"AssimpImporter.h\"\n   34: #include \"Utils/StringUtils.h\"\n   35  #include \"Core/API/Device.h\"\n   36  #include \"Scene/SceneBuilder.h\"\n\n/home/max/dev/Falcor/src/Falcor/Utils/Image/Bitmap.cpp:\n   30  #include \"FreeImage.h\"\n   31  #include \"Core/API/Texture.h\"\n   32: #include \"Utils/StringUtils.h\"\n   33  \n   34  namespace Falcor\n\n/home/max/dev/Falcor/src/Falcor/Utils/Scripting/Scripting.h:\n   29  #include \"ScriptBindings.h\"\n   30  #include <functional>\n   31: #include \"Utils/StringUtils.h\"\n   32  \n   33  using namespace pybind11::literals;\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.cpp:\n   32  #include \"Core/API/RenderContext.h\"\n   33  #include \"glm/gtc/type_ptr.hpp\"\n   34: #include \"Utils/StringUtils.h\"\n   35  \n   36  #pragma warning (disable : 4756) // overflow in constant arithmetic caused by calculating the setFloat*() functions (when calculating the step and min/max are +/- INF)\n\n16 matches across 16 files\n\n\nSearching 743 files for \"DescriptorSetApiHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  239      using RasterizerStateHandle = void*;\n  240      using BlendStateHandle = void*;\n  241:     using DescriptorSetApiHandle = void*;\n  242  \n  243      inline constexpr uint32_t getMaxViewportCount() { return D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE; }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DescriptorSet.h:\n   64      using CpuHandle = DescriptorPool::CpuHandle;\n   65      using GpuHandle = DescriptorPool::GpuHandle;\n   66:     using ApiHandle = DescriptorSetApiHandle;\n   67      using ApiData = DescriptorSetApiData;\n   68  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n  100  using SamplerHandle = VkHandle<VkSampler>::SharedPtr;\n  101  using GpuAddress = size_t;\n  102: using DescriptorSetApiHandle = VkDescriptorSet;\n  103  using QueryHeapHandle = VkHandle<VkQueryPool>::SharedPtr;\n  104  \n\n3 matches across 3 files\n\n\nSearching 743 files for \"Can't find file\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.cpp:\n  568                  if (!findFileInShaderDirectories(src.pLibrary->getFilename(), fullpath))\n  569                  {\n  570:                     logError(\"Can't find file \" + src.pLibrary->getFilename());\n  571                      spDestroyCompileRequest(pSlangRequest);\n  572                      return nullptr;\n\n1 match in 1 file\n\n\nSearching 743 files for \"gShaderDirectories\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.cpp:\n   68      }\n   69  \n   70:     static std::vector<std::string> gShaderDirectories = getInitialShaderDirectories();\n   71  \n   72      inline std::vector<std::string> getInitialDataDirectories() {\n   ..\n  155  \n  156      const std::vector<std::string>& getShaderDirectoriesList() {\n  157:         return gShaderDirectories;\n  158      }\n  159  \n  160      bool findFileInShaderDirectories(const std::string& filename, std::string& fullPath) {\n  161:         for (const auto& dir : gShaderDirectories) {\n  162              fullPath = canonicalizeFilename(dir + '/' + filename);\n  163              if (doesFileExist(fullPath)) {\n\n3 matches in 1 file\n\n\nSearching 743 files for \"Failed to create font resource\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Font.cpp:\n   44          {\n   45              #ifdef _WIN32\n   46:             throw std::exception(\"Failed to create font resource\");\n   47              #else\n   48:             throw std::runtime_error(\"Failed to create font resource\");\n   49              #endif\n   50          }\n\n2 matches in 1 file\n\n\nSearching 744 files for \"mShowUI\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n   81          else if (keyEvent.type == KeyboardEvent::Type::KeyReleased) mPressedKeys.erase(keyEvent.key);\n   82  \n   83:         if (mShowUI && mpGui->onKeyboardEvent(keyEvent)) return;\n   84          if (mpRenderer && mpRenderer->onKeyEvent(keyEvent)) return;\n   85  \n   ..\n  117                      break;\n  118                  case KeyboardEvent::Key::F2:\n  119:                     toggleUI(!mShowUI);\n  120                      break;\n  121                  case KeyboardEvent::Key::F5:\n  ...\n  151      void Sample::handleMouseEvent(const MouseEvent& mouseEvent) {\n  152          if (mSuppressInput) return;\n  153:         if (mShowUI && mpGui->onMouseEvent(mouseEvent)) return;\n  154          if (mpRenderer && mpRenderer->onMouseEvent(mouseEvent)) return;\n  155          if (mpPixelZoom->onMouseEvent(mouseEvent)) return;\n  ...\n  223          Threading::start();\n  224          mSuppressInput = config.suppressInput;\n  225:         mShowUI = config.showUI;\n  226          mClock.setTimeScale(config.timeScale);\n  227          if (config.pauseTime) mClock.pause();\n  ...\n  378          PROFILE(\"renderUI\");\n  379  \n  380:         if (mShowUI || gProfileEnabled) {\n  381              mpGui->beginFrame();\n  382  \n  383:             if (mShowUI) mpRenderer->onGuiRender(mpGui.get());\n  384              if (mVideoCapture.displayUI && mVideoCapture.pUI) {\n  385                  Gui::Window w(mpGui.get(), \"Video Capture\", mVideoCapture.displayUI, { 350, 250 }, { 300, 280 });\n  ...\n  534          if (mVideoCapture.pVideoCapture) {\n  535              mVideoCapture.pVideoCapture->endCapture();\n  536:             mShowUI = true;\n  537          }\n  538          mVideoCapture = {};\n  ...\n  562          c.timeScale = (float)mClock.getTimeScale();\n  563          c.pauseTime = mClock.isPaused();\n  564:         c.showUI = mShowUI;\n  565          return c;\n  566      }\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.h:\n   84      void resizeSwapChain(uint32_t width, uint32_t height) override;\n   85      bool isKeyPressed(const KeyboardEvent::Key& key) override;\n   86:     void toggleUI(bool showUI) override { mShowUI = showUI; }\n   87:     bool isUiEnabled() override { return mShowUI; }\n   88      ArgList getArgList() override { return mArgList; }\n   89      void pauseRenderer(bool pause) override { mRendererPaused = pause; }\n   ..\n  129      bool mSuppressInput = false;\n  130      bool mVsyncOn = false;\n  131:     bool mShowUI = true;\n  132      bool mCaptureScreen = false;\n  133      FrameRate mFrameRate;\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/CaptureTrigger.h:\n   68          std::string mOutputDir = \".\";\n   69          bool mAbsolutePath = false;\n   70:         bool mShowUI = false;\n   71  \n   72          struct\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/FrameCapture.cpp:\n   61      void FrameCapture::renderUI(Gui* pGui)\n   62      {\n   63:         if (mShowUI)\n   64          {\n   65:             auto w = Gui::Window(pGui, \"Frame Capture\", mShowUI, {}, { 400, 400 });\n   66              CaptureTrigger::renderUI(w);\n   67          }\n   ..\n   93  \n   94          // Settings\n   95:         auto getUI = [](FrameCapture* pFC) { return pFC->mShowUI; };\n   96:         auto setUI = [](FrameCapture* pFC, bool show) { pFC->mShowUI = show; };\n   97          fc.property(kUI.c_str(), getUI, setUI);\n   98      }\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/FrameCapture.h:\n   43      private:\n   44          FrameCapture(Renderer* pRenderer) : CaptureTrigger(pRenderer) {}\n   45:         bool mShowUI = false;\n   46          using uint64_vec = std::vector<uint64_t>;\n   47          void addFrames(const RenderGraph* pGraph, const uint64_vec& frames);\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/VideoCapture.cpp:\n   65      void VideoCapture::renderUI(Gui* pGui)\n   66      {\n   67:         if (mShowUI)\n   68          {\n   69:             auto w = Gui::Window(pGui, \"Video Capture\", mShowUI, { 800, 400 });\n   70              CaptureTrigger::renderUI(w);\n   71              w.separator();\n   ..\n  140  \n  141          // UI\n  142:         auto getUI = [](VideoCapture* pVC) { return pVC->mShowUI; };\n  143:         auto setUI = [](VideoCapture* pVC, bool show) { pVC->mShowUI = show; };\n  144          vc.property(kUI.c_str(), getUI, setUI);\n  145  \n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/VideoCapture.h:\n   52          std::string graphRangesStr(const RenderGraph* pGraph);\n   53  \n   54:         bool mShowUI = false;\n   55          VideoEncoderUI::UniquePtr mpEncoderUI;\n   56  \n\n22 matches across 7 files\n\n\nSearching 744 files for \"renderUI\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n 1126  }\n 1127  \n 1128: void ParameterBlock::renderUI(Gui::Widgets& widget) {\n 1129      VariablesBufferUI variablesBufferUI(*this);\n 1130:     variablesBufferUI.renderUI(widget);\n 1131  }\n 1132  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  320          std::pair<Resource::SharedPtr, bool> getRootDescriptor(uint32_t resourceRangeIndex, uint32_t arrayIndex) const;\n  321  \n  322:         void renderUI(Gui::Widgets& widget);\n  323          ParameterBlock::ConstSharedPtrRef getParameterBlock(uint32_t resourceRangeIndex, uint32_t arrayIndex) const;\n  324  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/VariablesBufferUI.cpp:\n  142      }\n  143  \n  144:     void VariablesBufferUI::renderUIBasicVarInternal(\n  145          Gui::Widgets&                       widget,\n  146          const std::string&                  memberName,\n  ...\n  167      }\n  168  \n  169:     void VariablesBufferUI::renderUIVarInternal(Gui::Widgets& widget, const std::string& memberName, const ShaderVar& var)\n  170      {\n  171          size_t numMembers = 1;\n  ...\n  193                      group.separator();\n  194  \n  195:                     renderUIInternal(group, var);\n  196  \n  197                      group.separator();\n  ...\n  265              if (group.open())\n  266              {\n  267:                 renderUIInternal(group, displayCursor);\n  268                  group.release();\n  269              }\n  ...\n  272          {\n  273              // for basic types\n  274:             renderUIBasicVarInternal(widget, displayName, displayCursor, memberSize, to_string(memberType), memberType, numMembers);\n  275          }\n  276      }\n  277  \n  278:     void VariablesBufferUI::renderUIInternal(Gui::Widgets& widget, const ShaderVar& var)\n  279      {\n  280          auto pType = var.getType();\n  ...\n  292                  // unique IDs for distinct members.\n  293  \n  294:                 return renderUIVarInternal(widget, memberName, var[memberName]);\n  295              }\n  296          }\n  ...\n  310                  uint32_t memberIndex = 0;\n  311                  widget.var(\"Element Index\", memberIndex, 0);\n  312:                 renderUIInternal(widget, var[memberIndex]);\n  313  #endif\n  314              }\n  315              else\n  316              {\n  317:                 return renderUIVarInternal(widget, \"\", var);\n  318              }\n  319          }\n  320      }\n  321  \n  322:     void VariablesBufferUI::renderUI(Gui::Widgets& widget)\n  323      {\n  324          // begin recursion on first struct\n  325:         renderUIInternal(widget,mVariablesBufferRef.getRootVar());\n  326      }\n  327  }\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/VariablesBufferUI.h:\n   39      public:\n   40          VariablesBufferUI(ParameterBlock& variablesBufferRef) : mVariablesBufferRef(variablesBufferRef) {}\n   41:         void renderUI(Gui::Widgets& widget);\n   42  \n   43      private:\n   ..\n   51              \\return true if something changed and data needs to be sent to the GPU\n   52          */\n   53:         void renderUIVarInternal(Gui::Widgets& widget, const std::string& memberName, const ShaderVar& var);\n   54  \n   55          /** Recursive function for traversing reflection data and display ui\n   ..\n   58              \\return true if something changed and data needs to be sent to the GPU\n   59          */\n   60:         void renderUIInternal(Gui::Widgets& widget, const ShaderVar& var);\n   61  \n   62          /** Render gui widget for reflected data\n   ..\n   70              \\return true if something changed and data needs to be sent to the GPU\n   71          */\n   72:         void renderUIBasicVarInternal(Gui::Widgets& widget, const std::string& memberName, const ShaderVar& var, size_t memberSize, const std::string& memberTypeString, const ReflectionBasicType::Type& memberType, size_t arraySize);\n   73      };\n   74  }\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n  375      }\n  376  \n  377:     void Sample::renderUI() {\n  378:         PROFILE(\"renderUI\");\n  379  \n  380          mShowUI = true;\n  ...\n  395  \n  396                  Gui::Window profilerWindow(mpGui.get(), \"Profiler\", gProfileEnabled, { 800, 350 }, { 10, y });\n  397:                 Profiler::endEvent(\"renderUI\");  // Stop the timer\n  398  \n  399                  if (gProfileEnabled) {\n  400                      profilerWindow.text(Profiler::getEventsString().c_str());\n  401:                     Profiler::startEvent(\"renderUI\");\n  402                      profilerWindow.release();\n  403                  }\n  ...\n  440              bool captureVideoUI = mVideoCapture.pUI && mVideoCapture.pUI->captureUI();  // Check capture mode here once only, as its value may change after renderGUI()\n  441              if (!captureVideoUI) captureVideoFrame();\n  442:             renderUI();\n  443  \n  444              pSwapChainFbo = gpDevice->getSwapChainFbo();  // The UI might have triggered a swap-chain resize, invalidating the previous FBO\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.h:\n  120      void endVideoCapture();\n  121      void captureVideoFrame();\n  122:     void renderUI();\n  123  \n  124      void runInternal(const SampleConfig& config, uint32_t argc, char** argv);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.h:\n   63              \\return True if settings that affect the rendering have changed.\n   64          */\n   65:         virtual bool renderUI(Gui::Widgets& widget) { return false; }\n   66  \n   67          /** Returns the type of emissive light sampler.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.cpp:\n  113      }\n  114  \n  115:     void LightBVH::renderUI(Gui::Widgets& widget)\n  116      {\n  117          // Render the BVH stats.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.h:\n  182          /** Render the UI. This default implementation just shows the stats.\n  183          */\n  184:         virtual void renderUI(Gui::Widgets& widget);\n  185  \n  186          /** Bind the light BVH into a shader variable.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp:\n  283      }\n  284  \n  285:     bool LightBVHBuilder::renderUI(Gui::Widgets& widget)\n  286      {\n  287          // Render the build options.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h:\n   42  \n   43          The building process can be customized via the |Options|,\n   44:         which are also available in the GUI via the |renderUI()| function.\n   45  \n   46          TODO: Rename all things triangle* to light* as the BVH class can be used for other types.\n   ..\n   87          void build(LightBVH& bvh);\n   88  \n   89:         virtual bool renderUI(Gui::Widgets& widget);\n   90  \n   91          const Options& getOptions() const { return mOptions; }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp:\n  113      }\n  114  \n  115:     bool LightBVHSampler::renderUI(Gui::Widgets& widgets)\n  116      {\n  117          bool optionsChanged = false;\n  ...\n  120          if (buildGroup.open())\n  121          {\n  122:             if (mpBVHBuilder->renderUI(buildGroup))\n  123              {\n  124                  mOptions.buildOptions = mpBVHBuilder->getOptions();\n  ...\n  151          if (statGroup.open())\n  152          {\n  153:             mpBVH->renderUI(statGroup);\n  154              statGroup.release();\n  155          }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h:\n  103              \\return True if setting the refresh flag is needed, false otherwise.\n  104          */\n  105:         virtual bool renderUI(Gui::Widgets& widget) override;\n  106  \n  107          /** Returns the current configuration.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n   99      }\n  100  \n  101:     void LightCollection::renderUI(Gui::Widgets& widget)\n  102      {\n  103          // Prints stats about the number of lights etc.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.h:\n  125          /** Render the GUI.\n  126          */\n  127:         void renderUI(Gui::Widgets& widgets);\n  128  \n  129          /** Bind the light collection data to a given shader var\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraph.cpp:\n  729      }\n  730  \n  731:     void RenderGraph::renderUI(Gui::Widgets& widget)\n  732      {\n  733          if (mpScene)\n  ...\n  736              if (sceneGroup.open())\n  737              {\n  738:                 mpScene->renderUI(sceneGroup);\n  739                  sceneGroup.release();\n  740              }\n  ...\n  743          }\n  744  \n  745:         if (mpExe) mpExe->renderUI(widget);\n  746      }\n  747  \n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraph.h:\n  168          /** Render the UI\n  169          */\n  170:         void renderUI(Gui::Widgets& widget);\n  171  \n  172          /** Mouse event handler.\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphExe.cpp:\n   44      }\n   45  \n   46:     void RenderGraphExe::renderUI(Gui::Widgets& widget)\n   47      {\n   48          for (const auto& p : mExecutionList)\n   ..\n   56                  const auto& desc = pPass->getDesc();\n   57                  if (desc.size()) passGroup.tooltip(desc.c_str());\n   58:                 pPass->renderUI(passGroup);\n   59  \n   60                  passGroup.release();\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphExe.h:\n   53          /** Render the UI\n   54          */\n   55:         void renderUI(Gui::Widgets& widget);\n   56  \n   57          /** Mouse event handler.\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphUI.cpp:\n  206  \n  207          // render Gui within the nodes\n  208:         static bool renderUI(ImGui::FieldInfo& field)\n  209          {\n  210              // with this library there is no way of modifying the positioning of the labels on the node\n  ...\n  343              IM_PLACEMENT_NEW(node) RenderGraphNode();\n  344  \n  345:             node->fields.addFieldCustom(static_cast<ImGui::FieldInfo::RenderFieldDelegate>(renderUI), nullptr, node);\n  346              node->Pos = pos;\n  347              return node;\n  ...\n  670              if (is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Input) || is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Output))\n  671              {\n  672:                 pinUI.renderUI(field, pGraphUI, passName);\n  673              }\n  674          }\n  ...\n  759      }\n  760  \n  761:     void RenderPassUI::PinUI::renderUI(const RenderPassReflection::Field& field, RenderGraphUI* pGraphUI, const std::string& passName)\n  762      {\n  763          ImGui::TextUnformatted(mIsGraphOutput ? \"Graph Output : \" : \"\");\n  ...\n  862      }\n  863  \n  864:     void RenderGraphUI::renderUI(RenderContext* pContext, Gui *pGui)\n  865      {\n  866          static std::string dragAndDropText;\n  ...\n  900          for (uint32_t i = 0 ; i  < static_cast<uint32_t>(selectedNodes.size()); ++i)\n  901          {\n  902:             std::string renderUIName = selectedNodes.Data[i]->getName();\n  903  \n  904:             auto renderGroup = Gui::Group(pGui, renderUIName, true);\n  905              if (renderGroup.open())\n  906              {\n  907:                 auto pPass = mpRenderGraph->getPass(renderUIName);\n  908                  bool internalResources = false;\n  909  \n  ...\n  913                  renderGroup.separator();\n  914  \n  915:                 pPass->renderUI(renderGroup);\n  916  \n  917:                 for (uint32_t i = 0; i < mRenderPassUI[renderUIName].mReflection.getFieldCount(); ++i)\n  918                  {\n  919:                     const auto& field = *mRenderPassUI[renderUIName].mReflection.getField(i);\n  920                      if (is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Internal))\n  921                      {\n  ...\n  927                              renderGroup.separator();\n  928                          }\n  929:                         RenderPassUI::PinUI::renderFieldInfo(field, this, renderUIName, field.getName());\n  930                          internalResources = true;\n  931                      }\n  ...\n  935                  if (ImGui::IsWindowFocused())\n  936                  {\n  937:                     mpIr->updatePass(renderUIName, pPass->getScriptingDictionary());\n  938                  }\n  939                  mShouldUpdate = true;\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphUI.h:\n   58  \n   59              static void renderFieldInfo(const RenderPassReflection::Field& field, RenderGraphUI* pGraphUI, const std::string& passName, const std::string& fieldName);\n   60:             void renderUI(const RenderPassReflection::Field& field, RenderGraphUI* graphUI, const std::string& passName);\n   61          };\n   62  \n   ..\n   83          /** Display enter graph in GUI.\n   84          */\n   85:         void renderUI(RenderContext* pContext, Gui *pGui);\n   86  \n   87          /** Clear graph ui for rebuilding node graph\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPass.h:\n  123          /** Render the pass's UI\n  124          */\n  125:         virtual void renderUI(Gui::Widgets& widget) {}\n  126  \n  127          /** Set a scene into the render-pass\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.cpp:\n  118      }\n  119  \n  120:     void PathTracer::renderUI(Gui::Widgets& widget)\n  121      {\n  122          bool dirty = false;\n  ...\n  274              if (emissiveGroup.open())\n  275              {\n  276:                 if (mpEmissiveSampler->renderUI(emissiveGroup))\n  277                  {\n  278                      // Get the latest options for the current sampler. We need these to re-create the sampler at scene changes and for pass serialization.\n  ...\n  304          {\n  305              // Pixel stats.\n  306:             mpPixelStats->renderUI(logGroup);\n  307  \n  308              // Pixel debugger.\n  309:             mpPixelDebug->renderUI(logGroup);\n  310  \n  311              logGroup.release();\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.h:\n   51          virtual void compile(RenderContext* pRenderContext, const CompileData& compileData) override;\n   52          virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   53:         virtual void renderUI(Gui::Widgets& widget) override;\n   54          virtual bool onMouseEvent(const MouseEvent& mouseEvent) override;\n   55          virtual bool onKeyEvent(const KeyboardEvent& keyEvent) override { return false; }\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.cpp:\n  112      }\n  113  \n  114:     void PixelStats::renderUI(Gui::Widgets& widget)\n  115      {\n  116          // Configuration.\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.h:\n   59          void prepareProgram(const Program::SharedPtr& pProgram, const ShaderVar& var);\n   60  \n   61:         void renderUI(Gui::Widgets& widget);\n   62  \n   63          /** Fetches the latest stats generated by begin()/end().\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/AnimationController.cpp:\n  167      }\n  168  \n  169:     void AnimationController::renderUI(Gui::Widgets& widget)\n  170      {\n  171          if (mMeshes[0].pAnimations.size())\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/AnimationController.h:\n  104          /** Render the UI\n  105          */\n  106:         void renderUI(Gui::Widgets& widget);\n  107  \n  108          /** Get the global matrices\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.cpp:\n  277      }\n  278  \n  279:     void Camera::renderUI(Gui* pGui, const char* uiGroup)\n  280      {\n  281          if (!uiGroup) uiGroup = \"Camera Settings\";\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.h:\n  235          /** Render the UI\n  236          */\n  237:         void renderUI(Gui* pGui, const char* uiGroup = nullptr);\n  238  \n  239          enum class Changes\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/Light.cpp:\n  132      }\n  133  \n  134:     void Light::renderUI(Gui* pGui, const char* group)\n  135      {\n  136          if (!group) group = \"General Light Settings\";\n  ...\n  166      DirectionalLight::~DirectionalLight() = default;\n  167  \n  168:     void DirectionalLight::renderUI(Gui* pGui, const char* group)\n  169      {\n  170          if (!group) group = \"Directional Light Settings\";\n  ...\n  176                  setWorldDirection(mData.dirW);\n  177              }\n  178:             Light::renderUI(pGui);\n  179              g.release();\n  180          }\n  ...\n  238      }\n  239  \n  240:     void PointLight::renderUI(Gui* pGui, const char* group)\n  241      {\n  242          if (!group) group = \"Point Light Settings\";\n  ...\n  255                  setPenumbraAngle(mData.penumbraAngle);\n  256              }\n  257:             Light::renderUI(pGui);\n  258  \n  259              g.release();\n  ...\n  303      }\n  304  \n  305:     void AnalyticAreaLight::renderUI(Gui* pGui, const char* group)\n  306      {\n  307          if (!group) group = \"Analytic Area Light Settings\";\n  ...\n  309          if (g.open())\n  310          {\n  311:             Light::renderUI(pGui);\n  312  \n  313              g.release();\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/Light.h:\n   52              \\param[in] group Optional. If specified, creates a UI group to display elements within\n   53          */\n   54:         virtual void renderUI(Gui* pGui, const char* group = nullptr);\n   55  \n   56          /** Get total light power\n   ..\n  141          \\param[in] group Optional. If specified, creates a UI group to display elements within\n  142          */\n  143:         void renderUI(Gui* pGui, const char* group = nullptr) override;\n  144  \n  145          /** Set the light's world-space direction.\n  ...\n  181              \\param[in] group Optional. If specified, creates a UI group to display elements within\n  182          */\n  183:         void renderUI(Gui* pGui, const char* group = nullptr) override;\n  184  \n  185          /** Get total light power (needed for light picking)\n  ...\n  272              \\param[in] group Optional. If specified, creates a UI group to display elements within\n  273          */\n  274:         void renderUI(Gui* pGui, const char* group = nullptr) override;\n  275  \n  276      private:\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbe.cpp:\n  198      }\n  199  \n  200:     void LightProbe::renderUI(Gui* pGui, const char* group)\n  201      {\n  202          Gui::Group g(pGui, group);\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbe.h:\n   81              \\param[in] group Optional. If specified, creates a UI group to display elements within\n   82          */\n   83:         void renderUI(Gui* pGui, const char* group = nullptr);\n   84  \n   85          /** Set the light probe's world-space position\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/Material.cpp:\n   50      Material::~Material() = default;\n   51  \n   52:     bool Material::renderUI(Gui::Widgets& widget)\n   53      {\n   54          // We're re-using the material's update flags here to track changes.\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/Material.h:\n   87              \\return True if the material was modified.\n   88          */\n   89:         bool renderUI(Gui::Widgets& widget);\n   90  \n   91          /** Returns the updates since the last call to clearUpdates.\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n  489      }\n  490  \n  491:     void Scene::renderUI(Gui::Widgets& widget)\n  492      {\n  493:         mpAnimationController->renderUI(widget);\n  494          if(mCamera.hasGlobalTransform()) widget.checkbox(\"Animate Camera\", mCamera.animate);\n  495  \n  ...\n  512                  mpCamCtrl->setCameraSpeed(mCameraSpeed);\n  513              }\n  514:             mCamera.pObject->renderUI(cameraGroup.gui());\n  515  \n  516              cameraGroup.release();\n  ...\n  529                      {\n  530                          if (light.hasGlobalTransform()) g.checkbox((\"Animate##\" + light.pObject->getName()).c_str(), light.animate);\n  531:                         light.pObject->renderUI(g.gui());\n  532                          g.release();\n  533                      }\n  ...\n  548                  if (g.open())\n  549                  {\n  550:                     if (material->renderUI(g))\n  551                      {\n  552                          uploadMaterial(materialID);\n  ...\n  578              {\n  579                  auto lightCollectionGroup = Gui::Group(widget, \"Mesh lights\", true);\n  580:                 if (lightCollectionGroup.open()) mpLightCollection->renderUI(lightCollectionGroup);\n  581                  lightCollectionGroup.release();\n  582              }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.h:\n  288          /** Render the UI\n  289          */\n  290:         void renderUI(Gui::Widgets& widget);\n  291  \n  292          /** Bind a sampler to the materials\n\n/home/max/dev/Falcor/src/Falcor/Utils/Debug/PixelDebug.cpp:\n  132      }\n  133  \n  134:     void PixelDebug::renderUI(Gui::Widgets& widget)\n  135      {\n  136          if (mRunning)\n  137          {\n  138:             logError(\"PixelDebug::renderUI() - Logging is running, call end() before renderUI(). Ignoring call.\");\n  139              return;\n  140          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Debug/PixelDebug.h:\n   42           - Call beginFrame()/endFrame() before and after executing programs with debugging.\n   43           - Call prepareProgram() before launching a program to use debugging.\n   44:          - Call onMouseEvent() and renderUI() from the respective callbacks in the render pass.\n   45  \n   46          Runtime usage:\n   ..\n   74          void prepareProgram(const Program::SharedPtr& pProgram, const ShaderVar& var);\n   75  \n   76:         void renderUI(Gui::Widgets& widget);\n   77          bool onMouseEvent(const MouseEvent& mouseEvent);\n   78  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/Clock.cpp:\n  215      }\n  216  \n  217:     void Clock::renderUI(Gui::Window& w)\n  218      {\n  219          const auto& tex = gClockTextures;\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/Clock.h:\n  185          /** Render the UI\n  186          */\n  187:         void renderUI(Gui::Window& w);\n  188  \n  189          /** Get the script string\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/CaptureTrigger.cpp:\n  145      }\n  146  \n  147:     void CaptureTrigger::renderUI(Gui::Window& w)\n  148      {\n  149          w.textbox(\"Base Filename\", mBaseFilename);\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/CaptureTrigger.h:\n   51          void addRange(const RenderGraph* pGraph, uint64_t startFrame, uint64_t count);\n   52          void reset(const RenderGraph* pGraph = nullptr);\n   53:         void renderUI(Gui::Window& w);\n   54  \n   55          void setOutputDirectory(const std::string& outDir);\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/FrameCapture.cpp:\n   59      }\n   60  \n   61:     void FrameCapture::renderUI(Gui* pGui)\n   62      {\n   63          if (mShowUI)\n   64          {\n   65              auto w = Gui::Window(pGui, \"Frame Capture\", mShowUI, {}, { 400, 400 });\n   66:             CaptureTrigger::renderUI(w);\n   67          }\n   68      }\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/FrameCapture.h:\n   36      public:\n   37          static UniquePtr create(Renderer* pRenderer);\n   38:         virtual void renderUI(Gui* pGui) override;\n   39          virtual void scriptBindings(Bindings& bindings) override;\n   40          virtual std::string getScript() override;\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/VideoCapture.cpp:\n   63      }\n   64  \n   65:     void VideoCapture::renderUI(Gui* pGui)\n   66      {\n   67          if (mShowUI)\n   68          {\n   69              auto w = Gui::Window(pGui, \"Video Capture\", mShowUI, { 800, 400 });\n   70:             CaptureTrigger::renderUI(w);\n   71              w.separator();\n   72              mpEncoderUI->render(w, true);\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/VideoCapture.h:\n   38      public:\n   39          static UniquePtr create(Renderer* pRenderer);\n   40:         virtual void renderUI(Gui* pGui) override;\n   41          virtual void beginRange(RenderGraph* pGraph, const Range& r) override;\n   42          virtual void endRange(RenderGraph* pGraph, const Range& r) override;\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  102  \n  103  void Renderer::onGuiRender(Gui* pGui) {\n  104:     for (auto& pe : mpExtensions)  pe->renderUI(pGui);\n  105  }\n  106  \n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.h:\n   79      virtual void beginFrame(RenderContext* pRenderContext, const Fbo::SharedPtr& pTargetFbo) {}\n   80      virtual void endFrame(RenderContext* pRenderContext, const Fbo::SharedPtr& pTargetFbo) {}\n   81:     virtual void renderUI(Gui* pGui) {}\n   82      virtual bool mouseEvent(const MouseEvent& e) { return false; }\n   83      virtual bool keyboardEvent(const KeyboardEvent& e) { return false; }\n\n/home/max/dev/Falcor/src/Mogwai/MogwaiSettings.cpp:\n  133  \n  134      Clock& clock = gpFramework->getGlobalClock();\n  135:     clock.renderUI(w);\n  136      w.separator(2);\n  137  \n  ...\n  178      w.separator();\n  179      Gui::Group graphGroup(pGui, (mpRenderer->mGraphs[mpRenderer->mActiveGraph].pGraph->getName() + \"##Graph\").c_str());\n  180:     mpRenderer->mGraphs[mpRenderer->mActiveGraph].pGraph->renderUI(graphGroup);\n  181  }\n  182  \n  ...\n  229  }\n  230  \n  231: void MogwaiSettings::renderUI(Gui* pGui__) {\n  232      Gui* pGui = reinterpret_cast<Gui*>(pGui__);\n  233      mainMenu(pGui);\n\n/home/max/dev/Falcor/src/Mogwai/MogwaiSettings.h:\n   41      static UniquePtr create(Renderer* pRenderer);\n   42  \n   43:     void renderUI(Gui* pGui) override;\n   44      bool mouseEvent(const MouseEvent& e) override;\n   45      bool keyboardEvent(const KeyboardEvent& e) override;\n\n/home/max/dev/Falcor/src/RenderPasses/AccumulatePass/AccumulatePass.cpp:\n  183  }\n  184  \n  185: void AccumulatePass::renderUI(Gui::Widgets& widget)\n  186  {\n  187      if (widget.checkbox(\"Accumulate temporally\", mEnableAccumulation))\n\n/home/max/dev/Falcor/src/RenderPasses/AccumulatePass/AccumulatePass.h:\n   53      virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n   54      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   55:     virtual void renderUI(Gui::Widgets& widget) override;\n   56      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   57      virtual bool onMouseEvent(const MouseEvent& mouseEvent) override { return false; }\n\n/home/max/dev/Falcor/src/RenderPasses/Antialiasing/FXAA/FXAA.cpp:\n  103  }\n  104  \n  105: void FXAA::renderUI(Gui::Widgets& widget)\n  106  {\n  107      widget.var(\"Sub-Pixel Quality\", mQualitySubPix, 0.f, 1.f, 0.001f);\n\n/home/max/dev/Falcor/src/RenderPasses/Antialiasing/FXAA/FXAA.h:\n   45      virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   46      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   47:     virtual void renderUI(Gui::Widgets& widget) override;\n   48  \n   49      // Scripting functions\n\n/home/max/dev/Falcor/src/RenderPasses/Antialiasing/TAA/TAA.cpp:\n  116  }\n  117  \n  118: void TAA::renderUI(Gui::Widgets& widget)\n  119  {\n  120      widget.var(\"Alpha\", mControls.alpha, 0.f, 1.0f, 0.001f);\n\n/home/max/dev/Falcor/src/RenderPasses/Antialiasing/TAA/TAA.h:\n   47      virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   48      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   49:     virtual void renderUI(Gui::Widgets& widget) override;\n   50  \n   51      void setAlpha(float alpha) { mControls.alpha = alpha; }\n\n/home/max/dev/Falcor/src/RenderPasses/BlitPass/BlitPass.cpp:\n  103  }\n  104  \n  105: void BlitPass::renderUI(Gui::Widgets& widget)\n  106  {\n  107      static const Gui::DropdownList kFilterList =\n\n/home/max/dev/Falcor/src/RenderPasses/BlitPass/BlitPass.h:\n   46      virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   47      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   48:     virtual void renderUI(Gui::Widgets& widget) override;\n   49      virtual Dictionary getScriptingDictionary() override;\n   50      virtual std::string getDesc() override { return kDesc; }\n\n/home/max/dev/Falcor/src/RenderPasses/BSDFViewer/BSDFViewer.cpp:\n  196  }\n  197  \n  198: void BSDFViewer::renderUI(Gui::Widgets& widget)\n  199  {\n  200      bool dirty = false;\n  ...\n  324              if (openFileDialog(filters, filename))\n  325              {\n  326:                 // TODO: RenderContext* should maybe be a parameter to renderUI()?\n  327                  auto pRenderContext = gpFramework->getRenderContext();\n  328                  if (loadEnvMap(pRenderContext, filename))\n  ...\n  390      if (loggingGroup.open())\n  391      {\n  392:         mpPixelDebug->renderUI(widget);\n  393  \n  394          loggingGroup.release();\n\n/home/max/dev/Falcor/src/RenderPasses/BSDFViewer/BSDFViewer.h:\n   50      virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n   51      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   52:     virtual void renderUI(Gui::Widgets& widget) override;\n   53      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   54      virtual bool onMouseEvent(const MouseEvent& mouseEvent) override;\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSM.cpp:\n  831  }\n  832  \n  833: void CSM::renderUI(Gui::Widgets& widget)\n  834  {\n  835      if (mpLight && mpLight->getType() == LightType::Directional)\n  ...\n  946              if (blurGroup.open())\n  947              {\n  948:                 mpBlurGraph->getPass(kBlurPass)->renderUI(blurGroup);\n  949                  blurGroup.release();\n  950              }\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSM.h:\n   56      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   57      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   58:     virtual void renderUI(Gui::Widgets& widget) override;\n   59  \n   60      void toggleMeshCulling(bool enabled);\n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/ComparisonPass.cpp:\n  122  }\n  123  \n  124: void ComparisonPass::renderUI(Gui::Widgets& widget)\n  125  {\n  126      widget.checkbox(\"Swap Sides\", mSwapSides);\n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/ComparisonPass.h:\n   39      virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   40      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   41:     virtual void renderUI(Gui::Widgets& widget) override;\n   42  \n   43  protected:\n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.cpp:\n   68  }\n   69  \n   70: void SideBySidePass::renderUI(Gui::Widgets& widget)\n   71  {\n   72      uint32_t width = pDstFbo ? pDstFbo->getWidth() : 0;\n   73      widget.slider(\"View Slider\", mImageLeftBound, 0u, width / 2);\n   74:     ComparisonPass::renderUI(widget);\n   75  }\n   76  \n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.h:\n   40      virtual std::string getDesc() override { return \"Allows the user to compare two inputs side-by-side.\"; }\n   41      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   42:     virtual void renderUI(Gui::Widgets& widget) override;\n   43  \n   44  private:\n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp:\n  135  }\n  136  \n  137: void SplitScreenPass::renderUI(Gui::Widgets& widget)\n  138  {\n  139      widget.var(\"Split location\", mSplitLoc, 0.0f, 1.0f, 0.001f);\n  140      widget.checkbox(\"Show Arrows\", mDrawArrows, true);\n  141:     ComparisonPass::renderUI(widget);\n  142  }\n  143  \n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.h:\n   41      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   42      virtual bool onMouseEvent(const MouseEvent& mouseEvent) override;\n   43:     virtual void renderUI(Gui::Widgets& widget) override;\n   44  \n   45  private:\n\n/home/max/dev/Falcor/src/RenderPasses/DepthPass/DepthPass.cpp:\n  142  };\n  143  \n  144: void DepthPass::renderUI(Gui::Widgets& widget)\n  145  {\n  146      uint32_t depthFormat = (uint32_t)mDepthFormat;\n\n/home/max/dev/Falcor/src/RenderPasses/DepthPass/DepthPass.h:\n   52      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   53      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   54:     virtual void renderUI(Gui::Widgets& widget) override;\n   55      virtual Dictionary getScriptingDictionary() override;\n   56      virtual std::string getDesc() { return kDesc; }\n\n/home/max/dev/Falcor/src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp:\n  225  }\n  226  \n  227: void ErrorMeasurePass::renderUI(Gui::Widgets& widget)\n  228  {\n  229      const auto getFilename = [](const std::string& path)\n\n/home/max/dev/Falcor/src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.h:\n   43      virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   44      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   45:     virtual void renderUI(Gui::Widgets& widget) override;\n   46      virtual bool onKeyEvent(const KeyboardEvent& keyEvent) override;\n   47  \n\n/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp:\n  177  }\n  178  \n  179: void ForwardLightingPass::renderUI(Gui::Widgets& widget)\n  180  {\n  181      static const Gui::DropdownList kSampleCountList =\n\n/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h:\n   47  \n   48      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   49:     virtual void renderUI(Gui::Widgets& widget) override;\n   50      virtual Dictionary getScriptingDictionary() override;\n   51  \n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBuffer.cpp:\n   86  }\n   87  \n   88: void GBuffer::renderUI(Gui::Widgets& widget)\n   89  {\n   90      // Render the base class UI first.\n   91:     GBufferBase::renderUI(widget);\n   92  \n   93      // Cull mode controls.\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBuffer.h:\n   38  {\n   39  public:\n   40:     virtual void renderUI(Gui::Widgets& widget) override;\n   41      virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n   42      virtual Dictionary getScriptingDictionary() override;\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp:\n  216  }\n  217  \n  218: void GBufferRT::renderUI(Gui::Widgets& widget)\n  219  {\n  220      // Render the base class UI first.\n  221:     GBuffer::renderUI(widget);\n  222  \n  223      // Ray tracing specific options.\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRT.h:\n   44      RenderPassReflection reflect(const CompileData& compileData) override;\n   45      void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   46:     void renderUI(Gui::Widgets& widget) override;\n   47      Dictionary getScriptingDictionary() override;\n   48      void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBufferBase.cpp:\n   95  }\n   96  \n   97: void GBufferBase::renderUI(Gui::Widgets& widget)\n   98  {\n   99      // Sample pattern controls.\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBufferBase.h:\n   46      };\n   47  \n   48:     virtual void renderUI(Gui::Widgets& widget) override;\n   49      virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n   50      virtual Dictionary getScriptingDictionary() override;\n\n/home/max/dev/Falcor/src/RenderPasses/ImageLoader/ImageLoader.cpp:\n  111  }\n  112  \n  113: void ImageLoader::renderUI(Gui::Widgets& widget)\n  114  {\n  115      bool reloadImage = widget.textbox(\"Image File\", mImageName);\n\n/home/max/dev/Falcor/src/RenderPasses/ImageLoader/ImageLoader.h:\n   46      virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n   47      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   48:     virtual void renderUI(Gui::Widgets& widget) override;\n   49      virtual Dictionary getScriptingDictionary() override;\n   50      virtual std::string getDesc() override { return kDesc; }\n\n/home/max/dev/Falcor/src/RenderPasses/MinimalPathTracer/MinimalPathTracer.cpp:\n  188  }\n  189  \n  190: void MinimalPathTracer::renderUI(Gui::Widgets& widget)\n  191  {\n  192      bool dirty = false;\n\n/home/max/dev/Falcor/src/RenderPasses/MinimalPathTracer/MinimalPathTracer.h:\n   51      virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   52      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   53:     virtual void renderUI(Gui::Widgets& widget) override;\n   54      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   55      virtual bool onMouseEvent(const MouseEvent& mouseEvent) override { return false; }\n\n/home/max/dev/Falcor/src/RenderPasses/PassLibraryTemplate/PassLibraryTemplate.cpp:\n   65  }\n   66  \n   67: void RenderPassTemplate::renderUI(Gui::Widgets& widget)\n   68  {\n   69  }\n\n/home/max/dev/Falcor/src/RenderPasses/PassLibraryTemplate/PassLibraryTemplate.h:\n   50      virtual void compile(RenderContext* pContext, const CompileData& compileData) override {}\n   51      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   52:     virtual void renderUI(Gui::Widgets& widget) override;\n   53      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override {}\n   54      virtual bool onMouseEvent(const MouseEvent& mouseEvent) override { return false; }\n\n/home/max/dev/Falcor/src/RenderPasses/PixelInspectorPass/PixelInspectorPass.cpp:\n  162  }\n  163  \n  164: void PixelInspectorPass::renderUI(Gui::Widgets& widget)\n  165  {\n  166      PixelData pixelData = *reinterpret_cast<const PixelData*>(mpPixelDataBuffer->map(Buffer::MapType::Read));\n\n/home/max/dev/Falcor/src/RenderPasses/PixelInspectorPass/PixelInspectorPass.h:\n   45      virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   46      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   47:     virtual void renderUI(Gui::Widgets& widget) override;\n   48      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   49      virtual bool onMouseEvent(const MouseEvent& mouseEvent) override;\n\n/home/max/dev/Falcor/src/RenderPasses/SkyBox/SkyBox.cpp:\n  167  }\n  168  \n  169: void SkyBox::renderUI(Gui::Widgets& widget)\n  170  {\n  171      float scale = mScale;\n\n/home/max/dev/Falcor/src/RenderPasses/SkyBox/SkyBox.h:\n   46      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   47      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   48:     virtual void renderUI(Gui::Widgets& widget) override;\n   49  \n   50      void setScale(float scale) { mScale = scale; }\n\n/home/max/dev/Falcor/src/RenderPasses/SSAO/SSAO.cpp:\n  212  }\n  213  \n  214: void SSAO::renderUI(Gui::Widgets& widget)\n  215  {\n  216      uint32_t distribution = (uint32_t)mHemisphereDistribution;\n  ...\n  229          if (blurGroup.open())\n  230          {\n  231:             mpBlurGraph->getPass(\"GaussianBlur\")->renderUI(blurGroup);\n  232              blurGroup.release();\n  233          }\n\n/home/max/dev/Falcor/src/RenderPasses/SSAO/SSAO.h:\n   56      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   57      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override { mpScene = pScene; }\n   58:     virtual void renderUI(Gui::Widgets& widget) override;\n   59  \n   60      void setSampleRadius(float radius);\n\n/home/max/dev/Falcor/src/RenderPasses/SVGFPass/SVGFPass.cpp:\n  392  }\n  393  \n  394: void SVGFPass::renderUI(Gui::Widgets& widget)\n  395  {\n  396      int dirty = 0;\n\n/home/max/dev/Falcor/src/RenderPasses/SVGFPass/SVGFPass.h:\n   44      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   45      virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n   46:     virtual void renderUI(Gui::Widgets& widget) override;\n   47  \n   48  private:\n\n/home/max/dev/Falcor/src/RenderPasses/TemporalDelayPass/TemporalDelayPass.cpp:\n  136  }\n  137  \n  138: void TemporalDelayPass::renderUI(Gui::Widgets& widget)\n  139  {\n  140      if (widget.var(\"Delay\", mDelay)) setDelay(mDelay);\n\n/home/max/dev/Falcor/src/RenderPasses/TemporalDelayPass/TemporalDelayPass.h:\n   46      virtual Dictionary getScriptingDictionary() override;\n   47      virtual std::string getDesc() override { return kDesc; }\n   48:     virtual void renderUI(Gui::Widgets& widget) override;\n   49  \n   50      uint32_t getDelay() { return mDelay; }\n\n/home/max/dev/Falcor/src/RenderPasses/ToneMapper/ToneMapper.cpp:\n  268  }\n  269  \n  270: void ToneMapper::renderUI(Gui::Widgets& widget)\n  271  {\n  272      auto exposureGroup = Gui::Group(widget, \"Exposure\", true);\n\n/home/max/dev/Falcor/src/RenderPasses/ToneMapper/ToneMapper.h:\n   50      virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   51      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   52:     virtual void renderUI(Gui::Widgets& widget) override;\n   53  \n   54      // Scripting functions\n\n/home/max/dev/Falcor/src/RenderPasses/Utils/Composite/Composite.cpp:\n  103  }\n  104  \n  105: void Composite::renderUI(Gui::Widgets& widget)\n  106  {\n  107      widget.text(\"This pass scales and adds inputs A and B together\");\n\n/home/max/dev/Falcor/src/RenderPasses/Utils/Composite/Composite.h:\n   44      virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n   45      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   46:     virtual void renderUI(Gui::Widgets& widget) override;\n   47  \n   48      static const char* kDesc;\n\n/home/max/dev/Falcor/src/RenderPasses/Utils/GaussianBlur/GaussianBlur.cpp:\n  169  }\n  170  \n  171: void GaussianBlur::renderUI(Gui::Widgets& widget)\n  172  {\n  173      if (widget.var(\"Kernel Width\", (int&)mKernelWidth, 1, 15, 2)) setKernelWidth(mKernelWidth);\n\n/home/max/dev/Falcor/src/RenderPasses/Utils/GaussianBlur/GaussianBlur.h:\n   53      virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n   54      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   55:     virtual void renderUI(Gui::Widgets& widget) override;\n   56  \n   57      void setKernelWidth(uint32_t kernelWidth);\n\n/home/max/dev/Falcor/src/RenderPasses/WhittedRayTracer/WhittedRayTracer.cpp:\n  227  }\n  228  \n  229: void WhittedRayTracer::renderUI(Gui::Widgets& widget)\n  230  {\n  231      bool dirty = false;\n\n/home/max/dev/Falcor/src/RenderPasses/WhittedRayTracer/WhittedRayTracer.h:\n   53      virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   54      virtual void execute(RenderContext* pRenderContext, const RenderData& renderData) override;\n   55:     virtual void renderUI(Gui::Widgets& widget) override;\n   56      virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   57      virtual bool onMouseEvent(const MouseEvent& mouseEvent) override { return false; }\n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n   53      }\n   54  \n   55:     mpScene->renderUI(w);\n   56  }\n   57  \n\n/home/max/dev/Falcor/src/Samples/ModelViewer/ModelViewer.cpp:\n  121  \n  122      if (w.dropdown(\"Camera Type\", cameraDropdown, (uint32_t&)mCameraType)) setCamController();\n  123:     if (mpScene) mpScene->renderUI(w);\n  124  }\n  125  \n\n/home/max/dev/Falcor/src/Tools/RenderGraphEditor/RenderGraphEditor.cpp:\n  248          editorWindow.windowPos(0, 20);\n  249      }\n  250:     mRenderGraphUIs[mCurrentGraphIndex].renderUI(pRenderContext, pGui);\n  251      editorWindow.release();\n  252  \n\n178 matches across 109 files\n",
			"settings":
			{
				"buffer_size": 428475,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuTimer.h",
			"settings":
			{
				"buffer_size": 3717,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/LowLevelContextData.h",
			"settings":
			{
				"buffer_size": 3534,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Profiler.h",
			"settings":
			{
				"buffer_size": 7984,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Windows/Windows.cpp",
			"settings":
			{
				"buffer_size": 26025,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
			"settings":
			{
				"buffer_size": 139342,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/vulkan/render-vk.cpp",
			"settings":
			{
				"buffer_size": 99401,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgramVarsHelper.cpp",
			"settings":
			{
				"buffer_size": 6214,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/FalcorD3D12.h",
			"settings":
			{
				"buffer_size": 9709,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.cpp",
			"settings":
			{
				"buffer_size": 9422,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.h",
			"settings":
			{
				"buffer_size": 12988,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.slang",
			"settings":
			{
				"buffer_size": 5388,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/ArgList.h",
			"settings":
			{
				"buffer_size": 4141,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.cpp",
			"settings":
			{
				"buffer_size": 22851,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/stdafx.h",
			"settings":
			{
				"buffer_size": 1851,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Renderer.h",
			"settings":
			{
				"buffer_size": 6577,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/UserInput.h",
			"settings":
			{
				"buffer_size": 7610,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.h",
			"settings":
			{
				"buffer_size": 7250,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.h",
			"settings":
			{
				"buffer_size": 26171,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Window.cpp",
			"settings":
			{
				"buffer_size": 19191,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Window.h",
			"settings":
			{
				"buffer_size": 5541,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/ArgList.cpp",
			"settings":
			{
				"buffer_size": 6596,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.h",
			"settings":
			{
				"buffer_size": 7217,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.cpp",
			"settings":
			{
				"buffer_size": 5154,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.h",
			"settings":
			{
				"buffer_size": 11375,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.cpp",
			"settings":
			{
				"buffer_size": 5512,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RasterizerState.h",
			"settings":
			{
				"buffer_size": 7490,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RasterizerState.cpp",
			"settings":
			{
				"buffer_size": 2247,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/QueryHeap.h",
			"settings":
			{
				"buffer_size": 3488,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Formats.h",
			"settings":
			{
				"buffer_size": 13737,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.h",
			"settings":
			{
				"buffer_size": 16860,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1842,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.h",
			"settings":
			{
				"buffer_size": 7997,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 3296,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphImportExport.cpp",
			"settings":
			{
				"buffer_size": 6990,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/ResourceCache.cpp",
			"settings":
			{
				"buffer_size": 8465,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassReflection.cpp",
			"settings":
			{
				"buffer_size": 12218,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 184,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderPasses/ResolvePass.h",
			"settings":
			{
				"buffer_size": 2569,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderPasses/ResolvePass.cpp",
			"settings":
			{
				"buffer_size": 3126,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4786,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "file( GLOB SOURCES"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/FrameRate.h",
			"settings":
			{
				"buffer_size": 3768,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/FrameRate.cpp",
			"settings":
			{
				"buffer_size": 2279,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
			"settings":
			{
				"buffer_size": 6356,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
			"settings":
			{
				"buffer_size": 8049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
			"settings":
			{
				"buffer_size": 29789,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
			"settings":
			{
				"buffer_size": 63194,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
			"settings":
			{
				"buffer_size": 11427,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.cpp",
			"settings":
			{
				"buffer_size": 3511,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphCompiler.cpp",
			"settings":
			{
				"buffer_size": 20000,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
			"settings":
			{
				"buffer_size": 31753,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphUI.cpp",
			"settings":
			{
				"buffer_size": 64727,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/PixelDebug.cpp",
			"settings":
			{
				"buffer_size": 10326,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ParallelReduction.cpp",
			"settings":
			{
				"buffer_size": 5991,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/BitonicSort.cpp",
			"settings":
			{
				"buffer_size": 4500,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp",
			"settings":
			{
				"buffer_size": 9405,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Console.cpp",
			"settings":
			{
				"buffer_size": 4515,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
			"settings":
			{
				"buffer_size": 3485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Clock.cpp",
			"settings":
			{
				"buffer_size": 11260,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/TextureLoader.cpp",
			"settings":
			{
				"buffer_size": 24284,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.h",
			"settings":
			{
				"buffer_size": 5124,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Logger.h",
			"settings":
			{
				"buffer_size": 5415,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Logger.cpp",
			"settings":
			{
				"buffer_size": 6794,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
			"settings":
			{
				"buffer_size": 6079,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Profiler.cpp",
			"settings":
			{
				"buffer_size": 10243,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.cpp",
			"settings":
			{
				"buffer_size": 56025,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Font.cpp",
			"settings":
			{
				"buffer_size": 5058,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
			"settings":
			{
				"buffer_size": 84267,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.cpp",
			"settings":
			{
				"buffer_size": 14907,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.h",
			"settings":
			{
				"buffer_size": 6642,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.cpp",
			"settings":
			{
				"buffer_size": 37566,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.cpp",
			"settings":
			{
				"buffer_size": 13514,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.cpp",
			"settings":
			{
				"buffer_size": 19896,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.h",
			"settings":
			{
				"buffer_size": 13680,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.h",
			"settings":
			{
				"buffer_size": 14483,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
			"settings":
			{
				"buffer_size": 5550,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuTimer.cpp",
			"settings":
			{
				"buffer_size": 4863,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGpuTimer.cpp",
			"settings":
			{
				"buffer_size": 2936,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
			"settings":
			{
				"buffer_size": 5788,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
			"settings":
			{
				"buffer_size": 27058,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
			"settings":
			{
				"buffer_size": 7767,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp",
			"settings":
			{
				"buffer_size": 2373,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
			"settings":
			{
				"buffer_size": 16799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Windows/ProgressBarWin.cpp",
			"settings":
			{
				"buffer_size": 4513,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.h",
			"settings":
			{
				"buffer_size": 17127,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.h",
			"settings":
			{
				"buffer_size": 3807,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.cpp",
			"settings":
			{
				"buffer_size": 15986,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/MogwaiSettings.h",
			"settings":
			{
				"buffer_size": 2575,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/MogwaiSettings.cpp",
			"settings":
			{
				"buffer_size": 10767,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/MogwaiScripting.cpp",
			"settings":
			{
				"buffer_size": 6779,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Shader.h",
			"settings":
			{
				"buffer_size": 8294,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Sampler.h",
			"settings":
			{
				"buffer_size": 7691,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Sampler.cpp",
			"settings":
			{
				"buffer_size": 3799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/stdafx.h",
			"settings":
			{
				"buffer_size": 1831,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/CopyContext.cpp",
			"settings":
			{
				"buffer_size": 7371,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.cpp",
			"settings":
			{
				"buffer_size": 3724,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
			"settings":
			{
				"buffer_size": 5970,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
			"settings":
			{
				"buffer_size": 7591,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12LowLevelContextData.cpp",
			"settings":
			{
				"buffer_size": 4664,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
			"settings":
			{
				"buffer_size": 5474,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FencedPool.h",
			"settings":
			{
				"buffer_size": 4502,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
			"settings":
			{
				"buffer_size": 16226,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
			"settings":
			{
				"buffer_size": 10312,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/render-test/cuda/cuda-compute-util.cpp",
			"settings":
			{
				"buffer_size": 53192,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp",
			"settings":
			{
				"buffer_size": 7301,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
			"settings":
			{
				"buffer_size": 5474,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVersion.h",
			"settings":
			{
				"buffer_size": 10308,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/examples/model-viewer/main.cpp",
			"settings":
			{
				"buffer_size": 86920,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.h",
			"settings":
			{
				"buffer_size": 8361,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RootSignature.h",
			"settings":
			{
				"buffer_size": 6505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RootSignature.cpp",
			"settings":
			{
				"buffer_size": 8573,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/render.h",
			"settings":
			{
				"buffer_size": 28476,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
			"settings":
			{
				"buffer_size": 5145,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.h",
			"settings":
			{
				"buffer_size": 9733,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuMemoryHeap.h",
			"settings":
			{
				"buffer_size": 3971,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp",
			"settings":
			{
				"buffer_size": 2815,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
			"settings":
			{
				"buffer_size": 21970,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
			"settings":
			{
				"buffer_size": 4626,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 7783,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
			"settings":
			{
				"buffer_size": 27543,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGpuFence.cpp",
			"settings":
			{
				"buffer_size": 9726,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12GpuFence.cpp",
			"settings":
			{
				"buffer_size": 3766,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuFence.h",
			"settings":
			{
				"buffer_size": 3246,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
			"settings":
			{
				"buffer_size": 9204,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "falcor.sublime-project",
			"settings":
			{
				"buffer_size": 2115,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeLinter-cpplint\n---------------------\n\n  SublimeLinter-cpplint\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to cpplint.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-cpplint\n\n\nSublimeLinter-cppcheck\n----------------------\n\n  SublimeLinter-cppcheck\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to cppcheck.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-cppcheck\n\n\nSublimeLinter-clang\n-------------------\n\n  SublimeLinter-clang\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to clang.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-clang\n\n\nSublimeLinter\n-------------\n\n  \n    ____        _     _ _                _     _       _\n   / ___| _   _| |__ | (_)_ __ ___   ___| |   (_)_ __ | |_ ___ _ __\n   \\___ \\| | | | '_ \\| | | '_ ` _ \\ / _ \\ |   | | '_ \\| __/ _ \\ '__|\n    ___) | |_| | |_) | | | | | | | |  __/ |___| | | | | ||  __/ |\n   |____/ \\__,_|_.__/|_|_|_| |_| |_|\\___|_____|_|_| |_|\\__\\___|_|\n  \n  \n  Welcome to SublimeLinter, a linter framework for Sublime Text 3.\n  Linters are not included, they must be installed separately.\n  \n  \n  For complete documentation on how to use and configure SublimeLinter,\n  please see: http://www.sublimelinter.com\n  \n  To report issues: https://github.com/SublimeLinter/SublimeLinter\n\n\nSublimeLinter-gcc\n-----------------\n\n  SublimeLinter-gcc\n  =================\n  \n  This linter plugin for [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter) provides an interface to [gcc](https://gcc.gnu.org/) or other gcc-like (cross-)compiler.\n  It will be used with files that have the C/C++ syntax.\n  If you are using [clang](https://clang.llvm.org), you may want to check [SublimeLinter-clang](https://github.com/SublimeLinter/SublimeLinter-clang).\n  \n  \n  Installation\n  ============\n  \n  SublimeLinter must be installed in order to use this plugin.\n  If SublimeLinter is not installed, please follow the instructions\n  [here](http://sublimelinter.readthedocs.org/en/stable/installation.html).\n  \n  \n  Linter installation\n  -------------------\n  \n  Before using this plugin, you must ensure that `gcc` or other gcc-like (cross-)compiler is installed on your system.\n  \n  You may install `gcc` with the following method:\n  \n  - Mac OS X: [OSX GCC Installer](https://github.com/kennethreitz/osx-gcc-installer)\n  - Linux: `gcc` could be installed by using most package managers.\n  - Windows: [MinGW-w64](https://sourceforge.net/projects/mingw-w64)\n  \n  Once `gcc` is installed, you must ensure it is in your system PATH so that SublimeLinter can find it.\n  This may not be as straightforward as you think, so please read [How linter executables are located](http://sublimelinter.readthedocs.org/en/stable/usage.html#how-linter-executables-are-located) in the documentation.\n  \n  \n  Plugin installation\n  -------------------\n  \n  Please use [Package Control](https://sublime.wbond.net/installation) to install the linter plugin.\n  This will ensure that the plugin will be updated when new versions are available.\n  If you want to install from source so you can modify the source code,\n  you probably know what you are doing so we won't cover that here.\n  \n  To install via Package Control, do the following:\n  \n  1. Within Sublime Text, bring up the [Command Palette](http://docs.sublimetext.info/en/sublime-text-3/extensibility/command_palette.html) and type `install`.\n     Among the commands you should see `Package Control: Install Package`.\n     If that command is not highlighted, use the keyboard or mouse to select it.\n     There will be a pause of a few seconds while Package Control fetches the list of available plugins.\n  \n  1. When the plugin list appears, type `gcc`. Among the entries you should see `SublimeLinter-gcc`.\n     If that entry is not highlighted, use the keyboard or mouse to select it.\n  \n  \n  Settings\n  ========\n  \n  Here are some most frequently used custom settings.\n  \n  | Setting | Description |\n  | :------ | :---------- |\n  | executable | The compiler binary path. This is `[\"gcc\"]` or `[\"g++\"]` by default. If you are not using them, you have to set this to your compiler binary such as `[\"arm-none-eabi-gcc\"]`. |\n  | I | A list of directories to be added to the header search paths. I.e., paths for `-I` flags. |\n  | args | A list of extra flags to pass to the compiler. These should be used carefully, as they may cause linting to fail. |\n  \n  \n  Here is an example settings:\n  \n  ```javascript\n  {\n      \"linters\":\n      {\n          \"gcc\": {\n              \"disable\": false,\n              \"executable\": [\"gcc\"],\n              \"args\": [\"-fsyntax-only\", \"-std=c90\"],\n              \"I\": [\n                  \"${file_path}/include\",\n                  \"${folder}/include\",\n                  \"/usr/local/include\",\n              ],\n              \"excludes\": [],\n          },\n          \"g++\": {\n              \"disable\": false,\n              \"executable\": [\"g++\"],\n              \"args\": [\"-fsyntax-only\", \"-std=c++17\"],\n              \"I\": [\n                  \"${file_path}/include\",\n                  \"${folder}/include\",\n                  \"/usr/local/include\",\n              ],\n              \"excludes\": [],\n          },\n      },\n  }\n  ```\n  \n  Here are some useful docs for SublimeLinter settings.\n  \n  - [General information on how SublimeLinter works with settings](http://sublimelinter.readthedocs.org/en/stable/settings.html).\n  - [Variables that can be used in settings](http://www.sublimelinter.com/en/stable/settings.html#settings-expansion).\n  - [Information on generic linter settings](http://sublimelinter.readthedocs.org/en/stable/linter_settings.html).\n  \n  \n  Notes\n  =====\n  \n  - [Here](https://gcc.gnu.org/onlinedocs/gcc-9.1.0/gcc/Warning-Options.html#Warning-Options)\n    is the official list of warning options in gcc 8.2.0. I prefer turn on all warnings\n    via `-Wall` (this is default for this plugin) and then suppress unwanted warnings via `-Wno-` prefix.\n  \n  - Flag `-fsyntax-only` gives a much faster syntax-only checking but\n    [some warnings](https://github.com/SublimeLinter/SublimeLinter-gcc/issues/4)\n    which are emitted in the code optimization phase would not be caught.\n  \n  \n  Demo\n  ====\n  \n  ![linting_example](https://raw.githubusercontent.com/SublimeLinter/SublimeLinter-gcc/gh-pages/images/linting_example_sl4.png)\n  \n  \n  Troubleshooting\n  ===============\n  \n  C/C++ linting is not always straightforward.\n  A few things to try when there's (almost) no linting information available:\n  \n  - Try to compile from the command line, and verify it works.\n  - The linter might be missing some header files. They can be added with settings `I`.\n  - Sometimes gcc fails to locate the C/C++ standard library headers.\n  \n  Assuming the compilation works when executed via command line, try to compile with `g++ -v`.\n  This will display all of the hidden flags that gcc uses.\n  As a last resort, they can all be added in settings `args`.\n  \n  \n  Contributing\n  ============\n  \n  If you would like to contribute enhancements or fixes, please do the following:\n  \n  1. Fork the plugin repository.\n  1. Hack on a separate topic branch created from the latest `master`.\n  1. Commit and push the topic branch.\n  1. Make sure your modification could pass unittests.\n  1. Make a pull request.\n  1. Be patient.\n  \n  Please note that modifications should follow these coding guidelines:\n  \n  - Indent is 4 spaces.\n  - Code should pass flake8 and pep257 linters.\n  - Probably format codes with [black](https://github.com/psf/black) code formatter.\n  - Vertical whitespace helps readability, don’t be afraid to use it.\n  - Please use descriptive variable names, no abbreviations unless they are very well known.\n  \n  Thank you for helping out!\n  \n  \n  Supporters <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ATXYY9Y78EQ3Y\" target=\"_blank\"><img src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" /></a>\n  ==========\n  \n  Thank you guys for sending me some cups of coffee.\n",
			"settings":
			{
				"buffer_size": 8286,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "third_party/slang/external/vulkan/include/vulkan/vulkan.hpp",
			"settings":
			{
				"buffer_size": 2369181,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/include/vulkan/vulkan.hpp",
			"settings":
			{
				"buffer_size": 3544623,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/vulkan/include/vulkan/vulkan_core.h",
			"settings":
			{
				"buffer_size": 451013,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "1:\n\n\n\n3: Take care of a custom GLM\n/home/max/dev/Falcor/src/Falcor/Utils/Math/FalcorMath.h:219:2: error: #error GLM_CLIP_SPACE_Y_TOPDOWN is undefined. It means the custom fix we did in GLM to support Vulkan NDC space is missing. Look at GLMs `setup.hpp` and `glm\\etc\\matrix_clip_space.inl`",
			"settings":
			{
				"buffer_size": 289,
				"line_ending": "Unix",
				"name": "1:"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/FalcorMath.h",
			"settings":
			{
				"buffer_size": 8456,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.h",
			"settings":
			{
				"buffer_size": 13030,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VertexLayout.cpp",
			"settings":
			{
				"buffer_size": 1862,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/FalcorConfig.h",
			"settings":
			{
				"buffer_size": 2513,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Falcor.h",
			"settings":
			{
				"buffer_size": 6944,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/PixelDebug.h",
			"settings":
			{
				"buffer_size": 5658,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
			"settings":
			{
				"buffer_size": 10841,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorPool.h",
			"settings":
			{
				"buffer_size": 4859,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.h",
			"settings":
			{
				"buffer_size": 10462,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.cpp",
			"settings":
			{
				"buffer_size": 9188,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/ComputeState.cpp",
			"settings":
			{
				"buffer_size": 3479,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/ComputeState.h",
			"settings":
			{
				"buffer_size": 3657,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgram/RtProgram.cpp",
			"settings":
			{
				"buffer_size": 7986,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgram/RtProgram.h",
			"settings":
			{
				"buffer_size": 6561,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/AppData.h",
			"settings":
			{
				"buffer_size": 2896,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Linux/ProgressBarLinux.cpp",
			"settings":
			{
				"buffer_size": 5059,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/AppData.cpp",
			"settings":
			{
				"buffer_size": 5368,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.cpp",
			"settings":
			{
				"buffer_size": 23983,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VertexLayout.h",
			"settings":
			{
				"buffer_size": 7327,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.cpp",
			"settings":
			{
				"buffer_size": 11359,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.h",
			"settings":
			{
				"buffer_size": 5235,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 2524,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.cpp",
			"settings":
			{
				"buffer_size": 3567,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Falcor.sln",
			"settings":
			{
				"buffer_size": 19418,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.h",
			"settings":
			{
				"buffer_size": 24873,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphUI.h",
			"settings":
			{
				"buffer_size": 8553,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.h",
			"settings":
			{
				"buffer_size": 4132,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/DebugConsole.h",
			"settings":
			{
				"buffer_size": 4137,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/debug.h",
			"settings":
			{
				"buffer_size": 1646,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#ifndef __FALCOR_DEBUG_H__"
			}
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
			"settings":
			{
				"buffer_size": 21369,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.cpp",
			"settings":
			{
				"buffer_size": 53094,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12Resource.cpp",
			"settings":
			{
				"buffer_size": 6227,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/max/dev/Falcor",
		"/home/max/dev/Falcor/src",
		"/home/max/dev/Falcor/src/Falcor",
		"/home/max/dev/Falcor/src/Falcor/Core",
		"/home/max/dev/Falcor/src/Falcor/Core/API",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
		"/home/max/dev/Falcor/src/Falcor/RenderPasses",
		"/home/max/dev/Falcor/src/Falcor/Scene",
		"/home/max/dev/Falcor/src/Falcor/Utils",
		"/home/max/dev/Falcor/src/Falcor/Utils/Timing",
		"/home/max/dev/Falcor/src/Falcor/Utils/UI",
		"/home/max/dev/Falcor/src/Mogwai",
		"/home/max/dev/Falcor/src/Mogwai/Data",
		"/home/max/dev/Falcor/src/RenderPasses",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer"
	],
	"file_history":
	[
		"/home/max/.config/sublime-text-3/Packages/SublimeLinter-gcc/miscellaneous/demo.cpp",
		"/home/max/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
		"/home/max/Downloads/Telegram Desktop/scene.v001.usda",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/eevee_occlusion_trace.c",
		"/home/max/dev/blender/release/scripts/startup/bl_ui/__init__.py",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/shaders/common_fullscreen_embree_vert.glsl",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/shaders/common_uniforms_embree_lib.glsl",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/eevee_objects_map.h",
		"/home/max/dev/blender/source/blender/blenlib/intern/winstuff_dir.c",
		"/home/max/dev/blender/source/blender/draw/intern/draw_cache_extract.h",
		"/home/max/dev/blender/source/blender/draw/engines/workbench/workbench_engine.c",
		"/home/max/dev/blender/source/blender/draw/DRW_engine_types.h",
		"/home/max/dev/blender/source/blender/blenlib/BLI_hash.h",
		"/home/max/dev/blender/source/blender/blenlib/BLI_index_range.h",
		"/home/max/dev/blender/source/blender/bmesh/intern/bmesh_operators_private.h",
		"/home/max/dev/blender/source/blender/bmesh/intern/bmesh_operators.h",
		"/home/max/dev/blender/source/blender/python/intern/CMakeLists.txt",
		"/home/max/dev/blender/source/blender/blenlib/intern/BLI_ghash_utils.c",
		"/home/max/dev/blender/source/blender/blenlib/intern/BLI_ghash.c",
		"/home/max/dev/blender/source/blender/blenloader/intern/versioning_280.c",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/shaders/ambient_occlusion_trace_lib.glsl",
		"/home/max/dev/bivis/src/blender/addon/ui.py",
		"/home/max/dev/bivis/src/blender/addon/presets.py",
		"/home/max/dev/bivis/src/blender/addon/properties.py",
		"/home/max/dev/bivis/src/blender/addon/osl.py",
		"/home/max/dev/bivis/src/blender/addon/operators.py",
		"/home/max/dev/bivis/src/blender/blender_python.cpp",
		"/home/max/dev/bivis/src/blender/addon/engine.py",
		"/home/max/dev/bivis/src/blender/addon/__init__.py",
		"/home/max/dev/bivis/src/blender/CMakeLists.txt",
		"/home/max/dev/blender/intern/CMakeLists.txt",
		"/home/max/dev/unity/scripts/mesh_smoother.cs",
		"/home/max/dev/unity/scripts/mesh_helper.cs",
		"/home/max/dev/fasta/src/fasta_lib/renderer.h",
		"/home/max/dev/fasta/CMakeLists.txt",
		"/home/max/dev/fasta/third_party/glad/include/KHR/khrplatform.h",
		"/home/max/dev/fasta/third_party/glad/include/glad/glad.h",
		"/home/max/dev/fasta/src/locomotive_lib/logging.h",
		"/home/max/dev/fasta/src/locomotive_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/locomotive_lib/logging.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.h",
		"/home/max/dev/fasta/src/xenon_py/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.h",
		"/home/max/dev/fasta/src/xenon_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_cmd/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Mesh.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.cpp",
		"/home/max/dev/fasta/src/xenon_cmd/fsquad.h",
		"/home/max/dev/fasta/src/xenon_cmd/xenon.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.cpp",
		"/home/max/projects/Xenon/xenon.sublime-project",
		"/home/max/projects/Xenon/src/ROP_Xenon.h",
		"/home/max/projects/Xenon/src/ROP_Xenon.cpp",
		"/home/max/projects/Xenon/makefile"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/home/max/dev/Falcor/src/",
			"/home/max/dev/Falcor/src/Mogwai",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"renderUI",
			"mShowUI",
			"Failed to create font resource",
			"gShaderDirectories",
			"Can't find file",
			"DescriptorSetApiHandle",
			"Utils/String",
			"Core/API/GpuFenc",
			"Core/API/LowLevel",
			"Core/API/GpuTimer",
			"RtvHandle",
			"VULKAN_HPP_TYPESAFE_CONVERSION",
			"VkImageView",
			"RtvHandle",
			"RenderTargetView",
			"gRTV-1",
			"createViewCommon",
			"createCommonView",
			"ConstTextureSharedPtrRef",
			"bad_weak_ptr",
			"printf(\"Exe",
			"sBlackTexture",
			"createBlackTexture",
			"printf(\"222",
			"createViewCommon",
			"printf(\"11",
			"111",
			"ApiHandle",
			"DeviceHandle",
			"CreateDepthStencilView",
			"FIAH-1",
			"RenderTargetView",
			"DepthStencilView",
			"222-1",
			"2222-1",
			"FIAH",
			"CreateRenderTargetView",
			"DeviceHandle",
			"ConstTextureSharedPtrRef",
			"RenderTargetView",
			"mpRenderContext",
			"msgBox",
			"sFrameWindow",
			"ShaderResourceView::create",
			"ShaderResourceView",
			"sFrameWindow",
			"postQuitMessage",
			"PostQuitMessage",
			"postQuitMessage",
			"setMainWindowHandle",
			"FrameRate",
			"LightCollection",
			"ParameterBlock",
			"OSServices",
			"genTangSpaceDefault",
			"spReflectionType_GetKind",
			"msgBox(",
			"MsgBox",
			"getCommandList",
			"SetGraphicsRoot32BitConstants",
			"ID3D12GraphicsCommandListPtr",
			"SetGraphicsRoot32BitConstants",
			"_PROJECT_DIR_",
			"mpData",
			"dirname",
			"gMsgBoxTitle",
			"initVkShaderStageInfo",
			"getShader",
			"ProgramVars",
			"initVkShaderStageInfo",
			"CreateShaderResourceView",
			"ShaderResourceView",
			"createTextureSrvDesc",
			"createSrvDescriptor",
			"ShaderResourceView",
			"D3D12_SHADER_RESOURCE_VIEW_DESC",
			"FenceHandle",
			"uint2",
			"appInit",
			"apiInit",
			"createLogicalDevice",
			"setSrvUavCommon",
			"TypedBufferBase",
			"D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION",
			"ID3D12GraphicsCommandListPtr",
			"CommandListHandle",
			"VkCommandBuffer_T",
			"getCommandList",
			"GpuAccessFlags",
			"ArgList.h",
			"ArgList",
			"RtStateObject",
			"AllocConsole",
			"HANDLE",
			"SharedResourceApiHandle",
			"glm",
			"GLM_CLIP_SPACE_Y_TOPDOWN"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"spData"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 40,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18914,
						"regions":
						{
						},
						"selection":
						[
							[
								18714,
								18714
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7396.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 428475,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										239,
										253
									],
									[
										662,
										676
									],
									[
										963,
										977
									],
									[
										1289,
										1303
									],
									[
										1728,
										1742
									],
									[
										1974,
										1988
									],
									[
										2218,
										2232
									],
									[
										2421,
										2435
									],
									[
										2599,
										2613
									],
									[
										2860,
										2874
									],
									[
										2920,
										2934
									],
									[
										3217,
										3231
									],
									[
										3474,
										3488
									],
									[
										3597,
										3611
									],
									[
										3657,
										3671
									],
									[
										3848,
										3862
									],
									[
										3932,
										3946
									],
									[
										4227,
										4241
									],
									[
										4615,
										4629
									],
									[
										4750,
										4764
									],
									[
										4767,
										4781
									],
									[
										4814,
										4828
									],
									[
										4840,
										4854
									],
									[
										5139,
										5153
									],
									[
										5285,
										5299
									],
									[
										5311,
										5325
									],
									[
										5340,
										5354
									],
									[
										5480,
										5494
									],
									[
										5576,
										5590
									],
									[
										5602,
										5616
									],
									[
										5791,
										5805
									],
									[
										5917,
										5931
									],
									[
										5933,
										5947
									],
									[
										6016,
										6030
									],
									[
										6269,
										6283
									],
									[
										6473,
										6487
									],
									[
										6645,
										6659
									],
									[
										6912,
										6926
									],
									[
										6953,
										6967
									],
									[
										7019,
										7033
									],
									[
										7151,
										7165
									],
									[
										7242,
										7256
									],
									[
										7309,
										7323
									],
									[
										7481,
										7495
									],
									[
										7668,
										7682
									],
									[
										7876,
										7890
									],
									[
										8072,
										8086
									],
									[
										8306,
										8320
									],
									[
										8548,
										8562
									],
									[
										8780,
										8794
									],
									[
										8976,
										8990
									],
									[
										8995,
										9009
									],
									[
										9041,
										9055
									],
									[
										9333,
										9347
									],
									[
										9438,
										9452
									],
									[
										9500,
										9514
									],
									[
										9743,
										9757
									],
									[
										9942,
										9956
									],
									[
										10044,
										10058
									],
									[
										10189,
										10203
									],
									[
										10340,
										10354
									],
									[
										10359,
										10373
									],
									[
										10414,
										10428
									],
									[
										10521,
										10535
									],
									[
										10631,
										10645
									],
									[
										10696,
										10710
									],
									[
										10800,
										10814
									],
									[
										10826,
										10840
									],
									[
										10845,
										10859
									],
									[
										11152,
										11166
									],
									[
										11259,
										11273
									],
									[
										11309,
										11323
									],
									[
										11335,
										11349
									],
									[
										11354,
										11368
									],
									[
										11481,
										11495
									],
									[
										11593,
										11607
									],
									[
										11650,
										11664
									],
									[
										11739,
										11753
									],
									[
										11996,
										12010
									],
									[
										12258,
										12272
									],
									[
										12508,
										12522
									],
									[
										12680,
										12694
									],
									[
										12898,
										12912
									],
									[
										13058,
										13072
									],
									[
										13240,
										13254
									],
									[
										13479,
										13493
									],
									[
										13683,
										13697
									],
									[
										13864,
										13878
									],
									[
										14070,
										14084
									],
									[
										14299,
										14313
									],
									[
										14502,
										14516
									],
									[
										14692,
										14706
									],
									[
										14940,
										14954
									],
									[
										15114,
										15128
									],
									[
										15321,
										15335
									],
									[
										15572,
										15586
									],
									[
										15845,
										15859
									],
									[
										16178,
										16192
									],
									[
										16397,
										16411
									],
									[
										16583,
										16597
									],
									[
										16790,
										16804
									],
									[
										16827,
										16841
									],
									[
										16965,
										16979
									],
									[
										17005,
										17019
									],
									[
										17231,
										17245
									],
									[
										17326,
										17340
									],
									[
										17596,
										17610
									],
									[
										17839,
										17853
									],
									[
										18108,
										18122
									],
									[
										18363,
										18377
									],
									[
										18523,
										18537
									],
									[
										18618,
										18632
									],
									[
										18888,
										18902
									],
									[
										19015,
										19029
									],
									[
										19043,
										19057
									],
									[
										19084,
										19098
									],
									[
										19239,
										19253
									],
									[
										19304,
										19318
									],
									[
										19487,
										19501
									],
									[
										19535,
										19549
									],
									[
										19856,
										19870
									],
									[
										20079,
										20093
									],
									[
										20254,
										20268
									],
									[
										20540,
										20554
									],
									[
										20732,
										20746
									],
									[
										20931,
										20945
									],
									[
										21130,
										21144
									],
									[
										21274,
										21288
									],
									[
										21431,
										21445
									],
									[
										21464,
										21478
									],
									[
										21483,
										21497
									],
									[
										21691,
										21705
									],
									[
										21781,
										21795
									],
									[
										21805,
										21819
									],
									[
										21827,
										21841
									],
									[
										21854,
										21868
									],
									[
										22062,
										22076
									],
									[
										22150,
										22164
									],
									[
										22210,
										22224
									],
									[
										22405,
										22419
									],
									[
										22474,
										22488
									],
									[
										22843,
										22857
									],
									[
										22925,
										22939
									],
									[
										23301,
										23315
									],
									[
										23437,
										23451
									],
									[
										23648,
										23662
									],
									[
										23828,
										23842
									],
									[
										23870,
										23884
									],
									[
										24087,
										24101
									],
									[
										24394,
										24408
									],
									[
										24588,
										24602
									],
									[
										24688,
										24702
									],
									[
										24748,
										24762
									],
									[
										24894,
										24908
									],
									[
										25058,
										25072
									],
									[
										25354,
										25368
									],
									[
										25514,
										25528
									],
									[
										25648,
										25662
									],
									[
										25812,
										25826
									],
									[
										25918,
										25932
									],
									[
										26246,
										26260
									],
									[
										26361,
										26375
									],
									[
										26630,
										26644
									],
									[
										26837,
										26851
									],
									[
										27135,
										27149
									],
									[
										27195,
										27209
									],
									[
										27414,
										27428
									],
									[
										27650,
										27664
									],
									[
										27845,
										27859
									],
									[
										27962,
										27976
									],
									[
										28245,
										28259
									],
									[
										28508,
										28522
									],
									[
										28607,
										28621
									],
									[
										28683,
										28697
									],
									[
										28777,
										28791
									],
									[
										28860,
										28874
									],
									[
										29018,
										29032
									],
									[
										29076,
										29090
									],
									[
										29150,
										29164
									],
									[
										29444,
										29458
									],
									[
										29524,
										29538
									],
									[
										29548,
										29562
									],
									[
										29625,
										29639
									],
									[
										29717,
										29731
									],
									[
										29779,
										29793
									],
									[
										30065,
										30079
									],
									[
										30356,
										30370
									],
									[
										30402,
										30416
									],
									[
										30613,
										30627
									],
									[
										30668,
										30682
									],
									[
										30909,
										30923
									],
									[
										30938,
										30952
									],
									[
										31193,
										31207
									],
									[
										31222,
										31236
									],
									[
										31501,
										31515
									],
									[
										31724,
										31738
									],
									[
										31991,
										32005
									],
									[
										32028,
										32042
									],
									[
										32331,
										32345
									],
									[
										32453,
										32467
									],
									[
										32603,
										32617
									],
									[
										32680,
										32694
									],
									[
										32883,
										32897
									],
									[
										32994,
										33008
									],
									[
										33303,
										33317
									],
									[
										33488,
										33502
									],
									[
										33655,
										33669
									],
									[
										33776,
										33790
									],
									[
										34029,
										34043
									],
									[
										34253,
										34267
									],
									[
										34304,
										34318
									],
									[
										34471,
										34485
									],
									[
										34492,
										34506
									],
									[
										34876,
										34890
									],
									[
										34909,
										34923
									],
									[
										35193,
										35207
									],
									[
										35315,
										35329
									],
									[
										35392,
										35406
									],
									[
										35681,
										35695
									],
									[
										35813,
										35827
									],
									[
										35989,
										36003
									],
									[
										36334,
										36348
									],
									[
										36581,
										36595
									],
									[
										36883,
										36897
									],
									[
										37278,
										37292
									],
									[
										37557,
										37571
									],
									[
										37830,
										37844
									],
									[
										38156,
										38170
									],
									[
										38531,
										38545
									],
									[
										38831,
										38845
									],
									[
										39084,
										39098
									],
									[
										39406,
										39420
									],
									[
										39690,
										39704
									],
									[
										39989,
										40003
									],
									[
										40337,
										40351
									],
									[
										40621,
										40635
									],
									[
										40747,
										40761
									],
									[
										40828,
										40842
									],
									[
										40888,
										40902
									],
									[
										41014,
										41028
									],
									[
										41307,
										41321
									],
									[
										41584,
										41598
									],
									[
										41865,
										41879
									],
									[
										42118,
										42132
									],
									[
										42418,
										42432
									],
									[
										42688,
										42702
									],
									[
										42933,
										42947
									],
									[
										43186,
										43200
									],
									[
										43458,
										43472
									],
									[
										43698,
										43712
									],
									[
										43933,
										43947
									],
									[
										44203,
										44217
									],
									[
										44482,
										44496
									],
									[
										44667,
										44681
									],
									[
										44930,
										44944
									],
									[
										44982,
										44996
									],
									[
										45124,
										45138
									],
									[
										45312,
										45326
									],
									[
										45495,
										45509
									],
									[
										45938,
										45952
									],
									[
										45990,
										46004
									],
									[
										46196,
										46210
									],
									[
										46369,
										46383
									],
									[
										46390,
										46404
									],
									[
										46527,
										46541
									],
									[
										46553,
										46567
									],
									[
										46722,
										46736
									],
									[
										46758,
										46772
									],
									[
										46900,
										46914
									],
									[
										46981,
										46995
									],
									[
										47141,
										47155
									],
									[
										47177,
										47191
									],
									[
										47370,
										47384
									],
									[
										47406,
										47420
									],
									[
										47600,
										47614
									],
									[
										47774,
										47788
									],
									[
										47951,
										47965
									],
									[
										48113,
										48127
									],
									[
										48279,
										48293
									],
									[
										48547,
										48561
									],
									[
										48851,
										48865
									],
									[
										49105,
										49119
									],
									[
										49409,
										49423
									],
									[
										49630,
										49644
									],
									[
										49890,
										49904
									],
									[
										50119,
										50133
									],
									[
										50223,
										50237
									],
									[
										50283,
										50297
									],
									[
										50327,
										50341
									],
									[
										50621,
										50635
									],
									[
										50912,
										50926
									],
									[
										50972,
										50986
									],
									[
										51069,
										51083
									],
									[
										51313,
										51327
									],
									[
										51473,
										51487
									],
									[
										51727,
										51741
									],
									[
										51937,
										51951
									],
									[
										52003,
										52017
									],
									[
										52180,
										52194
									],
									[
										52345,
										52359
									],
									[
										52482,
										52496
									],
									[
										52545,
										52559
									],
									[
										52790,
										52804
									],
									[
										52915,
										52929
									],
									[
										52954,
										52968
									],
									[
										53270,
										53284
									],
									[
										53584,
										53598
									],
									[
										53864,
										53878
									],
									[
										54066,
										54080
									],
									[
										54476,
										54490
									],
									[
										54682,
										54696
									],
									[
										54891,
										54905
									],
									[
										55142,
										55156
									],
									[
										55377,
										55391
									],
									[
										55407,
										55421
									],
									[
										55450,
										55464
									],
									[
										55500,
										55514
									],
									[
										55552,
										55566
									],
									[
										55629,
										55643
									],
									[
										55864,
										55878
									],
									[
										55892,
										55906
									],
									[
										56117,
										56131
									],
									[
										56147,
										56161
									],
									[
										56190,
										56204
									],
									[
										56240,
										56254
									],
									[
										56292,
										56306
									],
									[
										56369,
										56383
									],
									[
										56553,
										56567
									],
									[
										56581,
										56595
									],
									[
										56787,
										56801
									],
									[
										56850,
										56864
									],
									[
										56957,
										56971
									],
									[
										57044,
										57058
									],
									[
										57285,
										57299
									],
									[
										57725,
										57739
									],
									[
										58074,
										58088
									],
									[
										58343,
										58357
									],
									[
										58606,
										58620
									],
									[
										58843,
										58857
									],
									[
										58906,
										58920
									],
									[
										58979,
										58993
									],
									[
										59045,
										59059
									],
									[
										59230,
										59244
									],
									[
										59456,
										59470
									],
									[
										59692,
										59706
									],
									[
										60022,
										60036
									],
									[
										60352,
										60366
									],
									[
										60503,
										60517
									],
									[
										60528,
										60542
									],
									[
										60622,
										60636
									],
									[
										60680,
										60694
									],
									[
										60913,
										60927
									],
									[
										61208,
										61222
									],
									[
										61415,
										61429
									],
									[
										61617,
										61631
									],
									[
										61661,
										61675
									],
									[
										61811,
										61825
									],
									[
										61862,
										61876
									],
									[
										62177,
										62191
									],
									[
										62198,
										62212
									],
									[
										62330,
										62344
									],
									[
										62654,
										62668
									],
									[
										62724,
										62738
									],
									[
										62925,
										62939
									],
									[
										62942,
										62956
									],
									[
										62964,
										62978
									],
									[
										62991,
										63005
									],
									[
										63100,
										63114
									],
									[
										63213,
										63227
									],
									[
										63364,
										63378
									],
									[
										63399,
										63413
									],
									[
										63432,
										63446
									],
									[
										63469,
										63483
									],
									[
										63496,
										63510
									],
									[
										63772,
										63786
									],
									[
										64055,
										64069
									],
									[
										64072,
										64086
									],
									[
										64165,
										64179
									],
									[
										64328,
										64342
									],
									[
										64582,
										64596
									],
									[
										64610,
										64624
									],
									[
										64780,
										64794
									],
									[
										64808,
										64822
									],
									[
										64888,
										64902
									],
									[
										64991,
										65005
									],
									[
										65281,
										65295
									],
									[
										65300,
										65314
									],
									[
										65370,
										65384
									],
									[
										65654,
										65668
									],
									[
										65694,
										65708
									],
									[
										65727,
										65741
									],
									[
										65764,
										65778
									],
									[
										65791,
										65805
									],
									[
										66065,
										66079
									],
									[
										66255,
										66269
									],
									[
										66354,
										66368
									],
									[
										66561,
										66575
									],
									[
										66897,
										66911
									],
									[
										67122,
										67136
									],
									[
										67225,
										67239
									],
									[
										67352,
										67366
									],
									[
										67475,
										67489
									],
									[
										67535,
										67549
									],
									[
										67722,
										67736
									],
									[
										67741,
										67755
									],
									[
										67812,
										67826
									],
									[
										68101,
										68115
									],
									[
										68405,
										68419
									],
									[
										68592,
										68606
									],
									[
										68872,
										68886
									],
									[
										69108,
										69122
									],
									[
										69338,
										69352
									],
									[
										69588,
										69602
									],
									[
										69805,
										69819
									],
									[
										69885,
										69899
									],
									[
										70196,
										70210
									],
									[
										70563,
										70577
									],
									[
										70643,
										70657
									],
									[
										70834,
										70848
									],
									[
										71098,
										71112
									],
									[
										71325,
										71339
									],
									[
										71631,
										71645
									],
									[
										72020,
										72034
									],
									[
										72152,
										72166
									],
									[
										72477,
										72491
									],
									[
										72714,
										72728
									],
									[
										72952,
										72966
									],
									[
										73179,
										73193
									],
									[
										73407,
										73421
									],
									[
										73559,
										73573
									],
									[
										73596,
										73610
									],
									[
										73674,
										73688
									],
									[
										73812,
										73826
									],
									[
										73890,
										73904
									],
									[
										74074,
										74088
									],
									[
										74238,
										74252
									],
									[
										74268,
										74282
									],
									[
										74338,
										74352
									],
									[
										74493,
										74507
									],
									[
										74558,
										74572
									],
									[
										74749,
										74763
									],
									[
										74927,
										74941
									],
									[
										75194,
										75208
									],
									[
										75397,
										75411
									],
									[
										75660,
										75674
									],
									[
										75697,
										75711
									],
									[
										75962,
										75976
									],
									[
										75981,
										75995
									],
									[
										76278,
										76292
									],
									[
										76613,
										76627
									],
									[
										76918,
										76932
									],
									[
										77040,
										77054
									],
									[
										77158,
										77172
									],
									[
										77266,
										77280
									],
									[
										77409,
										77423
									],
									[
										77819,
										77833
									],
									[
										78012,
										78026
									],
									[
										78226,
										78240
									],
									[
										78404,
										78418
									],
									[
										78580,
										78594
									],
									[
										78902,
										78916
									],
									[
										79248,
										79262
									],
									[
										79571,
										79585
									],
									[
										79782,
										79796
									],
									[
										80081,
										80095
									],
									[
										80319,
										80333
									],
									[
										80397,
										80411
									],
									[
										80644,
										80658
									],
									[
										80885,
										80899
									],
									[
										81111,
										81125
									],
									[
										81338,
										81352
									],
									[
										81425,
										81439
									],
									[
										81668,
										81682
									],
									[
										81980,
										81994
									],
									[
										82242,
										82256
									],
									[
										82349,
										82363
									],
									[
										82524,
										82538
									],
									[
										82820,
										82834
									],
									[
										82949,
										82963
									],
									[
										83073,
										83087
									],
									[
										83233,
										83247
									],
									[
										83647,
										83661
									],
									[
										84015,
										84029
									],
									[
										84245,
										84259
									],
									[
										84523,
										84537
									],
									[
										84768,
										84782
									],
									[
										85100,
										85114
									],
									[
										85184,
										85198
									],
									[
										85200,
										85214
									],
									[
										85295,
										85309
									],
									[
										85894,
										85908
									],
									[
										85931,
										85945
									],
									[
										86136,
										86150
									],
									[
										86286,
										86300
									],
									[
										86533,
										86547
									],
									[
										86565,
										86579
									],
									[
										86861,
										86875
									],
									[
										87160,
										87174
									],
									[
										87515,
										87530
									],
									[
										87723,
										87738
									],
									[
										87852,
										87867
									],
									[
										87870,
										87885
									],
									[
										88173,
										88188
									],
									[
										88343,
										88358
									],
									[
										88586,
										88601
									],
									[
										88829,
										88844
									],
									[
										89064,
										89079
									],
									[
										89408,
										89423
									],
									[
										89844,
										89859
									],
									[
										90083,
										90098
									],
									[
										90367,
										90382
									],
									[
										90584,
										90599
									],
									[
										90759,
										90774
									],
									[
										91193,
										91208
									],
									[
										91545,
										91560
									],
									[
										91748,
										91763
									],
									[
										91782,
										91797
									],
									[
										91858,
										91873
									],
									[
										92018,
										92033
									],
									[
										92358,
										92373
									],
									[
										92651,
										92666
									],
									[
										92685,
										92700
									],
									[
										92706,
										92721
									],
									[
										92723,
										92738
									],
									[
										92943,
										92958
									],
									[
										93151,
										93166
									],
									[
										93287,
										93302
									],
									[
										93321,
										93336
									],
									[
										93516,
										93531
									],
									[
										93550,
										93565
									],
									[
										93680,
										93695
									],
									[
										93714,
										93729
									],
									[
										94039,
										94054
									],
									[
										94102,
										94117
									],
									[
										94379,
										94394
									],
									[
										94442,
										94457
									],
									[
										94917,
										94932
									],
									[
										95210,
										95225
									],
									[
										95490,
										95505
									],
									[
										95679,
										95694
									],
									[
										96077,
										96092
									],
									[
										96349,
										96364
									],
									[
										96779,
										96794
									],
									[
										96815,
										96830
									],
									[
										96940,
										96955
									],
									[
										96967,
										96982
									],
									[
										97118,
										97133
									],
									[
										97248,
										97263
									],
									[
										97369,
										97384
									],
									[
										97483,
										97498
									],
									[
										97650,
										97665
									],
									[
										97828,
										97843
									],
									[
										98098,
										98113
									],
									[
										98336,
										98351
									],
									[
										98463,
										98478
									],
									[
										98613,
										98628
									],
									[
										98958,
										98973
									],
									[
										99211,
										99226
									],
									[
										99424,
										99439
									],
									[
										99607,
										99622
									],
									[
										99935,
										99950
									],
									[
										100122,
										100137
									],
									[
										100507,
										100522
									],
									[
										100735,
										100750
									],
									[
										100848,
										100863
									],
									[
										100982,
										100997
									],
									[
										101151,
										101166
									],
									[
										101447,
										101462
									],
									[
										101600,
										101615
									],
									[
										101925,
										101940
									],
									[
										102079,
										102094
									],
									[
										102295,
										102310
									],
									[
										102353,
										102368
									],
									[
										102708,
										102723
									],
									[
										102869,
										102884
									],
									[
										102923,
										102938
									],
									[
										103021,
										103036
									],
									[
										103102,
										103117
									],
									[
										103181,
										103196
									],
									[
										103294,
										103309
									],
									[
										103449,
										103464
									],
									[
										103641,
										103656
									],
									[
										103710,
										103725
									],
									[
										103932,
										103947
									],
									[
										104142,
										104157
									],
									[
										104304,
										104319
									],
									[
										104740,
										104755
									],
									[
										105179,
										105194
									],
									[
										105503,
										105518
									],
									[
										105872,
										105887
									],
									[
										106259,
										106274
									],
									[
										106656,
										106671
									],
									[
										107047,
										107062
									],
									[
										107290,
										107305
									],
									[
										107541,
										107556
									],
									[
										107797,
										107812
									],
									[
										108147,
										108162
									],
									[
										108322,
										108337
									],
									[
										108367,
										108382
									],
									[
										108443,
										108458
									],
									[
										108498,
										108513
									],
									[
										108516,
										108531
									],
									[
										108592,
										108607
									],
									[
										108698,
										108713
									],
									[
										108813,
										108828
									],
									[
										108834,
										108849
									],
									[
										108894,
										108909
									],
									[
										109044,
										109059
									],
									[
										109232,
										109247
									],
									[
										109542,
										109557
									],
									[
										109865,
										109880
									],
									[
										110127,
										110142
									],
									[
										110165,
										110180
									],
									[
										110501,
										110516
									],
									[
										110530,
										110545
									],
									[
										110988,
										111003
									],
									[
										111166,
										111181
									],
									[
										111450,
										111459
									],
									[
										111605,
										111614
									],
									[
										111663,
										111672
									],
									[
										111677,
										111686
									],
									[
										111940,
										111949
									],
									[
										112100,
										112109
									],
									[
										112288,
										112297
									],
									[
										112409,
										112418
									],
									[
										112676,
										112685
									],
									[
										112923,
										112932
									],
									[
										112937,
										112946
									],
									[
										112968,
										112977
									],
									[
										113235,
										113244
									],
									[
										113246,
										113255
									],
									[
										113448,
										113457
									],
									[
										113745,
										113754
									],
									[
										114041,
										114050
									],
									[
										114348,
										114357
									],
									[
										114539,
										114548
									],
									[
										114811,
										114820
									],
									[
										114914,
										114923
									],
									[
										115163,
										115172
									],
									[
										115220,
										115229
									],
									[
										115376,
										115385
									],
									[
										115698,
										115717
									],
									[
										115942,
										115961
									],
									[
										116186,
										116205
									],
									[
										116590,
										116609
									],
									[
										116834,
										116853
									],
									[
										117078,
										117097
									],
									[
										117403,
										117418
									],
									[
										117574,
										117589
									],
									[
										117806,
										117821
									],
									[
										117999,
										118014
									],
									[
										118324,
										118339
									],
									[
										118518,
										118533
									],
									[
										118797,
										118812
									],
									[
										118968,
										118983
									],
									[
										119200,
										119215
									],
									[
										119393,
										119408
									],
									[
										119714,
										119726
									],
									[
										119876,
										119888
									],
									[
										120120,
										120132
									],
									[
										120387,
										120399
									],
									[
										120497,
										120509
									],
									[
										120709,
										120727
									],
									[
										120955,
										120973
									],
									[
										121103,
										121121
									],
									[
										121209,
										121227
									],
									[
										121461,
										121479
									],
									[
										121734,
										121752
									],
									[
										122041,
										122059
									],
									[
										122306,
										122324
									],
									[
										122691,
										122709
									],
									[
										122867,
										122885
									],
									[
										123106,
										123124
									],
									[
										123376,
										123394
									],
									[
										123527,
										123545
									],
									[
										123660,
										123678
									],
									[
										123690,
										123708
									],
									[
										124002,
										124020
									],
									[
										124186,
										124204
									],
									[
										124216,
										124234
									],
									[
										124480,
										124498
									],
									[
										124726,
										124744
									],
									[
										124986,
										125004
									],
									[
										125419,
										125437
									],
									[
										125859,
										125877
									],
									[
										126087,
										126105
									],
									[
										126511,
										126529
									],
									[
										126783,
										126801
									],
									[
										126814,
										126832
									],
									[
										127169,
										127187
									],
									[
										127389,
										127407
									],
									[
										127522,
										127540
									],
									[
										127603,
										127621
									],
									[
										127977,
										127995
									],
									[
										128286,
										128304
									],
									[
										128564,
										128582
									],
									[
										128786,
										128804
									],
									[
										128918,
										128936
									],
									[
										129257,
										129275
									],
									[
										129433,
										129451
									],
									[
										129719,
										129737
									],
									[
										130061,
										130079
									],
									[
										130453,
										130471
									],
									[
										130765,
										130783
									],
									[
										131129,
										131147
									],
									[
										131159,
										131177
									],
									[
										131515,
										131533
									],
									[
										131687,
										131705
									],
									[
										131717,
										131735
									],
									[
										132108,
										132126
									],
									[
										132442,
										132460
									],
									[
										132771,
										132789
									],
									[
										133068,
										133086
									],
									[
										133290,
										133308
									],
									[
										133586,
										133604
									],
									[
										133819,
										133837
									],
									[
										133871,
										133889
									],
									[
										134126,
										134144
									],
									[
										134513,
										134531
									],
									[
										134742,
										134760
									],
									[
										134940,
										134958
									],
									[
										135191,
										135209
									],
									[
										135746,
										135764
									],
									[
										136068,
										136086
									],
									[
										136272,
										136290
									],
									[
										136420,
										136438
									],
									[
										136758,
										136776
									],
									[
										137029,
										137047
									],
									[
										137298,
										137316
									],
									[
										137871,
										137889
									],
									[
										138455,
										138473
									],
									[
										139110,
										139128
									],
									[
										139283,
										139301
									],
									[
										139482,
										139500
									],
									[
										140089,
										140115
									],
									[
										140334,
										140360
									],
									[
										140637,
										140663
									],
									[
										140964,
										140990
									],
									[
										141442,
										141468
									],
									[
										141732,
										141758
									],
									[
										142041,
										142067
									],
									[
										142495,
										142507
									],
									[
										142657,
										142669
									],
									[
										142901,
										142913
									],
									[
										143168,
										143180
									],
									[
										143278,
										143290
									],
									[
										143502,
										143508
									],
									[
										143759,
										143765
									],
									[
										143960,
										143966
									],
									[
										144215,
										144221
									],
									[
										144477,
										144483
									],
									[
										144751,
										144757
									],
									[
										145002,
										145008
									],
									[
										145231,
										145237
									],
									[
										145300,
										145306
									],
									[
										145641,
										145647
									],
									[
										146026,
										146032
									],
									[
										146237,
										146243
									],
									[
										146528,
										146534
									],
									[
										146764,
										146770
									],
									[
										147109,
										147115
									],
									[
										147599,
										147605
									],
									[
										147925,
										147931
									],
									[
										148079,
										148085
									],
									[
										148231,
										148237
									],
									[
										148437,
										148443
									],
									[
										148653,
										148659
									],
									[
										148894,
										148900
									],
									[
										149130,
										149136
									],
									[
										149145,
										149151
									],
									[
										149356,
										149362
									],
									[
										149557,
										149563
									],
									[
										149716,
										149722
									],
									[
										150015,
										150021
									],
									[
										150391,
										150407
									],
									[
										150427,
										150443
									],
									[
										150610,
										150626
									],
									[
										150812,
										150828
									],
									[
										151008,
										151024
									],
									[
										151376,
										151392
									],
									[
										151730,
										151746
									],
									[
										152005,
										152021
									],
									[
										152275,
										152291
									],
									[
										152294,
										152310
									],
									[
										152343,
										152359
									],
									[
										152371,
										152387
									],
									[
										152794,
										152810
									],
									[
										152909,
										152925
									],
									[
										153170,
										153186
									],
									[
										153201,
										153217
									],
									[
										153472,
										153488
									],
									[
										153717,
										153733
									],
									[
										154007,
										154023
									],
									[
										154387,
										154403
									],
									[
										154657,
										154673
									],
									[
										155210,
										155226
									],
									[
										155583,
										155599
									],
									[
										155614,
										155630
									],
									[
										155880,
										155896
									],
									[
										156100,
										156116
									],
									[
										156231,
										156247
									],
									[
										156310,
										156326
									],
									[
										156532,
										156548
									],
									[
										156587,
										156603
									],
									[
										156946,
										156962
									],
									[
										157167,
										157183
									],
									[
										157479,
										157495
									],
									[
										157542,
										157558
									],
									[
										157713,
										157729
									],
									[
										157882,
										157898
									],
									[
										158044,
										158060
									],
									[
										158366,
										158382
									],
									[
										158707,
										158723
									],
									[
										159051,
										159067
									],
									[
										159133,
										159149
									],
									[
										159399,
										159415
									],
									[
										159539,
										159555
									],
									[
										159693,
										159709
									],
									[
										159729,
										159745
									],
									[
										159909,
										159925
									],
									[
										160204,
										160220
									],
									[
										160418,
										160434
									],
									[
										160737,
										160753
									],
									[
										160756,
										160772
									],
									[
										160822,
										160838
									],
									[
										160954,
										160970
									],
									[
										160982,
										160998
									],
									[
										161143,
										161159
									],
									[
										161265,
										161281
									],
									[
										161372,
										161388
									],
									[
										161400,
										161416
									],
									[
										161732,
										161748
									],
									[
										161997,
										162013
									],
									[
										162275,
										162291
									],
									[
										162678,
										162694
									],
									[
										163211,
										163227
									],
									[
										163256,
										163272
									],
									[
										164206,
										164222
									],
									[
										164451,
										164467
									],
									[
										164768,
										164784
									],
									[
										165104,
										165120
									],
									[
										165307,
										165323
									],
									[
										165717,
										165733
									],
									[
										166076,
										166092
									],
									[
										166374,
										166398
									],
									[
										166673,
										166697
									],
									[
										166952,
										166976
									],
									[
										167272,
										167296
									],
									[
										167615,
										167639
									],
									[
										167892,
										167916
									],
									[
										168317,
										168341
									],
									[
										168620,
										168644
									],
									[
										169079,
										169103
									],
									[
										169441,
										169465
									],
									[
										169764,
										169788
									],
									[
										170068,
										170092
									],
									[
										170365,
										170389
									],
									[
										170865,
										170877
									],
									[
										171076,
										171088
									],
									[
										171316,
										171328
									],
									[
										171694,
										171706
									],
									[
										171862,
										171874
									],
									[
										172109,
										172121
									],
									[
										172481,
										172493
									],
									[
										172704,
										172716
									],
									[
										172921,
										172933
									],
									[
										173247,
										173259
									],
									[
										173790,
										173812
									],
									[
										174260,
										174282
									],
									[
										174671,
										174675
									],
									[
										174890,
										174894
									],
									[
										175009,
										175013
									],
									[
										175303,
										175307
									],
									[
										175432,
										175436
									],
									[
										175563,
										175567
									],
									[
										175672,
										175676
									],
									[
										175842,
										175846
									],
									[
										176098,
										176102
									],
									[
										176280,
										176284
									],
									[
										176426,
										176430
									],
									[
										176648,
										176652
									],
									[
										176895,
										176899
									],
									[
										177164,
										177168
									],
									[
										177291,
										177295
									],
									[
										177585,
										177589
									],
									[
										177714,
										177718
									],
									[
										177845,
										177849
									],
									[
										177954,
										177958
									],
									[
										178124,
										178128
									],
									[
										178380,
										178384
									],
									[
										178562,
										178566
									],
									[
										178708,
										178712
									],
									[
										178930,
										178934
									],
									[
										179323,
										179328
									],
									[
										179788,
										179793
									],
									[
										180136,
										180152
									],
									[
										180172,
										180188
									],
									[
										180321,
										180337
									],
									[
										180523,
										180539
									],
									[
										180851,
										180867
									],
									[
										181226,
										181242
									],
									[
										181423,
										181439
									],
									[
										181642,
										181658
									],
									[
										181670,
										181686
									],
									[
										182093,
										182109
									],
									[
										182198,
										182214
									],
									[
										182449,
										182465
									],
									[
										182480,
										182496
									],
									[
										182739,
										182755
									],
									[
										183056,
										183072
									],
									[
										183623,
										183639
									],
									[
										184005,
										184021
									],
									[
										184363,
										184379
									],
									[
										184394,
										184410
									],
									[
										184791,
										184807
									],
									[
										184938,
										184954
									],
									[
										185069,
										185085
									],
									[
										185148,
										185164
									],
									[
										185397,
										185413
									],
									[
										185757,
										185773
									],
									[
										185900,
										185916
									],
									[
										186211,
										186227
									],
									[
										186375,
										186391
									],
									[
										186741,
										186757
									],
									[
										187102,
										187118
									],
									[
										187203,
										187219
									],
									[
										187293,
										187309
									],
									[
										187414,
										187430
									],
									[
										187450,
										187466
									],
									[
										187600,
										187616
									],
									[
										187800,
										187816
									],
									[
										188109,
										188125
									],
									[
										188137,
										188153
									],
									[
										188298,
										188314
									],
									[
										188581,
										188597
									],
									[
										188686,
										188702
									],
									[
										188799,
										188815
									],
									[
										188827,
										188843
									],
									[
										189179,
										189195
									],
									[
										189409,
										189425
									],
									[
										189877,
										189893
									],
									[
										189922,
										189938
									],
									[
										190701,
										190717
									],
									[
										190737,
										190753
									],
									[
										190886,
										190902
									],
									[
										191088,
										191104
									],
									[
										191416,
										191432
									],
									[
										191791,
										191807
									],
									[
										191988,
										192004
									],
									[
										192207,
										192223
									],
									[
										192235,
										192251
									],
									[
										192658,
										192674
									],
									[
										192763,
										192779
									],
									[
										193014,
										193030
									],
									[
										193045,
										193061
									],
									[
										193304,
										193320
									],
									[
										193621,
										193637
									],
									[
										194188,
										194204
									],
									[
										194570,
										194586
									],
									[
										194928,
										194944
									],
									[
										194959,
										194975
									],
									[
										195356,
										195372
									],
									[
										195503,
										195519
									],
									[
										195634,
										195650
									],
									[
										195713,
										195729
									],
									[
										195962,
										195978
									],
									[
										196322,
										196338
									],
									[
										196465,
										196481
									],
									[
										196776,
										196792
									],
									[
										196940,
										196956
									],
									[
										197306,
										197322
									],
									[
										197667,
										197683
									],
									[
										197768,
										197784
									],
									[
										197858,
										197874
									],
									[
										197979,
										197995
									],
									[
										198015,
										198031
									],
									[
										198165,
										198181
									],
									[
										198365,
										198381
									],
									[
										198674,
										198690
									],
									[
										198702,
										198718
									],
									[
										198863,
										198879
									],
									[
										199146,
										199162
									],
									[
										199251,
										199267
									],
									[
										199364,
										199380
									],
									[
										199392,
										199408
									],
									[
										199744,
										199760
									],
									[
										199974,
										199990
									],
									[
										200442,
										200458
									],
									[
										200487,
										200503
									],
									[
										201299,
										201315
									],
									[
										201335,
										201351
									],
									[
										201518,
										201534
									],
									[
										201720,
										201736
									],
									[
										201916,
										201932
									],
									[
										202284,
										202300
									],
									[
										202638,
										202654
									],
									[
										202913,
										202929
									],
									[
										203183,
										203199
									],
									[
										203202,
										203218
									],
									[
										203251,
										203267
									],
									[
										203279,
										203295
									],
									[
										203702,
										203718
									],
									[
										203817,
										203833
									],
									[
										204078,
										204094
									],
									[
										204109,
										204125
									],
									[
										204380,
										204396
									],
									[
										204625,
										204641
									],
									[
										204915,
										204931
									],
									[
										205295,
										205311
									],
									[
										205565,
										205581
									],
									[
										206118,
										206134
									],
									[
										206491,
										206507
									],
									[
										206522,
										206538
									],
									[
										206788,
										206804
									],
									[
										207008,
										207024
									],
									[
										207139,
										207155
									],
									[
										207218,
										207234
									],
									[
										207440,
										207456
									],
									[
										207495,
										207511
									],
									[
										207854,
										207870
									],
									[
										208075,
										208091
									],
									[
										208387,
										208403
									],
									[
										208450,
										208466
									],
									[
										208621,
										208637
									],
									[
										208790,
										208806
									],
									[
										208952,
										208968
									],
									[
										209274,
										209290
									],
									[
										209615,
										209631
									],
									[
										209959,
										209975
									],
									[
										210041,
										210057
									],
									[
										210307,
										210323
									],
									[
										210447,
										210463
									],
									[
										210601,
										210617
									],
									[
										210637,
										210653
									],
									[
										210817,
										210833
									],
									[
										211112,
										211128
									],
									[
										211326,
										211342
									],
									[
										211645,
										211661
									],
									[
										211664,
										211680
									],
									[
										211730,
										211746
									],
									[
										211876,
										211892
									],
									[
										211904,
										211920
									],
									[
										212065,
										212081
									],
									[
										212333,
										212349
									],
									[
										212473,
										212489
									],
									[
										212501,
										212517
									],
									[
										212662,
										212678
									],
									[
										212707,
										212723
									],
									[
										212855,
										212871
									],
									[
										213105,
										213121
									],
									[
										213361,
										213377
									],
									[
										213672,
										213688
									],
									[
										213789,
										213805
									],
									[
										214199,
										214215
									],
									[
										214732,
										214748
									],
									[
										214777,
										214793
									],
									[
										215727,
										215743
									],
									[
										215972,
										215988
									],
									[
										216289,
										216305
									],
									[
										216625,
										216641
									],
									[
										216828,
										216844
									],
									[
										217238,
										217254
									],
									[
										217597,
										217613
									],
									[
										217837,
										217843
									],
									[
										218294,
										218316
									],
									[
										218731,
										218753
									],
									[
										219282,
										219294
									],
									[
										219493,
										219505
									],
									[
										219733,
										219745
									],
									[
										220111,
										220123
									],
									[
										220279,
										220291
									],
									[
										220526,
										220538
									],
									[
										220898,
										220910
									],
									[
										221121,
										221133
									],
									[
										221338,
										221350
									],
									[
										221664,
										221676
									],
									[
										222072,
										222081
									],
									[
										222246,
										222255
									],
									[
										222451,
										222460
									],
									[
										222758,
										222767
									],
									[
										222788,
										222797
									],
									[
										222947,
										222956
									],
									[
										222957,
										222966
									],
									[
										223203,
										223212
									],
									[
										223356,
										223365
									],
									[
										223568,
										223577
									],
									[
										223836,
										223845
									],
									[
										224116,
										224125
									],
									[
										224126,
										224135
									],
									[
										224439,
										224448
									],
									[
										224708,
										224717
									],
									[
										224875,
										224884
									],
									[
										224889,
										224898
									],
									[
										224911,
										224920
									],
									[
										225049,
										225058
									],
									[
										225060,
										225069
									],
									[
										225257,
										225266
									],
									[
										225444,
										225453
									],
									[
										225717,
										225726
									],
									[
										225818,
										225827
									],
									[
										225921,
										225930
									],
									[
										226193,
										226202
									],
									[
										226420,
										226429
									],
									[
										226756,
										226765
									],
									[
										226972,
										226981
									],
									[
										227128,
										227137
									],
									[
										227262,
										227271
									],
									[
										227561,
										227570
									],
									[
										227988,
										227997
									],
									[
										228132,
										228141
									],
									[
										228370,
										228379
									],
									[
										228580,
										228589
									],
									[
										228849,
										228858
									],
									[
										229205,
										229214
									],
									[
										229399,
										229408
									],
									[
										229665,
										229674
									],
									[
										229764,
										229773
									],
									[
										230125,
										230134
									],
									[
										230527,
										230536
									],
									[
										230627,
										230636
									],
									[
										230858,
										230867
									],
									[
										230937,
										230946
									],
									[
										231130,
										231139
									],
									[
										231192,
										231201
									],
									[
										231432,
										231441
									],
									[
										231610,
										231619
									],
									[
										231890,
										231899
									],
									[
										232266,
										232275
									],
									[
										232548,
										232557
									],
									[
										232889,
										232898
									],
									[
										233110,
										233119
									],
									[
										233386,
										233395
									],
									[
										233536,
										233545
									],
									[
										233995,
										234004
									],
									[
										234375,
										234384
									],
									[
										234699,
										234708
									],
									[
										234721,
										234730
									],
									[
										234906,
										234915
									],
									[
										235117,
										235126
									],
									[
										235485,
										235494
									],
									[
										235518,
										235527
									],
									[
										235814,
										235823
									],
									[
										236063,
										236072
									],
									[
										236399,
										236408
									],
									[
										236610,
										236619
									],
									[
										236906,
										236915
									],
									[
										237085,
										237094
									],
									[
										237180,
										237189
									],
									[
										237516,
										237525
									],
									[
										237763,
										237772
									],
									[
										237777,
										237786
									],
									[
										237805,
										237814
									],
									[
										238019,
										238028
									],
									[
										238030,
										238039
									],
									[
										238225,
										238234
									],
									[
										238255,
										238264
									],
									[
										238424,
										238433
									],
									[
										238647,
										238656
									],
									[
										238969,
										238978
									],
									[
										239212,
										239221
									],
									[
										239455,
										239464
									],
									[
										239699,
										239708
									],
									[
										239959,
										239968
									],
									[
										240134,
										240143
									],
									[
										240299,
										240308
									],
									[
										240401,
										240410
									],
									[
										240596,
										240605
									],
									[
										240826,
										240835
									],
									[
										241112,
										241121
									],
									[
										241131,
										241140
									],
									[
										241207,
										241216
									],
									[
										241245,
										241254
									],
									[
										241333,
										241342
									],
									[
										241666,
										241675
									],
									[
										241992,
										242001
									],
									[
										242137,
										242146
									],
									[
										242288,
										242297
									],
									[
										242495,
										242504
									],
									[
										242633,
										242642
									],
									[
										242883,
										242892
									],
									[
										242953,
										242962
									],
									[
										242977,
										242986
									],
									[
										243021,
										243030
									],
									[
										243248,
										243257
									],
									[
										243443,
										243452
									],
									[
										243666,
										243675
									],
									[
										243738,
										243747
									],
									[
										244010,
										244019
									],
									[
										244310,
										244319
									],
									[
										244410,
										244419
									],
									[
										244774,
										244783
									],
									[
										245207,
										245216
									],
									[
										245290,
										245299
									],
									[
										245484,
										245493
									],
									[
										245550,
										245559
									],
									[
										245777,
										245786
									],
									[
										246019,
										246028
									],
									[
										246323,
										246332
									],
									[
										246568,
										246577
									],
									[
										246804,
										246813
									],
									[
										246892,
										246901
									],
									[
										246930,
										246939
									],
									[
										247211,
										247220
									],
									[
										247544,
										247553
									],
									[
										247859,
										247868
									],
									[
										248156,
										248165
									],
									[
										248508,
										248517
									],
									[
										248611,
										248620
									],
									[
										248812,
										248821
									],
									[
										249085,
										249094
									],
									[
										249435,
										249444
									],
									[
										249883,
										249892
									],
									[
										250305,
										250314
									],
									[
										250379,
										250388
									],
									[
										250611,
										250620
									],
									[
										250809,
										250818
									],
									[
										251072,
										251081
									],
									[
										251110,
										251119
									],
									[
										251355,
										251364
									],
									[
										251441,
										251450
									],
									[
										251473,
										251482
									],
									[
										251555,
										251564
									],
									[
										251646,
										251655
									],
									[
										251734,
										251743
									],
									[
										251991,
										252000
									],
									[
										252076,
										252085
									],
									[
										252261,
										252270
									],
									[
										252373,
										252382
									],
									[
										252585,
										252594
									],
									[
										252824,
										252833
									],
									[
										252966,
										252975
									],
									[
										253175,
										253184
									],
									[
										253315,
										253324
									],
									[
										253530,
										253539
									],
									[
										253710,
										253719
									],
									[
										253822,
										253831
									],
									[
										254074,
										254083
									],
									[
										254160,
										254169
									],
									[
										254191,
										254200
									],
									[
										254381,
										254390
									],
									[
										254493,
										254502
									],
									[
										254727,
										254736
									],
									[
										255013,
										255022
									],
									[
										255156,
										255165
									],
									[
										255212,
										255221
									],
									[
										255444,
										255453
									],
									[
										255603,
										255612
									],
									[
										255744,
										255753
									],
									[
										255959,
										255968
									],
									[
										256139,
										256148
									],
									[
										256251,
										256260
									],
									[
										256552,
										256561
									],
									[
										256806,
										256815
									],
									[
										256986,
										256995
									],
									[
										257098,
										257107
									],
									[
										257379,
										257388
									],
									[
										257458,
										257467
									],
									[
										257526,
										257535
									],
									[
										257559,
										257568
									],
									[
										257700,
										257709
									],
									[
										257854,
										257863
									],
									[
										258050,
										258059
									],
									[
										258208,
										258217
									],
									[
										258447,
										258456
									],
									[
										258552,
										258561
									],
									[
										258600,
										258609
									],
									[
										258775,
										258784
									],
									[
										259177,
										259186
									],
									[
										259520,
										259529
									],
									[
										259838,
										259847
									],
									[
										259968,
										259977
									],
									[
										260108,
										260117
									],
									[
										260273,
										260282
									],
									[
										260398,
										260407
									],
									[
										260637,
										260646
									],
									[
										260855,
										260864
									],
									[
										261178,
										261187
									],
									[
										261265,
										261274
									],
									[
										261595,
										261604
									],
									[
										261913,
										261922
									],
									[
										261927,
										261936
									],
									[
										262288,
										262297
									],
									[
										262313,
										262322
									],
									[
										262596,
										262605
									],
									[
										262610,
										262619
									],
									[
										262638,
										262647
									],
									[
										262857,
										262866
									],
									[
										262868,
										262877
									],
									[
										263207,
										263216
									],
									[
										263578,
										263587
									],
									[
										263830,
										263839
									],
									[
										263852,
										263861
									],
									[
										263986,
										263995
									],
									[
										263997,
										264006
									],
									[
										264243,
										264252
									],
									[
										264515,
										264524
									],
									[
										264679,
										264688
									],
									[
										264693,
										264702
									],
									[
										264913,
										264922
									],
									[
										265132,
										265141
									],
									[
										265143,
										265152
									],
									[
										265425,
										265434
									],
									[
										265578,
										265587
									],
									[
										265592,
										265601
									],
									[
										265623,
										265632
									],
									[
										265767,
										265776
									],
									[
										265778,
										265787
									],
									[
										266030,
										266039
									],
									[
										266302,
										266311
									],
									[
										266494,
										266503
									],
									[
										266508,
										266517
									],
									[
										266530,
										266539
									],
									[
										266668,
										266677
									],
									[
										266679,
										266688
									],
									[
										266894,
										266903
									],
									[
										267113,
										267122
									],
									[
										267127,
										267136
									],
									[
										267155,
										267164
									],
									[
										267381,
										267390
									],
									[
										267392,
										267401
									],
									[
										267647,
										267656
									],
									[
										267724,
										267733
									],
									[
										267935,
										267944
									],
									[
										268106,
										268115
									],
									[
										268120,
										268129
									],
									[
										268148,
										268157
									],
									[
										268300,
										268309
									],
									[
										268322,
										268331
									],
									[
										268420,
										268429
									],
									[
										268431,
										268440
									],
									[
										268666,
										268675
									],
									[
										268772,
										268781
									],
									[
										268784,
										268793
									],
									[
										268959,
										268968
									],
									[
										269090,
										269099
									],
									[
										269264,
										269273
									],
									[
										269350,
										269359
									],
									[
										269523,
										269532
									],
									[
										269537,
										269546
									],
									[
										269565,
										269574
									],
									[
										269761,
										269770
									],
									[
										269772,
										269781
									],
									[
										270094,
										270103
									],
									[
										270403,
										270412
									],
									[
										270697,
										270706
									],
									[
										271026,
										271035
									],
									[
										271276,
										271285
									],
									[
										271559,
										271568
									],
									[
										271848,
										271857
									],
									[
										272177,
										272186
									],
									[
										272404,
										272413
									],
									[
										272418,
										272427
									],
									[
										272446,
										272455
									],
									[
										272648,
										272657
									],
									[
										272710,
										272719
									],
									[
										272721,
										272730
									],
									[
										273006,
										273015
									],
									[
										273155,
										273164
									],
									[
										273169,
										273178
									],
									[
										273197,
										273206
									],
									[
										273356,
										273365
									],
									[
										273367,
										273376
									],
									[
										273651,
										273660
									],
									[
										273817,
										273826
									],
									[
										273831,
										273840
									],
									[
										273859,
										273868
									],
									[
										274017,
										274026
									],
									[
										274028,
										274037
									],
									[
										274224,
										274233
									],
									[
										274234,
										274243
									],
									[
										274679,
										274688
									],
									[
										274929,
										274938
									],
									[
										274999,
										275008
									],
									[
										275306,
										275315
									],
									[
										275316,
										275325
									],
									[
										275706,
										275715
									],
									[
										275981,
										275990
									],
									[
										276273,
										276282
									],
									[
										276497,
										276506
									],
									[
										276735,
										276744
									],
									[
										276881,
										276890
									],
									[
										277005,
										277014
									],
									[
										277212,
										277221
									],
									[
										277237,
										277246
									],
									[
										277336,
										277345
									],
									[
										277599,
										277608
									],
									[
										277800,
										277809
									],
									[
										277991,
										278000
									],
									[
										278045,
										278054
									],
									[
										278075,
										278084
									],
									[
										278269,
										278278
									],
									[
										278486,
										278495
									],
									[
										278651,
										278660
									],
									[
										278890,
										278899
									],
									[
										278904,
										278913
									],
									[
										279276,
										279285
									],
									[
										279420,
										279429
									],
									[
										279649,
										279658
									],
									[
										279904,
										279913
									],
									[
										280350,
										280359
									],
									[
										280583,
										280592
									],
									[
										280948,
										280957
									],
									[
										281297,
										281306
									],
									[
										281641,
										281650
									],
									[
										281765,
										281774
									],
									[
										281941,
										281950
									],
									[
										281953,
										281962
									],
									[
										282324,
										282333
									],
									[
										282350,
										282359
									],
									[
										282700,
										282709
									],
									[
										282771,
										282780
									],
									[
										283021,
										283030
									],
									[
										283354,
										283363
									],
									[
										283650,
										283659
									],
									[
										283918,
										283927
									],
									[
										284287,
										284296
									],
									[
										284645,
										284654
									],
									[
										284705,
										284714
									],
									[
										285047,
										285056
									],
									[
										285107,
										285116
									],
									[
										285346,
										285355
									],
									[
										285368,
										285377
									],
									[
										285637,
										285646
									],
									[
										285704,
										285713
									],
									[
										285999,
										286008
									],
									[
										286089,
										286098
									],
									[
										286333,
										286342
									],
									[
										286513,
										286522
									],
									[
										286592,
										286601
									],
									[
										286622,
										286631
									],
									[
										286983,
										286992
									],
									[
										287155,
										287164
									],
									[
										287182,
										287191
									],
									[
										287280,
										287289
									],
									[
										287295,
										287304
									],
									[
										287458,
										287467
									],
									[
										287487,
										287496
									],
									[
										287697,
										287706
									],
									[
										287945,
										287954
									],
									[
										288194,
										288203
									],
									[
										288415,
										288424
									],
									[
										288706,
										288715
									],
									[
										288983,
										288992
									],
									[
										289152,
										289161
									],
									[
										289396,
										289405
									],
									[
										289621,
										289630
									],
									[
										289897,
										289906
									],
									[
										290176,
										290185
									],
									[
										290321,
										290330
									],
									[
										290699,
										290708
									],
									[
										290934,
										290943
									],
									[
										291157,
										291166
									],
									[
										291374,
										291383
									],
									[
										291662,
										291671
									],
									[
										291937,
										291946
									],
									[
										292244,
										292253
									],
									[
										292401,
										292410
									],
									[
										292515,
										292524
									],
									[
										292668,
										292677
									],
									[
										292942,
										292951
									],
									[
										293218,
										293227
									],
									[
										293287,
										293296
									],
									[
										293570,
										293579
									],
									[
										293582,
										293591
									],
									[
										293866,
										293875
									],
									[
										293878,
										293887
									],
									[
										294042,
										294051
									],
									[
										294054,
										294063
									],
									[
										294300,
										294309
									],
									[
										294312,
										294321
									],
									[
										294487,
										294496
									],
									[
										294499,
										294508
									],
									[
										294825,
										294834
									],
									[
										295237,
										295246
									],
									[
										295464,
										295473
									],
									[
										295760,
										295769
									],
									[
										295944,
										295953
									],
									[
										296289,
										296298
									],
									[
										296558,
										296567
									],
									[
										296570,
										296579
									],
									[
										296626,
										296635
									],
									[
										296645,
										296654
									],
									[
										296726,
										296735
									],
									[
										296810,
										296819
									],
									[
										297134,
										297143
									],
									[
										297337,
										297346
									],
									[
										297443,
										297452
									],
									[
										297563,
										297572
									],
									[
										297796,
										297805
									],
									[
										298044,
										298053
									],
									[
										298162,
										298171
									],
									[
										298230,
										298239
									],
									[
										298242,
										298251
									],
									[
										298271,
										298280
									],
									[
										298283,
										298292
									],
									[
										298545,
										298554
									],
									[
										298791,
										298800
									],
									[
										299088,
										299097
									],
									[
										299274,
										299283
									],
									[
										299422,
										299431
									],
									[
										299630,
										299639
									],
									[
										299838,
										299847
									],
									[
										299937,
										299946
									],
									[
										299961,
										299970
									],
									[
										300430,
										300439
									],
									[
										300749,
										300758
									],
									[
										300984,
										300993
									],
									[
										301399,
										301408
									],
									[
										301691,
										301700
									],
									[
										301886,
										301895
									],
									[
										302063,
										302072
									],
									[
										302388,
										302397
									],
									[
										302657,
										302666
									],
									[
										302728,
										302737
									],
									[
										303163,
										303172
									],
									[
										303405,
										303414
									],
									[
										303595,
										303604
									],
									[
										303607,
										303616
									],
									[
										303892,
										303901
									],
									[
										304179,
										304188
									],
									[
										304555,
										304564
									],
									[
										304609,
										304618
									],
									[
										304621,
										304630
									],
									[
										304866,
										304875
									],
									[
										304955,
										304964
									],
									[
										304993,
										305002
									],
									[
										305288,
										305297
									],
									[
										305601,
										305610
									],
									[
										305905,
										305914
									],
									[
										306210,
										306219
									],
									[
										306572,
										306581
									],
									[
										306907,
										306916
									],
									[
										307289,
										307298
									],
									[
										307589,
										307598
									],
									[
										307664,
										307673
									],
									[
										308099,
										308108
									],
									[
										308174,
										308183
									],
									[
										308516,
										308525
									],
									[
										308555,
										308564
									],
									[
										308642,
										308651
									],
									[
										308806,
										308815
									],
									[
										309154,
										309163
									],
									[
										309333,
										309342
									],
									[
										309575,
										309584
									],
									[
										309958,
										309967
									],
									[
										310238,
										310247
									],
									[
										310273,
										310282
									],
									[
										310560,
										310569
									],
									[
										310769,
										310778
									],
									[
										310911,
										310920
									],
									[
										311128,
										311137
									],
									[
										311312,
										311321
									],
									[
										311420,
										311429
									],
									[
										311463,
										311472
									],
									[
										311759,
										311768
									],
									[
										312008,
										312017
									],
									[
										312064,
										312073
									],
									[
										312296,
										312305
									],
									[
										312455,
										312464
									],
									[
										312626,
										312635
									],
									[
										312672,
										312681
									],
									[
										312821,
										312830
									],
									[
										313050,
										313059
									],
									[
										313332,
										313341
									],
									[
										313446,
										313455
									],
									[
										313893,
										313902
									],
									[
										314173,
										314182
									],
									[
										314243,
										314252
									],
									[
										314255,
										314264
									],
									[
										314522,
										314531
									],
									[
										314588,
										314597
									],
									[
										314600,
										314609
									],
									[
										314850,
										314859
									],
									[
										315048,
										315057
									],
									[
										315060,
										315069
									],
									[
										315301,
										315310
									],
									[
										315365,
										315374
									],
									[
										315379,
										315388
									],
									[
										315467,
										315476
									],
									[
										315530,
										315539
									],
									[
										315544,
										315553
									],
									[
										315630,
										315639
									],
									[
										315691,
										315700
									],
									[
										315705,
										315714
									],
									[
										315789,
										315798
									],
									[
										315860,
										315869
									],
									[
										315874,
										315883
									],
									[
										315970,
										315979
									],
									[
										316041,
										316050
									],
									[
										316055,
										316064
									],
									[
										316140,
										316149
									],
									[
										316200,
										316209
									],
									[
										316214,
										316223
									],
									[
										316303,
										316312
									],
									[
										316367,
										316376
									],
									[
										316381,
										316390
									],
									[
										316472,
										316481
									],
									[
										316538,
										316547
									],
									[
										316552,
										316561
									],
									[
										316643,
										316652
									],
									[
										316709,
										316718
									],
									[
										316723,
										316732
									],
									[
										316810,
										316819
									],
									[
										316883,
										316892
									],
									[
										316897,
										316906
									],
									[
										317094,
										317103
									],
									[
										317255,
										317264
									],
									[
										317457,
										317466
									],
									[
										317639,
										317648
									],
									[
										317792,
										317801
									],
									[
										317968,
										317977
									],
									[
										318055,
										318064
									],
									[
										318219,
										318228
									],
									[
										318233,
										318242
									],
									[
										318369,
										318378
									],
									[
										318547,
										318556
									],
									[
										318601,
										318610
									],
									[
										318699,
										318708
									],
									[
										318741,
										318750
									],
									[
										318815,
										318824
									],
									[
										318867,
										318876
									],
									[
										318916,
										318925
									],
									[
										318936,
										318945
									],
									[
										319045,
										319054
									],
									[
										319177,
										319186
									],
									[
										319225,
										319234
									],
									[
										319292,
										319301
									],
									[
										319382,
										319391
									],
									[
										319417,
										319426
									],
									[
										319482,
										319491
									],
									[
										319541,
										319550
									],
									[
										319684,
										319693
									],
									[
										319709,
										319718
									],
									[
										319748,
										319757
									],
									[
										319759,
										319768
									],
									[
										319840,
										319849
									],
									[
										319889,
										319898
									],
									[
										320300,
										320309
									],
									[
										320609,
										320618
									],
									[
										320676,
										320685
									],
									[
										320815,
										320824
									],
									[
										320864,
										320873
									],
									[
										321039,
										321048
									],
									[
										321088,
										321097
									],
									[
										321232,
										321241
									],
									[
										321534,
										321543
									],
									[
										321844,
										321853
									],
									[
										322206,
										322215
									],
									[
										322218,
										322227
									],
									[
										322372,
										322381
									],
									[
										322676,
										322685
									],
									[
										322932,
										322941
									],
									[
										323164,
										323173
									],
									[
										323215,
										323224
									],
									[
										323227,
										323236
									],
									[
										323447,
										323456
									],
									[
										323501,
										323510
									],
									[
										323686,
										323695
									],
									[
										323932,
										323941
									],
									[
										324241,
										324250
									],
									[
										324502,
										324511
									],
									[
										324579,
										324588
									],
									[
										324629,
										324638
									],
									[
										324696,
										324705
									],
									[
										324778,
										324787
									],
									[
										324869,
										324878
									],
									[
										325129,
										325138
									],
									[
										325287,
										325296
									],
									[
										325301,
										325310
									],
									[
										325329,
										325338
									],
									[
										325500,
										325509
									],
									[
										325511,
										325520
									],
									[
										325916,
										325925
									],
									[
										326350,
										326359
									],
									[
										326775,
										326784
									],
									[
										327172,
										327181
									],
									[
										327658,
										327667
									],
									[
										327835,
										327844
									],
									[
										327962,
										327971
									],
									[
										328118,
										328127
									],
									[
										328457,
										328466
									],
									[
										328626,
										328635
									],
									[
										328640,
										328649
									],
									[
										328668,
										328677
									],
									[
										328889,
										328898
									],
									[
										328900,
										328909
									],
									[
										329150,
										329159
									],
									[
										329411,
										329420
									],
									[
										329813,
										329822
									],
									[
										329843,
										329852
									],
									[
										329876,
										329885
									],
									[
										330210,
										330219
									],
									[
										330525,
										330534
									],
									[
										330909,
										330918
									],
									[
										331257,
										331260
									],
									[
										331474,
										331477
									],
									[
										331771,
										331774
									],
									[
										332141,
										332144
									],
									[
										332503,
										332506
									],
									[
										332722,
										332725
									],
									[
										333184,
										333187
									],
									[
										333629,
										333632
									],
									[
										333728,
										333731
									],
									[
										333826,
										333829
									],
									[
										334233,
										334243
									],
									[
										334547,
										334557
									],
									[
										334892,
										334908
									],
									[
										335080,
										335096
									],
									[
										335276,
										335292
									],
									[
										335490,
										335506
									],
									[
										335698,
										335714
									],
									[
										335959,
										335975
									],
									[
										336173,
										336189
									],
									[
										336383,
										336399
									],
									[
										336808,
										336824
									],
									[
										336938,
										336954
									],
									[
										337022,
										337038
									],
									[
										337174,
										337190
									],
									[
										337426,
										337442
									],
									[
										337702,
										337718
									],
									[
										337867,
										337883
									],
									[
										338426,
										338437
									],
									[
										338571,
										338582
									],
									[
										338733,
										338744
									],
									[
										338801,
										338812
									],
									[
										339354,
										339365
									],
									[
										339499,
										339510
									],
									[
										339661,
										339672
									],
									[
										339729,
										339740
									],
									[
										340116,
										340134
									],
									[
										340192,
										340210
									],
									[
										340588,
										340606
									],
									[
										340909,
										340922
									],
									[
										340969,
										340982
									],
									[
										341239,
										341250
									],
									[
										341502,
										341513
									],
									[
										341922,
										341946
									],
									[
										342221,
										342245
									],
									[
										342500,
										342524
									],
									[
										342820,
										342844
									],
									[
										343163,
										343187
									],
									[
										343440,
										343464
									],
									[
										343865,
										343889
									],
									[
										344168,
										344192
									],
									[
										344627,
										344651
									],
									[
										344989,
										345013
									],
									[
										345312,
										345336
									],
									[
										345600,
										345624
									],
									[
										345898,
										345922
									],
									[
										346156,
										346180
									],
									[
										346685,
										346701
									],
									[
										346997,
										347013
									],
									[
										347279,
										347295
									],
									[
										347528,
										347544
									],
									[
										347801,
										347817
									],
									[
										347966,
										347982
									],
									[
										348369,
										348375
									],
									[
										348688,
										348704
									],
									[
										348724,
										348740
									],
									[
										348907,
										348923
									],
									[
										349109,
										349125
									],
									[
										349305,
										349321
									],
									[
										349673,
										349689
									],
									[
										350027,
										350043
									],
									[
										350302,
										350318
									],
									[
										350572,
										350588
									],
									[
										350591,
										350607
									],
									[
										350640,
										350656
									],
									[
										350668,
										350684
									],
									[
										351091,
										351107
									],
									[
										351206,
										351222
									],
									[
										351467,
										351483
									],
									[
										351498,
										351514
									],
									[
										351769,
										351785
									],
									[
										352014,
										352030
									],
									[
										352304,
										352320
									],
									[
										352684,
										352700
									],
									[
										352954,
										352970
									],
									[
										353464,
										353480
									],
									[
										353550,
										353566
									],
									[
										353951,
										353967
									],
									[
										353982,
										353998
									],
									[
										354248,
										354264
									],
									[
										354468,
										354484
									],
									[
										354599,
										354615
									],
									[
										354678,
										354694
									],
									[
										354900,
										354916
									],
									[
										354955,
										354971
									],
									[
										355314,
										355330
									],
									[
										355535,
										355551
									],
									[
										355846,
										355862
									],
									[
										356017,
										356033
									],
									[
										356180,
										356196
									],
									[
										356500,
										356516
									],
									[
										356841,
										356857
									],
									[
										357193,
										357209
									],
									[
										357278,
										357294
									],
									[
										357422,
										357438
									],
									[
										357553,
										357569
									],
									[
										357712,
										357728
									],
									[
										357748,
										357764
									],
									[
										357928,
										357944
									],
									[
										358223,
										358239
									],
									[
										358437,
										358453
									],
									[
										358746,
										358762
									],
									[
										358765,
										358781
									],
									[
										358831,
										358847
									],
									[
										358977,
										358993
									],
									[
										359005,
										359021
									],
									[
										359166,
										359182
									],
									[
										359434,
										359450
									],
									[
										359574,
										359590
									],
									[
										359602,
										359618
									],
									[
										359958,
										359974
									],
									[
										360219,
										360235
									],
									[
										360609,
										360625
									],
									[
										361142,
										361158
									],
									[
										361187,
										361203
									],
									[
										362137,
										362153
									],
									[
										362382,
										362398
									],
									[
										362699,
										362715
									],
									[
										363035,
										363051
									],
									[
										363238,
										363254
									],
									[
										363648,
										363664
									],
									[
										364007,
										364023
									],
									[
										364309,
										364318
									],
									[
										364620,
										364629
									],
									[
										364861,
										364870
									],
									[
										365342,
										365351
									],
									[
										365653,
										365662
									],
									[
										365894,
										365903
									],
									[
										366375,
										366384
									],
									[
										366686,
										366695
									],
									[
										366927,
										366936
									],
									[
										367408,
										367417
									],
									[
										367719,
										367728
									],
									[
										367960,
										367969
									],
									[
										368464,
										368481
									],
									[
										368673,
										368690
									],
									[
										368939,
										368956
									],
									[
										369148,
										369165
									],
									[
										369496,
										369513
									],
									[
										369772,
										369789
									],
									[
										370054,
										370071
									],
									[
										370399,
										370416
									],
									[
										370694,
										370711
									],
									[
										371107,
										371123
									],
									[
										371292,
										371308
									],
									[
										371526,
										371542
									],
									[
										371826,
										371842
									],
									[
										372100,
										372116
									],
									[
										372451,
										372463
									],
									[
										372688,
										372700
									],
									[
										372874,
										372886
									],
									[
										373167,
										373179
									],
									[
										373407,
										373419
									],
									[
										373663,
										373675
									],
									[
										373872,
										373884
									],
									[
										374076,
										374088
									],
									[
										374314,
										374326
									],
									[
										374544,
										374556
									],
									[
										374805,
										374817
									],
									[
										375041,
										375053
									],
									[
										375254,
										375266
									],
									[
										375491,
										375503
									],
									[
										375687,
										375699
									],
									[
										375909,
										375921
									],
									[
										376380,
										376402
									],
									[
										376748,
										376770
									],
									[
										376998,
										377020
									],
									[
										377417,
										377432
									],
									[
										377779,
										377797
									],
									[
										378020,
										378038
									],
									[
										378197,
										378215
									],
									[
										378583,
										378613
									],
									[
										378687,
										378717
									],
									[
										379024,
										379031
									],
									[
										379289,
										379296
									],
									[
										379526,
										379533
									],
									[
										379833,
										379840
									],
									[
										380034,
										380041
									],
									[
										380135,
										380142
									],
									[
										380511,
										380518
									],
									[
										380718,
										380725
									],
									[
										381007,
										381014
									],
									[
										381075,
										381082
									],
									[
										381324,
										381331
									],
									[
										381591,
										381598
									],
									[
										381790,
										381797
									],
									[
										381879,
										381886
									],
									[
										382077,
										382084
									],
									[
										382157,
										382164
									],
									[
										382432,
										382439
									],
									[
										382742,
										382749
									],
									[
										382831,
										382838
									],
									[
										383036,
										383043
									],
									[
										383116,
										383123
									],
									[
										383364,
										383371
									],
									[
										383639,
										383647
									],
									[
										383756,
										383764
									],
									[
										384014,
										384022
									],
									[
										384307,
										384315
									],
									[
										384517,
										384525
									],
									[
										384750,
										384758
									],
									[
										384921,
										384929
									],
									[
										385102,
										385110
									],
									[
										385296,
										385304
									],
									[
										385516,
										385524
									],
									[
										385758,
										385766
									],
									[
										385912,
										385920
									],
									[
										386044,
										386052
									],
									[
										386153,
										386161
									],
									[
										386458,
										386466
									],
									[
										386652,
										386660
									],
									[
										386974,
										386982
									],
									[
										387234,
										387242
									],
									[
										387572,
										387580
									],
									[
										387609,
										387617
									],
									[
										387835,
										387843
									],
									[
										388054,
										388062
									],
									[
										388405,
										388413
									],
									[
										388708,
										388716
									],
									[
										389026,
										389034
									],
									[
										389266,
										389274
									],
									[
										389551,
										389559
									],
									[
										389787,
										389795
									],
									[
										390094,
										390102
									],
									[
										390313,
										390321
									],
									[
										390557,
										390565
									],
									[
										390744,
										390752
									],
									[
										390948,
										390956
									],
									[
										391238,
										391246
									],
									[
										391475,
										391483
									],
									[
										391733,
										391741
									],
									[
										391958,
										391966
									],
									[
										392131,
										392139
									],
									[
										392283,
										392291
									],
									[
										392453,
										392461
									],
									[
										392651,
										392659
									],
									[
										392916,
										392924
									],
									[
										393123,
										393131
									],
									[
										393348,
										393356
									],
									[
										393683,
										393691
									],
									[
										394018,
										394026
									],
									[
										394157,
										394165
									],
									[
										394413,
										394421
									],
									[
										394668,
										394676
									],
									[
										394780,
										394788
									],
									[
										394924,
										394932
									],
									[
										395094,
										395102
									],
									[
										395187,
										395195
									],
									[
										395322,
										395330
									],
									[
										395683,
										395691
									],
									[
										395929,
										395937
									],
									[
										396315,
										396323
									],
									[
										396537,
										396545
									],
									[
										396796,
										396804
									],
									[
										397019,
										397027
									],
									[
										397216,
										397224
									],
									[
										397519,
										397527
									],
									[
										397618,
										397626
									],
									[
										398010,
										398018
									],
									[
										398358,
										398366
									],
									[
										398635,
										398643
									],
									[
										398879,
										398887
									],
									[
										399116,
										399124
									],
									[
										399302,
										399310
									],
									[
										399541,
										399549
									],
									[
										399736,
										399744
									],
									[
										399957,
										399965
									],
									[
										400181,
										400189
									],
									[
										400301,
										400309
									],
									[
										400527,
										400535
									],
									[
										400645,
										400653
									],
									[
										400842,
										400850
									],
									[
										401105,
										401113
									],
									[
										401350,
										401358
									],
									[
										401625,
										401633
									],
									[
										401910,
										401918
									],
									[
										402108,
										402116
									],
									[
										402406,
										402414
									],
									[
										402666,
										402674
									],
									[
										402954,
										402962
									],
									[
										403164,
										403172
									],
									[
										403246,
										403254
									],
									[
										403499,
										403507
									],
									[
										403799,
										403807
									],
									[
										404000,
										404008
									],
									[
										404295,
										404303
									],
									[
										404522,
										404530
									],
									[
										404723,
										404731
									],
									[
										404854,
										404862
									],
									[
										404905,
										404913
									],
									[
										405264,
										405272
									],
									[
										405491,
										405499
									],
									[
										405696,
										405704
									],
									[
										405909,
										405917
									],
									[
										406109,
										406117
									],
									[
										406453,
										406461
									],
									[
										406675,
										406683
									],
									[
										406879,
										406887
									],
									[
										407098,
										407106
									],
									[
										407379,
										407387
									],
									[
										407579,
										407587
									],
									[
										407851,
										407859
									],
									[
										408197,
										408205
									],
									[
										408501,
										408509
									],
									[
										408813,
										408821
									],
									[
										409085,
										409093
									],
									[
										409175,
										409183
									],
									[
										409413,
										409421
									],
									[
										409684,
										409692
									],
									[
										410100,
										410108
									],
									[
										410443,
										410451
									],
									[
										410837,
										410845
									],
									[
										411019,
										411027
									],
									[
										411401,
										411409
									],
									[
										411618,
										411626
									],
									[
										411985,
										411993
									],
									[
										412266,
										412274
									],
									[
										412500,
										412508
									],
									[
										412739,
										412747
									],
									[
										413094,
										413102
									],
									[
										413404,
										413412
									],
									[
										413640,
										413648
									],
									[
										414003,
										414011
									],
									[
										414217,
										414225
									],
									[
										414591,
										414599
									],
									[
										414789,
										414797
									],
									[
										414992,
										415000
									],
									[
										415348,
										415356
									],
									[
										415547,
										415555
									],
									[
										415748,
										415756
									],
									[
										416067,
										416075
									],
									[
										416237,
										416245
									],
									[
										416624,
										416632
									],
									[
										416914,
										416922
									],
									[
										417311,
										417319
									],
									[
										417570,
										417578
									],
									[
										417891,
										417899
									],
									[
										418111,
										418119
									],
									[
										418221,
										418229
									],
									[
										418395,
										418403
									],
									[
										418710,
										418718
									],
									[
										418816,
										418824
									],
									[
										419147,
										419155
									],
									[
										419449,
										419457
									],
									[
										419636,
										419644
									],
									[
										419951,
										419959
									],
									[
										420349,
										420357
									],
									[
										420651,
										420659
									],
									[
										421017,
										421025
									],
									[
										421391,
										421399
									],
									[
										421750,
										421758
									],
									[
										422124,
										422132
									],
									[
										422578,
										422586
									],
									[
										422897,
										422905
									],
									[
										423259,
										423267
									],
									[
										423455,
										423463
									],
									[
										423682,
										423690
									],
									[
										424066,
										424074
									],
									[
										424263,
										424271
									],
									[
										424615,
										424623
									],
									[
										424808,
										424816
									],
									[
										425145,
										425153
									],
									[
										425351,
										425359
									],
									[
										425742,
										425750
									],
									[
										425935,
										425943
									],
									[
										426346,
										426354
									],
									[
										426551,
										426559
									],
									[
										426994,
										427002
									],
									[
										427222,
										427230
									],
									[
										427586,
										427594
									],
									[
										427925,
										427933
									],
									[
										428161,
										428169
									],
									[
										428370,
										428378
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								388412,
								388412
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 58,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 148206.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Falcor/Core/API/GpuTimer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3717,
						"regions":
						{
						},
						"selection":
						[
							[
								1849,
								1849
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Falcor/Core/API/LowLevelContextData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3534,
						"regions":
						{
						},
						"selection":
						[
							[
								1813,
								1813
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Falcor/Utils/Timing/Profiler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7984,
						"regions":
						{
						},
						"selection":
						[
							[
								3494,
								3494
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 341.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/Falcor/Core/Platform/Windows/Windows.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26025,
						"regions":
						{
						},
						"selection":
						[
							[
								25822,
								25822
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12090.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 139342,
						"regions":
						{
						},
						"selection":
						[
							[
								17858,
								17858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7779.0,
						"zoom_level": 1.0
					},
					"stack_index": 129,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "third_party/slang/tools/gfx/vulkan/render-vk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 99401,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7701.0,
						"zoom_level": 1.0
					},
					"stack_index": 128,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/Falcor/Raytracing/RtProgramVarsHelper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6214,
						"regions":
						{
						},
						"selection":
						[
							[
								4632,
								4632
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1438.0,
						"zoom_level": 1.0
					},
					"stack_index": 130,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/Falcor/Core/API/D3D12/FalcorD3D12.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9709,
						"regions":
						{
						},
						"selection":
						[
							[
								1759,
								1759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 131,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Falcor/Core/Platform/OS.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9422,
						"regions":
						{
						},
						"selection":
						[
							[
								2682,
								2682
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 810.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Falcor/Core/Program/Program.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12988,
						"regions":
						{
						},
						"selection":
						[
							[
								11967,
								11967
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4005.0,
						"zoom_level": 1.0
					},
					"stack_index": 146,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/Falcor/Scene/Camera/Camera.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5388,
						"regions":
						{
						},
						"selection":
						[
							[
								4265,
								4265
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1098.0,
						"zoom_level": 1.0
					},
					"stack_index": 152,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/Falcor/Utils/ArgList.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4141,
						"regions":
						{
						},
						"selection":
						[
							[
								3062,
								3062
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 144,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/Mogwai/Mogwai.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22851,
						"regions":
						{
						},
						"selection":
						[
							[
								22634,
								22634
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9487.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/Mogwai/stdafx.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1851,
						"regions":
						{
						},
						"selection":
						[
							[
								1850,
								1850
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/Falcor/Core/Renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6577,
						"regions":
						{
						},
						"selection":
						[
							[
								6576,
								6576
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 700.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/Falcor/Utils/UI/UserInput.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7610,
						"regions":
						{
						},
						"selection":
						[
							[
								2848,
								2848
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 867.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/Falcor/Core/Sample.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7250,
						"regions":
						{
						},
						"selection":
						[
							[
								5374,
								5374
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1361.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/Falcor/Utils/UI/Gui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26171,
						"regions":
						{
						},
						"selection":
						[
							[
								26170,
								26170
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7891.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/Falcor/Core/Window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19191,
						"regions":
						{
						},
						"selection":
						[
							[
								1788,
								1788
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 148.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/Falcor/Core/Window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5541,
						"regions":
						{
						},
						"selection":
						[
							[
								2894,
								2894
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/Falcor/Utils/ArgList.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6596,
						"regions":
						{
						},
						"selection":
						[
							[
								3285,
								3285
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 126,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/Falcor/Core/API/Resource.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7217,
						"regions":
						{
						},
						"selection":
						[
							[
								7217,
								7217
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 544.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/Falcor/Core/API/Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5154,
						"regions":
						{
						},
						"selection":
						[
							[
								1586,
								1586
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1734.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/Falcor/Core/API/RenderContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11375,
						"regions":
						{
						},
						"selection":
						[
							[
								1854,
								1854
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 221.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "src/Falcor/Core/API/RenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5512,
						"regions":
						{
						},
						"selection":
						[
							[
								4078,
								4078
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "src/Falcor/Core/API/RasterizerState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7490,
						"regions":
						{
						},
						"selection":
						[
							[
								1841,
								1841
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2397.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "src/Falcor/Core/API/RasterizerState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2247,
						"regions":
						{
						},
						"selection":
						[
							[
								1768,
								1768
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "src/Falcor/Core/API/QueryHeap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3488,
						"regions":
						{
						},
						"selection":
						[
							[
								3487,
								3487
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "src/Falcor/Core/API/Formats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13737,
						"regions":
						{
						},
						"selection":
						[
							[
								12396,
								12396
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2703.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "src/Falcor/Core/API/Buffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16860,
						"regions":
						{
						},
						"selection":
						[
							[
								1823,
								1823
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 424.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "src/Mogwai/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1842,
						"regions":
						{
						},
						"selection":
						[
							[
								177,
								177
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "src/Mogwai/Mogwai.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7997,
						"regions":
						{
						},
						"selection":
						[
							[
								7369,
								7369
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2601.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3296,
						"regions":
						{
						},
						"selection":
						[
							[
								1540,
								1540
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "src/Falcor/RenderGraph/RenderGraphImportExport.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6990,
						"regions":
						{
						},
						"selection":
						[
							[
								2589,
								2589
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 111,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "src/Falcor/RenderGraph/ResourceCache.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8465,
						"regions":
						{
						},
						"selection":
						[
							[
								4035,
								4035
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1020.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "src/Falcor/RenderGraph/RenderPassReflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12218,
						"regions":
						{
						},
						"selection":
						[
							[
								9733,
								9733
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2805.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "src/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 184,
						"regions":
						{
						},
						"selection":
						[
							[
								130,
								130
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "src/Falcor/RenderPasses/ResolvePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2569,
						"regions":
						{
						},
						"selection":
						[
							[
								2544,
								1793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "src/Falcor/RenderPasses/ResolvePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3126,
						"regions":
						{
						},
						"selection":
						[
							[
								1765,
								1765
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "src/Falcor/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4786,
						"regions":
						{
						},
						"selection":
						[
							[
								4316,
								4316
							]
						],
						"settings":
						{
							"auto_name": "file( GLOB SOURCES",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1989.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "src/Falcor/Utils/Timing/FrameRate.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3768,
						"regions":
						{
						},
						"selection":
						[
							[
								3649,
								3649
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1130.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "src/Falcor/Utils/Timing/FrameRate.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2279,
						"regions":
						{
						},
						"selection":
						[
							[
								2242,
								2242
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6356,
						"regions":
						{
						},
						"selection":
						[
							[
								2964,
								2964
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8049,
						"regions":
						{
						},
						"selection":
						[
							[
								7236,
								7236
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2601.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29789,
						"regions":
						{
						},
						"selection":
						[
							[
								28000,
								28000
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9588.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 63194,
						"regions":
						{
						},
						"selection":
						[
							[
								1918,
								1918
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11427,
						"regions":
						{
						},
						"selection":
						[
							[
								8483,
								8483
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2499.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3511,
						"regions":
						{
						},
						"selection":
						[
							[
								2402,
								2402
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 114,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "src/Falcor/RenderGraph/RenderGraphCompiler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20000,
						"regions":
						{
						},
						"selection":
						[
							[
								4964,
								4964
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 969.0,
						"zoom_level": 1.0
					},
					"stack_index": 113,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31753,
						"regions":
						{
						},
						"selection":
						[
							[
								30998,
								30998
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12862.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "src/Falcor/RenderGraph/RenderGraphUI.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64727,
						"regions":
						{
						},
						"selection":
						[
							[
								1867,
								1867
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 112,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "src/Falcor/Utils/Debug/PixelDebug.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10326,
						"regions":
						{
						},
						"selection":
						[
							[
								1845,
								1845
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 212.0,
						"zoom_level": 1.0
					},
					"stack_index": 121,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "src/Falcor/Utils/Algorithm/ParallelReduction.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5991,
						"regions":
						{
						},
						"selection":
						[
							[
								2720,
								2720
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 120,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "src/Falcor/Utils/Algorithm/BitonicSort.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4500,
						"regions":
						{
						},
						"selection":
						[
							[
								2121,
								2121
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 119,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9405,
						"regions":
						{
						},
						"selection":
						[
							[
								5074,
								5074
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1428.0,
						"zoom_level": 1.0
					},
					"stack_index": 118,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "src/Falcor/Utils/Scripting/Console.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4515,
						"regions":
						{
						},
						"selection":
						[
							[
								1763,
								1763
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 117,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3485,
						"regions":
						{
						},
						"selection":
						[
							[
								2291,
								2291
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 116,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "src/Falcor/Utils/Timing/Clock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11260,
						"regions":
						{
						},
						"selection":
						[
							[
								9585,
								9585
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4421.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "src/Falcor/Core/API/TextureLoader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24284,
						"regions":
						{
						},
						"selection":
						[
							[
								21355,
								21355
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9249.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "src/Falcor/Core/API/VAO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5124,
						"regions":
						{
						},
						"selection":
						[
							[
								2235,
								2235
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1732.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "src/Falcor/Utils/Logger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5415,
						"regions":
						{
						},
						"selection":
						[
							[
								5143,
								5143
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1439.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "src/Falcor/Utils/Logger.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6794,
						"regions":
						{
						},
						"selection":
						[
							[
								4818,
								4818
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2697.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6079,
						"regions":
						{
						},
						"selection":
						[
							[
								5968,
								5968
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2142.0,
						"zoom_level": 1.0
					},
					"stack_index": 115,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "src/Falcor/Utils/Timing/Profiler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10243,
						"regions":
						{
						},
						"selection":
						[
							[
								5510,
								5510
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2007.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "src/Falcor/Utils/UI/Gui.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56025,
						"regions":
						{
						},
						"selection":
						[
							[
								24259,
								24259
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14927.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "src/Falcor/Utils/UI/Font.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5058,
						"regions":
						{
						},
						"selection":
						[
							[
								3129,
								3129
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 84267,
						"regions":
						{
						},
						"selection":
						[
							[
								51854,
								51854
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21250.0,
						"zoom_level": 1.0
					},
					"stack_index": 125,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "src/Falcor/Core/Program/ProgramVars.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14907,
						"regions":
						{
						},
						"selection":
						[
							[
								7806,
								7806
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3621.0,
						"zoom_level": 1.0
					},
					"stack_index": 127,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "src/Falcor/Core/Program/ProgramVars.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6642,
						"regions":
						{
						},
						"selection":
						[
							[
								1803,
								1803
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 132,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "src/Falcor/Core/Program/Program.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37566,
						"regions":
						{
						},
						"selection":
						[
							[
								19360,
								19360
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9197.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "src/Falcor/Core/API/Buffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13514,
						"regions":
						{
						},
						"selection":
						[
							[
								4283,
								4283
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1802.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "src/Falcor/Core/API/FBO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19896,
						"regions":
						{
						},
						"selection":
						[
							[
								15202,
								15202
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4425.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "src/Falcor/Core/API/FBO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13680,
						"regions":
						{
						},
						"selection":
						[
							[
								13680,
								13680
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 107.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "src/Falcor/Core/API/Texture.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14483,
						"regions":
						{
						},
						"selection":
						[
							[
								1945,
								1945
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 288.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 76,
					"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5550,
						"regions":
						{
						},
						"selection":
						[
							[
								5137,
								5137
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 77,
					"file": "src/Falcor/Core/API/GpuTimer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4863,
						"regions":
						{
						},
						"selection":
						[
							[
								2759,
								2759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1122.0,
						"zoom_level": 1.0
					},
					"stack_index": 150,
					"type": "text"
				},
				{
					"buffer": 78,
					"file": "src/Falcor/Core/API/Vulkan/VKGpuTimer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2936,
						"regions":
						{
						},
						"selection":
						[
							[
								2742,
								2742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 137,
					"type": "text"
				},
				{
					"buffer": 79,
					"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5788,
						"regions":
						{
						},
						"selection":
						[
							[
								2043,
								2043
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 401.0,
						"zoom_level": 1.0
					},
					"stack_index": 138,
					"type": "text"
				},
				{
					"buffer": 80,
					"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27058,
						"regions":
						{
						},
						"selection":
						[
							[
								1822,
								1822
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 141,
					"type": "text"
				},
				{
					"buffer": 81,
					"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7767,
						"regions":
						{
						},
						"selection":
						[
							[
								7644,
								7644
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 82,
					"file": "src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2373,
						"regions":
						{
						},
						"selection":
						[
							[
								1833,
								1833
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 136,
					"type": "text"
				},
				{
					"buffer": 83,
					"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16799,
						"regions":
						{
						},
						"selection":
						[
							[
								8405,
								8405
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3938.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 84,
					"file": "src/Falcor/Core/Platform/Windows/ProgressBarWin.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4513,
						"regions":
						{
						},
						"selection":
						[
							[
								2360,
								2360
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"type": "text"
				},
				{
					"buffer": 85,
					"file": "src/Falcor/Core/Platform/OS.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17127,
						"regions":
						{
						},
						"selection":
						[
							[
								1816,
								1816
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 86,
					"file": "src/Falcor/Core/API/Vulkan/VKState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3807,
						"regions":
						{
						},
						"selection":
						[
							[
								2746,
								2746
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 142,
					"type": "text"
				},
				{
					"buffer": 87,
					"file": "src/Falcor/Core/API/Texture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15986,
						"regions":
						{
						},
						"selection":
						[
							[
								12857,
								12857
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3927.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 88,
					"file": "src/Mogwai/MogwaiSettings.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2575,
						"regions":
						{
						},
						"selection":
						[
							[
								1742,
								1742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 136.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 89,
					"file": "src/Mogwai/MogwaiSettings.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10767,
						"regions":
						{
						},
						"selection":
						[
							[
								8705,
								8705
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3995.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 90,
					"file": "src/Mogwai/MogwaiScripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6779,
						"regions":
						{
						},
						"selection":
						[
							[
								3314,
								3314
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 935.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 91,
					"file": "src/Falcor/Core/API/Shader.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8294,
						"regions":
						{
						},
						"selection":
						[
							[
								4709,
								4709
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2958.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 92,
					"file": "src/Falcor/Core/API/Sampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7691,
						"regions":
						{
						},
						"selection":
						[
							[
								1825,
								1825
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 93,
					"file": "src/Falcor/Core/API/Sampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3799,
						"regions":
						{
						},
						"selection":
						[
							[
								1749,
								1749
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 94,
					"file": "src/Falcor/stdafx.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1831,
						"regions":
						{
						},
						"selection":
						[
							[
								1788,
								1788
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 95,
					"file": "src/Falcor/Core/API/CopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7371,
						"regions":
						{
						},
						"selection":
						[
							[
								6858,
								6858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2184.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"type": "text"
				},
				{
					"buffer": 96,
					"file": "src/Falcor/Core/API/VAO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3724,
						"regions":
						{
						},
						"selection":
						[
							[
								2643,
								2643
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 97,
					"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5970,
						"regions":
						{
						},
						"selection":
						[
							[
								1815,
								1815
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 86.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 98,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7591,
						"regions":
						{
						},
						"selection":
						[
							[
								7162,
								7162
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 133,
					"type": "text"
				},
				{
					"buffer": 99,
					"file": "src/Falcor/Core/API/D3D12/D3D12LowLevelContextData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4664,
						"regions":
						{
						},
						"selection":
						[
							[
								2929,
								2929
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 775.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"type": "text"
				},
				{
					"buffer": 100,
					"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5474,
						"regions":
						{
						},
						"selection":
						[
							[
								3334,
								3334
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"type": "text"
				},
				{
					"buffer": 101,
					"file": "src/Falcor/Core/API/FencedPool.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4502,
						"regions":
						{
						},
						"selection":
						[
							[
								4084,
								4084
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 149,
					"type": "text"
				},
				{
					"buffer": 102,
					"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16226,
						"regions":
						{
						},
						"selection":
						[
							[
								11807,
								11807
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 139,
					"type": "text"
				},
				{
					"buffer": 103,
					"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10312,
						"regions":
						{
						},
						"selection":
						[
							[
								10123,
								10123
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3060.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 104,
					"file": "third_party/slang/tools/render-test/cuda/cuda-compute-util.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53192,
						"regions":
						{
						},
						"selection":
						[
							[
								1255,
								1255
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 105,
					"file": "src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7301,
						"regions":
						{
						},
						"selection":
						[
							[
								4550,
								4550
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1106.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 106,
					"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5474,
						"regions":
						{
						},
						"selection":
						[
							[
								1794,
								1794
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 140,
					"type": "text"
				},
				{
					"buffer": 107,
					"file": "src/Falcor/Core/Program/ProgramVersion.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10308,
						"regions":
						{
						},
						"selection":
						[
							[
								9012,
								9012
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3308.0,
						"zoom_level": 1.0
					},
					"stack_index": 145,
					"type": "text"
				},
				{
					"buffer": 108,
					"file": "third_party/slang/examples/model-viewer/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86920,
						"regions":
						{
						},
						"selection":
						[
							[
								7215,
								7215
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3835.0,
						"zoom_level": 1.0
					},
					"stack_index": 147,
					"type": "text"
				},
				{
					"buffer": 109,
					"file": "src/Falcor/Core/API/ResourceViews.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8361,
						"regions":
						{
						},
						"selection":
						[
							[
								7692,
								7692
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2295.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 110,
					"file": "src/Falcor/Core/API/RootSignature.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6505,
						"regions":
						{
						},
						"selection":
						[
							[
								1837,
								1837
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 391.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 111,
					"file": "src/Falcor/Core/API/RootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8573,
						"regions":
						{
						},
						"selection":
						[
							[
								6626,
								6626
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2142.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 112,
					"file": "third_party/slang/tools/gfx/render.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28476,
						"regions":
						{
						},
						"selection":
						[
							[
								14530,
								14530
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9715.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"type": "text"
				},
				{
					"buffer": 113,
					"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5145,
						"regions":
						{
						},
						"selection":
						[
							[
								4884,
								4884
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1684.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 114,
					"file": "src/Falcor/Core/API/Device.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9733,
						"regions":
						{
						},
						"selection":
						[
							[
								7865,
								7865
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3230.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 115,
					"file": "src/Falcor/Core/API/GpuMemoryHeap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3971,
						"regions":
						{
						},
						"selection":
						[
							[
								3897,
								3897
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 116,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2815,
						"regions":
						{
						},
						"selection":
						[
							[
								2083,
								2083
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 134,
					"type": "text"
				},
				{
					"buffer": 117,
					"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21970,
						"regions":
						{
						},
						"selection":
						[
							[
								12010,
								12010
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5406.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 118,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4626,
						"regions":
						{
						},
						"selection":
						[
							[
								4344,
								4344
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1020.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"type": "text"
				},
				{
					"buffer": 119,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7783,
						"regions":
						{
						},
						"selection":
						[
							[
								3646,
								3646
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1904.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 120,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27543,
						"regions":
						{
						},
						"selection":
						[
							[
								1725,
								1725
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 335.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 121,
					"file": "src/Falcor/Core/API/Vulkan/VKGpuFence.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9726,
						"regions":
						{
						},
						"selection":
						[
							[
								8619,
								8619
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 135,
					"type": "text"
				},
				{
					"buffer": 122,
					"file": "src/Falcor/Core/API/D3D12/D3D12GpuFence.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3766,
						"regions":
						{
						},
						"selection":
						[
							[
								3204,
								3204
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 151,
					"type": "text"
				},
				{
					"buffer": 123,
					"file": "src/Falcor/Core/API/GpuFence.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3246,
						"regions":
						{
						},
						"selection":
						[
							[
								3221,
								3221
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 884.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 124,
					"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9204,
						"regions":
						{
						},
						"selection":
						[
							[
								7376,
								7376
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2754.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 125,
					"file": "falcor.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2115,
						"regions":
						{
						},
						"selection":
						[
							[
								808,
								808
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 126,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8286,
						"regions":
						{
						},
						"selection":
						[
							[
								1551,
								1597
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 127,
					"file": "third_party/slang/external/vulkan/include/vulkan/vulkan.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2369181,
						"regions":
						{
						},
						"selection":
						[
							[
								513094,
								513094
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 196351.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 128,
					"file": "/usr/include/vulkan/vulkan.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3544623,
						"regions":
						{
						},
						"selection":
						[
							[
								2684,
								2684
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 919.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 129,
					"file": "third_party/slang/external/vulkan/include/vulkan/vulkan_core.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 451013,
						"regions":
						{
						},
						"selection":
						[
							[
								1565,
								1565
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 433.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"type": "text"
				},
				{
					"buffer": 130,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 289,
						"regions":
						{
						},
						"selection":
						[
							[
								3,
								3
							]
						],
						"settings":
						{
							"auto_name": "1:",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 162,
					"type": "text"
				},
				{
					"buffer": 131,
					"file": "src/Falcor/Utils/Math/FalcorMath.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8456,
						"regions":
						{
						},
						"selection":
						[
							[
								6714,
								6714
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2725.0,
						"zoom_level": 1.0
					},
					"stack_index": 153,
					"type": "text"
				},
				{
					"buffer": 132,
					"file": "src/Falcor/Core/Framework.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13030,
						"regions":
						{
						},
						"selection":
						[
							[
								2621,
								2621
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 459.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 133,
					"file": "src/Falcor/Core/API/VertexLayout.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1862,
						"regions":
						{
						},
						"selection":
						[
							[
								1729,
								1729
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 134,
					"file": "src/Falcor/Core/FalcorConfig.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2513,
						"regions":
						{
						},
						"selection":
						[
							[
								2513,
								2513
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 135,
					"file": "src/Falcor/Falcor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6944,
						"regions":
						{
						},
						"selection":
						[
							[
								6655,
								6655
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 136,
					"file": "src/Falcor/Utils/Debug/PixelDebug.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5658,
						"regions":
						{
						},
						"selection":
						[
							[
								1867,
								1867
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 157,
					"type": "text"
				},
				{
					"buffer": 137,
					"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10841,
						"regions":
						{
						},
						"selection":
						[
							[
								8553,
								8553
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3060.0,
						"zoom_level": 1.0
					},
					"stack_index": 161,
					"type": "text"
				},
				{
					"buffer": 138,
					"file": "src/Falcor/Core/API/DescriptorPool.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4859,
						"regions":
						{
						},
						"selection":
						[
							[
								4858,
								4858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1514.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 139,
					"file": "src/Falcor/Core/State/GraphicsState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10462,
						"regions":
						{
						},
						"selection":
						[
							[
								10356,
								10356
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3507.0,
						"zoom_level": 1.0
					},
					"stack_index": 143,
					"type": "text"
				},
				{
					"buffer": 140,
					"file": "src/Falcor/Core/State/GraphicsState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9188,
						"regions":
						{
						},
						"selection":
						[
							[
								4438,
								4438
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1122.0,
						"zoom_level": 1.0
					},
					"stack_index": 122,
					"type": "text"
				},
				{
					"buffer": 141,
					"file": "src/Falcor/Core/State/ComputeState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3479,
						"regions":
						{
						},
						"selection":
						[
							[
								2881,
								2881
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 459.0,
						"zoom_level": 1.0
					},
					"stack_index": 123,
					"type": "text"
				},
				{
					"buffer": 142,
					"file": "src/Falcor/Core/State/ComputeState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3657,
						"regions":
						{
						},
						"selection":
						[
							[
								3300,
								3300
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 345.0,
						"zoom_level": 1.0
					},
					"stack_index": 124,
					"type": "text"
				},
				{
					"buffer": 143,
					"file": "src/Falcor/Raytracing/RtProgram/RtProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7986,
						"regions":
						{
						},
						"selection":
						[
							[
								5461,
								5461
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17.0,
						"zoom_level": 1.0
					},
					"stack_index": 156,
					"type": "text"
				},
				{
					"buffer": 144,
					"file": "src/Falcor/Raytracing/RtProgram/RtProgram.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6561,
						"regions":
						{
						},
						"selection":
						[
							[
								1881,
								1881
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2244.0,
						"zoom_level": 1.0
					},
					"stack_index": 155,
					"type": "text"
				},
				{
					"buffer": 145,
					"file": "src/Mogwai/AppData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2896,
						"regions":
						{
						},
						"selection":
						[
							[
								2896,
								2896
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 392.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 146,
					"file": "src/Falcor/Core/Platform/Linux/ProgressBarLinux.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5059,
						"regions":
						{
						},
						"selection":
						[
							[
								2626,
								2626
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"type": "text"
				},
				{
					"buffer": 147,
					"file": "src/Mogwai/AppData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5368,
						"regions":
						{
						},
						"selection":
						[
							[
								5367,
								5367
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 493.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 148,
					"file": "src/Falcor/Core/Sample.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23983,
						"regions":
						{
						},
						"selection":
						[
							[
								10538,
								10538
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4098.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 149,
					"file": "src/Falcor/Core/API/VertexLayout.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7327,
						"regions":
						{
						},
						"selection":
						[
							[
								1853,
								1853
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2550.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 150,
					"file": "src/Falcor/Core/API/Device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11359,
						"regions":
						{
						},
						"selection":
						[
							[
								1822,
								1822
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 170.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 151,
					"file": "src/Falcor/Core/API/DescriptorSet.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5235,
						"regions":
						{
						},
						"selection":
						[
							[
								2773,
								2773
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 664.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 152,
					"file": "src/Falcor/Core/API/DescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2524,
						"regions":
						{
						},
						"selection":
						[
							[
								2092,
								2092
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 153,
					"file": "src/Falcor/Core/API/ResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3567,
						"regions":
						{
						},
						"selection":
						[
							[
								2798,
								2798
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 154,
					"file": "Falcor.sln",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19418,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 154,
					"type": "text"
				},
				{
					"buffer": 155,
					"file": "src/Falcor/Scene/Scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24873,
						"regions":
						{
						},
						"selection":
						[
							[
								15547,
								15547
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5137.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"type": "text"
				},
				{
					"buffer": 156,
					"file": "src/Falcor/RenderGraph/RenderGraphUI.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8553,
						"regions":
						{
						},
						"selection":
						[
							[
								1855,
								1855
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 160,
					"type": "text"
				},
				{
					"buffer": 157,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4132,
						"regions":
						{
						},
						"selection":
						[
							[
								2066,
								2066
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 158,
					"type": "text"
				},
				{
					"buffer": 158,
					"file": "src/Falcor/Utils/Debug/DebugConsole.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4137,
						"regions":
						{
						},
						"selection":
						[
							[
								3723,
								3723
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"type": "text"
				},
				{
					"buffer": 159,
					"file": "src/Falcor/Utils/Debug/debug.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1646,
						"regions":
						{
						},
						"selection":
						[
							[
								484,
								484
							]
						],
						"settings":
						{
							"auto_name": "#ifndef __FALCOR_DEBUG_H__",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 160,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21369,
						"regions":
						{
						},
						"selection":
						[
							[
								2262,
								2262
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1006.0,
						"zoom_level": 1.0
					},
					"stack_index": 159,
					"type": "text"
				},
				{
					"buffer": 161,
					"file": "src/Falcor/Scene/Scene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53094,
						"regions":
						{
						},
						"selection":
						[
							[
								48218,
								48218
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18527.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"type": "text"
				},
				{
					"buffer": 162,
					"file": "src/Falcor/Core/API/D3D12/D3D12Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6227,
						"regions":
						{
						},
						"selection":
						[
							[
								5858,
								5858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 148,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 120.0
	},
	"output.unsaved_changes":
	{
		"height": 120.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 480.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
