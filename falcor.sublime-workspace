{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mip",
				"mipLevel"
			],
			[
				"uti",
				"uint8_t"
			],
			[
				"mipL",
				"mipLevelDims"
			],
			[
				"uint",
				"uint8_t"
			],
			[
				"img_",
				"img_width"
			],
			[
				"mI",
				"mInitialized"
			],
			[
				"mp",
				"mpThreadPool"
			],
			[
				"Te",
				"TextureSlot"
			],
			[
				"LT",
				"LTX_Bitmap"
			],
			[
				"m",
				"mHeader"
			],
			[
				"pages",
				"pagesNumZ"
			],
			[
				"page",
				"pagesNumY"
			],
			[
				"dependec",
				"dependency-tracking"
			],
			[
				"LAVA",
				"LAVA_HOME_DIR"
			],
			[
				"LA",
				"LAVA_INSTALL_DEPS_DIR"
			],
			[
				"D",
				"DCMAKE_BUILD_TYPE"
			],
			[
				"size",
				"sizeof"
			],
			[
				"pText",
				"pTexture"
			],
			[
				"mpS",
				"mpSceneBuilder"
			],
			[
				"part",
				"partialRow"
			],
			[
				"parti",
				"partialRow"
			],
			[
				"read",
				"readLinesCount"
			],
			[
				"uin",
				"uint32_t"
			],
			[
				"pa",
				"partialTileWidthStride"
			],
			[
				"wri",
				"writeLinesCount"
			],
			[
				"LOG",
				"LOG_WARN"
			],
			[
				"par",
				"partialPageDims"
			],
			[
				"alp",
				"alphaSpec"
			],
			[
				"srcF",
				"srcFilename"
			],
			[
				"vip",
				"vips"
			],
			[
				"ins",
				"instance"
			],
			[
				"re",
				"rendering_device"
			],
			[
				"ui",
				"uint32_t"
			],
			[
				"mTe",
				"mTextureLTXBitmapsMap"
			],
			[
				"tex",
				"texturePagesCount"
			],
			[
				"getS",
				"getSparsePagesCount"
			],
			[
				"texture",
				"texturesMap"
			],
			[
				"render",
				"renderData"
			],
			[
				"mpT",
				"mpTexturesResolvePassGraph"
			],
			[
				"res",
				"resolvePerFrameSparseResources"
			],
			[
				"GB",
				"GBufferRaster"
			],
			[
				"Texures",
				"mpTexturesResolvePass"
			],
			[
				"rend",
				"renderData"
			],
			[
				"upd",
				"updateFlags"
			],
			[
				"vt",
				"vtoff_flag"
			],
			[
				"p",
				"pGraph"
			],
			[
				"cu",
				"currPagesStartOffset"
			],
			[
				"ut",
				"uint32_t"
			],
			[
				"begi",
				"begin"
			],
			[
				"sta",
				"static_cast"
			],
			[
				"text",
				"textureID"
			],
			[
				"textu",
				"textureID"
			],
			[
				"resol",
				"resolvedTexturesCount"
			],
			[
				"te",
				"TexturesResolveID"
			],
			[
				"textureRe",
				"TexturesResolveID"
			],
			[
				"pTe",
				"pTextureData"
			],
			[
				"pT",
				"pTextureData"
			],
			[
				"pM",
				"pMatData"
			],
			[
				"out",
				"outData"
			],
			[
				"mMIp",
				"mMipBases"
			],
			[
				"time",
				"timeReport"
			],
			[
				"spe",
				"specializationKey"
			],
			[
				"get",
				"getKernels"
			],
			[
				"Pro",
				"ProgramVersion"
			],
			[
				"ma",
				"materialResources"
			],
			[
				"mS",
				"mSparsePageRes"
			],
			[
				"mater",
				"materialTextures"
			],
			[
				"tes",
				"texResolveData"
			],
			[
				"siz",
				"sizeof"
			],
			[
				"ti",
				"tileWidthStride"
			],
			[
				"las",
				"lastPageDims"
			],
			[
				"la",
				"lastPageDims"
			],
			[
				"src",
				"srcDims"
			],
			[
				"LOG_",
				"LOG_WARN"
			],
			[
				"Image",
				"ImageSpec"
			],
			[
				"spa",
				"sparseBindCounts"
			],
			[
				"ap",
				"apiInit"
			],
			[
				"tile",
				"tileIdxY"
			],
			[
				"til",
				"tileIdxX"
			],
			[
				"dst",
				"dstChannelCount"
			],
			[
				"n",
				"nchannels"
			],
			[
				"mi",
				"mipLevelsCount"
			],
			[
				"do",
				"doSourceResize"
			],
			[
				"ds",
				"dstDataSize"
			],
			[
				"sr",
				"srcFormat"
			],
			[
				"last",
				"lastDstPixelAddr"
			],
			[
				"sh",
				"should_not_get_here"
			],
			[
				"to",
				"totalBits"
			],
			[
				"getN",
				"getNumChannelBits"
			],
			[
				"cha",
				"channelCount"
			],
			[
				"ch",
				"channelCount"
			],
			[
				"flo",
				"floatData"
			],
			[
				"lin",
				"lineNum"
			],
			[
				"tiles",
				"tiles_buffer"
			],
			[
				"form",
				"format"
			],
			[
				"RE",
				"ResourceFormat"
			],
			[
				"name",
				"namespace"
			],
			[
				"in",
				"index"
			],
			[
				"lt",
				"ltxFilename"
			],
			[
				"pageD",
				"pageDims"
			],
			[
				"uit",
				"uint32_t"
			],
			[
				"Textur",
				"Texture"
			],
			[
				"LTX",
				"LTX_Bitmap"
			],
			[
				"c",
				"c_str"
			],
			[
				"mDa",
				"mpDataSize"
			],
			[
				"mn",
				"minor"
			],
			[
				"Ma",
				"major"
			],
			[
				"st",
				"static"
			],
			[
				"ca",
				"cacheDir"
			],
			[
				"used",
				"usedDeviceMemSize"
			],
			[
				"sha",
				"shared_from_this"
			],
			[
				"mem",
				"memory"
			],
			[
				"bi",
				"bitmapData"
			],
			[
				"by",
				"bytesPerRegionLine"
			],
			[
				"byte",
				"bytesPerSourceLine"
			],
			[
				"vec",
				"vector\tstd::vector"
			],
			[
				"Sta",
				"staging"
			],
			[
				"pD",
				"pDst"
			],
			[
				"upda",
				"updateTexturePage"
			],
			[
				"virta",
				"VirtualTexturePage"
			],
			[
				"data",
				"dataSize"
			],
			[
				"isS",
				"isSrvType"
			],
			[
				"memo",
				"memoryTypeIndex"
			],
			[
				"mMem",
				"mMemoryTypeIndex"
			],
			[
				"Sha",
				"SharedPtr"
			],
			[
				"sub",
				"subresourceIndex"
			],
			[
				"init",
				"initData"
			],
			[
				"queu",
				"queueFamilyCount"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Falcor/Core/Program/GraphicsProgram.cpp",
			"settings":
			{
				"buffer_size": 2672,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 7381 files for \"mutating\"\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slang-cpp-extractor:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/release/slang-cpp-extractor:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/docs/design/existential-types.md:\n  193  \n  194  ```\n  195: interface IWritable { [mutating] void write(int val); }\n  196  \n  197  stuct Cell : IWritable { int data; void write(int val) { data = val; } }\n\n/home/max/dev/Falcor/third_party/slang/docs/language-reference/05-expressions.md:\n  157  ### Mutability\n  158  \n  159: If a `[mutating]` instance is being called, the argument for the implicit `this` parameter must be an l-value.\n  160  \n  161  The argument expressions corresponding to any `out` or `in out` parameters of the callee must be l-values.\n\n/home/max/dev/Falcor/third_party/slang/docs/language-reference/07-declarations.md:\n  304  \n  305  By default the `this` parameter of an instance method acts as an immutable variable.\n  306: An instance method with the `[mutating]` attribute receives a mutable `this` parameter, and can only be invoked on a mutable value of the structure type.\n  307  \n  308  ### Inheritance\n  ...\n  566  \n  567  An initializer has access to an implicit `this` variable that is the instance being initialized; an initializer must not be marked `static`.\n  568: The `this` variable of an initializer is always mutable; an initializer need not, and must not, be marked `[mutating]`.\n  569  \n  570  > Note: Slang currently does not enforce that a type with an initializer can only be initialized using its initializers.\n  ...\n  610  The body of a getter is a code block like a function body, and must return the appropriate value for a subcript operation.\n  611  The body of a getter can access the parameters of the enclosing subscript, as a well as an implicit `this` parameter of the type that encloses the accessor.\n  612: The `this` parameter of a getter is immutable; `[mutating]` getters are not currently supported.\n  613  \n  614  Extensions\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/fuzzer_context.h:\n  388  \n  389    // Functions to determine with what probability to go deeper when generating\n  390:   // or mutating constructs recursively.\n  391    const std::function<bool(uint32_t, RandomGenerator*)>&\n  392        go_deeper_in_constant_obfuscation_;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/transformation.h:\n   73  \n   74    // Requires that IsApplicable(ir_context, *transformation_context) holds.\n   75:   // Applies the transformation, mutating |ir_context| and possibly updating\n   76    // |transformation_context| with new facts established by the transformation.\n   77    virtual void Apply(opt::IRContext* ir_context,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/reduce/reduction_opportunity.h:\n   31    virtual bool PreconditionHolds() = 0;\n   32  \n   33:   // Applies the opportunity, mutating the module from which the opportunity was\n   34    // created. It is a no-op if PreconditionHolds() returns false.\n   35    void TryToApply();\n   36  \n   37   protected:\n   38:   // Applies the opportunity, mutating the module from which the opportunity was\n   39    // created.\n   40    // Precondition: PreconditionHolds() must return true.\n\n/home/max/dev/Falcor/third_party/slang/source/slang/core.meta.slang:\n 1155  \n 1156                          // Set\n 1157:                         sb << \" [nonmutating] set;\\n\";\n 1158                      }\n 1159  \n ....\n 2035  \n 2036  __attributeTarget(FunctionDeclBase)\n 2037: attribute_syntax [mutating] : MutatingAttribute;\n 2038  \n 2039  __attributeTarget(SetterDecl)\n 2040: attribute_syntax [nonmutating] : NonmutatingAttribute;\n 2041  \n 2042      /// Indicates that a function computes its result as a function of its arguments without loading/storing any memory or other state.\n\n/home/max/dev/Falcor/third_party/slang/source/slang/core.meta.slang.h:\n 1244  \n 1245                          // Set\n 1246:                         sb << \" [nonmutating] set;\\n\";\n 1247                      }\n 1248  \n ....\n 2295  SLANG_RAW(\"\\n\")\n 2296  SLANG_RAW(\"__attributeTarget(FunctionDeclBase)\\n\")\n 2297: SLANG_RAW(\"attribute_syntax [mutating] : MutatingAttribute;\\n\")\n 2298  SLANG_RAW(\"\\n\")\n 2299  SLANG_RAW(\"__attributeTarget(SetterDecl)\\n\")\n 2300: SLANG_RAW(\"attribute_syntax [nonmutating] : NonmutatingAttribute;\\n\")\n 2301  SLANG_RAW(\"\\n\")\n 2302  SLANG_RAW(\"    /// Indicates that a function computes its result as a function of its arguments without loading/storing any memory or other state.\\n\")\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang:\n 4033      if (access != SLANG_RESOURCE_ACCESS_READ)\n 4034      {\n 4035:         sb << \"__target_intrinsic(glsl, \\\"imageStore($0, int($1), $V2)\\\") [nonmutating] set;\\n\";\n 4036  \n 4037          sb << \"__intrinsic_op(\" << int(kIROp_ImageSubscript) << \") ref;\\n\";\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang.h:\n 4120      if (access != SLANG_RESOURCE_ACCESS_READ)\n 4121      {\n 4122:         sb << \"__target_intrinsic(glsl, \\\"imageStore($0, int($1), $V2)\\\") [nonmutating] set;\\n\";\n 4123  \n 4124          sb << \"__intrinsic_op(\" << int(kIROp_ImageSubscript) << \") ref;\\n\";\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ast-generated-macro.h:\n  290      SLANG_ALL_ASTNode_VulkanCallablePayloadAttribute(x, param)\\\n  291      SLANG_ALL_ASTNode_VulkanHitAttributesAttribute(x, param)\\\n  292:     SLANG_ALL_ASTNode_MutatingAttribute(x, param)\\\n  293:     SLANG_ALL_ASTNode_NonmutatingAttribute(x, param)\\\n  294      SLANG_ALL_ASTNode_ReadNoneAttribute(x, param)\\\n  295      SLANG_ALL_ASTNode_FormatAttribute(x, param)\\\n  ...\n  364  #define SLANG_CHILDREN_ASTNode_VulkanHitAttributesAttribute(x, param)\n  365  \n  366: #define SLANG_CHILDREN_ASTNode_MutatingAttribute(x, param)\n  367  \n  368: #define SLANG_CHILDREN_ASTNode_NonmutatingAttribute(x, param)\n  369  \n  370  #define SLANG_CHILDREN_ASTNode_ReadNoneAttribute(x, param)\n  ...\n 1373      SLANG_ASTNode_VulkanHitAttributesAttribute(x, param)\n 1374  \n 1375: #define SLANG_ALL_ASTNode_MutatingAttribute(x, param) \\\n 1376:     SLANG_ASTNode_MutatingAttribute(x, param)\n 1377  \n 1378: #define SLANG_ALL_ASTNode_NonmutatingAttribute(x, param) \\\n 1379:     SLANG_ASTNode_NonmutatingAttribute(x, param)\n 1380  \n 1381  #define SLANG_ALL_ASTNode_ReadNoneAttribute(x, param) \\\n ....\n 2368  #define SLANG_FIELDS_ASTNode_VulkanHitAttributesAttribute(_x_, _param_)\n 2369  \n 2370: #define SLANG_FIELDS_ASTNode_MutatingAttribute(_x_, _param_)\n 2371  \n 2372: #define SLANG_FIELDS_ASTNode_NonmutatingAttribute(_x_, _param_)\n 2373  \n 2374  #define SLANG_FIELDS_ASTNode_ReadNoneAttribute(_x_, _param_)\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ast-generated.h:\n  120                          VulkanCallablePayloadAttribute = 111,\n  121                          VulkanHitAttributesAttribute = 112,\n  122:                         MutatingAttribute = 113,\n  123:                         NonmutatingAttribute = 114,\n  124                          ReadNoneAttribute = 115,\n  125                          FormatAttribute = 116,\n  ...\n  460  class VulkanCallablePayloadAttribute;\n  461  class VulkanHitAttributesAttribute;\n  462: class MutatingAttribute;\n  463: class NonmutatingAttribute;\n  464  class ReadNoneAttribute;\n  465  class FormatAttribute;\n  ...\n  805  #define SLANG_ASTNode_VulkanCallablePayloadAttribute(x, param)     x(VulkanCallablePayloadAttribute, Attribute, MODIFIER, VulkanCallablePayloadAttribute, NONE, LEAF, param)\n  806  #define SLANG_ASTNode_VulkanHitAttributesAttribute(x, param)     x(VulkanHitAttributesAttribute, Attribute, MODIFIER, VulkanHitAttributesAttribute, NONE, LEAF, param)\n  807: #define SLANG_ASTNode_MutatingAttribute(x, param)     x(MutatingAttribute, Attribute, MODIFIER, MutatingAttribute, NONE, LEAF, param)\n  808: #define SLANG_ASTNode_NonmutatingAttribute(x, param)     x(NonmutatingAttribute, Attribute, MODIFIER, NonmutatingAttribute, NONE, LEAF, param)\n  809  #define SLANG_ASTNode_ReadNoneAttribute(x, param)     x(ReadNoneAttribute, Attribute, MODIFIER, ReadNoneAttribute, NONE, LEAF, param)\n  810  #define SLANG_ASTNode_FormatAttribute(x, param)     x(FormatAttribute, Attribute, MODIFIER, FormatAttribute, NONE, LEAF, param)\n  ...\n 1249      x(VulkanCallablePayloadAttribute, param) \\\n 1250      x(VulkanHitAttributesAttribute, param) \\\n 1251:     x(MutatingAttribute, param) \\\n 1252:     x(NonmutatingAttribute, param) \\\n 1253      x(ReadNoneAttribute, param) \\\n 1254      x(HLSLGeometryShaderInputPrimitiveTypeModifier, param) \\\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ast-modifier.h:\n  765  \n  766  \n  767: // A `[mutating]` attribute, which indicates that a member\n  768  // function is allowed to modify things through its `this`\n  769  // argument.\n  770  //\n  771: class MutatingAttribute : public Attribute \n  772  {\n  773:     SLANG_CLASS(MutatingAttribute)\n  774  };\n  775  \n  776: // A `[nonmutating]` attribute, which indicates that a\n  777  // `set` accessor does not need to modify anything through\n  778  // its `this` parameter.\n  779  //\n  780: class NonmutatingAttribute : public Attribute\n  781  {\n  782:     SLANG_CLASS(NonmutatingAttribute)\n  783  };\n  784  \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-check-decl.cpp:\n 1344          RefPtr<WitnessTable>    witnessTable)\n 1345      {\n 1346:         if(satisfyingMemberDeclRef.getDecl()->hasModifier<MutatingAttribute>()\n 1347:             && !requiredMemberDeclRef.getDecl()->hasModifier<MutatingAttribute>())\n 1348          {\n 1349:             // A `[mutating]` method can't satisfy a non-`[mutating]` requirement,\n 1350              // but vice-versa is okay.\n 1351              return false;\n ....\n 1391  \n 1392          // TODO: There are other checks we need to make here, like not letting\n 1393:         // an ordinary `set` satisfy a `[nonmutating] set` requirement.\n 1394  \n 1395          return true;\n ....\n 1699          // method. E.g.:\n 1700          //\n 1701:         //      interface ICounter { [mutating] int increment(); }\n 1702          //      struct MyCounter : ICounter\n 1703          //      {\n ....\n 1802  \n 1803          // Required interface methods can be `static` or non-`static`,\n 1804:         // and non-`static` methods can be `[mutating]` or non-`[mutating]`.\n 1805          // All of these details affect how we introduce our `this` parameter,\n 1806          // if any.\n ....\n 1823              synThis->type.type = context->conformingType;\n 1824  \n 1825:             if( requiredMemberDeclRef.getDecl()->hasModifier<MutatingAttribute>() )\n 1826              {\n 1827:                 // If the interface requirement is `[mutating]` then our\n 1828                  // synthesized method should be too, and also the `this`\n 1829                  // parameter should be an l-value.\n ....\n 1831                  synThis->type.isLeftValue = true;\n 1832  \n 1833:                 auto synMutatingAttr = m_astBuilder->create<MutatingAttribute>();\n 1834:                 synFuncDecl->modifiers.first = synMutatingAttr;\n 1835              }\n 1836          }\n ....\n 2123                  synThis->type.isLeftValue = false;\n 2124  \n 2125:             // If the accessor requirement is `[nonmutating]` then our\n 2126              // synthesized accessor should be too, and also the `this`\n 2127              // parameter should *not* be an l-value.\n 2128              //\n 2129:             if( requiredAccessorDeclRef.getDecl()->hasModifier<NonmutatingAttribute>() )\n 2130              {\n 2131                  synThis->type.isLeftValue = false;\n 2132  \n 2133:                 auto synAttr = m_astBuilder->create<NonmutatingAttribute>();\n 2134                  synAccessorDecl->modifiers.first = synAttr;\n 2135              }\n 2136              //\n 2137:             // Note: we don't currently support `[mutating] get` accessors,\n 2138              // but the desired behavior in that case is clear, so we go\n 2139              // ahead and future-proof this code a bit:\n 2140              //\n 2141:             else if( requiredAccessorDeclRef.getDecl()->hasModifier<MutatingAttribute>() )\n 2142              {\n 2143                  synThis->type.isLeftValue = true;\n 2144  \n 2145:                 auto synAttr = m_astBuilder->create<MutatingAttribute>();\n 2146                  synAccessorDecl->modifiers.first = synAttr;\n 2147              }\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-check-expr.cpp:\n  341                          // Note that we allow a cast of an l-value to\n  342                          // be used as an l-value here because it enables\n  343:                         // `[mutating]` methods to be called, and\n  344                          // mutable properties to be modified, but this\n  345                          // is probably not *technically* correct, since\n  ...\n 2041              else if( auto funcDeclBase = as<FunctionDeclBase>(containerDecl) )\n 2042              {\n 2043:                 if( funcDeclBase->hasModifier<MutatingAttribute>() )\n 2044                  {\n 2045                      expr->type.isLeftValue = true;\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-check-overload.cpp:\n  359      }\n  360  \n  361:     bool isEffectivelyMutating(CallableDecl* decl)\n  362      {\n  363:         if(decl->hasModifier<MutatingAttribute>())\n  364              return true;\n  365  \n  366:         if(decl->hasModifier<NonmutatingAttribute>())\n  367              return false;\n  368  \n  ...\n  393          if(!isEffectivelyStatic(funcDeclRef.getDecl()))\n  394          {\n  395:             if(isEffectivelyMutating(funcDeclRef.getDecl()))\n  396              {\n  397                  if(context.baseExpr && !context.baseExpr->type.isLeftValue)\n  ...\n  399                      if(context.mode == OverloadResolveContext::Mode::ForReal)\n  400                      {\n  401:                         getSink()->diagnose(context.loc, Diagnostics::mutatingMethodOnImmutableValue, funcDeclRef.getName());\n  402                          maybeDiagnoseThisNotLValue(context.baseExpr);\n  403                      }\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-diagnostic-defs.h:\n  257  DIAGNOSTIC(30047, Error, argumentExpectedLValue, \"argument passed to parameter '$0' must be l-value.\")\n  258  DIAGNOSTIC(30048, Note,  implicitCastUsedAsLValue, \"argument was implicitly cast from '$0' to '$1', and Slang does not support using an implicit cast as an l-value\")\n  259: DIAGNOSTIC(30049, Note,  thisIsImmutableByDefault, \"a 'this' parameter is an immutable parameter by default in Slang; apply the `[mutating]` attribute to the function declaration to opt in to a mutable `this`\")\n  260: DIAGNOSTIC(30050, Error,  mutatingMethodOnImmutableValue, \"mutating method '$0' cannot be called on an immutable value\")\n  261  \n  262  DIAGNOSTIC(30051, Error, invalidValueForArgument, \"invalid value for argument '$0'\")\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-lookup.cpp:\n  782              // again, we need to consider what the current scope tells us\n  783              // about how to interpret uses of implicit `this` or `This`. For\n  784:             // example, if we are inside a `[mutating]` method, then the implicit\n  785              // `this` that we use for lookup should be an l-value.\n  786              //\n  ...\n  820                      thisParameterMode = LookupResultItem::Breadcrumb::ThisParameterMode::Type;\n  821                  }\n  822:                 else if( funcDeclRef.getDecl()->hasModifier<MutatingAttribute>() )\n  823                  {\n  824:                     // In a non-`static` method marked `[mutating]` there is\n  825                      // an implicit `this` parameter that is mutable.\n  826                      //\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-lower-to-ir.cpp:\n 1269                  // Create a `this` parameter of the tagged-union type.\n 1270                  //\n 1271:                 // TODO: need to handle the `[mutating]` case here...\n 1272                  //\n 1273                  auto irThisType = irTaggedUnionType;\n ....\n 2196  {\n 2197      // Applications can opt in to a mutable `this` parameter,\n 2198:     // by applying the `[mutating]` attribute to their\n 2199      // declaration.\n 2200      //\n 2201:     if( parentDecl->hasModifier<MutatingAttribute>() )\n 2202      {\n 2203          return kParameterDirection_InOut;\n ....\n 2206      // A `set` accessor on a property or subscript declaration\n 2207      // defaults to a mutable `this` parameter, but the programmer\n 2208:     // can opt out of this behavior using `[nonmutating]`\n 2209      //\n 2210:     if( parentDecl->hasModifier<NonmutatingAttribute>() )\n 2211      {\n 2212          return kParameterDirection_In;\n\n/home/max/dev/Falcor/third_party/slang/tests/bugs/gl-33-ext.slang:\n    5  {\n    6      int state;\n    7:     [mutating] int next() { return state; }\n    8  };\n    9  \n\n/home/max/dev/Falcor/third_party/slang/tests/compute/assoctype-nested.slang:\n   10  interface IRandomGenerator\n   11  {\n   12: \t[mutating] int generateVal();\n   13  }\n   14  \n   ..\n   31  \t{\n   32  \t\tint state;\n   33: \t\t[mutating] int generateVal()\n   34  \t\t{\n   35  \t\t\treturn state++;\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/dynamic-dispatch-4.slang:\n    7  interface IInterface\n    8  {\n    9:     [mutating]\n   10      int Compute(int inVal);\n   11  };\n   ..\n   21  {\n   22      int base;\n   23:     [mutating]\n   24      int Compute(int inVal)\n   25      {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/dynamic-dispatch-6.slang:\n    6  interface IInterface\n    7  {\n    8:     [mutating]\n    9      void SetVal(int inVal);\n   10      int Compute();\n   ..\n   26  {\n   27      int base;\n   28:     [mutating]\n   29      void SetVal(int inVal)\n   30      {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/dynamic-dispatch-7.slang:\n   15      associatedtype TAssoc : IAssoc;\n   16  \n   17:     [mutating]\n   18      void SetVal(int inVal);\n   19  \n   ..\n   52  \n   53      TAssoc assoc;\n   54:     [mutating]\n   55      void SetVal(int inVal)\n   56      {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/empty-struct2.slang:\n   11      associatedtype T;\n   12      T getT();\n   13:     [mutating]\n   14      void setT(T val);\n   15  }\n   ..\n   32          return value;\n   33      }\n   34:     [mutating]\n   35      void setT(TT val)\n   36      {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param-in-struct.slang:\n   13  interface IRandomNumberGenerator\n   14  {\n   15:     [mutating]\n   16      int randomInt();\n   17  }\n   ..\n  106          int state;\n  107  \n  108:         [mutating]\n  109          int randomInt()\n  110          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param.slang:\n   15  interface IRandomNumberGenerator\n   16  {\n   17:     [mutating]\n   18      int randomInt();\n   19  }\n   ..\n  112          int state;\n  113  \n  114:         [mutating]\n  115          int randomInt()\n  116          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param2.slang:\n   14  interface IRandomNumberGenerator\n   15  {\n   16:     [mutating]\n   17      int randomInt();\n   18  }\n   ..\n   76          int state;\n   77  \n   78:         [mutating]\n   79          int randomInt()\n   80          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param3.slang:\n   14  interface IRandomNumberGenerator\n   15  {\n   16:     [mutating]\n   17      int randomInt();\n   18  }\n   ..\n  113          int state;\n  114  \n  115:         [mutating]\n  116          int randomInt()\n  117          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param4.slang:\n   15  interface IRandomNumberGenerator\n   16  {\n   17:     [mutating]\n   18      int randomInt();\n   19  }\n   ..\n  109          int state;\n  110  \n  111:         [mutating]\n  112          int randomInt()\n  113          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/mutating-and-inout.slang:\n    1: // mutating-and-inout.slang\n    2  \n    3: // Test that calling a `[mutating]` method on an `inout` function parameter works.\n    4  \n    5  //TEST(compute):COMPARE_COMPUTE:\n    .\n   12  \tint x;\n   13  \n   14: \t[mutating] void doThings(inout int y)\n   15  \t{\n   16  \t\tint tmp = x;\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/mutating-methods.slang:\n    1: // mutating-methods.slang\n    2  //TEST(compute):COMPARE_COMPUTE_EX:-slang -compute -xslang -serial-ir\n    3  //TEST(compute):COMPARE_COMPUTE_EX:-slang -compute -dx12 -xslang -serial-ir\n    .\n    7  interface IAccumulator\n    8  {\n    9: \t[mutating] void accumulate(int v);\n   10  }\n   11  \n   ..\n   14      int state;\n   15  \n   16: \t[mutating] void accumulate(int v)\n   17  \t{\n   18  \t\tstate += v;\n   19  \t}\n   20  \n   21: \t[mutating] void accumulateMore(int v)\n   22  \t{\n   23  \t\tthis.state += v;\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/interfaces/mutating-impl-of-non-mutating-req.slang:\n    1: // mutating-impl-of-non-mutating-req.slang\n    2  \n    3  //DIAGNOSTIC_TEST:SIMPLE:-target hlsl -entry main\n    .\n   12      int state;\n   13  \n   14:     [mutating] int processValue(int inValue)\n   15      {\n   16          int result = state;\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/interfaces/mutating-impl-of-non-mutating-req.slang.expected:\n    1  result code = -1\n    2  standard error = {\n    3: tests/diagnostics/interfaces/mutating-impl-of-non-mutating-req.slang(10): error 38100: type 'Counter' does not provide required interface member 'processValue'\n    4  }\n    5  standard output = {\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/methods/mutating-method-on-rvalue.slang:\n    1: // mutating-method-on-rvalue.slang\n    2  \n    3  //DIAGNOSTIC_TEST:SIMPLE:-target hlsl -entry main\n    .\n    7      int count;\n    8  \n    9:     [mutating] void increment() { count++; }\n   10  \n   11      void bad()\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/methods/mutating-method-on-rvalue.slang.expected:\n    1  result code = -1\n    2  standard error = {\n    3: tests/diagnostics/methods/mutating-method-on-rvalue.slang(13): error 30050: mutating method 'increment' cannot be called on an immutable value\n    4: tests/diagnostics/methods/mutating-method-on-rvalue.slang(13): note 30049: a 'this' parameter is an immutable parameter by default in Slang; apply the `[mutating]` attribute to the function declaration to opt in to a mutable `this`\n    5: tests/diagnostics/methods/mutating-method-on-rvalue.slang(25): error 30050: mutating method 'increment' cannot be called on an immutable value\n    6  }\n    7  standard output = {\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/setter-method.slang:\n    4  \n    5  // Make sure we provide a user a diagnostic if they\n    6: // try to declare a setter method without `mutating`\n    7: // (even if we don't support `mutating` yet).\n    8  \n    9  struct Sphere\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/setter-method.slang.expected:\n    2  standard error = {\n    3  tests/diagnostics/setter-method.slang(16): error 30011: left of '=' is not an l-value.\n    4: tests/diagnostics/setter-method.slang(16): note 30049: a 'this' parameter is an immutable parameter by default in Slang; apply the `[mutating]` attribute to the function declaration to opt in to a mutable `this`\n    5  tests/diagnostics/setter-method.slang(21): error 30011: left of '=' is not an l-value.\n    6: tests/diagnostics/setter-method.slang(21): note 30049: a 'this' parameter is an immutable parameter by default in Slang; apply the `[mutating]` attribute to the function declaration to opt in to a mutable `this`\n    7  }\n    8  standard output = {\n\n/home/max/dev/Falcor/third_party/slang/tests/language-feature/extensions/interface-extension.slang:\n    7  interface ICounter\n    8  {\n    9: \t[mutating] void add(int value);\n   10  }\n   11  \n   ..\n   14  \tint _state = 0;\n   15  \n   16: \t[mutating] void add(int value) { _state += value; }\n   17  }\n   18  \n   19  extension ICounter\n   20  {\n   21: \t[mutating] void increment()\n   22  \t{\n   23  \t    this.add(1);\n\n/home/max/dev/Falcor/third_party/slang/tests/language-feature/generics/struct-generic-value-param-import.slang:\n   13      int state;\n   14  \n   15:     [mutating] void doStuff()\n   16      {\n   17          state++;\n\n/home/max/dev/Falcor/third_party/slang/tests/language-feature/properties/property-in-interface.slang:\n   23      int getValue() { return value; }\n   24  \n   25:     [mutating] void setValue(int v) { value = v; }\n   26  }\n   27  \n\n146 matches across 43 files\n\n\nSearching 7381 files for \"mutating\"\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slang-cpp-extractor:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/release/slang-cpp-extractor:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/docs/design/existential-types.md:\n  193  \n  194  ```\n  195: interface IWritable { [mutating] void write(int val); }\n  196  \n  197  stuct Cell : IWritable { int data; void write(int val) { data = val; } }\n\n/home/max/dev/Falcor/third_party/slang/docs/language-reference/05-expressions.md:\n  157  ### Mutability\n  158  \n  159: If a `[mutating]` instance is being called, the argument for the implicit `this` parameter must be an l-value.\n  160  \n  161  The argument expressions corresponding to any `out` or `in out` parameters of the callee must be l-values.\n\n/home/max/dev/Falcor/third_party/slang/docs/language-reference/07-declarations.md:\n  304  \n  305  By default the `this` parameter of an instance method acts as an immutable variable.\n  306: An instance method with the `[mutating]` attribute receives a mutable `this` parameter, and can only be invoked on a mutable value of the structure type.\n  307  \n  308  ### Inheritance\n  ...\n  566  \n  567  An initializer has access to an implicit `this` variable that is the instance being initialized; an initializer must not be marked `static`.\n  568: The `this` variable of an initializer is always mutable; an initializer need not, and must not, be marked `[mutating]`.\n  569  \n  570  > Note: Slang currently does not enforce that a type with an initializer can only be initialized using its initializers.\n  ...\n  610  The body of a getter is a code block like a function body, and must return the appropriate value for a subcript operation.\n  611  The body of a getter can access the parameters of the enclosing subscript, as a well as an implicit `this` parameter of the type that encloses the accessor.\n  612: The `this` parameter of a getter is immutable; `[mutating]` getters are not currently supported.\n  613  \n  614  Extensions\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/fuzzer_context.h:\n  388  \n  389    // Functions to determine with what probability to go deeper when generating\n  390:   // or mutating constructs recursively.\n  391    const std::function<bool(uint32_t, RandomGenerator*)>&\n  392        go_deeper_in_constant_obfuscation_;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/transformation.h:\n   73  \n   74    // Requires that IsApplicable(ir_context, *transformation_context) holds.\n   75:   // Applies the transformation, mutating |ir_context| and possibly updating\n   76    // |transformation_context| with new facts established by the transformation.\n   77    virtual void Apply(opt::IRContext* ir_context,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/reduce/reduction_opportunity.h:\n   31    virtual bool PreconditionHolds() = 0;\n   32  \n   33:   // Applies the opportunity, mutating the module from which the opportunity was\n   34    // created. It is a no-op if PreconditionHolds() returns false.\n   35    void TryToApply();\n   36  \n   37   protected:\n   38:   // Applies the opportunity, mutating the module from which the opportunity was\n   39    // created.\n   40    // Precondition: PreconditionHolds() must return true.\n\n/home/max/dev/Falcor/third_party/slang/source/slang/core.meta.slang:\n 1155  \n 1156                          // Set\n 1157:                         sb << \" [nonmutating] set;\\n\";\n 1158                      }\n 1159  \n ....\n 2035  \n 2036  __attributeTarget(FunctionDeclBase)\n 2037: attribute_syntax [mutating] : MutatingAttribute;\n 2038  \n 2039  __attributeTarget(SetterDecl)\n 2040: attribute_syntax [nonmutating] : NonmutatingAttribute;\n 2041  \n 2042      /// Indicates that a function computes its result as a function of its arguments without loading/storing any memory or other state.\n\n/home/max/dev/Falcor/third_party/slang/source/slang/core.meta.slang.h:\n 1244  \n 1245                          // Set\n 1246:                         sb << \" [nonmutating] set;\\n\";\n 1247                      }\n 1248  \n ....\n 2295  SLANG_RAW(\"\\n\")\n 2296  SLANG_RAW(\"__attributeTarget(FunctionDeclBase)\\n\")\n 2297: SLANG_RAW(\"attribute_syntax [mutating] : MutatingAttribute;\\n\")\n 2298  SLANG_RAW(\"\\n\")\n 2299  SLANG_RAW(\"__attributeTarget(SetterDecl)\\n\")\n 2300: SLANG_RAW(\"attribute_syntax [nonmutating] : NonmutatingAttribute;\\n\")\n 2301  SLANG_RAW(\"\\n\")\n 2302  SLANG_RAW(\"    /// Indicates that a function computes its result as a function of its arguments without loading/storing any memory or other state.\\n\")\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang:\n 4033      if (access != SLANG_RESOURCE_ACCESS_READ)\n 4034      {\n 4035:         sb << \"__target_intrinsic(glsl, \\\"imageStore($0, int($1), $V2)\\\") [nonmutating] set;\\n\";\n 4036  \n 4037          sb << \"__intrinsic_op(\" << int(kIROp_ImageSubscript) << \") ref;\\n\";\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang.h:\n 4120      if (access != SLANG_RESOURCE_ACCESS_READ)\n 4121      {\n 4122:         sb << \"__target_intrinsic(glsl, \\\"imageStore($0, int($1), $V2)\\\") [nonmutating] set;\\n\";\n 4123  \n 4124          sb << \"__intrinsic_op(\" << int(kIROp_ImageSubscript) << \") ref;\\n\";\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ast-generated-macro.h:\n  290      SLANG_ALL_ASTNode_VulkanCallablePayloadAttribute(x, param)\\\n  291      SLANG_ALL_ASTNode_VulkanHitAttributesAttribute(x, param)\\\n  292:     SLANG_ALL_ASTNode_MutatingAttribute(x, param)\\\n  293:     SLANG_ALL_ASTNode_NonmutatingAttribute(x, param)\\\n  294      SLANG_ALL_ASTNode_ReadNoneAttribute(x, param)\\\n  295      SLANG_ALL_ASTNode_FormatAttribute(x, param)\\\n  ...\n  364  #define SLANG_CHILDREN_ASTNode_VulkanHitAttributesAttribute(x, param)\n  365  \n  366: #define SLANG_CHILDREN_ASTNode_MutatingAttribute(x, param)\n  367  \n  368: #define SLANG_CHILDREN_ASTNode_NonmutatingAttribute(x, param)\n  369  \n  370  #define SLANG_CHILDREN_ASTNode_ReadNoneAttribute(x, param)\n  ...\n 1373      SLANG_ASTNode_VulkanHitAttributesAttribute(x, param)\n 1374  \n 1375: #define SLANG_ALL_ASTNode_MutatingAttribute(x, param) \\\n 1376:     SLANG_ASTNode_MutatingAttribute(x, param)\n 1377  \n 1378: #define SLANG_ALL_ASTNode_NonmutatingAttribute(x, param) \\\n 1379:     SLANG_ASTNode_NonmutatingAttribute(x, param)\n 1380  \n 1381  #define SLANG_ALL_ASTNode_ReadNoneAttribute(x, param) \\\n ....\n 2368  #define SLANG_FIELDS_ASTNode_VulkanHitAttributesAttribute(_x_, _param_)\n 2369  \n 2370: #define SLANG_FIELDS_ASTNode_MutatingAttribute(_x_, _param_)\n 2371  \n 2372: #define SLANG_FIELDS_ASTNode_NonmutatingAttribute(_x_, _param_)\n 2373  \n 2374  #define SLANG_FIELDS_ASTNode_ReadNoneAttribute(_x_, _param_)\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ast-generated.h:\n  120                          VulkanCallablePayloadAttribute = 111,\n  121                          VulkanHitAttributesAttribute = 112,\n  122:                         MutatingAttribute = 113,\n  123:                         NonmutatingAttribute = 114,\n  124                          ReadNoneAttribute = 115,\n  125                          FormatAttribute = 116,\n  ...\n  460  class VulkanCallablePayloadAttribute;\n  461  class VulkanHitAttributesAttribute;\n  462: class MutatingAttribute;\n  463: class NonmutatingAttribute;\n  464  class ReadNoneAttribute;\n  465  class FormatAttribute;\n  ...\n  805  #define SLANG_ASTNode_VulkanCallablePayloadAttribute(x, param)     x(VulkanCallablePayloadAttribute, Attribute, MODIFIER, VulkanCallablePayloadAttribute, NONE, LEAF, param)\n  806  #define SLANG_ASTNode_VulkanHitAttributesAttribute(x, param)     x(VulkanHitAttributesAttribute, Attribute, MODIFIER, VulkanHitAttributesAttribute, NONE, LEAF, param)\n  807: #define SLANG_ASTNode_MutatingAttribute(x, param)     x(MutatingAttribute, Attribute, MODIFIER, MutatingAttribute, NONE, LEAF, param)\n  808: #define SLANG_ASTNode_NonmutatingAttribute(x, param)     x(NonmutatingAttribute, Attribute, MODIFIER, NonmutatingAttribute, NONE, LEAF, param)\n  809  #define SLANG_ASTNode_ReadNoneAttribute(x, param)     x(ReadNoneAttribute, Attribute, MODIFIER, ReadNoneAttribute, NONE, LEAF, param)\n  810  #define SLANG_ASTNode_FormatAttribute(x, param)     x(FormatAttribute, Attribute, MODIFIER, FormatAttribute, NONE, LEAF, param)\n  ...\n 1249      x(VulkanCallablePayloadAttribute, param) \\\n 1250      x(VulkanHitAttributesAttribute, param) \\\n 1251:     x(MutatingAttribute, param) \\\n 1252:     x(NonmutatingAttribute, param) \\\n 1253      x(ReadNoneAttribute, param) \\\n 1254      x(HLSLGeometryShaderInputPrimitiveTypeModifier, param) \\\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ast-modifier.h:\n  765  \n  766  \n  767: // A `[mutating]` attribute, which indicates that a member\n  768  // function is allowed to modify things through its `this`\n  769  // argument.\n  770  //\n  771: class MutatingAttribute : public Attribute \n  772  {\n  773:     SLANG_CLASS(MutatingAttribute)\n  774  };\n  775  \n  776: // A `[nonmutating]` attribute, which indicates that a\n  777  // `set` accessor does not need to modify anything through\n  778  // its `this` parameter.\n  779  //\n  780: class NonmutatingAttribute : public Attribute\n  781  {\n  782:     SLANG_CLASS(NonmutatingAttribute)\n  783  };\n  784  \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-check-decl.cpp:\n 1344          RefPtr<WitnessTable>    witnessTable)\n 1345      {\n 1346:         if(satisfyingMemberDeclRef.getDecl()->hasModifier<MutatingAttribute>()\n 1347:             && !requiredMemberDeclRef.getDecl()->hasModifier<MutatingAttribute>())\n 1348          {\n 1349:             // A `[mutating]` method can't satisfy a non-`[mutating]` requirement,\n 1350              // but vice-versa is okay.\n 1351              return false;\n ....\n 1391  \n 1392          // TODO: There are other checks we need to make here, like not letting\n 1393:         // an ordinary `set` satisfy a `[nonmutating] set` requirement.\n 1394  \n 1395          return true;\n ....\n 1699          // method. E.g.:\n 1700          //\n 1701:         //      interface ICounter { [mutating] int increment(); }\n 1702          //      struct MyCounter : ICounter\n 1703          //      {\n ....\n 1802  \n 1803          // Required interface methods can be `static` or non-`static`,\n 1804:         // and non-`static` methods can be `[mutating]` or non-`[mutating]`.\n 1805          // All of these details affect how we introduce our `this` parameter,\n 1806          // if any.\n ....\n 1823              synThis->type.type = context->conformingType;\n 1824  \n 1825:             if( requiredMemberDeclRef.getDecl()->hasModifier<MutatingAttribute>() )\n 1826              {\n 1827:                 // If the interface requirement is `[mutating]` then our\n 1828                  // synthesized method should be too, and also the `this`\n 1829                  // parameter should be an l-value.\n ....\n 1831                  synThis->type.isLeftValue = true;\n 1832  \n 1833:                 auto synMutatingAttr = m_astBuilder->create<MutatingAttribute>();\n 1834:                 synFuncDecl->modifiers.first = synMutatingAttr;\n 1835              }\n 1836          }\n ....\n 2123                  synThis->type.isLeftValue = false;\n 2124  \n 2125:             // If the accessor requirement is `[nonmutating]` then our\n 2126              // synthesized accessor should be too, and also the `this`\n 2127              // parameter should *not* be an l-value.\n 2128              //\n 2129:             if( requiredAccessorDeclRef.getDecl()->hasModifier<NonmutatingAttribute>() )\n 2130              {\n 2131                  synThis->type.isLeftValue = false;\n 2132  \n 2133:                 auto synAttr = m_astBuilder->create<NonmutatingAttribute>();\n 2134                  synAccessorDecl->modifiers.first = synAttr;\n 2135              }\n 2136              //\n 2137:             // Note: we don't currently support `[mutating] get` accessors,\n 2138              // but the desired behavior in that case is clear, so we go\n 2139              // ahead and future-proof this code a bit:\n 2140              //\n 2141:             else if( requiredAccessorDeclRef.getDecl()->hasModifier<MutatingAttribute>() )\n 2142              {\n 2143                  synThis->type.isLeftValue = true;\n 2144  \n 2145:                 auto synAttr = m_astBuilder->create<MutatingAttribute>();\n 2146                  synAccessorDecl->modifiers.first = synAttr;\n 2147              }\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-check-expr.cpp:\n  341                          // Note that we allow a cast of an l-value to\n  342                          // be used as an l-value here because it enables\n  343:                         // `[mutating]` methods to be called, and\n  344                          // mutable properties to be modified, but this\n  345                          // is probably not *technically* correct, since\n  ...\n 2041              else if( auto funcDeclBase = as<FunctionDeclBase>(containerDecl) )\n 2042              {\n 2043:                 if( funcDeclBase->hasModifier<MutatingAttribute>() )\n 2044                  {\n 2045                      expr->type.isLeftValue = true;\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-check-overload.cpp:\n  359      }\n  360  \n  361:     bool isEffectivelyMutating(CallableDecl* decl)\n  362      {\n  363:         if(decl->hasModifier<MutatingAttribute>())\n  364              return true;\n  365  \n  366:         if(decl->hasModifier<NonmutatingAttribute>())\n  367              return false;\n  368  \n  ...\n  393          if(!isEffectivelyStatic(funcDeclRef.getDecl()))\n  394          {\n  395:             if(isEffectivelyMutating(funcDeclRef.getDecl()))\n  396              {\n  397                  if(context.baseExpr && !context.baseExpr->type.isLeftValue)\n  ...\n  399                      if(context.mode == OverloadResolveContext::Mode::ForReal)\n  400                      {\n  401:                         getSink()->diagnose(context.loc, Diagnostics::mutatingMethodOnImmutableValue, funcDeclRef.getName());\n  402                          maybeDiagnoseThisNotLValue(context.baseExpr);\n  403                      }\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-diagnostic-defs.h:\n  257  DIAGNOSTIC(30047, Error, argumentExpectedLValue, \"argument passed to parameter '$0' must be l-value.\")\n  258  DIAGNOSTIC(30048, Note,  implicitCastUsedAsLValue, \"argument was implicitly cast from '$0' to '$1', and Slang does not support using an implicit cast as an l-value\")\n  259: DIAGNOSTIC(30049, Note,  thisIsImmutableByDefault, \"a 'this' parameter is an immutable parameter by default in Slang; apply the `[mutating]` attribute to the function declaration to opt in to a mutable `this`\")\n  260: DIAGNOSTIC(30050, Error,  mutatingMethodOnImmutableValue, \"mutating method '$0' cannot be called on an immutable value\")\n  261  \n  262  DIAGNOSTIC(30051, Error, invalidValueForArgument, \"invalid value for argument '$0'\")\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-lookup.cpp:\n  782              // again, we need to consider what the current scope tells us\n  783              // about how to interpret uses of implicit `this` or `This`. For\n  784:             // example, if we are inside a `[mutating]` method, then the implicit\n  785              // `this` that we use for lookup should be an l-value.\n  786              //\n  ...\n  820                      thisParameterMode = LookupResultItem::Breadcrumb::ThisParameterMode::Type;\n  821                  }\n  822:                 else if( funcDeclRef.getDecl()->hasModifier<MutatingAttribute>() )\n  823                  {\n  824:                     // In a non-`static` method marked `[mutating]` there is\n  825                      // an implicit `this` parameter that is mutable.\n  826                      //\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-lower-to-ir.cpp:\n 1269                  // Create a `this` parameter of the tagged-union type.\n 1270                  //\n 1271:                 // TODO: need to handle the `[mutating]` case here...\n 1272                  //\n 1273                  auto irThisType = irTaggedUnionType;\n ....\n 2196  {\n 2197      // Applications can opt in to a mutable `this` parameter,\n 2198:     // by applying the `[mutating]` attribute to their\n 2199      // declaration.\n 2200      //\n 2201:     if( parentDecl->hasModifier<MutatingAttribute>() )\n 2202      {\n 2203          return kParameterDirection_InOut;\n ....\n 2206      // A `set` accessor on a property or subscript declaration\n 2207      // defaults to a mutable `this` parameter, but the programmer\n 2208:     // can opt out of this behavior using `[nonmutating]`\n 2209      //\n 2210:     if( parentDecl->hasModifier<NonmutatingAttribute>() )\n 2211      {\n 2212          return kParameterDirection_In;\n\n/home/max/dev/Falcor/third_party/slang/tests/bugs/gl-33-ext.slang:\n    5  {\n    6      int state;\n    7:     [mutating] int next() { return state; }\n    8  };\n    9  \n\n/home/max/dev/Falcor/third_party/slang/tests/compute/assoctype-nested.slang:\n   10  interface IRandomGenerator\n   11  {\n   12: \t[mutating] int generateVal();\n   13  }\n   14  \n   ..\n   31  \t{\n   32  \t\tint state;\n   33: \t\t[mutating] int generateVal()\n   34  \t\t{\n   35  \t\t\treturn state++;\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/dynamic-dispatch-4.slang:\n    7  interface IInterface\n    8  {\n    9:     [mutating]\n   10      int Compute(int inVal);\n   11  };\n   ..\n   21  {\n   22      int base;\n   23:     [mutating]\n   24      int Compute(int inVal)\n   25      {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/dynamic-dispatch-6.slang:\n    6  interface IInterface\n    7  {\n    8:     [mutating]\n    9      void SetVal(int inVal);\n   10      int Compute();\n   ..\n   26  {\n   27      int base;\n   28:     [mutating]\n   29      void SetVal(int inVal)\n   30      {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/dynamic-dispatch-7.slang:\n   15      associatedtype TAssoc : IAssoc;\n   16  \n   17:     [mutating]\n   18      void SetVal(int inVal);\n   19  \n   ..\n   52  \n   53      TAssoc assoc;\n   54:     [mutating]\n   55      void SetVal(int inVal)\n   56      {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/empty-struct2.slang:\n   11      associatedtype T;\n   12      T getT();\n   13:     [mutating]\n   14      void setT(T val);\n   15  }\n   ..\n   32          return value;\n   33      }\n   34:     [mutating]\n   35      void setT(TT val)\n   36      {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param-in-struct.slang:\n   13  interface IRandomNumberGenerator\n   14  {\n   15:     [mutating]\n   16      int randomInt();\n   17  }\n   ..\n  106          int state;\n  107  \n  108:         [mutating]\n  109          int randomInt()\n  110          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param.slang:\n   15  interface IRandomNumberGenerator\n   16  {\n   17:     [mutating]\n   18      int randomInt();\n   19  }\n   ..\n  112          int state;\n  113  \n  114:         [mutating]\n  115          int randomInt()\n  116          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param2.slang:\n   14  interface IRandomNumberGenerator\n   15  {\n   16:     [mutating]\n   17      int randomInt();\n   18  }\n   ..\n   76          int state;\n   77  \n   78:         [mutating]\n   79          int randomInt()\n   80          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param3.slang:\n   14  interface IRandomNumberGenerator\n   15  {\n   16:     [mutating]\n   17      int randomInt();\n   18  }\n   ..\n  113          int state;\n  114  \n  115:         [mutating]\n  116          int randomInt()\n  117          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/interface-shader-param4.slang:\n   15  interface IRandomNumberGenerator\n   16  {\n   17:     [mutating]\n   18      int randomInt();\n   19  }\n   ..\n  109          int state;\n  110  \n  111:         [mutating]\n  112          int randomInt()\n  113          {\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/mutating-and-inout.slang:\n    1: // mutating-and-inout.slang\n    2  \n    3: // Test that calling a `[mutating]` method on an `inout` function parameter works.\n    4  \n    5  //TEST(compute):COMPARE_COMPUTE:\n    .\n   12  \tint x;\n   13  \n   14: \t[mutating] void doThings(inout int y)\n   15  \t{\n   16  \t\tint tmp = x;\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/mutating-methods.slang:\n    1: // mutating-methods.slang\n    2  //TEST(compute):COMPARE_COMPUTE_EX:-slang -compute -xslang -serial-ir\n    3  //TEST(compute):COMPARE_COMPUTE_EX:-slang -compute -dx12 -xslang -serial-ir\n    .\n    7  interface IAccumulator\n    8  {\n    9: \t[mutating] void accumulate(int v);\n   10  }\n   11  \n   ..\n   14      int state;\n   15  \n   16: \t[mutating] void accumulate(int v)\n   17  \t{\n   18  \t\tstate += v;\n   19  \t}\n   20  \n   21: \t[mutating] void accumulateMore(int v)\n   22  \t{\n   23  \t\tthis.state += v;\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/interfaces/mutating-impl-of-non-mutating-req.slang:\n    1: // mutating-impl-of-non-mutating-req.slang\n    2  \n    3  //DIAGNOSTIC_TEST:SIMPLE:-target hlsl -entry main\n    .\n   12      int state;\n   13  \n   14:     [mutating] int processValue(int inValue)\n   15      {\n   16          int result = state;\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/interfaces/mutating-impl-of-non-mutating-req.slang.expected:\n    1  result code = -1\n    2  standard error = {\n    3: tests/diagnostics/interfaces/mutating-impl-of-non-mutating-req.slang(10): error 38100: type 'Counter' does not provide required interface member 'processValue'\n    4  }\n    5  standard output = {\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/methods/mutating-method-on-rvalue.slang:\n    1: // mutating-method-on-rvalue.slang\n    2  \n    3  //DIAGNOSTIC_TEST:SIMPLE:-target hlsl -entry main\n    .\n    7      int count;\n    8  \n    9:     [mutating] void increment() { count++; }\n   10  \n   11      void bad()\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/methods/mutating-method-on-rvalue.slang.expected:\n    1  result code = -1\n    2  standard error = {\n    3: tests/diagnostics/methods/mutating-method-on-rvalue.slang(13): error 30050: mutating method 'increment' cannot be called on an immutable value\n    4: tests/diagnostics/methods/mutating-method-on-rvalue.slang(13): note 30049: a 'this' parameter is an immutable parameter by default in Slang; apply the `[mutating]` attribute to the function declaration to opt in to a mutable `this`\n    5: tests/diagnostics/methods/mutating-method-on-rvalue.slang(25): error 30050: mutating method 'increment' cannot be called on an immutable value\n    6  }\n    7  standard output = {\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/setter-method.slang:\n    4  \n    5  // Make sure we provide a user a diagnostic if they\n    6: // try to declare a setter method without `mutating`\n    7: // (even if we don't support `mutating` yet).\n    8  \n    9  struct Sphere\n\n/home/max/dev/Falcor/third_party/slang/tests/diagnostics/setter-method.slang.expected:\n    2  standard error = {\n    3  tests/diagnostics/setter-method.slang(16): error 30011: left of '=' is not an l-value.\n    4: tests/diagnostics/setter-method.slang(16): note 30049: a 'this' parameter is an immutable parameter by default in Slang; apply the `[mutating]` attribute to the function declaration to opt in to a mutable `this`\n    5  tests/diagnostics/setter-method.slang(21): error 30011: left of '=' is not an l-value.\n    6: tests/diagnostics/setter-method.slang(21): note 30049: a 'this' parameter is an immutable parameter by default in Slang; apply the `[mutating]` attribute to the function declaration to opt in to a mutable `this`\n    7  }\n    8  standard output = {\n\n/home/max/dev/Falcor/third_party/slang/tests/language-feature/extensions/interface-extension.slang:\n    7  interface ICounter\n    8  {\n    9: \t[mutating] void add(int value);\n   10  }\n   11  \n   ..\n   14  \tint _state = 0;\n   15  \n   16: \t[mutating] void add(int value) { _state += value; }\n   17  }\n   18  \n   19  extension ICounter\n   20  {\n   21: \t[mutating] void increment()\n   22  \t{\n   23  \t    this.add(1);\n\n/home/max/dev/Falcor/third_party/slang/tests/language-feature/generics/struct-generic-value-param-import.slang:\n   13      int state;\n   14  \n   15:     [mutating] void doStuff()\n   16      {\n   17          state++;\n\n/home/max/dev/Falcor/third_party/slang/tests/language-feature/properties/property-in-interface.slang:\n   23      int getValue() { return value; }\n   24  \n   25:     [mutating] void setValue(int v) { value = v; }\n   26  }\n   27  \n\n146 matches across 43 files\n\n\nSearching 7381 files for \"barrier\"\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slang-cpp-extractor:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slang-test:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slangc:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/docs/cpu-target.md:\n   16  These limitations apply to Slang transpiling to C++. \n   17  \n   18: * Barriers are not supported (making these work would require an ABI change)\n   19  * Atomics are not supported\n   20  * Complex resource types (such as Texture2d) are work in progress\n\n/home/max/dev/Falcor/third_party/slang/docs/target-compatibility.md:\n   31  | Resource bounds             |     Yes      |   Yes        |   Yes      | Yes (optional)|    Yes\n   32  | Atomics                     |     Yes      |   Yes        |   Yes      |     Yes       |    Yes\n   33: | Group shared mem/Barriers   |     Yes      |   Yes        |   Yes      |     Yes       |    No + \n   34  | TextureArray.Sample float   |     Yes      |   Yes        |   Yes      |     No        |    Yes\n   35  | Separate Sampler            |     Yes      |   Yes        |   Yes      |     No        |    Yes\n\n/home/max/dev/Falcor/third_party/slang/docs/wave-intrinsics.md:\n  199  uint4 WaveGetConvergedMulti();\n  200  \n  201: // Barriers \n  202  \n  203: void AllMemoryBarrierWithWaveSync();\n  204  \n  205: void GroupMemoryBarrierWithWaveSync();\n  206  ```\n  207  \n  ...\n  226  \n  227  ```\n  228: void AllMemoryBarrierWithWaveSync();\n  229  ```\n  230  \n  231: Synchronizes all lanes to the same AllMemoryBarrierWithWaveSync in program flow. Orders all memory accesses such that accesses after the barrier can be seen by writes before.  \n  232  \n  233  ```\n  234: void GroupMemoryBarrierWithWaveSync();\n  235  ```\n  236  \n  237: Synchronizes all lanes to the same GroupMemoryBarrierWithWaveSync in program flow. Orders group shared memory accesses such that accesses after the barrier can be seen by writes before.  \n  238  \n  239  Wave Mask Intrinsics\n  ...\n  257  \n  258  ```\n  259: void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  260  ```\n  261  \n  262: Same as AllMemoryBarrierWithWaveSync but takes a mask of active lanes to sync with. \n  263  \n  264  ```\n  265: void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  266  ```\n  267  \n  268: Same as GroupMemoryBarrierWithWaveSync but takes a mask of active lanes to sync with. \n  269   \n  270  The intrinsics that make up the Slang `WaveMask` extension. \n  ...\n  291  WaveMask WaveMaskMatch<T>(WaveMask mask, T value);\n  292  \n  293: // Barriers\n  294  \n  295: void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  296  \n  297: void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  298  \n  299  // Across lane ops\n\n/home/max/dev/Falcor/third_party/slang/external/glext.h:\n 2102  #define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA\n 2103  #define GL_UNSIGNED_INT_ATOMIC_COUNTER    0x92DB\n 2104: #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001\n 2105: #define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002\n 2106: #define GL_UNIFORM_BARRIER_BIT            0x00000004\n 2107: #define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008\n 2108: #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020\n 2109: #define GL_COMMAND_BARRIER_BIT            0x00000040\n 2110: #define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080\n 2111: #define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100\n 2112: #define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200\n 2113: #define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400\n 2114: #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800\n 2115: #define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000\n 2116: #define GL_ALL_BARRIER_BITS               0xFFFFFFFF\n 2117  #define GL_MAX_IMAGE_UNITS                0x8F38\n 2118  #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39\n ....\n 2177  typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);\n 2178  typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 2179: typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);\n 2180  typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2181  typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n ....\n 2190  GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);\n 2191  GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 2192: GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);\n 2193  GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2194  GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n ....\n 2441  #define GL_MAX_SHADER_STORAGE_BLOCK_SIZE  0x90DE\n 2442  #define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF\n 2443: #define GL_SHADER_STORAGE_BARRIER_BIT     0x00002000\n 2444  #define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39\n 2445  #define GL_DEPTH_STENCIL_TEXTURE_MODE     0x90EA\n ....\n 2560  #define GL_DYNAMIC_STORAGE_BIT            0x0100\n 2561  #define GL_CLIENT_STORAGE_BIT             0x0200\n 2562: #define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000\n 2563  #define GL_BUFFER_IMMUTABLE_STORAGE       0x821F\n 2564  #define GL_BUFFER_STORAGE_FLAGS           0x8220\n ....\n 2568  #define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C\n 2569  #define GL_QUERY_BUFFER                   0x9192\n 2570: #define GL_QUERY_BUFFER_BARRIER_BIT       0x00008000\n 2571  #define GL_QUERY_BUFFER_BINDING           0x9193\n 2572  #define GL_QUERY_RESULT_NO_WAIT           0x9194\n ....\n 2716  typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2717  typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2718: typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers);\n 2719  typedef void (APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);\n 2720  typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);\n ....\n 2739  typedef void (APIENTRYP PFNGLGETNHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2740  typedef void (APIENTRYP PFNGLGETNMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2741: typedef void (APIENTRYP PFNGLTEXTUREBARRIERPROC) (void);\n 2742  #ifdef GL_GLEXT_PROTOTYPES\n 2743  GLAPI void APIENTRY glClipControl (GLenum origin, GLenum depth);\n ....\n 2839  GLAPI void APIENTRY glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2840  GLAPI void APIENTRY glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2841: GLAPI void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers);\n 2842  GLAPI void APIENTRY glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);\n 2843  GLAPI void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);\n ....\n 2862  GLAPI void APIENTRY glGetnHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2863  GLAPI void APIENTRY glGetnMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2864: GLAPI void APIENTRY glTextureBarrier (void);\n 2865  #endif\n 2866  #endif /* GL_VERSION_4_5 */\n ....\n 4298  #endif /* GL_ARB_tessellation_shader */\n 4299  \n 4300: #ifndef GL_ARB_texture_barrier\n 4301: #define GL_ARB_texture_barrier 1\n 4302: #endif /* GL_ARB_texture_barrier */\n 4303  \n 4304  #ifndef GL_ARB_texture_border_clamp\n ....\n 4919  #define GL_HSL_COLOR_KHR                  0x92AF\n 4920  #define GL_HSL_LUMINOSITY_KHR             0x92B0\n 4921: typedef void (APIENTRYP PFNGLBLENDBARRIERKHRPROC) (void);\n 4922  #ifdef GL_GLEXT_PROTOTYPES\n 4923: GLAPI void APIENTRY glBlendBarrierKHR (void);\n 4924  #endif\n 4925  #endif /* GL_KHR_blend_equation_advanced */\n ....\n 7889  #define GL_MAX_IMAGE_SAMPLES_EXT          0x906D\n 7890  #define GL_IMAGE_BINDING_FORMAT_EXT       0x906E\n 7891: #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001\n 7892: #define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT  0x00000002\n 7893: #define GL_UNIFORM_BARRIER_BIT_EXT        0x00000004\n 7894: #define GL_TEXTURE_FETCH_BARRIER_BIT_EXT  0x00000008\n 7895: #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020\n 7896: #define GL_COMMAND_BARRIER_BIT_EXT        0x00000040\n 7897: #define GL_PIXEL_BUFFER_BARRIER_BIT_EXT   0x00000080\n 7898: #define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100\n 7899: #define GL_BUFFER_UPDATE_BARRIER_BIT_EXT  0x00000200\n 7900: #define GL_FRAMEBUFFER_BARRIER_BIT_EXT    0x00000400\n 7901: #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800\n 7902: #define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000\n 7903: #define GL_ALL_BARRIER_BITS_EXT           0xFFFFFFFF\n 7904  typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);\n 7905: typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);\n 7906  #ifdef GL_GLEXT_PROTOTYPES\n 7907  GLAPI void APIENTRY glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);\n 7908: GLAPI void APIENTRY glMemoryBarrierEXT (GLbitfield barriers);\n 7909  #endif\n 7910  #endif /* GL_EXT_shader_image_load_store */\n ....\n 9217  #define GL_XOR_NV                         0x1506\n 9218  typedef void (APIENTRYP PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value);\n 9219: typedef void (APIENTRYP PFNGLBLENDBARRIERNVPROC) (void);\n 9220  #ifdef GL_GLEXT_PROTOTYPES\n 9221  GLAPI void APIENTRY glBlendParameteriNV (GLenum pname, GLint value);\n 9222: GLAPI void APIENTRY glBlendBarrierNV (void);\n 9223  #endif\n 9224  #endif /* GL_NV_blend_equation_advanced */\n ....\n 9670  typedef void (APIENTRYP PFNGLMULTICASTBLITFRAMEBUFFERNVPROC) (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 9671  typedef void (APIENTRYP PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);\n 9672: typedef void (APIENTRYP PFNGLMULTICASTBARRIERNVPROC) (void);\n 9673  typedef void (APIENTRYP PFNGLMULTICASTWAITSYNCNVPROC) (GLuint signalGpu, GLbitfield waitGpuMask);\n 9674  typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint *params);\n ....\n 9683  GLAPI void APIENTRY glMulticastBlitFramebufferNV (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 9684  GLAPI void APIENTRY glMulticastFramebufferSampleLocationsfvNV (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);\n 9685: GLAPI void APIENTRY glMulticastBarrierNV (void);\n 9686  GLAPI void APIENTRY glMulticastWaitSyncNV (GLuint signalGpu, GLbitfield waitGpuMask);\n 9687  GLAPI void APIENTRY glMulticastGetQueryObjectivNV (GLuint gpu, GLuint id, GLenum pname, GLint *params);\n ....\n 10487  #ifndef GL_NV_shader_buffer_store\n 10488  #define GL_NV_shader_buffer_store 1\n 10489: #define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010\n 10490  #endif /* GL_NV_shader_buffer_store */\n 10491  \n .....\n 10531  #endif /* GL_NV_texgen_reflection */\n 10532  \n 10533: #ifndef GL_NV_texture_barrier\n 10534: #define GL_NV_texture_barrier 1\n 10535: typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC) (void);\n 10536  #ifdef GL_GLEXT_PROTOTYPES\n 10537: GLAPI void APIENTRY glTextureBarrierNV (void);\n 10538  #endif\n 10539: #endif /* GL_NV_texture_barrier */\n 10540  \n 10541  #ifndef GL_NV_texture_compression_vtc\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/HLSL/hlslParseables.cpp:\n  511          { \"acos\",                             nullptr, nullptr,   \"SVM\",            \"F\",             EShLangAll,    false },\n  512          { \"all\",                              \"S\",    \"B\",        \"SVM\",            \"BFIU\",          EShLangAll,    false },\n  513:         { \"AllMemoryBarrier\",                 nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  514:         { \"AllMemoryBarrierWithGroupSync\",    nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  515          { \"any\",                              \"S\",     \"B\",       \"SVM\",            \"BFIU\",          EShLangAll,    false },\n  516          { \"asdouble\",                         \"S\",     \"D\",       \"S,\",             \"UI,\",           EShLangAll,    false },\n  ...\n  539          { \"degrees\",                          nullptr, nullptr,   \"SVM\",            \"F\",             EShLangAll,    false },\n  540          { \"determinant\",                      \"S\",     \"F\",       \"M\",              \"F\",             EShLangAll,    false },\n  541:         { \"DeviceMemoryBarrier\",              nullptr, nullptr,   \"-\",              \"-\",             EShLangPSCS,   false },\n  542:         { \"DeviceMemoryBarrierWithGroupSync\", nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  543          { \"distance\",                         \"S\",     \"F\",       \"SV,\",            \"F,\",            EShLangAll,    false },\n  544          { \"dot\",                              \"S\",     nullptr,   \"SV,\",            \"FI,\",           EShLangAll,    false },\n  ...\n  563          { \"GetRenderTargetSampleCount\",       \"S\",     \"U\",       \"-\",              \"-\",             EShLangAll,    false },\n  564          { \"GetRenderTargetSamplePosition\",    \"V2\",    \"F\",       \"V1\",             \"I\",             EShLangAll,    false },\n  565:         { \"GroupMemoryBarrier\",               nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  566:         { \"GroupMemoryBarrierWithGroupSync\",  nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  567          { \"InterlockedAdd\",                   \"-\",     \"-\",       \"SVM,,>\",         \"UI,,\",          EShLangPSCS,   false },\n  568          { \"InterlockedAdd\",                   \"-\",     \"-\",       \"SVM,\",           \"UI,\",           EShLangPSCS,   false },\n  ...\n 1027      symbolTable.relateToOperator(\"acos\",                        EOpAcos);\n 1028      symbolTable.relateToOperator(\"all\",                         EOpAll);\n 1029:     symbolTable.relateToOperator(\"AllMemoryBarrier\",            EOpMemoryBarrier);\n 1030:     symbolTable.relateToOperator(\"AllMemoryBarrierWithGroupSync\", EOpAllMemoryBarrierWithGroupSync);\n 1031      symbolTable.relateToOperator(\"any\",                         EOpAny);\n 1032      symbolTable.relateToOperator(\"asdouble\",                    EOpAsDouble);\n ....\n 1054      symbolTable.relateToOperator(\"degrees\",                     EOpDegrees);\n 1055      symbolTable.relateToOperator(\"determinant\",                 EOpDeterminant);\n 1056:     symbolTable.relateToOperator(\"DeviceMemoryBarrier\",         EOpDeviceMemoryBarrier);\n 1057:     symbolTable.relateToOperator(\"DeviceMemoryBarrierWithGroupSync\", EOpDeviceMemoryBarrierWithGroupSync);\n 1058      symbolTable.relateToOperator(\"distance\",                    EOpDistance);\n 1059      symbolTable.relateToOperator(\"dot\",                         EOpDot);\n ....\n 1078      // symbolTable.relateToOperator(\"GetRenderTargetSampleCount\");\n 1079      // symbolTable.relateToOperator(\"GetRenderTargetSamplePosition\");\n 1080:     symbolTable.relateToOperator(\"GroupMemoryBarrier\",          EOpWorkgroupMemoryBarrier);\n 1081:     symbolTable.relateToOperator(\"GroupMemoryBarrierWithGroupSync\", EOpWorkgroupMemoryBarrierWithGroupSync);\n 1082      symbolTable.relateToOperator(\"InterlockedAdd\",              EOpInterlockedAdd);\n 1083      symbolTable.relateToOperator(\"InterlockedAnd\",              EOpInterlockedAnd);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/HLSL/hlslParseHelper.cpp:\n 9784      //    indirections into a complex R-value coming from the call to the PCF.\n 9785      //\n 9786:     // 4. Create a barrier.\n 9787      //\n 9788      // 5/5B. Call the PCF inside an if test for (invocation id == 0).\n ....\n 10048      }\n 10049  \n 10050:     // ================ Step 4: Barrier ================\n 10051:     TIntermTyped* barrier = new TIntermAggregate(EOpBarrier);\n 10052:     barrier->setLoc(loc);\n 10053:     barrier->setType(TType(EbtVoid));\n 10054:     epBodySeq.insert(epBodySeq.end(), barrier);\n 10055  \n 10056      // ================ Step 5: Test on invocation ID ================\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/Include/intermediate.h:\n  462      EOpEndStreamPrimitive,   // geometry only\n  463  \n  464:     EOpBarrier,\n  465:     EOpMemoryBarrier,\n  466:     EOpMemoryBarrierAtomicCounter,\n  467:     EOpMemoryBarrierBuffer,\n  468:     EOpMemoryBarrierImage,\n  469:     EOpMemoryBarrierShared,  // compute only\n  470:     EOpGroupMemoryBarrier,   // compute only\n  471  \n  472      EOpBallot,\n  ...\n  479  \n  480      EOpSubgroupGuardStart,\n  481:     EOpSubgroupBarrier,\n  482:     EOpSubgroupMemoryBarrier,\n  483:     EOpSubgroupMemoryBarrierBuffer,\n  484:     EOpSubgroupMemoryBarrierImage,\n  485:     EOpSubgroupMemoryBarrierShared, // compute only\n  486      EOpSubgroupElect,\n  487      EOpSubgroupAll,\n  ...\n  968      EOpInterlockedOr,       // ...\n  969      EOpInterlockedXor,      // ...\n  970:     EOpAllMemoryBarrierWithGroupSync,    // memory barriers without non-hlsl AST equivalents\n  971:     EOpDeviceMemoryBarrier,              // ...\n  972:     EOpDeviceMemoryBarrierWithGroupSync, // ...\n  973:     EOpWorkgroupMemoryBarrier,           // ...\n  974:     EOpWorkgroupMemoryBarrierWithGroupSync, // ...\n  975      EOpEvaluateAttributeSnapped,         // InterpolateAtOffset with int position on 16x16 grid\n  976      EOpF32tof16,                         // HLSL conversion: half of a PackHalf2x16\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp:\n  288  \n  289  const CustomFunction CustomFunctions[] = {\n  290:     { EOpBarrier,             \"barrier\",             nullptr },\n  291:     { EOpMemoryBarrierShared, \"memoryBarrierShared\", nullptr },\n  292:     { EOpGroupMemoryBarrier,  \"groupMemoryBarrier\",  nullptr },\n  293:     { EOpMemoryBarrier,       \"memoryBarrier\",       nullptr },\n  294:     { EOpMemoryBarrierBuffer, \"memoryBarrierBuffer\", nullptr },\n  295  \n  296      { EOpPackSnorm2x16,       \"packSnorm2x16\",       nullptr },\n  ...\n 1805          (profile != EEsProfile && version >= 140)) {\n 1806          commonBuiltins.append(\n 1807:             \"void subgroupBarrier();\"\n 1808:             \"void subgroupMemoryBarrier();\"\n 1809:             \"void subgroupMemoryBarrierBuffer();\"\n 1810:             \"void subgroupMemoryBarrierImage();\"\n 1811              \"bool subgroupElect();\"\n 1812  \n ....\n 1947  \n 1948          stageBuiltins[EShLangCompute].append(\n 1949:             \"void subgroupMemoryBarrierShared();\"\n 1950  \n 1951              \"\\n\"\n 1952              );\n 1953          stageBuiltins[EShLangMeshNV].append(\n 1954:             \"void subgroupMemoryBarrierShared();\"\n 1955              \"\\n\"\n 1956              );\n 1957          stageBuiltins[EShLangTaskNV].append(\n 1958:             \"void subgroupMemoryBarrierShared();\"\n 1959              \"\\n\"\n 1960              );\n ....\n 4065      //\n 4066      //============================================================================\n 4067:     bool esBarrier = (profile == EEsProfile && version >= 310);\n 4068:     if ((profile != EEsProfile && version >= 150) || esBarrier)\n 4069          stageBuiltins[EShLangTessControl].append(\n 4070:             \"void barrier();\"\n 4071              );\n 4072:     if ((profile != EEsProfile && version >= 420) || esBarrier)\n 4073          stageBuiltins[EShLangCompute].append(\n 4074:             \"void barrier();\"\n 4075              );\n 4076      if ((profile != EEsProfile && version >= 450) || (profile == EEsProfile && version >= 320)) {\n 4077          stageBuiltins[EShLangMeshNV].append(\n 4078:             \"void barrier();\"\n 4079              );\n 4080          stageBuiltins[EShLangTaskNV].append(\n 4081:             \"void barrier();\"\n 4082              );\n 4083      }\n 4084:     if ((profile != EEsProfile && version >= 130) || esBarrier)\n 4085          commonBuiltins.append(\n 4086:             \"void memoryBarrier();\"\n 4087              );\n 4088:     if ((profile != EEsProfile && version >= 420) || esBarrier) {\n 4089          commonBuiltins.append(\n 4090:             \"void memoryBarrierBuffer();\"\n 4091              );\n 4092          stageBuiltins[EShLangCompute].append(\n 4093:             \"void memoryBarrierShared();\"\n 4094:             \"void groupMemoryBarrier();\"\n 4095              );\n 4096      }\n 4097  #ifndef GLSLANG_WEB\n 4098:     if ((profile != EEsProfile && version >= 420) || esBarrier) {\n 4099          if (spvVersion.vulkan == 0) {\n 4100:             commonBuiltins.append(\"void memoryBarrierAtomicCounter();\");\n 4101          }\n 4102:         commonBuiltins.append(\"void memoryBarrierImage();\");\n 4103      }\n 4104      if ((profile != EEsProfile && version >= 450) || (profile == EEsProfile && version >= 320)) {\n 4105          stageBuiltins[EShLangMeshNV].append(\n 4106:             \"void memoryBarrierShared();\"\n 4107:             \"void groupMemoryBarrier();\"\n 4108          );\n 4109          stageBuiltins[EShLangTaskNV].append(\n 4110:             \"void memoryBarrierShared();\"\n 4111:             \"void groupMemoryBarrier();\"\n 4112          );\n 4113      }\n 4114  \n 4115:     commonBuiltins.append(\"void controlBarrier(int, int, int, int);\\n\"\n 4116:                           \"void memoryBarrier(int, int, int);\\n\");\n 4117  \n 4118      commonBuiltins.append(\"void debugPrintfEXT();\\n\");\n ....\n 7754          // E_GL_ARB_shader_image_load_store\n 7755          if (profile != EEsProfile && version < 420)\n 7756:             symbolTable.setFunctionExtensions(\"memoryBarrier\", 1, &E_GL_ARB_shader_image_load_store);\n 7757          // All the image access functions are protected by checks on the type of the first argument.\n 7758  \n ....\n 7981              BuiltInVariable(\"gl_SubgroupLtMask\",       EbvSubgroupLtMask2,     symbolTable);\n 7982  \n 7983:             symbolTable.setFunctionExtensions(\"subgroupBarrier\",                 1, &E_GL_KHR_shader_subgroup_basic);\n 7984:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrier\",           1, &E_GL_KHR_shader_subgroup_basic);\n 7985:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierBuffer\",     1, &E_GL_KHR_shader_subgroup_basic);\n 7986:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierImage\",      1, &E_GL_KHR_shader_subgroup_basic);\n 7987              symbolTable.setFunctionExtensions(\"subgroupElect\",                   1, &E_GL_KHR_shader_subgroup_basic);\n 7988              symbolTable.setFunctionExtensions(\"subgroupAll\",                     1, &E_GL_KHR_shader_subgroup_vote);\n ....\n 8132              symbolTable.setVariableExtensions(\"gl_MaxComputeAtomicCounterBuffers\", 1, &E_GL_ARB_compute_shader);\n 8133  \n 8134:             symbolTable.setFunctionExtensions(\"barrier\",                    1, &E_GL_ARB_compute_shader);\n 8135:             symbolTable.setFunctionExtensions(\"memoryBarrierAtomicCounter\", 1, &E_GL_ARB_compute_shader);\n 8136:             symbolTable.setFunctionExtensions(\"memoryBarrierBuffer\",        1, &E_GL_ARB_compute_shader);\n 8137:             symbolTable.setFunctionExtensions(\"memoryBarrierImage\",         1, &E_GL_ARB_compute_shader);\n 8138:             symbolTable.setFunctionExtensions(\"memoryBarrierShared\",        1, &E_GL_ARB_compute_shader);\n 8139:             symbolTable.setFunctionExtensions(\"groupMemoryBarrier\",         1, &E_GL_ARB_compute_shader);\n 8140          }\n 8141  \n 8142  \n 8143:         symbolTable.setFunctionExtensions(\"controlBarrier\",                 1, &E_GL_KHR_memory_scope_semantics);\n 8144          symbolTable.setFunctionExtensions(\"debugPrintfEXT\",                 1, &E_GL_EXT_debug_printf);\n 8145  \n ....\n 8207              BuiltInVariable(\"gl_SubgroupID\",   EbvSubgroupID,   symbolTable);\n 8208  \n 8209:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierShared\", 1, &E_GL_KHR_shader_subgroup_basic);\n 8210          }\n 8211  \n ....\n 8446  \n 8447              // builtin functions\n 8448:             symbolTable.setFunctionExtensions(\"barrier\",                      1, &E_GL_NV_mesh_shader);\n 8449:             symbolTable.setFunctionExtensions(\"memoryBarrierShared\",          1, &E_GL_NV_mesh_shader);\n 8450:             symbolTable.setFunctionExtensions(\"groupMemoryBarrier\",           1, &E_GL_NV_mesh_shader);\n 8451          }\n 8452  \n ....\n 8509              BuiltInVariable(\"gl_SubgroupLtMask\",       EbvSubgroupLtMask2,     symbolTable);\n 8510  \n 8511:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierShared\", 1, &E_GL_KHR_shader_subgroup_basic);\n 8512  \n 8513              // GL_NV_shader_sm_builtins\n ....\n 8546              symbolTable.setVariableExtensions(\"gl_MaxMeshViewCountNV\",     1, &E_GL_NV_mesh_shader);\n 8547  \n 8548:             symbolTable.setFunctionExtensions(\"barrier\",                   1, &E_GL_NV_mesh_shader);\n 8549:             symbolTable.setFunctionExtensions(\"memoryBarrierShared\",       1, &E_GL_NV_mesh_shader);\n 8550:             symbolTable.setFunctionExtensions(\"groupMemoryBarrier\",        1, &E_GL_NV_mesh_shader);\n 8551          }\n 8552  \n ....\n 8609              BuiltInVariable(\"gl_SubgroupLtMask\",       EbvSubgroupLtMask2,     symbolTable);\n 8610  \n 8611:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierShared\", 1, &E_GL_KHR_shader_subgroup_basic);\n 8612  \n 8613              // GL_NV_shader_sm_builtins\n ....\n 8686      symbolTable.relateToOperator(\"unpack8\",         EOpUnpack8);\n 8687  \n 8688:     symbolTable.relateToOperator(\"controlBarrier\",             EOpBarrier);\n 8689:     symbolTable.relateToOperator(\"memoryBarrierAtomicCounter\", EOpMemoryBarrierAtomicCounter);\n 8690:     symbolTable.relateToOperator(\"memoryBarrierImage\",         EOpMemoryBarrierImage);\n 8691  \n 8692      symbolTable.relateToOperator(\"atomicLoad\",     EOpAtomicLoad);\n ....\n 8921          if ((profile == EEsProfile && version >= 310) ||\n 8922              (profile != EEsProfile && version >= 140)) {\n 8923:             symbolTable.relateToOperator(\"subgroupBarrier\",                 EOpSubgroupBarrier);\n 8924:             symbolTable.relateToOperator(\"subgroupMemoryBarrier\",           EOpSubgroupMemoryBarrier);\n 8925:             symbolTable.relateToOperator(\"subgroupMemoryBarrierBuffer\",     EOpSubgroupMemoryBarrierBuffer);\n 8926:             symbolTable.relateToOperator(\"subgroupMemoryBarrierImage\",      EOpSubgroupMemoryBarrierImage);\n 8927              symbolTable.relateToOperator(\"subgroupElect\",                   EOpSubgroupElect);\n 8928              symbolTable.relateToOperator(\"subgroupAll\",                     EOpSubgroupAll);\n ....\n 9070  \n 9071      case EShLangCompute:\n 9072:         symbolTable.relateToOperator(\"subgroupMemoryBarrierShared\", EOpSubgroupMemoryBarrierShared);\n 9073          if ((profile != EEsProfile && version >= 450) ||\n 9074              (profile == EEsProfile && version >= 320)) {\n ....\n 9125      case EShLangTaskNV:\n 9126          if ((profile != EEsProfile && version >= 450) || (profile == EEsProfile && version >= 320)) {\n 9127:             symbolTable.relateToOperator(\"memoryBarrierShared\", EOpMemoryBarrierShared);\n 9128:             symbolTable.relateToOperator(\"groupMemoryBarrier\", EOpGroupMemoryBarrier);\n 9129:             symbolTable.relateToOperator(\"subgroupMemoryBarrierShared\", EOpSubgroupMemoryBarrierShared);\n 9130          }\n 9131          break;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/intermOut.cpp:\n  863      case EOpEndPrimitive:  out.debug << \"EndPrimitive\";            break;\n  864  \n  865:     case EOpBarrier:                    out.debug << \"Barrier\";                    break;\n  866:     case EOpMemoryBarrier:              out.debug << \"MemoryBarrier\";              break;\n  867:     case EOpMemoryBarrierAtomicCounter: out.debug << \"MemoryBarrierAtomicCounter\"; break;\n  868:     case EOpMemoryBarrierBuffer:        out.debug << \"MemoryBarrierBuffer\";        break;\n  869:     case EOpMemoryBarrierImage:         out.debug << \"MemoryBarrierImage\";         break;\n  870:     case EOpMemoryBarrierShared:        out.debug << \"MemoryBarrierShared\";        break;\n  871:     case EOpGroupMemoryBarrier:         out.debug << \"GroupMemoryBarrier\";         break;\n  872  \n  873      case EOpReadInvocation:             out.debug << \"readInvocation\";        break;\n  ...\n  992      case EOpGenMul:                     out.debug << \"mul\";                   break;\n  993  \n  994:     case EOpAllMemoryBarrierWithGroupSync:    out.debug << \"AllMemoryBarrierWithGroupSync\";    break;\n  995:     case EOpDeviceMemoryBarrier:              out.debug << \"DeviceMemoryBarrier\";              break;\n  996:     case EOpDeviceMemoryBarrierWithGroupSync: out.debug << \"DeviceMemoryBarrierWithGroupSync\"; break;\n  997:     case EOpWorkgroupMemoryBarrier:           out.debug << \"WorkgroupMemoryBarrier\";           break;\n  998:     case EOpWorkgroupMemoryBarrierWithGroupSync: out.debug << \"WorkgroupMemoryBarrierWithGroupSync\"; break;\n  999  \n 1000:     case EOpSubgroupBarrier:                 out.debug << \"subgroupBarrier\"; break;\n 1001:     case EOpSubgroupMemoryBarrier:           out.debug << \"subgroupMemoryBarrier\"; break;\n 1002:     case EOpSubgroupMemoryBarrierBuffer:     out.debug << \"subgroupMemoryBarrierBuffer\"; break;\n 1003:     case EOpSubgroupMemoryBarrierImage:      out.debug << \"subgroupMemoryBarrierImage\";   break;\n 1004:     case EOpSubgroupMemoryBarrierShared:     out.debug << \"subgroupMemoryBarrierShared\"; break;\n 1005      case EOpSubgroupElect:                   out.debug << \"subgroupElect\"; break;\n 1006      case EOpSubgroupAll:                     out.debug << \"subgroupAll\"; break;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/ParseHelper.cpp:\n 1445  #ifndef GLSLANG_WEB\n 1446      switch (op) {\n 1447:     case EOpBarrier:\n 1448          if (language == EShLangTessControl) {\n 1449              if (controlFlowNestingLevel > 0)\n 1450:                 error(loc, \"tessellation control barrier() cannot be placed within flow control\", \"\", \"\");\n 1451              if (! inMain)\n 1452:                 error(loc, \"tessellation control barrier() must be in main()\", \"\", \"\");\n 1453              else if (postEntryPointReturn)\n 1454:                 error(loc, \"tessellation control barrier() cannot be placed after a return from main()\", \"\", \"\");\n 1455          }\n 1456          break;\n ....\n 1752          break;\n 1753  \n 1754:     case EOpBarrier:\n 1755          storageClassSemantics = (*argp)[2]->getAsConstantUnion()->getConstArray()[0].getIConst();\n 1756          semantics = (*argp)[3]->getAsConstantUnion()->getConstArray()[0].getIConst();\n 1757          break;\n 1758:     case EOpMemoryBarrier:\n 1759          storageClassSemantics = (*argp)[1]->getAsConstantUnion()->getConstArray()[0].getIConst();\n 1760          semantics = (*argp)[2]->getAsConstantUnion()->getConstArray()[0].getIConst();\n ....\n 1795      }\n 1796  \n 1797:     if (callNode.getOp() == EOpMemoryBarrier) {\n 1798          if (!IsPow2(semantics & (gl_SemanticsAcquire | gl_SemanticsRelease | gl_SemanticsAcquireRelease))) {\n 1799              error(loc, \"Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or \"\n ....\n 1814          }\n 1815      }\n 1816:     if (callNode.getOp() == EOpMemoryBarrier) {\n 1817          if (storageClassSemantics == 0) {\n 1818              error(loc, \"Storage class semantics must not be zero\", fnCandidate.getName().c_str(), \"\");\n 1819          }\n 1820      }\n 1821:     if (callNode.getOp() == EOpBarrier && semantics != 0 && storageClassSemantics == 0) {\n 1822          error(loc, \"Storage class semantics must not be zero\", fnCandidate.getName().c_str(), \"\");\n 1823      }\n ....\n 1838      }\n 1839      if ((semantics & gl_SemanticsVolatile) &&\n 1840:         (callNode.getOp() == EOpMemoryBarrier || callNode.getOp() == EOpBarrier)) {\n 1841:         error(loc, \"gl_SemanticsVolatile must not be used with memoryBarrier or controlBarrier\",\n 1842                fnCandidate.getName().c_str(), \"\");\n 1843      }\n ....\n 2233          break;\n 2234  \n 2235:     case EOpBarrier:\n 2236:     case EOpMemoryBarrier:\n 2237          if (argp->size() > 0) {\n 2238              requireExtensions(loc, 1, &E_GL_KHR_memory_scope_semantics, fnCandidate.getName().c_str());\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/gtests/Hlsl.FromFile.cpp:\n  244          {\"hlsl.init2.frag\", \"main\"},\n  245          {\"hlsl.isfinite.frag\", \"main\"},\n  246:         {\"hlsl.intrinsics.barriers.comp\", \"ComputeShaderFunction\"},\n  247          {\"hlsl.intrinsics.comp\", \"ComputeShaderFunction\"},\n  248          {\"hlsl.intrinsics.evalfns.frag\", \"main\"},\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/gtests/Spv.FromFile.cpp:\n  220          // No tests yet for making sure break and continue from a nested loop\n  221          // goes to the innermost target.\n  222:         \"spv.barrier.vert\",\n  223          \"spv.do-simple.vert\",\n  224          \"spv.do-while-continue-break.vert\",\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/doc.cpp:\n 1174      case 222: return \"Bad\";\n 1175      case 223: return \"Bad\";\n 1176:     case 224: return \"OpControlBarrier\";\n 1177:     case 225: return \"OpMemoryBarrier\";\n 1178      case 226: return \"Bad\";\n 1179      case 227: return \"OpAtomicLoad\";\n ....\n 1467      InstructionDesc[OpEmitStreamVertex].setResultAndType(false, false);\n 1468      InstructionDesc[OpEndStreamPrimitive].setResultAndType(false, false);\n 1469:     InstructionDesc[OpControlBarrier].setResultAndType(false, false);\n 1470:     InstructionDesc[OpMemoryBarrier].setResultAndType(false, false);\n 1471      InstructionDesc[OpAtomicStore].setResultAndType(false, false);\n 1472      InstructionDesc[OpLoopMerge].setResultAndType(false, false);\n ....\n 2214      InstructionDesc[OpEndStreamPrimitive].operands.push(OperandId, \"'Stream'\");\n 2215  \n 2216:     InstructionDesc[OpControlBarrier].operands.push(OperandScope, \"'Execution'\");\n 2217:     InstructionDesc[OpControlBarrier].operands.push(OperandScope, \"'Memory'\");\n 2218:     InstructionDesc[OpControlBarrier].operands.push(OperandMemorySemantics, \"'Semantics'\");\n 2219  \n 2220:     InstructionDesc[OpMemoryBarrier].operands.push(OperandScope, \"'Memory'\");\n 2221:     InstructionDesc[OpMemoryBarrier].operands.push(OperandMemorySemantics, \"'Semantics'\");\n 2222  \n 2223      InstructionDesc[OpImageTexelPointer].operands.push(OperandId, \"'Image'\");\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/doc.h:\n  105      OpClassAtomic,\n  106      OpClassPrimitive,\n  107:     OpClassBarrier,\n  108      OpClassGroup,\n  109      OpClassDeviceSideEnqueue,\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp:\n 2660      case glslang::EOpEmitVertex:\n 2661      case glslang::EOpEndPrimitive:\n 2662:     case glslang::EOpBarrier:\n 2663:     case glslang::EOpMemoryBarrier:\n 2664:     case glslang::EOpMemoryBarrierAtomicCounter:\n 2665:     case glslang::EOpMemoryBarrierBuffer:\n 2666:     case glslang::EOpMemoryBarrierImage:\n 2667:     case glslang::EOpMemoryBarrierShared:\n 2668:     case glslang::EOpGroupMemoryBarrier:\n 2669:     case glslang::EOpDeviceMemoryBarrier:\n 2670:     case glslang::EOpAllMemoryBarrierWithGroupSync:\n 2671:     case glslang::EOpDeviceMemoryBarrierWithGroupSync:\n 2672:     case glslang::EOpWorkgroupMemoryBarrier:\n 2673:     case glslang::EOpWorkgroupMemoryBarrierWithGroupSync:\n 2674:     case glslang::EOpSubgroupBarrier:\n 2675:     case glslang::EOpSubgroupMemoryBarrier:\n 2676:     case glslang::EOpSubgroupMemoryBarrierBuffer:\n 2677:     case glslang::EOpSubgroupMemoryBarrierImage:\n 2678:     case glslang::EOpSubgroupMemoryBarrierShared:\n 2679          noReturnValue = true;\n 2680          // These all have 0 operands and will naturally finish up in the code below for 0 operands\n ....\n 7548          libCall = spv::GLSLstd450Refract;\n 7549          break;\n 7550:     case glslang::EOpBarrier:\n 7551          {\n 7552:             // This is for the extended controlBarrier function, with four operands.\n 7553:             // The unextended barrier() goes through createNoArgOperation.\n 7554              assert(operands.size() == 4);\n 7555              unsigned int executionScope = builder.getConstantScalar(operands[0]);\n 7556              unsigned int memoryScope = builder.getConstantScalar(operands[1]);\n 7557              unsigned int semantics = builder.getConstantScalar(operands[2]) | builder.getConstantScalar(operands[3]);\n 7558:             builder.createControlBarrier((spv::Scope)executionScope, (spv::Scope)memoryScope,\n 7559                  (spv::MemorySemanticsMask)semantics);\n 7560              if (semantics & (spv::MemorySemanticsMakeAvailableKHRMask |\n ....\n 7571          }\n 7572          break;\n 7573:     case glslang::EOpMemoryBarrier:\n 7574          {\n 7575:             // This is for the extended memoryBarrier function, with three operands.\n 7576:             // The unextended memoryBarrier() goes through createNoArgOperation.\n 7577              assert(operands.size() == 3);\n 7578              unsigned int memoryScope = builder.getConstantScalar(operands[0]);\n 7579              unsigned int semantics = builder.getConstantScalar(operands[1]) | builder.getConstantScalar(operands[2]);\n 7580:             builder.createMemoryBarrier((spv::Scope)memoryScope, (spv::MemorySemanticsMask)semantics);\n 7581              if (semantics & (spv::MemorySemanticsMakeAvailableKHRMask |\n 7582                               spv::MemorySemanticsMakeVisibleKHRMask |\n ....\n 7939  spv::Id TGlslangToSpvTraverser::createNoArgOperation(glslang::TOperator op, spv::Decoration precision, spv::Id typeId)\n 7940  {\n 7941:     // GLSL memory barriers use queuefamily scope in new model, device scope in old model\n 7942:     spv::Scope memoryBarrierScope = glslangIntermediate->usingVulkanMemoryModel() ?\n 7943          spv::ScopeQueueFamilyKHR : spv::ScopeDevice;\n 7944  \n 7945      switch (op) {\n 7946:     case glslang::EOpBarrier:\n 7947          if (glslangIntermediate->getStage() == EShLangTessControl) {\n 7948              if (glslangIntermediate->usingVulkanMemoryModel()) {\n 7949:                 builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeWorkgroup,\n 7950                                               spv::MemorySemanticsOutputMemoryKHRMask |\n 7951                                               spv::MemorySemanticsAcquireReleaseMask);\n 7952                  builder.addCapability(spv::CapabilityVulkanMemoryModelKHR);\n 7953              } else {\n 7954:                 builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeInvocation, spv::MemorySemanticsMaskNone);\n 7955              }\n 7956          } else {\n 7957:             builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeWorkgroup,\n 7958                                              spv::MemorySemanticsWorkgroupMemoryMask |\n 7959                                              spv::MemorySemanticsAcquireReleaseMask);\n 7960          }\n 7961          return 0;\n 7962:     case glslang::EOpMemoryBarrier:\n 7963:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsAllMemory |\n 7964                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7965          return 0;\n 7966:     case glslang::EOpMemoryBarrierBuffer:\n 7967:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsUniformMemoryMask |\n 7968                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7969          return 0;\n 7970:     case glslang::EOpMemoryBarrierShared:\n 7971:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsWorkgroupMemoryMask |\n 7972                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7973          return 0;\n 7974:     case glslang::EOpGroupMemoryBarrier:\n 7975:         builder.createMemoryBarrier(spv::ScopeWorkgroup, spv::MemorySemanticsAllMemory |\n 7976                                                           spv::MemorySemanticsAcquireReleaseMask);\n 7977          return 0;\n 7978  #ifndef GLSLANG_WEB\n 7979:     case glslang::EOpMemoryBarrierAtomicCounter:\n 7980:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsAtomicCounterMemoryMask |\n 7981                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7982          return 0;\n 7983:     case glslang::EOpMemoryBarrierImage:\n 7984:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsImageMemoryMask |\n 7985                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7986          return 0;\n 7987:     case glslang::EOpAllMemoryBarrierWithGroupSync:\n 7988:         builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeDevice,\n 7989                                          spv::MemorySemanticsAllMemory |\n 7990                                          spv::MemorySemanticsAcquireReleaseMask);\n 7991          return 0;\n 7992:     case glslang::EOpDeviceMemoryBarrier:\n 7993:         builder.createMemoryBarrier(spv::ScopeDevice, spv::MemorySemanticsUniformMemoryMask |\n 7994                                                        spv::MemorySemanticsImageMemoryMask |\n 7995                                                        spv::MemorySemanticsAcquireReleaseMask);\n 7996          return 0;\n 7997:     case glslang::EOpDeviceMemoryBarrierWithGroupSync:\n 7998:         builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeDevice, spv::MemorySemanticsUniformMemoryMask |\n 7999                                                                              spv::MemorySemanticsImageMemoryMask |\n 8000                                                                              spv::MemorySemanticsAcquireReleaseMask);\n 8001          return 0;\n 8002:     case glslang::EOpWorkgroupMemoryBarrier:\n 8003:         builder.createMemoryBarrier(spv::ScopeWorkgroup, spv::MemorySemanticsWorkgroupMemoryMask |\n 8004                                                           spv::MemorySemanticsAcquireReleaseMask);\n 8005          return 0;\n 8006:     case glslang::EOpWorkgroupMemoryBarrierWithGroupSync:\n 8007:         builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeWorkgroup,\n 8008                                          spv::MemorySemanticsWorkgroupMemoryMask |\n 8009                                          spv::MemorySemanticsAcquireReleaseMask);\n 8010          return 0;\n 8011:     case glslang::EOpSubgroupBarrier:\n 8012:         builder.createControlBarrier(spv::ScopeSubgroup, spv::ScopeSubgroup, spv::MemorySemanticsAllMemory |\n 8013                                                                               spv::MemorySemanticsAcquireReleaseMask);\n 8014          return spv::NoResult;\n 8015:     case glslang::EOpSubgroupMemoryBarrier:\n 8016:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsAllMemory |\n 8017                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8018          return spv::NoResult;\n 8019:     case glslang::EOpSubgroupMemoryBarrierBuffer:\n 8020:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsUniformMemoryMask |\n 8021                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8022          return spv::NoResult;\n 8023:     case glslang::EOpSubgroupMemoryBarrierImage:\n 8024:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsImageMemoryMask |\n 8025                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8026          return spv::NoResult;\n 8027:     case glslang::EOpSubgroupMemoryBarrierShared:\n 8028:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsWorkgroupMemoryMask |\n 8029                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8030          return spv::NoResult;\n ....\n 8667      // return 1; // start\n 8668      // return 2; // EOpAtomicCounterDecrement gets a post decrement, to map between GLSL -> SPIR-V\n 8669:     // return 3; // change/correct barrier-instruction operands, to match memory model group decisions\n 8670      // return 4; // some deeper access chains: for dynamic vector component, and local Boolean component\n 8671      // return 5; // make OpArrayLength result type be an int with signedness of 0\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/spirv.hpp:\n  859      CapabilityMultiViewport = 57,\n  860      CapabilitySubgroupDispatch = 58,\n  861:     CapabilityNamedBarrier = 59,\n  862      CapabilityPipeStorage = 60,\n  863      CapabilityGroupNonUniform = 61,\n  ...\n 1231      OpEmitStreamVertex = 220,\n 1232      OpEndStreamPrimitive = 221,\n 1233:     OpControlBarrier = 224,\n 1234:     OpMemoryBarrier = 225,\n 1235      OpAtomicLoad = 227,\n 1236      OpAtomicStore = 228,\n ....\n 1326      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1327      OpGetKernelMaxNumSubgroups = 326,\n 1328:     OpTypeNamedBarrier = 327,\n 1329:     OpNamedBarrierInitialize = 328,\n 1330:     OpMemoryNamedBarrier = 329,\n 1331      OpModuleProcessed = 330,\n 1332      OpExecutionModeId = 331,\n ....\n 1801      case OpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1802      case OpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1803:     case OpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1804:     case OpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1805      case OpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1806      case OpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1896      case OpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1897      case OpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1898:     case OpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1899:     case OpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1900:     case OpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1901      case OpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1902      case OpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.cpp:\n 1631  }\n 1632  \n 1633: void Builder::createControlBarrier(Scope execution, Scope memory, MemorySemanticsMask semantics)\n 1634  {\n 1635:     Instruction* op = new Instruction(OpControlBarrier);\n 1636      op->addIdOperand(makeUintConstant(execution));\n 1637      op->addIdOperand(makeUintConstant(memory));\n ....\n 1640  }\n 1641  \n 1642: void Builder::createMemoryBarrier(unsigned executionScope, unsigned memorySemantics)\n 1643  {\n 1644:     Instruction* op = new Instruction(OpMemoryBarrier);\n 1645      op->addIdOperand(makeUintConstant(executionScope));\n 1646      op->addIdOperand(makeUintConstant(memorySemantics));\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.h:\n  392      void createNoResultOp(Op, const std::vector<Id>& operands);\n  393      void createNoResultOp(Op, const std::vector<IdImmediate>& operands);\n  394:     void createControlBarrier(Scope execution, Scope memory, MemorySemanticsMask);\n  395:     void createMemoryBarrier(unsigned executionScope, unsigned memorySemantics);\n  396      Id createUnaryOp(Op, Id typeId, Id operand);\n  397      Id createBinOp(Op, Id typeId, Id operand1, Id operand2);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/150.tesc:\n   10  void main()\n   11  {\n   12:     barrier();\n   13  \n   14      int a = gl_MaxTessControlInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/150.tese:\n   10  void main()\n   11  {\n   12:     barrier(); // ERROR\n   13  \n   14      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/310.comp:\n   27  void main()\n   28  {\n   29:     barrier();\n   30:     memoryBarrier();\n   31:     memoryBarrierAtomicCounter();\n   32:     memoryBarrierBuffer();\n   33:     memoryBarrierShared();\n   34:     memoryBarrierImage();\n   35:     groupMemoryBarrier();\n   36      value = int(values[gl_LocalInvocationIndex]);\n   37  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/310.tesc:\n   15  void main()\n   16  {\n   17:     barrier();\n   18  \n   19      int a = gl_MaxTessControlInputComponents +\n   ..\n   39  \n   40      if (a > 10)\n   41:         barrier();           // ERROR\n   42      else\n   43:         barrier();           // ERROR\n   44  \n   45:     barrier();\n   46  \n   47      do {\n   48:         barrier();           // ERROR\n   49      } while (a > 10);\n   50  \n   51      switch (a) {\n   52      default:\n   53:         barrier();           // ERROR\n   54          break;\n   55      }\n   56:     a < 12 ? a : (barrier(), a); // ERROR\n   57      {\n   58:         barrier();\n   59      }\n   60  \n   61      return;\n   62  \n   63:     barrier();               // ERROR\n   64  }\n   65  \n   ..\n   71      gl_out[4].gl_Position;  // ERROR, out of range\n   72  \n   73:     barrier();              // ERROR, not in main\n   74  }\n   75  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/310.tese:\n   24  void main()\n   25  {\n   26:     barrier(); // ERROR\n   27  \n   28      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/320.tesc:\n   13  void main()\n   14  {\n   15:     barrier();\n   16  \n   17      int a = gl_MaxTessControlInputComponents +\n   ..\n   37  \n   38      if (a > 10)\n   39:         barrier();           // ERROR\n   40      else\n   41:         barrier();           // ERROR\n   42  \n   43:     barrier();\n   44  \n   45      do {\n   46:         barrier();           // ERROR\n   47      } while (a > 10);\n   48  \n   49      switch (a) {\n   50      default:\n   51:         barrier();           // ERROR\n   52          break;\n   53      }\n   54:     a < 12 ? a : (barrier(), a); // ERROR\n   55      {\n   56:         barrier();\n   57      }\n   58  \n   59      return;\n   60  \n   61:     barrier();               // ERROR\n   62  }\n   63  \n   ..\n   69      gl_out[4].gl_Position;  // ERROR, out of range\n   70  \n   71:     barrier();              // ERROR, not in main\n   72  }\n   73  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/320.tese:\n   20  void main()\n   21  {\n   22:     barrier(); // ERROR\n   23  \n   24      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/400.tesc:\n   13  void main()\n   14  {\n   15:     barrier();\n   16  \n   17      int a = gl_MaxTessControlInputComponents +\n   ..\n   37  \n   38      if (a > 10)\n   39:         barrier();           // ERROR\n   40      else\n   41:         barrier();           // ERROR\n   42  \n   43:     barrier();\n   44  \n   45      do {\n   46:         barrier();           // ERROR\n   47      } while (a > 10);\n   48  \n   49      switch (a) {\n   50      default:\n   51:         barrier();           // ERROR\n   52          break;\n   53      }\n   54:     a < 12 ? a : (barrier(), a); // ERROR\n   55      {\n   56:         barrier();\n   57      }\n   58  \n   59      return;\n   60  \n   61:     barrier();               // ERROR\n   62  }\n   63  \n   ..\n   69      gl_out[4].gl_PointSize;  // ERROR\n   70  \n   71:     barrier();                // ERROR\n   72  }\n   73  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/400.tese:\n   20  void main()\n   21  {\n   22:     barrier(); // ERROR\n   23  \n   24      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/420.comp:\n   21              gl_MaxComputeAtomicCounterBuffers;\n   22  \n   23:     barrier();\n   24:     memoryBarrier();\n   25:     memoryBarrierAtomicCounter();\n   26:     memoryBarrierBuffer();\n   27:     memoryBarrierImage();\n   28:     memoryBarrierShared();\n   29:     groupMemoryBarrier();\n   30  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/420.tese:\n   82  void main()\n   83  {\n   84:     memoryBarrier();\n   85  \n   86      if (constructed == curlybad1)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/430.comp:\n   27  void main()\n   28  {\n   29:     barrier();\n   30:     memoryBarrier();\n   31:     memoryBarrierAtomicCounter();\n   32:     memoryBarrierBuffer();\n   33:     memoryBarrierShared();\n   34:     memoryBarrierImage();\n   35:     groupMemoryBarrier();\n   36      value = int(values[gl_LocalInvocationIndex]);\n   37  \n   38      int a;\n   39      if (a > 10)\n   40:         barrier();\n   41  }\n   42  \n   ..\n   68      ro.values[2] = 4.7;             // ERROR, readonly\n   69      ro.values.length();\n   70:     barrier();\n   71  }\n   72  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/430.vert:\n  146  shared vec4 sharedv;                // ERROR\n  147  \n  148: void fooBarrier()\n  149  {\n  150:     barrier();                       // ERROR\n  151:     memoryBarrier();\n  152:     memoryBarrierAtomicCounter();\n  153:     memoryBarrierBuffer();\n  154:     memoryBarrierShared();           // ERROR\n  155:     memoryBarrierImage();\n  156:     groupMemoryBarrier();            // ERROR\n  157  }\n  158  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/150.tesc.out:\n    7  0:10    Function Parameters: \n    8  0:12    Sequence\n    9: 0:12      Barrier ( global void)\n   10  0:14      Sequence\n   11  0:14        move second child to first child ( temp int)\n   ..\n  105  \n  106  150.tese\n  107: ERROR: 0:12: 'barrier' : no matching overloaded function found \n  108  ERROR: 1 compilation errors.  No code generated.\n  109  \n  ...\n  215  ERROR: 0:8: 'fractional_even_spacing' : unrecognized layout identifier, or qualifier requires assignment (e.g., binding = 4) \n  216  ERROR: 0:10: 'patch' : can only use on output in tessellation-control shader \n  217: ERROR: 0:39: '' : tessellation control barrier() cannot be placed within flow control \n  218: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n  219: ERROR: 0:46: '' : tessellation control barrier() cannot be placed within flow control \n  220: ERROR: 0:51: '' : tessellation control barrier() cannot be placed within flow control \n  221: ERROR: 0:54: '' : tessellation control barrier() cannot be placed within flow control \n  222: ERROR: 0:61: '' : tessellation control barrier() cannot be placed after a return from main() \n  223  ERROR: 0:64: 'vertices' : can only apply to 'out' \n  224  ERROR: 0:65: 'vertices' : cannot change previously set layout value \n  225  ERROR: 0:69: '[' :  array index out of range '4'\n  226: ERROR: 0:71: '' : tessellation control barrier() must be in main() \n  227  ERROR: 0:74: 'in' : type must be an array: ina\n  228  ERROR: 0:76: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n  ...\n  246  0:13    Function Parameters: \n  247  0:15    Sequence\n  248: 0:15      Barrier ( global void)\n  249  0:17      Sequence\n  250  0:17        move second child to first child ( temp int)\n  ...\n  345  0:38            10 (const int)\n  346  0:38        true case\n  347: 0:39        Barrier ( global void)\n  348  0:38        false case\n  349: 0:41        Barrier ( global void)\n  350: 0:43      Barrier ( global void)\n  351  0:47      Loop with condition not tested first\n  352  0:47        Loop Condition\n  ...\n  357  0:47        Loop Body\n  358  0:46        Sequence\n  359: 0:46          Barrier ( global void)\n  360  0:49      switch\n  361  0:49      condition\n  ...\n  365  0:50          default: \n  366  0:?           Sequence\n  367: 0:51            Barrier ( global void)\n  368  0:52            Branch: Break\n  369  0:54      Test condition and select ( temp int)\n  ...\n  377  0:54        false case\n  378  0:54        Comma ( temp int)\n  379: 0:54          Barrier ( global void)\n  380  0:54          'a' ( temp int)\n  381  0:56      Sequence\n  382: 0:56        Barrier ( global void)\n  383  0:59      Branch: Return\n  384: 0:61      Barrier ( global void)\n  385  0:67  Function Definition: foo( ( global void)\n  386  0:67    Function Parameters: \n  ...\n  393  0:69        Constant:\n  394  0:69          1 (const int)\n  395: 0:71      Barrier ( global void)\n  396  0:91  Function Definition: foop( ( global void)\n  397  0:91    Function Parameters: \n  ...\n  449  ERROR: 0:13: 'fractional_even_spacing' : cannot change previously set vertex spacing \n  450  ERROR: 0:18: 'patch' : can only use on input in tessellation-evaluation shader \n  451: ERROR: 0:22: 'barrier' : no matching overloaded function found \n  452  ERROR: 0:47: 'patch' : cannot use interpolation qualifiers with patch \n  453  ERROR: 0:48: 'patch' : cannot use interpolation qualifiers with patch \n  ...\n  832  0:82    Function Parameters: \n  833  0:84    Sequence\n  834: 0:84      MemoryBarrier ( global void)\n  835  0:86      Test condition and select ( temp void)\n  836  0:86        Condition\n  ...\n  978  0:10    Function Parameters: \n  979  0:12    Sequence\n  980: 0:12      Barrier ( global void)\n  981  0:14      Sequence\n  982  0:14        move second child to first child ( temp int)\n  ...\n 1073  0:13    Function Parameters: \n 1074  0:15    Sequence\n 1075: 0:15      Barrier ( global void)\n 1076  0:17      Sequence\n 1077  0:17        move second child to first child ( temp int)\n ....\n 1172  0:38            10 (const int)\n 1173  0:38        true case\n 1174: 0:39        Barrier ( global void)\n 1175  0:38        false case\n 1176: 0:41        Barrier ( global void)\n 1177: 0:43      Barrier ( global void)\n 1178  0:47      Loop with condition not tested first\n 1179  0:47        Loop Condition\n ....\n 1184  0:47        Loop Body\n 1185  0:46        Sequence\n 1186: 0:46          Barrier ( global void)\n 1187  0:49      switch\n 1188  0:49      condition\n ....\n 1192  0:50          default: \n 1193  0:?           Sequence\n 1194: 0:51            Barrier ( global void)\n 1195  0:52            Branch: Break\n 1196  0:54      Test condition and select ( temp int)\n ....\n 1204  0:54        false case\n 1205  0:54        Comma ( temp int)\n 1206: 0:54          Barrier ( global void)\n 1207  0:54          'a' ( temp int)\n 1208  0:56      Sequence\n 1209: 0:56        Barrier ( global void)\n 1210  0:59      Branch: Return\n 1211: 0:61      Barrier ( global void)\n 1212  0:8  Function Definition: main( ( global void)\n 1213  0:8    Function Parameters: \n ....\n 1553  0:82    Function Parameters: \n 1554  0:84    Sequence\n 1555: 0:84      MemoryBarrier ( global void)\n 1556  0:86      Test condition and select ( temp void)\n 1557  0:86        Condition\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/310.comp.out:\n   97  0:27    Function Parameters: \n   98  0:29    Sequence\n   99: 0:29      Barrier ( global void)\n  100: 0:30      MemoryBarrier ( global void)\n  101: 0:31      MemoryBarrierAtomicCounter ( global void)\n  102: 0:32      MemoryBarrierBuffer ( global void)\n  103: 0:33      MemoryBarrierShared ( global void)\n  104: 0:34      MemoryBarrierImage ( global void)\n  105: 0:35      GroupMemoryBarrier ( global void)\n  106  0:36      move second child to first child ( temp highp int)\n  107  0:36        value: direct index for structure (layout( column_major shared) buffer highp int)\n  ...\n  535  0:27    Function Parameters: \n  536  0:29    Sequence\n  537: 0:29      Barrier ( global void)\n  538: 0:30      MemoryBarrier ( global void)\n  539: 0:31      MemoryBarrierAtomicCounter ( global void)\n  540: 0:32      MemoryBarrierBuffer ( global void)\n  541: 0:33      MemoryBarrierShared ( global void)\n  542: 0:34      MemoryBarrierImage ( global void)\n  543: 0:35      GroupMemoryBarrier ( global void)\n  544  0:36      move second child to first child ( temp highp int)\n  545  0:36        value: direct index for structure (layout( column_major shared) buffer highp int)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/310.tesc.out:\n   15  ERROR: 0:35: 'expression' :  left of '[' is not of type array, matrix, or vector  \n   16  ERROR: 0:35: 'assign' :  l-value required (can't modify a const)\n   17: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n   18: ERROR: 0:43: '' : tessellation control barrier() cannot be placed within flow control \n   19: ERROR: 0:48: '' : tessellation control barrier() cannot be placed within flow control \n   20: ERROR: 0:53: '' : tessellation control barrier() cannot be placed within flow control \n   21: ERROR: 0:56: '' : tessellation control barrier() cannot be placed within flow control \n   22: ERROR: 0:63: '' : tessellation control barrier() cannot be placed after a return from main() \n   23  ERROR: 0:66: 'vertices' : can only apply to 'out' \n   24  ERROR: 0:67: 'vertices' : cannot change previously set layout value \n   25  ERROR: 0:71: '[' :  array index out of range '4'\n   26: ERROR: 0:73: '' : tessellation control barrier() must be in main() \n   27  ERROR: 0:76: 'in' : type must be an array: ina\n   28  ERROR: 0:78: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n   ..\n   63  0:15    Function Parameters: \n   64  0:17    Sequence\n   65: 0:17      Barrier ( global void)\n   66  0:19      Sequence\n   67  0:19        move second child to first child ( temp highp int)\n   ..\n  147  0:40            10 (const int)\n  148  0:40        true case\n  149: 0:41        Barrier ( global void)\n  150  0:40        false case\n  151: 0:43        Barrier ( global void)\n  152: 0:45      Barrier ( global void)\n  153  0:49      Loop with condition not tested first\n  154  0:49        Loop Condition\n  ...\n  159  0:49        Loop Body\n  160  0:48        Sequence\n  161: 0:48          Barrier ( global void)\n  162  0:51      switch\n  163  0:51      condition\n  ...\n  167  0:52          default: \n  168  0:?           Sequence\n  169: 0:53            Barrier ( global void)\n  170  0:54            Branch: Break\n  171  0:56      Test condition and select ( temp highp int)\n  ...\n  179  0:56        false case\n  180  0:56        Comma ( temp highp int)\n  181: 0:56          Barrier ( global void)\n  182  0:56          'a' ( temp highp int)\n  183  0:58      Sequence\n  184: 0:58        Barrier ( global void)\n  185  0:61      Branch: Return\n  186: 0:63      Barrier ( global void)\n  187  0:69  Function Definition: foo( ( global void)\n  188  0:69    Function Parameters: \n  ...\n  195  0:71        Constant:\n  196  0:71          0 (const int)\n  197: 0:73      Barrier ( global void)\n  198  0:92  Function Definition: foop( ( global void)\n  199  0:92    Function Parameters: \n  ...\n  433  0:15    Function Parameters: \n  434  0:17    Sequence\n  435: 0:17      Barrier ( global void)\n  436  0:19      Sequence\n  437  0:19        move second child to first child ( temp highp int)\n  ...\n  517  0:40            10 (const int)\n  518  0:40        true case\n  519: 0:41        Barrier ( global void)\n  520  0:40        false case\n  521: 0:43        Barrier ( global void)\n  522: 0:45      Barrier ( global void)\n  523  0:49      Loop with condition not tested first\n  524  0:49        Loop Condition\n  ...\n  529  0:49        Loop Body\n  530  0:48        Sequence\n  531: 0:48          Barrier ( global void)\n  532  0:51      switch\n  533  0:51      condition\n  ...\n  537  0:52          default: \n  538  0:?           Sequence\n  539: 0:53            Barrier ( global void)\n  540  0:54            Branch: Break\n  541  0:56      Test condition and select ( temp highp int)\n  ...\n  549  0:56        false case\n  550  0:56        Comma ( temp highp int)\n  551: 0:56          Barrier ( global void)\n  552  0:56          'a' ( temp highp int)\n  553  0:58      Sequence\n  554: 0:58        Barrier ( global void)\n  555  0:61      Branch: Return\n  556: 0:63      Barrier ( global void)\n  557  0:?   Linker Objects\n  558  0:?     'gl_out' ( out 4-element array of block{ out highp 4-component vector of float Position gl_Position,  out highp float PointSize gl_PointSize})\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/310.tese.out:\n    7  ERROR: 0:17: 'fractional_even_spacing' : cannot change previously set vertex spacing \n    8  ERROR: 0:22: 'patch' : can only use on input in tessellation-evaluation shader \n    9: ERROR: 0:26: 'barrier' : no matching overloaded function found \n   10  ERROR: 0:37: 'gl_PointSize' : required extension not requested: Possible extensions include:\n   11  GL_EXT_tessellation_point_size\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/320.tesc.out:\n   15  ERROR: 0:33: 'expression' :  left of '[' is not of type array, matrix, or vector  \n   16  ERROR: 0:33: 'assign' :  l-value required (can't modify a const)\n   17: ERROR: 0:39: '' : tessellation control barrier() cannot be placed within flow control \n   18: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n   19: ERROR: 0:46: '' : tessellation control barrier() cannot be placed within flow control \n   20: ERROR: 0:51: '' : tessellation control barrier() cannot be placed within flow control \n   21: ERROR: 0:54: '' : tessellation control barrier() cannot be placed within flow control \n   22: ERROR: 0:61: '' : tessellation control barrier() cannot be placed after a return from main() \n   23  ERROR: 0:64: 'vertices' : can only apply to 'out' \n   24  ERROR: 0:65: 'vertices' : cannot change previously set layout value \n   25  ERROR: 0:69: '[' :  array index out of range '4'\n   26: ERROR: 0:71: '' : tessellation control barrier() must be in main() \n   27  ERROR: 0:74: 'in' : type must be an array: ina\n   28  ERROR: 0:76: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n   ..\n   57  0:13    Function Parameters: \n   58  0:15    Sequence\n   59: 0:15      Barrier ( global void)\n   60  0:17      Sequence\n   61  0:17        move second child to first child ( temp highp int)\n   ..\n  141  0:38            10 (const int)\n  142  0:38        true case\n  143: 0:39        Barrier ( global void)\n  144  0:38        false case\n  145: 0:41        Barrier ( global void)\n  146: 0:43      Barrier ( global void)\n  147  0:47      Loop with condition not tested first\n  148  0:47        Loop Condition\n  ...\n  153  0:47        Loop Body\n  154  0:46        Sequence\n  155: 0:46          Barrier ( global void)\n  156  0:49      switch\n  157  0:49      condition\n  ...\n  161  0:50          default: \n  162  0:?           Sequence\n  163: 0:51            Barrier ( global void)\n  164  0:52            Branch: Break\n  165  0:54      Test condition and select ( temp highp int)\n  ...\n  173  0:54        false case\n  174  0:54        Comma ( temp highp int)\n  175: 0:54          Barrier ( global void)\n  176  0:54          'a' ( temp highp int)\n  177  0:56      Sequence\n  178: 0:56        Barrier ( global void)\n  179  0:59      Branch: Return\n  180: 0:61      Barrier ( global void)\n  181  0:67  Function Definition: foo( ( global void)\n  182  0:67    Function Parameters: \n  ...\n  189  0:69        Constant:\n  190  0:69          0 (const int)\n  191: 0:71      Barrier ( global void)\n  192  0:102  Function Definition: pointSize2( ( global void)\n  193  0:102    Function Parameters: \n  ...\n  415  0:13    Function Parameters: \n  416  0:15    Sequence\n  417: 0:15      Barrier ( global void)\n  418  0:17      Sequence\n  419  0:17        move second child to first child ( temp highp int)\n  ...\n  499  0:38            10 (const int)\n  500  0:38        true case\n  501: 0:39        Barrier ( global void)\n  502  0:38        false case\n  503: 0:41        Barrier ( global void)\n  504: 0:43      Barrier ( global void)\n  505  0:47      Loop with condition not tested first\n  506  0:47        Loop Condition\n  ...\n  511  0:47        Loop Body\n  512  0:46        Sequence\n  513: 0:46          Barrier ( global void)\n  514  0:49      switch\n  515  0:49      condition\n  ...\n  519  0:50          default: \n  520  0:?           Sequence\n  521: 0:51            Barrier ( global void)\n  522  0:52            Branch: Break\n  523  0:54      Test condition and select ( temp highp int)\n  ...\n  531  0:54        false case\n  532  0:54        Comma ( temp highp int)\n  533: 0:54          Barrier ( global void)\n  534  0:54          'a' ( temp highp int)\n  535  0:56      Sequence\n  536: 0:56        Barrier ( global void)\n  537  0:59      Branch: Return\n  538: 0:61      Barrier ( global void)\n  539  0:?   Linker Objects\n  540  0:?     'gl_out' ( out 4-element array of block{ out highp 4-component vector of float Position gl_Position,  out highp float PointSize gl_PointSize})\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/320.tese.out:\n    7  ERROR: 0:13: 'fractional_even_spacing' : cannot change previously set vertex spacing \n    8  ERROR: 0:18: 'patch' : can only use on input in tessellation-evaluation shader \n    9: ERROR: 0:22: 'barrier' : no matching overloaded function found \n   10  ERROR: 0:33: 'gl_PointSize' : required extension not requested: Possible extensions include:\n   11  GL_EXT_tessellation_point_size\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/400.tesc.out:\n    4  ERROR: 0:8: 'fractional_even_spacing' : unrecognized layout identifier, or qualifier requires assignment (e.g., binding = 4) \n    5  ERROR: 0:10: 'patch' : can only use on output in tessellation-control shader \n    6: ERROR: 0:39: '' : tessellation control barrier() cannot be placed within flow control \n    7: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n    8: ERROR: 0:46: '' : tessellation control barrier() cannot be placed within flow control \n    9: ERROR: 0:51: '' : tessellation control barrier() cannot be placed within flow control \n   10: ERROR: 0:54: '' : tessellation control barrier() cannot be placed within flow control \n   11: ERROR: 0:61: '' : tessellation control barrier() cannot be placed after a return from main() \n   12  ERROR: 0:64: 'vertices' : can only apply to 'out' \n   13  ERROR: 0:65: 'vertices' : cannot change previously set layout value \n   14  ERROR: 0:69: '[' :  array index out of range '4'\n   15: ERROR: 0:71: '' : tessellation control barrier() must be in main() \n   16  ERROR: 0:74: 'in' : type must be an array: ina\n   17  ERROR: 0:76: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n   ..\n   35  0:13    Function Parameters: \n   36  0:15    Sequence\n   37: 0:15      Barrier ( global void)\n   38  0:17      Sequence\n   39  0:17        move second child to first child ( temp int)\n   ..\n  134  0:38            10 (const int)\n  135  0:38        true case\n  136: 0:39        Barrier ( global void)\n  137  0:38        false case\n  138: 0:41        Barrier ( global void)\n  139: 0:43      Barrier ( global void)\n  140  0:47      Loop with condition not tested first\n  141  0:47        Loop Condition\n  ...\n  146  0:47        Loop Body\n  147  0:46        Sequence\n  148: 0:46          Barrier ( global void)\n  149  0:49      switch\n  150  0:49      condition\n  ...\n  154  0:50          default: \n  155  0:?           Sequence\n  156: 0:51            Barrier ( global void)\n  157  0:52            Branch: Break\n  158  0:54      Test condition and select ( temp int)\n  ...\n  166  0:54        false case\n  167  0:54        Comma ( temp int)\n  168: 0:54          Barrier ( global void)\n  169  0:54          'a' ( temp int)\n  170  0:56      Sequence\n  171: 0:56        Barrier ( global void)\n  172  0:59      Branch: Return\n  173: 0:61      Barrier ( global void)\n  174  0:67  Function Definition: foo( ( global void)\n  175  0:67    Function Parameters: \n  ...\n  182  0:69        Constant:\n  183  0:69          1 (const int)\n  184: 0:71      Barrier ( global void)\n  185  0:91  Function Definition: foop( ( global void)\n  186  0:91    Function Parameters: \n  ...\n  243  0:13    Function Parameters: \n  244  0:15    Sequence\n  245: 0:15      Barrier ( global void)\n  246  0:17      Sequence\n  247  0:17        move second child to first child ( temp int)\n  ...\n  342  0:38            10 (const int)\n  343  0:38        true case\n  344: 0:39        Barrier ( global void)\n  345  0:38        false case\n  346: 0:41        Barrier ( global void)\n  347: 0:43      Barrier ( global void)\n  348  0:47      Loop with condition not tested first\n  349  0:47        Loop Condition\n  ...\n  354  0:47        Loop Body\n  355  0:46        Sequence\n  356: 0:46          Barrier ( global void)\n  357  0:49      switch\n  358  0:49      condition\n  ...\n  362  0:50          default: \n  363  0:?           Sequence\n  364: 0:51            Barrier ( global void)\n  365  0:52            Branch: Break\n  366  0:54      Test condition and select ( temp int)\n  ...\n  374  0:54        false case\n  375  0:54        Comma ( temp int)\n  376: 0:54          Barrier ( global void)\n  377  0:54          'a' ( temp int)\n  378  0:56      Sequence\n  379: 0:56        Barrier ( global void)\n  380  0:59      Branch: Return\n  381: 0:61      Barrier ( global void)\n  382  0:?   Linker Objects\n  383  0:?     'gl_out' ( out 4-element array of block{ out 4-component vector of float Position gl_Position,  out float PointSize gl_PointSize,  out 2-element array of float ClipDistance gl_ClipDistance})\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/400.tese.out:\n    7  ERROR: 0:13: 'fractional_even_spacing' : cannot change previously set vertex spacing \n    8  ERROR: 0:18: 'patch' : can only use on input in tessellation-evaluation shader \n    9: ERROR: 0:22: 'barrier' : no matching overloaded function found \n   10  ERROR: 0:47: 'patch' : cannot use interpolation qualifiers with patch \n   11  ERROR: 0:48: 'patch' : cannot use interpolation qualifiers with patch \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/420.comp.out:\n   46  0:17        Constant:\n   47  0:17          1057.000000\n   48: 0:23      Barrier ( global void)\n   49: 0:24      MemoryBarrier ( global void)\n   50: 0:25      MemoryBarrierAtomicCounter ( global void)\n   51: 0:26      MemoryBarrierBuffer ( global void)\n   52: 0:27      MemoryBarrierImage ( global void)\n   53: 0:28      MemoryBarrierShared ( global void)\n   54: 0:29      GroupMemoryBarrier ( global void)\n   55  0:?   Linker Objects\n   56  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n   ..\n  106  0:17        Constant:\n  107  0:17          1057.000000\n  108: 0:23      Barrier ( global void)\n  109: 0:24      MemoryBarrier ( global void)\n  110: 0:25      MemoryBarrierAtomicCounter ( global void)\n  111: 0:26      MemoryBarrierBuffer ( global void)\n  112: 0:27      MemoryBarrierImage ( global void)\n  113: 0:28      MemoryBarrierShared ( global void)\n  114: 0:29      GroupMemoryBarrier ( global void)\n  115  0:?   Linker Objects\n  116  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/420.tese.out:\n   89  0:82    Function Parameters: \n   90  0:84    Sequence\n   91: 0:84      MemoryBarrier ( global void)\n   92  0:86      Test condition and select ( temp void)\n   93  0:86        Condition\n   ..\n  265  0:82    Function Parameters: \n  266  0:84    Sequence\n  267: 0:84      MemoryBarrier ( global void)\n  268  0:86      Test condition and select ( temp void)\n  269  0:86        Condition\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/430.comp.out:\n   26  0:27    Function Parameters: \n   27  0:29    Sequence\n   28: 0:29      Barrier ( global void)\n   29: 0:30      MemoryBarrier ( global void)\n   30: 0:31      MemoryBarrierAtomicCounter ( global void)\n   31: 0:32      MemoryBarrierBuffer ( global void)\n   32: 0:33      MemoryBarrierShared ( global void)\n   33: 0:34      MemoryBarrierImage ( global void)\n   34: 0:35      GroupMemoryBarrier ( global void)\n   35  0:36      move second child to first child ( temp int)\n   36  0:36        value: direct index for structure (layout( column_major shared) buffer int)\n   ..\n   52  0:39            10 (const int)\n   53  0:39        true case\n   54: 0:40        Barrier ( global void)\n   55  0:66  Function Definition: foo( ( global void)\n   56  0:66    Function Parameters: \n   ..\n   71  0:69          Constant:\n   72  0:69            1 (const int)\n   73: 0:70      Barrier ( global void)\n   74  0:75  Function Definition: fooaoeu( ( global void)\n   75  0:75    Function Parameters: \n   ..\n  158  0:27    Function Parameters: \n  159  0:29    Sequence\n  160: 0:29      Barrier ( global void)\n  161: 0:30      MemoryBarrier ( global void)\n  162: 0:31      MemoryBarrierAtomicCounter ( global void)\n  163: 0:32      MemoryBarrierBuffer ( global void)\n  164: 0:33      MemoryBarrierShared ( global void)\n  165: 0:34      MemoryBarrierImage ( global void)\n  166: 0:35      GroupMemoryBarrier ( global void)\n  167  0:36      move second child to first child ( temp int)\n  168  0:36        value: direct index for structure (layout( column_major shared) buffer int)\n  ...\n  184  0:39            10 (const int)\n  185  0:39        true case\n  186: 0:40        Barrier ( global void)\n  187  0:?   Linker Objects\n  188  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/430.vert.out:\n   53  ERROR: 0:123: 'input block' : not supported in this stage: vertex\n   54  ERROR: 0:146: 'shared' : not supported in this stage: vertex\n   55: ERROR: 0:150: 'barrier' : no matching overloaded function found \n   56: ERROR: 0:154: 'memoryBarrierShared' : no matching overloaded function found \n   57: ERROR: 0:156: 'groupMemoryBarrier' : no matching overloaded function found \n   58  ERROR: 0:159: 'buffer' : buffers can be declared only as blocks \n   59  ERROR: 0:168: 'textureSamples and imageSamples' : not supported for this version or the enabled extensions \n   ..\n   92  0:31      'v2' ( in 2-component vector of float)\n   93  0:31      'cv3' ( in 3-component vector of float)\n   94: 0:148  Function Definition: fooBarrier( ( global void)\n   95  0:148    Function Parameters: \n   96  0:150    Sequence\n   97  0:150      Constant:\n   98  0:150        0.000000\n   99: 0:151      MemoryBarrier ( global void)\n  100: 0:152      MemoryBarrierAtomicCounter ( global void)\n  101: 0:153      MemoryBarrierBuffer ( global void)\n  102  0:154      Constant:\n  103  0:154        0.000000\n  104: 0:155      MemoryBarrierImage ( global void)\n  105  0:156      Constant:\n  106  0:156        0.000000\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.frag.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  113  0:6      'gl_SubgroupSize' ( flat in uint SubgroupSize)\n  114  0:7      'gl_SubgroupInvocationID' ( flat in uint SubgroupInvocationID)\n  115: 0:8      subgroupBarrier ( global void)\n  116: 0:9      subgroupMemoryBarrier ( global void)\n  117: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  118: 0:11      subgroupMemoryBarrierImage ( global void)\n  119  0:12      subgroupElect ( global bool)\n  120  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  347  0:107          Constant:\n  348  0:107            0 (const uint)\n  349: 0:108      subgroupBarrier ( global void)\n  350: 0:109      subgroupMemoryBarrier ( global void)\n  351: 0:110      subgroupMemoryBarrierBuffer ( global void)\n  352: 0:111      subgroupMemoryBarrierImage ( global void)\n  353  0:112      subgroupElect ( global bool)\n  354  0:116  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  658  0:107          Constant:\n  659  0:107            0 (const uint)\n  660: 0:108      subgroupBarrier ( global void)\n  661: 0:109      subgroupMemoryBarrier ( global void)\n  662: 0:110      subgroupMemoryBarrierBuffer ( global void)\n  663: 0:111      subgroupMemoryBarrierImage ( global void)\n  664  0:112      subgroupElect ( global bool)\n  665  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.geom.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  115  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  116  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  117: 0:8      subgroupBarrier ( global void)\n  118: 0:9      subgroupMemoryBarrier ( global void)\n  119: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  120: 0:11      subgroupMemoryBarrierImage ( global void)\n  121  0:12      subgroupElect ( global bool)\n  122  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  354  0:113          Constant:\n  355  0:113            0 (const uint)\n  356: 0:114      subgroupBarrier ( global void)\n  357: 0:115      subgroupMemoryBarrier ( global void)\n  358: 0:116      subgroupMemoryBarrierBuffer ( global void)\n  359: 0:117      subgroupMemoryBarrierImage ( global void)\n  360  0:118      subgroupElect ( global bool)\n  361  0:122  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  666  0:113          Constant:\n  667  0:113            0 (const uint)\n  668: 0:114      subgroupBarrier ( global void)\n  669: 0:115      subgroupMemoryBarrier ( global void)\n  670: 0:116      subgroupMemoryBarrierBuffer ( global void)\n  671: 0:117      subgroupMemoryBarrierImage ( global void)\n  672  0:118      subgroupElect ( global bool)\n  673  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.tesc.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:8      subgroupBarrier ( global void)\n  115: 0:9      subgroupMemoryBarrier ( global void)\n  116: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:11      subgroupMemoryBarrierImage ( global void)\n  118  0:12      subgroupElect ( global bool)\n  119  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  351  0:112          Constant:\n  352  0:112            0 (const uint)\n  353: 0:113      subgroupBarrier ( global void)\n  354: 0:114      subgroupMemoryBarrier ( global void)\n  355: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  356: 0:116      subgroupMemoryBarrierImage ( global void)\n  357  0:117      subgroupElect ( global bool)\n  358  0:121  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  660  0:112          Constant:\n  661  0:112            0 (const uint)\n  662: 0:113      subgroupBarrier ( global void)\n  663: 0:114      subgroupMemoryBarrier ( global void)\n  664: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  665: 0:116      subgroupMemoryBarrierImage ( global void)\n  666  0:117      subgroupElect ( global bool)\n  667  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.tese.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  114  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  115  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  116: 0:8      subgroupBarrier ( global void)\n  117: 0:9      subgroupMemoryBarrier ( global void)\n  118: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  119: 0:11      subgroupMemoryBarrierImage ( global void)\n  120  0:12      subgroupElect ( global bool)\n  121  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  353  0:112          Constant:\n  354  0:112            0 (const uint)\n  355: 0:113      subgroupBarrier ( global void)\n  356: 0:114      subgroupMemoryBarrier ( global void)\n  357: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  358: 0:116      subgroupMemoryBarrierImage ( global void)\n  359  0:117      subgroupElect ( global bool)\n  360  0:121  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  664  0:112          Constant:\n  665  0:112            0 (const uint)\n  666: 0:113      subgroupBarrier ( global void)\n  667: 0:114      subgroupMemoryBarrier ( global void)\n  668: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  669: 0:116      subgroupMemoryBarrierImage ( global void)\n  670  0:117      subgroupElect ( global bool)\n  671  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.vert.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  111  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  112  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  113: 0:8      subgroupBarrier ( global void)\n  114: 0:9      subgroupMemoryBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  116: 0:11      subgroupMemoryBarrierImage ( global void)\n  117  0:12      subgroupElect ( global bool)\n  118  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  350  0:111          Constant:\n  351  0:111            0 (const uint)\n  352: 0:112      subgroupBarrier ( global void)\n  353: 0:113      subgroupMemoryBarrier ( global void)\n  354: 0:114      subgroupMemoryBarrierBuffer ( global void)\n  355: 0:115      subgroupMemoryBarrierImage ( global void)\n  356  0:116      subgroupElect ( global bool)\n  357  0:120  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  660  0:111          Constant:\n  661  0:111            0 (const uint)\n  662: 0:112      subgroupBarrier ( global void)\n  663: 0:113      subgroupMemoryBarrier ( global void)\n  664: 0:114      subgroupMemoryBarrierBuffer ( global void)\n  665: 0:115      subgroupMemoryBarrierImage ( global void)\n  666  0:116      subgroupElect ( global bool)\n  667  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroupBasic.comp.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : required extension not requested: GL_KHR_shader_subgroup_basic\n   10  ERROR: 0:14: 'gl_SubgroupID' : required extension not requested: GL_KHR_shader_subgroup_basic\n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : required extension not requested: GL_KHR_shader_subgroup_basic\n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:8      subgroupBarrier ( global void)\n  115: 0:9      subgroupMemoryBarrier ( global void)\n  116: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:11      subgroupMemoryBarrierImage ( global void)\n  118  0:12      subgroupElect ( global bool)\n  119  0:13      'gl_NumSubgroups' ( in uint NumSubgroups)\n  120  0:14      'gl_SubgroupID' ( in uint SubgroupID)\n  121: 0:15      subgroupMemoryBarrierShared ( global void)\n  122  0:17      subgroupAll ( global bool)\n  123  0:17        Constant:\n  ...\n  379  0:117          Constant:\n  380  0:117            0 (const int)\n  381: 0:118      subgroupBarrier ( global void)\n  382: 0:119      subgroupMemoryBarrier ( global void)\n  383: 0:120      subgroupMemoryBarrierBuffer ( global void)\n  384: 0:121      subgroupMemoryBarrierShared ( global void)\n  385: 0:122      subgroupMemoryBarrierImage ( global void)\n  386  0:126  Function Definition: ballot_works(vf4; ( global void)\n  387  0:126    Function Parameters: \n  ...\n  721  0:117          Constant:\n  722  0:117            0 (const int)\n  723: 0:118      subgroupBarrier ( global void)\n  724: 0:119      subgroupMemoryBarrier ( global void)\n  725: 0:120      subgroupMemoryBarrierBuffer ( global void)\n  726: 0:121      subgroupMemoryBarrierShared ( global void)\n  727: 0:122      subgroupMemoryBarrierImage ( global void)\n  728  0:?   Linker Objects\n  729  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.mesh.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : required extension not requested: GL_KHR_shader_subgroup_basic\n   10  ERROR: 0:14: 'gl_SubgroupID' : required extension not requested: GL_KHR_shader_subgroup_basic\n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : required extension not requested: GL_KHR_shader_subgroup_basic\n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  116  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  117  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  118: 0:8      subgroupBarrier ( global void)\n  119: 0:9      subgroupMemoryBarrier ( global void)\n  120: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  121: 0:11      subgroupMemoryBarrierImage ( global void)\n  122  0:12      subgroupElect ( global bool)\n  123  0:13      'gl_NumSubgroups' ( in uint NumSubgroups)\n  124  0:14      'gl_SubgroupID' ( in uint SubgroupID)\n  125: 0:15      subgroupMemoryBarrierShared ( global void)\n  126  0:17      subgroupAll ( global bool)\n  127  0:17        Constant:\n  ...\n  399  0:128        Constant:\n  400  0:128          4.000000\n  401: 0:130      MemoryBarrierShared ( global void)\n  402: 0:130      Barrier ( global void)\n  403  0:132      move second child to first child ( temp 4-component vector of float)\n  404  0:132        gl_Position: direct index for structure ( out 4-component vector of float Position)\n  ...\n  477  0:135          Constant:\n  478  0:135            2 (const int)\n  479: 0:137      MemoryBarrierShared ( global void)\n  480: 0:137      Barrier ( global void)\n  481  0:139      move second child to first child ( temp int)\n  482  0:139        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n  ...\n  518  0:142        Constant:\n  519  0:142          9 (const int)\n  520: 0:144      MemoryBarrierShared ( global void)\n  521: 0:144      Barrier ( global void)\n  522  0:146      move second child to first child ( temp int)\n  523  0:146        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n  ...\n  590  0:149          Constant:\n  591  0:149            0 (const int)\n  592: 0:151      MemoryBarrierShared ( global void)\n  593: 0:151      Barrier ( global void)\n  594  0:154      move second child to first child ( temp uint)\n  595  0:154        direct index ( temp uint PrimitiveIndicesNV)\n  ...\n  625  0:161        Constant:\n  626  0:161          96 (const uint)\n  627: 0:163      MemoryBarrierShared ( global void)\n  628: 0:163      Barrier ( global void)\n  629  0:167  Function Definition: basic_works( ( global void)\n  630  0:167    Function Parameters: \n  ...\n  632  0:169      'gl_SubgroupSize' ( in uint SubgroupSize)\n  633  0:170      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  634: 0:171      subgroupBarrier ( global void)\n  635: 0:172      subgroupMemoryBarrier ( global void)\n  636: 0:173      subgroupMemoryBarrierBuffer ( global void)\n  637: 0:174      subgroupMemoryBarrierImage ( global void)\n  638  0:175      subgroupElect ( global bool)\n  639  0:176      'gl_NumSubgroups' ( in uint NumSubgroups)\n  640  0:177      'gl_SubgroupID' ( in uint SubgroupID)\n  641: 0:178      subgroupMemoryBarrierShared ( global void)\n  642  0:182  Function Definition: ballot_works(vf4; ( global void)\n  643  0:182    Function Parameters: \n  ...\n  999  0:128        Constant:\n 1000  0:128          4.000000\n 1001: 0:130      MemoryBarrierShared ( global void)\n 1002: 0:130      Barrier ( global void)\n 1003  0:132      move second child to first child ( temp 4-component vector of float)\n 1004  0:132        gl_Position: direct index for structure ( out 4-component vector of float Position)\n ....\n 1077  0:135          Constant:\n 1078  0:135            2 (const int)\n 1079: 0:137      MemoryBarrierShared ( global void)\n 1080: 0:137      Barrier ( global void)\n 1081  0:139      move second child to first child ( temp int)\n 1082  0:139        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n ....\n 1118  0:142        Constant:\n 1119  0:142          9 (const int)\n 1120: 0:144      MemoryBarrierShared ( global void)\n 1121: 0:144      Barrier ( global void)\n 1122  0:146      move second child to first child ( temp int)\n 1123  0:146        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n ....\n 1190  0:149          Constant:\n 1191  0:149            0 (const int)\n 1192: 0:151      MemoryBarrierShared ( global void)\n 1193: 0:151      Barrier ( global void)\n 1194  0:154      move second child to first child ( temp uint)\n 1195  0:154        direct index ( temp uint PrimitiveIndicesNV)\n ....\n 1225  0:161        Constant:\n 1226  0:161          96 (const uint)\n 1227: 0:163      MemoryBarrierShared ( global void)\n 1228: 0:163      Barrier ( global void)\n 1229  0:?   Linker Objects\n 1230  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rahit.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  419  0:133      'gl_SubgroupSize' ( in uint SubgroupSize)\n  420  0:134      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  421: 0:135      subgroupBarrier ( global void)\n  422: 0:136      subgroupMemoryBarrier ( global void)\n  423: 0:137      subgroupMemoryBarrierBuffer ( global void)\n  424: 0:138      subgroupMemoryBarrierImage ( global void)\n  425  0:139      subgroupElect ( global bool)\n  426  0:143  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rcall.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  362  0:121      'gl_SubgroupSize' ( in uint SubgroupSize)\n  363  0:122      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  364: 0:123      subgroupBarrier ( global void)\n  365: 0:124      subgroupMemoryBarrier ( global void)\n  366: 0:125      subgroupMemoryBarrierBuffer ( global void)\n  367: 0:126      subgroupMemoryBarrierImage ( global void)\n  368  0:127      subgroupElect ( global bool)\n  369  0:131  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rchit.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  428  0:131      'gl_SubgroupSize' ( in uint SubgroupSize)\n  429  0:132      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  430: 0:133      subgroupBarrier ( global void)\n  431: 0:134      subgroupMemoryBarrier ( global void)\n  432: 0:135      subgroupMemoryBarrierBuffer ( global void)\n  433: 0:136      subgroupMemoryBarrierImage ( global void)\n  434  0:137      subgroupElect ( global bool)\n  435  0:141  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rgen.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  392  0:125      'gl_SubgroupSize' ( in uint SubgroupSize)\n  393  0:126      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  394: 0:127      subgroupBarrier ( global void)\n  395: 0:128      subgroupMemoryBarrier ( global void)\n  396: 0:129      subgroupMemoryBarrierBuffer ( global void)\n  397: 0:130      subgroupMemoryBarrierImage ( global void)\n  398  0:131      subgroupElect ( global bool)\n  399  0:135  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rint.out:\n    2  ERROR: 0:8: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:9: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:10: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:11: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:12: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:13: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:14: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:15: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:16: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:17: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:19: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:20: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:8      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:9      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:10      subgroupBarrier ( global void)\n  115: 0:11      subgroupMemoryBarrier ( global void)\n  116: 0:12      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:13      subgroupMemoryBarrierImage ( global void)\n  118  0:14      subgroupElect ( global bool)\n  119  0:15      'gl_NumSubgroups' ( temp float)\n  ...\n  406  0:131      'gl_SubgroupSize' ( in uint SubgroupSize)\n  407  0:132      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  408: 0:133      subgroupBarrier ( global void)\n  409: 0:134      subgroupMemoryBarrier ( global void)\n  410: 0:135      subgroupMemoryBarrierBuffer ( global void)\n  411: 0:136      subgroupMemoryBarrierImage ( global void)\n  412  0:137      subgroupElect ( global bool)\n  413  0:141  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rmiss.out:\n    2  ERROR: 0:8: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:9: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:10: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:11: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:12: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:13: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:14: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:15: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:16: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:17: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:19: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:20: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:8      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:9      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:10      subgroupBarrier ( global void)\n  115: 0:11      subgroupMemoryBarrier ( global void)\n  116: 0:12      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:13      subgroupMemoryBarrierImage ( global void)\n  118  0:14      subgroupElect ( global bool)\n  119  0:15      'gl_NumSubgroups' ( temp float)\n  ...\n  400  0:125      'gl_SubgroupSize' ( in uint SubgroupSize)\n  401  0:126      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  402: 0:127      subgroupBarrier ( global void)\n  403: 0:128      subgroupMemoryBarrier ( global void)\n  404: 0:129      subgroupMemoryBarrierBuffer ( global void)\n  405: 0:130      subgroupMemoryBarrierImage ( global void)\n  406  0:131      subgroupElect ( global bool)\n  407  0:135  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.task.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : required extension not requested: GL_KHR_shader_subgroup_basic\n   10  ERROR: 0:14: 'gl_SubgroupID' : required extension not requested: GL_KHR_shader_subgroup_basic\n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : required extension not requested: GL_KHR_shader_subgroup_basic\n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  113  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  114  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  115: 0:8      subgroupBarrier ( global void)\n  116: 0:9      subgroupMemoryBarrier ( global void)\n  117: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  118: 0:11      subgroupMemoryBarrierImage ( global void)\n  119  0:12      subgroupElect ( global bool)\n  120  0:13      'gl_NumSubgroups' ( in uint NumSubgroups)\n  121  0:14      'gl_SubgroupID' ( in uint SubgroupID)\n  122: 0:15      subgroupMemoryBarrierShared ( global void)\n  123  0:17      subgroupAll ( global bool)\n  124  0:17        Constant:\n  ...\n  408  0:138            Constant:\n  409  0:138              1 (const uint)\n  410: 0:140      MemoryBarrierShared ( global void)\n  411: 0:140      Barrier ( global void)\n  412  0:144      move second child to first child ( temp 2-component vector of float)\n  413  0:144        dummy: direct index for structure (layout( std430 offset=0) taskNV out 2-component vector of float)\n  ...\n  463  0:148            2 (const int)\n  464  0:148        'viewID' ( temp uint)\n  465: 0:150      MemoryBarrierShared ( global void)\n  466: 0:150      Barrier ( global void)\n  467  0:153      move second child to first child ( temp uint)\n  468  0:153        'gl_TaskCountNV' ( out uint TaskCountNV)\n  ...\n  474  0:159      'gl_SubgroupSize' ( in uint SubgroupSize)\n  475  0:160      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  476: 0:161      subgroupBarrier ( global void)\n  477: 0:162      subgroupMemoryBarrier ( global void)\n  478: 0:163      subgroupMemoryBarrierBuffer ( global void)\n  479: 0:164      subgroupMemoryBarrierImage ( global void)\n  480  0:165      subgroupElect ( global bool)\n  481  0:166      'gl_NumSubgroups' ( in uint NumSubgroups)\n  482  0:167      'gl_SubgroupID' ( in uint SubgroupID)\n  483: 0:168      subgroupMemoryBarrierShared ( global void)\n  484  0:172  Function Definition: ballot_works(vf4; ( global void)\n  485  0:172    Function Parameters: \n  ...\n  851  0:138            Constant:\n  852  0:138              1 (const uint)\n  853: 0:140      MemoryBarrierShared ( global void)\n  854: 0:140      Barrier ( global void)\n  855  0:144      move second child to first child ( temp 2-component vector of float)\n  856  0:144        dummy: direct index for structure (layout( std430 offset=0) taskNV out 2-component vector of float)\n  ...\n  906  0:148            2 (const int)\n  907  0:148        'viewID' ( temp uint)\n  908: 0:150      MemoryBarrierShared ( global void)\n  909: 0:150      Barrier ( global void)\n  910  0:153      move second child to first child ( temp uint)\n  911  0:153        'gl_TaskCountNV' ( out uint TaskCountNV)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.es320.subgroupBasic.comp.out:\n   50  0:17          Constant:\n   51  0:17            0 (const int)\n   52: 0:18      subgroupBarrier ( global void)\n   53: 0:19      subgroupMemoryBarrier ( global void)\n   54: 0:20      subgroupMemoryBarrierBuffer ( global void)\n   55: 0:21      subgroupMemoryBarrierShared ( global void)\n   56: 0:22      subgroupMemoryBarrierImage ( global void)\n   57  0:?   Linker Objects\n   58  0:?     'gl_WorkGroupSize' ( const highp 3-component vector of uint WorkGroupSize)\n   ..\n  116  0:17          Constant:\n  117  0:17            0 (const int)\n  118: 0:18      subgroupBarrier ( global void)\n  119: 0:19      subgroupMemoryBarrier ( global void)\n  120: 0:20      subgroupMemoryBarrierBuffer ( global void)\n  121: 0:21      subgroupMemoryBarrierShared ( global void)\n  122: 0:22      subgroupMemoryBarrierImage ( global void)\n  123  0:?   Linker Objects\n  124  0:?     'gl_WorkGroupSize' ( const highp 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.color.hull.tesc.out:\n  192  0:63            Constant:\n  193  0:63              1 (const int)\n  194: 0:?       Barrier ( temp void)\n  195  0:?       Test condition and select ( temp void)\n  196  0:?         Condition\n  ...\n  459  0:63            Constant:\n  460  0:63              1 (const int)\n  461: 0:?       Barrier ( temp void)\n  462  0:?       Test condition and select ( temp void)\n  463  0:?         Condition\n  ...\n  714               125:    124(ptr) AccessChain 120(@entryPointOutput.color) 121\n  715                                Store 125 123\n  716:                               ControlBarrier 126 127 128\n  717               129:     10(int) Load 99(pointId)\n  718               131:   130(bool) IEqual 129 32\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.gs-hs-mix.tesc.out:\n  223  0:61            Constant:\n  224  0:61              0 (const int)\n  225: 0:?       Barrier ( temp void)\n  226  0:?       Test condition and select ( temp void)\n  227  0:?         Condition\n  ...\n  718  0:61            Constant:\n  719  0:61              0 (const int)\n  720: 0:?       Barrier ( temp void)\n  721  0:?       Test condition and select ( temp void)\n  722  0:?         Condition\n  ...\n 1201               132:    131(ptr) AccessChain 123(@entryPointOutput.PositionWS) 124\n 1202                                Store 132 130\n 1203:                               ControlBarrier 68 133 58\n 1204               134:      9(int) Load 120(id)\n 1205               136:   135(bool) IEqual 134 57\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.1.tesc.out:\n   89  0:26            Constant:\n   90  0:26              0 (const int)\n   91: 0:?       Barrier ( temp void)\n   92  0:?       Test condition and select ( temp void)\n   93  0:?         Condition\n   ..\n  253  0:26            Constant:\n  254  0:26              0 (const int)\n  255: 0:?       Barrier ( temp void)\n  256  0:?       Test condition and select ( temp void)\n  257  0:?         Condition\n  ...\n  445                72:     71(ptr) AccessChain 63(@entryPointOutput.cpoint) 64\n  446                                Store 72 70\n  447:                               ControlBarrier 20 10 73\n  448                74:      9(int) Load 60(m_cpid)\n  449                76:    75(bool) IEqual 74 30\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.2.tesc.out:\n   84  0:26            Constant:\n   85  0:26              0 (const int)\n   86: 0:?       Barrier ( temp void)\n   87  0:?       Test condition and select ( temp void)\n   88  0:?         Condition\n   ..\n  246  0:26            Constant:\n  247  0:26              0 (const int)\n  248: 0:?       Barrier ( temp void)\n  249  0:?       Test condition and select ( temp void)\n  250  0:?         Condition\n  ...\n  441                70:     69(ptr) AccessChain 61(@entryPointOutput.cpoint) 64\n  442                                Store 70 68\n  443:                               ControlBarrier 21 10 71\n  444                72:      9(int) Load 63(InvocationId)\n  445                74:    73(bool) IEqual 72 32\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.3.tesc.out:\n   84  0:26            Constant:\n   85  0:26              0 (const int)\n   86: 0:?       Barrier ( temp void)\n   87  0:?       Test condition and select ( temp void)\n   88  0:?         Condition\n   ..\n  246  0:26            Constant:\n  247  0:26              0 (const int)\n  248: 0:?       Barrier ( temp void)\n  249  0:?       Test condition and select ( temp void)\n  250  0:?         Condition\n  ...\n  442                70:     69(ptr) AccessChain 61(@entryPointOutput.cpoint) 64\n  443                                Store 70 68\n  444:                               ControlBarrier 21 10 71\n  445                72:      9(int) Load 63(InvocationId)\n  446                74:    73(bool) IEqual 72 32\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.4.tesc.out:\n  160  0:39            Constant:\n  161  0:39              0 (const int)\n  162: 0:?       Barrier ( temp void)\n  163  0:?       Test condition and select ( temp void)\n  164  0:?         Condition\n  ...\n  391  0:39            Constant:\n  392  0:39              0 (const int)\n  393: 0:?       Barrier ( temp void)\n  394  0:?       Test condition and select ( temp void)\n  395  0:?         Condition\n  ...\n  599                92:     91(ptr) AccessChain 83(@entryPointOutput.m_Position) 84\n  600                                Store 92 90\n  601:                               ControlBarrier 93 94 95\n  602                96:      9(int) Load 80(cpid)\n  603                98:    97(bool) IEqual 96 33\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.6.tesc.out:\n  149  0:42            Constant:\n  150  0:42              1 (const int)\n  151: 0:?       Barrier ( temp void)\n  152  0:?       Test condition and select ( temp void)\n  153  0:?         Condition\n  ...\n  376  0:42            Constant:\n  377  0:42              1 (const int)\n  378: 0:?       Barrier ( temp void)\n  379  0:?       Test condition and select ( temp void)\n  380  0:?         Condition\n  ...\n  605               109:    108(ptr) AccessChain 104(@entryPointOutput.Color) 105\n  606                                Store 109 107\n  607:                               ControlBarrier 15 18 110\n  608               111:     10(int) Load 88(uCPID)\n  609               113:   112(bool) IEqual 111 36\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.ctrlpt-1.tesc.out:\n   74  0:27            Constant:\n   75  0:27              0 (const int)\n   76: 0:?       Barrier ( temp void)\n   77  0:?       Test condition and select ( temp void)\n   78  0:?         Condition\n   ..\n  312  0:27            Constant:\n  313  0:27              0 (const int)\n  314: 0:?       Barrier ( temp void)\n  315  0:?       Test condition and select ( temp void)\n  316  0:?         Condition\n  ...\n  614                69:     68(ptr) AccessChain 60(@entryPointOutput.val) 61\n  615                                Store 69 67\n  616:                               ControlBarrier 70 71 72\n  617                73:      9(int) Load 57(cpid)\n  618                75:    74(bool) IEqual 73 30\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.ctrlpt-2.tesc.out:\n   81  0:28            Constant:\n   82  0:28              0 (const int)\n   83: 0:?       Barrier ( temp void)\n   84  0:?       Test condition and select ( temp void)\n   85  0:?         Condition\n   ..\n  328  0:28            Constant:\n  329  0:28              0 (const int)\n  330: 0:?       Barrier ( temp void)\n  331  0:?       Test condition and select ( temp void)\n  332  0:?         Condition\n  ...\n  633                70:     69(ptr) AccessChain 61(@entryPointOutput.val) 62\n  634                                Store 70 68\n  635:                               ControlBarrier 71 72 73\n  636                74:      9(int) Load 58(cpid)\n  637                76:    75(bool) IEqual 74 29\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.void.tesc.out:\n   73  0:26            Constant:\n   74  0:26              0 (const int)\n   75: 0:?       Barrier ( temp void)\n   76  0:?       Test condition and select ( temp void)\n   77  0:?         Condition\n   ..\n  167  0:26            Constant:\n  168  0:26              0 (const int)\n  169: 0:?       Barrier ( temp void)\n  170  0:?       Test condition and select ( temp void)\n  171  0:?         Condition\n  ...\n  267                57:     56(ptr) AccessChain 48(@entryPointOutput.cpoint) 51\n  268                                Store 57 55\n  269:                               ControlBarrier 58 59 60\n  270                61:      9(int) Load 50(InvocationId)\n  271                63:    62(bool) IEqual 61 23\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.intrinsics.barriers.comp.out:\n    1: hlsl.intrinsics.barriers.comp\n    2  Shader version: 500\n    3  local_size = (1, 1, 1)\n    .\n    6  0:3    Function Parameters: \n    7  0:?     Sequence\n    8: 0:4      MemoryBarrier ( temp void)\n    9: 0:5      AllMemoryBarrierWithGroupSync ( temp void)\n   10: 0:6      DeviceMemoryBarrier ( temp void)\n   11: 0:7      DeviceMemoryBarrierWithGroupSync ( temp void)\n   12: 0:8      WorkgroupMemoryBarrier ( temp void)\n   13: 0:9      WorkgroupMemoryBarrierWithGroupSync ( temp void)\n   14  0:11      Branch: Return with expression\n   15  0:11        Constant:\n   ..\n   34  0:3    Function Parameters: \n   35  0:?     Sequence\n   36: 0:4      MemoryBarrier ( temp void)\n   37: 0:5      AllMemoryBarrierWithGroupSync ( temp void)\n   38: 0:6      DeviceMemoryBarrier ( temp void)\n   39: 0:7      DeviceMemoryBarrierWithGroupSync ( temp void)\n   40: 0:8      WorkgroupMemoryBarrier ( temp void)\n   41: 0:9      WorkgroupMemoryBarrierWithGroupSync ( temp void)\n   42  0:11      Branch: Return with expression\n   43  0:11        Constant:\n   ..\n   87  8(@ComputeShaderFunction():    6(float) Function None 7\n   88                 9:             Label\n   89:                               MemoryBarrier 11 12\n   90:                               ControlBarrier 13 11 12\n   91:                               MemoryBarrier 11 14\n   92:                               ControlBarrier 13 11 14\n   93:                               MemoryBarrier 13 15\n   94:                               ControlBarrier 13 13 15\n   95                                ReturnValue 16\n   96                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.310.comp.out:\n  104           4(main):           2 Function None 3\n  105                 5:             Label\n  106:                               ControlBarrier 7 7 8\n  107                19:    9(float) Load 18(s)\n  108                21:     20(ptr) AccessChain 14(outbname) 16\n  ...\n  132                63:     62(ptr) AccessChain 50(outnames) 16\n  133                                Store 63 61\n  134:                               MemoryBarrier 66 8\n  135:                               MemoryBarrier 7 67\n  136                                Return\n  137                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.320.meshShaderUserDefined.mesh.out:\n  165                97:     58(ptr) AccessChain 37(blk) 91 82 44 92\n  166                                Store 97 96\n  167:                               MemoryBarrier 88 98\n  168:                               ControlBarrier 31 31 98\n  169               104:      6(int) Load 8(iid)\n  170               105:      6(int) Load 8(iid)\n  ...\n  200               138:     69(ptr) AccessChain 103(blk2) 132 52 64\n  201                                Store 138 137\n  202:                               MemoryBarrier 88 98\n  203:                               ControlBarrier 31 31 98\n  204                                Return\n  205                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.400.tesc.out:\n  137           43(pid):     11(ptr) Variable Function\n  138           46(iid):     11(ptr) Variable Function\n  139:                               ControlBarrier 7 8 9\n  140                                Store 12(a) 13\n  141                28:     27(ptr) AccessChain 24(gl_in) 25 26\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.atomic.comp.out:\n   85                 5:             Label\n   86           23(val):     22(ptr) Variable Function\n   87:                               MemoryBarrier 14 19\n   88                21:      6(int) FunctionCall 10(func(au1;) 20(counter)\n   89                30:      7(ptr) AccessChain 27(countArr) 29\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.atomicCounter.comp.out:\n    5  ERROR: 0:16: 'atomicCounterIncrement' : no matching overloaded function found \n    6  ERROR: 0:16: 'return' : type does not match, or is not convertible to, the function's return type \n    7: ERROR: 0:21: 'memoryBarrierAtomicCounter' : no matching overloaded function found \n    8  ERROR: 0:23: 'atomicCounter' : no matching overloaded function found \n    9  ERROR: 0:23: '=' :  cannot convert from ' const float' to ' temp highp uint'\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.barrier.vert.out:\n    1: spv.barrier.vert\n    2  // Module Version 10000\n    3  // Generated by (magic number): 8000a\n    .\n   31                 5:             Label\n   32                                Store 9(c0) 11\n   33:                               MemoryBarrier 13 14\n   34                                Store 15(c1) 11\n   35:                               MemoryBarrier 13 16\n   36                17:    7(fvec4) Load 9(c0)\n   37                18:    7(fvec4) CompositeConstruct 10 10 10 10\n   38                19:    7(fvec4) FAdd 17 18\n   39                                Store 9(c0) 19\n   40:                               MemoryBarrier 13 20\n   41                21:    7(fvec4) Load 9(c0)\n   42                22:    7(fvec4) CompositeConstruct 10 10 10 10\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.memoryScopeSemantics.comp.out:\n  222                70:     69(ptr) AccessChain 68(bufferu) 38\n  223                72:     15(int) AtomicIAdd 70 12 18 71\n  224:                               MemoryBarrier 26 18\n  225:                               ControlBarrier 26 26 64\n  226:                               ControlBarrier 26 26 17\n  227                74:     69(ptr) AccessChain 68(bufferu) 38\n  228                75:     15(int) Load 74 MakePointerVisibleKHR NonPrivatePointerKHR 26\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.memoryScopeSemantics_Error.comp.out:\n    5  ERROR: 0:18: 'atomicStore' : Invalid semantics value \n    6  ERROR: 0:19: 'imageAtomicLoad' : Invalid storage class semantics value \n    7: ERROR: 0:20: 'memoryBarrier' : Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease \n    8: ERROR: 0:21: 'memoryBarrier' : Storage class semantics must not be zero \n    9: ERROR: 0:22: 'memoryBarrier' : Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease \n   10  ERROR: 0:23: 'atomicAdd' : Semantics must not include multiple of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease \n   11  ERROR: 0:24: 'atomicCompSwap' : semUnequal must not be gl_SemanticsRelease or gl_SemanticsAcquireRelease \n   12: ERROR: 0:25: 'memoryBarrier' : gl_SemanticsMakeVisible requires gl_SemanticsAcquire or gl_SemanticsAcquireRelease \n   13: ERROR: 0:26: 'memoryBarrier' : gl_SemanticsMakeAvailable requires gl_SemanticsRelease or gl_SemanticsAcquireRelease \n   14: ERROR: 0:27: 'memoryBarrier' : gl_SemanticsVolatile must not be used with memoryBarrier or controlBarrier \n   15  ERROR: 0:28: 'atomicCompSwap' : semEqual and semUnequal must either both include gl_SemanticsVolatile or neither \n   16  ERROR: 14 compilation errors.  No code generated.\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderBuiltins.mesh.out:\n  165                54:     45(ptr) AccessChain 34(gl_MeshVerticesNV) 52 49 48\n  166                                Store 54 53\n  167:                               MemoryBarrier 27 55\n  168:                               ControlBarrier 56 56 55\n  169                57:      6(int) Load 8(iid)\n  170                58:      6(int) IAdd 57 27\n  ...\n  195                80:     45(ptr) AccessChain 34(gl_MeshVerticesNV) 76 49 48\n  196                                Store 80 79\n  197:                               MemoryBarrier 27 55\n  198:                               ControlBarrier 56 56 55\n  199                89:      6(int) Load 8(iid)\n  200                92:     91(ptr) AccessChain 88(gl_MeshPrimitivesNV) 89 37\n  ...\n  209               101:     91(ptr) AccessChain 88(gl_MeshPrimitivesNV) 99 49 37\n  210                                Store 101 100\n  211:                               MemoryBarrier 27 55\n  212:                               ControlBarrier 56 56 55\n  213               102:      6(int) Load 8(iid)\n  214               103:      6(int) IAdd 102 27\n  ...\n  239               125:     91(ptr) AccessChain 88(gl_MeshPrimitivesNV) 121 49 37\n  240                                Store 125 124\n  241:                               MemoryBarrier 27 55\n  242:                               ControlBarrier 56 56 55\n  243               132:    131(ptr) AccessChain 129(gl_PrimitiveIndicesNV) 37\n  244                                Store 132 130\n  ...\n  256               145:         144 WritePackedPrimitiveIndices4x8NV\n  257                                Store 146(gl_PrimitiveCountNV) 126\n  258:                               MemoryBarrier 27 55\n  259:                               ControlBarrier 56 56 55\n  260                                Return\n  261                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderPerViewBuiltins.mesh.out:\n  162                82:     76(ptr) AccessChain 72(gl_MeshPrimitivesNV) 78 53 79 80\n  163                                Store 82 81\n  164:                               MemoryBarrier 28 83\n  165:                               ControlBarrier 84 84 83\n  166                85:      6(int) Load 8(iid)\n  167                86:      6(int) IAdd 85 28\n  ...\n  209               124:     76(ptr) AccessChain 72(gl_MeshPrimitivesNV) 118 53 119 80\n  210                                Store 124 123\n  211:                               MemoryBarrier 28 83\n  212:                               ControlBarrier 84 84 83\n  213                                Return\n  214                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderPerViewUserDefined.mesh.out:\n  180                59:     43(ptr) AccessChain 35(b) 55 56\n  181                                Store 59 58\n  182:                               MemoryBarrier 60 61\n  183:                               ControlBarrier 62 62 61\n  184                68:      6(int) Load 8(iid)\n  185                69:      6(int) Load 16(viewID)\n  ...\n  198                87:     43(ptr) AccessChain 67(b2) 83 56 84\n  199                                Store 87 86\n  200:                               MemoryBarrier 60 61\n  201:                               ControlBarrier 62 62 61\n  202                                Return\n  203                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderRedeclBuiltins.mesh.out:\n  133                48:     39(ptr) AccessChain 28(gl_MeshVerticesNV) 46 43 42\n  134                                Store 48 47\n  135:                               MemoryBarrier 49 50\n  136:                               ControlBarrier 51 51 50\n  137                52:      6(int) Load 8(iid)\n  138                53:      6(int) IAdd 52 49\n  ...\n  163                75:     39(ptr) AccessChain 28(gl_MeshVerticesNV) 71 43 42\n  164                                Store 75 74\n  165:                               MemoryBarrier 49 50\n  166:                               ControlBarrier 51 51 50\n  167                82:      6(int) Load 8(iid)\n  168                85:     84(ptr) AccessChain 81(gl_MeshPrimitivesNV) 82 31\n  ...\n  177                94:     84(ptr) AccessChain 81(gl_MeshPrimitivesNV) 92 43 31\n  178                                Store 94 93\n  179:                               MemoryBarrier 49 50\n  180:                               ControlBarrier 51 51 50\n  181                95:      6(int) Load 8(iid)\n  182                96:      6(int) IAdd 95 49\n  ...\n  207               118:     84(ptr) AccessChain 81(gl_MeshPrimitivesNV) 114 43 31\n  208                                Store 118 117\n  209:                               MemoryBarrier 49 50\n  210:                               ControlBarrier 51 51 50\n  211               124:    123(ptr) AccessChain 122(gl_PrimitiveIndicesNV) 31\n  212                                Store 124 49\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderRedeclPerViewBuiltins.mesh.out:\n  135                76:     71(ptr) AccessChain 67(gl_MeshPrimitivesNV) 73 48 74 38\n  136                                Store 76 75\n  137:                               MemoryBarrier 60 77\n  138:                               ControlBarrier 78 78 77\n  139                79:      6(int) Load 8(iid)\n  140                80:      6(int) IAdd 79 60\n  ...\n  182               118:     71(ptr) AccessChain 67(gl_MeshPrimitivesNV) 112 48 113 38\n  183                                Store 118 117\n  184:                               MemoryBarrier 60 77\n  185:                               ControlBarrier 78 78 77\n  186                                Return\n  187                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderSharedMem.mesh.out:\n  125                72:   31(fvec4) Load 71\n  126                                ImageWrite 64 67 72\n  127:                               MemoryBarrier 69 73\n  128:                               ControlBarrier 74 74 73\n  129                                Return\n  130                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderUserDefined.mesh.out:\n  163                95:     57(ptr) AccessChain 34(blk) 89 81 44 90\n  164                                Store 95 94\n  165:                               MemoryBarrier 42 96\n  166:                               ControlBarrier 28 28 96\n  167               102:      6(int) Load 8(iid)\n  168               103:      6(int) Load 8(iid)\n  ...\n  198               136:     68(ptr) AccessChain 101(blk2) 130 52 63\n  199                                Store 136 135\n  200:                               MemoryBarrier 42 96\n  201:                               ControlBarrier 28 28 96\n  202                                Return\n  203                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshTaskShader.task.out:\n  173                82:   41(fvec4) Load 81\n  174                                ImageWrite 74 77 82\n  175:                               MemoryBarrier 79 83\n  176:                               ControlBarrier 84 84 83\n  177                95:     94(ptr) AccessChain 90(mytask) 51\n  178                                Store 95 93\n  ...\n  190               112:    111(ptr) AccessChain 90(mytask) 104\n  191                                Store 112 110\n  192:                               MemoryBarrier 79 83\n  193:                               ControlBarrier 84 84 83\n  194                                Store 113(gl_TaskCountNV) 86\n  195                                Return\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.subgroupBasic.comp.out:\n   76                31:     17(ptr) AccessChain 10(data) 11 26\n   77                                Store 31 30\n   78:                               ControlBarrier 28 28 32\n   79:                               MemoryBarrier 28 32\n   80:                               MemoryBarrier 28 33\n   81:                               MemoryBarrier 28 34\n   82:                               MemoryBarrier 28 35\n   83                                Return\n   84                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/web.comp.out:\n   97         %main = OpFunction %void None %3\n   98            %5 = OpLabel\n   99:                OpControlBarrier %uint_2 %uint_2 %uint_264\n  100           %20 = OpAccessChain %_ptr_Uniform_int %bInst %int_0\n  101           %21 = OpLoad %int %20\n  ...\n  106           %29 = OpAccessChain %_ptr_Uniform_v4float %bInst %int_2 %22\n  107                 OpStore %29 %28\n  108:                OpMemoryBarrier %uint_1 %uint_3400\n  109:                OpMemoryBarrier %uint_2 %uint_3400\n  110:                OpMemoryBarrier %uint_1 %uint_264\n  111:                OpMemoryBarrier %uint_1 %uint_72\n  112           %44 = OpCompositeExtract %uint %gl_WorkGroupSize 0\n  113           %49 = OpAccessChain %_ptr_Private_int %arrX %int_0\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.frag:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)         \n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  106  {\n  107    data = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  108:   subgroupBarrier();\n  109:   subgroupMemoryBarrier();\n  110:   subgroupMemoryBarrierBuffer();\n  111:   subgroupMemoryBarrierImage();\n  112    subgroupElect();\n  113  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.geom:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  112  {\n  113    result[gl_PrimitiveIDIn] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  114:   subgroupBarrier();\n  115:   subgroupMemoryBarrier();\n  116:   subgroupMemoryBarrierBuffer();\n  117:   subgroupMemoryBarrierImage();\n  118    subgroupElect();\n  119  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.tesc:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  111  {\n  112    result[gl_PrimitiveID] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  113:   subgroupBarrier();\n  114:   subgroupMemoryBarrier();\n  115:   subgroupMemoryBarrierBuffer();\n  116:   subgroupMemoryBarrierImage();\n  117    subgroupElect();\n  118  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.tese:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  111  {\n  112    result[gl_PrimitiveID] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  113:   subgroupBarrier();\n  114:   subgroupMemoryBarrier();\n  115:   subgroupMemoryBarrierBuffer();\n  116:   subgroupMemoryBarrierImage();\n  117    subgroupElect();\n  118  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.vert:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  110  {\n  111    result[gl_VertexID] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  112:   subgroupBarrier();\n  113:   subgroupMemoryBarrier();\n  114:   subgroupMemoryBarrierBuffer();\n  115:   subgroupMemoryBarrierImage();\n  116    subgroupElect();\n  117  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroupBasic.comp:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, extension not enabled (basic)\n   14    gl_SubgroupID;                 // ERROR, extension not enabled (basic)\n   15:   subgroupMemoryBarrierShared(); // ERROR, extension not enabled (basic)\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  116      data.a[gl_NumSubgroups] = 1;\n  117      data.a[gl_SubgroupID] = (subgroupElect()) ? 1 : 0;\n  118:     subgroupBarrier();\n  119:     subgroupMemoryBarrier();\n  120:     subgroupMemoryBarrierBuffer();\n  121:     subgroupMemoryBarrierShared();\n  122:     subgroupMemoryBarrierImage();\n  123  }\n  124  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.mesh:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, extension not enabled (basic)\n   14    gl_SubgroupID;                 // ERROR, extension not enabled (basic)\n   15:   subgroupMemoryBarrierShared(); // ERROR, extension not enabled (basic)\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  104  #define MAX_PRIM 32\n  105  \n  106: #define BARRIER() \\\n  107:     memoryBarrierShared(); \\\n  108:     barrier();\n  109  \n  110  #extension GL_NV_mesh_shader : enable\n  ...\n  128      gl_MeshVerticesNV[iid].gl_CullDistance[2] = 4.0;\n  129  \n  130:     BARRIER();\n  131  \n  132      gl_MeshVerticesNV[iid+1].gl_Position = gl_MeshVerticesNV[iid].gl_Position;\n  ...\n  135      gl_MeshVerticesNV[iid+1].gl_CullDistance[2] = gl_MeshVerticesNV[iid].gl_CullDistance[2];\n  136  \n  137:     BARRIER();\n  138  \n  139      gl_MeshPrimitivesNV[iid].gl_PrimitiveID = 6;\n  ...\n  142      gl_MeshPrimitivesNV[iid].gl_ViewportMask[0] = 9;\n  143  \n  144:     BARRIER();\n  145  \n  146      gl_MeshPrimitivesNV[iid+1].gl_PrimitiveID = gl_MeshPrimitivesNV[iid].gl_PrimitiveID;\n  ...\n  149      gl_MeshPrimitivesNV[iid+1].gl_ViewportMask[0] = gl_MeshPrimitivesNV[iid].gl_ViewportMask[0];\n  150  \n  151:     BARRIER();\n  152  \n  153      // check bound limits\n  ...\n  161      gl_PrimitiveCountNV = MAX_PRIM * 3;\n  162  \n  163:     BARRIER();\n  164  }\n  165  \n  ...\n  169    gl_SubgroupSize;\n  170    gl_SubgroupInvocationID;\n  171:   subgroupBarrier();\n  172:   subgroupMemoryBarrier();\n  173:   subgroupMemoryBarrierBuffer();\n  174:   subgroupMemoryBarrierImage();\n  175    subgroupElect();\n  176    gl_NumSubgroups;                  // allowed in mesh\n  177    gl_SubgroupID;                    // allowed in mesh\n  178:   subgroupMemoryBarrierShared();    // allowed in mesh\n  179  }\n  180  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rahit:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  133    gl_SubgroupSize;\n  134    gl_SubgroupInvocationID;\n  135:   subgroupBarrier();\n  136:   subgroupMemoryBarrier();\n  137:   subgroupMemoryBarrierBuffer();\n  138:   subgroupMemoryBarrierImage();\n  139    subgroupElect();\n  140  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rcall:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  121    gl_SubgroupSize;\n  122    gl_SubgroupInvocationID;\n  123:   subgroupBarrier();\n  124:   subgroupMemoryBarrier();\n  125:   subgroupMemoryBarrierBuffer();\n  126:   subgroupMemoryBarrierImage();\n  127    subgroupElect();\n  128  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rchit:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  131    gl_SubgroupSize;\n  132    gl_SubgroupInvocationID;\n  133:   subgroupBarrier();\n  134:   subgroupMemoryBarrier();\n  135:   subgroupMemoryBarrierBuffer();\n  136:   subgroupMemoryBarrierImage();\n  137    subgroupElect();\n  138  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rgen:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  125    gl_SubgroupSize;\n  126    gl_SubgroupInvocationID;\n  127:   subgroupBarrier();\n  128:   subgroupMemoryBarrier();\n  129:   subgroupMemoryBarrierBuffer();\n  130:   subgroupMemoryBarrierImage();\n  131    subgroupElect();\n  132  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rint:\n    8    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    9    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n   10:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   13:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   14    subgroupElect();               // ERROR, extension not enabled (basic)\n   15    gl_NumSubgroups;               // ERROR, only defined in compute\n   16    gl_SubgroupID;                 // ERROR, only defined in compute\n   17:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   18  \n   19    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  131    gl_SubgroupSize;\n  132    gl_SubgroupInvocationID;\n  133:   subgroupBarrier();\n  134:   subgroupMemoryBarrier();\n  135:   subgroupMemoryBarrierBuffer();\n  136:   subgroupMemoryBarrierImage();\n  137    subgroupElect();\n  138  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rmiss:\n    8    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    9    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n   10:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   13:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   14    subgroupElect();               // ERROR, extension not enabled (basic)\n   15    gl_NumSubgroups;               // ERROR, only defined in compute\n   16    gl_SubgroupID;                 // ERROR, only defined in compute\n   17:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   18  \n   19    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  125    gl_SubgroupSize;\n  126    gl_SubgroupInvocationID;\n  127:   subgroupBarrier();\n  128:   subgroupMemoryBarrier();\n  129:   subgroupMemoryBarrierBuffer();\n  130:   subgroupMemoryBarrierImage();\n  131    subgroupElect();\n  132  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.task:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, extension not enabled (basic)\n   14    gl_SubgroupID;                 // ERROR, extension not enabled (basic)\n   15:   subgroupMemoryBarrierShared(); // ERROR, extension not enabled (basic)\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  103  #define MAX_VIEWS gl_MaxMeshViewCountNV\n  104  \n  105: #define BARRIER() \\\n  106:     memoryBarrierShared(); \\\n  107:     barrier();\n  108  \n  109  #extension GL_NV_mesh_shader : enable\n  ...\n  138      imageStore(uni_image, ivec2(iid), mem[gid+1]);\n  139  \n  140:     BARRIER();\n  141  \n  142      // 2. task memory stores\n  ...\n  148      mytask.viewID     = viewID;\n  149  \n  150:     BARRIER();\n  151  \n  152      // 3. set task count\n  ...\n  159    gl_SubgroupSize;\n  160    gl_SubgroupInvocationID;\n  161:   subgroupBarrier();\n  162:   subgroupMemoryBarrier();\n  163:   subgroupMemoryBarrierBuffer();\n  164:   subgroupMemoryBarrierImage();\n  165    subgroupElect();\n  166    gl_NumSubgroups;                  // allowed in task\n  167    gl_SubgroupID;                    // allowed in task\n  168:   subgroupMemoryBarrierShared();    // allowed in task\n  169  }\n  170  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.es320.subgroupBasic.comp:\n   16      data.a[gl_NumSubgroups] = 1;\n   17      data.a[gl_SubgroupID] = (subgroupElect()) ? 1 : 0;\n   18:     subgroupBarrier();\n   19:     subgroupMemoryBarrier();\n   20:     subgroupMemoryBarrierBuffer();\n   21:     subgroupMemoryBarrierShared();\n   22:     subgroupMemoryBarrierImage();\n   23  }\n   24  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.barriers.comp:\n    2  float ComputeShaderFunction()\n    3  {\n    4:     AllMemoryBarrier();\n    5:     AllMemoryBarrierWithGroupSync();\n    6:     DeviceMemoryBarrier();\n    7:     DeviceMemoryBarrierWithGroupSync();\n    8:     GroupMemoryBarrier();\n    9:     GroupMemoryBarrierWithGroupSync();\n   10  \n   11      return 0.0;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.negative.comp:\n    3      uint out_u1;\n    4  \n    5:     // AllMemoryBarrier();              // invalid in fragment stage  TODO: parser currently crashes on empty arg list\n    6:     // AllMemoryBarrierWithGroupSync(); // invalid in fragment stage  TODO: parser currently crashes on empty arg list\n    7      // asdouble(inF0, inF1);                     // expected error: only integer inputs\n    8      // CheckAccessFullyMapped(3.0);              // expected error: only valid on integers\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.negative.frag:\n    1  float PixelShaderFunctionS(float inF0, float inF1, float inF2, int inI0)\n    2  {\n    3:     // AllMemoryBarrier();              // TODO: expected error: invalid in fragment stage\n    4:     // AllMemoryBarrierWithGroupSync(); // TODO: expected error: invalid in fragment stage\n    5      asdouble(inF0, inF1);                     // expected error: only integer inputs\n    6      CheckAccessFullyMapped(3.0);              // expected error: only valid on integers\n    .\n    9      D3DCOLORtoUBYTE4(inF0);                   // expected error: only on float4 inputs\n   10      determinant(inF0);                        // expected error: only valid on mats\n   11:     // DeviceMemoryBarrierWithGroupSync();      // TODO: expected error: only valid in compute stage\n   12      f16tof32(inF0);                           // expected error: only integer inputs\n   13      firstbithigh(inF0);                       // expected error: only integer inputs\n   ..\n   19      // InterlockedOor(inI0, inI0, 3);            // expected error: last parameter is out TODO: accepted even though marked as out in proto generator\n   20      // InterlockedXor(inI0, inI0, 3);            // expected error: last parameter is out TODO: accepted even though marked as out in proto generator\n   21:     // GroupMemoryBarrier();               // TODO: expected error: invalid in fragment stage\n   22:     // GroupMemoryBarrierWithGroupSync();  // TODO: expected error: invalid in fragment stage\n   23      length(inF0);                             // expected error: invalid on scalars\n   24      msad4(inF0, float2(0), float4(0));        // expected error: only integer inputs\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.negative.vert:\n   16      uint out_u1;\n   17  \n   18:     // AllMemoryBarrier();                       // expected error: only valid in compute stage\n   19:     // AllMemoryBarrierWithGroupSync();          // expected error: only valid in compute stage\n   20      // asdouble(inF0, inF1);                     // expected error: only integer inputs\n   21      // CheckAccessFullyMapped(3.0);              // expected error: only valid on integers\n   ..\n   25      // cross(inF0, inF1);                        // expected error: only on float3 inputs\n   26      // D3DCOLORtoUBYTE4(inF0);                   // expected error: only on float4 inputs\n   27:     // DeviceMemoryBarrier();                    // expected error: only valid in pixel & compute stages\n   28:     // DeviceMemoryBarrierWithGroupSync();       // expected error: only valid in compute stage\n   29      // ddx(inF0);                                // expected error: only valid in pixel stage\n   30      // ddx_coarse(inF0);                         // expected error: only valid in pixel stage\n   ..\n   56      // InterlockedXor(gs_ua, gs_ub);             // expected error: only valid in pixel stage\n   57      // InterlockedXor(gs_ua, gs_ub, out_u1);     // expected error: only valid in pixel stage\n   58:     // GroupMemoryBarrier();                     // expected error: only valid in compute stage\n   59:     // GroupMemoryBarrierWithGroupSync();        // expected error: only valid in compute stage\n   60      // length(inF0);                             // expect error: invalid on scalars\n   61      // msad4(inF0, float2(0), float4(0));        // expected error: only integer inputs\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.310.comp:\n   29  void main()\n   30  {\n   31:     barrier();\n   32      outbname.f = s;\n   33      outbnamena.na = vec4(s);\n   ..\n   38      outnames.s = outbname.uns.length();\n   39      gl_DeviceIndex;\n   40:     memoryBarrierShared();\n   41:     groupMemoryBarrier();\n   42  }\n   43  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.320.meshShaderUserDefined.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   48      blk[iid*4].mArr[1][gid]  = vec3(17.0, 18.0, 19.0);\n   49  \n   50:     BARRIER();\n   51  \n   52      blk2[iid].f           = blk2[iid-1].f + 20.0;\n   ..\n   56      blk2[iid+2].m[3]      = blk2[iid+1].m[gid];\n   57  \n   58:     BARRIER();\n   59  }\n   60  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.400.tesc:\n    8  void main()\n    9  {\n   10:     barrier();\n   11  \n   12      int a = gl_MaxTessControlInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.atomic.comp:\n   19  void main()\n   20  {\n   21:     memoryBarrierAtomicCounter();\n   22      func(counter);\n   23      uint val = atomicCounter(countArr[2]);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.atomicCounter.comp:\n   19  void main()\n   20  {\n   21:     memoryBarrierAtomicCounter();\n   22      func(counter);\n   23      uint val = atomicCounter(countArr[2]);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.barrier.vert:\n    7  {\n    8      c0 = vec4(1.0);\n    9:     memoryBarrier();\n   10      c1 = vec4(1.0);\n   11:     memoryBarrierBuffer();\n   12      ++c0;\n   13:     memoryBarrierImage();\n   14      ++c0;\n   15  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.memoryScopeSemantics.comp:\n   40      origu = atomicCompSwap(atomu, 10u, value, gl_ScopeDevice, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire);\n   41      atomicAdd(bufferu.x, 1, gl_ScopeDevice, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsRelease);\n   42:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsRelease);\n   43:     controlBarrier(gl_ScopeWorkgroup, gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire);\n   44:     controlBarrier(gl_ScopeWorkgroup, gl_ScopeWorkgroup, 0, 0);\n   45  \n   46      uint y;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.memoryScopeSemantics_Error.comp:\n   18      atomicStore(atomu, value, gl_ScopeDevice, gl_StorageSemanticsBuffer, gl_StorageSemanticsBuffer);\n   19      origi = imageAtomicLoad(imagei, ivec2(0,0), gl_ScopeDevice, gl_SemanticsAcquire, gl_SemanticsAcquire);\n   20:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, 0);\n   21:     memoryBarrier(gl_ScopeWorkgroup, 0, gl_SemanticsRelease);\n   22:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsRelease | gl_SemanticsAcquire);\n   23      atomicAdd(atomu, value, gl_ScopeDevice, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsAcquire);\n   24      uint origu = atomicCompSwap(atomu, 10u, value, gl_ScopeDevice, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquireRelease);\n   25:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsMakeVisible);\n   26:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer, gl_SemanticsAcquire | gl_SemanticsMakeAvailable);\n   27:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsVolatile);\n   28      atomicCompSwap(bufferi.x, 10u, 10u, gl_ScopeDevice, gl_StorageSemanticsBuffer, gl_SemanticsAcquire | gl_SemanticsVolatile, gl_StorageSemanticsBuffer, gl_SemanticsAcquire);\n   29  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderBuiltins.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   28      gl_MeshVerticesNV[iid].gl_CullDistance[2] = 4.0;\n   29  \n   30:     BARRIER();\n   31  \n   32      gl_MeshVerticesNV[iid+1].gl_Position = gl_MeshVerticesNV[iid].gl_Position;\n   ..\n   35      gl_MeshVerticesNV[iid+1].gl_CullDistance[2] = gl_MeshVerticesNV[iid].gl_CullDistance[2];\n   36  \n   37:     BARRIER();\n   38  \n   39      gl_MeshPrimitivesNV[iid].gl_PrimitiveID = 6;\n   ..\n   42      gl_MeshPrimitivesNV[iid].gl_ViewportMask[0] = 9;\n   43  \n   44:     BARRIER();\n   45  \n   46      gl_MeshPrimitivesNV[iid+1].gl_PrimitiveID = gl_MeshPrimitivesNV[iid].gl_PrimitiveID;\n   ..\n   49      gl_MeshPrimitivesNV[iid+1].gl_ViewportMask[0] = gl_MeshPrimitivesNV[iid].gl_ViewportMask[0];\n   50  \n   51:     BARRIER();\n   52  \n   53      // check bound limits\n   ..\n   61      gl_PrimitiveCountNV = MAX_PRIM * 3;\n   62  \n   63:     BARRIER();\n   64  }\n   65  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderPerViewBuiltins.mesh:\n    5  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    6  \n    7: #define BARRIER() \\\n    8:     memoryBarrierShared(); \\\n    9:     barrier();\n   10  \n   11  #extension GL_NV_mesh_shader : enable\n   ..\n   30      gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0] = 8;\n   31  \n   32:     BARRIER();\n   33  \n   34      gl_MeshVerticesNV[iid+1].gl_PositionPerViewNV[viewID]          = gl_MeshVerticesNV[iid].gl_PositionPerViewNV[viewID];\n   ..\n   38      gl_MeshPrimitivesNV[iid+1].gl_ViewportMaskPerViewNV[viewID][0] = gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0];\n   39  \n   40:     BARRIER();\n   41  }\n   42  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderPerViewUserDefined.mesh:\n    5  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    6  \n    7: #define BARRIER() \\\n    8:     memoryBarrierShared(); \\\n    9:     barrier();\n   10  \n   11  #extension GL_NV_mesh_shader : enable\n   ..\n   57      b[iid].color4            = vec4(4.0);\n   58  \n   59:     BARRIER();\n   60  \n   61      b2[iid].color5[viewID]    = vec4(5.0);\n   ..\n   64      b2[iid].color8[viewID]    = vec4(8.0);\n   65  \n   66:     BARRIER();\n   67  }\n   68  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderRedeclBuiltins.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   44      gl_MeshVerticesNV[iid].gl_CullDistance[2] = 4.0;\n   45  \n   46:     BARRIER();\n   47  \n   48      gl_MeshVerticesNV[iid+1].gl_Position = gl_MeshVerticesNV[iid].gl_Position;\n   ..\n   51      gl_MeshVerticesNV[iid+1].gl_CullDistance[2] = gl_MeshVerticesNV[iid].gl_CullDistance[2];\n   52  \n   53:     BARRIER();\n   54  \n   55      gl_MeshPrimitivesNV[iid].gl_PrimitiveID = 6;\n   ..\n   58      gl_MeshPrimitivesNV[iid].gl_ViewportMask[0] = 9;\n   59  \n   60:     BARRIER();\n   61  \n   62      gl_MeshPrimitivesNV[iid+1].gl_PrimitiveID = gl_MeshPrimitivesNV[iid].gl_PrimitiveID;\n   ..\n   65      gl_MeshPrimitivesNV[iid+1].gl_ViewportMask[0] = gl_MeshPrimitivesNV[iid].gl_ViewportMask[0];\n   66  \n   67:     BARRIER();\n   68  \n   69      // check bound limits\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderRedeclPerViewBuiltins.mesh:\n    5  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    6  \n    7: #define BARRIER() \\\n    8:     memoryBarrierShared(); \\\n    9:     barrier();\n   10  \n   11  #extension GL_NV_mesh_shader : enable\n   ..\n   41      gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0] = 8;\n   42  \n   43:     BARRIER();\n   44  \n   45      gl_MeshVerticesNV[iid+1].gl_PositionPerViewNV[viewID]          = gl_MeshVerticesNV[iid].gl_PositionPerViewNV[viewID];\n   ..\n   49      gl_MeshPrimitivesNV[iid+1].gl_ViewportMaskPerViewNV[viewID][0] = gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0];\n   50  \n   51:     BARRIER();\n   52  }\n   53  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderSharedMem.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   36      imageStore(uni_image, ivec2(iid), mem[gid+1]);\n   37  \n   38:     BARRIER();\n   39  }\n   40  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderTaskMem.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderUserDefined.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   48      blk[iid*4].mArr[1][gid]  = vec3(17.0, 18.0, 19.0);\n   49  \n   50:     BARRIER();\n   51  \n   52      blk2[iid].f           = blk2[iid-1].f + 20.0;\n   ..\n   56      blk2[iid+2].m[3]      = blk2[iid+1].m[gid];\n   57  \n   58:     BARRIER();\n   59  }\n   60  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshTaskShader.task:\n    3  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    4  \n    5: #define BARRIER() \\\n    6:     memoryBarrierShared(); \\\n    7:     barrier();\n    8  \n    9  #extension GL_NV_mesh_shader : enable\n   ..\n   38      imageStore(uni_image, ivec2(iid), mem[gid+1]);\n   39  \n   40:     BARRIER();\n   41  \n   42      // 2. task memory stores\n   ..\n   48      mytask.viewID     = viewID;\n   49  \n   50:     BARRIER();\n   51  \n   52      // 3. set task count\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.subgroupBasic.comp:\n   16      data.a[gl_NumSubgroups] = 1;\n   17      data.a[gl_SubgroupID] = (subgroupElect()) ? 1 : 0;\n   18:     subgroupBarrier();\n   19:     subgroupMemoryBarrier();\n   20:     subgroupMemoryBarrierBuffer();\n   21:     subgroupMemoryBarrierShared();\n   22:     subgroupMemoryBarrierImage();\n   23  }\n   24  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/web.comp:\n   27  void main()\n   28  {\n   29:     barrier();\n   30  \n   31      bInst.data[bInst.size / 2] *= vec4(7.0);\n   32  \n   33:     memoryBarrier();\n   34:     groupMemoryBarrier();\n   35:     memoryBarrierShared();\n   36:     memoryBarrierBuffer();\n   37  \n   38      s[3] = vec4(0, arrX[0], arrY[0], arrZ[0]);\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/example_win32_directx12/main.cpp:\n  386          frameCtxt->CommandAllocator->Reset();\n  387  \n  388:         D3D12_RESOURCE_BARRIER barrier = {};\n  389:         barrier.Type                   = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n  390:         barrier.Flags                  = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  391:         barrier.Transition.pResource   = g_mainRenderTargetResource[backBufferIdx];\n  392:         barrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n  393:         barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_PRESENT;\n  394:         barrier.Transition.StateAfter  = D3D12_RESOURCE_STATE_RENDER_TARGET;\n  395  \n  396          g_pd3dCommandList->Reset(frameCtxt->CommandAllocator, NULL);\n  397:         g_pd3dCommandList->ResourceBarrier(1, &barrier);\n  398          g_pd3dCommandList->ClearRenderTargetView(g_mainRenderTargetDescriptor[backBufferIdx], (float*)&clear_color, 0, NULL);\n  399          g_pd3dCommandList->OMSetRenderTargets(1, &g_mainRenderTargetDescriptor[backBufferIdx], FALSE, NULL);\n  ...\n  401          ImGui::Render();\n  402          ImGui_ImplDX12_RenderDrawData(ImGui::GetDrawData(), g_pd3dCommandList);\n  403:         barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_RENDER_TARGET;\n  404:         barrier.Transition.StateAfter  = D3D12_RESOURCE_STATE_PRESENT;\n  405:         g_pd3dCommandList->ResourceBarrier(1, &barrier);\n  406          g_pd3dCommandList->Close();\n  407  \n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/imgui_impl_dx12.cpp:\n  298          dstLocation.SubresourceIndex = 0;\n  299  \n  300:         D3D12_RESOURCE_BARRIER barrier = {};\n  301:         barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n  302:         barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  303:         barrier.Transition.pResource   = pTexture;\n  304:         barrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n  305:         barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_COPY_DEST;\n  306:         barrier.Transition.StateAfter  = D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;\n  307  \n  308          ID3D12Fence* fence = NULL;\n  ...\n  331  \n  332          cmdList->CopyTextureRegion(&dstLocation, 0, 0, 0, &srcLocation, NULL);\n  333:         cmdList->ResourceBarrier(1, &barrier);\n  334  \n  335          hr = cmdList->Close();\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/imgui_impl_vulkan.cpp:\n  425      // Copy to Image:\n  426      {\n  427:         VkImageMemoryBarrier copy_barrier[1] = {};\n  428:         copy_barrier[0].sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n  429:         copy_barrier[0].dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n  430:         copy_barrier[0].oldLayout = VK_IMAGE_LAYOUT_UNDEFINED;\n  431:         copy_barrier[0].newLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;\n  432:         copy_barrier[0].srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  433:         copy_barrier[0].dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  434:         copy_barrier[0].image = g_FontImage;\n  435:         copy_barrier[0].subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  436:         copy_barrier[0].subresourceRange.levelCount = 1;\n  437:         copy_barrier[0].subresourceRange.layerCount = 1;\n  438:         vkCmdPipelineBarrier(command_buffer, VK_PIPELINE_STAGE_HOST_BIT, VK_PIPELINE_STAGE_TRANSFER_BIT, 0, 0, NULL, 0, NULL, 1, copy_barrier);\n  439  \n  440          VkBufferImageCopy region = {};\n  ...\n  446          vkCmdCopyBufferToImage(command_buffer, g_UploadBuffer, g_FontImage, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &region);\n  447  \n  448:         VkImageMemoryBarrier use_barrier[1] = {};\n  449:         use_barrier[0].sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n  450:         use_barrier[0].srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n  451:         use_barrier[0].dstAccessMask = VK_ACCESS_SHADER_READ_BIT;\n  452:         use_barrier[0].oldLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;\n  453:         use_barrier[0].newLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;\n  454:         use_barrier[0].srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  455:         use_barrier[0].dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  456:         use_barrier[0].image = g_FontImage;\n  457:         use_barrier[0].subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  458:         use_barrier[0].subresourceRange.levelCount = 1;\n  459:         use_barrier[0].subresourceRange.layerCount = 1;\n  460:         vkCmdPipelineBarrier(command_buffer, VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, 0, 0, NULL, 0, NULL, 1, use_barrier);\n  461      }\n  462  \n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/libs/gl3w/GL/gl3w.c:\n  672  PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC gl3wGetActiveAtomicCounterBufferiv;\n  673  PFNGLBINDIMAGETEXTUREPROC gl3wBindImageTexture;\n  674: PFNGLMEMORYBARRIERPROC gl3wMemoryBarrier;\n  675  PFNGLTEXSTORAGE1DPROC gl3wTexStorage1D;\n  676  PFNGLTEXSTORAGE2DPROC gl3wTexStorage2D;\n  ...\n 1279  \tgl3wGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) get_proc(\"glGetActiveAtomicCounterBufferiv\");\n 1280  \tgl3wBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) get_proc(\"glBindImageTexture\");\n 1281: \tgl3wMemoryBarrier = (PFNGLMEMORYBARRIERPROC) get_proc(\"glMemoryBarrier\");\n 1282  \tgl3wTexStorage1D = (PFNGLTEXSTORAGE1DPROC) get_proc(\"glTexStorage1D\");\n 1283  \tgl3wTexStorage2D = (PFNGLTEXSTORAGE2DPROC) get_proc(\"glTexStorage2D\");\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/libs/gl3w/GL/gl3w.h:\n  559  extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC gl3wGetActiveAtomicCounterBufferiv;\n  560  extern PFNGLBINDIMAGETEXTUREPROC gl3wBindImageTexture;\n  561: extern PFNGLMEMORYBARRIERPROC gl3wMemoryBarrier;\n  562  extern PFNGLTEXSTORAGE1DPROC gl3wTexStorage1D;\n  563  extern PFNGLTEXSTORAGE2DPROC gl3wTexStorage2D;\n  ...\n 1164  #define glGetActiveAtomicCounterBufferiv\t\tgl3wGetActiveAtomicCounterBufferiv\n 1165  #define glBindImageTexture\t\tgl3wBindImageTexture\n 1166: #define glMemoryBarrier\t\tgl3wMemoryBarrier\n 1167  #define glTexStorage1D\t\tgl3wTexStorage1D\n 1168  #define glTexStorage2D\t\tgl3wTexStorage2D\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/libs/gl3w/GL/glcorearb.h:\n 1177  /* reuse GL_UNSIGNED_INT_ATOMIC_COUNTER */\n 1178  /* Reuse tokens from ARB_shader_image_load_store */\n 1179: /* reuse GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT */\n 1180: /* reuse GL_ELEMENT_ARRAY_BARRIER_BIT */\n 1181: /* reuse GL_UNIFORM_BARRIER_BIT */\n 1182: /* reuse GL_TEXTURE_FETCH_BARRIER_BIT */\n 1183: /* reuse GL_SHADER_IMAGE_ACCESS_BARRIER_BIT */\n 1184: /* reuse GL_COMMAND_BARRIER_BIT */\n 1185: /* reuse GL_PIXEL_BUFFER_BARRIER_BIT */\n 1186: /* reuse GL_TEXTURE_UPDATE_BARRIER_BIT */\n 1187: /* reuse GL_BUFFER_UPDATE_BARRIER_BIT */\n 1188: /* reuse GL_FRAMEBUFFER_BARRIER_BIT */\n 1189: /* reuse GL_TRANSFORM_FEEDBACK_BARRIER_BIT */\n 1190: /* reuse GL_ATOMIC_COUNTER_BARRIER_BIT */\n 1191: /* reuse GL_ALL_BARRIER_BITS */\n 1192  /* reuse GL_MAX_IMAGE_UNITS */\n 1193  /* reuse GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS */\n ....\n 1504  /* reuse GL_MAX_SHADER_STORAGE_BLOCK_SIZE */\n 1505  /* reuse GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT */\n 1506: /* reuse GL_SHADER_STORAGE_BARRIER_BIT */\n 1507  /* reuse GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES */\n 1508  /* Reuse tokens from ARB_stencil_texturing */\n ....\n 2148  \n 2149  #ifndef GL_ARB_shader_image_load_store\n 2150: #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001\n 2151: #define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002\n 2152: #define GL_UNIFORM_BARRIER_BIT            0x00000004\n 2153: #define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008\n 2154: #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020\n 2155: #define GL_COMMAND_BARRIER_BIT            0x00000040\n 2156: #define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080\n 2157: #define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100\n 2158: #define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200\n 2159: #define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400\n 2160: #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800\n 2161: #define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000\n 2162: #define GL_ALL_BARRIER_BITS               0xFFFFFFFF\n 2163  #define GL_MAX_IMAGE_UNITS                0x8F38\n 2164  #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39\n ....\n 2580  #define GL_MAX_SHADER_STORAGE_BLOCK_SIZE  0x90DE\n 2581  #define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF\n 2582: #define GL_SHADER_STORAGE_BARRIER_BIT     0x2000\n 2583  #define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS\n 2584  /* reuse GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS */\n ....\n 4262  #ifdef GLCOREARB_PROTOTYPES\n 4263  GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 4264: GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);\n 4265  #endif /* GLCOREARB_PROTOTYPES */\n 4266  typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 4267: typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);\n 4268  #endif\n 4269  \n\n/home/max/dev/Falcor/third_party/slang/external/imgui/imgui_draw.cpp:\n 2872  }\n 2873  \n 2874: static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;\n 2875: static const unsigned char *stb__barrier_in_b;\n 2876  static unsigned char *stb__dout;\n 2877  static void stb__match(const unsigned char *data, unsigned int length)\n 2878  {\n 2879      // INVERSE of memmove... write each byte before copying the next...\n 2880:     IM_ASSERT(stb__dout + length <= stb__barrier_out_e);\n 2881:     if (stb__dout + length > stb__barrier_out_e) { stb__dout += length; return; }\n 2882:     if (data < stb__barrier_out_b) { stb__dout = stb__barrier_out_e+1; return; }\n 2883      while (length--) *stb__dout++ = *data++;\n 2884  }\n ....\n 2886  static void stb__lit(const unsigned char *data, unsigned int length)\n 2887  {\n 2888:     IM_ASSERT(stb__dout + length <= stb__barrier_out_e);\n 2889:     if (stb__dout + length > stb__barrier_out_e) { stb__dout += length; return; }\n 2890:     if (data < stb__barrier_in_b) { stb__dout = stb__barrier_out_e+1; return; }\n 2891      memcpy(stb__dout, data, length);\n 2892      stb__dout += length;\n ....\n 2951      if (stb__in4(4) != 0)          return 0; // error! stream is > 4GB\n 2952      olen = stb_decompress_length(i);\n 2953:     stb__barrier_in_b = i;\n 2954:     stb__barrier_out_e = output + olen;\n 2955:     stb__barrier_out_b = output;\n 2956      i += 16;\n 2957  \n\n/home/max/dev/Falcor/third_party/slang/external/slang-binaries/premake/premake-5.0.0-alpha13/bin/osx/premake5:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.core.grammar.json:\n 2015      },\n 2016      {\n 2017:       \"opname\" : \"OpControlBarrier\",\n 2018        \"opcode\" : 224,\n 2019        \"operands\" : [\n ....\n 2024      },\n 2025      {\n 2026:       \"opname\" : \"OpMemoryBarrier\",\n 2027        \"opcode\" : 225,\n 2028        \"operands\" : [\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.cs:\n  872              OpEmitStreamVertex = 220,\n  873              OpEndStreamPrimitive = 221,\n  874:             OpControlBarrier = 224,\n  875:             OpMemoryBarrier = 225,\n  876              OpAtomicLoad = 227,\n  877              OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.h:\n  871      SpvOpEmitStreamVertex = 220,\n  872      SpvOpEndStreamPrimitive = 221,\n  873:     SpvOpControlBarrier = 224,\n  874:     SpvOpMemoryBarrier = 225,\n  875      SpvOpAtomicLoad = 227,\n  876      SpvOpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.hpp:\n  867      OpEmitStreamVertex = 220,\n  868      OpEndStreamPrimitive = 221,\n  869:     OpControlBarrier = 224,\n  870:     OpMemoryBarrier = 225,\n  871      OpAtomicLoad = 227,\n  872      OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.hpp11:\n  867      OpEmitStreamVertex = 220,\n  868      OpEndStreamPrimitive = 221,\n  869:     OpControlBarrier = 224,\n  870:     OpMemoryBarrier = 225,\n  871      OpAtomicLoad = 227,\n  872      OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.json:\n  897                      \"OpEmitStreamVertex\": 220,\n  898                      \"OpEndStreamPrimitive\": 221,\n  899:                     \"OpControlBarrier\": 224,\n  900:                     \"OpMemoryBarrier\": 225,\n  901                      \"OpAtomicLoad\": 227,\n  902                      \"OpAtomicStore\": 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.lua:\n  828          OpEmitStreamVertex = 220,\n  829          OpEndStreamPrimitive = 221,\n  830:         OpControlBarrier = 224,\n  831:         OpMemoryBarrier = 225,\n  832          OpAtomicLoad = 227,\n  833          OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.py:\n  828          'OpEmitStreamVertex' : 220,\n  829          'OpEndStreamPrimitive' : 221,\n  830:         'OpControlBarrier' : 224,\n  831:         'OpMemoryBarrier' : 225,\n  832          'OpAtomicLoad' : 227,\n  833          'OpAtomicStore' : 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.core.grammar.json:\n 2015      },\n 2016      {\n 2017:       \"opname\" : \"OpControlBarrier\",\n 2018        \"opcode\" : 224,\n 2019        \"operands\" : [\n ....\n 2024      },\n 2025      {\n 2026:       \"opname\" : \"OpMemoryBarrier\",\n 2027        \"opcode\" : 225,\n 2028        \"operands\" : [\n ....\n 3081      },\n 3082      {\n 3083:       \"opname\" : \"OpTypeNamedBarrier\",\n 3084        \"opcode\" : 327,\n 3085        \"operands\" : [\n 3086          { \"kind\" : \"IdResult\" }\n 3087        ],\n 3088:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3089      },\n 3090      {\n 3091:       \"opname\" : \"OpNamedBarrierInitialize\",\n 3092        \"opcode\" : 328,\n 3093        \"operands\" : [\n ....\n 3096          { \"kind\" : \"IdRef\",        \"name\" : \"'Subgroup Count'\" }\n 3097        ],\n 3098:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3099      },\n 3100      {\n 3101:       \"opname\" : \"OpMemoryNamedBarrier\",\n 3102        \"opcode\" : 329,\n 3103        \"operands\" : [\n 3104:         { \"kind\" : \"IdRef\",             \"name\" : \"'Named Barrier'\" },\n 3105          { \"kind\" : \"IdScope\",           \"name\" : \"'Memory'\" },\n 3106          { \"kind\" : \"IdMemorySemantics\", \"name\" : \"'Semantics'\" }\n 3107        ],\n 3108:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3109      },\n 3110      {\n ....\n 5692          },\n 5693          {\n 5694:           \"enumerant\" : \"NamedBarrier\",\n 5695            \"value\" : 59,\n 5696            \"capabilities\" : [ \"Kernel\" ]\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.cs:\n  644              MultiViewport = 57,\n  645              SubgroupDispatch = 58,\n  646:             NamedBarrier = 59,\n  647              PipeStorage = 60,\n  648              SubgroupBallotKHR = 4423,\n  ...\n  884              OpEmitStreamVertex = 220,\n  885              OpEndStreamPrimitive = 221,\n  886:             OpControlBarrier = 224,\n  887:             OpMemoryBarrier = 225,\n  888              OpAtomicLoad = 227,\n  889              OpAtomicStore = 228,\n  ...\n  979              OpGetKernelLocalSizeForSubgroupCount = 325,\n  980              OpGetKernelMaxNumSubgroups = 326,\n  981:             OpTypeNamedBarrier = 327,\n  982:             OpNamedBarrierInitialize = 328,\n  983:             OpMemoryNamedBarrier = 329,\n  984              OpModuleProcessed = 330,\n  985              OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.h:\n  643      SpvCapabilityMultiViewport = 57,\n  644      SpvCapabilitySubgroupDispatch = 58,\n  645:     SpvCapabilityNamedBarrier = 59,\n  646      SpvCapabilityPipeStorage = 60,\n  647      SpvCapabilitySubgroupBallotKHR = 4423,\n  ...\n  883      SpvOpEmitStreamVertex = 220,\n  884      SpvOpEndStreamPrimitive = 221,\n  885:     SpvOpControlBarrier = 224,\n  886:     SpvOpMemoryBarrier = 225,\n  887      SpvOpAtomicLoad = 227,\n  888      SpvOpAtomicStore = 228,\n  ...\n  978      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n  979      SpvOpGetKernelMaxNumSubgroups = 326,\n  980:     SpvOpTypeNamedBarrier = 327,\n  981:     SpvOpNamedBarrierInitialize = 328,\n  982:     SpvOpMemoryNamedBarrier = 329,\n  983      SpvOpModuleProcessed = 330,\n  984      SpvOpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.hpp:\n  639      CapabilityMultiViewport = 57,\n  640      CapabilitySubgroupDispatch = 58,\n  641:     CapabilityNamedBarrier = 59,\n  642      CapabilityPipeStorage = 60,\n  643      CapabilitySubgroupBallotKHR = 4423,\n  ...\n  879      OpEmitStreamVertex = 220,\n  880      OpEndStreamPrimitive = 221,\n  881:     OpControlBarrier = 224,\n  882:     OpMemoryBarrier = 225,\n  883      OpAtomicLoad = 227,\n  884      OpAtomicStore = 228,\n  ...\n  974      OpGetKernelLocalSizeForSubgroupCount = 325,\n  975      OpGetKernelMaxNumSubgroups = 326,\n  976:     OpTypeNamedBarrier = 327,\n  977:     OpNamedBarrierInitialize = 328,\n  978:     OpMemoryNamedBarrier = 329,\n  979      OpModuleProcessed = 330,\n  980      OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.hpp11:\n  639      MultiViewport = 57,\n  640      SubgroupDispatch = 58,\n  641:     NamedBarrier = 59,\n  642      PipeStorage = 60,\n  643      SubgroupBallotKHR = 4423,\n  ...\n  879      OpEmitStreamVertex = 220,\n  880      OpEndStreamPrimitive = 221,\n  881:     OpControlBarrier = 224,\n  882:     OpMemoryBarrier = 225,\n  883      OpAtomicLoad = 227,\n  884      OpAtomicStore = 228,\n  ...\n  974      OpGetKernelLocalSizeForSubgroupCount = 325,\n  975      OpGetKernelMaxNumSubgroups = 326,\n  976:     OpTypeNamedBarrier = 327,\n  977:     OpNamedBarrierInitialize = 328,\n  978:     OpMemoryNamedBarrier = 329,\n  979      OpModuleProcessed = 330,\n  980      OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.json:\n  664                      \"MultiViewport\": 57,\n  665                      \"SubgroupDispatch\": 58,\n  666:                     \"NamedBarrier\": 59,\n  667                      \"PipeStorage\": 60,\n  668                      \"SubgroupBallotKHR\": 4423,\n  ...\n  907                      \"OpEmitStreamVertex\": 220,\n  908                      \"OpEndStreamPrimitive\": 221,\n  909:                     \"OpControlBarrier\": 224,\n  910:                     \"OpMemoryBarrier\": 225,\n  911                      \"OpAtomicLoad\": 227,\n  912                      \"OpAtomicStore\": 228,\n  ...\n 1002                      \"OpGetKernelLocalSizeForSubgroupCount\": 325,\n 1003                      \"OpGetKernelMaxNumSubgroups\": 326,\n 1004:                     \"OpTypeNamedBarrier\": 327,\n 1005:                     \"OpNamedBarrierInitialize\": 328,\n 1006:                     \"OpMemoryNamedBarrier\": 329,\n 1007                      \"OpModuleProcessed\": 330,\n 1008                      \"OpDecorateId\": 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.lua:\n  601          MultiViewport = 57,\n  602          SubgroupDispatch = 58,\n  603:         NamedBarrier = 59,\n  604          PipeStorage = 60,\n  605          SubgroupBallotKHR = 4423,\n  ...\n  840          OpEmitStreamVertex = 220,\n  841          OpEndStreamPrimitive = 221,\n  842:         OpControlBarrier = 224,\n  843:         OpMemoryBarrier = 225,\n  844          OpAtomicLoad = 227,\n  845          OpAtomicStore = 228,\n  ...\n  935          OpGetKernelLocalSizeForSubgroupCount = 325,\n  936          OpGetKernelMaxNumSubgroups = 326,\n  937:         OpTypeNamedBarrier = 327,\n  938:         OpNamedBarrierInitialize = 328,\n  939:         OpMemoryNamedBarrier = 329,\n  940          OpModuleProcessed = 330,\n  941          OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.py:\n  601          'MultiViewport' : 57,\n  602          'SubgroupDispatch' : 58,\n  603:         'NamedBarrier' : 59,\n  604          'PipeStorage' : 60,\n  605          'SubgroupBallotKHR' : 4423,\n  ...\n  840          'OpEmitStreamVertex' : 220,\n  841          'OpEndStreamPrimitive' : 221,\n  842:         'OpControlBarrier' : 224,\n  843:         'OpMemoryBarrier' : 225,\n  844          'OpAtomicLoad' : 227,\n  845          'OpAtomicStore' : 228,\n  ...\n  935          'OpGetKernelLocalSizeForSubgroupCount' : 325,\n  936          'OpGetKernelMaxNumSubgroups' : 326,\n  937:         'OpTypeNamedBarrier' : 327,\n  938:         'OpNamedBarrierInitialize' : 328,\n  939:         'OpMemoryNamedBarrier' : 329,\n  940          'OpModuleProcessed' : 330,\n  941          'OpDecorateId' : 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.core.grammar.json:\n 2015      },\n 2016      {\n 2017:       \"opname\" : \"OpControlBarrier\",\n 2018        \"opcode\" : 224,\n 2019        \"operands\" : [\n ....\n 2024      },\n 2025      {\n 2026:       \"opname\" : \"OpMemoryBarrier\",\n 2027        \"opcode\" : 225,\n 2028        \"operands\" : [\n ....\n 3081      },\n 3082      {\n 3083:       \"opname\" : \"OpTypeNamedBarrier\",\n 3084        \"opcode\" : 327,\n 3085        \"operands\" : [\n 3086          { \"kind\" : \"IdResult\" }\n 3087        ],\n 3088:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3089      },\n 3090      {\n 3091:       \"opname\" : \"OpNamedBarrierInitialize\",\n 3092        \"opcode\" : 328,\n 3093        \"operands\" : [\n ....\n 3096          { \"kind\" : \"IdRef\",        \"name\" : \"'Subgroup Count'\" }\n 3097        ],\n 3098:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3099      },\n 3100      {\n 3101:       \"opname\" : \"OpMemoryNamedBarrier\",\n 3102        \"opcode\" : 329,\n 3103        \"operands\" : [\n 3104:         { \"kind\" : \"IdRef\",             \"name\" : \"'Named Barrier'\" },\n 3105          { \"kind\" : \"IdScope\",           \"name\" : \"'Memory'\" },\n 3106          { \"kind\" : \"IdMemorySemantics\", \"name\" : \"'Semantics'\" }\n 3107        ],\n 3108:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3109      },\n 3110      {\n ....\n 5740          },\n 5741          {\n 5742:           \"enumerant\" : \"NamedBarrier\",\n 5743            \"value\" : 59,\n 5744            \"capabilities\" : [ \"Kernel\" ]\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.cs:\n  649              MultiViewport = 57,\n  650              SubgroupDispatch = 58,\n  651:             NamedBarrier = 59,\n  652              PipeStorage = 60,\n  653              SubgroupBallotKHR = 4423,\n  ...\n  889              OpEmitStreamVertex = 220,\n  890              OpEndStreamPrimitive = 221,\n  891:             OpControlBarrier = 224,\n  892:             OpMemoryBarrier = 225,\n  893              OpAtomicLoad = 227,\n  894              OpAtomicStore = 228,\n  ...\n  984              OpGetKernelLocalSizeForSubgroupCount = 325,\n  985              OpGetKernelMaxNumSubgroups = 326,\n  986:             OpTypeNamedBarrier = 327,\n  987:             OpNamedBarrierInitialize = 328,\n  988:             OpMemoryNamedBarrier = 329,\n  989              OpModuleProcessed = 330,\n  990              OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.h:\n  648      SpvCapabilityMultiViewport = 57,\n  649      SpvCapabilitySubgroupDispatch = 58,\n  650:     SpvCapabilityNamedBarrier = 59,\n  651      SpvCapabilityPipeStorage = 60,\n  652      SpvCapabilitySubgroupBallotKHR = 4423,\n  ...\n  888      SpvOpEmitStreamVertex = 220,\n  889      SpvOpEndStreamPrimitive = 221,\n  890:     SpvOpControlBarrier = 224,\n  891:     SpvOpMemoryBarrier = 225,\n  892      SpvOpAtomicLoad = 227,\n  893      SpvOpAtomicStore = 228,\n  ...\n  983      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n  984      SpvOpGetKernelMaxNumSubgroups = 326,\n  985:     SpvOpTypeNamedBarrier = 327,\n  986:     SpvOpNamedBarrierInitialize = 328,\n  987:     SpvOpMemoryNamedBarrier = 329,\n  988      SpvOpModuleProcessed = 330,\n  989      SpvOpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.hpp:\n  644      CapabilityMultiViewport = 57,\n  645      CapabilitySubgroupDispatch = 58,\n  646:     CapabilityNamedBarrier = 59,\n  647      CapabilityPipeStorage = 60,\n  648      CapabilitySubgroupBallotKHR = 4423,\n  ...\n  884      OpEmitStreamVertex = 220,\n  885      OpEndStreamPrimitive = 221,\n  886:     OpControlBarrier = 224,\n  887:     OpMemoryBarrier = 225,\n  888      OpAtomicLoad = 227,\n  889      OpAtomicStore = 228,\n  ...\n  979      OpGetKernelLocalSizeForSubgroupCount = 325,\n  980      OpGetKernelMaxNumSubgroups = 326,\n  981:     OpTypeNamedBarrier = 327,\n  982:     OpNamedBarrierInitialize = 328,\n  983:     OpMemoryNamedBarrier = 329,\n  984      OpModuleProcessed = 330,\n  985      OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.hpp11:\n  644      MultiViewport = 57,\n  645      SubgroupDispatch = 58,\n  646:     NamedBarrier = 59,\n  647      PipeStorage = 60,\n  648      SubgroupBallotKHR = 4423,\n  ...\n  884      OpEmitStreamVertex = 220,\n  885      OpEndStreamPrimitive = 221,\n  886:     OpControlBarrier = 224,\n  887:     OpMemoryBarrier = 225,\n  888      OpAtomicLoad = 227,\n  889      OpAtomicStore = 228,\n  ...\n  979      OpGetKernelLocalSizeForSubgroupCount = 325,\n  980      OpGetKernelMaxNumSubgroups = 326,\n  981:     OpTypeNamedBarrier = 327,\n  982:     OpNamedBarrierInitialize = 328,\n  983:     OpMemoryNamedBarrier = 329,\n  984      OpModuleProcessed = 330,\n  985      OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.json:\n  669                      \"MultiViewport\": 57,\n  670                      \"SubgroupDispatch\": 58,\n  671:                     \"NamedBarrier\": 59,\n  672                      \"PipeStorage\": 60,\n  673                      \"SubgroupBallotKHR\": 4423,\n  ...\n  912                      \"OpEmitStreamVertex\": 220,\n  913                      \"OpEndStreamPrimitive\": 221,\n  914:                     \"OpControlBarrier\": 224,\n  915:                     \"OpMemoryBarrier\": 225,\n  916                      \"OpAtomicLoad\": 227,\n  917                      \"OpAtomicStore\": 228,\n  ...\n 1007                      \"OpGetKernelLocalSizeForSubgroupCount\": 325,\n 1008                      \"OpGetKernelMaxNumSubgroups\": 326,\n 1009:                     \"OpTypeNamedBarrier\": 327,\n 1010:                     \"OpNamedBarrierInitialize\": 328,\n 1011:                     \"OpMemoryNamedBarrier\": 329,\n 1012                      \"OpModuleProcessed\": 330,\n 1013                      \"OpExecutionModeId\": 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.lua:\n  606          MultiViewport = 57,\n  607          SubgroupDispatch = 58,\n  608:         NamedBarrier = 59,\n  609          PipeStorage = 60,\n  610          SubgroupBallotKHR = 4423,\n  ...\n  845          OpEmitStreamVertex = 220,\n  846          OpEndStreamPrimitive = 221,\n  847:         OpControlBarrier = 224,\n  848:         OpMemoryBarrier = 225,\n  849          OpAtomicLoad = 227,\n  850          OpAtomicStore = 228,\n  ...\n  940          OpGetKernelLocalSizeForSubgroupCount = 325,\n  941          OpGetKernelMaxNumSubgroups = 326,\n  942:         OpTypeNamedBarrier = 327,\n  943:         OpNamedBarrierInitialize = 328,\n  944:         OpMemoryNamedBarrier = 329,\n  945          OpModuleProcessed = 330,\n  946          OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.py:\n  606          'MultiViewport' : 57,\n  607          'SubgroupDispatch' : 58,\n  608:         'NamedBarrier' : 59,\n  609          'PipeStorage' : 60,\n  610          'SubgroupBallotKHR' : 4423,\n  ...\n  845          'OpEmitStreamVertex' : 220,\n  846          'OpEndStreamPrimitive' : 221,\n  847:         'OpControlBarrier' : 224,\n  848:         'OpMemoryBarrier' : 225,\n  849          'OpAtomicLoad' : 227,\n  850          'OpAtomicStore' : 228,\n  ...\n  940          'OpGetKernelLocalSizeForSubgroupCount' : 325,\n  941          'OpGetKernelMaxNumSubgroups' : 326,\n  942:         'OpTypeNamedBarrier' : 327,\n  943:         'OpNamedBarrierInitialize' : 328,\n  944:         'OpMemoryNamedBarrier' : 329,\n  945          'OpModuleProcessed' : 330,\n  946          'OpExecutionModeId' : 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.core.grammar.json:\n  110      },\n  111      {\n  112:       \"tag\"     : \"Barrier\",\n  113:       \"heading\" : \"Barrier Instructions\"\n  114      },\n  115      {\n  ...\n 2337      },\n 2338      {\n 2339:       \"opname\" : \"OpControlBarrier\",\n 2340:       \"class\"  : \"Barrier\",\n 2341        \"opcode\" : 224,\n 2342        \"operands\" : [\n ....\n 2347      },\n 2348      {\n 2349:       \"opname\" : \"OpMemoryBarrier\",\n 2350:       \"class\"  : \"Barrier\",\n 2351        \"opcode\" : 225,\n 2352        \"operands\" : [\n ....\n 3509      },\n 3510      {\n 3511:       \"opname\" : \"OpTypeNamedBarrier\",\n 3512        \"class\"  : \"Type-Declaration\",\n 3513        \"opcode\" : 327,\n ....\n 3515          { \"kind\" : \"IdResult\" }\n 3516        ],\n 3517:       \"capabilities\" : [ \"NamedBarrier\" ],\n 3518        \"version\" : \"1.1\"\n 3519      },\n 3520      {\n 3521:       \"opname\" : \"OpNamedBarrierInitialize\",\n 3522:       \"class\"  : \"Barrier\",\n 3523        \"opcode\" : 328,\n 3524        \"operands\" : [\n ....\n 3527          { \"kind\" : \"IdRef\", \"name\" : \"'Subgroup Count'\" }\n 3528        ],\n 3529:       \"capabilities\" : [ \"NamedBarrier\" ],\n 3530        \"version\" : \"1.1\"\n 3531      },\n 3532      {\n 3533:       \"opname\" : \"OpMemoryNamedBarrier\",\n 3534:       \"class\"  : \"Barrier\",\n 3535        \"opcode\" : 329,\n 3536        \"operands\" : [\n 3537:         { \"kind\" : \"IdRef\", \"name\" : \"'Named Barrier'\" },\n 3538          { \"kind\" : \"IdScope\", \"name\" : \"'Memory'\" },\n 3539          { \"kind\" : \"IdMemorySemantics\", \"name\" : \"'Semantics'\" }\n 3540        ],\n 3541:       \"capabilities\" : [ \"NamedBarrier\" ],\n 3542        \"version\" : \"1.1\"\n 3543      },\n ....\n 10834          },\n 10835          {\n 10836:           \"enumerant\" : \"NamedBarrier\",\n 10837            \"value\" : 59,\n 10838            \"capabilities\" : [ \"Kernel\" ],\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.cs:\n  863              MultiViewport = 57,\n  864              SubgroupDispatch = 58,\n  865:             NamedBarrier = 59,\n  866              PipeStorage = 60,\n  867              GroupNonUniform = 61,\n  ...\n 1236              OpEmitStreamVertex = 220,\n 1237              OpEndStreamPrimitive = 221,\n 1238:             OpControlBarrier = 224,\n 1239:             OpMemoryBarrier = 225,\n 1240              OpAtomicLoad = 227,\n 1241              OpAtomicStore = 228,\n ....\n 1331              OpGetKernelLocalSizeForSubgroupCount = 325,\n 1332              OpGetKernelMaxNumSubgroups = 326,\n 1333:             OpTypeNamedBarrier = 327,\n 1334:             OpNamedBarrierInitialize = 328,\n 1335:             OpMemoryNamedBarrier = 329,\n 1336              OpModuleProcessed = 330,\n 1337              OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.h:\n  863      SpvCapabilityMultiViewport = 57,\n  864      SpvCapabilitySubgroupDispatch = 58,\n  865:     SpvCapabilityNamedBarrier = 59,\n  866      SpvCapabilityPipeStorage = 60,\n  867      SpvCapabilityGroupNonUniform = 61,\n  ...\n 1235      SpvOpEmitStreamVertex = 220,\n 1236      SpvOpEndStreamPrimitive = 221,\n 1237:     SpvOpControlBarrier = 224,\n 1238:     SpvOpMemoryBarrier = 225,\n 1239      SpvOpAtomicLoad = 227,\n 1240      SpvOpAtomicStore = 228,\n ....\n 1330      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n 1331      SpvOpGetKernelMaxNumSubgroups = 326,\n 1332:     SpvOpTypeNamedBarrier = 327,\n 1333:     SpvOpNamedBarrierInitialize = 328,\n 1334:     SpvOpMemoryNamedBarrier = 329,\n 1335      SpvOpModuleProcessed = 330,\n 1336      SpvOpExecutionModeId = 331,\n ....\n 1806      case SpvOpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1807      case SpvOpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1808:     case SpvOpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1809:     case SpvOpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1810      case SpvOpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1811      case SpvOpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1901      case SpvOpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1902      case SpvOpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1903:     case SpvOpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1904:     case SpvOpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1905:     case SpvOpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1906      case SpvOpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1907      case SpvOpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.hpp:\n  859      CapabilityMultiViewport = 57,\n  860      CapabilitySubgroupDispatch = 58,\n  861:     CapabilityNamedBarrier = 59,\n  862      CapabilityPipeStorage = 60,\n  863      CapabilityGroupNonUniform = 61,\n  ...\n 1231      OpEmitStreamVertex = 220,\n 1232      OpEndStreamPrimitive = 221,\n 1233:     OpControlBarrier = 224,\n 1234:     OpMemoryBarrier = 225,\n 1235      OpAtomicLoad = 227,\n 1236      OpAtomicStore = 228,\n ....\n 1326      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1327      OpGetKernelMaxNumSubgroups = 326,\n 1328:     OpTypeNamedBarrier = 327,\n 1329:     OpNamedBarrierInitialize = 328,\n 1330:     OpMemoryNamedBarrier = 329,\n 1331      OpModuleProcessed = 330,\n 1332      OpExecutionModeId = 331,\n ....\n 1802      case OpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1803      case OpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1804:     case OpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1805:     case OpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1806      case OpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1807      case OpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1897      case OpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1898      case OpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1899:     case OpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1900:     case OpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1901:     case OpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1902      case OpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1903      case OpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.hpp11:\n  859      MultiViewport = 57,\n  860      SubgroupDispatch = 58,\n  861:     NamedBarrier = 59,\n  862      PipeStorage = 60,\n  863      GroupNonUniform = 61,\n  ...\n 1231      OpEmitStreamVertex = 220,\n 1232      OpEndStreamPrimitive = 221,\n 1233:     OpControlBarrier = 224,\n 1234:     OpMemoryBarrier = 225,\n 1235      OpAtomicLoad = 227,\n 1236      OpAtomicStore = 228,\n ....\n 1326      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1327      OpGetKernelMaxNumSubgroups = 326,\n 1328:     OpTypeNamedBarrier = 327,\n 1329:     OpNamedBarrierInitialize = 328,\n 1330:     OpMemoryNamedBarrier = 329,\n 1331      OpModuleProcessed = 330,\n 1332      OpExecutionModeId = 331,\n ....\n 1802      case Op::OpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1803      case Op::OpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1804:     case Op::OpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1805:     case Op::OpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1806      case Op::OpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1807      case Op::OpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1897      case Op::OpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1898      case Op::OpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1899:     case Op::OpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1900:     case Op::OpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1901:     case Op::OpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1902      case Op::OpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1903      case Op::OpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.json:\n  849                      \"MultiViewport\": 57,\n  850                      \"SubgroupDispatch\": 58,\n  851:                     \"NamedBarrier\": 59,\n  852                      \"PipeStorage\": 60,\n  853                      \"GroupNonUniform\": 61,\n  ...\n 1222                      \"OpEmitStreamVertex\": 220,\n 1223                      \"OpEndStreamPrimitive\": 221,\n 1224:                     \"OpControlBarrier\": 224,\n 1225:                     \"OpMemoryBarrier\": 225,\n 1226                      \"OpAtomicLoad\": 227,\n 1227                      \"OpAtomicStore\": 228,\n ....\n 1317                      \"OpGetKernelLocalSizeForSubgroupCount\": 325,\n 1318                      \"OpGetKernelMaxNumSubgroups\": 326,\n 1319:                     \"OpTypeNamedBarrier\": 327,\n 1320:                     \"OpNamedBarrierInitialize\": 328,\n 1321:                     \"OpMemoryNamedBarrier\": 329,\n 1322                      \"OpModuleProcessed\": 330,\n 1323                      \"OpExecutionModeId\": 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.lua:\n  821          MultiViewport = 57,\n  822          SubgroupDispatch = 58,\n  823:         NamedBarrier = 59,\n  824          PipeStorage = 60,\n  825          GroupNonUniform = 61,\n  ...\n 1188          OpEmitStreamVertex = 220,\n 1189          OpEndStreamPrimitive = 221,\n 1190:         OpControlBarrier = 224,\n 1191:         OpMemoryBarrier = 225,\n 1192          OpAtomicLoad = 227,\n 1193          OpAtomicStore = 228,\n ....\n 1283          OpGetKernelLocalSizeForSubgroupCount = 325,\n 1284          OpGetKernelMaxNumSubgroups = 326,\n 1285:         OpTypeNamedBarrier = 327,\n 1286:         OpNamedBarrierInitialize = 328,\n 1287:         OpMemoryNamedBarrier = 329,\n 1288          OpModuleProcessed = 330,\n 1289          OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.py:\n  821          'MultiViewport' : 57,\n  822          'SubgroupDispatch' : 58,\n  823:         'NamedBarrier' : 59,\n  824          'PipeStorage' : 60,\n  825          'GroupNonUniform' : 61,\n  ...\n 1188          'OpEmitStreamVertex' : 220,\n 1189          'OpEndStreamPrimitive' : 221,\n 1190:         'OpControlBarrier' : 224,\n 1191:         'OpMemoryBarrier' : 225,\n 1192          'OpAtomicLoad' : 227,\n 1193          'OpAtomicStore' : 228,\n ....\n 1283          'OpGetKernelLocalSizeForSubgroupCount' : 325,\n 1284          'OpGetKernelMaxNumSubgroups' : 326,\n 1285:         'OpTypeNamedBarrier' : 327,\n 1286:         'OpNamedBarrierInitialize' : 328,\n 1287:         'OpMemoryNamedBarrier' : 329,\n 1288          'OpModuleProcessed' : 330,\n 1289          'OpExecutionModeId' : 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spv.d:\n  866      MultiViewport = 57,\n  867      SubgroupDispatch = 58,\n  868:     NamedBarrier = 59,\n  869      PipeStorage = 60,\n  870      GroupNonUniform = 61,\n  ...\n 1239      OpEmitStreamVertex = 220,\n 1240      OpEndStreamPrimitive = 221,\n 1241:     OpControlBarrier = 224,\n 1242:     OpMemoryBarrier = 225,\n 1243      OpAtomicLoad = 227,\n 1244      OpAtomicStore = 228,\n ....\n 1334      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1335      OpGetKernelMaxNumSubgroups = 326,\n 1336:     OpTypeNamedBarrier = 327,\n 1337:     OpNamedBarrierInitialize = 328,\n 1338:     OpMemoryNamedBarrier = 329,\n 1339      OpModuleProcessed = 330,\n 1340      OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools-generated/core.insts-unified1.inc:\n   32  static const SpvCapability pygen_variable_caps_Matrix[] = {SpvCapabilityMatrix};\n   33  static const SpvCapability pygen_variable_caps_MeshShadingNV[] = {SpvCapabilityMeshShadingNV};\n   34: static const SpvCapability pygen_variable_caps_NamedBarrier[] = {SpvCapabilityNamedBarrier};\n   35  static const SpvCapability pygen_variable_caps_PipeStorage[] = {SpvCapabilityPipeStorage};\n   36  static const SpvCapability pygen_variable_caps_Pipes[] = {SpvCapabilityPipes};\n   ..\n  282    {\"EmitStreamVertex\", SpvOpEmitStreamVertex, 1, pygen_variable_caps_GeometryStreams, 1, {SPV_OPERAND_TYPE_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  283    {\"EndStreamPrimitive\", SpvOpEndStreamPrimitive, 1, pygen_variable_caps_GeometryStreams, 1, {SPV_OPERAND_TYPE_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  284:   {\"ControlBarrier\", SpvOpControlBarrier, 0, nullptr, 3, {SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  285:   {\"MemoryBarrier\", SpvOpMemoryBarrier, 0, nullptr, 2, {SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  286    {\"AtomicLoad\", SpvOpAtomicLoad, 0, nullptr, 5, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  287    {\"AtomicStore\", SpvOpAtomicStore, 0, nullptr, 4, {SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID, SPV_OPERAND_TYPE_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  ...\n  377    {\"GetKernelLocalSizeForSubgroupCount\", SpvOpGetKernelLocalSizeForSubgroupCount, 1, pygen_variable_caps_SubgroupDispatch, 7, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  378    {\"GetKernelMaxNumSubgroups\", SpvOpGetKernelMaxNumSubgroups, 1, pygen_variable_caps_SubgroupDispatch, 6, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  379:   {\"TypeNamedBarrier\", SpvOpTypeNamedBarrier, 1, pygen_variable_caps_NamedBarrier, 1, {SPV_OPERAND_TYPE_RESULT_ID}, 1, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  380:   {\"NamedBarrierInitialize\", SpvOpNamedBarrierInitialize, 1, pygen_variable_caps_NamedBarrier, 3, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  381:   {\"MemoryNamedBarrier\", SpvOpMemoryNamedBarrier, 1, pygen_variable_caps_NamedBarrier, 3, {SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  382    {\"ModuleProcessed\", SpvOpModuleProcessed, 0, nullptr, 1, {SPV_OPERAND_TYPE_LITERAL_STRING}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  383    {\"ExecutionModeId\", SpvOpExecutionModeId, 0, nullptr, 2, {SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_EXECUTION_MODE}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,2), 0xffffffffu},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools-generated/enum_string_mapping.inc:\n  275      case SpvCapabilitySubgroupDispatch:\n  276        return \"SubgroupDispatch\";\n  277:     case SpvCapabilityNamedBarrier:\n  278:       return \"NamedBarrier\";\n  279      case SpvCapabilityPipeStorage:\n  280        return \"PipeStorage\";\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools-generated/operand.kinds-unified1.inc:\n  851    {\"MultiViewport\", 57, 1, pygen_variable_caps_Geometry, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  852    {\"SubgroupDispatch\", 58, 1, pygen_variable_caps_DeviceEnqueue, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  853:   {\"NamedBarrier\", 59, 1, pygen_variable_caps_Kernel, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  854    {\"PipeStorage\", 60, 1, pygen_variable_caps_Pipes, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  855    {\"GroupNonUniform\", 61, 0, nullptr, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,3), 0xffffffffu},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/Android.mk:\n   42  \t\tsource/val/validate_arithmetics.cpp \\\n   43  \t\tsource/val/validate_atomics.cpp \\\n   44: \t\tsource/val/validate_barriers.cpp \\\n   45  \t\tsource/val/validate_bitwise.cpp \\\n   46  \t\tsource/val/validate_builtins.cpp \\\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/BUILD.gn:\n  445      \"source/val/validate_arithmetics.cpp\",\n  446      \"source/val/validate_atomics.cpp\",\n  447:     \"source/val/validate_barriers.cpp\",\n  448      \"source/val/validate_bitwise.cpp\",\n  449      \"source/val/validate_builtins.cpp\",\n  ...\n  876        \"test/text_start_new_inst_test.cpp\",\n  877        \"test/text_to_binary.annotation_test.cpp\",\n  878:       \"test/text_to_binary.barrier_test.cpp\",\n  879        \"test/text_to_binary.constant_test.cpp\",\n  880        \"test/text_to_binary.control_flow_test.cpp\",\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/CHANGES:\n  264     - For Vulkan, disallow structures containing opaque types (#2546)\n  265     - Validate storage class OpenCL environment rules for atomics (#2750)\n  266:    - Update OpControlBarriers rules for WebGPU (#2769)\n  267:    - Update OpMemoryBarriers rules for WebGPU (#2775)\n  268     - Update WebGPU validation rules of OpAtomic*s (#2777)\n  269     Fixes:\n  ...\n  643     - Check Vulkan built-in variables\n  644     - Check Vulkan-specific atomic result type rule.\n  645:    - Relax control barrier check for SPIR-V 1.3.  Fixes #1427\n  646     - Check OpPhi.\n  647     - Check OpMemoryModel.\n  ...\n  659       #1469: Vulkan: Permit Subgroup memory scope for Vulkan 1.1.\n  660       #1472: Per-vertex variable validation fixes.\n  661:      #1483: Valdiate barrier execution scopes for Vulkan 1.1.\n  662   - Fixes:\n  663     #898: Linker properly removes FuncParamAttr from imported symbols.\n  ...\n  706     - CCP can now fold floating point arithmetic. #1311\n  707   - Validator:\n  708:    - Validate barrier instructions.\n  709     - Check Vulkan-specific rules for atomics.\n  710     - Check Vulkan prohibition of Location or Component decorations on BuiltIn variables.\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/include/spirv-tools/optimizer.hpp:\n  803  // Create a pass to upgrade to the VulkanKHR memory model.\n  804  // This pass upgrades the Logical GLSL450 memory model to Logical VulkanKHR.\n  805: // Additionally, it modifies memory, image, atomic and barrier operations to\n  806  // conform to that model's requirements.\n  807  Optimizer::PassToken CreateUpgradeMemoryModelPass();\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/CMakeLists.txt:\n  286    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_arithmetics.cpp\n  287    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_atomics.cpp\n  288:   ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_barriers.cpp\n  289    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_bitwise.cpp\n  290    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_builtins.cpp\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/fuzzer_pass_replace_loads_stores_with_copy_memories.cpp:\n   39    // OpStore within the same block. Potential instructions OpLoad to be matched\n   40    // are stored in a hash map. If we encounter instructions that write to memory\n   41:   // or instructions of memory barriers that could operate on variables within\n   42    // unsafe storage classes we need to erase the hash map to avoid unsafe\n   43    // operations.\n   ..\n   69            current_op_loads.clear();\n   70          } else if (TransformationReplaceLoadStoreWithCopyMemory::\n   71:                        IsMemoryBarrierOpCode(instruction.opcode())) {\n   72            for (auto it = current_op_loads.begin();\n   73                 it != current_op_loads.end();) {\n   ..\n   80                      GetIRContext(), source_id->type_id());\n   81              if (!TransformationReplaceLoadStoreWithCopyMemory::\n   82:                     IsStorageClassSafeAcrossMemoryBarriers(storage_class)) {\n   83                it = current_op_loads.erase(it);\n   84              } else {\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/protobufs/spirvfuzz_protobufs.h:\n   16  #define SOURCE_FUZZ_SPIRVFUZZ_PROTOBUFS_H_\n   17  \n   18: // This header file serves to act as a barrier between the protobuf header\n   19  // files and files that include them.  It uses compiler pragmas to disable\n   20  // diagnostics, in order to ignore warnings generated during the processing\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/transformation_replace_load_store_with_copy_memory.cpp:\n   96      if (IsMemoryWritingOpCode(it->opcode())) {\n   97        return false;\n   98:     } else if (IsMemoryBarrierOpCode(it->opcode()) &&\n   99:                !IsStorageClassSafeAcrossMemoryBarriers(storage_class)) {\n  100        return false;\n  101      }\n  ...\n  157  }\n  158  \n  159: bool TransformationReplaceLoadStoreWithCopyMemory::IsMemoryBarrierOpCode(\n  160      SpvOp op_code) {\n  161    switch (op_code) {\n  162:     case SpvOpMemoryBarrier:\n  163:     case SpvOpMemoryNamedBarrier:\n  164        return true;\n  165      default:\n  ...\n  169  \n  170  bool TransformationReplaceLoadStoreWithCopyMemory::\n  171:     IsStorageClassSafeAcrossMemoryBarriers(SpvStorageClass storage_class) {\n  172    switch (storage_class) {\n  173      case SpvStorageClassUniformConstant:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/transformation_replace_load_store_with_copy_memory.h:\n   39    // - The OpStore must write the intermediate value loaded by the OpLoad.\n   40    // - The OpLoad and the OpStore must not have certain instruction in between\n   41:   //   (checked by IsMemoryWritingOpCode(), IsMemoryBarrierOpCode(),\n   42:   //   IsStorageClassSafeAcrossMemoryBarriers()).\n   43    bool IsApplicable(\n   44        opt::IRContext* ir_context,\n   ..\n   55    static bool IsMemoryWritingOpCode(SpvOp op_code);\n   56  \n   57:   // Checks if the instruction that has an |op_code| is a memory barrier that\n   58    // could interfere with the source operand of the OpLoad instruction\n   59:   static bool IsMemoryBarrierOpCode(SpvOp op_code);\n   60  \n   61    // Checks if the |storage_class| of the source operand of the OpLoad\n   62    // instruction implies that this variable cannot change (due to other threads)\n   63:   // across memory barriers.\n   64:   static bool IsStorageClassSafeAcrossMemoryBarriers(\n   65        SpvStorageClass storage_class);\n   66  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/name_mapper.cpp:\n  282        SaveName(result_id, \"PipeStorage\");\n  283        break;\n  284:     case SpvOpTypeNamedBarrier:\n  285:       SaveName(result_id, \"NamedBarrier\");\n  286        break;\n  287      case SpvOpTypeStruct:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opcode.cpp:\n  333      case SpvOpTypePipe:\n  334      case SpvOpTypePipeStorage:\n  335:     case SpvOpTypeNamedBarrier:\n  336      case SpvOpTypeAccelerationStructureNV:\n  337      case SpvOpTypeCooperativeMatrixNV:\n  ...\n  467      case SpvOpTypeForwardPointer:\n  468      case SpvOpTypePipeStorage:\n  469:     case SpvOpTypeNamedBarrier:\n  470        return true;\n  471      default:\n  ...\n  690  std::vector<uint32_t> spvOpcodeMemorySemanticsOperandIndices(SpvOp opcode) {\n  691    switch (opcode) {\n  692:     case SpvOpMemoryBarrier:\n  693        return {1};\n  694      case SpvOpAtomicStore:\n  695:     case SpvOpControlBarrier:\n  696      case SpvOpAtomicFlagClear:\n  697:     case SpvOpMemoryNamedBarrier:\n  698        return {2};\n  699      case SpvOpAtomicLoad:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/code_sink.cpp:\n  201    get_module()->ForEachInst([this, &has_sync](Instruction* inst) {\n  202      switch (inst->opcode()) {\n  203:       case SpvOpMemoryBarrier: {\n  204          uint32_t mem_semantics_id = inst->GetSingleWordInOperand(1);\n  205          if (IsSyncOnUniform(mem_semantics_id)) {\n  ...\n  208          break;\n  209        }\n  210:       case SpvOpControlBarrier:\n  211        case SpvOpAtomicLoad:\n  212        case SpvOpAtomicStore:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_fission.cpp:\n  299      }\n  300  \n  301:     // If we find any instruction which we can't move (such as a barrier),\n  302      // return false.\n  303      if (!MovableInstruction(*inst)) return false;\n  ...\n  311    // original and vice versa.\n  312    for (Instruction* inst : original_loop_instructions_) {\n  313:     // If we find any instruction which we can't move (such as a barrier),\n  314      // return false.\n  315      if (!MovableInstruction(*inst)) return false;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_fusion.cpp:\n  231  }  // namespace opt\n  232  \n  233: bool LoopFusion::ContainsBarriersOrFunctionCalls(Loop* loop) {\n  234    for (const auto& block : loop->GetBlocks()) {\n  235      for (const auto& inst : *containing_function_->FindBlock(block)) {\n  236        auto opcode = inst.opcode();\n  237:       if (opcode == SpvOpFunctionCall || opcode == SpvOpControlBarrier ||\n  238:           opcode == SpvOpMemoryBarrier || opcode == SpvOpTypeNamedBarrier ||\n  239:           opcode == SpvOpNamedBarrierInitialize ||\n  240:           opcode == SpvOpMemoryNamedBarrier) {\n  241          return true;\n  242        }\n  ...\n  392  \n  393    // Bail out if there are function calls as they could have side-effects that\n  394:   // cause dependencies or if there are any barriers.\n  395:   if (ContainsBarriersOrFunctionCalls(loop_0_) ||\n  396:       ContainsBarriersOrFunctionCalls(loop_1_)) {\n  397      return false;\n  398    }\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_fusion.h:\n   82    bool IsUsedInLoop(Instruction* instruction, Loop* loop);\n   83  \n   84:   // Returns |true| if |loop| has at least one barrier or function call.\n   85:   bool ContainsBarriersOrFunctionCalls(Loop* loop);\n   86  \n   87    // Get all instructions in the |loop| (except in the latch block) that have\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_unswitch_pass.cpp:\n   61    // Returns true if the loop can be unswitched.\n   62    // Can be unswitch if:\n   63:   //  - The loop has no instructions that prevents it (such as barrier);\n   64    //  - The loop has one conditional branch or switch that do not depends on the\n   65    //  loop;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/reflect.h:\n   45  inline bool IsTypeInst(SpvOp opcode) {\n   46    return (opcode >= SpvOpTypeVoid && opcode <= SpvOpTypeForwardPointer) ||\n   47:          opcode == SpvOpTypePipeStorage || opcode == SpvOpTypeNamedBarrier ||\n   48           opcode == SpvOpTypeAccelerationStructureNV ||\n   49           opcode == SpvOpTypeAccelerationStructureKHR ||\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/replace_invalid_opc.cpp:\n   88          if (model != SpvExecutionModelTessellationControl &&\n   89              model != SpvExecutionModelGLCompute) {\n   90:           if (inst->opcode() == SpvOpControlBarrier) {\n   91              assert(model != SpvExecutionModelKernel &&\n   92                     \"Expecting to be working on a shader module.\");\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/type_manager.cpp:\n  233      DefineParameterlessCase(Queue);\n  234      DefineParameterlessCase(PipeStorage);\n  235:     DefineParameterlessCase(NamedBarrier);\n  236      DefineParameterlessCase(AccelerationStructureNV);\n  237  #undef DefineParameterlessCase\n  ...\n  528      DefineNoSubtypeCase(Pipe);\n  529      DefineNoSubtypeCase(PipeStorage);\n  530:     DefineNoSubtypeCase(NamedBarrier);\n  531      DefineNoSubtypeCase(AccelerationStructureNV);\n  532  #undef DefineNoSubtypeCase\n  ...\n  851        type = new PipeStorage();\n  852        break;\n  853:     case SpvOpTypeNamedBarrier:\n  854:       type = new NamedBarrier();\n  855        break;\n  856      case SpvOpTypeAccelerationStructureNV:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/types.cpp:\n  126      DeclareKindCase(ForwardPointer);\n  127      DeclareKindCase(PipeStorage);\n  128:     DeclareKindCase(NamedBarrier);\n  129      DeclareKindCase(AccelerationStructureNV);\n  130      DeclareKindCase(CooperativeMatrixNV);\n  ...\n  172      DeclareKindCase(ForwardPointer);\n  173      DeclareKindCase(PipeStorage);\n  174:     DeclareKindCase(NamedBarrier);\n  175      DeclareKindCase(AccelerationStructureNV);\n  176      DeclareKindCase(CooperativeMatrixNV);\n  ...\n  223      DeclareKindCase(ForwardPointer);\n  224      DeclareKindCase(PipeStorage);\n  225:     DeclareKindCase(NamedBarrier);\n  226      DeclareKindCase(AccelerationStructureNV);\n  227      DeclareKindCase(CooperativeMatrixNV);\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/types.h:\n   57  class ForwardPointer;\n   58  class PipeStorage;\n   59: class NamedBarrier;\n   60  class AccelerationStructureNV;\n   61  class CooperativeMatrixNV;\n   ..\n   94      kForwardPointer,\n   95      kPipeStorage,\n   96:     kNamedBarrier,\n   97      kAccelerationStructureNV,\n   98      kCooperativeMatrixNV,\n   ..\n  199    DeclareCastMethod(ForwardPointer)\n  200    DeclareCastMethod(PipeStorage)\n  201:   DeclareCastMethod(NamedBarrier)\n  202    DeclareCastMethod(AccelerationStructureNV)\n  203    DeclareCastMethod(CooperativeMatrixNV)\n  ...\n  661  DefineParameterlessType(Queue, queue);\n  662  DefineParameterlessType(PipeStorage, pipe_storage);\n  663: DefineParameterlessType(NamedBarrier, named_barrier);\n  664  DefineParameterlessType(AccelerationStructureNV, accelerationStructureNV);\n  665  DefineParameterlessType(RayQueryProvisionalKHR, rayQueryProvisionalKHR);\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/upgrade_memory_model.cpp:\n   42    UpgradeInstructions();\n   43    CleanupDecorations();\n   44:   UpgradeBarriers();\n   45    UpgradeMemoryScope();\n   46  \n   ..\n  610  }\n  611  \n  612: void UpgradeMemoryModel::UpgradeBarriers() {\n  613:   std::vector<Instruction*> barriers;\n  614:   // Collects all the control barriers in |function|. Returns true if the\n  615    // function operates on the Output storage class.\n  616:   ProcessFunction CollectBarriers = [this, &barriers](Function* function) {\n  617      bool operates_on_output = false;\n  618      for (auto& block : *function) {\n  619:       block.ForEachInst([this, &barriers,\n  620                           &operates_on_output](Instruction* inst) {\n  621:         if (inst->opcode() == SpvOpControlBarrier) {\n  622:           barriers.push_back(inst);\n  623          } else if (!operates_on_output) {\n  624            // This instruction operates on output storage class if it is a\n  ...\n  651      if (e.GetSingleWordInOperand(0u) == SpvExecutionModelTessellationControl) {\n  652        roots.push(e.GetSingleWordInOperand(1u));\n  653:       if (context()->ProcessCallTreeFromRoots(CollectBarriers, &roots)) {\n  654:         for (auto barrier : barriers) {\n  655:           // Add OutputMemoryKHR to the semantics of the barriers.\n  656:           uint32_t semantics_id = barrier->GetSingleWordInOperand(2u);\n  657            Instruction* semantics_inst =\n  658                context()->get_def_use_mgr()->GetDef(semantics_id);\n  ...\n  664                    semantics_type, {static_cast<uint32_t>(semantics_value) |\n  665                                     SpvMemorySemanticsOutputMemoryKHRMask});\n  666:           barrier->SetInOperand(2u, {context()\n  667                                           ->get_constant_mgr()\n  668                                           ->GetDefiningInstruction(constant)\n  ...\n  670          }\n  671        }\n  672:       barriers.clear();\n  673      }\n  674  }\n  ...\n  679      // * Group operations can only be subgroup\n  680      // * Non-uniform can only be workgroup or subgroup\n  681:     // * Named barriers are not supported by Vulkan\n  682      // * Workgroup ops (e.g. async_copy) have at most workgroup scope.\n  683      if (spvOpcodeIsAtomicOp(inst->opcode())) {\n  ...\n  685          inst->SetInOperand(1, {GetScopeConstant(SpvScopeQueueFamilyKHR)});\n  686        }\n  687:     } else if (inst->opcode() == SpvOpControlBarrier) {\n  688        if (IsDeviceScope(inst->GetSingleWordInOperand(1))) {\n  689          inst->SetInOperand(1, {GetScopeConstant(SpvScopeQueueFamilyKHR)});\n  690        }\n  691:     } else if (inst->opcode() == SpvOpMemoryBarrier) {\n  692        if (IsDeviceScope(inst->GetSingleWordInOperand(0))) {\n  693          inst->SetInOperand(0, {GetScopeConstant(SpvScopeQueueFamilyKHR)});\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/upgrade_memory_model.h:\n   39  // This pass remove deprecated decorations (Volatile and Coherent) and replaces\n   40  // them with new flags on individual instructions. It adds the Output storage\n   41: // class semantic to control barriers in tessellation control shaders that have\n   42  // an access to Output memory.\n   43  class UpgradeMemoryModel : public Pass {\n   ..\n  119  \n  120    // For all tessellation control entry points, if there is an operation on\n  121:   // Output storage class, then all barriers are modified to include the\n  122    // OutputMemoryKHR semantic.\n  123:   void UpgradeBarriers();\n  124  \n  125    // If the Vulkan memory model is specified, device scope actually means\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate.cpp:\n  411      if (auto error = AtomicsPass(*vstate, &instruction)) return error;\n  412      if (auto error = PrimitivesPass(*vstate, &instruction)) return error;\n  413:     if (auto error = BarriersPass(*vstate, &instruction)) return error;\n  414      // Group\n  415      // Device-Side Enqueue\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate.h:\n  164  spv_result_t AtomicsPass(ValidationState_t& _, const Instruction* inst);\n  165  \n  166: /// Validates correctness of barrier instructions.\n  167: spv_result_t BarriersPass(ValidationState_t& _, const Instruction* inst);\n  168  \n  169  /// Validates correctness of literal numbers.\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_barriers.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Validates correctness of barrier SPIR-V instructions.\n   16  \n   17  #include <string>\n   ..\n   31  namespace val {\n   32  \n   33: // Validates correctness of barrier instructions.\n   34: spv_result_t BarriersPass(ValidationState_t& _, const Instruction* inst) {\n   35    const SpvOp opcode = inst->opcode();\n   36    const uint32_t result_type = inst->type_id();\n   37  \n   38    switch (opcode) {\n   39:     case SpvOpControlBarrier: {\n   40        if (_.version() < SPV_SPIRV_VERSION_WORD(1, 3)) {\n   41          _.function(inst->function()->id())\n   ..\n   49                      if (message) {\n   50                        *message =\n   51:                           \"OpControlBarrier requires one of the following \"\n   52                            \"Execution \"\n   53                            \"Models: TessellationControl, GLCompute or Kernel\";\n   ..\n   76      }\n   77  \n   78:     case SpvOpMemoryBarrier: {\n   79        const uint32_t memory_scope = inst->word(1);\n   80  \n   ..\n   89      }\n   90  \n   91:     case SpvOpNamedBarrierInitialize: {\n   92:       if (_.GetIdOpcode(result_type) != SpvOpTypeNamedBarrier) {\n   93          return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   94                 << spvOpcodeString(opcode)\n   95:                << \": expected Result Type to be OpTypeNamedBarrier\";\n   96        }\n   97  \n   ..\n  106      }\n  107  \n  108:     case SpvOpMemoryNamedBarrier: {\n  109:       const uint32_t named_barrier_type = _.GetOperandTypeId(inst, 0);\n  110:       if (_.GetIdOpcode(named_barrier_type) != SpvOpTypeNamedBarrier) {\n  111          return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  112                 << spvOpcodeString(opcode)\n  113:                << \": expected Named Barrier to be of type OpTypeNamedBarrier\";\n  114        }\n  115  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_memory_semantics.cpp:\n   60      uint32_t valid_bits;\n   61      switch (inst->opcode()) {\n   62:       case SpvOpControlBarrier:\n   63          if (!(value & SpvMemorySemanticsAcquireReleaseMask)) {\n   64            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   65                   << \"For WebGPU, AcquireRelease must be set for Memory \"\n   66:                     \"Semantics of OpControlBarrier.\";\n   67          }\n   68  \n   ..\n   70            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   71                   << \"For WebGPU, WorkgroupMemory must be set for Memory \"\n   72:                     \"Semantics of OpControlBarrier.\";\n   73          }\n   74  \n   ..\n   78            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   79                   << \"For WebGPU only WorkgroupMemory and AcquireRelease may be \"\n   80:                     \"set for Memory Semantics of OpControlBarrier.\";\n   81          }\n   82          break;\n   83:       case SpvOpMemoryBarrier:\n   84          if (!(value & SpvMemorySemanticsImageMemoryMask)) {\n   85            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   86                   << \"For WebGPU, ImageMemory must be set for Memory Semantics \"\n   87:                     \"of OpMemoryBarrier.\";\n   88          }\n   89          valid_bits = SpvMemorySemanticsImageMemoryMask;\n   ..\n   91            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   92                   << \"For WebGPU only ImageMemory may be set for Memory \"\n   93:                     \"Semantics of OpMemoryBarrier.\";\n   94          }\n   95          break;\n   ..\n  220                   SpvMemorySemanticsOutputMemoryKHRMask);\n  221  \n  222:     if (opcode == SpvOpMemoryBarrier && !num_memory_order_set_bits) {\n  223        return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  224               << spvOpcodeString(opcode)\n  ...\n  230      }\n  231  \n  232:     if (opcode == SpvOpMemoryBarrier && !includes_storage_class) {\n  233        return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  234               << spvOpcodeString(opcode)\n  ...\n  239  #if 0\n  240      // TODO(atgoo@github.com): this check fails Vulkan CTS, reenable once fixed.\n  241:     if (opcode == SpvOpControlBarrier && value && !includes_storage_class) {\n  242        return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  243               << spvOpcodeString(opcode)\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_non_uniform.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Validates correctness of barrier SPIR-V instructions.\n   16  \n   17  #include \"source/val/validate.h\"\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_scopes.cpp:\n  106      }\n  107  \n  108:     // If OpControlBarrier is used in fragment, vertex, tessellation evaluation,\n  109      // or geometry stages, the execution Scope must be Subgroup.\n  110:     if (opcode == SpvOpControlBarrier && value != SpvScopeSubgroup) {\n  111        _.function(inst->function()->id())\n  112            ->RegisterExecutionModelLimitation([](SpvExecutionModel model,\n  ...\n  118                if (message) {\n  119                  *message =\n  120:                     \"in Vulkan evironment, OpControlBarrier execution scope \"\n  121                      \"must be Subgroup for Fragment, Vertex, Geometry and \"\n  122                      \"TessellationEvaluation execution models\";\n  ...\n  264    if (spvIsWebGPUEnv(_.context()->target_env)) {\n  265      switch (inst->opcode()) {\n  266:       case SpvOpControlBarrier:\n  267          if (value != SpvScopeWorkgroup) {\n  268            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  269                   << spvOpcodeString(opcode)\n  270                   << \": in WebGPU environment Memory Scope is limited to \"\n  271:                  << \"Workgroup for OpControlBarrier\";\n  272          }\n  273          break;\n  274:       case SpvOpMemoryBarrier:\n  275          if (value != SpvScopeWorkgroup) {\n  276            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  277                   << spvOpcodeString(opcode)\n  278                   << \": in WebGPU environment Memory Scope is limited to \"\n  279:                  << \"Workgroup for OpMemoryBarrier\";\n  280          }\n  281          break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/binary_parse_test.cpp:\n  847          // initializer.\n  848          {\"%2 = OpVariable %1 CrossWorkgroup !0\", \"Id is 0\"},\n  849:         {\"OpControlBarrier !0 %1 %2\", \"scope ID is 0\"},\n  850:         {\"OpControlBarrier %1 !0 %2\", \"scope ID is 0\"},\n  851:         {\"OpControlBarrier %1 %2 !0\", \"memory semantics ID is 0\"},\n  852          {\"%import = OpExtInstImport \\\"GLSL.std.450\\\" \"\n  853           \"%result = OpExtInst %type %import !999999 %x\",\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/CMakeLists.txt:\n  131    text_start_new_inst_test.cpp\n  132    text_to_binary.annotation_test.cpp\n  133:   text_to_binary.barrier_test.cpp\n  134    text_to_binary.composite_test.cpp\n  135    text_to_binary.constant_test.cpp\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/enum_string_mapping_test.cpp:\n  163           {SpvCapabilityMultiViewport, \"MultiViewport\"},\n  164           {SpvCapabilitySubgroupDispatch, \"SubgroupDispatch\"},\n  165:          {SpvCapabilityNamedBarrier, \"NamedBarrier\"},\n  166           {SpvCapabilityPipeStorage, \"PipeStorage\"},\n  167           {SpvCapabilitySubgroupBallotKHR, \"SubgroupBallotKHR\"},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/link/type_match_test.cpp:\n   32  #define PartPipe(D, N) D(N) \" = OpTypePipe ReadWrite\"\n   33  #define PartPipeStorage(D, N) D(N) \" = OpTypePipeStorage\"\n   34: #define PartNamedBarrier(D, N) D(N) \" = OpTypeNamedBarrier\"\n   35  \n   36  // Compound types\n   ..\n   60      const std::string base =                                    \\\n   61          \"OpCapability Linkage\\n\"                                \\\n   62:         \"OpCapability NamedBarrier\\n\"                           \\\n   63          \"OpCapability PipeStorage\\n\"                            \\\n   64          \"OpCapability Pipes\\n\"                                  \\\n   ..\n   97  Match1(Pipe)\n   98  Match1(PipeStorage)\n   99: Match1(NamedBarrier)\n  100  \n  101  // Simpler (restricted) compound types\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/name_mapper_test.cpp:\n  204                               {\"%1 = OpTypePipe ReadWrite\", 1, \"PipeReadWrite\"},\n  205                               {\"%1 = OpTypePipeStorage\", 1, \"PipeStorage\"},\n  206:                              {\"%1 = OpTypeNamedBarrier\", 1, \"NamedBarrier\"},\n  207                           }));\n  208  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opcode_require_capabilities_test.cpp:\n   69          ExpectedOpCodeCapabilities{SpvOpEmitStreamVertex,\n   70                                     CapabilitySet{SpvCapabilityGeometryStreams}},\n   71:         ExpectedOpCodeCapabilities{SpvOpTypeNamedBarrier,\n   72:                                    CapabilitySet{SpvCapabilityNamedBarrier}},\n   73          ExpectedOpCodeCapabilities{\n   74              SpvOpGetKernelMaxNumSubgroups,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/operand-class-test-coverage.csv:\n   35  \"    OperandLoop,\",LoopMerge,,CombinedLoopControlMask,\"TEST_F(OpLoopMergeTest, WrongLoopControl)\"\n   36  \"    OperandFunction,\",Function,,AnySingleFunctionControlMask,\"TEST_F(OpFunctionControlTest, WrongFunctionControl)\"\n   37: \"    OperandMemorySemantics,\",OpMemoryBarrier,\"it's an ID, not in grammar\",OpMemoryBarrier*,not enum\n   38  \"    OperandMemoryAccess,\",UNUSED,\"should be on opstore, but hacked in opcode.cpp\",,not enum\n   39: \"    OperandScope,\",MemoryBarrier,\"it's an ID, not in grammar\",OpMemoryBarrier*,not enum\n   40  \"    OperandGroupOperation,\",GroupIAdd,,GroupOperationTest,\"TEST_F(GroupOperationTest, WrongGroupOperation)\"\n   41  \"    OperandKernelEnqueueFlags,\",OpEnqueueKernel,\"it's an ID, not in grammar\",should not have one,not enum\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/operand_capabilities_test.cpp:\n  744              ValuesIn(std::vector<EnumCapabilityCase>{\n  745                  CASE1(CAPABILITY, CapabilitySubgroupDispatch, DeviceEnqueue),\n  746:                 CASE1(CAPABILITY, CapabilityNamedBarrier, Kernel),\n  747                  CASE1(CAPABILITY, CapabilityPipeStorage, Pipes),\n  748              })));\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/aggressive_dead_code_elim_test.cpp:\n 6860  ; CHECK:      [[merge]] = OpLabel\n 6861  \n 6862:                OpControlBarrier %uint_2 %uint_2 %uint_264\n 6863           %85 = OpIEqual %bool %65 %uint_0\n 6864                 OpSelectionMerge %89 None\n ....\n 6869                 OpBranch %89\n 6870           %89 = OpLabel\n 6871:                OpControlBarrier %uint_2 %uint_2 %uint_264\n 6872           %91 = OpAccessChain %_ptr_Workgroup_uint %sharedHistogram %65\n 6873           %92 = OpLoad %uint %91\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/code_sink_test.cpp:\n  389           %14 = OpAccessChain %_ptr_Uniform_uint %11 %uint_0\n  390           %15 = OpLoad %uint %14\n  391:                OpMemoryBarrier %uint_4 %mem_semantics\n  392                 OpSelectionMerge %16 None\n  393                 OpBranchConditional %true %17 %20\n  ...\n  430           %14 = OpAccessChain %_ptr_Uniform_uint %11 %uint_0\n  431           %15 = OpLoad %uint %14\n  432:                OpMemoryBarrier %uint_4 %mem_semantics\n  433                 OpSelectionMerge %16 None\n  434                 OpBranchConditional %true %17 %20\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/instruction_test.cpp:\n  132      6};\n  133  \n  134: // The words for an OpControlBarrier instruction.\n  135: uint32_t kSampleControlBarrierInstructionWords[] = {\n  136:     (4 << 16) | uint32_t(SpvOpControlBarrier), 100, 101, 102};\n  137  \n  138: // The operands that would be parsed from kSampleControlBarrierInstructionWords.\n  139: spv_parsed_operand_t kSampleControlBarrierOperands[] = {\n  140      {1, 1, SPV_OPERAND_TYPE_SCOPE_ID, SPV_NUMBER_NONE, 0},  // Execution\n  141      {2, 1, SPV_OPERAND_TYPE_SCOPE_ID, SPV_NUMBER_NONE, 0},  // Memory\n  ...\n  144  };\n  145  \n  146: // A valid parse of kSampleControlBarrierInstructionWords\n  147: spv_parsed_instruction_t kSampleControlBarrierInstruction = {\n  148:     kSampleControlBarrierInstructionWords,\n  149      uint16_t(4),\n  150:     uint16_t(SpvOpControlBarrier),\n  151      SPV_EXT_INST_TYPE_NONE,\n  152      0,  // type id\n  153      0,  // result id\n  154:     kSampleControlBarrierOperands,\n  155      3};\n  156  \n  ...\n  254  TEST(InstructionTest, ForInIdNonstandardIdTypes) {\n  255    IRContext context(SPV_ENV_UNIVERSAL_1_2, nullptr);\n  256:   Instruction inst(&context, kSampleControlBarrierInstruction);\n  257  \n  258    std::vector<uint32_t> ids;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/loop_optimizations/fusion_illegal.cpp:\n 1187    int[10] b;\n 1188  \n 1189:   // Illegal, barrier.\n 1190    for (int i = 0; i < 10; i++) {\n 1191      a[i] = a[i] * 2;\n 1192:     memoryBarrier();\n 1193    }\n 1194    for (int j = 0; j < 10; j++) {\n ....\n 1198  \n 1199  */\n 1200: TEST_F(FusionIllegalTest, Barrier) {\n 1201    std::string text = R\"(\n 1202                 OpCapability Shader\n ....\n 1247           %30 = OpAccessChain %7 %23 %53\n 1248                 OpStore %30 %29\n 1249:                OpMemoryBarrier %31 %32\n 1250                 OpBranch %13\n 1251           %13 = OpLabel\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/loop_optimizations/loop_fission.cpp:\n 1886      for (int i = 0; i < 10; i++) {\n 1887        B[i] = A[i];\n 1888:       memoryBarrier();\n 1889        A[i] = B[i];\n 1890      }\n 1891  }\n 1892  \n 1893: This should not be split due to the memory barrier.\n 1894  */\n 1895: TEST_F(FissionClassTest, FissionBarrier) {\n 1896    // clang-format off\n 1897    // With LocalMultiStoreElimPass\n ....\n 1946  %35 = OpAccessChain %19 %5 %26\n 1947  OpStore %35 %34\n 1948: OpMemoryBarrier %20 %21\n 1949  %36 = OpAccessChain %19 %5 %26\n 1950  %37 = OpLoad %14 %36\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/module_test.cpp:\n   66    EXPECT_EQ(3000u,\n   67              BuildModule(\"%f = OpFunction %void None %fntype %a = OpLabel \"\n   68:                         \"OpMemoryBarrier !2999 %b\\n\")\n   69                  ->module()\n   70                  ->ComputeIdBound());\n   ..\n   72    EXPECT_EQ(4000u,\n   73              BuildModule(\"%f = OpFunction %void None %fntype %a = OpLabel \"\n   74:                         \"OpMemoryBarrier %b !3999\\n\")\n   75                  ->module()\n   76                  ->ComputeIdBound());\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/replace_invalid_opc_test.cpp:\n  383  }\n  384  \n  385: TEST_F(ReplaceInvalidOpcodeTest, BarrierDontReplace) {\n  386    const std::string text = R\"(\n  387              OpCapability Shader\n  ...\n  401      %main = OpFunction %void None %3\n  402         %5 = OpLabel\n  403:             OpControlBarrier %uint_2 %uint_2 %uint_264\n  404              OpReturn\n  405              OpFunctionEnd)\";\n  ...\n  410  }\n  411  \n  412: TEST_F(ReplaceInvalidOpcodeTest, BarrierReplace) {\n  413    const std::string text = R\"(\n  414: ; CHECK-NOT: OpControlBarrier\n  415              OpCapability Shader\n  416         %1 = OpExtInstImport \"GLSL.std.450\"\n  ...\n  429      %main = OpFunction %void None %3\n  430         %5 = OpLabel\n  431:             OpControlBarrier %uint_2 %uint_2 %uint_264\n  432              OpReturn\n  433              OpFunctionEnd)\";\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/strip_atomic_counter_memory_test.cpp:\n  111  }\n  112  \n  113: std::string GetOpControlBarrierInst(std::string val) {\n  114:   return \"OpControlBarrier %uint_1 %uint_1 %uint_\" + val;\n  115  }\n  116  \n  117: TEST_P(MemorySemanticsModified, OpControlBarrier) {\n  118    std::string input, expected;\n  119    std::tie(input, expected) =\n  120:       GetInputAndExpected(GetOpControlBarrierInst, GetParam());\n  121    SinglePassRunAndCheck<StripAtomicCounterMemoryPass>(input, expected,\n  122                                                        /* skip_nop = */ false);\n  123  }\n  124  \n  125: std::string GetOpMemoryBarrierInst(std::string val) {\n  126:   return \"OpMemoryBarrier %uint_1 %uint_\" + val;\n  127  }\n  128  \n  129: TEST_P(MemorySemanticsModified, OpMemoryBarrier) {\n  130    std::string input, expected;\n  131    std::tie(input, expected) =\n  132:       GetInputAndExpected(GetOpMemoryBarrierInst, GetParam());\n  133    SinglePassRunAndCheck<StripAtomicCounterMemoryPass>(input, expected,\n  134                                                        /* skip_nop = */ false);\n  ...\n  353  }\n  354  \n  355: std::string GetOpMemoryNamedBarrierInst(std::string val) {\n  356:   return \"OpMemoryNamedBarrier %4 %uint_1 %uint_\" + val;\n  357  }\n  358  \n  359: TEST_P(MemorySemanticsModified, OpMemoryNamedBarrier) {\n  360    std::string input, expected;\n  361    std::tie(input, expected) =\n  362:       GetInputAndExpected(GetOpMemoryNamedBarrierInst, GetParam());\n  363    SinglePassRunAndCheck<StripAtomicCounterMemoryPass>(input, expected,\n  364                                                        /* skip_nop = */ false);\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/type_manager_test.cpp:\n  157    types.emplace_back(new Queue());\n  158  \n  159:   // Pipe, Forward Pointer, PipeStorage, NamedBarrier, AccelerationStructureNV,\n  160    // CooperativeMatrixNV\n  161    types.emplace_back(new Pipe(SpvAccessQualifierReadWrite));\n  ...\n  165    types.emplace_back(new ForwardPointer(2, SpvStorageClassUniform));\n  166    types.emplace_back(new PipeStorage());\n  167:   types.emplace_back(new NamedBarrier());\n  168    types.emplace_back(new AccelerationStructureNV());\n  169    types.emplace_back(new CooperativeMatrixNV(f32, 24, 24, 24));\n  ...\n  203      %pipe    = OpTypePipe ReadOnly\n  204      %ps      = OpTypePipeStorage\n  205:     %nb      = OpTypeNamedBarrier\n  206      %rtacc   = OpTypeAccelerationStructureNV\n  207      ; Set up other kinds of OpTypeArray\n  ...\n  248        {27, \"pipe(0)\"},\n  249        {28, \"pipe_storage\"},\n  250:       {29, \"named_barrier\"},\n  251        {30, \"accelerationStructureNV\"},\n  252        {31, \"sint64\"},\n  ...\n 1063  ; CHECK: OpTypeForwardPointer [[uniform_ptr]] Uniform\n 1064  ; CHECK: OpTypePipeStorage\n 1065: ; CHECK: OpTypeNamedBarrier\n 1066  ; CHECK: OpTypeAccelerationStructureKHR\n 1067  ; CHECK: OpTypeCooperativeMatrixNV [[f32]] [[uint24]] [[uint24]] [[uint24]]\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/types_test.cpp:\n  109  TestMultipleInstancesOfTheSameType(ForwardPointer, 10, SpvStorageClassUniform)\n  110  TestMultipleInstancesOfTheSameType(PipeStorage)\n  111: TestMultipleInstancesOfTheSameType(NamedBarrier)\n  112  TestMultipleInstancesOfTheSameType(AccelerationStructureNV)\n  113  #undef TestMultipleInstanceOfTheSameType\n  ...\n  236    types.emplace_back(new Queue());\n  237  \n  238:   // Pipe, Forward Pointer, PipeStorage, NamedBarrier\n  239    types.emplace_back(new Pipe(SpvAccessQualifierReadWrite));\n  240    types.emplace_back(new Pipe(SpvAccessQualifierReadOnly));\n  ...\n  243    types.emplace_back(new ForwardPointer(2, SpvStorageClassUniform));\n  244    types.emplace_back(new PipeStorage());\n  245:   types.emplace_back(new NamedBarrier());\n  246  \n  247    return types;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/upgrade_memory_model_test.cpp:\n 1174  }\n 1175  \n 1176: TEST_F(UpgradeMemoryModelTest, TessellationControlBarrierNoChange) {\n 1177    const std::string text = R\"(\n 1178  ; CHECK: [[none:%\\w+]] = OpConstant {{%\\w+}} 0\n 1179  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1180: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[none]]\n 1181  OpCapability Tessellation\n 1182  OpMemoryModel Logical GLSL450\n ....\n 1189  %func = OpFunction %void None %func_ty\n 1190  %1 = OpLabel\n 1191: OpControlBarrier %workgroup %workgroup %none\n 1192  OpReturn\n 1193  OpFunctionEnd\n ....\n 1197  }\n 1198  \n 1199: TEST_F(UpgradeMemoryModelTest, TessellationControlBarrierAddOutput) {\n 1200    const std::string text = R\"(\n 1201  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1202  ; CHECK: [[output:%\\w+]] = OpConstant {{%\\w+}} 4096\n 1203: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[output]]\n 1204  OpCapability Tessellation\n 1205  OpMemoryModel Logical GLSL450\n ....\n 1215  %1 = OpLabel\n 1216  %ld = OpLoad %int %var\n 1217: OpControlBarrier %workgroup %workgroup %none\n 1218  OpStore %var %ld\n 1219  OpReturn\n ....\n 1224  }\n 1225  \n 1226: TEST_F(UpgradeMemoryModelTest, TessellationMemoryBarrierNoChange) {\n 1227    const std::string text = R\"(\n 1228  ; CHECK: [[none:%\\w+]] = OpConstant {{%\\w+}} 0\n 1229  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1230: ; CHECK: OpMemoryBarrier [[workgroup]] [[none]]\n 1231  OpCapability Tessellation\n 1232  OpMemoryModel Logical GLSL450\n ....\n 1242  %1 = OpLabel\n 1243  %ld = OpLoad %int %var\n 1244: OpMemoryBarrier %workgroup %none\n 1245  OpStore %var %ld\n 1246  OpReturn\n ....\n 1251  }\n 1252  \n 1253: TEST_F(UpgradeMemoryModelTest, TessellationControlBarrierAddOutputSubFunction) {\n 1254    const std::string text = R\"(\n 1255  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1256  ; CHECK: [[output:%\\w+]] = OpConstant {{%\\w+}} 4096\n 1257: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[output]]\n 1258  OpCapability Tessellation\n 1259  OpMemoryModel Logical GLSL450\n ....\n 1274  %2 = OpLabel\n 1275  %ld = OpLoad %int %var\n 1276: OpControlBarrier %workgroup %workgroup %none\n 1277  OpStore %var %ld\n 1278  OpReturn\n ....\n 1284  \n 1285  TEST_F(UpgradeMemoryModelTest,\n 1286:        TessellationControlBarrierAddOutputDifferentFunctions) {\n 1287    const std::string text = R\"(\n 1288  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1289  ; CHECK: [[output:%\\w+]] = OpConstant {{%\\w+}} 4096\n 1290: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[output]]\n 1291  OpCapability Tessellation\n 1292  OpMemoryModel Logical GLSL450\n ....\n 1304  %1 = OpLabel\n 1305  %call_ld = OpFunctionCall %int %ld_func\n 1306: %call_barrier = OpFunctionCall %void %barrier_func\n 1307  %call_st = OpFunctionCall %void %st_func %call_ld\n 1308  OpReturn\n ....\n 1313  OpReturnValue %ld\n 1314  OpFunctionEnd\n 1315: %barrier_func = OpFunction %void None %func_ty\n 1316  %3 = OpLabel\n 1317: OpControlBarrier %workgroup %workgroup %none\n 1318  OpReturn\n 1319  OpFunctionEnd\n ....\n 1329  }\n 1330  \n 1331: TEST_F(UpgradeMemoryModelTest, ChangeControlBarrierMemoryScope) {\n 1332    std::string text = R\"(\n 1333  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1334  ; CHECK: [[queuefamily:%\\w+]] = OpConstant {{%\\w+}} 5\n 1335: ; CHECK: OpControlBarrier [[workgroup]] [[queuefamily]]\n 1336  OpCapability Shader\n 1337  OpMemoryModel Logical GLSL450\n ....\n 1345  %func = OpFunction %void None %func_ty\n 1346  %1 = OpLabel\n 1347: OpControlBarrier %workgroup %device %none\n 1348  OpReturn\n 1349  OpFunctionEnd\n ....\n 1353  }\n 1354  \n 1355: TEST_F(UpgradeMemoryModelTest, ChangeMemoryBarrierMemoryScope) {\n 1356    std::string text = R\"(\n 1357  ; CHECK: [[queuefamily:%\\w+]] = OpConstant {{%\\w+}} 5\n 1358: ; CHECK: OpMemoryBarrier [[queuefamily]]\n 1359  OpCapability Shader\n 1360  OpMemoryModel Logical GLSL450\n ....\n 1367  %func = OpFunction %void None %func_ty\n 1368  %1 = OpLabel\n 1369: OpMemoryBarrier %device %none\n 1370  OpReturn\n 1371  OpFunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/text_to_binary.barrier_test.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Assembler tests for instructions in the \"Barrier Instructions\" section\n   16  // of the SPIR-V spec.\n   17  \n   ..\n   31  using ::testing::Eq;\n   32  \n   33: // Test OpMemoryBarrier\n   34  \n   35: using OpMemoryBarrier = spvtest::TextToBinaryTest;\n   36  \n   37: TEST_F(OpMemoryBarrier, Good) {\n   38:   const std::string input = \"OpMemoryBarrier %1 %2\\n\";\n   39    EXPECT_THAT(CompiledInstructions(input),\n   40:               Eq(MakeInstruction(SpvOpMemoryBarrier, {1, 2})));\n   41    EXPECT_THAT(EncodeAndDecodeSuccessfully(input), Eq(input));\n   42  }\n   43  \n   44: TEST_F(OpMemoryBarrier, BadMissingScopeId) {\n   45:   const std::string input = \"OpMemoryBarrier\\n\";\n   46    EXPECT_THAT(CompileFailure(input),\n   47                Eq(\"Expected operand, found end of stream.\"));\n   48  }\n   49  \n   50: TEST_F(OpMemoryBarrier, BadInvalidScopeId) {\n   51:   const std::string input = \"OpMemoryBarrier 99\\n\";\n   52    EXPECT_THAT(CompileFailure(input), Eq(\"Expected id to start with %.\"));\n   53  }\n   54  \n   55: TEST_F(OpMemoryBarrier, BadMissingMemorySemanticsId) {\n   56:   const std::string input = \"OpMemoryBarrier %scope\\n\";\n   57    EXPECT_THAT(CompileFailure(input),\n   58                Eq(\"Expected operand, found end of stream.\"));\n   59  }\n   60  \n   61: TEST_F(OpMemoryBarrier, BadInvalidMemorySemanticsId) {\n   62:   const std::string input = \"OpMemoryBarrier %scope 14\\n\";\n   63    EXPECT_THAT(CompileFailure(input), Eq(\"Expected id to start with %.\"));\n   64  }\n   65  \n   66: // TODO(dneto): OpControlBarrier\n   67  // TODO(dneto): OpGroupAsyncCopy\n   68  // TODO(dneto): OpGroupWaitEvents\n   ..\n   79  // TODO(dneto): OpGroupSMax\n   80  \n   81: using NamedMemoryBarrierTest = spvtest::TextToBinaryTest;\n   82  \n   83: // OpMemoryNamedBarrier is not in 1.0, but it is enabled by a capability.\n   84  // We should be able to assemble it.  Validation checks are in another test\n   85  // file.\n   86: TEST_F(NamedMemoryBarrierTest, OpcodeAssemblesInV10) {\n   87    EXPECT_THAT(\n   88:       CompiledInstructions(\"OpMemoryNamedBarrier %bar %scope %semantics\",\n   89                             SPV_ENV_UNIVERSAL_1_0),\n   90:       ElementsAre(spvOpcodeMake(4, SpvOpMemoryNamedBarrier), _, _, _));\n   91  }\n   92  \n   93: TEST_F(NamedMemoryBarrierTest, ArgumentCount) {\n   94:   EXPECT_THAT(CompileFailure(\"OpMemoryNamedBarrier\", SPV_ENV_UNIVERSAL_1_1),\n   95                Eq(\"Expected operand, found end of stream.\"));\n   96    EXPECT_THAT(\n   97:       CompileFailure(\"OpMemoryNamedBarrier %bar\", SPV_ENV_UNIVERSAL_1_1),\n   98        Eq(\"Expected operand, found end of stream.\"));\n   99    EXPECT_THAT(\n  100:       CompileFailure(\"OpMemoryNamedBarrier %bar %scope\", SPV_ENV_UNIVERSAL_1_1),\n  101        Eq(\"Expected operand, found end of stream.\"));\n  102    EXPECT_THAT(\n  103:       CompiledInstructions(\"OpMemoryNamedBarrier %bar %scope %semantics\",\n  104                             SPV_ENV_UNIVERSAL_1_1),\n  105:       ElementsAre(spvOpcodeMake(4, SpvOpMemoryNamedBarrier), _, _, _));\n  106    EXPECT_THAT(\n  107:       CompileFailure(\"OpMemoryNamedBarrier %bar %scope %semantics %extra\",\n  108                       SPV_ENV_UNIVERSAL_1_1),\n  109        Eq(\"Expected '=', found end of stream.\"));\n  110  }\n  111  \n  112: TEST_F(NamedMemoryBarrierTest, ArgumentTypes) {\n  113:   EXPECT_THAT(CompileFailure(\"OpMemoryNamedBarrier 123 %scope %semantics\",\n  114                               SPV_ENV_UNIVERSAL_1_1),\n  115                Eq(\"Expected id to start with %.\"));\n  116:   EXPECT_THAT(CompileFailure(\"OpMemoryNamedBarrier %bar %scope \\\"semantics\\\"\",\n  117                               SPV_ENV_UNIVERSAL_1_1),\n  118                Eq(\"Expected id to start with %.\"));\n  119  }\n  120  \n  121: using TypeNamedBarrierTest = spvtest::TextToBinaryTest;\n  122  \n  123: TEST_F(TypeNamedBarrierTest, OpcodeAssemblesInV10) {\n  124    EXPECT_THAT(\n  125:       CompiledInstructions(\"%t = OpTypeNamedBarrier\", SPV_ENV_UNIVERSAL_1_0),\n  126:       ElementsAre(spvOpcodeMake(2, SpvOpTypeNamedBarrier), _));\n  127  }\n  128  \n  129: TEST_F(TypeNamedBarrierTest, ArgumentCount) {\n  130:   EXPECT_THAT(CompileFailure(\"OpTypeNamedBarrier\", SPV_ENV_UNIVERSAL_1_1),\n  131                Eq(\"Expected <result-id> at the beginning of an instruction, \"\n  132:                  \"found 'OpTypeNamedBarrier'.\"));\n  133    EXPECT_THAT(\n  134:       CompiledInstructions(\"%t = OpTypeNamedBarrier\", SPV_ENV_UNIVERSAL_1_1),\n  135:       ElementsAre(spvOpcodeMake(2, SpvOpTypeNamedBarrier), _));\n  136    EXPECT_THAT(\n  137:       CompileFailure(\"%t = OpTypeNamedBarrier 1 2 3\", SPV_ENV_UNIVERSAL_1_1),\n  138        Eq(\"Expected <opcode> or <result-id> at the beginning of an instruction, \"\n  139           \"found '1'.\"));\n  140  }\n  141  \n  142: using NamedBarrierInitializeTest = spvtest::TextToBinaryTest;\n  143  \n  144: TEST_F(NamedBarrierInitializeTest, OpcodeAssemblesInV10) {\n  145    EXPECT_THAT(\n  146:       CompiledInstructions(\"%bar = OpNamedBarrierInitialize %type %count\",\n  147                             SPV_ENV_UNIVERSAL_1_0),\n  148:       ElementsAre(spvOpcodeMake(4, SpvOpNamedBarrierInitialize), _, _, _));\n  149  }\n  150  \n  151: TEST_F(NamedBarrierInitializeTest, ArgumentCount) {\n  152    EXPECT_THAT(\n  153:       CompileFailure(\"%bar = OpNamedBarrierInitialize\", SPV_ENV_UNIVERSAL_1_1),\n  154        Eq(\"Expected operand, found end of stream.\"));\n  155:   EXPECT_THAT(CompileFailure(\"%bar = OpNamedBarrierInitialize %ype\",\n  156                               SPV_ENV_UNIVERSAL_1_1),\n  157                Eq(\"Expected operand, found end of stream.\"));\n  158    EXPECT_THAT(\n  159:       CompiledInstructions(\"%bar = OpNamedBarrierInitialize %type %count\",\n  160                             SPV_ENV_UNIVERSAL_1_1),\n  161:       ElementsAre(spvOpcodeMake(4, SpvOpNamedBarrierInitialize), _, _, _));\n  162    EXPECT_THAT(\n  163:       CompileFailure(\"%bar = OpNamedBarrierInitialize %type %count \\\"extra\\\"\",\n  164                       SPV_ENV_UNIVERSAL_1_1),\n  165        Eq(\"Expected <opcode> or <result-id> at the beginning of an instruction, \"\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/text_to_binary.subgroup_dispatch_test.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Assembler tests for instructions in the \"Barrier Instructions\" section\n   16  // of the SPIR-V spec.\n   17  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/CMakeLists.txt:\n   26         val_arithmetics_test.cpp\n   27         val_atomics_test.cpp\n   28:        val_barriers_test.cpp\n   29         val_bitwise_test.cpp\n   30         val_builtins_test.cpp\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_barriers_test.cpp:\n   27  using ::testing::Not;\n   28  \n   29: using ValidateBarriers = spvtest::ValidateBase<bool>;\n   30  \n   31  std::string GenerateShaderCodeImpl(\n   ..\n  167  OpCapability Linkage\n  168  OpCapability Int64\n  169: OpCapability NamedBarrier\n  170  )\";\n  171  \n  ...\n  204  %acquire_release_workgroup = OpConstant %u32 264\n  205  \n  206: %named_barrier = OpTypeNamedBarrier\n  207  \n  208  %main = OpFunction %void None %func\n  ...\n  219  }\n  220  \n  221: TEST_F(ValidateBarriers, OpControlBarrierGLComputeSuccess) {\n  222    const std::string body = R\"(\n  223: OpControlBarrier %device %device %none\n  224: OpControlBarrier %workgroup %workgroup %acquire\n  225: OpControlBarrier %workgroup %device %release\n  226: OpControlBarrier %cross_device %cross_device %acquire_release\n  227: OpControlBarrier %cross_device %cross_device %sequentially_consistent\n  228: OpControlBarrier %cross_device %cross_device %acquire_release_uniform_workgroup\n  229  )\";\n  230  \n  ...\n  233  }\n  234  \n  235: TEST_F(ValidateBarriers, OpControlBarrierKernelSuccess) {\n  236    const std::string body = R\"(\n  237: OpControlBarrier %device %device %none\n  238: OpControlBarrier %workgroup %workgroup %acquire\n  239: OpControlBarrier %workgroup %device %release\n  240: OpControlBarrier %cross_device %cross_device %acquire_release\n  241: OpControlBarrier %cross_device %cross_device %sequentially_consistent\n  242: OpControlBarrier %cross_device %cross_device %acquire_release_workgroup\n  243  )\";\n  244  \n  ...\n  247  }\n  248  \n  249: TEST_F(ValidateBarriers, OpControlBarrierTesselationControlSuccess) {\n  250    const std::string body = R\"(\n  251: OpControlBarrier %device %device %none\n  252: OpControlBarrier %workgroup %workgroup %acquire\n  253: OpControlBarrier %workgroup %device %release\n  254: OpControlBarrier %cross_device %cross_device %acquire_release\n  255: OpControlBarrier %cross_device %cross_device %sequentially_consistent\n  256: OpControlBarrier %cross_device %cross_device %acquire_release_uniform_workgroup\n  257  )\";\n  258  \n  ...\n  262  }\n  263  \n  264: TEST_F(ValidateBarriers, OpControlBarrierVulkanSuccess) {\n  265    const std::string body = R\"(\n  266: OpControlBarrier %workgroup %device %none\n  267: OpControlBarrier %workgroup %workgroup %acquire_release_uniform_workgroup\n  268  )\";\n  269  \n  ...\n  272  }\n  273  \n  274: TEST_F(ValidateBarriers, OpControlBarrierWebGPUAcquireReleaseSuccess) {\n  275    const std::string body = R\"(\n  276: OpControlBarrier %workgroup %workgroup %acquire_release_workgroup\n  277  )\";\n  278  \n  ...\n  281  }\n  282  \n  283: TEST_F(ValidateBarriers, OpControlBarrierWebGPURelaxedFailure) {\n  284    const std::string body = R\"(\n  285: OpControlBarrier %workgroup %workgroup %workgroup\n  286  )\";\n  287  \n  ...\n  290    EXPECT_THAT(getDiagnosticString(),\n  291                HasSubstr(\"For WebGPU, AcquireRelease must be set for Memory \"\n  292:                         \"Semantics of OpControlBarrier\"));\n  293  }\n  294  \n  295: TEST_F(ValidateBarriers, OpControlBarrierWebGPUMissingWorkgroupFailure) {\n  296    const std::string body = R\"(\n  297: OpControlBarrier %workgroup %workgroup %acquire_release\n  298  )\";\n  299  \n  ...\n  305  }\n  306  \n  307: TEST_F(ValidateBarriers, OpControlBarrierWebGPUUniformFailure) {\n  308    const std::string body = R\"(\n  309: OpControlBarrier %workgroup %workgroup %acquire_release_uniform_workgroup\n  310  )\";\n  311  \n  ...\n  315        getDiagnosticString(),\n  316        HasSubstr(\"For WebGPU only WorkgroupMemory and AcquireRelease may be set \"\n  317:                 \"for Memory Semantics of OpControlBarrier.\"));\n  318  }\n  319  \n  320: TEST_F(ValidateBarriers, OpControlBarrierWebGPUReleaseFailure) {\n  321    const std::string body = R\"(\n  322: OpControlBarrier %workgroup %workgroup %release_uniform_workgroup\n  323  )\";\n  324  \n  ...\n  327    EXPECT_THAT(getDiagnosticString(),\n  328                HasSubstr(\"For WebGPU, AcquireRelease must be set for Memory \"\n  329:                         \"Semantics of OpControlBarrier\"));\n  330  }\n  331  \n  332: TEST_F(ValidateBarriers, OpControlBarrierExecutionModelFragmentSpirv12) {\n  333    const std::string body = R\"(\n  334: OpControlBarrier %device %device %none\n  335  )\";\n  336  \n  ...\n  340    EXPECT_THAT(\n  341        getDiagnosticString(),\n  342:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  343                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  344  }\n  345  \n  346: TEST_F(ValidateBarriers, OpControlBarrierExecutionModelFragmentSpirv13) {\n  347    const std::string body = R\"(\n  348: OpControlBarrier %device %device %none\n  349  )\";\n  350  \n  ...\n  354  }\n  355  \n  356: TEST_F(ValidateBarriers, OpControlBarrierFloatExecutionScope) {\n  357    const std::string body = R\"(\n  358: OpControlBarrier %f32_1 %device %none\n  359  )\";\n  360  \n  ...\n  362    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  363    EXPECT_THAT(getDiagnosticString(),\n  364:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  365  }\n  366  \n  367: TEST_F(ValidateBarriers, OpControlBarrierU64ExecutionScope) {\n  368    const std::string body = R\"(\n  369: OpControlBarrier %u64_1 %device %none\n  370  )\";\n  371  \n  ...\n  373    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  374    EXPECT_THAT(getDiagnosticString(),\n  375:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  376  }\n  377  \n  378: TEST_F(ValidateBarriers, OpControlBarrierFloatMemoryScope) {\n  379    const std::string body = R\"(\n  380: OpControlBarrier %device %f32_1 %none\n  381  )\";\n  382  \n  ...\n  384    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  385    EXPECT_THAT(getDiagnosticString(),\n  386:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  387  }\n  388  \n  389: TEST_F(ValidateBarriers, OpControlBarrierU64MemoryScope) {\n  390    const std::string body = R\"(\n  391: OpControlBarrier %device %u64_1 %none\n  392  )\";\n  393  \n  ...\n  395    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  396    EXPECT_THAT(getDiagnosticString(),\n  397:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  398  }\n  399  \n  400: TEST_F(ValidateBarriers, OpControlBarrierFloatMemorySemantics) {\n  401    const std::string body = R\"(\n  402: OpControlBarrier %device %device %f32_0\n  403  )\";\n  404  \n  ...\n  408        getDiagnosticString(),\n  409        HasSubstr(\n  410:           \"ControlBarrier: expected Memory Semantics to be a 32-bit int\"));\n  411  }\n  412  \n  413: TEST_F(ValidateBarriers, OpControlBarrierU64MemorySemantics) {\n  414    const std::string body = R\"(\n  415: OpControlBarrier %device %device %u64_0\n  416  )\";\n  417  \n  ...\n  421        getDiagnosticString(),\n  422        HasSubstr(\n  423:           \"ControlBarrier: expected Memory Semantics to be a 32-bit int\"));\n  424  }\n  425  \n  426: TEST_F(ValidateBarriers, OpControlBarrierVulkanExecutionScopeDevice) {\n  427    const std::string body = R\"(\n  428: OpControlBarrier %device %workgroup %none\n  429  )\";\n  430  \n  ...\n  432    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_0));\n  433    EXPECT_THAT(getDiagnosticString(),\n  434:               HasSubstr(\"ControlBarrier: in Vulkan environment Execution Scope \"\n  435                          \"is limited to Workgroup and Subgroup\"));\n  436  }\n  437  \n  438: TEST_F(ValidateBarriers, OpControlBarrierWebGPUExecutionScopeDeviceBad) {\n  439    const std::string body = R\"(\n  440: OpControlBarrier %device %workgroup %none\n  441  )\";\n  442  \n  ...\n  444    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_WEBGPU_0));\n  445    EXPECT_THAT(getDiagnosticString(),\n  446:               HasSubstr(\"ControlBarrier: in WebGPU environment Execution Scope \"\n  447                          \"is limited to Workgroup\"));\n  448  }\n  449  \n  450: TEST_F(ValidateBarriers, OpControlBarrierWebGPUExecutionScopeSubgroupBad) {\n  451    const std::string body = R\"(\n  452: OpControlBarrier %subgroup %workgroup %none\n  453  )\";\n  454  \n  ...\n  456    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_WEBGPU_0));\n  457    EXPECT_THAT(getDiagnosticString(),\n  458:               HasSubstr(\"ControlBarrier: in WebGPU environment Execution Scope \"\n  459                          \"is limited to Workgroup\"));\n  460  }\n  461  \n  462: TEST_F(ValidateBarriers,\n  463:        OpControlBarrierWebGPUExecutionScopeWorkgroupNonComputeBad) {\n  464    const std::string body = R\"(\n  465: OpControlBarrier %workgroup %workgroup %acquire_release_workgroup\n  466  )\";\n  467  \n  ...\n  474  }\n  475  \n  476: TEST_F(ValidateBarriers, OpControlBarrierVulkanMemoryScopeSubgroup) {\n  477    const std::string body = R\"(\n  478: OpControlBarrier %subgroup %subgroup %none\n  479  )\";\n  480  \n  ...\n  483    EXPECT_THAT(\n  484        getDiagnosticString(),\n  485:       HasSubstr(\"ControlBarrier: in Vulkan 1.0 environment Memory Scope is \"\n  486                  \"limited to Device, Workgroup and Invocation\"));\n  487  }\n  488  \n  489: TEST_F(ValidateBarriers, OpControlBarrierVulkan1p1MemoryScopeSubgroup) {\n  490    const std::string body = R\"(\n  491: OpControlBarrier %subgroup %subgroup %none\n  492  )\";\n  493  \n  ...\n  496  }\n  497  \n  498: TEST_F(ValidateBarriers, OpControlBarrierVulkan1p1MemoryScopeCrossDevice) {\n  499    const std::string body = R\"(\n  500: OpControlBarrier %subgroup %cross_device %none\n  501  )\";\n  502  \n  ...\n  504    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  505    EXPECT_THAT(getDiagnosticString(),\n  506:               HasSubstr(\"ControlBarrier: in Vulkan environment, Memory Scope \"\n  507                          \"cannot be CrossDevice\"));\n  508  }\n  509  \n  510: TEST_F(ValidateBarriers, OpControlBarrierWebGPUMemoryScopeNonWorkgroup) {\n  511    const std::string body = R\"(\n  512: OpControlBarrier %workgroup %subgroup %acquire_release_workgroup\n  513  )\";\n  514  \n  ...\n  516    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_WEBGPU_0));\n  517    EXPECT_THAT(getDiagnosticString(),\n  518:               HasSubstr(\"ControlBarrier: in WebGPU environment Memory Scope is \"\n  519:                         \"limited to Workgroup for OpControlBarrier\"));\n  520  }\n  521  \n  522: TEST_F(ValidateBarriers, OpControlBarrierAcquireAndRelease) {\n  523    const std::string body = R\"(\n  524: OpControlBarrier %device %device %acquire_and_release_uniform\n  525  )\";\n  526  \n  ...\n  528    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  529    EXPECT_THAT(getDiagnosticString(),\n  530:               HasSubstr(\"ControlBarrier: Memory Semantics can have at most one \"\n  531                          \"of the following bits set: Acquire, Release, \"\n  532                          \"AcquireRelease or SequentiallyConsistent\"));\n  ...\n  535  // TODO(atgoo@github.com): the corresponding check fails Vulkan CTS,\n  536  // reenable once fixed.\n  537: TEST_F(ValidateBarriers, DISABLED_OpControlBarrierVulkanSubgroupStorageClass) {\n  538    const std::string body = R\"(\n  539: OpControlBarrier %workgroup %device %acquire_release_subgroup\n  540  )\";\n  541  \n  ...\n  545        getDiagnosticString(),\n  546        HasSubstr(\n  547:           \"ControlBarrier: expected Memory Semantics to include a \"\n  548            \"Vulkan-supported storage class if Memory Semantics is not None\"));\n  549  }\n  550  \n  551: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionFragment1p1) {\n  552    const std::string body = R\"(\n  553: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  554  )\";\n  555  \n  ...\n  559  }\n  560  \n  561: TEST_F(ValidateBarriers, OpControlBarrierWorkgroupExecutionFragment1p1) {\n  562    const std::string body = R\"(\n  563: OpControlBarrier %workgroup %workgroup %acquire_release\n  564  )\";\n  565  \n  ...\n  568    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  569    EXPECT_THAT(getDiagnosticString(),\n  570:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  571                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  572                          \"execution models\"));\n  573  }\n  574  \n  575: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionFragment1p0) {\n  576    const std::string body = R\"(\n  577: OpControlBarrier %subgroup %workgroup %acquire_release\n  578  )\";\n  579  \n  ...\n  583    EXPECT_THAT(\n  584        getDiagnosticString(),\n  585:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  586                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  587  }\n  588  \n  589: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionVertex1p1) {\n  590    const std::string body = R\"(\n  591: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  592  )\";\n  593  \n  ...\n  597  }\n  598  \n  599: TEST_F(ValidateBarriers, OpControlBarrierWorkgroupExecutionVertex1p1) {\n  600    const std::string body = R\"(\n  601: OpControlBarrier %workgroup %workgroup %acquire_release\n  602  )\";\n  603  \n  ...\n  606    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  607    EXPECT_THAT(getDiagnosticString(),\n  608:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  609                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  610                          \"execution models\"));\n  611  }\n  612  \n  613: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionVertex1p0) {\n  614    const std::string body = R\"(\n  615: OpControlBarrier %subgroup %workgroup %acquire_release\n  616  )\";\n  617  \n  ...\n  621    EXPECT_THAT(\n  622        getDiagnosticString(),\n  623:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  624                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  625  }\n  626  \n  627: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionGeometry1p1) {\n  628    const std::string body = R\"(\n  629: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  630  )\";\n  631  \n  ...\n  636  }\n  637  \n  638: TEST_F(ValidateBarriers, OpControlBarrierWorkgroupExecutionGeometry1p1) {\n  639    const std::string body = R\"(\n  640: OpControlBarrier %workgroup %workgroup %acquire_release\n  641  )\";\n  642  \n  ...\n  646    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  647    EXPECT_THAT(getDiagnosticString(),\n  648:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  649                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  650                          \"execution models\"));\n  651  }\n  652  \n  653: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionGeometry1p0) {\n  654    const std::string body = R\"(\n  655: OpControlBarrier %subgroup %workgroup %acquire_release\n  656  )\";\n  657  \n  ...\n  662    EXPECT_THAT(\n  663        getDiagnosticString(),\n  664:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  665                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  666  }\n  667  \n  668: TEST_F(ValidateBarriers,\n  669:        OpControlBarrierSubgroupExecutionTessellationEvaluation1p1) {\n  670    const std::string body = R\"(\n  671: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  672  )\";\n  673  \n  ...\n  678  }\n  679  \n  680: TEST_F(ValidateBarriers,\n  681:        OpControlBarrierWorkgroupExecutionTessellationEvaluation1p1) {\n  682    const std::string body = R\"(\n  683: OpControlBarrier %workgroup %workgroup %acquire_release\n  684  )\";\n  685  \n  ...\n  689    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  690    EXPECT_THAT(getDiagnosticString(),\n  691:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  692                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  693                          \"execution models\"));\n  694  }\n  695  \n  696: TEST_F(ValidateBarriers,\n  697:        OpControlBarrierSubgroupExecutionTessellationEvaluation1p0) {\n  698    const std::string body = R\"(\n  699: OpControlBarrier %subgroup %workgroup %acquire_release\n  700  )\";\n  701  \n  ...\n  706    EXPECT_THAT(\n  707        getDiagnosticString(),\n  708:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  709                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  710  }\n  711  \n  712: TEST_F(ValidateBarriers, OpMemoryBarrierSuccess) {\n  713    const std::string body = R\"(\n  714: OpMemoryBarrier %cross_device %acquire_release_uniform_workgroup\n  715: OpMemoryBarrier %device %uniform\n  716  )\";\n  717  \n  ...\n  720  }\n  721  \n  722: TEST_F(ValidateBarriers, OpMemoryBarrierKernelSuccess) {\n  723    const std::string body = R\"(\n  724: OpMemoryBarrier %cross_device %acquire_release_workgroup\n  725: OpMemoryBarrier %device %none\n  726  )\";\n  727  \n  ...\n  730  }\n  731  \n  732: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanSuccess) {\n  733    const std::string body = R\"(\n  734: OpMemoryBarrier %workgroup %acquire_release_uniform_workgroup\n  735  )\";\n  736  \n  ...\n  739  }\n  740  \n  741: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUImageMemorySuccess) {\n  742    const std::string body = R\"(\n  743: OpMemoryBarrier %workgroup %image_memory\n  744  )\";\n  745  \n  ...\n  748  }\n  749  \n  750: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUDeviceFailure) {\n  751    const std::string body = R\"(\n  752: OpMemoryBarrier %subgroup %image_memory\n  753  )\";\n  754  \n  ...\n  757    EXPECT_THAT(getDiagnosticString(),\n  758                HasSubstr(\"in WebGPU environment Memory Scope is limited to \"\n  759:                         \"Workgroup for OpMemoryBarrier\"));\n  760  }\n  761  \n  762: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUAcquireReleaseFailure) {\n  763    const std::string body = R\"(\n  764: OpMemoryBarrier %workgroup %acquire_release_uniform_workgroup\n  765  )\";\n  766  \n  ...\n  769    EXPECT_THAT(getDiagnosticString(),\n  770                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  771:                         \"OpMemoryBarrier\"));\n  772  }\n  773  \n  774: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPURelaxedFailure) {\n  775    const std::string body = R\"(\n  776: OpMemoryBarrier %workgroup %uniform_workgroup\n  777  )\";\n  778  \n  ...\n  781    EXPECT_THAT(getDiagnosticString(),\n  782                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  783:                         \"OpMemoryBarrier\"));\n  784  }\n  785  \n  786: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUAcquireFailure) {\n  787    const std::string body = R\"(\n  788: OpMemoryBarrier %workgroup %acquire_uniform_workgroup\n  789  )\";\n  790  \n  ...\n  793    EXPECT_THAT(getDiagnosticString(),\n  794                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  795:                         \"OpMemoryBarrier\"));\n  796  }\n  797  \n  798: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUReleaseFailure) {\n  799    const std::string body = R\"(\n  800: OpMemoryBarrier %workgroup %release_uniform_workgroup\n  801  )\";\n  802  \n  ...\n  805    EXPECT_THAT(getDiagnosticString(),\n  806                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  807:                         \"OpMemoryBarrier\"));\n  808  }\n  809  \n  810: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUUniformFailure) {\n  811    const std::string body = R\"(\n  812: OpMemoryBarrier %workgroup %uniform_image_memory\n  813  )\";\n  814  \n  ...\n  817    EXPECT_THAT(getDiagnosticString(),\n  818                HasSubstr(\"only ImageMemory may be set for Memory Semantics of \"\n  819:                         \"OpMemoryBarrier\"));\n  820  }\n  821  \n  822: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUWorkgroupNonComputeFailure) {\n  823    const std::string body = R\"(\n  824: OpMemoryBarrier %workgroup %image_memory\n  825  )\";\n  826  \n  ...\n  833  }\n  834  \n  835: TEST_F(ValidateBarriers, OpMemoryBarrierFloatMemoryScope) {\n  836    const std::string body = R\"(\n  837: OpMemoryBarrier %f32_1 %acquire_release_uniform_workgroup\n  838  )\";\n  839  \n  ...\n  841    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  842    EXPECT_THAT(getDiagnosticString(),\n  843:               HasSubstr(\"MemoryBarrier: expected scope to be a 32-bit int\"));\n  844  }\n  845  \n  846: TEST_F(ValidateBarriers, OpMemoryBarrierU64MemoryScope) {\n  847    const std::string body = R\"(\n  848: OpMemoryBarrier %u64_1 %acquire_release_uniform_workgroup\n  849  )\";\n  850  \n  ...\n  852    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  853    EXPECT_THAT(getDiagnosticString(),\n  854:               HasSubstr(\"MemoryBarrier: expected scope to be a 32-bit int\"));\n  855  }\n  856  \n  857: TEST_F(ValidateBarriers, OpMemoryBarrierFloatMemorySemantics) {\n  858    const std::string body = R\"(\n  859: OpMemoryBarrier %device %f32_0\n  860  )\";\n  861  \n  ...\n  864    EXPECT_THAT(\n  865        getDiagnosticString(),\n  866:       HasSubstr(\"MemoryBarrier: expected Memory Semantics to be a 32-bit int\"));\n  867  }\n  868  \n  869: TEST_F(ValidateBarriers, OpMemoryBarrierU64MemorySemantics) {\n  870    const std::string body = R\"(\n  871: OpMemoryBarrier %device %u64_0\n  872  )\";\n  873  \n  ...\n  876    EXPECT_THAT(\n  877        getDiagnosticString(),\n  878:       HasSubstr(\"MemoryBarrier: expected Memory Semantics to be a 32-bit int\"));\n  879  }\n  880  \n  881: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanMemoryScopeSubgroup) {\n  882    const std::string body = R\"(\n  883: OpMemoryBarrier %subgroup %acquire_release_uniform_workgroup\n  884  )\";\n  885  \n  ...\n  888    EXPECT_THAT(\n  889        getDiagnosticString(),\n  890:       HasSubstr(\"MemoryBarrier: in Vulkan 1.0 environment Memory Scope is \"\n  891                  \"limited to Device, Workgroup and Invocation\"));\n  892  }\n  893  \n  894: TEST_F(ValidateBarriers, OpMemoryBarrierVulkan1p1MemoryScopeSubgroup) {\n  895    const std::string body = R\"(\n  896: OpMemoryBarrier %subgroup %acquire_release_uniform_workgroup\n  897  )\";\n  898  \n  ...\n  901  }\n  902  \n  903: TEST_F(ValidateBarriers, OpMemoryBarrierAcquireAndRelease) {\n  904    const std::string body = R\"(\n  905: OpMemoryBarrier %device %acquire_and_release_uniform\n  906  )\";\n  907  \n  ...\n  909    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  910    EXPECT_THAT(getDiagnosticString(),\n  911:               HasSubstr(\"MemoryBarrier: Memory Semantics can have at most one \"\n  912                          \"of the following bits set: Acquire, Release, \"\n  913                          \"AcquireRelease or SequentiallyConsistent\"));\n  914  }\n  915  \n  916: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanMemorySemanticsNone) {\n  917    const std::string body = R\"(\n  918: OpMemoryBarrier %device %none\n  919  )\";\n  920  \n  ...\n  923    EXPECT_THAT(\n  924        getDiagnosticString(),\n  925:       HasSubstr(\"MemoryBarrier: Vulkan specification requires Memory Semantics \"\n  926                  \"to have one of the following bits set: Acquire, Release, \"\n  927                  \"AcquireRelease or SequentiallyConsistent\"));\n  928  }\n  929  \n  930: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanMemorySemanticsAcquire) {\n  931    const std::string body = R\"(\n  932: OpMemoryBarrier %device %acquire\n  933  )\";\n  934  \n  ...\n  936    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_0));\n  937    EXPECT_THAT(getDiagnosticString(),\n  938:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n  939                          \"Vulkan-supported storage class\"));\n  940  }\n  941  \n  942: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanSubgroupStorageClass) {\n  943    const std::string body = R\"(\n  944: OpMemoryBarrier %device %acquire_release_subgroup\n  945  )\";\n  946  \n  ...\n  948    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_0));\n  949    EXPECT_THAT(getDiagnosticString(),\n  950:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n  951                          \"Vulkan-supported storage class\"));\n  952  }\n  953  \n  954: TEST_F(ValidateBarriers, OpNamedBarrierInitializeSuccess) {\n  955    const std::string body = R\"(\n  956: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n  957  )\";\n  958  \n  ...\n  961  }\n  962  \n  963: TEST_F(ValidateBarriers, OpNamedBarrierInitializeWrongResultType) {\n  964    const std::string body = R\"(\n  965: %barrier = OpNamedBarrierInitialize %u32 %u32_4\n  966  )\";\n  967  \n  ...\n  970              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  971    EXPECT_THAT(getDiagnosticString(),\n  972:               HasSubstr(\"NamedBarrierInitialize: expected Result Type to be \"\n  973:                         \"OpTypeNamedBarrier\"));\n  974  }\n  975  \n  976: TEST_F(ValidateBarriers, OpNamedBarrierInitializeFloatSubgroupCount) {\n  977    const std::string body = R\"(\n  978: %barrier = OpNamedBarrierInitialize %named_barrier %f32_4\n  979  )\";\n  980  \n  ...\n  983              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  984    EXPECT_THAT(getDiagnosticString(),\n  985:               HasSubstr(\"NamedBarrierInitialize: expected Subgroup Count to be \"\n  986                          \"a 32-bit int\"));\n  987  }\n  988  \n  989: TEST_F(ValidateBarriers, OpNamedBarrierInitializeU64SubgroupCount) {\n  990    const std::string body = R\"(\n  991: %barrier = OpNamedBarrierInitialize %named_barrier %u64_4\n  992  )\";\n  993  \n  ...\n  996              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  997    EXPECT_THAT(getDiagnosticString(),\n  998:               HasSubstr(\"NamedBarrierInitialize: expected Subgroup Count to be \"\n  999                          \"a 32-bit int\"));\n 1000  }\n 1001  \n 1002: TEST_F(ValidateBarriers, OpMemoryNamedBarrierSuccess) {\n 1003    const std::string body = R\"(\n 1004: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1005: OpMemoryNamedBarrier %barrier %workgroup %acquire_release_workgroup\n 1006  )\";\n 1007  \n ....\n 1010  }\n 1011  \n 1012: TEST_F(ValidateBarriers, OpMemoryNamedBarrierNotNamedBarrier) {\n 1013    const std::string body = R\"(\n 1014: OpMemoryNamedBarrier %u32_1 %workgroup %acquire_release_workgroup\n 1015  )\";\n 1016  \n ....\n 1019              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n 1020    EXPECT_THAT(getDiagnosticString(),\n 1021:               HasSubstr(\"MemoryNamedBarrier: expected Named Barrier to be of \"\n 1022:                         \"type OpTypeNamedBarrier\"));\n 1023  }\n 1024  \n 1025: TEST_F(ValidateBarriers, OpMemoryNamedBarrierFloatMemoryScope) {\n 1026    const std::string body = R\"(\n 1027: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1028: OpMemoryNamedBarrier %barrier %f32_1 %acquire_release_workgroup\n 1029  )\";\n 1030  \n ....\n 1034    EXPECT_THAT(\n 1035        getDiagnosticString(),\n 1036:       HasSubstr(\"MemoryNamedBarrier: expected scope to be a 32-bit int\"));\n 1037  }\n 1038  \n 1039: TEST_F(ValidateBarriers, OpMemoryNamedBarrierFloatMemorySemantics) {\n 1040    const std::string body = R\"(\n 1041: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1042: OpMemoryNamedBarrier %barrier %workgroup %f32_0\n 1043  )\";\n 1044  \n ....\n 1049        getDiagnosticString(),\n 1050        HasSubstr(\n 1051:           \"MemoryNamedBarrier: expected Memory Semantics to be a 32-bit int\"));\n 1052  }\n 1053  \n 1054: TEST_F(ValidateBarriers, OpMemoryNamedBarrierAcquireAndRelease) {\n 1055    const std::string body = R\"(\n 1056: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1057: OpMemoryNamedBarrier %barrier %workgroup %acquire_and_release\n 1058  )\";\n 1059  \n ....\n 1062              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n 1063    EXPECT_THAT(getDiagnosticString(),\n 1064:               HasSubstr(\"MemoryNamedBarrier: Memory Semantics can have at most \"\n 1065                          \"one of the following bits set: Acquire, Release, \"\n 1066                          \"AcquireRelease or SequentiallyConsistent\"));\n 1067  }\n 1068  \n 1069: TEST_F(ValidateBarriers, TypeAsMemoryScope) {\n 1070    const std::string body = R\"(\n 1071: OpMemoryBarrier %u32 %u32_0\n 1072  )\";\n 1073  \n ....\n 1078  }\n 1079  \n 1080: TEST_F(ValidateBarriers,\n 1081:        OpControlBarrierVulkanMemoryModelBanSequentiallyConsistent) {\n 1082    const std::string text = R\"(\n 1083  OpCapability Shader\n ....\n 1094  %1 = OpFunction %2 None %5\n 1095  %7 = OpLabel\n 1096: OpControlBarrier %6 %6 %4\n 1097  OpReturn\n 1098  OpFunctionEnd\n ....\n 1107  }\n 1108  \n 1109: TEST_F(ValidateBarriers,\n 1110:        OpMemoryBarrierVulkanMemoryModelBanSequentiallyConsistent) {\n 1111    const std::string text = R\"(\n 1112  OpCapability Shader\n ....\n 1123  %1 = OpFunction %2 None %5\n 1124  %7 = OpLabel\n 1125: OpMemoryBarrier %6 %4\n 1126  OpReturn\n 1127  OpFunctionEnd\n ....\n 1136  }\n 1137  \n 1138: TEST_F(ValidateBarriers, OutputMemoryKHRRequireVulkanMemoryModelKHR) {\n 1139    const std::string text = R\"(\n 1140  OpCapability Shader\n ....\n 1149  %1 = OpFunction %2 None %5\n 1150  %7 = OpLabel\n 1151: OpControlBarrier %device %device %semantics\n 1152  OpReturn\n 1153  OpFunctionEnd\n ....\n 1157    EXPECT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n 1158    EXPECT_THAT(getDiagnosticString(),\n 1159:               HasSubstr(\"ControlBarrier: Memory Semantics OutputMemoryKHR \"\n 1160                          \"requires capability VulkanMemoryModelKHR\"));\n 1161  }\n 1162  \n 1163: TEST_F(ValidateBarriers, MakeAvailableKHRRequireVulkanMemoryModelKHR) {\n 1164    const std::string text = R\"(\n 1165  OpCapability Shader\n ....\n 1174  %1 = OpFunction %2 None %5\n 1175  %7 = OpLabel\n 1176: OpControlBarrier %device %device %semantics\n 1177  OpReturn\n 1178  OpFunctionEnd\n ....\n 1182    EXPECT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n 1183    EXPECT_THAT(getDiagnosticString(),\n 1184:               HasSubstr(\"ControlBarrier: Memory Semantics MakeAvailableKHR \"\n 1185                          \"requires capability VulkanMemoryModelKHR\"));\n 1186  }\n 1187  \n 1188: TEST_F(ValidateBarriers, MakeVisibleKHRRequireVulkanMemoryModelKHR) {\n 1189    const std::string text = R\"(\n 1190  OpCapability Shader\n ....\n 1199  %1 = OpFunction %2 None %5\n 1200  %7 = OpLabel\n 1201: OpControlBarrier %device %device %semantics\n 1202  OpReturn\n 1203  OpFunctionEnd\n ....\n 1207    EXPECT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n 1208    EXPECT_THAT(getDiagnosticString(),\n 1209:               HasSubstr(\"ControlBarrier: Memory Semantics MakeVisibleKHR \"\n 1210                          \"requires capability VulkanMemoryModelKHR\"));\n 1211  }\n 1212  \n 1213: TEST_F(ValidateBarriers, MakeAvailableKHRRequiresReleaseSemantics) {\n 1214    const std::string text = R\"(\n 1215  OpCapability Shader\n ....\n 1226  %func = OpFunction %void None %functy\n 1227  %1 = OpLabel\n 1228: OpControlBarrier %workgroup %workgroup %semantics\n 1229  OpReturn\n 1230  OpFunctionEnd\n ....\n 1236    EXPECT_THAT(\n 1237        getDiagnosticString(),\n 1238:       HasSubstr(\"ControlBarrier: MakeAvailableKHR Memory Semantics also \"\n 1239                  \"requires either Release or AcquireRelease Memory Semantics\"));\n 1240  }\n 1241  \n 1242: TEST_F(ValidateBarriers, MakeVisibleKHRRequiresAcquireSemantics) {\n 1243    const std::string text = R\"(\n 1244  OpCapability Shader\n ....\n 1255  %func = OpFunction %void None %functy\n 1256  %1 = OpLabel\n 1257: OpControlBarrier %workgroup %workgroup %semantics\n 1258  OpReturn\n 1259  OpFunctionEnd\n ....\n 1265    EXPECT_THAT(\n 1266        getDiagnosticString(),\n 1267:       HasSubstr(\"ControlBarrier: MakeVisibleKHR Memory Semantics also requires \"\n 1268                  \"either Acquire or AcquireRelease Memory Semantics\"));\n 1269  }\n 1270  \n 1271: TEST_F(ValidateBarriers, MakeAvailableKHRRequiresStorageSemantics) {\n 1272    const std::string text = R\"(\n 1273  OpCapability Shader\n ....\n 1284  %func = OpFunction %void None %functy\n 1285  %1 = OpLabel\n 1286: OpMemoryBarrier %workgroup %semantics\n 1287  OpReturn\n 1288  OpFunctionEnd\n ....\n 1293              ValidateInstructions(SPV_ENV_UNIVERSAL_1_3));\n 1294    EXPECT_THAT(getDiagnosticString(),\n 1295:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n 1296                          \"storage class\"));\n 1297  }\n 1298  \n 1299: TEST_F(ValidateBarriers, MakeVisibleKHRRequiresStorageSemantics) {\n 1300    const std::string text = R\"(\n 1301  OpCapability Shader\n ....\n 1312  %func = OpFunction %void None %functy\n 1313  %1 = OpLabel\n 1314: OpMemoryBarrier %workgroup %semantics\n 1315  OpReturn\n 1316  OpFunctionEnd\n ....\n 1321              ValidateInstructions(SPV_ENV_UNIVERSAL_1_3));\n 1322    EXPECT_THAT(getDiagnosticString(),\n 1323:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n 1324                          \"storage class\"));\n 1325  }\n 1326  \n 1327: TEST_F(ValidateBarriers, SemanticsSpecConstantShader) {\n 1328    const std::string spirv = R\"(\n 1329  OpCapability Shader\n ....\n 1340  %func = OpFunction %void None %voidfn\n 1341  %entry = OpLabel\n 1342: OpMemoryBarrier %workgroup %spec_const\n 1343  OpReturn\n 1344  OpFunctionEnd\n ....\n 1352  }\n 1353  \n 1354: TEST_F(ValidateBarriers, SemanticsSpecConstantKernel) {\n 1355    const std::string spirv = R\"(\n 1356  OpCapability Kernel\n ....\n 1366  %func = OpFunction %void None %voidfn\n 1367  %entry = OpLabel\n 1368: OpMemoryBarrier %workgroup %spec_const\n 1369  OpReturn\n 1370  OpFunctionEnd\n ....\n 1375  }\n 1376  \n 1377: TEST_F(ValidateBarriers, ScopeSpecConstantShader) {\n 1378    const std::string spirv = R\"(\n 1379  OpCapability Shader\n ....\n 1390  %func = OpFunction %void None %voidfn\n 1391  %entry = OpLabel\n 1392: OpMemoryBarrier %spec_const %relaxed\n 1393  OpReturn\n 1394  OpFunctionEnd\n ....\n 1402  }\n 1403  \n 1404: TEST_F(ValidateBarriers, ScopeSpecConstantKernel) {\n 1405    const std::string spirv = R\"(\n 1406  OpCapability Kernel\n ....\n 1416  %func = OpFunction %void None %voidfn\n 1417  %entry = OpLabel\n 1418: OpMemoryBarrier %spec_const %relaxed\n 1419  OpReturn\n 1420  OpFunctionEnd\n ....\n 1425  }\n 1426  \n 1427: TEST_F(ValidateBarriers, VulkanMemoryModelDeviceScopeBad) {\n 1428    const std::string text = R\"(\n 1429  OpCapability Shader\n ....\n 1440  %func = OpFunction %void None %functy\n 1441  %1 = OpLabel\n 1442: OpMemoryBarrier %device %semantics\n 1443  OpReturn\n 1444  OpFunctionEnd\n ....\n 1454  }\n 1455  \n 1456: TEST_F(ValidateBarriers, VulkanMemoryModelDeviceScopeGood) {\n 1457    const std::string text = R\"(\n 1458  OpCapability Shader\n ....\n 1470  %func = OpFunction %void None %functy\n 1471  %1 = OpLabel\n 1472: OpMemoryBarrier %device %semantics\n 1473  OpReturn\n 1474  OpFunctionEnd\n ....\n 1479  }\n 1480  \n 1481: TEST_F(ValidateBarriers, VolatileMemoryBarrier) {\n 1482    const std::string text = R\"(\n 1483  OpCapability Shader\n ....\n 1494  %func = OpFunction %void None %functy\n 1495  %1 = OpLabel\n 1496: OpMemoryBarrier %device %semantics\n 1497  OpReturn\n 1498  OpFunctionEnd\n ....\n 1506  }\n 1507  \n 1508: TEST_F(ValidateBarriers, VolatileControlBarrier) {\n 1509    const std::string text = R\"(\n 1510  OpCapability Shader\n ....\n 1521  %func = OpFunction %void None %functy\n 1522  %1 = OpLabel\n 1523: OpControlBarrier %device %device %semantics\n 1524  OpReturn\n 1525  OpFunctionEnd\n ....\n 1533  }\n 1534  \n 1535: TEST_F(ValidateBarriers, CooperativeMatrixSpecConstantVolatile) {\n 1536    const std::string text = R\"(\n 1537  OpCapability Shader\n ....\n 1550  %func = OpFunction %void None %functy\n 1551  %1 = OpLabel\n 1552: OpControlBarrier %device %device %semantics\n 1553  OpReturn\n 1554  OpFunctionEnd\n ....\n 1559  }\n 1560  \n 1561: TEST_F(ValidateBarriers, CooperativeMatrixNonConstantSemantics) {\n 1562    const std::string text = R\"(\n 1563  OpCapability Shader\n ....\n 1576  %func = OpFunction %void None %functy\n 1577  %1 = OpLabel\n 1578: OpControlBarrier %device %device %semantics\n 1579  OpReturn\n 1580  OpFunctionEnd\n ....\n 1588  }\n 1589  \n 1590: TEST_F(ValidateBarriers, OpMemoryBarrierShaderCallRayGenSuccess) {\n 1591    const std::string body =\n 1592:       \"OpMemoryBarrier %shadercall %release_uniform_workgroup\";\n 1593  \n 1594    CompileSuccessfully(GenerateShaderCodeImpl(body,\n ....\n 1611  }\n 1612  \n 1613: TEST_F(ValidateBarriers, OpMemoryBarrierShaderCallComputeFailure) {\n 1614    const std::string body =\n 1615:       \"OpMemoryBarrier %shadercall %release_uniform_workgroup\";\n 1616  \n 1617    CompileSuccessfully(GenerateShaderCodeImpl(body,\n ....\n 1636  }\n 1637  \n 1638: TEST_F(ValidateBarriers, OpControlBarrierShaderCallRayGenFailure) {\n 1639:   const std::string body = \"OpControlBarrier %shadercall %shadercall %none\";\n 1640  \n 1641    CompileSuccessfully(GenerateShaderCodeImpl(body,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_capability_test.cpp:\n   58  //\n   59  // OpCapability Kernel\n   60: // %1 = OpTypeNamedBarrier ; requires NamedBarrier\n   61  //\n   62  // So how does the test parameter capture which capabilities should cause\n   ..\n  196      \"MultiViewport\",\n  197      \"SubgroupDispatch\",\n  198:     \"NamedBarrier\",\n  199      \"PipeStorage\",\n  200      \"GroupNonUniform\",\n  ...\n  280      \"MultiViewport\",\n  281      \"SubgroupDispatch\",\n  282:     \"NamedBarrier\",\n  283      \"PipeStorage\",\n  284      \"GroupNonUniform\",\n  ...\n  725    \"LiteralSampler\",\n  726    \"SubgroupDispatch\",\n  727:   \"NamedBarrier\",\n  728    \"PipeStorage\"};\n  729    return *r;\n  ...\n  742    \"LiteralSampler\",\n  743    \"SubgroupDispatch\",\n  744:   \"NamedBarrier\",\n  745    \"PipeStorage\",\n  746    \"GroupNonUniform\",\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_id_test.cpp:\n 5290  %f      = OpFunction %void None %void_f\n 5291  %l      = OpLabel\n 5292:           OpMemoryBarrier %undef %memsem\n 5293            OpReturn\n 5294            OpFunctionEnd\n ....\n 5308  %f      = OpFunction %void None %void_f\n 5309  %l      = OpLabel\n 5310:           OpMemoryBarrier %scope %undef\n 5311            OpReturn\n 5312            OpFunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_type_unique_test.cpp:\n  185  }\n  186  \n  187: TEST_F(ValidateTypeUnique, duplicate_named_barrier) {\n  188    std::string str = R\"(\n  189  OpCapability Addresses\n  190  OpCapability Kernel\n  191  OpCapability Linkage\n  192: OpCapability NamedBarrier\n  193  OpMemoryModel Physical32 OpenCL\n  194: %nb = OpTypeNamedBarrier\n  195: %nb2 = OpTypeNamedBarrier\n  196  )\";\n  197    CompileSuccessfully(str.c_str(), SPV_ENV_UNIVERSAL_1_1);\n  198    ASSERT_EQ(kDuplicateTypeError, ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  199    EXPECT_THAT(getDiagnosticString(),\n  200:               HasSubstr(GetErrorString(SpvOpTypeNamedBarrier)));\n  201  }\n  202  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/tools/opt/opt.cpp:\n  506    --upgrade-memory-model\n  507                 Upgrades the Logical GLSL450 memory model to Logical VulkanKHR.\n  508:                Transforms memory, image, atomic and barrier operations to conform\n  509                 to that model's requirements.)\");\n  510    printf(R\"(\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/tools/sva/src/spirv.data.js:\n 2763        ]\n 2764      },\n 2765:     \"OpControlBarrier\": {\n 2766        \"opcode\": 224,\n 2767        \"operands\": [\n ....\n 2777        ]\n 2778      },\n 2779:     \"OpMemoryBarrier\": {\n 2780        \"opcode\": 225,\n 2781        \"operands\": [\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/utils/vscode/spirv.json:\n  166  \t\t},\n  167  \t\t\"ValueEnum_Capability\": {\n  168: \t\t\t\"match\": \"\\\\b(Matrix|Shader|Geometry|Tessellation|Addresses|Linkage|Kernel|Vector16|Float16Buffer|Float16|Float64|Int64|Int64Atomics|ImageBasic|ImageReadWrite|ImageMipmap|Pipes|Groups|DeviceEnqueue|LiteralSampler|AtomicStorage|Int16|TessellationPointSize|GeometryPointSize|ImageGatherExtended|StorageImageMultisample|UniformBufferArrayDynamicIndexing|SampledImageArrayDynamicIndexing|StorageBufferArrayDynamicIndexing|StorageImageArrayDynamicIndexing|ClipDistance|CullDistance|ImageCubeArray|SampleRateShading|ImageRect|SampledRect|GenericPointer|Int8|InputAttachment|SparseResidency|MinLod|Sampled1D|Image1D|SampledCubeArray|SampledBuffer|ImageBuffer|ImageMSArray|StorageImageExtendedFormats|ImageQuery|DerivativeControl|InterpolationFunction|TransformFeedback|GeometryStreams|StorageImageReadWithoutFormat|StorageImageWriteWithoutFormat|MultiViewport|SubgroupDispatch|NamedBarrier|PipeStorage|GroupNonUniform|GroupNonUniformVote|GroupNonUniformArithmetic|GroupNonUniformBallot|GroupNonUniformShuffle|GroupNonUniformShuffleRelative|GroupNonUniformClustered|GroupNonUniformQuad|ShaderLayer|ShaderViewportIndex|SubgroupBallotKHR|DrawParameters|SubgroupVoteKHR|StorageBuffer16BitAccess|StorageUniformBufferBlock16|UniformAndStorageBuffer16BitAccess|StorageUniform16|StoragePushConstant16|StorageInputOutput16|DeviceGroup|MultiView|VariablePointersStorageBuffer|VariablePointers|AtomicStorageOps|SampleMaskPostDepthCoverage|StorageBuffer8BitAccess|UniformAndStorageBuffer8BitAccess|StoragePushConstant8|DenormPreserve|DenormFlushToZero|SignedZeroInfNanPreserve|RoundingModeRTE|RoundingModeRTZ|Float16ImageAMD|ImageGatherBiasLodAMD|FragmentMaskAMD|StencilExportEXT|ImageReadWriteLodAMD|ShaderClockKHR|SampleMaskOverrideCoverageNV|GeometryShaderPassthroughNV|ShaderViewportIndexLayerEXT|ShaderViewportIndexLayerNV|ShaderViewportMaskNV|ShaderStereoViewNV|PerViewAttributesNV|FragmentFullyCoveredEXT|MeshShadingNV|ImageFootprintNV|FragmentBarycentricNV|ComputeDerivativeGroupQuadsNV|FragmentDensityEXT|ShadingRateNV|GroupNonUniformPartitionedNV|ShaderNonUniform|ShaderNonUniformEXT|RuntimeDescriptorArray|RuntimeDescriptorArrayEXT|InputAttachmentArrayDynamicIndexing|InputAttachmentArrayDynamicIndexingEXT|UniformTexelBufferArrayDynamicIndexing|UniformTexelBufferArrayDynamicIndexingEXT|StorageTexelBufferArrayDynamicIndexing|StorageTexelBufferArrayDynamicIndexingEXT|UniformBufferArrayNonUniformIndexing|UniformBufferArrayNonUniformIndexingEXT|SampledImageArrayNonUniformIndexing|SampledImageArrayNonUniformIndexingEXT|StorageBufferArrayNonUniformIndexing|StorageBufferArrayNonUniformIndexingEXT|StorageImageArrayNonUniformIndexing|StorageImageArrayNonUniformIndexingEXT|InputAttachmentArrayNonUniformIndexing|InputAttachmentArrayNonUniformIndexingEXT|UniformTexelBufferArrayNonUniformIndexing|UniformTexelBufferArrayNonUniformIndexingEXT|StorageTexelBufferArrayNonUniformIndexing|StorageTexelBufferArrayNonUniformIndexingEXT|RayTracingNV|VulkanMemoryModel|VulkanMemoryModelKHR|VulkanMemoryModelDeviceScope|VulkanMemoryModelDeviceScopeKHR|PhysicalStorageBufferAddresses|PhysicalStorageBufferAddressesEXT|ComputeDerivativeGroupLinearNV|CooperativeMatrixNV|FragmentShaderSampleInterlockEXT|FragmentShaderShadingRateInterlockEXT|ShaderSMBuiltinsNV|FragmentShaderPixelInterlockEXT|DemoteToHelperInvocationEXT|SubgroupShuffleINTEL|SubgroupBufferBlockIOINTEL|SubgroupImageBlockIOINTEL|SubgroupImageMediaBlockIOINTEL|IntegerFunctions2INTEL|SubgroupAvcMotionEstimationINTEL|SubgroupAvcMotionEstimationIntraINTEL|SubgroupAvcMotionEstimationChromaINTEL)\\\\b\",\n  169  \t\t\t\"name\": \"keyword.spirv\"\n  170  \t\t},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/utils/vscode/src/schema/schema.go:\n  309  \t\t\"OpEmitStreamVertex\": OpEmitStreamVertex,\n  310  \t\t\"OpEndStreamPrimitive\": OpEndStreamPrimitive,\n  311: \t\t\"OpControlBarrier\": OpControlBarrier,\n  312: \t\t\"OpMemoryBarrier\": OpMemoryBarrier,\n  313  \t\t\"OpAtomicLoad\": OpAtomicLoad,\n  314  \t\t\"OpAtomicStore\": OpAtomicStore,\n  ...\n  404  \t\t\"OpGetKernelLocalSizeForSubgroupCount\": OpGetKernelLocalSizeForSubgroupCount,\n  405  \t\t\"OpGetKernelMaxNumSubgroups\": OpGetKernelMaxNumSubgroups,\n  406: \t\t\"OpTypeNamedBarrier\": OpTypeNamedBarrier,\n  407: \t\t\"OpNamedBarrierInitialize\": OpNamedBarrierInitialize,\n  408: \t\t\"OpMemoryNamedBarrier\": OpMemoryNamedBarrier,\n  409  \t\t\"OpModuleProcessed\": OpModuleProcessed,\n  410  \t\t\"OpExecutionModeId\": OpExecutionModeId,\n  ...\n 5850  \t\t},\n 5851  \t}\n 5852: \tOpControlBarrier = &Opcode {\n 5853: \t\tOpname:   \"OpControlBarrier\",\n 5854: \t\tClass:    \"Barrier\",\n 5855  \t\tOpcode:   224,\n 5856  \t\tOperands: []Operand {\n ....\n 5872  \t\t},\n 5873  \t}\n 5874: \tOpMemoryBarrier = &Opcode {\n 5875: \t\tOpname:   \"OpMemoryBarrier\",\n 5876: \t\tClass:    \"Barrier\",\n 5877  \t\tOpcode:   225,\n 5878  \t\tOperands: []Operand {\n ....\n 8700  \t\t},\n 8701  \t}\n 8702: \tOpTypeNamedBarrier = &Opcode {\n 8703: \t\tOpname:   \"OpTypeNamedBarrier\",\n 8704  \t\tClass:    \"Type-Declaration\",\n 8705  \t\tOpcode:   327,\n ....\n 8712  \t\t},\n 8713  \t}\n 8714: \tOpNamedBarrierInitialize = &Opcode {\n 8715: \t\tOpname:   \"OpNamedBarrierInitialize\",\n 8716: \t\tClass:    \"Barrier\",\n 8717  \t\tOpcode:   328,\n 8718  \t\tOperands: []Operand {\n ....\n 8734  \t\t},\n 8735  \t}\n 8736: \tOpMemoryNamedBarrier = &Opcode {\n 8737: \t\tOpname:   \"OpMemoryNamedBarrier\",\n 8738: \t\tClass:    \"Barrier\",\n 8739  \t\tOpcode:   329,\n 8740  \t\tOperands: []Operand {\n 8741  \t\t\tOperand {\n 8742  \t\t\t\tKind:       OperandKindIdRef,\n 8743: \t\t\t\tName:       \"'Named Barrier'\",\n 8744  \t\t\t\tQuantifier: \"\",\n 8745  \t\t\t}, \n ....\n 23836  \t\t\t},\n 23837  \t\t\tEnumerant{\n 23838: \t\t\t\tEnumerant:    \"NamedBarrier\",\n 23839  \t\t\t\tValue:        59,\n 23840  \t\t\t\tCapabilities: []string{\"Kernel\",},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv/spirv.h:\n  659      SpvCapabilityMultiViewport = 57,\n  660      SpvCapabilitySubgroupDispatch = 58,\n  661:     SpvCapabilityNamedBarrier = 59,\n  662      SpvCapabilityPipeStorage = 60,\n  663      SpvCapabilityGroupNonUniform = 61,\n  ...\n  925      SpvOpEmitStreamVertex = 220,\n  926      SpvOpEndStreamPrimitive = 221,\n  927:     SpvOpControlBarrier = 224,\n  928:     SpvOpMemoryBarrier = 225,\n  929      SpvOpAtomicLoad = 227,\n  930      SpvOpAtomicStore = 228,\n  ...\n 1020      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n 1021      SpvOpGetKernelMaxNumSubgroups = 326,\n 1022:     SpvOpTypeNamedBarrier = 327,\n 1023:     SpvOpNamedBarrierInitialize = 328,\n 1024:     SpvOpMemoryNamedBarrier = 329,\n 1025      SpvOpModuleProcessed = 330,\n 1026      SpvOpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/include/vulkan/vulkan.hpp:\n  110  #endif\n  111  \n  112: // Windows defines MemoryBarrier which is deprecated and collides\n  113: // with the VULKAN_HPP_NAMESPACE::MemoryBarrier struct.\n  114: #if defined(MemoryBarrier)\n  115:   #undef MemoryBarrier\n  116  #endif\n  117  \n  ...\n 1580      }\n 1581  \n 1582:     void vkCmdPipelineBarrier( VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers ) const VULKAN_HPP_NOEXCEPT\n 1583      {\n 1584:       return ::vkCmdPipelineBarrier( commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers );\n 1585      }\n 1586  \n ....\n 1814      }\n 1815  \n 1816:     void vkCmdWaitEvents( VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers ) const VULKAN_HPP_NOEXCEPT\n 1817      {\n 1818:       return ::vkCmdWaitEvents( commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers );\n 1819      }\n 1820  \n ....\n 7980      eCommandBufferBeginInfo = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,\n 7981      eRenderPassBeginInfo = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,\n 7982:     eBufferMemoryBarrier = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,\n 7983:     eImageMemoryBarrier = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,\n 7984:     eMemoryBarrier = VK_STRUCTURE_TYPE_MEMORY_BARRIER,\n 7985      eLoaderInstanceCreateInfo = VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,\n 7986      eLoaderDeviceCreateInfo = VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,\n ....\n 8544        case StructureType::eCommandBufferBeginInfo : return \"CommandBufferBeginInfo\";\n 8545        case StructureType::eRenderPassBeginInfo : return \"RenderPassBeginInfo\";\n 8546:       case StructureType::eBufferMemoryBarrier : return \"BufferMemoryBarrier\";\n 8547:       case StructureType::eImageMemoryBarrier : return \"ImageMemoryBarrier\";\n 8548:       case StructureType::eMemoryBarrier : return \"MemoryBarrier\";\n 8549        case StructureType::eLoaderInstanceCreateInfo : return \"LoaderInstanceCreateInfo\";\n 8550        case StructureType::eLoaderDeviceCreateInfo : return \"LoaderDeviceCreateInfo\";\n ....\n 21775    static_assert( std::is_standard_layout<BufferImageCopy>::value, \"struct wrapper is not a standard layout!\" );\n 21776  \n 21777:   struct BufferMemoryBarrier\n 21778    {\n 21779      static const bool allowDuplicate = false;\n 21780:     static VULKAN_HPP_CONST_OR_CONSTEXPR StructureType structureType = StructureType::eBufferMemoryBarrier;\n 21781  \n 21782  #if !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 21783:     VULKAN_HPP_CONSTEXPR BufferMemoryBarrier(VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ = {}, VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ = {}, uint32_t srcQueueFamilyIndex_ = {}, uint32_t dstQueueFamilyIndex_ = {}, VULKAN_HPP_NAMESPACE::Buffer buffer_ = {}, VULKAN_HPP_NAMESPACE::DeviceSize offset_ = {}, VULKAN_HPP_NAMESPACE::DeviceSize size_ = {}) VULKAN_HPP_NOEXCEPT\n 21784      : srcAccessMask( srcAccessMask_ ), dstAccessMask( dstAccessMask_ ), srcQueueFamilyIndex( srcQueueFamilyIndex_ ), dstQueueFamilyIndex( dstQueueFamilyIndex_ ), buffer( buffer_ ), offset( offset_ ), size( size_ )\n 21785      {}\n 21786  \n 21787:     BufferMemoryBarrier( VkBufferMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 21788      {\n 21789        *this = rhs;\n .....\n 21791  #endif // !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 21792  \n 21793:     BufferMemoryBarrier & operator=( VkBufferMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 21794      {\n 21795:       *this = *reinterpret_cast<VULKAN_HPP_NAMESPACE::BufferMemoryBarrier const *>( &rhs );\n 21796        return *this;\n 21797      }\n 21798  \n 21799:     BufferMemoryBarrier & operator=( BufferMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 21800      {\n 21801      pNext = rhs.pNext;\n .....\n 21811      }\n 21812  \n 21813:     BufferMemoryBarrier & setPNext( const void* pNext_ ) VULKAN_HPP_NOEXCEPT\n 21814      {\n 21815        pNext = pNext_;\n .....\n 21817      }\n 21818  \n 21819:     BufferMemoryBarrier & setSrcAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 21820      {\n 21821        srcAccessMask = srcAccessMask_;\n .....\n 21823      }\n 21824  \n 21825:     BufferMemoryBarrier & setDstAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 21826      {\n 21827        dstAccessMask = dstAccessMask_;\n .....\n 21829      }\n 21830  \n 21831:     BufferMemoryBarrier & setSrcQueueFamilyIndex( uint32_t srcQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 21832      {\n 21833        srcQueueFamilyIndex = srcQueueFamilyIndex_;\n .....\n 21835      }\n 21836  \n 21837:     BufferMemoryBarrier & setDstQueueFamilyIndex( uint32_t dstQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 21838      {\n 21839        dstQueueFamilyIndex = dstQueueFamilyIndex_;\n .....\n 21841      }\n 21842  \n 21843:     BufferMemoryBarrier & setBuffer( VULKAN_HPP_NAMESPACE::Buffer buffer_ ) VULKAN_HPP_NOEXCEPT\n 21844      {\n 21845        buffer = buffer_;\n .....\n 21847      }\n 21848  \n 21849:     BufferMemoryBarrier & setOffset( VULKAN_HPP_NAMESPACE::DeviceSize offset_ ) VULKAN_HPP_NOEXCEPT\n 21850      {\n 21851        offset = offset_;\n .....\n 21853      }\n 21854  \n 21855:     BufferMemoryBarrier & setSize( VULKAN_HPP_NAMESPACE::DeviceSize size_ ) VULKAN_HPP_NOEXCEPT\n 21856      {\n 21857        size = size_;\n .....\n 21860  \n 21861  \n 21862:     operator VkBufferMemoryBarrier const&() const VULKAN_HPP_NOEXCEPT\n 21863      {\n 21864:       return *reinterpret_cast<const VkBufferMemoryBarrier*>( this );\n 21865      }\n 21866  \n 21867:     operator VkBufferMemoryBarrier &() VULKAN_HPP_NOEXCEPT\n 21868      {\n 21869:       return *reinterpret_cast<VkBufferMemoryBarrier*>( this );\n 21870      }\n 21871  \n 21872  \n 21873  #if defined(VULKAN_HPP_HAS_SPACESHIP_OPERATOR)\n 21874:     auto operator<=>( BufferMemoryBarrier const& ) const = default;\n 21875  #else\n 21876:     bool operator==( BufferMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 21877      {\n 21878        return ( sType == rhs.sType )\n .....\n 21887      }\n 21888  \n 21889:     bool operator!=( BufferMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 21890      {\n 21891        return !operator==( rhs );\n .....\n 21896  \n 21897    public:\n 21898:     const VULKAN_HPP_NAMESPACE::StructureType sType = StructureType::eBufferMemoryBarrier;\n 21899      const void* pNext = {};\n 21900      VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask = {};\n .....\n 21907  \n 21908    };\n 21909:   static_assert( sizeof( BufferMemoryBarrier ) == sizeof( VkBufferMemoryBarrier ), \"struct and wrapper have different size!\" );\n 21910:   static_assert( std::is_standard_layout<BufferMemoryBarrier>::value, \"struct wrapper is not a standard layout!\" );\n 21911  \n 21912    template <>\n 21913:   struct CppType<StructureType, StructureType::eBufferMemoryBarrier>\n 21914    {\n 21915:     using Type = BufferMemoryBarrier;\n 21916    };\n 21917  \n .....\n 31214    };\n 31215  \n 31216:   struct MemoryBarrier\n 31217    {\n 31218      static const bool allowDuplicate = false;\n 31219:     static VULKAN_HPP_CONST_OR_CONSTEXPR StructureType structureType = StructureType::eMemoryBarrier;\n 31220  \n 31221  #if !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31222:     VULKAN_HPP_CONSTEXPR MemoryBarrier(VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ = {}, VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ = {}) VULKAN_HPP_NOEXCEPT\n 31223      : srcAccessMask( srcAccessMask_ ), dstAccessMask( dstAccessMask_ )\n 31224      {}\n 31225  \n 31226:     MemoryBarrier( VkMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31227      {\n 31228        *this = rhs;\n .....\n 31230  #endif // !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31231  \n 31232:     MemoryBarrier & operator=( VkMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31233      {\n 31234:       *this = *reinterpret_cast<VULKAN_HPP_NAMESPACE::MemoryBarrier const *>( &rhs );\n 31235        return *this;\n 31236      }\n 31237  \n 31238:     MemoryBarrier & operator=( MemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31239      {\n 31240      pNext = rhs.pNext;\n .....\n 31245      }\n 31246  \n 31247:     MemoryBarrier & setPNext( const void* pNext_ ) VULKAN_HPP_NOEXCEPT\n 31248      {\n 31249        pNext = pNext_;\n .....\n 31251      }\n 31252  \n 31253:     MemoryBarrier & setSrcAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31254      {\n 31255        srcAccessMask = srcAccessMask_;\n .....\n 31257      }\n 31258  \n 31259:     MemoryBarrier & setDstAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31260      {\n 31261        dstAccessMask = dstAccessMask_;\n .....\n 31264  \n 31265  \n 31266:     operator VkMemoryBarrier const&() const VULKAN_HPP_NOEXCEPT\n 31267      {\n 31268:       return *reinterpret_cast<const VkMemoryBarrier*>( this );\n 31269      }\n 31270  \n 31271:     operator VkMemoryBarrier &() VULKAN_HPP_NOEXCEPT\n 31272      {\n 31273:       return *reinterpret_cast<VkMemoryBarrier*>( this );\n 31274      }\n 31275  \n 31276  \n 31277  #if defined(VULKAN_HPP_HAS_SPACESHIP_OPERATOR)\n 31278:     auto operator<=>( MemoryBarrier const& ) const = default;\n 31279  #else\n 31280:     bool operator==( MemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31281      {\n 31282        return ( sType == rhs.sType )\n .....\n 31286      }\n 31287  \n 31288:     bool operator!=( MemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31289      {\n 31290        return !operator==( rhs );\n .....\n 31295  \n 31296    public:\n 31297:     const VULKAN_HPP_NAMESPACE::StructureType sType = StructureType::eMemoryBarrier;\n 31298      const void* pNext = {};\n 31299      VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask = {};\n .....\n 31301  \n 31302    };\n 31303:   static_assert( sizeof( MemoryBarrier ) == sizeof( VkMemoryBarrier ), \"struct and wrapper have different size!\" );\n 31304:   static_assert( std::is_standard_layout<MemoryBarrier>::value, \"struct wrapper is not a standard layout!\" );\n 31305  \n 31306    template <>\n 31307:   struct CppType<StructureType, StructureType::eMemoryBarrier>\n 31308    {\n 31309:     using Type = MemoryBarrier;\n 31310    };\n 31311  \n 31312:   struct ImageMemoryBarrier\n 31313    {\n 31314      static const bool allowDuplicate = false;\n 31315:     static VULKAN_HPP_CONST_OR_CONSTEXPR StructureType structureType = StructureType::eImageMemoryBarrier;\n 31316  \n 31317  #if !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31318:     VULKAN_HPP_CONSTEXPR ImageMemoryBarrier(VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ = {}, VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ = {}, VULKAN_HPP_NAMESPACE::ImageLayout oldLayout_ = VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined, VULKAN_HPP_NAMESPACE::ImageLayout newLayout_ = VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined, uint32_t srcQueueFamilyIndex_ = {}, uint32_t dstQueueFamilyIndex_ = {}, VULKAN_HPP_NAMESPACE::Image image_ = {}, VULKAN_HPP_NAMESPACE::ImageSubresourceRange subresourceRange_ = {}) VULKAN_HPP_NOEXCEPT\n 31319      : srcAccessMask( srcAccessMask_ ), dstAccessMask( dstAccessMask_ ), oldLayout( oldLayout_ ), newLayout( newLayout_ ), srcQueueFamilyIndex( srcQueueFamilyIndex_ ), dstQueueFamilyIndex( dstQueueFamilyIndex_ ), image( image_ ), subresourceRange( subresourceRange_ )\n 31320      {}\n 31321  \n 31322:     ImageMemoryBarrier( VkImageMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31323      {\n 31324        *this = rhs;\n .....\n 31326  #endif // !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31327  \n 31328:     ImageMemoryBarrier & operator=( VkImageMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31329      {\n 31330:       *this = *reinterpret_cast<VULKAN_HPP_NAMESPACE::ImageMemoryBarrier const *>( &rhs );\n 31331        return *this;\n 31332      }\n 31333  \n 31334:     ImageMemoryBarrier & operator=( ImageMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31335      {\n 31336      pNext = rhs.pNext;\n .....\n 31347      }\n 31348  \n 31349:     ImageMemoryBarrier & setPNext( const void* pNext_ ) VULKAN_HPP_NOEXCEPT\n 31350      {\n 31351        pNext = pNext_;\n .....\n 31353      }\n 31354  \n 31355:     ImageMemoryBarrier & setSrcAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31356      {\n 31357        srcAccessMask = srcAccessMask_;\n .....\n 31359      }\n 31360  \n 31361:     ImageMemoryBarrier & setDstAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31362      {\n 31363        dstAccessMask = dstAccessMask_;\n .....\n 31365      }\n 31366  \n 31367:     ImageMemoryBarrier & setOldLayout( VULKAN_HPP_NAMESPACE::ImageLayout oldLayout_ ) VULKAN_HPP_NOEXCEPT\n 31368      {\n 31369        oldLayout = oldLayout_;\n .....\n 31371      }\n 31372  \n 31373:     ImageMemoryBarrier & setNewLayout( VULKAN_HPP_NAMESPACE::ImageLayout newLayout_ ) VULKAN_HPP_NOEXCEPT\n 31374      {\n 31375        newLayout = newLayout_;\n .....\n 31377      }\n 31378  \n 31379:     ImageMemoryBarrier & setSrcQueueFamilyIndex( uint32_t srcQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 31380      {\n 31381        srcQueueFamilyIndex = srcQueueFamilyIndex_;\n .....\n 31383      }\n 31384  \n 31385:     ImageMemoryBarrier & setDstQueueFamilyIndex( uint32_t dstQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 31386      {\n 31387        dstQueueFamilyIndex = dstQueueFamilyIndex_;\n .....\n 31389      }\n 31390  \n 31391:     ImageMemoryBarrier & setImage( VULKAN_HPP_NAMESPACE::Image image_ ) VULKAN_HPP_NOEXCEPT\n 31392      {\n 31393        image = image_;\n .....\n 31395      }\n 31396  \n 31397:     ImageMemoryBarrier & setSubresourceRange( VULKAN_HPP_NAMESPACE::ImageSubresourceRange const & subresourceRange_ ) VULKAN_HPP_NOEXCEPT\n 31398      {\n 31399        subresourceRange = subresourceRange_;\n .....\n 31402  \n 31403  \n 31404:     operator VkImageMemoryBarrier const&() const VULKAN_HPP_NOEXCEPT\n 31405      {\n 31406:       return *reinterpret_cast<const VkImageMemoryBarrier*>( this );\n 31407      }\n 31408  \n 31409:     operator VkImageMemoryBarrier &() VULKAN_HPP_NOEXCEPT\n 31410      {\n 31411:       return *reinterpret_cast<VkImageMemoryBarrier*>( this );\n 31412      }\n 31413  \n 31414  \n 31415  #if defined(VULKAN_HPP_HAS_SPACESHIP_OPERATOR)\n 31416:     auto operator<=>( ImageMemoryBarrier const& ) const = default;\n 31417  #else\n 31418:     bool operator==( ImageMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31419      {\n 31420        return ( sType == rhs.sType )\n .....\n 31430      }\n 31431  \n 31432:     bool operator!=( ImageMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31433      {\n 31434        return !operator==( rhs );\n .....\n 31439  \n 31440    public:\n 31441:     const VULKAN_HPP_NAMESPACE::StructureType sType = StructureType::eImageMemoryBarrier;\n 31442      const void* pNext = {};\n 31443      VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask = {};\n .....\n 31451  \n 31452    };\n 31453:   static_assert( sizeof( ImageMemoryBarrier ) == sizeof( VkImageMemoryBarrier ), \"struct and wrapper have different size!\" );\n 31454:   static_assert( std::is_standard_layout<ImageMemoryBarrier>::value, \"struct wrapper is not a standard layout!\" );\n 31455  \n 31456    template <>\n 31457:   struct CppType<StructureType, StructureType::eImageMemoryBarrier>\n 31458    {\n 31459:     using Type = ImageMemoryBarrier;\n 31460    };\n 31461  \n .....\n 33044  \n 33045      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33046:     void pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33047  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 33048      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33049:     void pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33050  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n 33051  \n .....\n 33270  \n 33271      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33272:     void waitEvents( uint32_t eventCount, const VULKAN_HPP_NAMESPACE::Event* pEvents, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33273  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 33274      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33275:     void waitEvents( ArrayProxy<const VULKAN_HPP_NAMESPACE::Event> const &events, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33276  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n 33277  \n .....\n 78767  \n 78768    template<typename Dispatch>\n 78769:   VULKAN_HPP_INLINE void CommandBuffer::pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d) const VULKAN_HPP_NOEXCEPT\n 78770    {\n 78771:     d.vkCmdPipelineBarrier( m_commandBuffer, static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), static_cast<VkDependencyFlags>( dependencyFlags ), memoryBarrierCount, reinterpret_cast<const VkMemoryBarrier*>( pMemoryBarriers ), bufferMemoryBarrierCount, reinterpret_cast<const VkBufferMemoryBarrier*>( pBufferMemoryBarriers ), imageMemoryBarrierCount, reinterpret_cast<const VkImageMemoryBarrier*>( pImageMemoryBarriers ) );\n 78772    }\n 78773  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 78774    template<typename Dispatch>\n 78775:   VULKAN_HPP_INLINE void CommandBuffer::pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d ) const VULKAN_HPP_NOEXCEPT\n 78776    {\n 78777:     d.vkCmdPipelineBarrier( m_commandBuffer, static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), static_cast<VkDependencyFlags>( dependencyFlags ), memoryBarriers.size() , reinterpret_cast<const VkMemoryBarrier*>( memoryBarriers.data() ), bufferMemoryBarriers.size() , reinterpret_cast<const VkBufferMemoryBarrier*>( bufferMemoryBarriers.data() ), imageMemoryBarriers.size() , reinterpret_cast<const VkImageMemoryBarrier*>( imageMemoryBarriers.data() ) );\n 78778    }\n 78779  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n .....\n 79443  \n 79444    template<typename Dispatch>\n 79445:   VULKAN_HPP_INLINE void CommandBuffer::waitEvents( uint32_t eventCount, const VULKAN_HPP_NAMESPACE::Event* pEvents, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d) const VULKAN_HPP_NOEXCEPT\n 79446    {\n 79447:     d.vkCmdWaitEvents( m_commandBuffer, eventCount, reinterpret_cast<const VkEvent*>( pEvents ), static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), memoryBarrierCount, reinterpret_cast<const VkMemoryBarrier*>( pMemoryBarriers ), bufferMemoryBarrierCount, reinterpret_cast<const VkBufferMemoryBarrier*>( pBufferMemoryBarriers ), imageMemoryBarrierCount, reinterpret_cast<const VkImageMemoryBarrier*>( pImageMemoryBarriers ) );\n 79448    }\n 79449  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 79450    template<typename Dispatch>\n 79451:   VULKAN_HPP_INLINE void CommandBuffer::waitEvents( ArrayProxy<const VULKAN_HPP_NAMESPACE::Event> const &events, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d ) const VULKAN_HPP_NOEXCEPT\n 79452    {\n 79453:     d.vkCmdWaitEvents( m_commandBuffer, events.size() , reinterpret_cast<const VkEvent*>( events.data() ), static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), memoryBarriers.size() , reinterpret_cast<const VkMemoryBarrier*>( memoryBarriers.data() ), bufferMemoryBarriers.size() , reinterpret_cast<const VkBufferMemoryBarrier*>( bufferMemoryBarriers.data() ), imageMemoryBarriers.size() , reinterpret_cast<const VkImageMemoryBarrier*>( imageMemoryBarriers.data() ) );\n 79454    }\n 79455  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n .....\n 87599    template <> struct StructExtends<RenderPassSampleLocationsBeginInfoEXT, RenderPassBeginInfo>{ enum { value = true }; };\n 87600    template <> struct StructExtends<RenderPassTransformBeginInfoQCOM, RenderPassBeginInfo>{ enum { value = true }; };\n 87601:   template <> struct StructExtends<SampleLocationsInfoEXT, ImageMemoryBarrier>{ enum { value = true }; };\n 87602    template <> struct StructExtends<SamplerCustomBorderColorCreateInfoEXT, SamplerCreateInfo>{ enum { value = true }; };\n 87603    template <> struct StructExtends<SamplerReductionModeCreateInfo, SamplerCreateInfo>{ enum { value = true }; };\n .....\n 87830      PFN_vkCmdNextSubpass2 vkCmdNextSubpass2 = 0;\n 87831      PFN_vkCmdNextSubpass2KHR vkCmdNextSubpass2KHR = 0;\n 87832:     PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier = 0;\n 87833      PFN_vkCmdPreprocessGeneratedCommandsNV vkCmdPreprocessGeneratedCommandsNV = 0;\n 87834      PFN_vkCmdPushConstants vkCmdPushConstants = 0;\n .....\n 88571        vkCmdNextSubpass2 = PFN_vkCmdNextSubpass2( vkGetInstanceProcAddr( instance, \"vkCmdNextSubpass2\" ) );\n 88572        vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2KHR( vkGetInstanceProcAddr( instance, \"vkCmdNextSubpass2KHR\" ) );\n 88573:       vkCmdPipelineBarrier = PFN_vkCmdPipelineBarrier( vkGetInstanceProcAddr( instance, \"vkCmdPipelineBarrier\" ) );\n 88574        vkCmdPreprocessGeneratedCommandsNV = PFN_vkCmdPreprocessGeneratedCommandsNV( vkGetInstanceProcAddr( instance, \"vkCmdPreprocessGeneratedCommandsNV\" ) );\n 88575        vkCmdPushConstants = PFN_vkCmdPushConstants( vkGetInstanceProcAddr( instance, \"vkCmdPushConstants\" ) );\n .....\n 88993        vkCmdNextSubpass2 = PFN_vkCmdNextSubpass2( vkGetDeviceProcAddr( device, \"vkCmdNextSubpass2\" ) );\n 88994        vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2KHR( vkGetDeviceProcAddr( device, \"vkCmdNextSubpass2KHR\" ) );\n 88995:       vkCmdPipelineBarrier = PFN_vkCmdPipelineBarrier( vkGetDeviceProcAddr( device, \"vkCmdPipelineBarrier\" ) );\n 88996        vkCmdPreprocessGeneratedCommandsNV = PFN_vkCmdPreprocessGeneratedCommandsNV( vkGetDeviceProcAddr( device, \"vkCmdPreprocessGeneratedCommandsNV\" ) );\n 88997        vkCmdPushConstants = PFN_vkCmdPushConstants( vkGetDeviceProcAddr( device, \"vkCmdPushConstants\" ) );\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/include/vulkan/vulkan_core.h:\n  195      VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,\n  196      VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,\n  197:     VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,\n  198:     VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,\n  199:     VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,\n  200      VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,\n  201      VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,\n  ...\n 2000  } VkBaseOutStructure;\n 2001  \n 2002: typedef struct VkBufferMemoryBarrier {\n 2003      VkStructureType    sType;\n 2004      const void*        pNext;\n ....\n 2010      VkDeviceSize       offset;\n 2011      VkDeviceSize       size;\n 2012: } VkBufferMemoryBarrier;\n 2013  \n 2014  typedef struct VkDispatchIndirectCommand {\n ....\n 2041  } VkImageSubresourceRange;\n 2042  \n 2043: typedef struct VkImageMemoryBarrier {\n 2044      VkStructureType            sType;\n 2045      const void*                pNext;\n ....\n 2052      VkImage                    image;\n 2053      VkImageSubresourceRange    subresourceRange;\n 2054: } VkImageMemoryBarrier;\n 2055  \n 2056: typedef struct VkMemoryBarrier {\n 2057      VkStructureType    sType;\n 2058      const void*        pNext;\n 2059      VkAccessFlags      srcAccessMask;\n 2060      VkAccessFlags      dstAccessMask;\n 2061: } VkMemoryBarrier;\n 2062  \n 2063  typedef void* (VKAPI_PTR *PFN_vkAllocationFunction)(\n ....\n 3203  typedef void (VKAPI_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);\n 3204  typedef void (VKAPI_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);\n 3205: typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);\n 3206: typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);\n 3207  typedef void (VKAPI_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);\n 3208  typedef void (VKAPI_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);\n ....\n 3937      VkPipelineStageFlags                        srcStageMask,\n 3938      VkPipelineStageFlags                        dstStageMask,\n 3939:     uint32_t                                    memoryBarrierCount,\n 3940:     const VkMemoryBarrier*                      pMemoryBarriers,\n 3941:     uint32_t                                    bufferMemoryBarrierCount,\n 3942:     const VkBufferMemoryBarrier*                pBufferMemoryBarriers,\n 3943:     uint32_t                                    imageMemoryBarrierCount,\n 3944:     const VkImageMemoryBarrier*                 pImageMemoryBarriers);\n 3945  \n 3946: VKAPI_ATTR void VKAPI_CALL vkCmdPipelineBarrier(\n 3947      VkCommandBuffer                             commandBuffer,\n 3948      VkPipelineStageFlags                        srcStageMask,\n 3949      VkPipelineStageFlags                        dstStageMask,\n 3950      VkDependencyFlags                           dependencyFlags,\n 3951:     uint32_t                                    memoryBarrierCount,\n 3952:     const VkMemoryBarrier*                      pMemoryBarriers,\n 3953:     uint32_t                                    bufferMemoryBarrierCount,\n 3954:     const VkBufferMemoryBarrier*                pBufferMemoryBarriers,\n 3955:     uint32_t                                    imageMemoryBarrierCount,\n 3956:     const VkImageMemoryBarrier*                 pImageMemoryBarriers);\n 3957  \n 3958  VKAPI_ATTR void VKAPI_CALL vkCmdBeginQuery(\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/registry/validusage.json:\n 2973          {\n 2974            \"vuid\": \"VUID-vkCmdWaitEvents-srcAccessMask-02815\",\n 2975:           \"text\": \" The <code>srcAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2976          },\n 2977          {\n 2978            \"vuid\": \"VUID-vkCmdWaitEvents-dstAccessMask-02816\",\n 2979:           \"text\": \" The <code>dstAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2980          },\n 2981          {\n 2982:           \"vuid\": \"VUID-vkCmdWaitEvents-pBufferMemoryBarriers-02817\",\n 2983:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2984          },\n 2985          {\n 2986:           \"vuid\": \"VUID-vkCmdWaitEvents-pBufferMemoryBarriers-02818\",\n 2987:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2988          },\n 2989          {\n 2990:           \"vuid\": \"VUID-vkCmdWaitEvents-pImageMemoryBarriers-02819\",\n 2991:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2992          },\n 2993          {\n 2994:           \"vuid\": \"VUID-vkCmdWaitEvents-pImageMemoryBarriers-02820\",\n 2995:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2996          },\n 2997          {\n ....\n 3005          {\n 3006            \"vuid\": \"VUID-vkCmdWaitEvents-srcQueueFamilyIndex-02803\",\n 3007:           \"text\": \" The <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members of any element of <code>pBufferMemoryBarriers</code> or <code>pImageMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be equal\"\n 3008          },\n 3009          {\n ....\n 3032          },\n 3033          {\n 3034:           \"vuid\": \"VUID-vkCmdWaitEvents-pMemoryBarriers-parameter\",\n 3035:           \"text\": \" If <code>memoryBarrierCount</code> is not <code>0</code>, <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>memoryBarrierCount</code> valid <a href=\\\"#VkMemoryBarrier\\\">VkMemoryBarrier</a> structures\"\n 3036          },\n 3037          {\n 3038:           \"vuid\": \"VUID-vkCmdWaitEvents-pBufferMemoryBarriers-parameter\",\n 3039:           \"text\": \" If <code>bufferMemoryBarrierCount</code> is not <code>0</code>, <code>pBufferMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>bufferMemoryBarrierCount</code> valid <a href=\\\"#VkBufferMemoryBarrier\\\">VkBufferMemoryBarrier</a> structures\"\n 3040          },\n 3041          {\n 3042:           \"vuid\": \"VUID-vkCmdWaitEvents-pImageMemoryBarriers-parameter\",\n 3043:           \"text\": \" If <code>imageMemoryBarrierCount</code> is not <code>0</code>, <code>pImageMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>imageMemoryBarrierCount</code> valid <a href=\\\"#VkImageMemoryBarrier\\\">VkImageMemoryBarrier</a> structures\"\n 3044          },\n 3045          {\n ....\n 3125        ]\n 3126      },\n 3127:     \"vkCmdPipelineBarrier\": {\n 3128        \"core\": [\n 3129          {\n 3130:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04090\",\n 3131            \"text\": \" If the <a href=\\\"#features-geometryShader\\\">geometry shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code>\"\n 3132          },\n 3133          {\n 3134:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04091\",\n 3135            \"text\": \" If the <a href=\\\"#features-tessellationShader\\\">tessellation shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or <code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>\"\n 3136          },\n 3137          {\n 3138:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-4098\",\n 3139            \"text\": \" Any pipeline stage included in pname:srcStageMask <strong class=\\\"purple\\\">must</strong> be supported by the capabilities of the queue family specified by the <code>queueFamilyIndex</code> member of the <a href=\\\"#VkCommandPoolCreateInfo\\\">VkCommandPoolCreateInfo</a> structure that was used to create the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from, as specified in the <a href=\\\"#synchronization-pipeline-stages-supported\\\">table of supported pipeline stages</a>\"\n 3140          },\n 3141          {\n 3142:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04090\",\n 3143            \"text\": \" If the <a href=\\\"#features-geometryShader\\\">geometry shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code>\"\n 3144          },\n 3145          {\n 3146:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04091\",\n 3147            \"text\": \" If the <a href=\\\"#features-tessellationShader\\\">tessellation shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or <code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>\"\n 3148          },\n 3149          {\n 3150:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-4098\",\n 3151            \"text\": \" Any pipeline stage included in pname:dstStageMask <strong class=\\\"purple\\\">must</strong> be supported by the capabilities of the queue family specified by the <code>queueFamilyIndex</code> member of the <a href=\\\"#VkCommandPoolCreateInfo\\\">VkCommandPoolCreateInfo</a> structure that was used to create the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from, as specified in the <a href=\\\"#synchronization-pipeline-stages-supported\\\">table of supported pipeline stages</a>\"\n 3152          },\n 3153          {\n 3154:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcAccessMask-02815\",\n 3155:           \"text\": \" The <code>srcAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3156          },\n 3157          {\n 3158:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstAccessMask-02816\",\n 3159:           \"text\": \" The <code>dstAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3160          },\n 3161          {\n 3162:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-02817\",\n 3163:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3164          },\n 3165          {\n 3166:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-02818\",\n 3167:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3168          },\n 3169          {\n 3170:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-02819\",\n 3171:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3172          },\n 3173          {\n 3174:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-02820\",\n 3175:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3176          },\n 3177          {\n 3178:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pDependencies-02285\",\n 3179:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the render pass <strong class=\\\"purple\\\">must</strong> have been created with at least one <a href=\\\"#VkSubpassDependency\\\">VkSubpassDependency</a> instance in <code>VkRenderPassCreateInfo</code>::<code>pDependencies</code> that expresses a dependency from the current subpass to itself, with <a href=\\\"#synchronization-dependencies-scopes\\\">synchronization scopes</a> and <a href=\\\"#synchronization-dependencies-access-scopes\\\">access scopes</a> that are all supersets of the scopes defined in this command\"\n 3180          },\n 3181          {\n 3182:           \"vuid\": \"VUID-vkCmdPipelineBarrier-bufferMemoryBarrierCount-01178\",\n 3183:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, it <strong class=\\\"purple\\\">must</strong> not include any buffer memory barriers\"\n 3184          },\n 3185          {\n 3186:           \"vuid\": \"VUID-vkCmdPipelineBarrier-image-04073\",\n 3187:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the <code>image</code> member of any image memory barrier included in this command <strong class=\\\"purple\\\">must</strong> be an attachment used in the current subpass both as an input attachment, and as either a color or depth/stencil attachment\"\n 3188          },\n 3189          {\n 3190:           \"vuid\": \"VUID-vkCmdPipelineBarrier-oldLayout-01181\",\n 3191:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the <code>oldLayout</code> and <code>newLayout</code> members of any image memory barrier included in this command <strong class=\\\"purple\\\">must</strong> be equal\"\n 3192          },\n 3193          {\n 3194:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcQueueFamilyIndex-01182\",\n 3195:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members of any image memory barrier included in this command <strong class=\\\"purple\\\">must</strong> be equal\"\n 3196          },\n 3197          {\n 3198:           \"vuid\": \"VUID-vkCmdPipelineBarrier-commandBuffer-parameter\",\n 3199            \"text\": \" <code>commandBuffer</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkCommandBuffer\\\">VkCommandBuffer</a> handle\"\n 3200          },\n 3201          {\n 3202:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-parameter\",\n 3203            \"text\": \" <code>srcStageMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkPipelineStageFlagBits\\\">VkPipelineStageFlagBits</a> values\"\n 3204          },\n 3205          {\n 3206:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-requiredbitmask\",\n 3207            \"text\": \" <code>srcStageMask</code> <strong class=\\\"purple\\\">must</strong> not be <code>0</code>\"\n 3208          },\n 3209          {\n 3210:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-parameter\",\n 3211            \"text\": \" <code>dstStageMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkPipelineStageFlagBits\\\">VkPipelineStageFlagBits</a> values\"\n 3212          },\n 3213          {\n 3214:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-requiredbitmask\",\n 3215            \"text\": \" <code>dstStageMask</code> <strong class=\\\"purple\\\">must</strong> not be <code>0</code>\"\n 3216          },\n 3217          {\n 3218:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dependencyFlags-parameter\",\n 3219            \"text\": \" <code>dependencyFlags</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkDependencyFlagBits\\\">VkDependencyFlagBits</a> values\"\n 3220          },\n 3221          {\n 3222:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pMemoryBarriers-parameter\",\n 3223:           \"text\": \" If <code>memoryBarrierCount</code> is not <code>0</code>, <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>memoryBarrierCount</code> valid <a href=\\\"#VkMemoryBarrier\\\">VkMemoryBarrier</a> structures\"\n 3224          },\n 3225          {\n 3226:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-parameter\",\n 3227:           \"text\": \" If <code>bufferMemoryBarrierCount</code> is not <code>0</code>, <code>pBufferMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>bufferMemoryBarrierCount</code> valid <a href=\\\"#VkBufferMemoryBarrier\\\">VkBufferMemoryBarrier</a> structures\"\n 3228          },\n 3229          {\n 3230:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-parameter\",\n 3231:           \"text\": \" If <code>imageMemoryBarrierCount</code> is not <code>0</code>, <code>pImageMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>imageMemoryBarrierCount</code> valid <a href=\\\"#VkImageMemoryBarrier\\\">VkImageMemoryBarrier</a> structures\"\n 3232          },\n 3233          {\n 3234:           \"vuid\": \"VUID-vkCmdPipelineBarrier-commandBuffer-recording\",\n 3235            \"text\": \" <code>commandBuffer</code> <strong class=\\\"purple\\\">must</strong> be in the <a href=\\\"#commandbuffers-lifecycle\\\">recording state</a>\"\n 3236          },\n 3237          {\n 3238:           \"vuid\": \"VUID-vkCmdPipelineBarrier-commandBuffer-cmdpool\",\n 3239            \"text\": \" The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class=\\\"purple\\\">must</strong> support transfer, graphics, or compute operations\"\n 3240          }\n ....\n 3242        \"(VK_EXT_conditional_rendering)\": [\n 3243          {\n 3244:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04092\",\n 3245            \"text\": \" If the <a href=\\\"#features-conditionalRendering\\\">conditional rendering</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT</code>\"\n 3246          },\n 3247          {\n 3248:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04092\",\n 3249            \"text\": \" If the <a href=\\\"#features-conditionalRendering\\\">conditional rendering</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT</code>\"\n 3250          }\n ....\n 3252        \"(VK_EXT_fragment_density_map)\": [\n 3253          {\n 3254:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04093\",\n 3255            \"text\": \" If the <a href=\\\"#features-fragmentDensityMap\\\">fragment density map</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code>\"\n 3256          },\n 3257          {\n 3258:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04093\",\n 3259            \"text\": \" If the <a href=\\\"#features-fragmentDensityMap\\\">fragment density map</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code>\"\n 3260          }\n ....\n 3262        \"(VK_EXT_transform_feedback)\": [\n 3263          {\n 3264:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04094\",\n 3265            \"text\": \" If the <a href=\\\"#features-transformFeedback\\\">transform feedback</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code>\"\n 3266          },\n 3267          {\n 3268:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04094\",\n 3269            \"text\": \" If the <a href=\\\"#features-transformFeedback\\\">transform feedback</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code>\"\n 3270          }\n ....\n 3272        \"(VK_NV_mesh_shader)\": [\n 3273          {\n 3274:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04095\",\n 3275            \"text\": \" If the <a href=\\\"#features-meshShader\\\">mesh shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code>\"\n 3276          },\n 3277          {\n 3278:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04096\",\n 3279            \"text\": \" If the <a href=\\\"#features-taskShader\\\">task shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code>\"\n 3280          },\n 3281          {\n 3282:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04095\",\n 3283            \"text\": \" If the <a href=\\\"#features-meshShader\\\">mesh shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code>\"\n 3284          },\n 3285          {\n 3286:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04096\",\n 3287            \"text\": \" If the <a href=\\\"#features-taskShader\\\">task shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code>\"\n 3288          }\n ....\n 3290        \"(VK_NV_shading_rate_image)\": [\n 3291          {\n 3292:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04097\",\n 3293            \"text\": \" If the <a href=\\\"#features-shadingRateImage\\\">shading rate image</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV</code>\"\n 3294          },\n 3295          {\n 3296:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04097\",\n 3297            \"text\": \" If the <a href=\\\"#features-shadingRateImage\\\">shading rate image</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV</code>\"\n 3298          }\n ....\n 3300        \"(VK_VERSION_1_1,VK_KHR_multiview)\": [\n 3301          {\n 3302:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dependencyFlags-01186\",\n 3303:           \"text\": \" If fname:vkCmdPipelineBarrier is called outside of a render pass instance, <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code> <strong class=\\\"purple\\\">must</strong> not be included in the dependency flags\"\n 3304          }\n 3305        ]\n 3306      },\n 3307:     \"VkMemoryBarrier\": {\n 3308        \"core\": [\n 3309          {\n 3310:           \"vuid\": \"VUID-VkMemoryBarrier-sType-sType\",\n 3311:           \"text\": \" <code>sType</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_BARRIER</code>\"\n 3312          },\n 3313          {\n 3314:           \"vuid\": \"VUID-VkMemoryBarrier-pNext-pNext\",\n 3315            \"text\": \" <code>pNext</code> <strong class=\\\"purple\\\">must</strong> be <code>NULL</code>\"\n 3316          },\n 3317          {\n 3318:           \"vuid\": \"VUID-VkMemoryBarrier-srcAccessMask-parameter\",\n 3319            \"text\": \" <code>srcAccessMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkAccessFlagBits\\\">VkAccessFlagBits</a> values\"\n 3320          },\n 3321          {\n 3322:           \"vuid\": \"VUID-VkMemoryBarrier-dstAccessMask-parameter\",\n 3323            \"text\": \" <code>dstAccessMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkAccessFlagBits\\\">VkAccessFlagBits</a> values\"\n 3324          }\n 3325        ]\n 3326      },\n 3327:     \"VkBufferMemoryBarrier\": {\n 3328        \"core\": [\n 3329          {\n 3330:           \"vuid\": \"VUID-VkBufferMemoryBarrier-offset-01187\",\n 3331            \"text\": \" <code>offset</code> <strong class=\\\"purple\\\">must</strong> be less than the size of <code>buffer</code>\"\n 3332          },\n 3333          {\n 3334:           \"vuid\": \"VUID-VkBufferMemoryBarrier-size-01188\",\n 3335            \"text\": \" If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class=\\\"purple\\\">must</strong> be greater than <code>0</code>\"\n 3336          },\n 3337          {\n 3338:           \"vuid\": \"VUID-VkBufferMemoryBarrier-size-01189\",\n 3339            \"text\": \" If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class=\\\"purple\\\">must</strong> be less than or equal to than the size of <code>buffer</code> minus <code>offset</code>\"\n 3340          },\n 3341          {\n 3342:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-01931\",\n 3343            \"text\": \" If <code>buffer</code> is non-sparse then it <strong class=\\\"purple\\\">must</strong> be bound completely and contiguously to a single <code>VkDeviceMemory</code> object\"\n 3344          },\n 3345          {\n 3346:           \"vuid\": \"VUID-VkBufferMemoryBarrier-sType-sType\",\n 3347:           \"text\": \" <code>sType</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER</code>\"\n 3348          },\n 3349          {\n 3350:           \"vuid\": \"VUID-VkBufferMemoryBarrier-pNext-pNext\",\n 3351            \"text\": \" <code>pNext</code> <strong class=\\\"purple\\\">must</strong> be <code>NULL</code>\"\n 3352          },\n 3353          {\n 3354:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-parameter\",\n 3355            \"text\": \" <code>buffer</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkBuffer\\\">VkBuffer</a> handle\"\n 3356          }\n ....\n 3358        \"!(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3359          {\n 3360:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-04086\",\n 3361            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be valid queue families\"\n 3362          },\n 3363          {\n 3364:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-01190\",\n 3365            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3366          }\n ....\n 3368        \"(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3369          {\n 3370:           \"vuid\": \"VUID-VkBufferMemoryBarrier-srcQueueFamilyIndex-04087\",\n 3371            \"text\": \" If <code>srcQueueFamilyIndex</code> is not equal to <code>dstQueueFamilyIndex</code>, at least one <strong class=\\\"purple\\\">must</strong> not be a special queue family reserved for external memory ownership transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3372          },\n 3373          {\n 3374:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-04088\",\n 3375            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, and one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> is a special queue family values reserved for external memory transfers, the other <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3376          },\n 3377          {\n 3378:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-04089\",\n 3379            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be valid queue families, or one of the special queue family values reserved for external memory transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3380          },\n 3381          {\n 3382:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-01191\",\n 3383            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, at least one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3384          }\n 3385        ]\n 3386      },\n 3387:     \"VkImageMemoryBarrier\": {\n 3388        \"core\": [\n 3389          {\n 3390:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01486\",\n 3391            \"text\": \" <code>subresourceRange.baseMipLevel</code> <strong class=\\\"purple\\\">must</strong> be less than the <code>mipLevels</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3392          },\n 3393          {\n 3394:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01724\",\n 3395            \"text\": \" If <code>subresourceRange.levelCount</code> is not <code>VK_REMAINING_MIP_LEVELS</code>, <span class=\\\"eq\\\"><code>subresourceRange.baseMipLevel</code> &#43; <code>subresourceRange.levelCount</code></span> <strong class=\\\"purple\\\">must</strong> be less than or equal to the <code>mipLevels</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3396          },\n 3397          {\n 3398:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01488\",\n 3399            \"text\": \" <code>subresourceRange.baseArrayLayer</code> <strong class=\\\"purple\\\">must</strong> be less than the <code>arrayLayers</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3400          },\n 3401          {\n 3402:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01725\",\n 3403            \"text\": \" If <code>subresourceRange.layerCount</code> is not <code>VK_REMAINING_ARRAY_LAYERS</code>, <span class=\\\"eq\\\"><code>subresourceRange.baseArrayLayer</code> &#43; <code>subresourceRange.layerCount</code></span> <strong class=\\\"purple\\\">must</strong> be less than or equal to the <code>arrayLayers</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3404          },\n 3405          {\n 3406:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01932\",\n 3407            \"text\": \" If <code>image</code> is non-sparse then it <strong class=\\\"purple\\\">must</strong> be bound completely and contiguously to a single <code>VkDeviceMemory</code> object\"\n 3408          },\n 3409          {\n 3410:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01208\",\n 3411            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code> set\"\n 3412          },\n 3413          {\n 3414:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01209\",\n 3415            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3416          },\n 3417          {\n 3418:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01210\",\n 3419            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3420          },\n 3421          {\n 3422:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01211\",\n 3423            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_SAMPLED_BIT</code> or <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set\"\n 3424          },\n 3425          {\n 3426:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01212\",\n 3427            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> set\"\n 3428          },\n 3429          {\n 3430:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01213\",\n 3431            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> set\"\n 3432          },\n 3433          {\n 3434:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01197\",\n 3435:           \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, <code>oldLayout</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or the current layout of the image subresources affected by the barrier\"\n 3436          },\n 3437          {\n 3438:           \"vuid\": \"VUID-VkImageMemoryBarrier-newLayout-01198\",\n 3439            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, <code>newLayout</code> <strong class=\\\"purple\\\">must</strong> not be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or <code>VK_IMAGE_LAYOUT_PREINITIALIZED</code>\"\n 3440          },\n 3441          {\n 3442:           \"vuid\": \"VUID-VkImageMemoryBarrier-sType-sType\",\n 3443:           \"text\": \" <code>sType</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</code>\"\n 3444          },\n 3445          {\n 3446:           \"vuid\": \"VUID-VkImageMemoryBarrier-pNext-pNext\",\n 3447            \"text\": \" <code>pNext</code> <strong class=\\\"purple\\\">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href=\\\"#VkSampleLocationsInfoEXT\\\">VkSampleLocationsInfoEXT</a>\"\n 3448          },\n 3449          {\n 3450:           \"vuid\": \"VUID-VkImageMemoryBarrier-sType-unique\",\n 3451            \"text\": \" The <code>sType</code> value of each struct in the <code>pNext</code> chain <strong class=\\\"purple\\\">must</strong> be unique\"\n 3452          },\n 3453          {\n 3454:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-parameter\",\n 3455            \"text\": \" <code>oldLayout</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImageLayout\\\">VkImageLayout</a> value\"\n 3456          },\n 3457          {\n 3458:           \"vuid\": \"VUID-VkImageMemoryBarrier-newLayout-parameter\",\n 3459            \"text\": \" <code>newLayout</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImageLayout\\\">VkImageLayout</a> value\"\n 3460          },\n 3461          {\n 3462:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-parameter\",\n 3463            \"text\": \" <code>image</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImage\\\">VkImage</a> handle\"\n 3464          },\n 3465          {\n 3466:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n 3467            \"text\": \" <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImageSubresourceRange\\\">VkImageSubresourceRange</a> structure\"\n 3468          }\n ....\n 3470        \"(VK_VERSION_1_1,VK_KHR_maintenance2)\": [\n 3471          {\n 3472:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01658\",\n 3473            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3474          },\n 3475          {\n 3476:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01659\",\n 3477            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3478          }\n ....\n 3480        \"(VK_VERSION_1_2,VK_EXT_separate_depth_stencil_layouts)\": [\n 3481          {\n 3482:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04065\",\n 3483            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with at least one of <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, or <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set\"\n 3484          },\n 3485          {\n 3486:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04066\",\n 3487            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3488          },\n 3489          {\n 3490:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04067\",\n 3491            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with at least one of <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, or <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set\"\n 3492          },\n 3493          {\n 3494:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04068\",\n 3495            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3496          }\n ....\n 3498        \"(VK_NV_shading_rate_image)\": [\n 3499          {\n 3500:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-02088\",\n 3501            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code> set\"\n 3502          }\n ....\n 3504        \"!(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)\": [\n 3505          {\n 3506:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-02902\",\n 3507            \"text\": \" If <code>image</code> has a color format, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_IMAGE_ASPECT_COLOR_BIT</code>\"\n 3508          }\n ....\n 3510        \"(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)\": [\n 3511          {\n 3512:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01671\",\n 3513            \"text\": \" If <code>image</code> has a single-plane color format or is not <em>disjoint</em>, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_IMAGE_ASPECT_COLOR_BIT</code>\"\n 3514          },\n 3515          {\n 3516:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01672\",\n 3517            \"text\": \" If <code>image</code> has a multi-planar format and the image is <em>disjoint</em>, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include either at least one of <code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, and <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>; or <strong class=\\\"purple\\\">must</strong> include <code>VK_IMAGE_ASPECT_COLOR_BIT</code>\"\n 3518          },\n 3519          {\n 3520:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01673\",\n 3521            \"text\": \" If <code>image</code> has a multi-planar format with only two planes, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> not include <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>\"\n 3522          }\n ....\n 3524        \"!(VK_VERSION_1_2,VK_KHR_separate_depth_stencil_layouts)\": [\n 3525          {\n 3526:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01207\",\n 3527            \"text\": \" If <code>image</code> has a depth/stencil format with both depth and stencil components, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>\"\n 3528          }\n ....\n 3530        \"(VK_VERSION_1_2,VK_KHR_separate_depth_stencil_layouts)\": [\n 3531          {\n 3532:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-03319\",\n 3533            \"text\": \" If <code>image</code> has a depth/stencil format with both depth and stencil and the <a href=\\\"#features-separateDepthStencilLayouts\\\">separateDepthStencilLayouts</a> feature is enabled, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include either or both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>\"\n 3534          },\n 3535          {\n 3536:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-03320\",\n 3537            \"text\": \" If <code>image</code> has a depth/stencil format with both depth and stencil and the <a href=\\\"#features-separateDepthStencilLayouts\\\">separateDepthStencilLayouts</a> feature is not enabled, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>\"\n 3538          }\n ....\n 3540        \"!(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3541          {\n 3542:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-04069\",\n 3543            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be valid queue families\"\n 3544          },\n 3545          {\n 3546:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01199\",\n 3547            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3548          }\n ....\n 3550        \"(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3551          {\n 3552:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04070\",\n 3553            \"text\": \" If <code>srcQueueFamilyIndex</code> is not equal to <code>dstQueueFamilyIndex</code>, at least one <strong class=\\\"purple\\\">must</strong> not be a special queue family reserved for external memory ownership transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3554          },\n 3555          {\n 3556:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-04071\",\n 3557            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, and one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> is a special queue family values reserved for external memory transfers, the other <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3558          },\n 3559          {\n 3560:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-04072\",\n 3561            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be valid queue families, or one of the special queue family values reserved for external memory transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3562          },\n 3563          {\n 3564:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01381\",\n 3565            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, at least one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3566          }\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/registry/vk.xml:\n  888              <member><type>uint32_t</type>               <name>layerCount</name></member>\n  889          </type>\n  890:         <type category=\"struct\" name=\"VkMemoryBarrier\">\n  891:             <member values=\"VK_STRUCTURE_TYPE_MEMORY_BARRIER\"><type>VkStructureType</type> <name>sType</name></member>\n  892              <member>const <type>void</type>*            <name>pNext</name></member>\n  893              <member optional=\"true\"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>\n  894              <member optional=\"true\"><type>VkAccessFlags</type>          <name>dstAccessMask</name><comment>Memory accesses from the destination of the dependency to synchronize</comment></member>\n  895          </type>\n  896:         <type category=\"struct\" name=\"VkBufferMemoryBarrier\">\n  897:             <member values=\"VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER\"><type>VkStructureType</type> <name>sType</name></member>\n  898              <member>const <type>void</type>*            <name>pNext</name></member>\n  899              <member noautovalidity=\"true\"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>\n  ...\n  905              <member><type>VkDeviceSize</type>           <name>size</name><comment>Amount of bytes to sync</comment></member>\n  906          </type>\n  907:         <type category=\"struct\" name=\"VkImageMemoryBarrier\">\n  908:             <member values=\"VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER\"><type>VkStructureType</type> <name>sType</name></member>\n  909              <member>const <type>void</type>*            <name>pNext</name></member>\n  910              <member noautovalidity=\"true\"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>\n  ...\n 2906              <member><type>float</type>                            <name>y</name></member>\n 2907          </type>\n 2908:         <type category=\"struct\" name=\"VkSampleLocationsInfoEXT\" structextends=\"VkImageMemoryBarrier\">\n 2909              <member values=\"VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT\"><type>VkStructureType</type> <name>sType</name></member>\n 2910              <member>const <type>void</type>*                            <name>pNext</name></member>\n ....\n 5365          <enum value=\"42\"    name=\"VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO\"/>\n 5366          <enum value=\"43\"    name=\"VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO\"/>\n 5367:         <enum value=\"44\"    name=\"VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER\"/>\n 5368:         <enum value=\"45\"    name=\"VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER\"/>\n 5369:         <enum value=\"46\"    name=\"VK_STRUCTURE_TYPE_MEMORY_BARRIER\"/>\n 5370          <enum value=\"47\"    name=\"VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO\" comment=\"Reserved for internal use by the loader, layers, and ICDs\"/>\n 5371          <enum value=\"48\"    name=\"VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO\" comment=\"Reserved for internal use by the loader, layers, and ICDs\"/>\n ....\n 7097              <param><type>VkPipelineStageFlags</type> <name>srcStageMask</name></param>\n 7098              <param><type>VkPipelineStageFlags</type> <name>dstStageMask</name></param>\n 7099:             <param optional=\"true\"><type>uint32_t</type> <name>memoryBarrierCount</name></param>\n 7100:             <param len=\"memoryBarrierCount\">const <type>VkMemoryBarrier</type>* <name>pMemoryBarriers</name></param>\n 7101:             <param optional=\"true\"><type>uint32_t</type> <name>bufferMemoryBarrierCount</name></param>\n 7102:             <param len=\"bufferMemoryBarrierCount\">const <type>VkBufferMemoryBarrier</type>* <name>pBufferMemoryBarriers</name></param>\n 7103:             <param optional=\"true\"><type>uint32_t</type> <name>imageMemoryBarrierCount</name></param>\n 7104:             <param len=\"imageMemoryBarrierCount\">const <type>VkImageMemoryBarrier</type>* <name>pImageMemoryBarriers</name></param>\n 7105          </command>\n 7106          <command queues=\"transfer,graphics,compute\" renderpass=\"both\" cmdbufferlevel=\"primary,secondary\">\n 7107:             <proto><type>void</type> <name>vkCmdPipelineBarrier</name></proto>\n 7108              <param externsync=\"true\"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>\n 7109              <param><type>VkPipelineStageFlags</type> <name>srcStageMask</name></param>\n 7110              <param><type>VkPipelineStageFlags</type> <name>dstStageMask</name></param>\n 7111              <param optional=\"true\"><type>VkDependencyFlags</type> <name>dependencyFlags</name></param>\n 7112:             <param optional=\"true\"><type>uint32_t</type> <name>memoryBarrierCount</name></param>\n 7113:             <param len=\"memoryBarrierCount\">const <type>VkMemoryBarrier</type>* <name>pMemoryBarriers</name></param>\n 7114:             <param optional=\"true\"><type>uint32_t</type> <name>bufferMemoryBarrierCount</name></param>\n 7115:             <param len=\"bufferMemoryBarrierCount\">const <type>VkBufferMemoryBarrier</type>* <name>pBufferMemoryBarriers</name></param>\n 7116:             <param optional=\"true\"><type>uint32_t</type> <name>imageMemoryBarrierCount</name></param>\n 7117:             <param len=\"imageMemoryBarrierCount\">const <type>VkImageMemoryBarrier</type>* <name>pImageMemoryBarriers</name></param>\n 7118          </command>\n 7119          <command queues=\"graphics,compute\" renderpass=\"both\" cmdbufferlevel=\"primary,secondary\">\n ....\n 8899              <type name=\"VkBaseInStructure\"/>\n 8900              <type name=\"VkBaseOutStructure\"/>\n 8901:             <type name=\"VkBufferMemoryBarrier\"/>\n 8902              <type name=\"VkDispatchIndirectCommand\"/>\n 8903              <type name=\"VkDrawIndexedIndirectCommand\"/>\n 8904              <type name=\"VkDrawIndirectCommand\"/>\n 8905:             <type name=\"VkImageMemoryBarrier\"/>\n 8906:             <type name=\"VkMemoryBarrier\"/>\n 8907              <type name=\"VkObjectType\"/>\n 8908              <type name=\"VkVendorId\"/>\n ....\n 9367              <command name=\"vkCmdResetEvent\"/>\n 9368              <command name=\"vkCmdWaitEvents\"/>\n 9369:             <command name=\"vkCmdPipelineBarrier\"/>\n 9370              <command name=\"vkCmdBeginQuery\"/>\n 9371              <command name=\"vkCmdEndQuery\"/>\n\n/home/max/dev/Falcor/third_party/slang/source/slang-glslang/slang-glslang.vcxproj:\n  397      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_arithmetics.cpp\" />\n  398      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_atomics.cpp\" />\n  399:     <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_barriers.cpp\" />\n  400      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_bitwise.cpp\" />\n  401      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_builtins.cpp\" />\n\n/home/max/dev/Falcor/third_party/slang/source/slang-glslang/slang-glslang.vcxproj.filters:\n  561        <Filter>Source Files\\spirv-tools\\val</Filter>\n  562      </ClCompile>\n  563:     <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_barriers.cpp\">\n  564        <Filter>Source Files\\spirv-tools\\val</Filter>\n  565      </ClCompile>\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang:\n  746  */\n  747  \n  748: // Barrier for writes to all memory spaces (HLSL SM 5.0)\n  749: __target_intrinsic(glsl, \"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\")\n  750  __target_intrinsic(cuda, \"__threadfence()\")\n  751: void AllMemoryBarrier();\n  752  \n  753: // Thread-group sync and barrier for writes to all memory spaces (HLSL SM 5.0)\n  754: __target_intrinsic(glsl, \"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\")\n  755  __target_intrinsic(cuda, \"__syncthreads()\")\n  756: void AllMemoryBarrierWithGroupSync();\n  757  \n  758  // Test if any components is non-zero (HLSL SM 1.0)\n  ...\n 1405  __generic<T : __BuiltinFloatingPointType, let N : int> T determinant(matrix<T,N,N> m);\n 1406  \n 1407: // Barrier for device memory\n 1408: __target_intrinsic(glsl, \"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\")\n 1409  __target_intrinsic(cuda, \"__threadfence()\")\n 1410: void DeviceMemoryBarrier();\n 1411  \n 1412: __target_intrinsic(glsl, \"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\")\n 1413  __target_intrinsic(glsl, \"__syncthreads()\")\n 1414: void DeviceMemoryBarrierWithGroupSync();\n 1415  \n 1416  // Vector distance\n ....\n 1772  float2 GetRenderTargetSamplePosition(int Index);\n 1773  \n 1774: // Group memory barrier\n 1775: __target_intrinsic(glsl, \"groupMemoryBarrier\")\n 1776  __target_intrinsic(cuda, \"__threadfence_block\")\n 1777: void GroupMemoryBarrier();\n 1778  \n 1779  \n 1780: __target_intrinsic(glsl, \"groupMemoryBarrier(), barrier()\")\n 1781  __target_intrinsic(cuda, \"__syncthreads()\")\n 1782: void GroupMemoryBarrierWithGroupSync();\n 1783  \n 1784  // Atomics\n ....\n 2936  // Waits until all warp lanes named in mask have executed a WaveMaskSharedSync (with the same mask)\n 2937  // before resuming execution. Guarantees memory ordering in shared memory among threads participating\n 2938: // in the barrier.\n 2939  //\n 2940: // The CUDA intrinsic says it orders *all* memory accesses, which appears to match most closely subgroupBarrier.\n 2941  //\n 2942  // TODO(JS):\n ....\n 2947  // \n 2948  // It seems this can only mean the active threads are the \"threads the program flow would lead to\". This implies a lockstep\n 2949: // \"straight SIMD\" style interpretation. That being the case this op on HLSL is just a memory barrier without any Sync.\n 2950  \n 2951  __target_intrinsic(cuda, \"__syncwarp($0)\")\n 2952  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2953  __spirv_version(1.3)\n 2954: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2955: __target_intrinsic(hlsl, \"AllMemoryBarrier()\")\n 2956: void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n 2957  \n 2958: // On GLSL, it appears we can't use subgroupMemoryBarrierShared, because it only implies a memory ordering, it does not\n 2959: // imply convergence. For subgroupBarrier we have from the docs..\n 2960: // \"The function subgroupBarrier() enforces that all active invocations within a subgroup must execute this function before any\n 2961  // are allowed to continue their execution\"\n 2962  // TODO(JS):\n 2963  // It's not entirely clear what to do here on HLSL. \n 2964  // Reading the dxc wiki (https://github.com/Microsoft/DirectXShaderCompiler/wiki/Wave-Intrinsics), we have statements like:\n 2965: //    ... these intrinsics enable the elimination of barrier constructs when the scope of synchronization is within the width of the SIMD processor.\n 2966: //    Wave: A set of lanes executed simultaneously in the processor. No explicit barriers are required to guarantee that they execute in parallel.\n 2967: // Which seems to imply at least some memory barriers like Shared might not be needed.\n 2968  //\n 2969: // The barrier is left here though, because not only is the barrier make writes before the barrier across the wave appear to others afterwards, it's\n 2970  // also there to inform the compiler on what order reads and writes can take place. This might seem to be silly because of the 'Active' lanes\n 2971  // aspect of HLSL seems to make everything in lock step - but that's not quite so, it only has to apparently be that way as far as the programmers\n ....\n 2974  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2975  __spirv_version(1.3)\n 2976: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2977: __target_intrinsic(hlsl, \"GroupMemoryBarrier()\")\n 2978: void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n 2979  \n 2980  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2981  __spirv_version(1.3)\n 2982: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2983: __target_intrinsic(hlsl, \"AllMemoryBarrier()\")\n 2984: void AllMemoryBarrierWithWaveSync();\n 2985  \n 2986  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2987  __spirv_version(1.3)\n 2988: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2989: __target_intrinsic(hlsl, \"GroupMemoryBarrier()\")\n 2990: void GroupMemoryBarrierWithWaveSync();\n 2991  \n 2992  // NOTE! WaveMaskBroadcastLaneAt is *NOT* standard HLSL\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang.h:\n  812  SLANG_RAW(\"*/\\n\")\n  813  SLANG_RAW(\"\\n\")\n  814: SLANG_RAW(\"// Barrier for writes to all memory spaces (HLSL SM 5.0)\\n\")\n  815: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\\\")\\n\")\n  816  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__threadfence()\\\")\\n\")\n  817: SLANG_RAW(\"void AllMemoryBarrier();\\n\")\n  818  SLANG_RAW(\"\\n\")\n  819: SLANG_RAW(\"// Thread-group sync and barrier for writes to all memory spaces (HLSL SM 5.0)\\n\")\n  820: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\\\")\\n\")\n  821  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__syncthreads()\\\")\\n\")\n  822: SLANG_RAW(\"void AllMemoryBarrierWithGroupSync();\\n\")\n  823  SLANG_RAW(\"\\n\")\n  824  SLANG_RAW(\"// Test if any components is non-zero (HLSL SM 1.0)\\n\")\n  ...\n 1471  SLANG_RAW(\"__generic<T : __BuiltinFloatingPointType, let N : int> T determinant(matrix<T,N,N> m);\\n\")\n 1472  SLANG_RAW(\"\\n\")\n 1473: SLANG_RAW(\"// Barrier for device memory\\n\")\n 1474: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\\\")\\n\")\n 1475  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__threadfence()\\\")\\n\")\n 1476: SLANG_RAW(\"void DeviceMemoryBarrier();\\n\")\n 1477  SLANG_RAW(\"\\n\")\n 1478: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\\\")\\n\")\n 1479  SLANG_RAW(\"__target_intrinsic(glsl, \\\"__syncthreads()\\\")\\n\")\n 1480: SLANG_RAW(\"void DeviceMemoryBarrierWithGroupSync();\\n\")\n 1481  SLANG_RAW(\"\\n\")\n 1482  SLANG_RAW(\"// Vector distance\\n\")\n ....\n 1841  SLANG_RAW(\"float2 GetRenderTargetSamplePosition(int Index);\\n\")\n 1842  SLANG_RAW(\"\\n\")\n 1843: SLANG_RAW(\"// Group memory barrier\\n\")\n 1844: SLANG_RAW(\"__target_intrinsic(glsl, \\\"groupMemoryBarrier\\\")\\n\")\n 1845  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__threadfence_block\\\")\\n\")\n 1846: SLANG_RAW(\"void GroupMemoryBarrier();\\n\")\n 1847  SLANG_RAW(\"\\n\")\n 1848  SLANG_RAW(\"\\n\")\n 1849: SLANG_RAW(\"__target_intrinsic(glsl, \\\"groupMemoryBarrier(), barrier()\\\")\\n\")\n 1850  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__syncthreads()\\\")\\n\")\n 1851: SLANG_RAW(\"void GroupMemoryBarrierWithGroupSync();\\n\")\n 1852  SLANG_RAW(\"\\n\")\n 1853  SLANG_RAW(\"// Atomics\\n\")\n ....\n 3023  SLANG_RAW(\"// Waits until all warp lanes named in mask have executed a WaveMaskSharedSync (with the same mask)\\n\")\n 3024  SLANG_RAW(\"// before resuming execution. Guarantees memory ordering in shared memory among threads participating\\n\")\n 3025: SLANG_RAW(\"// in the barrier.\\n\")\n 3026  SLANG_RAW(\"//\\n\")\n 3027: SLANG_RAW(\"// The CUDA intrinsic says it orders *all* memory accesses, which appears to match most closely subgroupBarrier.\\n\")\n 3028  SLANG_RAW(\"//\\n\")\n 3029  SLANG_RAW(\"// TODO(JS):\\n\")\n ....\n 3034  SLANG_RAW(\"// \\n\")\n 3035  SLANG_RAW(\"// It seems this can only mean the active threads are the \\\"threads the program flow would lead to\\\". This implies a lockstep\\n\")\n 3036: SLANG_RAW(\"// \\\"straight SIMD\\\" style interpretation. That being the case this op on HLSL is just a memory barrier without any Sync.\\n\")\n 3037  SLANG_RAW(\"\\n\")\n 3038  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__syncwarp($0)\\\")\\n\")\n 3039  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3040  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3041: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3042: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"AllMemoryBarrier()\\\")\\n\")\n 3043: SLANG_RAW(\"void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\\n\")\n 3044  SLANG_RAW(\"\\n\")\n 3045: SLANG_RAW(\"// On GLSL, it appears we can't use subgroupMemoryBarrierShared, because it only implies a memory ordering, it does not\\n\")\n 3046: SLANG_RAW(\"// imply convergence. For subgroupBarrier we have from the docs..\\n\")\n 3047: SLANG_RAW(\"// \\\"The function subgroupBarrier() enforces that all active invocations within a subgroup must execute this function before any\\n\")\n 3048  SLANG_RAW(\"// are allowed to continue their execution\\\"\\n\")\n 3049  SLANG_RAW(\"// TODO(JS):\\n\")\n 3050  SLANG_RAW(\"// It's not entirely clear what to do here on HLSL. \\n\")\n 3051  SLANG_RAW(\"// Reading the dxc wiki (https://github.com/Microsoft/DirectXShaderCompiler/wiki/Wave-Intrinsics), we have statements like:\\n\")\n 3052: SLANG_RAW(\"//    ... these intrinsics enable the elimination of barrier constructs when the scope of synchronization is within the width of the SIMD processor.\\n\")\n 3053: SLANG_RAW(\"//    Wave: A set of lanes executed simultaneously in the processor. No explicit barriers are required to guarantee that they execute in parallel.\\n\")\n 3054: SLANG_RAW(\"// Which seems to imply at least some memory barriers like Shared might not be needed.\\n\")\n 3055  SLANG_RAW(\"//\\n\")\n 3056: SLANG_RAW(\"// The barrier is left here though, because not only is the barrier make writes before the barrier across the wave appear to others afterwards, it's\\n\")\n 3057  SLANG_RAW(\"// also there to inform the compiler on what order reads and writes can take place. This might seem to be silly because of the 'Active' lanes\\n\")\n 3058  SLANG_RAW(\"// aspect of HLSL seems to make everything in lock step - but that's not quite so, it only has to apparently be that way as far as the programmers\\n\")\n ....\n 3061  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3062  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3063: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3064: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"GroupMemoryBarrier()\\\")\\n\")\n 3065: SLANG_RAW(\"void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\\n\")\n 3066  SLANG_RAW(\"\\n\")\n 3067  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3068  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3069: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3070: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"AllMemoryBarrier()\\\")\\n\")\n 3071: SLANG_RAW(\"void AllMemoryBarrierWithWaveSync();\\n\")\n 3072  SLANG_RAW(\"\\n\")\n 3073  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3074  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3075: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3076: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"GroupMemoryBarrier()\\\")\\n\")\n 3077: SLANG_RAW(\"void GroupMemoryBarrierWithWaveSync();\\n\")\n 3078  SLANG_RAW(\"\\n\")\n 3079  SLANG_RAW(\"// NOTE! WaveMaskBroadcastLaneAt is *NOT* standard HLSL\\n\")\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-emit-c-like.cpp:\n 2275          break;\n 2276  \n 2277:     case kIROp_GroupMemoryBarrierWithGroupSync:\n 2278:         m_writer->emit(\"GroupMemoryBarrierWithGroupSync()\");\n 2279          break;\n 2280  \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-emit-cpp.cpp:\n   30  If we can invoke a bunch of threads as a single invocation we could effectively have the ThreadShared not part of the ABI, but something\n   31  that is say allocated on the stack before the threads are kicked off. If we kick of threads individually then we would need to pass this\n   32: in as part of ABI. NOTE that it isn't right in so far as memory barriers etc couldn't work, as each thread would run to completion, but\n   33: we aren't going to worry about barriers for now. \n   34  \n   35  On 1 - there could be potentially input and outputs (perhaps in out?). On CPU I guess that's fine. \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ir-inst-defs.h:\n  468  INST(SampleGrad, sampleGrad, 4, 0)\n  469  \n  470: INST(GroupMemoryBarrierWithGroupSync, GroupMemoryBarrierWithGroupSync, 0, 0)\n  471  \n  472  // GPU_FOREACH loop of the form \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ir-restructure.cpp:\n  367                      // but it could lead to Bad Things if somebody were to call\n  368                      // a function in their continue clause, and that function does\n  369:                     // a compute shader barrier operation.\n  370                      //\n  371                      // A better long-term fix is to take a high-level loop like:\n  ...\n  395                      // Unlike the current code-duplication solution, `C` appears only once\n  396                      // in the output, and seems to clearly be at a \"joint point\" for control\n  397:                     // flow so that it is clear that a barrier there is valid in GLSL.\n  398                      //\n  399                      // Anyway, back our regularly scheduled programming.\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/atomics-groupshared.slang:\n   18      shared[val] = 0;\n   19  \n   20:     GroupMemoryBarrierWithGroupSync();\n   21  \n   22      uint originalSum = 0;\n   ..\n   31      originalSum += originalValue;\n   32      \n   33:     GroupMemoryBarrierWithGroupSync();\n   34  \n   35      return shared[val] ^ originalSum;\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/groupshared.slang:\n   15  {\n   16  \tgA[val] = val;\n   17: \tGroupMemoryBarrierWithGroupSync();\n   18  \tval = gA[val ^ 1];\n   19  \n   ..\n   22  \n   23  \tgB[val] = val;\n   24: \tGroupMemoryBarrierWithGroupSync();\n   25  \tval = gB[val ^ 2];\n   26  */\n\n/home/max/dev/Falcor/third_party/slang/tests/cross-compile/barriers.slang:\n    1  //TEST:CROSS_COMPILE:-target spirv-assembly -entry main -stage compute\n    2  \n    3: // Confirm that all HLSL barrier operations can be used when cross-compiling.\n    4  \n    5  [numthreads(1,1,1)]\n    6  void main()\n    7  {\n    8: \tAllMemoryBarrier();\n    9: \tAllMemoryBarrierWithGroupSync();\n   10: \tDeviceMemoryBarrier();\n   11: \tDeviceMemoryBarrierWithGroupSync();\n   12: \tGroupMemoryBarrier();\n   13: \tGroupMemoryBarrierWithGroupSync();\n   14  }\n   15  \n\n/home/max/dev/Falcor/third_party/slang/tests/cross-compile/barriers.slang.expected:\n   26           4(main):           2 Function None 3\n   27                 5:             Label\n   28:                               MemoryBarrier 7 8\n   29:                               MemoryBarrier 9 8\n   30:                               MemoryBarrier 7 10\n   31:                               MemoryBarrier 7 11\n   32:                               MemoryBarrier 7 8\n   33:                               MemoryBarrier 9 8\n   34:                               MemoryBarrier 7 10\n   35:                               MemoryBarrier 7 11\n   36:                               ControlBarrier 9 9 12\n   37:                               MemoryBarrier 7 8\n   38:                               MemoryBarrier 7 10\n   39:                               MemoryBarrier 7 11\n   40:                               MemoryBarrier 7 8\n   41:                               MemoryBarrier 7 10\n   42:                               MemoryBarrier 7 11\n   43:                               ControlBarrier 9 9 12\n   44:                               MemoryBarrier 9 8\n   45:                               MemoryBarrier 9 8\n   46:                               ControlBarrier 9 9 12\n   47                                Return\n   48                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/tests/cross-compile/barriers.slang.glsl:\n    4  void main()\n    5  {\n    6:     (memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer());\n    7:     (memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier());\n    8:     (memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer());\n    9:     (memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier());\n   10:     groupMemoryBarrier();\n   11:     (groupMemoryBarrier(), barrier());\n   12  \n   13      return;\n\n/home/max/dev/Falcor/third_party/slang/tests/ir/loop.slang:\n   32      for(uint stride = 1; stride < GROUP_THREAD_COUNT; stride <<= 1)\n   33      {\n   34:         GroupMemoryBarrierWithGroupSync();\n   35  \n   36          s[groupThreadID] += s[groupThreadID - stride];\n   37      }\n   38  \n   39:     GroupMemoryBarrierWithGroupSync();\n   40  \n   41      output[dispatchThreadID] = s[0];\n\n/home/max/dev/Falcor/third_party/slang/tests/ir/loop.slang.expected:\n    8  let  %2\t: int\t= integer_constant(64)\n    9  \n   10: ir_func @_S031GroupMemoryBarrierWithGroupSyncp0pV\t: () -> void;\n   11  \n   12  ir_global_var @_SV06output\t: Ptr<RWStructuredBuffer<vector<float,4>>>;\n   ..\n   33  \n   34  block %18:\n   35: \tcall @_S031GroupMemoryBarrierWithGroupSyncp0pV()\n   36  \tlet  %19\t: Ptr<vector<float,4>>\t= getElementPtr(@_SV01s, %6)\n   37  \tlet  %20\t: vector<float,4>\t= load(%19)\n   ..\n   49  \n   50  block %13:\n   51: \tcall @_S031GroupMemoryBarrierWithGroupSyncp0pV()\n   52  \tlet  %27\t: RWStructuredBuffer<vector<float,4>>\t= load(@_SV06output)\n   53  \tlet  %28\t: Ptr<vector<float,4>>\t= bufferElementRef(%27, %5)\n\n/home/max/dev/Falcor/third_party/slang/tests/slang-extension/atomic-float-byte-address-buffer.slang:\n   38      //workBuffer.InterlockedAddF32(anotherIdx << 2, delta);\n   39      \n   40:     GroupMemoryBarrierWithGroupSync();\n   41      \n   42      if (tid < 4)\n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/render-d3d12.cpp:\n  887          // Make sure it's in the right state\n  888          {\n  889:             D3D12BarrierSubmitter submitter(m_commandList);\n  890              resourceOut.transition(finalState, submitter);\n  891          }\n  ...\n  929      // Indicate that the render target needs to be writable\n  930      {\n  931:         D3D12BarrierSubmitter submitter(m_commandList);\n  932          m_renderTargets[m_renderTargetIndex]->transition(D3D12_RESOURCE_STATE_RENDER_TARGET, submitter);\n  933      }\n  ...\n  951          D3D12Resource& renderTarget = *m_renderTargets[m_renderTargetIndex];\n  952          assert(&renderTarget != &backBuffer);\n  953:         // Barriers to wait for the render target, and the backbuffer to be in correct state\n  954          {\n  955:             D3D12BarrierSubmitter submitter(m_commandList);\n  956              renderTarget.transition(D3D12_RESOURCE_STATE_RESOLVE_SOURCE, submitter);\n  957              backBuffer.transition(D3D12_RESOURCE_STATE_RESOLVE_DEST, submitter);\n  ...\n  964      // Make the back buffer presentable\n  965      {\n  966:         D3D12BarrierSubmitter submitter(m_commandList);\n  967          backBuffer.transition(D3D12_RESOURCE_STATE_PRESENT, submitter);\n  968      }\n  ...\n 1036  \n 1037      {\n 1038:         D3D12BarrierSubmitter submitter(m_commandList);\n 1039          resource.transition(D3D12_RESOURCE_STATE_COPY_SOURCE, submitter);\n 1040      }\n ....\n 1061  \n 1062      {\n 1063:         D3D12BarrierSubmitter submitter(m_commandList);\n 1064          resource.transition(initialState, submitter);\n 1065      }\n ....\n 2245      {\n 2246          const D3D12_RESOURCE_STATES finalState = _calcResourceState(initialUsage);\n 2247:         D3D12BarrierSubmitter submitter(m_commandList);\n 2248          texture->m_resource.transition(finalState, submitter);\n 2249  \n ....\n 2644                  case MapFlavor::WriteDiscard:\n 2645                  {\n 2646:                     D3D12BarrierSubmitter submitter(m_commandList);\n 2647                      buffer->m_uploadResource.transition(D3D12_RESOURCE_STATE_GENERIC_READ, submitter);\n 2648                      buffer->m_resource.transition(D3D12_RESOURCE_STATE_COPY_DEST, submitter);\n ....\n 2680                      // Make it a source\n 2681                      {\n 2682:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2683                          resource.transition(D3D12_RESOURCE_STATE_COPY_SOURCE, submitter);\n 2684                      }\n ....\n 2687                      // Switch it back\n 2688                      {\n 2689:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2690                          resource.transition(initialState, submitter);\n 2691                      }\n ....\n 2752  \n 2753                      {\n 2754:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2755                          buffer->m_uploadResource.transition(D3D12_RESOURCE_STATE_GENERIC_READ, submitter);\n 2756                          buffer->m_resource.transition(D3D12_RESOURCE_STATE_COPY_DEST, submitter);\n ....\n 2760  \n 2761                      {\n 2762:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2763                          buffer->m_resource.transition(initialState, submitter);\n 2764                      }\n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/resource-d3d12.cpp:\n    5  using namespace Slang;\n    6  \n    7: /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! D3D12BarrierSubmitter !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */\n    8  \n    9: void D3D12BarrierSubmitter::_flush()\n   10  {\n   11: \tassert(m_numBarriers > 0);\n   12  \n   13  \tif (m_commandList)\n   14  \t{\n   15: \t\tm_commandList->ResourceBarrier(UINT(m_numBarriers), m_barriers);\n   16  \t}\n   17: \tm_numBarriers = 0;\n   18  }\n   19  \n   20: D3D12_RESOURCE_BARRIER& D3D12BarrierSubmitter::_expandOne()\n   21  {\n   22  \t_flush();\n   23: \treturn m_barriers[m_numBarriers++];\n   24  }\n   25  \n   26: void D3D12BarrierSubmitter::transition(ID3D12Resource* resource, D3D12_RESOURCE_STATES prevState, D3D12_RESOURCE_STATES nextState)\n   27  {\n   28      if (nextState != prevState)\n   29      {\n   30:         D3D12_RESOURCE_BARRIER& barrier = expandOne();\n   31  \n   32:         const UINT subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n   33:         const D3D12_RESOURCE_BARRIER_FLAGS flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n   34  \n   35:         ::memset(&barrier, 0, sizeof(barrier));\n   36:         barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n   37:         barrier.Flags = flags;\n   38:         barrier.Transition.pResource = resource;\n   39:         barrier.Transition.StateBefore = prevState;\n   40:         barrier.Transition.StateAfter = nextState;\n   41:         barrier.Transition.Subresource = subresource;\n   42      }\n   43      else\n   ..\n   45          if (nextState == D3D12_RESOURCE_STATE_UNORDERED_ACCESS)\n   46          {\n   47:             D3D12_RESOURCE_BARRIER& barrier = expandOne();\n   48  \n   49:             ::memset(&barrier, 0, sizeof(barrier));\n   50:             barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_UAV;\n   51:             barrier.UAV.pResource = resource;\n   52          }\n   53      }\n   ..\n   61  }\n   62  \n   63: void D3D12ResourceBase::transition(D3D12_RESOURCE_STATES nextState, D3D12BarrierSubmitter& submitter)\n   64  {\n   65  \t// Transition only if there is a resource\n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/resource-d3d12.h:\n   16  namespace gfx {\n   17  \n   18: // Enables more conservative barriers - restoring the state of resources after they are used.\n   19: // Should not need to be enabled in normal builds, as the barriers should correctly sync resources\n   20: // If enabling fixes an issue it implies regular barriers are not correctly used.\n   21: #define SLANG_ENABLE_CONSERVATIVE_RESOURCE_BARRIERS 0\n   22  \n   23: struct D3D12BarrierSubmitter\n   24  {\n   25: \tenum { MAX_BARRIERS = 8 };\n   26  \n   27: \t/// Expand one space to hold a barrier\n   28: \tSLANG_FORCE_INLINE D3D12_RESOURCE_BARRIER& expandOne() { return (m_numBarriers < MAX_BARRIERS) ? m_barriers[m_numBarriers++] : _expandOne(); }\n   29: \t/// Flush barriers to command list\n   30: \tSLANG_FORCE_INLINE void flush() { if (m_numBarriers > 0) _flush(); }\n   31  \n   32          /// Transition resource from prevState to nextState\n   ..\n   34  \n   35  \t/// Ctor\n   36: \tSLANG_FORCE_INLINE D3D12BarrierSubmitter(ID3D12GraphicsCommandList* commandList) : m_numBarriers(0), m_commandList(commandList) { }\n   37  \t/// Dtor\n   38: \tSLANG_FORCE_INLINE ~D3D12BarrierSubmitter() { flush(); }\n   39  \n   40  protected:\n   41: \tD3D12_RESOURCE_BARRIER& _expandOne();\n   42  \tvoid _flush();\n   43  \n   44  \tID3D12GraphicsCommandList* m_commandList;\n   45: \tint m_numBarriers;\n   46: \tD3D12_RESOURCE_BARRIER m_barriers[MAX_BARRIERS];\n   47  };\n   48  \n   ..\n   99  {\n  100  \t\t/// Add a transition if necessary to the list\n  101: \tvoid transition(D3D12_RESOURCE_STATES nextState, D3D12BarrierSubmitter& submitter);\n  102  \t\t/// Get the current state\n  103  \tSLANG_FORCE_INLINE D3D12_RESOURCE_STATES getState() const { return m_state; }\n  ...\n  113  \n  114  \t\t/// restore previous state\n  115: #if SLANG_ENABLE_CONSERVATIVE_RESOURCE_BARRIERS\n  116: \tSLANG_FORCE_INLINE Void restore(D3D12BarrierSubmitter& submitter) { transition(m_prevState, submitter); }\n  117  #else\n  118: \tSLANG_FORCE_INLINE void restore(D3D12BarrierSubmitter& submitter) { SLANG_UNUSED(submitter) }\n  119  #endif\n  120  \n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/vulkan/render-vk.cpp:\n 1375  void VKRenderer::_transitionImageLayout(VkImage image, VkFormat format, const TextureResource::Desc& desc, VkImageLayout oldLayout, VkImageLayout newLayout)\n 1376  {\n 1377:     VkImageMemoryBarrier barrier = {};\n 1378:     barrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n 1379:     barrier.oldLayout = oldLayout;\n 1380:     barrier.newLayout = newLayout;\n 1381:     barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n 1382:     barrier.dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n 1383:     barrier.image = image;\n 1384:     barrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n 1385:     barrier.subresourceRange.baseMipLevel = 0;\n 1386:     barrier.subresourceRange.levelCount = desc.numMipLevels;\n 1387:     barrier.subresourceRange.baseArrayLayer = 0;\n 1388:     barrier.subresourceRange.layerCount = 1;\n 1389  \n 1390      VkPipelineStageFlags sourceStage;\n ....\n 1393      if (oldLayout == VK_IMAGE_LAYOUT_UNDEFINED && newLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL)\n 1394      {\n 1395:         barrier.srcAccessMask = 0;\n 1396:         barrier.dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n 1397  \n 1398          sourceStage = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;\n ....\n 1401      else if (oldLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL && newLayout == VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL)\n 1402      {\n 1403:         barrier.srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n 1404:         barrier.dstAccessMask = VK_ACCESS_SHADER_READ_BIT;\n 1405  \n 1406          sourceStage = VK_PIPELINE_STAGE_TRANSFER_BIT;\n ....\n 1415      VkCommandBuffer commandBuffer = m_deviceQueue.getCommandBuffer();\n 1416  \n 1417:     m_api.vkCmdPipelineBarrier(commandBuffer, sourceStage, destinationStage, 0, 0, nullptr, 0, nullptr, 1, &barrier);\n 1418  }\n 1419  \n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/vulkan/vk-api.h:\n   83      x(vkCmdBeginRenderPass) \\\n   84      x(vkCmdEndRenderPass) \\\n   85:     x(vkCmdPipelineBarrier) \\\n   86      x(vkCmdCopyBufferToImage)\\\n   87      x(vkCmdPushConstants) \\\n\n2999 matches across 257 files\n\n\nSearching 7381 files for \"barrier\"\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slang-cpp-extractor:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slang-test:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slangc:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/docs/cpu-target.md:\n   16  These limitations apply to Slang transpiling to C++. \n   17  \n   18: * Barriers are not supported (making these work would require an ABI change)\n   19  * Atomics are not supported\n   20  * Complex resource types (such as Texture2d) are work in progress\n\n/home/max/dev/Falcor/third_party/slang/docs/target-compatibility.md:\n   31  | Resource bounds             |     Yes      |   Yes        |   Yes      | Yes (optional)|    Yes\n   32  | Atomics                     |     Yes      |   Yes        |   Yes      |     Yes       |    Yes\n   33: | Group shared mem/Barriers   |     Yes      |   Yes        |   Yes      |     Yes       |    No + \n   34  | TextureArray.Sample float   |     Yes      |   Yes        |   Yes      |     No        |    Yes\n   35  | Separate Sampler            |     Yes      |   Yes        |   Yes      |     No        |    Yes\n\n/home/max/dev/Falcor/third_party/slang/docs/wave-intrinsics.md:\n  199  uint4 WaveGetConvergedMulti();\n  200  \n  201: // Barriers \n  202  \n  203: void AllMemoryBarrierWithWaveSync();\n  204  \n  205: void GroupMemoryBarrierWithWaveSync();\n  206  ```\n  207  \n  ...\n  226  \n  227  ```\n  228: void AllMemoryBarrierWithWaveSync();\n  229  ```\n  230  \n  231: Synchronizes all lanes to the same AllMemoryBarrierWithWaveSync in program flow. Orders all memory accesses such that accesses after the barrier can be seen by writes before.  \n  232  \n  233  ```\n  234: void GroupMemoryBarrierWithWaveSync();\n  235  ```\n  236  \n  237: Synchronizes all lanes to the same GroupMemoryBarrierWithWaveSync in program flow. Orders group shared memory accesses such that accesses after the barrier can be seen by writes before.  \n  238  \n  239  Wave Mask Intrinsics\n  ...\n  257  \n  258  ```\n  259: void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  260  ```\n  261  \n  262: Same as AllMemoryBarrierWithWaveSync but takes a mask of active lanes to sync with. \n  263  \n  264  ```\n  265: void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  266  ```\n  267  \n  268: Same as GroupMemoryBarrierWithWaveSync but takes a mask of active lanes to sync with. \n  269   \n  270  The intrinsics that make up the Slang `WaveMask` extension. \n  ...\n  291  WaveMask WaveMaskMatch<T>(WaveMask mask, T value);\n  292  \n  293: // Barriers\n  294  \n  295: void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  296  \n  297: void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  298  \n  299  // Across lane ops\n\n/home/max/dev/Falcor/third_party/slang/external/glext.h:\n 2102  #define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA\n 2103  #define GL_UNSIGNED_INT_ATOMIC_COUNTER    0x92DB\n 2104: #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001\n 2105: #define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002\n 2106: #define GL_UNIFORM_BARRIER_BIT            0x00000004\n 2107: #define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008\n 2108: #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020\n 2109: #define GL_COMMAND_BARRIER_BIT            0x00000040\n 2110: #define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080\n 2111: #define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100\n 2112: #define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200\n 2113: #define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400\n 2114: #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800\n 2115: #define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000\n 2116: #define GL_ALL_BARRIER_BITS               0xFFFFFFFF\n 2117  #define GL_MAX_IMAGE_UNITS                0x8F38\n 2118  #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39\n ....\n 2177  typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);\n 2178  typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 2179: typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);\n 2180  typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2181  typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n ....\n 2190  GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);\n 2191  GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 2192: GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);\n 2193  GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2194  GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n ....\n 2441  #define GL_MAX_SHADER_STORAGE_BLOCK_SIZE  0x90DE\n 2442  #define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF\n 2443: #define GL_SHADER_STORAGE_BARRIER_BIT     0x00002000\n 2444  #define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39\n 2445  #define GL_DEPTH_STENCIL_TEXTURE_MODE     0x90EA\n ....\n 2560  #define GL_DYNAMIC_STORAGE_BIT            0x0100\n 2561  #define GL_CLIENT_STORAGE_BIT             0x0200\n 2562: #define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000\n 2563  #define GL_BUFFER_IMMUTABLE_STORAGE       0x821F\n 2564  #define GL_BUFFER_STORAGE_FLAGS           0x8220\n ....\n 2568  #define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C\n 2569  #define GL_QUERY_BUFFER                   0x9192\n 2570: #define GL_QUERY_BUFFER_BARRIER_BIT       0x00008000\n 2571  #define GL_QUERY_BUFFER_BINDING           0x9193\n 2572  #define GL_QUERY_RESULT_NO_WAIT           0x9194\n ....\n 2716  typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2717  typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2718: typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers);\n 2719  typedef void (APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);\n 2720  typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);\n ....\n 2739  typedef void (APIENTRYP PFNGLGETNHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2740  typedef void (APIENTRYP PFNGLGETNMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2741: typedef void (APIENTRYP PFNGLTEXTUREBARRIERPROC) (void);\n 2742  #ifdef GL_GLEXT_PROTOTYPES\n 2743  GLAPI void APIENTRY glClipControl (GLenum origin, GLenum depth);\n ....\n 2839  GLAPI void APIENTRY glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2840  GLAPI void APIENTRY glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2841: GLAPI void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers);\n 2842  GLAPI void APIENTRY glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);\n 2843  GLAPI void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);\n ....\n 2862  GLAPI void APIENTRY glGetnHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2863  GLAPI void APIENTRY glGetnMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2864: GLAPI void APIENTRY glTextureBarrier (void);\n 2865  #endif\n 2866  #endif /* GL_VERSION_4_5 */\n ....\n 4298  #endif /* GL_ARB_tessellation_shader */\n 4299  \n 4300: #ifndef GL_ARB_texture_barrier\n 4301: #define GL_ARB_texture_barrier 1\n 4302: #endif /* GL_ARB_texture_barrier */\n 4303  \n 4304  #ifndef GL_ARB_texture_border_clamp\n ....\n 4919  #define GL_HSL_COLOR_KHR                  0x92AF\n 4920  #define GL_HSL_LUMINOSITY_KHR             0x92B0\n 4921: typedef void (APIENTRYP PFNGLBLENDBARRIERKHRPROC) (void);\n 4922  #ifdef GL_GLEXT_PROTOTYPES\n 4923: GLAPI void APIENTRY glBlendBarrierKHR (void);\n 4924  #endif\n 4925  #endif /* GL_KHR_blend_equation_advanced */\n ....\n 7889  #define GL_MAX_IMAGE_SAMPLES_EXT          0x906D\n 7890  #define GL_IMAGE_BINDING_FORMAT_EXT       0x906E\n 7891: #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001\n 7892: #define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT  0x00000002\n 7893: #define GL_UNIFORM_BARRIER_BIT_EXT        0x00000004\n 7894: #define GL_TEXTURE_FETCH_BARRIER_BIT_EXT  0x00000008\n 7895: #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020\n 7896: #define GL_COMMAND_BARRIER_BIT_EXT        0x00000040\n 7897: #define GL_PIXEL_BUFFER_BARRIER_BIT_EXT   0x00000080\n 7898: #define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100\n 7899: #define GL_BUFFER_UPDATE_BARRIER_BIT_EXT  0x00000200\n 7900: #define GL_FRAMEBUFFER_BARRIER_BIT_EXT    0x00000400\n 7901: #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800\n 7902: #define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000\n 7903: #define GL_ALL_BARRIER_BITS_EXT           0xFFFFFFFF\n 7904  typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);\n 7905: typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);\n 7906  #ifdef GL_GLEXT_PROTOTYPES\n 7907  GLAPI void APIENTRY glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);\n 7908: GLAPI void APIENTRY glMemoryBarrierEXT (GLbitfield barriers);\n 7909  #endif\n 7910  #endif /* GL_EXT_shader_image_load_store */\n ....\n 9217  #define GL_XOR_NV                         0x1506\n 9218  typedef void (APIENTRYP PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value);\n 9219: typedef void (APIENTRYP PFNGLBLENDBARRIERNVPROC) (void);\n 9220  #ifdef GL_GLEXT_PROTOTYPES\n 9221  GLAPI void APIENTRY glBlendParameteriNV (GLenum pname, GLint value);\n 9222: GLAPI void APIENTRY glBlendBarrierNV (void);\n 9223  #endif\n 9224  #endif /* GL_NV_blend_equation_advanced */\n ....\n 9670  typedef void (APIENTRYP PFNGLMULTICASTBLITFRAMEBUFFERNVPROC) (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 9671  typedef void (APIENTRYP PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);\n 9672: typedef void (APIENTRYP PFNGLMULTICASTBARRIERNVPROC) (void);\n 9673  typedef void (APIENTRYP PFNGLMULTICASTWAITSYNCNVPROC) (GLuint signalGpu, GLbitfield waitGpuMask);\n 9674  typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint *params);\n ....\n 9683  GLAPI void APIENTRY glMulticastBlitFramebufferNV (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 9684  GLAPI void APIENTRY glMulticastFramebufferSampleLocationsfvNV (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);\n 9685: GLAPI void APIENTRY glMulticastBarrierNV (void);\n 9686  GLAPI void APIENTRY glMulticastWaitSyncNV (GLuint signalGpu, GLbitfield waitGpuMask);\n 9687  GLAPI void APIENTRY glMulticastGetQueryObjectivNV (GLuint gpu, GLuint id, GLenum pname, GLint *params);\n ....\n 10487  #ifndef GL_NV_shader_buffer_store\n 10488  #define GL_NV_shader_buffer_store 1\n 10489: #define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010\n 10490  #endif /* GL_NV_shader_buffer_store */\n 10491  \n .....\n 10531  #endif /* GL_NV_texgen_reflection */\n 10532  \n 10533: #ifndef GL_NV_texture_barrier\n 10534: #define GL_NV_texture_barrier 1\n 10535: typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC) (void);\n 10536  #ifdef GL_GLEXT_PROTOTYPES\n 10537: GLAPI void APIENTRY glTextureBarrierNV (void);\n 10538  #endif\n 10539: #endif /* GL_NV_texture_barrier */\n 10540  \n 10541  #ifndef GL_NV_texture_compression_vtc\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/HLSL/hlslParseables.cpp:\n  511          { \"acos\",                             nullptr, nullptr,   \"SVM\",            \"F\",             EShLangAll,    false },\n  512          { \"all\",                              \"S\",    \"B\",        \"SVM\",            \"BFIU\",          EShLangAll,    false },\n  513:         { \"AllMemoryBarrier\",                 nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  514:         { \"AllMemoryBarrierWithGroupSync\",    nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  515          { \"any\",                              \"S\",     \"B\",       \"SVM\",            \"BFIU\",          EShLangAll,    false },\n  516          { \"asdouble\",                         \"S\",     \"D\",       \"S,\",             \"UI,\",           EShLangAll,    false },\n  ...\n  539          { \"degrees\",                          nullptr, nullptr,   \"SVM\",            \"F\",             EShLangAll,    false },\n  540          { \"determinant\",                      \"S\",     \"F\",       \"M\",              \"F\",             EShLangAll,    false },\n  541:         { \"DeviceMemoryBarrier\",              nullptr, nullptr,   \"-\",              \"-\",             EShLangPSCS,   false },\n  542:         { \"DeviceMemoryBarrierWithGroupSync\", nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  543          { \"distance\",                         \"S\",     \"F\",       \"SV,\",            \"F,\",            EShLangAll,    false },\n  544          { \"dot\",                              \"S\",     nullptr,   \"SV,\",            \"FI,\",           EShLangAll,    false },\n  ...\n  563          { \"GetRenderTargetSampleCount\",       \"S\",     \"U\",       \"-\",              \"-\",             EShLangAll,    false },\n  564          { \"GetRenderTargetSamplePosition\",    \"V2\",    \"F\",       \"V1\",             \"I\",             EShLangAll,    false },\n  565:         { \"GroupMemoryBarrier\",               nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  566:         { \"GroupMemoryBarrierWithGroupSync\",  nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  567          { \"InterlockedAdd\",                   \"-\",     \"-\",       \"SVM,,>\",         \"UI,,\",          EShLangPSCS,   false },\n  568          { \"InterlockedAdd\",                   \"-\",     \"-\",       \"SVM,\",           \"UI,\",           EShLangPSCS,   false },\n  ...\n 1027      symbolTable.relateToOperator(\"acos\",                        EOpAcos);\n 1028      symbolTable.relateToOperator(\"all\",                         EOpAll);\n 1029:     symbolTable.relateToOperator(\"AllMemoryBarrier\",            EOpMemoryBarrier);\n 1030:     symbolTable.relateToOperator(\"AllMemoryBarrierWithGroupSync\", EOpAllMemoryBarrierWithGroupSync);\n 1031      symbolTable.relateToOperator(\"any\",                         EOpAny);\n 1032      symbolTable.relateToOperator(\"asdouble\",                    EOpAsDouble);\n ....\n 1054      symbolTable.relateToOperator(\"degrees\",                     EOpDegrees);\n 1055      symbolTable.relateToOperator(\"determinant\",                 EOpDeterminant);\n 1056:     symbolTable.relateToOperator(\"DeviceMemoryBarrier\",         EOpDeviceMemoryBarrier);\n 1057:     symbolTable.relateToOperator(\"DeviceMemoryBarrierWithGroupSync\", EOpDeviceMemoryBarrierWithGroupSync);\n 1058      symbolTable.relateToOperator(\"distance\",                    EOpDistance);\n 1059      symbolTable.relateToOperator(\"dot\",                         EOpDot);\n ....\n 1078      // symbolTable.relateToOperator(\"GetRenderTargetSampleCount\");\n 1079      // symbolTable.relateToOperator(\"GetRenderTargetSamplePosition\");\n 1080:     symbolTable.relateToOperator(\"GroupMemoryBarrier\",          EOpWorkgroupMemoryBarrier);\n 1081:     symbolTable.relateToOperator(\"GroupMemoryBarrierWithGroupSync\", EOpWorkgroupMemoryBarrierWithGroupSync);\n 1082      symbolTable.relateToOperator(\"InterlockedAdd\",              EOpInterlockedAdd);\n 1083      symbolTable.relateToOperator(\"InterlockedAnd\",              EOpInterlockedAnd);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/HLSL/hlslParseHelper.cpp:\n 9784      //    indirections into a complex R-value coming from the call to the PCF.\n 9785      //\n 9786:     // 4. Create a barrier.\n 9787      //\n 9788      // 5/5B. Call the PCF inside an if test for (invocation id == 0).\n ....\n 10048      }\n 10049  \n 10050:     // ================ Step 4: Barrier ================\n 10051:     TIntermTyped* barrier = new TIntermAggregate(EOpBarrier);\n 10052:     barrier->setLoc(loc);\n 10053:     barrier->setType(TType(EbtVoid));\n 10054:     epBodySeq.insert(epBodySeq.end(), barrier);\n 10055  \n 10056      // ================ Step 5: Test on invocation ID ================\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/Include/intermediate.h:\n  462      EOpEndStreamPrimitive,   // geometry only\n  463  \n  464:     EOpBarrier,\n  465:     EOpMemoryBarrier,\n  466:     EOpMemoryBarrierAtomicCounter,\n  467:     EOpMemoryBarrierBuffer,\n  468:     EOpMemoryBarrierImage,\n  469:     EOpMemoryBarrierShared,  // compute only\n  470:     EOpGroupMemoryBarrier,   // compute only\n  471  \n  472      EOpBallot,\n  ...\n  479  \n  480      EOpSubgroupGuardStart,\n  481:     EOpSubgroupBarrier,\n  482:     EOpSubgroupMemoryBarrier,\n  483:     EOpSubgroupMemoryBarrierBuffer,\n  484:     EOpSubgroupMemoryBarrierImage,\n  485:     EOpSubgroupMemoryBarrierShared, // compute only\n  486      EOpSubgroupElect,\n  487      EOpSubgroupAll,\n  ...\n  968      EOpInterlockedOr,       // ...\n  969      EOpInterlockedXor,      // ...\n  970:     EOpAllMemoryBarrierWithGroupSync,    // memory barriers without non-hlsl AST equivalents\n  971:     EOpDeviceMemoryBarrier,              // ...\n  972:     EOpDeviceMemoryBarrierWithGroupSync, // ...\n  973:     EOpWorkgroupMemoryBarrier,           // ...\n  974:     EOpWorkgroupMemoryBarrierWithGroupSync, // ...\n  975      EOpEvaluateAttributeSnapped,         // InterpolateAtOffset with int position on 16x16 grid\n  976      EOpF32tof16,                         // HLSL conversion: half of a PackHalf2x16\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp:\n  288  \n  289  const CustomFunction CustomFunctions[] = {\n  290:     { EOpBarrier,             \"barrier\",             nullptr },\n  291:     { EOpMemoryBarrierShared, \"memoryBarrierShared\", nullptr },\n  292:     { EOpGroupMemoryBarrier,  \"groupMemoryBarrier\",  nullptr },\n  293:     { EOpMemoryBarrier,       \"memoryBarrier\",       nullptr },\n  294:     { EOpMemoryBarrierBuffer, \"memoryBarrierBuffer\", nullptr },\n  295  \n  296      { EOpPackSnorm2x16,       \"packSnorm2x16\",       nullptr },\n  ...\n 1805          (profile != EEsProfile && version >= 140)) {\n 1806          commonBuiltins.append(\n 1807:             \"void subgroupBarrier();\"\n 1808:             \"void subgroupMemoryBarrier();\"\n 1809:             \"void subgroupMemoryBarrierBuffer();\"\n 1810:             \"void subgroupMemoryBarrierImage();\"\n 1811              \"bool subgroupElect();\"\n 1812  \n ....\n 1947  \n 1948          stageBuiltins[EShLangCompute].append(\n 1949:             \"void subgroupMemoryBarrierShared();\"\n 1950  \n 1951              \"\\n\"\n 1952              );\n 1953          stageBuiltins[EShLangMeshNV].append(\n 1954:             \"void subgroupMemoryBarrierShared();\"\n 1955              \"\\n\"\n 1956              );\n 1957          stageBuiltins[EShLangTaskNV].append(\n 1958:             \"void subgroupMemoryBarrierShared();\"\n 1959              \"\\n\"\n 1960              );\n ....\n 4065      //\n 4066      //============================================================================\n 4067:     bool esBarrier = (profile == EEsProfile && version >= 310);\n 4068:     if ((profile != EEsProfile && version >= 150) || esBarrier)\n 4069          stageBuiltins[EShLangTessControl].append(\n 4070:             \"void barrier();\"\n 4071              );\n 4072:     if ((profile != EEsProfile && version >= 420) || esBarrier)\n 4073          stageBuiltins[EShLangCompute].append(\n 4074:             \"void barrier();\"\n 4075              );\n 4076      if ((profile != EEsProfile && version >= 450) || (profile == EEsProfile && version >= 320)) {\n 4077          stageBuiltins[EShLangMeshNV].append(\n 4078:             \"void barrier();\"\n 4079              );\n 4080          stageBuiltins[EShLangTaskNV].append(\n 4081:             \"void barrier();\"\n 4082              );\n 4083      }\n 4084:     if ((profile != EEsProfile && version >= 130) || esBarrier)\n 4085          commonBuiltins.append(\n 4086:             \"void memoryBarrier();\"\n 4087              );\n 4088:     if ((profile != EEsProfile && version >= 420) || esBarrier) {\n 4089          commonBuiltins.append(\n 4090:             \"void memoryBarrierBuffer();\"\n 4091              );\n 4092          stageBuiltins[EShLangCompute].append(\n 4093:             \"void memoryBarrierShared();\"\n 4094:             \"void groupMemoryBarrier();\"\n 4095              );\n 4096      }\n 4097  #ifndef GLSLANG_WEB\n 4098:     if ((profile != EEsProfile && version >= 420) || esBarrier) {\n 4099          if (spvVersion.vulkan == 0) {\n 4100:             commonBuiltins.append(\"void memoryBarrierAtomicCounter();\");\n 4101          }\n 4102:         commonBuiltins.append(\"void memoryBarrierImage();\");\n 4103      }\n 4104      if ((profile != EEsProfile && version >= 450) || (profile == EEsProfile && version >= 320)) {\n 4105          stageBuiltins[EShLangMeshNV].append(\n 4106:             \"void memoryBarrierShared();\"\n 4107:             \"void groupMemoryBarrier();\"\n 4108          );\n 4109          stageBuiltins[EShLangTaskNV].append(\n 4110:             \"void memoryBarrierShared();\"\n 4111:             \"void groupMemoryBarrier();\"\n 4112          );\n 4113      }\n 4114  \n 4115:     commonBuiltins.append(\"void controlBarrier(int, int, int, int);\\n\"\n 4116:                           \"void memoryBarrier(int, int, int);\\n\");\n 4117  \n 4118      commonBuiltins.append(\"void debugPrintfEXT();\\n\");\n ....\n 7754          // E_GL_ARB_shader_image_load_store\n 7755          if (profile != EEsProfile && version < 420)\n 7756:             symbolTable.setFunctionExtensions(\"memoryBarrier\", 1, &E_GL_ARB_shader_image_load_store);\n 7757          // All the image access functions are protected by checks on the type of the first argument.\n 7758  \n ....\n 7981              BuiltInVariable(\"gl_SubgroupLtMask\",       EbvSubgroupLtMask2,     symbolTable);\n 7982  \n 7983:             symbolTable.setFunctionExtensions(\"subgroupBarrier\",                 1, &E_GL_KHR_shader_subgroup_basic);\n 7984:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrier\",           1, &E_GL_KHR_shader_subgroup_basic);\n 7985:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierBuffer\",     1, &E_GL_KHR_shader_subgroup_basic);\n 7986:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierImage\",      1, &E_GL_KHR_shader_subgroup_basic);\n 7987              symbolTable.setFunctionExtensions(\"subgroupElect\",                   1, &E_GL_KHR_shader_subgroup_basic);\n 7988              symbolTable.setFunctionExtensions(\"subgroupAll\",                     1, &E_GL_KHR_shader_subgroup_vote);\n ....\n 8132              symbolTable.setVariableExtensions(\"gl_MaxComputeAtomicCounterBuffers\", 1, &E_GL_ARB_compute_shader);\n 8133  \n 8134:             symbolTable.setFunctionExtensions(\"barrier\",                    1, &E_GL_ARB_compute_shader);\n 8135:             symbolTable.setFunctionExtensions(\"memoryBarrierAtomicCounter\", 1, &E_GL_ARB_compute_shader);\n 8136:             symbolTable.setFunctionExtensions(\"memoryBarrierBuffer\",        1, &E_GL_ARB_compute_shader);\n 8137:             symbolTable.setFunctionExtensions(\"memoryBarrierImage\",         1, &E_GL_ARB_compute_shader);\n 8138:             symbolTable.setFunctionExtensions(\"memoryBarrierShared\",        1, &E_GL_ARB_compute_shader);\n 8139:             symbolTable.setFunctionExtensions(\"groupMemoryBarrier\",         1, &E_GL_ARB_compute_shader);\n 8140          }\n 8141  \n 8142  \n 8143:         symbolTable.setFunctionExtensions(\"controlBarrier\",                 1, &E_GL_KHR_memory_scope_semantics);\n 8144          symbolTable.setFunctionExtensions(\"debugPrintfEXT\",                 1, &E_GL_EXT_debug_printf);\n 8145  \n ....\n 8207              BuiltInVariable(\"gl_SubgroupID\",   EbvSubgroupID,   symbolTable);\n 8208  \n 8209:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierShared\", 1, &E_GL_KHR_shader_subgroup_basic);\n 8210          }\n 8211  \n ....\n 8446  \n 8447              // builtin functions\n 8448:             symbolTable.setFunctionExtensions(\"barrier\",                      1, &E_GL_NV_mesh_shader);\n 8449:             symbolTable.setFunctionExtensions(\"memoryBarrierShared\",          1, &E_GL_NV_mesh_shader);\n 8450:             symbolTable.setFunctionExtensions(\"groupMemoryBarrier\",           1, &E_GL_NV_mesh_shader);\n 8451          }\n 8452  \n ....\n 8509              BuiltInVariable(\"gl_SubgroupLtMask\",       EbvSubgroupLtMask2,     symbolTable);\n 8510  \n 8511:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierShared\", 1, &E_GL_KHR_shader_subgroup_basic);\n 8512  \n 8513              // GL_NV_shader_sm_builtins\n ....\n 8546              symbolTable.setVariableExtensions(\"gl_MaxMeshViewCountNV\",     1, &E_GL_NV_mesh_shader);\n 8547  \n 8548:             symbolTable.setFunctionExtensions(\"barrier\",                   1, &E_GL_NV_mesh_shader);\n 8549:             symbolTable.setFunctionExtensions(\"memoryBarrierShared\",       1, &E_GL_NV_mesh_shader);\n 8550:             symbolTable.setFunctionExtensions(\"groupMemoryBarrier\",        1, &E_GL_NV_mesh_shader);\n 8551          }\n 8552  \n ....\n 8609              BuiltInVariable(\"gl_SubgroupLtMask\",       EbvSubgroupLtMask2,     symbolTable);\n 8610  \n 8611:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierShared\", 1, &E_GL_KHR_shader_subgroup_basic);\n 8612  \n 8613              // GL_NV_shader_sm_builtins\n ....\n 8686      symbolTable.relateToOperator(\"unpack8\",         EOpUnpack8);\n 8687  \n 8688:     symbolTable.relateToOperator(\"controlBarrier\",             EOpBarrier);\n 8689:     symbolTable.relateToOperator(\"memoryBarrierAtomicCounter\", EOpMemoryBarrierAtomicCounter);\n 8690:     symbolTable.relateToOperator(\"memoryBarrierImage\",         EOpMemoryBarrierImage);\n 8691  \n 8692      symbolTable.relateToOperator(\"atomicLoad\",     EOpAtomicLoad);\n ....\n 8921          if ((profile == EEsProfile && version >= 310) ||\n 8922              (profile != EEsProfile && version >= 140)) {\n 8923:             symbolTable.relateToOperator(\"subgroupBarrier\",                 EOpSubgroupBarrier);\n 8924:             symbolTable.relateToOperator(\"subgroupMemoryBarrier\",           EOpSubgroupMemoryBarrier);\n 8925:             symbolTable.relateToOperator(\"subgroupMemoryBarrierBuffer\",     EOpSubgroupMemoryBarrierBuffer);\n 8926:             symbolTable.relateToOperator(\"subgroupMemoryBarrierImage\",      EOpSubgroupMemoryBarrierImage);\n 8927              symbolTable.relateToOperator(\"subgroupElect\",                   EOpSubgroupElect);\n 8928              symbolTable.relateToOperator(\"subgroupAll\",                     EOpSubgroupAll);\n ....\n 9070  \n 9071      case EShLangCompute:\n 9072:         symbolTable.relateToOperator(\"subgroupMemoryBarrierShared\", EOpSubgroupMemoryBarrierShared);\n 9073          if ((profile != EEsProfile && version >= 450) ||\n 9074              (profile == EEsProfile && version >= 320)) {\n ....\n 9125      case EShLangTaskNV:\n 9126          if ((profile != EEsProfile && version >= 450) || (profile == EEsProfile && version >= 320)) {\n 9127:             symbolTable.relateToOperator(\"memoryBarrierShared\", EOpMemoryBarrierShared);\n 9128:             symbolTable.relateToOperator(\"groupMemoryBarrier\", EOpGroupMemoryBarrier);\n 9129:             symbolTable.relateToOperator(\"subgroupMemoryBarrierShared\", EOpSubgroupMemoryBarrierShared);\n 9130          }\n 9131          break;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/intermOut.cpp:\n  863      case EOpEndPrimitive:  out.debug << \"EndPrimitive\";            break;\n  864  \n  865:     case EOpBarrier:                    out.debug << \"Barrier\";                    break;\n  866:     case EOpMemoryBarrier:              out.debug << \"MemoryBarrier\";              break;\n  867:     case EOpMemoryBarrierAtomicCounter: out.debug << \"MemoryBarrierAtomicCounter\"; break;\n  868:     case EOpMemoryBarrierBuffer:        out.debug << \"MemoryBarrierBuffer\";        break;\n  869:     case EOpMemoryBarrierImage:         out.debug << \"MemoryBarrierImage\";         break;\n  870:     case EOpMemoryBarrierShared:        out.debug << \"MemoryBarrierShared\";        break;\n  871:     case EOpGroupMemoryBarrier:         out.debug << \"GroupMemoryBarrier\";         break;\n  872  \n  873      case EOpReadInvocation:             out.debug << \"readInvocation\";        break;\n  ...\n  992      case EOpGenMul:                     out.debug << \"mul\";                   break;\n  993  \n  994:     case EOpAllMemoryBarrierWithGroupSync:    out.debug << \"AllMemoryBarrierWithGroupSync\";    break;\n  995:     case EOpDeviceMemoryBarrier:              out.debug << \"DeviceMemoryBarrier\";              break;\n  996:     case EOpDeviceMemoryBarrierWithGroupSync: out.debug << \"DeviceMemoryBarrierWithGroupSync\"; break;\n  997:     case EOpWorkgroupMemoryBarrier:           out.debug << \"WorkgroupMemoryBarrier\";           break;\n  998:     case EOpWorkgroupMemoryBarrierWithGroupSync: out.debug << \"WorkgroupMemoryBarrierWithGroupSync\"; break;\n  999  \n 1000:     case EOpSubgroupBarrier:                 out.debug << \"subgroupBarrier\"; break;\n 1001:     case EOpSubgroupMemoryBarrier:           out.debug << \"subgroupMemoryBarrier\"; break;\n 1002:     case EOpSubgroupMemoryBarrierBuffer:     out.debug << \"subgroupMemoryBarrierBuffer\"; break;\n 1003:     case EOpSubgroupMemoryBarrierImage:      out.debug << \"subgroupMemoryBarrierImage\";   break;\n 1004:     case EOpSubgroupMemoryBarrierShared:     out.debug << \"subgroupMemoryBarrierShared\"; break;\n 1005      case EOpSubgroupElect:                   out.debug << \"subgroupElect\"; break;\n 1006      case EOpSubgroupAll:                     out.debug << \"subgroupAll\"; break;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/ParseHelper.cpp:\n 1445  #ifndef GLSLANG_WEB\n 1446      switch (op) {\n 1447:     case EOpBarrier:\n 1448          if (language == EShLangTessControl) {\n 1449              if (controlFlowNestingLevel > 0)\n 1450:                 error(loc, \"tessellation control barrier() cannot be placed within flow control\", \"\", \"\");\n 1451              if (! inMain)\n 1452:                 error(loc, \"tessellation control barrier() must be in main()\", \"\", \"\");\n 1453              else if (postEntryPointReturn)\n 1454:                 error(loc, \"tessellation control barrier() cannot be placed after a return from main()\", \"\", \"\");\n 1455          }\n 1456          break;\n ....\n 1752          break;\n 1753  \n 1754:     case EOpBarrier:\n 1755          storageClassSemantics = (*argp)[2]->getAsConstantUnion()->getConstArray()[0].getIConst();\n 1756          semantics = (*argp)[3]->getAsConstantUnion()->getConstArray()[0].getIConst();\n 1757          break;\n 1758:     case EOpMemoryBarrier:\n 1759          storageClassSemantics = (*argp)[1]->getAsConstantUnion()->getConstArray()[0].getIConst();\n 1760          semantics = (*argp)[2]->getAsConstantUnion()->getConstArray()[0].getIConst();\n ....\n 1795      }\n 1796  \n 1797:     if (callNode.getOp() == EOpMemoryBarrier) {\n 1798          if (!IsPow2(semantics & (gl_SemanticsAcquire | gl_SemanticsRelease | gl_SemanticsAcquireRelease))) {\n 1799              error(loc, \"Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or \"\n ....\n 1814          }\n 1815      }\n 1816:     if (callNode.getOp() == EOpMemoryBarrier) {\n 1817          if (storageClassSemantics == 0) {\n 1818              error(loc, \"Storage class semantics must not be zero\", fnCandidate.getName().c_str(), \"\");\n 1819          }\n 1820      }\n 1821:     if (callNode.getOp() == EOpBarrier && semantics != 0 && storageClassSemantics == 0) {\n 1822          error(loc, \"Storage class semantics must not be zero\", fnCandidate.getName().c_str(), \"\");\n 1823      }\n ....\n 1838      }\n 1839      if ((semantics & gl_SemanticsVolatile) &&\n 1840:         (callNode.getOp() == EOpMemoryBarrier || callNode.getOp() == EOpBarrier)) {\n 1841:         error(loc, \"gl_SemanticsVolatile must not be used with memoryBarrier or controlBarrier\",\n 1842                fnCandidate.getName().c_str(), \"\");\n 1843      }\n ....\n 2233          break;\n 2234  \n 2235:     case EOpBarrier:\n 2236:     case EOpMemoryBarrier:\n 2237          if (argp->size() > 0) {\n 2238              requireExtensions(loc, 1, &E_GL_KHR_memory_scope_semantics, fnCandidate.getName().c_str());\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/gtests/Hlsl.FromFile.cpp:\n  244          {\"hlsl.init2.frag\", \"main\"},\n  245          {\"hlsl.isfinite.frag\", \"main\"},\n  246:         {\"hlsl.intrinsics.barriers.comp\", \"ComputeShaderFunction\"},\n  247          {\"hlsl.intrinsics.comp\", \"ComputeShaderFunction\"},\n  248          {\"hlsl.intrinsics.evalfns.frag\", \"main\"},\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/gtests/Spv.FromFile.cpp:\n  220          // No tests yet for making sure break and continue from a nested loop\n  221          // goes to the innermost target.\n  222:         \"spv.barrier.vert\",\n  223          \"spv.do-simple.vert\",\n  224          \"spv.do-while-continue-break.vert\",\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/doc.cpp:\n 1174      case 222: return \"Bad\";\n 1175      case 223: return \"Bad\";\n 1176:     case 224: return \"OpControlBarrier\";\n 1177:     case 225: return \"OpMemoryBarrier\";\n 1178      case 226: return \"Bad\";\n 1179      case 227: return \"OpAtomicLoad\";\n ....\n 1467      InstructionDesc[OpEmitStreamVertex].setResultAndType(false, false);\n 1468      InstructionDesc[OpEndStreamPrimitive].setResultAndType(false, false);\n 1469:     InstructionDesc[OpControlBarrier].setResultAndType(false, false);\n 1470:     InstructionDesc[OpMemoryBarrier].setResultAndType(false, false);\n 1471      InstructionDesc[OpAtomicStore].setResultAndType(false, false);\n 1472      InstructionDesc[OpLoopMerge].setResultAndType(false, false);\n ....\n 2214      InstructionDesc[OpEndStreamPrimitive].operands.push(OperandId, \"'Stream'\");\n 2215  \n 2216:     InstructionDesc[OpControlBarrier].operands.push(OperandScope, \"'Execution'\");\n 2217:     InstructionDesc[OpControlBarrier].operands.push(OperandScope, \"'Memory'\");\n 2218:     InstructionDesc[OpControlBarrier].operands.push(OperandMemorySemantics, \"'Semantics'\");\n 2219  \n 2220:     InstructionDesc[OpMemoryBarrier].operands.push(OperandScope, \"'Memory'\");\n 2221:     InstructionDesc[OpMemoryBarrier].operands.push(OperandMemorySemantics, \"'Semantics'\");\n 2222  \n 2223      InstructionDesc[OpImageTexelPointer].operands.push(OperandId, \"'Image'\");\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/doc.h:\n  105      OpClassAtomic,\n  106      OpClassPrimitive,\n  107:     OpClassBarrier,\n  108      OpClassGroup,\n  109      OpClassDeviceSideEnqueue,\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp:\n 2660      case glslang::EOpEmitVertex:\n 2661      case glslang::EOpEndPrimitive:\n 2662:     case glslang::EOpBarrier:\n 2663:     case glslang::EOpMemoryBarrier:\n 2664:     case glslang::EOpMemoryBarrierAtomicCounter:\n 2665:     case glslang::EOpMemoryBarrierBuffer:\n 2666:     case glslang::EOpMemoryBarrierImage:\n 2667:     case glslang::EOpMemoryBarrierShared:\n 2668:     case glslang::EOpGroupMemoryBarrier:\n 2669:     case glslang::EOpDeviceMemoryBarrier:\n 2670:     case glslang::EOpAllMemoryBarrierWithGroupSync:\n 2671:     case glslang::EOpDeviceMemoryBarrierWithGroupSync:\n 2672:     case glslang::EOpWorkgroupMemoryBarrier:\n 2673:     case glslang::EOpWorkgroupMemoryBarrierWithGroupSync:\n 2674:     case glslang::EOpSubgroupBarrier:\n 2675:     case glslang::EOpSubgroupMemoryBarrier:\n 2676:     case glslang::EOpSubgroupMemoryBarrierBuffer:\n 2677:     case glslang::EOpSubgroupMemoryBarrierImage:\n 2678:     case glslang::EOpSubgroupMemoryBarrierShared:\n 2679          noReturnValue = true;\n 2680          // These all have 0 operands and will naturally finish up in the code below for 0 operands\n ....\n 7548          libCall = spv::GLSLstd450Refract;\n 7549          break;\n 7550:     case glslang::EOpBarrier:\n 7551          {\n 7552:             // This is for the extended controlBarrier function, with four operands.\n 7553:             // The unextended barrier() goes through createNoArgOperation.\n 7554              assert(operands.size() == 4);\n 7555              unsigned int executionScope = builder.getConstantScalar(operands[0]);\n 7556              unsigned int memoryScope = builder.getConstantScalar(operands[1]);\n 7557              unsigned int semantics = builder.getConstantScalar(operands[2]) | builder.getConstantScalar(operands[3]);\n 7558:             builder.createControlBarrier((spv::Scope)executionScope, (spv::Scope)memoryScope,\n 7559                  (spv::MemorySemanticsMask)semantics);\n 7560              if (semantics & (spv::MemorySemanticsMakeAvailableKHRMask |\n ....\n 7571          }\n 7572          break;\n 7573:     case glslang::EOpMemoryBarrier:\n 7574          {\n 7575:             // This is for the extended memoryBarrier function, with three operands.\n 7576:             // The unextended memoryBarrier() goes through createNoArgOperation.\n 7577              assert(operands.size() == 3);\n 7578              unsigned int memoryScope = builder.getConstantScalar(operands[0]);\n 7579              unsigned int semantics = builder.getConstantScalar(operands[1]) | builder.getConstantScalar(operands[2]);\n 7580:             builder.createMemoryBarrier((spv::Scope)memoryScope, (spv::MemorySemanticsMask)semantics);\n 7581              if (semantics & (spv::MemorySemanticsMakeAvailableKHRMask |\n 7582                               spv::MemorySemanticsMakeVisibleKHRMask |\n ....\n 7939  spv::Id TGlslangToSpvTraverser::createNoArgOperation(glslang::TOperator op, spv::Decoration precision, spv::Id typeId)\n 7940  {\n 7941:     // GLSL memory barriers use queuefamily scope in new model, device scope in old model\n 7942:     spv::Scope memoryBarrierScope = glslangIntermediate->usingVulkanMemoryModel() ?\n 7943          spv::ScopeQueueFamilyKHR : spv::ScopeDevice;\n 7944  \n 7945      switch (op) {\n 7946:     case glslang::EOpBarrier:\n 7947          if (glslangIntermediate->getStage() == EShLangTessControl) {\n 7948              if (glslangIntermediate->usingVulkanMemoryModel()) {\n 7949:                 builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeWorkgroup,\n 7950                                               spv::MemorySemanticsOutputMemoryKHRMask |\n 7951                                               spv::MemorySemanticsAcquireReleaseMask);\n 7952                  builder.addCapability(spv::CapabilityVulkanMemoryModelKHR);\n 7953              } else {\n 7954:                 builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeInvocation, spv::MemorySemanticsMaskNone);\n 7955              }\n 7956          } else {\n 7957:             builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeWorkgroup,\n 7958                                              spv::MemorySemanticsWorkgroupMemoryMask |\n 7959                                              spv::MemorySemanticsAcquireReleaseMask);\n 7960          }\n 7961          return 0;\n 7962:     case glslang::EOpMemoryBarrier:\n 7963:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsAllMemory |\n 7964                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7965          return 0;\n 7966:     case glslang::EOpMemoryBarrierBuffer:\n 7967:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsUniformMemoryMask |\n 7968                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7969          return 0;\n 7970:     case glslang::EOpMemoryBarrierShared:\n 7971:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsWorkgroupMemoryMask |\n 7972                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7973          return 0;\n 7974:     case glslang::EOpGroupMemoryBarrier:\n 7975:         builder.createMemoryBarrier(spv::ScopeWorkgroup, spv::MemorySemanticsAllMemory |\n 7976                                                           spv::MemorySemanticsAcquireReleaseMask);\n 7977          return 0;\n 7978  #ifndef GLSLANG_WEB\n 7979:     case glslang::EOpMemoryBarrierAtomicCounter:\n 7980:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsAtomicCounterMemoryMask |\n 7981                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7982          return 0;\n 7983:     case glslang::EOpMemoryBarrierImage:\n 7984:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsImageMemoryMask |\n 7985                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7986          return 0;\n 7987:     case glslang::EOpAllMemoryBarrierWithGroupSync:\n 7988:         builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeDevice,\n 7989                                          spv::MemorySemanticsAllMemory |\n 7990                                          spv::MemorySemanticsAcquireReleaseMask);\n 7991          return 0;\n 7992:     case glslang::EOpDeviceMemoryBarrier:\n 7993:         builder.createMemoryBarrier(spv::ScopeDevice, spv::MemorySemanticsUniformMemoryMask |\n 7994                                                        spv::MemorySemanticsImageMemoryMask |\n 7995                                                        spv::MemorySemanticsAcquireReleaseMask);\n 7996          return 0;\n 7997:     case glslang::EOpDeviceMemoryBarrierWithGroupSync:\n 7998:         builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeDevice, spv::MemorySemanticsUniformMemoryMask |\n 7999                                                                              spv::MemorySemanticsImageMemoryMask |\n 8000                                                                              spv::MemorySemanticsAcquireReleaseMask);\n 8001          return 0;\n 8002:     case glslang::EOpWorkgroupMemoryBarrier:\n 8003:         builder.createMemoryBarrier(spv::ScopeWorkgroup, spv::MemorySemanticsWorkgroupMemoryMask |\n 8004                                                           spv::MemorySemanticsAcquireReleaseMask);\n 8005          return 0;\n 8006:     case glslang::EOpWorkgroupMemoryBarrierWithGroupSync:\n 8007:         builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeWorkgroup,\n 8008                                          spv::MemorySemanticsWorkgroupMemoryMask |\n 8009                                          spv::MemorySemanticsAcquireReleaseMask);\n 8010          return 0;\n 8011:     case glslang::EOpSubgroupBarrier:\n 8012:         builder.createControlBarrier(spv::ScopeSubgroup, spv::ScopeSubgroup, spv::MemorySemanticsAllMemory |\n 8013                                                                               spv::MemorySemanticsAcquireReleaseMask);\n 8014          return spv::NoResult;\n 8015:     case glslang::EOpSubgroupMemoryBarrier:\n 8016:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsAllMemory |\n 8017                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8018          return spv::NoResult;\n 8019:     case glslang::EOpSubgroupMemoryBarrierBuffer:\n 8020:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsUniformMemoryMask |\n 8021                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8022          return spv::NoResult;\n 8023:     case glslang::EOpSubgroupMemoryBarrierImage:\n 8024:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsImageMemoryMask |\n 8025                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8026          return spv::NoResult;\n 8027:     case glslang::EOpSubgroupMemoryBarrierShared:\n 8028:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsWorkgroupMemoryMask |\n 8029                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8030          return spv::NoResult;\n ....\n 8667      // return 1; // start\n 8668      // return 2; // EOpAtomicCounterDecrement gets a post decrement, to map between GLSL -> SPIR-V\n 8669:     // return 3; // change/correct barrier-instruction operands, to match memory model group decisions\n 8670      // return 4; // some deeper access chains: for dynamic vector component, and local Boolean component\n 8671      // return 5; // make OpArrayLength result type be an int with signedness of 0\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/spirv.hpp:\n  859      CapabilityMultiViewport = 57,\n  860      CapabilitySubgroupDispatch = 58,\n  861:     CapabilityNamedBarrier = 59,\n  862      CapabilityPipeStorage = 60,\n  863      CapabilityGroupNonUniform = 61,\n  ...\n 1231      OpEmitStreamVertex = 220,\n 1232      OpEndStreamPrimitive = 221,\n 1233:     OpControlBarrier = 224,\n 1234:     OpMemoryBarrier = 225,\n 1235      OpAtomicLoad = 227,\n 1236      OpAtomicStore = 228,\n ....\n 1326      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1327      OpGetKernelMaxNumSubgroups = 326,\n 1328:     OpTypeNamedBarrier = 327,\n 1329:     OpNamedBarrierInitialize = 328,\n 1330:     OpMemoryNamedBarrier = 329,\n 1331      OpModuleProcessed = 330,\n 1332      OpExecutionModeId = 331,\n ....\n 1801      case OpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1802      case OpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1803:     case OpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1804:     case OpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1805      case OpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1806      case OpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1896      case OpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1897      case OpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1898:     case OpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1899:     case OpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1900:     case OpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1901      case OpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1902      case OpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.cpp:\n 1631  }\n 1632  \n 1633: void Builder::createControlBarrier(Scope execution, Scope memory, MemorySemanticsMask semantics)\n 1634  {\n 1635:     Instruction* op = new Instruction(OpControlBarrier);\n 1636      op->addIdOperand(makeUintConstant(execution));\n 1637      op->addIdOperand(makeUintConstant(memory));\n ....\n 1640  }\n 1641  \n 1642: void Builder::createMemoryBarrier(unsigned executionScope, unsigned memorySemantics)\n 1643  {\n 1644:     Instruction* op = new Instruction(OpMemoryBarrier);\n 1645      op->addIdOperand(makeUintConstant(executionScope));\n 1646      op->addIdOperand(makeUintConstant(memorySemantics));\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.h:\n  392      void createNoResultOp(Op, const std::vector<Id>& operands);\n  393      void createNoResultOp(Op, const std::vector<IdImmediate>& operands);\n  394:     void createControlBarrier(Scope execution, Scope memory, MemorySemanticsMask);\n  395:     void createMemoryBarrier(unsigned executionScope, unsigned memorySemantics);\n  396      Id createUnaryOp(Op, Id typeId, Id operand);\n  397      Id createBinOp(Op, Id typeId, Id operand1, Id operand2);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/150.tesc:\n   10  void main()\n   11  {\n   12:     barrier();\n   13  \n   14      int a = gl_MaxTessControlInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/150.tese:\n   10  void main()\n   11  {\n   12:     barrier(); // ERROR\n   13  \n   14      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/310.comp:\n   27  void main()\n   28  {\n   29:     barrier();\n   30:     memoryBarrier();\n   31:     memoryBarrierAtomicCounter();\n   32:     memoryBarrierBuffer();\n   33:     memoryBarrierShared();\n   34:     memoryBarrierImage();\n   35:     groupMemoryBarrier();\n   36      value = int(values[gl_LocalInvocationIndex]);\n   37  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/310.tesc:\n   15  void main()\n   16  {\n   17:     barrier();\n   18  \n   19      int a = gl_MaxTessControlInputComponents +\n   ..\n   39  \n   40      if (a > 10)\n   41:         barrier();           // ERROR\n   42      else\n   43:         barrier();           // ERROR\n   44  \n   45:     barrier();\n   46  \n   47      do {\n   48:         barrier();           // ERROR\n   49      } while (a > 10);\n   50  \n   51      switch (a) {\n   52      default:\n   53:         barrier();           // ERROR\n   54          break;\n   55      }\n   56:     a < 12 ? a : (barrier(), a); // ERROR\n   57      {\n   58:         barrier();\n   59      }\n   60  \n   61      return;\n   62  \n   63:     barrier();               // ERROR\n   64  }\n   65  \n   ..\n   71      gl_out[4].gl_Position;  // ERROR, out of range\n   72  \n   73:     barrier();              // ERROR, not in main\n   74  }\n   75  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/310.tese:\n   24  void main()\n   25  {\n   26:     barrier(); // ERROR\n   27  \n   28      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/320.tesc:\n   13  void main()\n   14  {\n   15:     barrier();\n   16  \n   17      int a = gl_MaxTessControlInputComponents +\n   ..\n   37  \n   38      if (a > 10)\n   39:         barrier();           // ERROR\n   40      else\n   41:         barrier();           // ERROR\n   42  \n   43:     barrier();\n   44  \n   45      do {\n   46:         barrier();           // ERROR\n   47      } while (a > 10);\n   48  \n   49      switch (a) {\n   50      default:\n   51:         barrier();           // ERROR\n   52          break;\n   53      }\n   54:     a < 12 ? a : (barrier(), a); // ERROR\n   55      {\n   56:         barrier();\n   57      }\n   58  \n   59      return;\n   60  \n   61:     barrier();               // ERROR\n   62  }\n   63  \n   ..\n   69      gl_out[4].gl_Position;  // ERROR, out of range\n   70  \n   71:     barrier();              // ERROR, not in main\n   72  }\n   73  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/320.tese:\n   20  void main()\n   21  {\n   22:     barrier(); // ERROR\n   23  \n   24      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/400.tesc:\n   13  void main()\n   14  {\n   15:     barrier();\n   16  \n   17      int a = gl_MaxTessControlInputComponents +\n   ..\n   37  \n   38      if (a > 10)\n   39:         barrier();           // ERROR\n   40      else\n   41:         barrier();           // ERROR\n   42  \n   43:     barrier();\n   44  \n   45      do {\n   46:         barrier();           // ERROR\n   47      } while (a > 10);\n   48  \n   49      switch (a) {\n   50      default:\n   51:         barrier();           // ERROR\n   52          break;\n   53      }\n   54:     a < 12 ? a : (barrier(), a); // ERROR\n   55      {\n   56:         barrier();\n   57      }\n   58  \n   59      return;\n   60  \n   61:     barrier();               // ERROR\n   62  }\n   63  \n   ..\n   69      gl_out[4].gl_PointSize;  // ERROR\n   70  \n   71:     barrier();                // ERROR\n   72  }\n   73  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/400.tese:\n   20  void main()\n   21  {\n   22:     barrier(); // ERROR\n   23  \n   24      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/420.comp:\n   21              gl_MaxComputeAtomicCounterBuffers;\n   22  \n   23:     barrier();\n   24:     memoryBarrier();\n   25:     memoryBarrierAtomicCounter();\n   26:     memoryBarrierBuffer();\n   27:     memoryBarrierImage();\n   28:     memoryBarrierShared();\n   29:     groupMemoryBarrier();\n   30  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/420.tese:\n   82  void main()\n   83  {\n   84:     memoryBarrier();\n   85  \n   86      if (constructed == curlybad1)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/430.comp:\n   27  void main()\n   28  {\n   29:     barrier();\n   30:     memoryBarrier();\n   31:     memoryBarrierAtomicCounter();\n   32:     memoryBarrierBuffer();\n   33:     memoryBarrierShared();\n   34:     memoryBarrierImage();\n   35:     groupMemoryBarrier();\n   36      value = int(values[gl_LocalInvocationIndex]);\n   37  \n   38      int a;\n   39      if (a > 10)\n   40:         barrier();\n   41  }\n   42  \n   ..\n   68      ro.values[2] = 4.7;             // ERROR, readonly\n   69      ro.values.length();\n   70:     barrier();\n   71  }\n   72  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/430.vert:\n  146  shared vec4 sharedv;                // ERROR\n  147  \n  148: void fooBarrier()\n  149  {\n  150:     barrier();                       // ERROR\n  151:     memoryBarrier();\n  152:     memoryBarrierAtomicCounter();\n  153:     memoryBarrierBuffer();\n  154:     memoryBarrierShared();           // ERROR\n  155:     memoryBarrierImage();\n  156:     groupMemoryBarrier();            // ERROR\n  157  }\n  158  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/150.tesc.out:\n    7  0:10    Function Parameters: \n    8  0:12    Sequence\n    9: 0:12      Barrier ( global void)\n   10  0:14      Sequence\n   11  0:14        move second child to first child ( temp int)\n   ..\n  105  \n  106  150.tese\n  107: ERROR: 0:12: 'barrier' : no matching overloaded function found \n  108  ERROR: 1 compilation errors.  No code generated.\n  109  \n  ...\n  215  ERROR: 0:8: 'fractional_even_spacing' : unrecognized layout identifier, or qualifier requires assignment (e.g., binding = 4) \n  216  ERROR: 0:10: 'patch' : can only use on output in tessellation-control shader \n  217: ERROR: 0:39: '' : tessellation control barrier() cannot be placed within flow control \n  218: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n  219: ERROR: 0:46: '' : tessellation control barrier() cannot be placed within flow control \n  220: ERROR: 0:51: '' : tessellation control barrier() cannot be placed within flow control \n  221: ERROR: 0:54: '' : tessellation control barrier() cannot be placed within flow control \n  222: ERROR: 0:61: '' : tessellation control barrier() cannot be placed after a return from main() \n  223  ERROR: 0:64: 'vertices' : can only apply to 'out' \n  224  ERROR: 0:65: 'vertices' : cannot change previously set layout value \n  225  ERROR: 0:69: '[' :  array index out of range '4'\n  226: ERROR: 0:71: '' : tessellation control barrier() must be in main() \n  227  ERROR: 0:74: 'in' : type must be an array: ina\n  228  ERROR: 0:76: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n  ...\n  246  0:13    Function Parameters: \n  247  0:15    Sequence\n  248: 0:15      Barrier ( global void)\n  249  0:17      Sequence\n  250  0:17        move second child to first child ( temp int)\n  ...\n  345  0:38            10 (const int)\n  346  0:38        true case\n  347: 0:39        Barrier ( global void)\n  348  0:38        false case\n  349: 0:41        Barrier ( global void)\n  350: 0:43      Barrier ( global void)\n  351  0:47      Loop with condition not tested first\n  352  0:47        Loop Condition\n  ...\n  357  0:47        Loop Body\n  358  0:46        Sequence\n  359: 0:46          Barrier ( global void)\n  360  0:49      switch\n  361  0:49      condition\n  ...\n  365  0:50          default: \n  366  0:?           Sequence\n  367: 0:51            Barrier ( global void)\n  368  0:52            Branch: Break\n  369  0:54      Test condition and select ( temp int)\n  ...\n  377  0:54        false case\n  378  0:54        Comma ( temp int)\n  379: 0:54          Barrier ( global void)\n  380  0:54          'a' ( temp int)\n  381  0:56      Sequence\n  382: 0:56        Barrier ( global void)\n  383  0:59      Branch: Return\n  384: 0:61      Barrier ( global void)\n  385  0:67  Function Definition: foo( ( global void)\n  386  0:67    Function Parameters: \n  ...\n  393  0:69        Constant:\n  394  0:69          1 (const int)\n  395: 0:71      Barrier ( global void)\n  396  0:91  Function Definition: foop( ( global void)\n  397  0:91    Function Parameters: \n  ...\n  449  ERROR: 0:13: 'fractional_even_spacing' : cannot change previously set vertex spacing \n  450  ERROR: 0:18: 'patch' : can only use on input in tessellation-evaluation shader \n  451: ERROR: 0:22: 'barrier' : no matching overloaded function found \n  452  ERROR: 0:47: 'patch' : cannot use interpolation qualifiers with patch \n  453  ERROR: 0:48: 'patch' : cannot use interpolation qualifiers with patch \n  ...\n  832  0:82    Function Parameters: \n  833  0:84    Sequence\n  834: 0:84      MemoryBarrier ( global void)\n  835  0:86      Test condition and select ( temp void)\n  836  0:86        Condition\n  ...\n  978  0:10    Function Parameters: \n  979  0:12    Sequence\n  980: 0:12      Barrier ( global void)\n  981  0:14      Sequence\n  982  0:14        move second child to first child ( temp int)\n  ...\n 1073  0:13    Function Parameters: \n 1074  0:15    Sequence\n 1075: 0:15      Barrier ( global void)\n 1076  0:17      Sequence\n 1077  0:17        move second child to first child ( temp int)\n ....\n 1172  0:38            10 (const int)\n 1173  0:38        true case\n 1174: 0:39        Barrier ( global void)\n 1175  0:38        false case\n 1176: 0:41        Barrier ( global void)\n 1177: 0:43      Barrier ( global void)\n 1178  0:47      Loop with condition not tested first\n 1179  0:47        Loop Condition\n ....\n 1184  0:47        Loop Body\n 1185  0:46        Sequence\n 1186: 0:46          Barrier ( global void)\n 1187  0:49      switch\n 1188  0:49      condition\n ....\n 1192  0:50          default: \n 1193  0:?           Sequence\n 1194: 0:51            Barrier ( global void)\n 1195  0:52            Branch: Break\n 1196  0:54      Test condition and select ( temp int)\n ....\n 1204  0:54        false case\n 1205  0:54        Comma ( temp int)\n 1206: 0:54          Barrier ( global void)\n 1207  0:54          'a' ( temp int)\n 1208  0:56      Sequence\n 1209: 0:56        Barrier ( global void)\n 1210  0:59      Branch: Return\n 1211: 0:61      Barrier ( global void)\n 1212  0:8  Function Definition: main( ( global void)\n 1213  0:8    Function Parameters: \n ....\n 1553  0:82    Function Parameters: \n 1554  0:84    Sequence\n 1555: 0:84      MemoryBarrier ( global void)\n 1556  0:86      Test condition and select ( temp void)\n 1557  0:86        Condition\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/310.comp.out:\n   97  0:27    Function Parameters: \n   98  0:29    Sequence\n   99: 0:29      Barrier ( global void)\n  100: 0:30      MemoryBarrier ( global void)\n  101: 0:31      MemoryBarrierAtomicCounter ( global void)\n  102: 0:32      MemoryBarrierBuffer ( global void)\n  103: 0:33      MemoryBarrierShared ( global void)\n  104: 0:34      MemoryBarrierImage ( global void)\n  105: 0:35      GroupMemoryBarrier ( global void)\n  106  0:36      move second child to first child ( temp highp int)\n  107  0:36        value: direct index for structure (layout( column_major shared) buffer highp int)\n  ...\n  535  0:27    Function Parameters: \n  536  0:29    Sequence\n  537: 0:29      Barrier ( global void)\n  538: 0:30      MemoryBarrier ( global void)\n  539: 0:31      MemoryBarrierAtomicCounter ( global void)\n  540: 0:32      MemoryBarrierBuffer ( global void)\n  541: 0:33      MemoryBarrierShared ( global void)\n  542: 0:34      MemoryBarrierImage ( global void)\n  543: 0:35      GroupMemoryBarrier ( global void)\n  544  0:36      move second child to first child ( temp highp int)\n  545  0:36        value: direct index for structure (layout( column_major shared) buffer highp int)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/310.tesc.out:\n   15  ERROR: 0:35: 'expression' :  left of '[' is not of type array, matrix, or vector  \n   16  ERROR: 0:35: 'assign' :  l-value required (can't modify a const)\n   17: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n   18: ERROR: 0:43: '' : tessellation control barrier() cannot be placed within flow control \n   19: ERROR: 0:48: '' : tessellation control barrier() cannot be placed within flow control \n   20: ERROR: 0:53: '' : tessellation control barrier() cannot be placed within flow control \n   21: ERROR: 0:56: '' : tessellation control barrier() cannot be placed within flow control \n   22: ERROR: 0:63: '' : tessellation control barrier() cannot be placed after a return from main() \n   23  ERROR: 0:66: 'vertices' : can only apply to 'out' \n   24  ERROR: 0:67: 'vertices' : cannot change previously set layout value \n   25  ERROR: 0:71: '[' :  array index out of range '4'\n   26: ERROR: 0:73: '' : tessellation control barrier() must be in main() \n   27  ERROR: 0:76: 'in' : type must be an array: ina\n   28  ERROR: 0:78: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n   ..\n   63  0:15    Function Parameters: \n   64  0:17    Sequence\n   65: 0:17      Barrier ( global void)\n   66  0:19      Sequence\n   67  0:19        move second child to first child ( temp highp int)\n   ..\n  147  0:40            10 (const int)\n  148  0:40        true case\n  149: 0:41        Barrier ( global void)\n  150  0:40        false case\n  151: 0:43        Barrier ( global void)\n  152: 0:45      Barrier ( global void)\n  153  0:49      Loop with condition not tested first\n  154  0:49        Loop Condition\n  ...\n  159  0:49        Loop Body\n  160  0:48        Sequence\n  161: 0:48          Barrier ( global void)\n  162  0:51      switch\n  163  0:51      condition\n  ...\n  167  0:52          default: \n  168  0:?           Sequence\n  169: 0:53            Barrier ( global void)\n  170  0:54            Branch: Break\n  171  0:56      Test condition and select ( temp highp int)\n  ...\n  179  0:56        false case\n  180  0:56        Comma ( temp highp int)\n  181: 0:56          Barrier ( global void)\n  182  0:56          'a' ( temp highp int)\n  183  0:58      Sequence\n  184: 0:58        Barrier ( global void)\n  185  0:61      Branch: Return\n  186: 0:63      Barrier ( global void)\n  187  0:69  Function Definition: foo( ( global void)\n  188  0:69    Function Parameters: \n  ...\n  195  0:71        Constant:\n  196  0:71          0 (const int)\n  197: 0:73      Barrier ( global void)\n  198  0:92  Function Definition: foop( ( global void)\n  199  0:92    Function Parameters: \n  ...\n  433  0:15    Function Parameters: \n  434  0:17    Sequence\n  435: 0:17      Barrier ( global void)\n  436  0:19      Sequence\n  437  0:19        move second child to first child ( temp highp int)\n  ...\n  517  0:40            10 (const int)\n  518  0:40        true case\n  519: 0:41        Barrier ( global void)\n  520  0:40        false case\n  521: 0:43        Barrier ( global void)\n  522: 0:45      Barrier ( global void)\n  523  0:49      Loop with condition not tested first\n  524  0:49        Loop Condition\n  ...\n  529  0:49        Loop Body\n  530  0:48        Sequence\n  531: 0:48          Barrier ( global void)\n  532  0:51      switch\n  533  0:51      condition\n  ...\n  537  0:52          default: \n  538  0:?           Sequence\n  539: 0:53            Barrier ( global void)\n  540  0:54            Branch: Break\n  541  0:56      Test condition and select ( temp highp int)\n  ...\n  549  0:56        false case\n  550  0:56        Comma ( temp highp int)\n  551: 0:56          Barrier ( global void)\n  552  0:56          'a' ( temp highp int)\n  553  0:58      Sequence\n  554: 0:58        Barrier ( global void)\n  555  0:61      Branch: Return\n  556: 0:63      Barrier ( global void)\n  557  0:?   Linker Objects\n  558  0:?     'gl_out' ( out 4-element array of block{ out highp 4-component vector of float Position gl_Position,  out highp float PointSize gl_PointSize})\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/310.tese.out:\n    7  ERROR: 0:17: 'fractional_even_spacing' : cannot change previously set vertex spacing \n    8  ERROR: 0:22: 'patch' : can only use on input in tessellation-evaluation shader \n    9: ERROR: 0:26: 'barrier' : no matching overloaded function found \n   10  ERROR: 0:37: 'gl_PointSize' : required extension not requested: Possible extensions include:\n   11  GL_EXT_tessellation_point_size\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/320.tesc.out:\n   15  ERROR: 0:33: 'expression' :  left of '[' is not of type array, matrix, or vector  \n   16  ERROR: 0:33: 'assign' :  l-value required (can't modify a const)\n   17: ERROR: 0:39: '' : tessellation control barrier() cannot be placed within flow control \n   18: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n   19: ERROR: 0:46: '' : tessellation control barrier() cannot be placed within flow control \n   20: ERROR: 0:51: '' : tessellation control barrier() cannot be placed within flow control \n   21: ERROR: 0:54: '' : tessellation control barrier() cannot be placed within flow control \n   22: ERROR: 0:61: '' : tessellation control barrier() cannot be placed after a return from main() \n   23  ERROR: 0:64: 'vertices' : can only apply to 'out' \n   24  ERROR: 0:65: 'vertices' : cannot change previously set layout value \n   25  ERROR: 0:69: '[' :  array index out of range '4'\n   26: ERROR: 0:71: '' : tessellation control barrier() must be in main() \n   27  ERROR: 0:74: 'in' : type must be an array: ina\n   28  ERROR: 0:76: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n   ..\n   57  0:13    Function Parameters: \n   58  0:15    Sequence\n   59: 0:15      Barrier ( global void)\n   60  0:17      Sequence\n   61  0:17        move second child to first child ( temp highp int)\n   ..\n  141  0:38            10 (const int)\n  142  0:38        true case\n  143: 0:39        Barrier ( global void)\n  144  0:38        false case\n  145: 0:41        Barrier ( global void)\n  146: 0:43      Barrier ( global void)\n  147  0:47      Loop with condition not tested first\n  148  0:47        Loop Condition\n  ...\n  153  0:47        Loop Body\n  154  0:46        Sequence\n  155: 0:46          Barrier ( global void)\n  156  0:49      switch\n  157  0:49      condition\n  ...\n  161  0:50          default: \n  162  0:?           Sequence\n  163: 0:51            Barrier ( global void)\n  164  0:52            Branch: Break\n  165  0:54      Test condition and select ( temp highp int)\n  ...\n  173  0:54        false case\n  174  0:54        Comma ( temp highp int)\n  175: 0:54          Barrier ( global void)\n  176  0:54          'a' ( temp highp int)\n  177  0:56      Sequence\n  178: 0:56        Barrier ( global void)\n  179  0:59      Branch: Return\n  180: 0:61      Barrier ( global void)\n  181  0:67  Function Definition: foo( ( global void)\n  182  0:67    Function Parameters: \n  ...\n  189  0:69        Constant:\n  190  0:69          0 (const int)\n  191: 0:71      Barrier ( global void)\n  192  0:102  Function Definition: pointSize2( ( global void)\n  193  0:102    Function Parameters: \n  ...\n  415  0:13    Function Parameters: \n  416  0:15    Sequence\n  417: 0:15      Barrier ( global void)\n  418  0:17      Sequence\n  419  0:17        move second child to first child ( temp highp int)\n  ...\n  499  0:38            10 (const int)\n  500  0:38        true case\n  501: 0:39        Barrier ( global void)\n  502  0:38        false case\n  503: 0:41        Barrier ( global void)\n  504: 0:43      Barrier ( global void)\n  505  0:47      Loop with condition not tested first\n  506  0:47        Loop Condition\n  ...\n  511  0:47        Loop Body\n  512  0:46        Sequence\n  513: 0:46          Barrier ( global void)\n  514  0:49      switch\n  515  0:49      condition\n  ...\n  519  0:50          default: \n  520  0:?           Sequence\n  521: 0:51            Barrier ( global void)\n  522  0:52            Branch: Break\n  523  0:54      Test condition and select ( temp highp int)\n  ...\n  531  0:54        false case\n  532  0:54        Comma ( temp highp int)\n  533: 0:54          Barrier ( global void)\n  534  0:54          'a' ( temp highp int)\n  535  0:56      Sequence\n  536: 0:56        Barrier ( global void)\n  537  0:59      Branch: Return\n  538: 0:61      Barrier ( global void)\n  539  0:?   Linker Objects\n  540  0:?     'gl_out' ( out 4-element array of block{ out highp 4-component vector of float Position gl_Position,  out highp float PointSize gl_PointSize})\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/320.tese.out:\n    7  ERROR: 0:13: 'fractional_even_spacing' : cannot change previously set vertex spacing \n    8  ERROR: 0:18: 'patch' : can only use on input in tessellation-evaluation shader \n    9: ERROR: 0:22: 'barrier' : no matching overloaded function found \n   10  ERROR: 0:33: 'gl_PointSize' : required extension not requested: Possible extensions include:\n   11  GL_EXT_tessellation_point_size\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/400.tesc.out:\n    4  ERROR: 0:8: 'fractional_even_spacing' : unrecognized layout identifier, or qualifier requires assignment (e.g., binding = 4) \n    5  ERROR: 0:10: 'patch' : can only use on output in tessellation-control shader \n    6: ERROR: 0:39: '' : tessellation control barrier() cannot be placed within flow control \n    7: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n    8: ERROR: 0:46: '' : tessellation control barrier() cannot be placed within flow control \n    9: ERROR: 0:51: '' : tessellation control barrier() cannot be placed within flow control \n   10: ERROR: 0:54: '' : tessellation control barrier() cannot be placed within flow control \n   11: ERROR: 0:61: '' : tessellation control barrier() cannot be placed after a return from main() \n   12  ERROR: 0:64: 'vertices' : can only apply to 'out' \n   13  ERROR: 0:65: 'vertices' : cannot change previously set layout value \n   14  ERROR: 0:69: '[' :  array index out of range '4'\n   15: ERROR: 0:71: '' : tessellation control barrier() must be in main() \n   16  ERROR: 0:74: 'in' : type must be an array: ina\n   17  ERROR: 0:76: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n   ..\n   35  0:13    Function Parameters: \n   36  0:15    Sequence\n   37: 0:15      Barrier ( global void)\n   38  0:17      Sequence\n   39  0:17        move second child to first child ( temp int)\n   ..\n  134  0:38            10 (const int)\n  135  0:38        true case\n  136: 0:39        Barrier ( global void)\n  137  0:38        false case\n  138: 0:41        Barrier ( global void)\n  139: 0:43      Barrier ( global void)\n  140  0:47      Loop with condition not tested first\n  141  0:47        Loop Condition\n  ...\n  146  0:47        Loop Body\n  147  0:46        Sequence\n  148: 0:46          Barrier ( global void)\n  149  0:49      switch\n  150  0:49      condition\n  ...\n  154  0:50          default: \n  155  0:?           Sequence\n  156: 0:51            Barrier ( global void)\n  157  0:52            Branch: Break\n  158  0:54      Test condition and select ( temp int)\n  ...\n  166  0:54        false case\n  167  0:54        Comma ( temp int)\n  168: 0:54          Barrier ( global void)\n  169  0:54          'a' ( temp int)\n  170  0:56      Sequence\n  171: 0:56        Barrier ( global void)\n  172  0:59      Branch: Return\n  173: 0:61      Barrier ( global void)\n  174  0:67  Function Definition: foo( ( global void)\n  175  0:67    Function Parameters: \n  ...\n  182  0:69        Constant:\n  183  0:69          1 (const int)\n  184: 0:71      Barrier ( global void)\n  185  0:91  Function Definition: foop( ( global void)\n  186  0:91    Function Parameters: \n  ...\n  243  0:13    Function Parameters: \n  244  0:15    Sequence\n  245: 0:15      Barrier ( global void)\n  246  0:17      Sequence\n  247  0:17        move second child to first child ( temp int)\n  ...\n  342  0:38            10 (const int)\n  343  0:38        true case\n  344: 0:39        Barrier ( global void)\n  345  0:38        false case\n  346: 0:41        Barrier ( global void)\n  347: 0:43      Barrier ( global void)\n  348  0:47      Loop with condition not tested first\n  349  0:47        Loop Condition\n  ...\n  354  0:47        Loop Body\n  355  0:46        Sequence\n  356: 0:46          Barrier ( global void)\n  357  0:49      switch\n  358  0:49      condition\n  ...\n  362  0:50          default: \n  363  0:?           Sequence\n  364: 0:51            Barrier ( global void)\n  365  0:52            Branch: Break\n  366  0:54      Test condition and select ( temp int)\n  ...\n  374  0:54        false case\n  375  0:54        Comma ( temp int)\n  376: 0:54          Barrier ( global void)\n  377  0:54          'a' ( temp int)\n  378  0:56      Sequence\n  379: 0:56        Barrier ( global void)\n  380  0:59      Branch: Return\n  381: 0:61      Barrier ( global void)\n  382  0:?   Linker Objects\n  383  0:?     'gl_out' ( out 4-element array of block{ out 4-component vector of float Position gl_Position,  out float PointSize gl_PointSize,  out 2-element array of float ClipDistance gl_ClipDistance})\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/400.tese.out:\n    7  ERROR: 0:13: 'fractional_even_spacing' : cannot change previously set vertex spacing \n    8  ERROR: 0:18: 'patch' : can only use on input in tessellation-evaluation shader \n    9: ERROR: 0:22: 'barrier' : no matching overloaded function found \n   10  ERROR: 0:47: 'patch' : cannot use interpolation qualifiers with patch \n   11  ERROR: 0:48: 'patch' : cannot use interpolation qualifiers with patch \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/420.comp.out:\n   46  0:17        Constant:\n   47  0:17          1057.000000\n   48: 0:23      Barrier ( global void)\n   49: 0:24      MemoryBarrier ( global void)\n   50: 0:25      MemoryBarrierAtomicCounter ( global void)\n   51: 0:26      MemoryBarrierBuffer ( global void)\n   52: 0:27      MemoryBarrierImage ( global void)\n   53: 0:28      MemoryBarrierShared ( global void)\n   54: 0:29      GroupMemoryBarrier ( global void)\n   55  0:?   Linker Objects\n   56  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n   ..\n  106  0:17        Constant:\n  107  0:17          1057.000000\n  108: 0:23      Barrier ( global void)\n  109: 0:24      MemoryBarrier ( global void)\n  110: 0:25      MemoryBarrierAtomicCounter ( global void)\n  111: 0:26      MemoryBarrierBuffer ( global void)\n  112: 0:27      MemoryBarrierImage ( global void)\n  113: 0:28      MemoryBarrierShared ( global void)\n  114: 0:29      GroupMemoryBarrier ( global void)\n  115  0:?   Linker Objects\n  116  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/420.tese.out:\n   89  0:82    Function Parameters: \n   90  0:84    Sequence\n   91: 0:84      MemoryBarrier ( global void)\n   92  0:86      Test condition and select ( temp void)\n   93  0:86        Condition\n   ..\n  265  0:82    Function Parameters: \n  266  0:84    Sequence\n  267: 0:84      MemoryBarrier ( global void)\n  268  0:86      Test condition and select ( temp void)\n  269  0:86        Condition\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/430.comp.out:\n   26  0:27    Function Parameters: \n   27  0:29    Sequence\n   28: 0:29      Barrier ( global void)\n   29: 0:30      MemoryBarrier ( global void)\n   30: 0:31      MemoryBarrierAtomicCounter ( global void)\n   31: 0:32      MemoryBarrierBuffer ( global void)\n   32: 0:33      MemoryBarrierShared ( global void)\n   33: 0:34      MemoryBarrierImage ( global void)\n   34: 0:35      GroupMemoryBarrier ( global void)\n   35  0:36      move second child to first child ( temp int)\n   36  0:36        value: direct index for structure (layout( column_major shared) buffer int)\n   ..\n   52  0:39            10 (const int)\n   53  0:39        true case\n   54: 0:40        Barrier ( global void)\n   55  0:66  Function Definition: foo( ( global void)\n   56  0:66    Function Parameters: \n   ..\n   71  0:69          Constant:\n   72  0:69            1 (const int)\n   73: 0:70      Barrier ( global void)\n   74  0:75  Function Definition: fooaoeu( ( global void)\n   75  0:75    Function Parameters: \n   ..\n  158  0:27    Function Parameters: \n  159  0:29    Sequence\n  160: 0:29      Barrier ( global void)\n  161: 0:30      MemoryBarrier ( global void)\n  162: 0:31      MemoryBarrierAtomicCounter ( global void)\n  163: 0:32      MemoryBarrierBuffer ( global void)\n  164: 0:33      MemoryBarrierShared ( global void)\n  165: 0:34      MemoryBarrierImage ( global void)\n  166: 0:35      GroupMemoryBarrier ( global void)\n  167  0:36      move second child to first child ( temp int)\n  168  0:36        value: direct index for structure (layout( column_major shared) buffer int)\n  ...\n  184  0:39            10 (const int)\n  185  0:39        true case\n  186: 0:40        Barrier ( global void)\n  187  0:?   Linker Objects\n  188  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/430.vert.out:\n   53  ERROR: 0:123: 'input block' : not supported in this stage: vertex\n   54  ERROR: 0:146: 'shared' : not supported in this stage: vertex\n   55: ERROR: 0:150: 'barrier' : no matching overloaded function found \n   56: ERROR: 0:154: 'memoryBarrierShared' : no matching overloaded function found \n   57: ERROR: 0:156: 'groupMemoryBarrier' : no matching overloaded function found \n   58  ERROR: 0:159: 'buffer' : buffers can be declared only as blocks \n   59  ERROR: 0:168: 'textureSamples and imageSamples' : not supported for this version or the enabled extensions \n   ..\n   92  0:31      'v2' ( in 2-component vector of float)\n   93  0:31      'cv3' ( in 3-component vector of float)\n   94: 0:148  Function Definition: fooBarrier( ( global void)\n   95  0:148    Function Parameters: \n   96  0:150    Sequence\n   97  0:150      Constant:\n   98  0:150        0.000000\n   99: 0:151      MemoryBarrier ( global void)\n  100: 0:152      MemoryBarrierAtomicCounter ( global void)\n  101: 0:153      MemoryBarrierBuffer ( global void)\n  102  0:154      Constant:\n  103  0:154        0.000000\n  104: 0:155      MemoryBarrierImage ( global void)\n  105  0:156      Constant:\n  106  0:156        0.000000\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.frag.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  113  0:6      'gl_SubgroupSize' ( flat in uint SubgroupSize)\n  114  0:7      'gl_SubgroupInvocationID' ( flat in uint SubgroupInvocationID)\n  115: 0:8      subgroupBarrier ( global void)\n  116: 0:9      subgroupMemoryBarrier ( global void)\n  117: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  118: 0:11      subgroupMemoryBarrierImage ( global void)\n  119  0:12      subgroupElect ( global bool)\n  120  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  347  0:107          Constant:\n  348  0:107            0 (const uint)\n  349: 0:108      subgroupBarrier ( global void)\n  350: 0:109      subgroupMemoryBarrier ( global void)\n  351: 0:110      subgroupMemoryBarrierBuffer ( global void)\n  352: 0:111      subgroupMemoryBarrierImage ( global void)\n  353  0:112      subgroupElect ( global bool)\n  354  0:116  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  658  0:107          Constant:\n  659  0:107            0 (const uint)\n  660: 0:108      subgroupBarrier ( global void)\n  661: 0:109      subgroupMemoryBarrier ( global void)\n  662: 0:110      subgroupMemoryBarrierBuffer ( global void)\n  663: 0:111      subgroupMemoryBarrierImage ( global void)\n  664  0:112      subgroupElect ( global bool)\n  665  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.geom.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  115  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  116  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  117: 0:8      subgroupBarrier ( global void)\n  118: 0:9      subgroupMemoryBarrier ( global void)\n  119: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  120: 0:11      subgroupMemoryBarrierImage ( global void)\n  121  0:12      subgroupElect ( global bool)\n  122  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  354  0:113          Constant:\n  355  0:113            0 (const uint)\n  356: 0:114      subgroupBarrier ( global void)\n  357: 0:115      subgroupMemoryBarrier ( global void)\n  358: 0:116      subgroupMemoryBarrierBuffer ( global void)\n  359: 0:117      subgroupMemoryBarrierImage ( global void)\n  360  0:118      subgroupElect ( global bool)\n  361  0:122  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  666  0:113          Constant:\n  667  0:113            0 (const uint)\n  668: 0:114      subgroupBarrier ( global void)\n  669: 0:115      subgroupMemoryBarrier ( global void)\n  670: 0:116      subgroupMemoryBarrierBuffer ( global void)\n  671: 0:117      subgroupMemoryBarrierImage ( global void)\n  672  0:118      subgroupElect ( global bool)\n  673  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.tesc.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:8      subgroupBarrier ( global void)\n  115: 0:9      subgroupMemoryBarrier ( global void)\n  116: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:11      subgroupMemoryBarrierImage ( global void)\n  118  0:12      subgroupElect ( global bool)\n  119  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  351  0:112          Constant:\n  352  0:112            0 (const uint)\n  353: 0:113      subgroupBarrier ( global void)\n  354: 0:114      subgroupMemoryBarrier ( global void)\n  355: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  356: 0:116      subgroupMemoryBarrierImage ( global void)\n  357  0:117      subgroupElect ( global bool)\n  358  0:121  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  660  0:112          Constant:\n  661  0:112            0 (const uint)\n  662: 0:113      subgroupBarrier ( global void)\n  663: 0:114      subgroupMemoryBarrier ( global void)\n  664: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  665: 0:116      subgroupMemoryBarrierImage ( global void)\n  666  0:117      subgroupElect ( global bool)\n  667  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.tese.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  114  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  115  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  116: 0:8      subgroupBarrier ( global void)\n  117: 0:9      subgroupMemoryBarrier ( global void)\n  118: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  119: 0:11      subgroupMemoryBarrierImage ( global void)\n  120  0:12      subgroupElect ( global bool)\n  121  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  353  0:112          Constant:\n  354  0:112            0 (const uint)\n  355: 0:113      subgroupBarrier ( global void)\n  356: 0:114      subgroupMemoryBarrier ( global void)\n  357: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  358: 0:116      subgroupMemoryBarrierImage ( global void)\n  359  0:117      subgroupElect ( global bool)\n  360  0:121  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  664  0:112          Constant:\n  665  0:112            0 (const uint)\n  666: 0:113      subgroupBarrier ( global void)\n  667: 0:114      subgroupMemoryBarrier ( global void)\n  668: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  669: 0:116      subgroupMemoryBarrierImage ( global void)\n  670  0:117      subgroupElect ( global bool)\n  671  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.vert.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  111  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  112  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  113: 0:8      subgroupBarrier ( global void)\n  114: 0:9      subgroupMemoryBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  116: 0:11      subgroupMemoryBarrierImage ( global void)\n  117  0:12      subgroupElect ( global bool)\n  118  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  350  0:111          Constant:\n  351  0:111            0 (const uint)\n  352: 0:112      subgroupBarrier ( global void)\n  353: 0:113      subgroupMemoryBarrier ( global void)\n  354: 0:114      subgroupMemoryBarrierBuffer ( global void)\n  355: 0:115      subgroupMemoryBarrierImage ( global void)\n  356  0:116      subgroupElect ( global bool)\n  357  0:120  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  660  0:111          Constant:\n  661  0:111            0 (const uint)\n  662: 0:112      subgroupBarrier ( global void)\n  663: 0:113      subgroupMemoryBarrier ( global void)\n  664: 0:114      subgroupMemoryBarrierBuffer ( global void)\n  665: 0:115      subgroupMemoryBarrierImage ( global void)\n  666  0:116      subgroupElect ( global bool)\n  667  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroupBasic.comp.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : required extension not requested: GL_KHR_shader_subgroup_basic\n   10  ERROR: 0:14: 'gl_SubgroupID' : required extension not requested: GL_KHR_shader_subgroup_basic\n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : required extension not requested: GL_KHR_shader_subgroup_basic\n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:8      subgroupBarrier ( global void)\n  115: 0:9      subgroupMemoryBarrier ( global void)\n  116: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:11      subgroupMemoryBarrierImage ( global void)\n  118  0:12      subgroupElect ( global bool)\n  119  0:13      'gl_NumSubgroups' ( in uint NumSubgroups)\n  120  0:14      'gl_SubgroupID' ( in uint SubgroupID)\n  121: 0:15      subgroupMemoryBarrierShared ( global void)\n  122  0:17      subgroupAll ( global bool)\n  123  0:17        Constant:\n  ...\n  379  0:117          Constant:\n  380  0:117            0 (const int)\n  381: 0:118      subgroupBarrier ( global void)\n  382: 0:119      subgroupMemoryBarrier ( global void)\n  383: 0:120      subgroupMemoryBarrierBuffer ( global void)\n  384: 0:121      subgroupMemoryBarrierShared ( global void)\n  385: 0:122      subgroupMemoryBarrierImage ( global void)\n  386  0:126  Function Definition: ballot_works(vf4; ( global void)\n  387  0:126    Function Parameters: \n  ...\n  721  0:117          Constant:\n  722  0:117            0 (const int)\n  723: 0:118      subgroupBarrier ( global void)\n  724: 0:119      subgroupMemoryBarrier ( global void)\n  725: 0:120      subgroupMemoryBarrierBuffer ( global void)\n  726: 0:121      subgroupMemoryBarrierShared ( global void)\n  727: 0:122      subgroupMemoryBarrierImage ( global void)\n  728  0:?   Linker Objects\n  729  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.mesh.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : required extension not requested: GL_KHR_shader_subgroup_basic\n   10  ERROR: 0:14: 'gl_SubgroupID' : required extension not requested: GL_KHR_shader_subgroup_basic\n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : required extension not requested: GL_KHR_shader_subgroup_basic\n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  116  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  117  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  118: 0:8      subgroupBarrier ( global void)\n  119: 0:9      subgroupMemoryBarrier ( global void)\n  120: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  121: 0:11      subgroupMemoryBarrierImage ( global void)\n  122  0:12      subgroupElect ( global bool)\n  123  0:13      'gl_NumSubgroups' ( in uint NumSubgroups)\n  124  0:14      'gl_SubgroupID' ( in uint SubgroupID)\n  125: 0:15      subgroupMemoryBarrierShared ( global void)\n  126  0:17      subgroupAll ( global bool)\n  127  0:17        Constant:\n  ...\n  399  0:128        Constant:\n  400  0:128          4.000000\n  401: 0:130      MemoryBarrierShared ( global void)\n  402: 0:130      Barrier ( global void)\n  403  0:132      move second child to first child ( temp 4-component vector of float)\n  404  0:132        gl_Position: direct index for structure ( out 4-component vector of float Position)\n  ...\n  477  0:135          Constant:\n  478  0:135            2 (const int)\n  479: 0:137      MemoryBarrierShared ( global void)\n  480: 0:137      Barrier ( global void)\n  481  0:139      move second child to first child ( temp int)\n  482  0:139        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n  ...\n  518  0:142        Constant:\n  519  0:142          9 (const int)\n  520: 0:144      MemoryBarrierShared ( global void)\n  521: 0:144      Barrier ( global void)\n  522  0:146      move second child to first child ( temp int)\n  523  0:146        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n  ...\n  590  0:149          Constant:\n  591  0:149            0 (const int)\n  592: 0:151      MemoryBarrierShared ( global void)\n  593: 0:151      Barrier ( global void)\n  594  0:154      move second child to first child ( temp uint)\n  595  0:154        direct index ( temp uint PrimitiveIndicesNV)\n  ...\n  625  0:161        Constant:\n  626  0:161          96 (const uint)\n  627: 0:163      MemoryBarrierShared ( global void)\n  628: 0:163      Barrier ( global void)\n  629  0:167  Function Definition: basic_works( ( global void)\n  630  0:167    Function Parameters: \n  ...\n  632  0:169      'gl_SubgroupSize' ( in uint SubgroupSize)\n  633  0:170      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  634: 0:171      subgroupBarrier ( global void)\n  635: 0:172      subgroupMemoryBarrier ( global void)\n  636: 0:173      subgroupMemoryBarrierBuffer ( global void)\n  637: 0:174      subgroupMemoryBarrierImage ( global void)\n  638  0:175      subgroupElect ( global bool)\n  639  0:176      'gl_NumSubgroups' ( in uint NumSubgroups)\n  640  0:177      'gl_SubgroupID' ( in uint SubgroupID)\n  641: 0:178      subgroupMemoryBarrierShared ( global void)\n  642  0:182  Function Definition: ballot_works(vf4; ( global void)\n  643  0:182    Function Parameters: \n  ...\n  999  0:128        Constant:\n 1000  0:128          4.000000\n 1001: 0:130      MemoryBarrierShared ( global void)\n 1002: 0:130      Barrier ( global void)\n 1003  0:132      move second child to first child ( temp 4-component vector of float)\n 1004  0:132        gl_Position: direct index for structure ( out 4-component vector of float Position)\n ....\n 1077  0:135          Constant:\n 1078  0:135            2 (const int)\n 1079: 0:137      MemoryBarrierShared ( global void)\n 1080: 0:137      Barrier ( global void)\n 1081  0:139      move second child to first child ( temp int)\n 1082  0:139        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n ....\n 1118  0:142        Constant:\n 1119  0:142          9 (const int)\n 1120: 0:144      MemoryBarrierShared ( global void)\n 1121: 0:144      Barrier ( global void)\n 1122  0:146      move second child to first child ( temp int)\n 1123  0:146        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n ....\n 1190  0:149          Constant:\n 1191  0:149            0 (const int)\n 1192: 0:151      MemoryBarrierShared ( global void)\n 1193: 0:151      Barrier ( global void)\n 1194  0:154      move second child to first child ( temp uint)\n 1195  0:154        direct index ( temp uint PrimitiveIndicesNV)\n ....\n 1225  0:161        Constant:\n 1226  0:161          96 (const uint)\n 1227: 0:163      MemoryBarrierShared ( global void)\n 1228: 0:163      Barrier ( global void)\n 1229  0:?   Linker Objects\n 1230  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rahit.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  419  0:133      'gl_SubgroupSize' ( in uint SubgroupSize)\n  420  0:134      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  421: 0:135      subgroupBarrier ( global void)\n  422: 0:136      subgroupMemoryBarrier ( global void)\n  423: 0:137      subgroupMemoryBarrierBuffer ( global void)\n  424: 0:138      subgroupMemoryBarrierImage ( global void)\n  425  0:139      subgroupElect ( global bool)\n  426  0:143  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rcall.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  362  0:121      'gl_SubgroupSize' ( in uint SubgroupSize)\n  363  0:122      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  364: 0:123      subgroupBarrier ( global void)\n  365: 0:124      subgroupMemoryBarrier ( global void)\n  366: 0:125      subgroupMemoryBarrierBuffer ( global void)\n  367: 0:126      subgroupMemoryBarrierImage ( global void)\n  368  0:127      subgroupElect ( global bool)\n  369  0:131  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rchit.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  428  0:131      'gl_SubgroupSize' ( in uint SubgroupSize)\n  429  0:132      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  430: 0:133      subgroupBarrier ( global void)\n  431: 0:134      subgroupMemoryBarrier ( global void)\n  432: 0:135      subgroupMemoryBarrierBuffer ( global void)\n  433: 0:136      subgroupMemoryBarrierImage ( global void)\n  434  0:137      subgroupElect ( global bool)\n  435  0:141  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rgen.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  392  0:125      'gl_SubgroupSize' ( in uint SubgroupSize)\n  393  0:126      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  394: 0:127      subgroupBarrier ( global void)\n  395: 0:128      subgroupMemoryBarrier ( global void)\n  396: 0:129      subgroupMemoryBarrierBuffer ( global void)\n  397: 0:130      subgroupMemoryBarrierImage ( global void)\n  398  0:131      subgroupElect ( global bool)\n  399  0:135  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rint.out:\n    2  ERROR: 0:8: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:9: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:10: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:11: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:12: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:13: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:14: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:15: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:16: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:17: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:19: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:20: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:8      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:9      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:10      subgroupBarrier ( global void)\n  115: 0:11      subgroupMemoryBarrier ( global void)\n  116: 0:12      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:13      subgroupMemoryBarrierImage ( global void)\n  118  0:14      subgroupElect ( global bool)\n  119  0:15      'gl_NumSubgroups' ( temp float)\n  ...\n  406  0:131      'gl_SubgroupSize' ( in uint SubgroupSize)\n  407  0:132      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  408: 0:133      subgroupBarrier ( global void)\n  409: 0:134      subgroupMemoryBarrier ( global void)\n  410: 0:135      subgroupMemoryBarrierBuffer ( global void)\n  411: 0:136      subgroupMemoryBarrierImage ( global void)\n  412  0:137      subgroupElect ( global bool)\n  413  0:141  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rmiss.out:\n    2  ERROR: 0:8: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:9: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:10: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:11: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:12: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:13: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:14: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:15: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:16: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:17: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:19: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:20: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:8      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:9      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:10      subgroupBarrier ( global void)\n  115: 0:11      subgroupMemoryBarrier ( global void)\n  116: 0:12      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:13      subgroupMemoryBarrierImage ( global void)\n  118  0:14      subgroupElect ( global bool)\n  119  0:15      'gl_NumSubgroups' ( temp float)\n  ...\n  400  0:125      'gl_SubgroupSize' ( in uint SubgroupSize)\n  401  0:126      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  402: 0:127      subgroupBarrier ( global void)\n  403: 0:128      subgroupMemoryBarrier ( global void)\n  404: 0:129      subgroupMemoryBarrierBuffer ( global void)\n  405: 0:130      subgroupMemoryBarrierImage ( global void)\n  406  0:131      subgroupElect ( global bool)\n  407  0:135  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.task.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : required extension not requested: GL_KHR_shader_subgroup_basic\n   10  ERROR: 0:14: 'gl_SubgroupID' : required extension not requested: GL_KHR_shader_subgroup_basic\n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : required extension not requested: GL_KHR_shader_subgroup_basic\n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  113  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  114  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  115: 0:8      subgroupBarrier ( global void)\n  116: 0:9      subgroupMemoryBarrier ( global void)\n  117: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  118: 0:11      subgroupMemoryBarrierImage ( global void)\n  119  0:12      subgroupElect ( global bool)\n  120  0:13      'gl_NumSubgroups' ( in uint NumSubgroups)\n  121  0:14      'gl_SubgroupID' ( in uint SubgroupID)\n  122: 0:15      subgroupMemoryBarrierShared ( global void)\n  123  0:17      subgroupAll ( global bool)\n  124  0:17        Constant:\n  ...\n  408  0:138            Constant:\n  409  0:138              1 (const uint)\n  410: 0:140      MemoryBarrierShared ( global void)\n  411: 0:140      Barrier ( global void)\n  412  0:144      move second child to first child ( temp 2-component vector of float)\n  413  0:144        dummy: direct index for structure (layout( std430 offset=0) taskNV out 2-component vector of float)\n  ...\n  463  0:148            2 (const int)\n  464  0:148        'viewID' ( temp uint)\n  465: 0:150      MemoryBarrierShared ( global void)\n  466: 0:150      Barrier ( global void)\n  467  0:153      move second child to first child ( temp uint)\n  468  0:153        'gl_TaskCountNV' ( out uint TaskCountNV)\n  ...\n  474  0:159      'gl_SubgroupSize' ( in uint SubgroupSize)\n  475  0:160      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  476: 0:161      subgroupBarrier ( global void)\n  477: 0:162      subgroupMemoryBarrier ( global void)\n  478: 0:163      subgroupMemoryBarrierBuffer ( global void)\n  479: 0:164      subgroupMemoryBarrierImage ( global void)\n  480  0:165      subgroupElect ( global bool)\n  481  0:166      'gl_NumSubgroups' ( in uint NumSubgroups)\n  482  0:167      'gl_SubgroupID' ( in uint SubgroupID)\n  483: 0:168      subgroupMemoryBarrierShared ( global void)\n  484  0:172  Function Definition: ballot_works(vf4; ( global void)\n  485  0:172    Function Parameters: \n  ...\n  851  0:138            Constant:\n  852  0:138              1 (const uint)\n  853: 0:140      MemoryBarrierShared ( global void)\n  854: 0:140      Barrier ( global void)\n  855  0:144      move second child to first child ( temp 2-component vector of float)\n  856  0:144        dummy: direct index for structure (layout( std430 offset=0) taskNV out 2-component vector of float)\n  ...\n  906  0:148            2 (const int)\n  907  0:148        'viewID' ( temp uint)\n  908: 0:150      MemoryBarrierShared ( global void)\n  909: 0:150      Barrier ( global void)\n  910  0:153      move second child to first child ( temp uint)\n  911  0:153        'gl_TaskCountNV' ( out uint TaskCountNV)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.es320.subgroupBasic.comp.out:\n   50  0:17          Constant:\n   51  0:17            0 (const int)\n   52: 0:18      subgroupBarrier ( global void)\n   53: 0:19      subgroupMemoryBarrier ( global void)\n   54: 0:20      subgroupMemoryBarrierBuffer ( global void)\n   55: 0:21      subgroupMemoryBarrierShared ( global void)\n   56: 0:22      subgroupMemoryBarrierImage ( global void)\n   57  0:?   Linker Objects\n   58  0:?     'gl_WorkGroupSize' ( const highp 3-component vector of uint WorkGroupSize)\n   ..\n  116  0:17          Constant:\n  117  0:17            0 (const int)\n  118: 0:18      subgroupBarrier ( global void)\n  119: 0:19      subgroupMemoryBarrier ( global void)\n  120: 0:20      subgroupMemoryBarrierBuffer ( global void)\n  121: 0:21      subgroupMemoryBarrierShared ( global void)\n  122: 0:22      subgroupMemoryBarrierImage ( global void)\n  123  0:?   Linker Objects\n  124  0:?     'gl_WorkGroupSize' ( const highp 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.color.hull.tesc.out:\n  192  0:63            Constant:\n  193  0:63              1 (const int)\n  194: 0:?       Barrier ( temp void)\n  195  0:?       Test condition and select ( temp void)\n  196  0:?         Condition\n  ...\n  459  0:63            Constant:\n  460  0:63              1 (const int)\n  461: 0:?       Barrier ( temp void)\n  462  0:?       Test condition and select ( temp void)\n  463  0:?         Condition\n  ...\n  714               125:    124(ptr) AccessChain 120(@entryPointOutput.color) 121\n  715                                Store 125 123\n  716:                               ControlBarrier 126 127 128\n  717               129:     10(int) Load 99(pointId)\n  718               131:   130(bool) IEqual 129 32\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.gs-hs-mix.tesc.out:\n  223  0:61            Constant:\n  224  0:61              0 (const int)\n  225: 0:?       Barrier ( temp void)\n  226  0:?       Test condition and select ( temp void)\n  227  0:?         Condition\n  ...\n  718  0:61            Constant:\n  719  0:61              0 (const int)\n  720: 0:?       Barrier ( temp void)\n  721  0:?       Test condition and select ( temp void)\n  722  0:?         Condition\n  ...\n 1201               132:    131(ptr) AccessChain 123(@entryPointOutput.PositionWS) 124\n 1202                                Store 132 130\n 1203:                               ControlBarrier 68 133 58\n 1204               134:      9(int) Load 120(id)\n 1205               136:   135(bool) IEqual 134 57\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.1.tesc.out:\n   89  0:26            Constant:\n   90  0:26              0 (const int)\n   91: 0:?       Barrier ( temp void)\n   92  0:?       Test condition and select ( temp void)\n   93  0:?         Condition\n   ..\n  253  0:26            Constant:\n  254  0:26              0 (const int)\n  255: 0:?       Barrier ( temp void)\n  256  0:?       Test condition and select ( temp void)\n  257  0:?         Condition\n  ...\n  445                72:     71(ptr) AccessChain 63(@entryPointOutput.cpoint) 64\n  446                                Store 72 70\n  447:                               ControlBarrier 20 10 73\n  448                74:      9(int) Load 60(m_cpid)\n  449                76:    75(bool) IEqual 74 30\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.2.tesc.out:\n   84  0:26            Constant:\n   85  0:26              0 (const int)\n   86: 0:?       Barrier ( temp void)\n   87  0:?       Test condition and select ( temp void)\n   88  0:?         Condition\n   ..\n  246  0:26            Constant:\n  247  0:26              0 (const int)\n  248: 0:?       Barrier ( temp void)\n  249  0:?       Test condition and select ( temp void)\n  250  0:?         Condition\n  ...\n  441                70:     69(ptr) AccessChain 61(@entryPointOutput.cpoint) 64\n  442                                Store 70 68\n  443:                               ControlBarrier 21 10 71\n  444                72:      9(int) Load 63(InvocationId)\n  445                74:    73(bool) IEqual 72 32\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.3.tesc.out:\n   84  0:26            Constant:\n   85  0:26              0 (const int)\n   86: 0:?       Barrier ( temp void)\n   87  0:?       Test condition and select ( temp void)\n   88  0:?         Condition\n   ..\n  246  0:26            Constant:\n  247  0:26              0 (const int)\n  248: 0:?       Barrier ( temp void)\n  249  0:?       Test condition and select ( temp void)\n  250  0:?         Condition\n  ...\n  442                70:     69(ptr) AccessChain 61(@entryPointOutput.cpoint) 64\n  443                                Store 70 68\n  444:                               ControlBarrier 21 10 71\n  445                72:      9(int) Load 63(InvocationId)\n  446                74:    73(bool) IEqual 72 32\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.4.tesc.out:\n  160  0:39            Constant:\n  161  0:39              0 (const int)\n  162: 0:?       Barrier ( temp void)\n  163  0:?       Test condition and select ( temp void)\n  164  0:?         Condition\n  ...\n  391  0:39            Constant:\n  392  0:39              0 (const int)\n  393: 0:?       Barrier ( temp void)\n  394  0:?       Test condition and select ( temp void)\n  395  0:?         Condition\n  ...\n  599                92:     91(ptr) AccessChain 83(@entryPointOutput.m_Position) 84\n  600                                Store 92 90\n  601:                               ControlBarrier 93 94 95\n  602                96:      9(int) Load 80(cpid)\n  603                98:    97(bool) IEqual 96 33\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.6.tesc.out:\n  149  0:42            Constant:\n  150  0:42              1 (const int)\n  151: 0:?       Barrier ( temp void)\n  152  0:?       Test condition and select ( temp void)\n  153  0:?         Condition\n  ...\n  376  0:42            Constant:\n  377  0:42              1 (const int)\n  378: 0:?       Barrier ( temp void)\n  379  0:?       Test condition and select ( temp void)\n  380  0:?         Condition\n  ...\n  605               109:    108(ptr) AccessChain 104(@entryPointOutput.Color) 105\n  606                                Store 109 107\n  607:                               ControlBarrier 15 18 110\n  608               111:     10(int) Load 88(uCPID)\n  609               113:   112(bool) IEqual 111 36\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.ctrlpt-1.tesc.out:\n   74  0:27            Constant:\n   75  0:27              0 (const int)\n   76: 0:?       Barrier ( temp void)\n   77  0:?       Test condition and select ( temp void)\n   78  0:?         Condition\n   ..\n  312  0:27            Constant:\n  313  0:27              0 (const int)\n  314: 0:?       Barrier ( temp void)\n  315  0:?       Test condition and select ( temp void)\n  316  0:?         Condition\n  ...\n  614                69:     68(ptr) AccessChain 60(@entryPointOutput.val) 61\n  615                                Store 69 67\n  616:                               ControlBarrier 70 71 72\n  617                73:      9(int) Load 57(cpid)\n  618                75:    74(bool) IEqual 73 30\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.ctrlpt-2.tesc.out:\n   81  0:28            Constant:\n   82  0:28              0 (const int)\n   83: 0:?       Barrier ( temp void)\n   84  0:?       Test condition and select ( temp void)\n   85  0:?         Condition\n   ..\n  328  0:28            Constant:\n  329  0:28              0 (const int)\n  330: 0:?       Barrier ( temp void)\n  331  0:?       Test condition and select ( temp void)\n  332  0:?         Condition\n  ...\n  633                70:     69(ptr) AccessChain 61(@entryPointOutput.val) 62\n  634                                Store 70 68\n  635:                               ControlBarrier 71 72 73\n  636                74:      9(int) Load 58(cpid)\n  637                76:    75(bool) IEqual 74 29\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.void.tesc.out:\n   73  0:26            Constant:\n   74  0:26              0 (const int)\n   75: 0:?       Barrier ( temp void)\n   76  0:?       Test condition and select ( temp void)\n   77  0:?         Condition\n   ..\n  167  0:26            Constant:\n  168  0:26              0 (const int)\n  169: 0:?       Barrier ( temp void)\n  170  0:?       Test condition and select ( temp void)\n  171  0:?         Condition\n  ...\n  267                57:     56(ptr) AccessChain 48(@entryPointOutput.cpoint) 51\n  268                                Store 57 55\n  269:                               ControlBarrier 58 59 60\n  270                61:      9(int) Load 50(InvocationId)\n  271                63:    62(bool) IEqual 61 23\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.intrinsics.barriers.comp.out:\n    1: hlsl.intrinsics.barriers.comp\n    2  Shader version: 500\n    3  local_size = (1, 1, 1)\n    .\n    6  0:3    Function Parameters: \n    7  0:?     Sequence\n    8: 0:4      MemoryBarrier ( temp void)\n    9: 0:5      AllMemoryBarrierWithGroupSync ( temp void)\n   10: 0:6      DeviceMemoryBarrier ( temp void)\n   11: 0:7      DeviceMemoryBarrierWithGroupSync ( temp void)\n   12: 0:8      WorkgroupMemoryBarrier ( temp void)\n   13: 0:9      WorkgroupMemoryBarrierWithGroupSync ( temp void)\n   14  0:11      Branch: Return with expression\n   15  0:11        Constant:\n   ..\n   34  0:3    Function Parameters: \n   35  0:?     Sequence\n   36: 0:4      MemoryBarrier ( temp void)\n   37: 0:5      AllMemoryBarrierWithGroupSync ( temp void)\n   38: 0:6      DeviceMemoryBarrier ( temp void)\n   39: 0:7      DeviceMemoryBarrierWithGroupSync ( temp void)\n   40: 0:8      WorkgroupMemoryBarrier ( temp void)\n   41: 0:9      WorkgroupMemoryBarrierWithGroupSync ( temp void)\n   42  0:11      Branch: Return with expression\n   43  0:11        Constant:\n   ..\n   87  8(@ComputeShaderFunction():    6(float) Function None 7\n   88                 9:             Label\n   89:                               MemoryBarrier 11 12\n   90:                               ControlBarrier 13 11 12\n   91:                               MemoryBarrier 11 14\n   92:                               ControlBarrier 13 11 14\n   93:                               MemoryBarrier 13 15\n   94:                               ControlBarrier 13 13 15\n   95                                ReturnValue 16\n   96                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.310.comp.out:\n  104           4(main):           2 Function None 3\n  105                 5:             Label\n  106:                               ControlBarrier 7 7 8\n  107                19:    9(float) Load 18(s)\n  108                21:     20(ptr) AccessChain 14(outbname) 16\n  ...\n  132                63:     62(ptr) AccessChain 50(outnames) 16\n  133                                Store 63 61\n  134:                               MemoryBarrier 66 8\n  135:                               MemoryBarrier 7 67\n  136                                Return\n  137                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.320.meshShaderUserDefined.mesh.out:\n  165                97:     58(ptr) AccessChain 37(blk) 91 82 44 92\n  166                                Store 97 96\n  167:                               MemoryBarrier 88 98\n  168:                               ControlBarrier 31 31 98\n  169               104:      6(int) Load 8(iid)\n  170               105:      6(int) Load 8(iid)\n  ...\n  200               138:     69(ptr) AccessChain 103(blk2) 132 52 64\n  201                                Store 138 137\n  202:                               MemoryBarrier 88 98\n  203:                               ControlBarrier 31 31 98\n  204                                Return\n  205                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.400.tesc.out:\n  137           43(pid):     11(ptr) Variable Function\n  138           46(iid):     11(ptr) Variable Function\n  139:                               ControlBarrier 7 8 9\n  140                                Store 12(a) 13\n  141                28:     27(ptr) AccessChain 24(gl_in) 25 26\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.atomic.comp.out:\n   85                 5:             Label\n   86           23(val):     22(ptr) Variable Function\n   87:                               MemoryBarrier 14 19\n   88                21:      6(int) FunctionCall 10(func(au1;) 20(counter)\n   89                30:      7(ptr) AccessChain 27(countArr) 29\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.atomicCounter.comp.out:\n    5  ERROR: 0:16: 'atomicCounterIncrement' : no matching overloaded function found \n    6  ERROR: 0:16: 'return' : type does not match, or is not convertible to, the function's return type \n    7: ERROR: 0:21: 'memoryBarrierAtomicCounter' : no matching overloaded function found \n    8  ERROR: 0:23: 'atomicCounter' : no matching overloaded function found \n    9  ERROR: 0:23: '=' :  cannot convert from ' const float' to ' temp highp uint'\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.barrier.vert.out:\n    1: spv.barrier.vert\n    2  // Module Version 10000\n    3  // Generated by (magic number): 8000a\n    .\n   31                 5:             Label\n   32                                Store 9(c0) 11\n   33:                               MemoryBarrier 13 14\n   34                                Store 15(c1) 11\n   35:                               MemoryBarrier 13 16\n   36                17:    7(fvec4) Load 9(c0)\n   37                18:    7(fvec4) CompositeConstruct 10 10 10 10\n   38                19:    7(fvec4) FAdd 17 18\n   39                                Store 9(c0) 19\n   40:                               MemoryBarrier 13 20\n   41                21:    7(fvec4) Load 9(c0)\n   42                22:    7(fvec4) CompositeConstruct 10 10 10 10\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.memoryScopeSemantics.comp.out:\n  222                70:     69(ptr) AccessChain 68(bufferu) 38\n  223                72:     15(int) AtomicIAdd 70 12 18 71\n  224:                               MemoryBarrier 26 18\n  225:                               ControlBarrier 26 26 64\n  226:                               ControlBarrier 26 26 17\n  227                74:     69(ptr) AccessChain 68(bufferu) 38\n  228                75:     15(int) Load 74 MakePointerVisibleKHR NonPrivatePointerKHR 26\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.memoryScopeSemantics_Error.comp.out:\n    5  ERROR: 0:18: 'atomicStore' : Invalid semantics value \n    6  ERROR: 0:19: 'imageAtomicLoad' : Invalid storage class semantics value \n    7: ERROR: 0:20: 'memoryBarrier' : Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease \n    8: ERROR: 0:21: 'memoryBarrier' : Storage class semantics must not be zero \n    9: ERROR: 0:22: 'memoryBarrier' : Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease \n   10  ERROR: 0:23: 'atomicAdd' : Semantics must not include multiple of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease \n   11  ERROR: 0:24: 'atomicCompSwap' : semUnequal must not be gl_SemanticsRelease or gl_SemanticsAcquireRelease \n   12: ERROR: 0:25: 'memoryBarrier' : gl_SemanticsMakeVisible requires gl_SemanticsAcquire or gl_SemanticsAcquireRelease \n   13: ERROR: 0:26: 'memoryBarrier' : gl_SemanticsMakeAvailable requires gl_SemanticsRelease or gl_SemanticsAcquireRelease \n   14: ERROR: 0:27: 'memoryBarrier' : gl_SemanticsVolatile must not be used with memoryBarrier or controlBarrier \n   15  ERROR: 0:28: 'atomicCompSwap' : semEqual and semUnequal must either both include gl_SemanticsVolatile or neither \n   16  ERROR: 14 compilation errors.  No code generated.\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderBuiltins.mesh.out:\n  165                54:     45(ptr) AccessChain 34(gl_MeshVerticesNV) 52 49 48\n  166                                Store 54 53\n  167:                               MemoryBarrier 27 55\n  168:                               ControlBarrier 56 56 55\n  169                57:      6(int) Load 8(iid)\n  170                58:      6(int) IAdd 57 27\n  ...\n  195                80:     45(ptr) AccessChain 34(gl_MeshVerticesNV) 76 49 48\n  196                                Store 80 79\n  197:                               MemoryBarrier 27 55\n  198:                               ControlBarrier 56 56 55\n  199                89:      6(int) Load 8(iid)\n  200                92:     91(ptr) AccessChain 88(gl_MeshPrimitivesNV) 89 37\n  ...\n  209               101:     91(ptr) AccessChain 88(gl_MeshPrimitivesNV) 99 49 37\n  210                                Store 101 100\n  211:                               MemoryBarrier 27 55\n  212:                               ControlBarrier 56 56 55\n  213               102:      6(int) Load 8(iid)\n  214               103:      6(int) IAdd 102 27\n  ...\n  239               125:     91(ptr) AccessChain 88(gl_MeshPrimitivesNV) 121 49 37\n  240                                Store 125 124\n  241:                               MemoryBarrier 27 55\n  242:                               ControlBarrier 56 56 55\n  243               132:    131(ptr) AccessChain 129(gl_PrimitiveIndicesNV) 37\n  244                                Store 132 130\n  ...\n  256               145:         144 WritePackedPrimitiveIndices4x8NV\n  257                                Store 146(gl_PrimitiveCountNV) 126\n  258:                               MemoryBarrier 27 55\n  259:                               ControlBarrier 56 56 55\n  260                                Return\n  261                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderPerViewBuiltins.mesh.out:\n  162                82:     76(ptr) AccessChain 72(gl_MeshPrimitivesNV) 78 53 79 80\n  163                                Store 82 81\n  164:                               MemoryBarrier 28 83\n  165:                               ControlBarrier 84 84 83\n  166                85:      6(int) Load 8(iid)\n  167                86:      6(int) IAdd 85 28\n  ...\n  209               124:     76(ptr) AccessChain 72(gl_MeshPrimitivesNV) 118 53 119 80\n  210                                Store 124 123\n  211:                               MemoryBarrier 28 83\n  212:                               ControlBarrier 84 84 83\n  213                                Return\n  214                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderPerViewUserDefined.mesh.out:\n  180                59:     43(ptr) AccessChain 35(b) 55 56\n  181                                Store 59 58\n  182:                               MemoryBarrier 60 61\n  183:                               ControlBarrier 62 62 61\n  184                68:      6(int) Load 8(iid)\n  185                69:      6(int) Load 16(viewID)\n  ...\n  198                87:     43(ptr) AccessChain 67(b2) 83 56 84\n  199                                Store 87 86\n  200:                               MemoryBarrier 60 61\n  201:                               ControlBarrier 62 62 61\n  202                                Return\n  203                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderRedeclBuiltins.mesh.out:\n  133                48:     39(ptr) AccessChain 28(gl_MeshVerticesNV) 46 43 42\n  134                                Store 48 47\n  135:                               MemoryBarrier 49 50\n  136:                               ControlBarrier 51 51 50\n  137                52:      6(int) Load 8(iid)\n  138                53:      6(int) IAdd 52 49\n  ...\n  163                75:     39(ptr) AccessChain 28(gl_MeshVerticesNV) 71 43 42\n  164                                Store 75 74\n  165:                               MemoryBarrier 49 50\n  166:                               ControlBarrier 51 51 50\n  167                82:      6(int) Load 8(iid)\n  168                85:     84(ptr) AccessChain 81(gl_MeshPrimitivesNV) 82 31\n  ...\n  177                94:     84(ptr) AccessChain 81(gl_MeshPrimitivesNV) 92 43 31\n  178                                Store 94 93\n  179:                               MemoryBarrier 49 50\n  180:                               ControlBarrier 51 51 50\n  181                95:      6(int) Load 8(iid)\n  182                96:      6(int) IAdd 95 49\n  ...\n  207               118:     84(ptr) AccessChain 81(gl_MeshPrimitivesNV) 114 43 31\n  208                                Store 118 117\n  209:                               MemoryBarrier 49 50\n  210:                               ControlBarrier 51 51 50\n  211               124:    123(ptr) AccessChain 122(gl_PrimitiveIndicesNV) 31\n  212                                Store 124 49\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderRedeclPerViewBuiltins.mesh.out:\n  135                76:     71(ptr) AccessChain 67(gl_MeshPrimitivesNV) 73 48 74 38\n  136                                Store 76 75\n  137:                               MemoryBarrier 60 77\n  138:                               ControlBarrier 78 78 77\n  139                79:      6(int) Load 8(iid)\n  140                80:      6(int) IAdd 79 60\n  ...\n  182               118:     71(ptr) AccessChain 67(gl_MeshPrimitivesNV) 112 48 113 38\n  183                                Store 118 117\n  184:                               MemoryBarrier 60 77\n  185:                               ControlBarrier 78 78 77\n  186                                Return\n  187                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderSharedMem.mesh.out:\n  125                72:   31(fvec4) Load 71\n  126                                ImageWrite 64 67 72\n  127:                               MemoryBarrier 69 73\n  128:                               ControlBarrier 74 74 73\n  129                                Return\n  130                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderUserDefined.mesh.out:\n  163                95:     57(ptr) AccessChain 34(blk) 89 81 44 90\n  164                                Store 95 94\n  165:                               MemoryBarrier 42 96\n  166:                               ControlBarrier 28 28 96\n  167               102:      6(int) Load 8(iid)\n  168               103:      6(int) Load 8(iid)\n  ...\n  198               136:     68(ptr) AccessChain 101(blk2) 130 52 63\n  199                                Store 136 135\n  200:                               MemoryBarrier 42 96\n  201:                               ControlBarrier 28 28 96\n  202                                Return\n  203                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshTaskShader.task.out:\n  173                82:   41(fvec4) Load 81\n  174                                ImageWrite 74 77 82\n  175:                               MemoryBarrier 79 83\n  176:                               ControlBarrier 84 84 83\n  177                95:     94(ptr) AccessChain 90(mytask) 51\n  178                                Store 95 93\n  ...\n  190               112:    111(ptr) AccessChain 90(mytask) 104\n  191                                Store 112 110\n  192:                               MemoryBarrier 79 83\n  193:                               ControlBarrier 84 84 83\n  194                                Store 113(gl_TaskCountNV) 86\n  195                                Return\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.subgroupBasic.comp.out:\n   76                31:     17(ptr) AccessChain 10(data) 11 26\n   77                                Store 31 30\n   78:                               ControlBarrier 28 28 32\n   79:                               MemoryBarrier 28 32\n   80:                               MemoryBarrier 28 33\n   81:                               MemoryBarrier 28 34\n   82:                               MemoryBarrier 28 35\n   83                                Return\n   84                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/web.comp.out:\n   97         %main = OpFunction %void None %3\n   98            %5 = OpLabel\n   99:                OpControlBarrier %uint_2 %uint_2 %uint_264\n  100           %20 = OpAccessChain %_ptr_Uniform_int %bInst %int_0\n  101           %21 = OpLoad %int %20\n  ...\n  106           %29 = OpAccessChain %_ptr_Uniform_v4float %bInst %int_2 %22\n  107                 OpStore %29 %28\n  108:                OpMemoryBarrier %uint_1 %uint_3400\n  109:                OpMemoryBarrier %uint_2 %uint_3400\n  110:                OpMemoryBarrier %uint_1 %uint_264\n  111:                OpMemoryBarrier %uint_1 %uint_72\n  112           %44 = OpCompositeExtract %uint %gl_WorkGroupSize 0\n  113           %49 = OpAccessChain %_ptr_Private_int %arrX %int_0\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.frag:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)         \n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  106  {\n  107    data = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  108:   subgroupBarrier();\n  109:   subgroupMemoryBarrier();\n  110:   subgroupMemoryBarrierBuffer();\n  111:   subgroupMemoryBarrierImage();\n  112    subgroupElect();\n  113  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.geom:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  112  {\n  113    result[gl_PrimitiveIDIn] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  114:   subgroupBarrier();\n  115:   subgroupMemoryBarrier();\n  116:   subgroupMemoryBarrierBuffer();\n  117:   subgroupMemoryBarrierImage();\n  118    subgroupElect();\n  119  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.tesc:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  111  {\n  112    result[gl_PrimitiveID] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  113:   subgroupBarrier();\n  114:   subgroupMemoryBarrier();\n  115:   subgroupMemoryBarrierBuffer();\n  116:   subgroupMemoryBarrierImage();\n  117    subgroupElect();\n  118  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.tese:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  111  {\n  112    result[gl_PrimitiveID] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  113:   subgroupBarrier();\n  114:   subgroupMemoryBarrier();\n  115:   subgroupMemoryBarrierBuffer();\n  116:   subgroupMemoryBarrierImage();\n  117    subgroupElect();\n  118  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.vert:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  110  {\n  111    result[gl_VertexID] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  112:   subgroupBarrier();\n  113:   subgroupMemoryBarrier();\n  114:   subgroupMemoryBarrierBuffer();\n  115:   subgroupMemoryBarrierImage();\n  116    subgroupElect();\n  117  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroupBasic.comp:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, extension not enabled (basic)\n   14    gl_SubgroupID;                 // ERROR, extension not enabled (basic)\n   15:   subgroupMemoryBarrierShared(); // ERROR, extension not enabled (basic)\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  116      data.a[gl_NumSubgroups] = 1;\n  117      data.a[gl_SubgroupID] = (subgroupElect()) ? 1 : 0;\n  118:     subgroupBarrier();\n  119:     subgroupMemoryBarrier();\n  120:     subgroupMemoryBarrierBuffer();\n  121:     subgroupMemoryBarrierShared();\n  122:     subgroupMemoryBarrierImage();\n  123  }\n  124  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.mesh:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, extension not enabled (basic)\n   14    gl_SubgroupID;                 // ERROR, extension not enabled (basic)\n   15:   subgroupMemoryBarrierShared(); // ERROR, extension not enabled (basic)\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  104  #define MAX_PRIM 32\n  105  \n  106: #define BARRIER() \\\n  107:     memoryBarrierShared(); \\\n  108:     barrier();\n  109  \n  110  #extension GL_NV_mesh_shader : enable\n  ...\n  128      gl_MeshVerticesNV[iid].gl_CullDistance[2] = 4.0;\n  129  \n  130:     BARRIER();\n  131  \n  132      gl_MeshVerticesNV[iid+1].gl_Position = gl_MeshVerticesNV[iid].gl_Position;\n  ...\n  135      gl_MeshVerticesNV[iid+1].gl_CullDistance[2] = gl_MeshVerticesNV[iid].gl_CullDistance[2];\n  136  \n  137:     BARRIER();\n  138  \n  139      gl_MeshPrimitivesNV[iid].gl_PrimitiveID = 6;\n  ...\n  142      gl_MeshPrimitivesNV[iid].gl_ViewportMask[0] = 9;\n  143  \n  144:     BARRIER();\n  145  \n  146      gl_MeshPrimitivesNV[iid+1].gl_PrimitiveID = gl_MeshPrimitivesNV[iid].gl_PrimitiveID;\n  ...\n  149      gl_MeshPrimitivesNV[iid+1].gl_ViewportMask[0] = gl_MeshPrimitivesNV[iid].gl_ViewportMask[0];\n  150  \n  151:     BARRIER();\n  152  \n  153      // check bound limits\n  ...\n  161      gl_PrimitiveCountNV = MAX_PRIM * 3;\n  162  \n  163:     BARRIER();\n  164  }\n  165  \n  ...\n  169    gl_SubgroupSize;\n  170    gl_SubgroupInvocationID;\n  171:   subgroupBarrier();\n  172:   subgroupMemoryBarrier();\n  173:   subgroupMemoryBarrierBuffer();\n  174:   subgroupMemoryBarrierImage();\n  175    subgroupElect();\n  176    gl_NumSubgroups;                  // allowed in mesh\n  177    gl_SubgroupID;                    // allowed in mesh\n  178:   subgroupMemoryBarrierShared();    // allowed in mesh\n  179  }\n  180  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rahit:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  133    gl_SubgroupSize;\n  134    gl_SubgroupInvocationID;\n  135:   subgroupBarrier();\n  136:   subgroupMemoryBarrier();\n  137:   subgroupMemoryBarrierBuffer();\n  138:   subgroupMemoryBarrierImage();\n  139    subgroupElect();\n  140  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rcall:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  121    gl_SubgroupSize;\n  122    gl_SubgroupInvocationID;\n  123:   subgroupBarrier();\n  124:   subgroupMemoryBarrier();\n  125:   subgroupMemoryBarrierBuffer();\n  126:   subgroupMemoryBarrierImage();\n  127    subgroupElect();\n  128  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rchit:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  131    gl_SubgroupSize;\n  132    gl_SubgroupInvocationID;\n  133:   subgroupBarrier();\n  134:   subgroupMemoryBarrier();\n  135:   subgroupMemoryBarrierBuffer();\n  136:   subgroupMemoryBarrierImage();\n  137    subgroupElect();\n  138  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rgen:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  125    gl_SubgroupSize;\n  126    gl_SubgroupInvocationID;\n  127:   subgroupBarrier();\n  128:   subgroupMemoryBarrier();\n  129:   subgroupMemoryBarrierBuffer();\n  130:   subgroupMemoryBarrierImage();\n  131    subgroupElect();\n  132  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rint:\n    8    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    9    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n   10:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   13:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   14    subgroupElect();               // ERROR, extension not enabled (basic)\n   15    gl_NumSubgroups;               // ERROR, only defined in compute\n   16    gl_SubgroupID;                 // ERROR, only defined in compute\n   17:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   18  \n   19    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  131    gl_SubgroupSize;\n  132    gl_SubgroupInvocationID;\n  133:   subgroupBarrier();\n  134:   subgroupMemoryBarrier();\n  135:   subgroupMemoryBarrierBuffer();\n  136:   subgroupMemoryBarrierImage();\n  137    subgroupElect();\n  138  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rmiss:\n    8    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    9    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n   10:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   13:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   14    subgroupElect();               // ERROR, extension not enabled (basic)\n   15    gl_NumSubgroups;               // ERROR, only defined in compute\n   16    gl_SubgroupID;                 // ERROR, only defined in compute\n   17:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   18  \n   19    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  125    gl_SubgroupSize;\n  126    gl_SubgroupInvocationID;\n  127:   subgroupBarrier();\n  128:   subgroupMemoryBarrier();\n  129:   subgroupMemoryBarrierBuffer();\n  130:   subgroupMemoryBarrierImage();\n  131    subgroupElect();\n  132  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.task:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, extension not enabled (basic)\n   14    gl_SubgroupID;                 // ERROR, extension not enabled (basic)\n   15:   subgroupMemoryBarrierShared(); // ERROR, extension not enabled (basic)\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  103  #define MAX_VIEWS gl_MaxMeshViewCountNV\n  104  \n  105: #define BARRIER() \\\n  106:     memoryBarrierShared(); \\\n  107:     barrier();\n  108  \n  109  #extension GL_NV_mesh_shader : enable\n  ...\n  138      imageStore(uni_image, ivec2(iid), mem[gid+1]);\n  139  \n  140:     BARRIER();\n  141  \n  142      // 2. task memory stores\n  ...\n  148      mytask.viewID     = viewID;\n  149  \n  150:     BARRIER();\n  151  \n  152      // 3. set task count\n  ...\n  159    gl_SubgroupSize;\n  160    gl_SubgroupInvocationID;\n  161:   subgroupBarrier();\n  162:   subgroupMemoryBarrier();\n  163:   subgroupMemoryBarrierBuffer();\n  164:   subgroupMemoryBarrierImage();\n  165    subgroupElect();\n  166    gl_NumSubgroups;                  // allowed in task\n  167    gl_SubgroupID;                    // allowed in task\n  168:   subgroupMemoryBarrierShared();    // allowed in task\n  169  }\n  170  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.es320.subgroupBasic.comp:\n   16      data.a[gl_NumSubgroups] = 1;\n   17      data.a[gl_SubgroupID] = (subgroupElect()) ? 1 : 0;\n   18:     subgroupBarrier();\n   19:     subgroupMemoryBarrier();\n   20:     subgroupMemoryBarrierBuffer();\n   21:     subgroupMemoryBarrierShared();\n   22:     subgroupMemoryBarrierImage();\n   23  }\n   24  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.barriers.comp:\n    2  float ComputeShaderFunction()\n    3  {\n    4:     AllMemoryBarrier();\n    5:     AllMemoryBarrierWithGroupSync();\n    6:     DeviceMemoryBarrier();\n    7:     DeviceMemoryBarrierWithGroupSync();\n    8:     GroupMemoryBarrier();\n    9:     GroupMemoryBarrierWithGroupSync();\n   10  \n   11      return 0.0;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.negative.comp:\n    3      uint out_u1;\n    4  \n    5:     // AllMemoryBarrier();              // invalid in fragment stage  TODO: parser currently crashes on empty arg list\n    6:     // AllMemoryBarrierWithGroupSync(); // invalid in fragment stage  TODO: parser currently crashes on empty arg list\n    7      // asdouble(inF0, inF1);                     // expected error: only integer inputs\n    8      // CheckAccessFullyMapped(3.0);              // expected error: only valid on integers\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.negative.frag:\n    1  float PixelShaderFunctionS(float inF0, float inF1, float inF2, int inI0)\n    2  {\n    3:     // AllMemoryBarrier();              // TODO: expected error: invalid in fragment stage\n    4:     // AllMemoryBarrierWithGroupSync(); // TODO: expected error: invalid in fragment stage\n    5      asdouble(inF0, inF1);                     // expected error: only integer inputs\n    6      CheckAccessFullyMapped(3.0);              // expected error: only valid on integers\n    .\n    9      D3DCOLORtoUBYTE4(inF0);                   // expected error: only on float4 inputs\n   10      determinant(inF0);                        // expected error: only valid on mats\n   11:     // DeviceMemoryBarrierWithGroupSync();      // TODO: expected error: only valid in compute stage\n   12      f16tof32(inF0);                           // expected error: only integer inputs\n   13      firstbithigh(inF0);                       // expected error: only integer inputs\n   ..\n   19      // InterlockedOor(inI0, inI0, 3);            // expected error: last parameter is out TODO: accepted even though marked as out in proto generator\n   20      // InterlockedXor(inI0, inI0, 3);            // expected error: last parameter is out TODO: accepted even though marked as out in proto generator\n   21:     // GroupMemoryBarrier();               // TODO: expected error: invalid in fragment stage\n   22:     // GroupMemoryBarrierWithGroupSync();  // TODO: expected error: invalid in fragment stage\n   23      length(inF0);                             // expected error: invalid on scalars\n   24      msad4(inF0, float2(0), float4(0));        // expected error: only integer inputs\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.negative.vert:\n   16      uint out_u1;\n   17  \n   18:     // AllMemoryBarrier();                       // expected error: only valid in compute stage\n   19:     // AllMemoryBarrierWithGroupSync();          // expected error: only valid in compute stage\n   20      // asdouble(inF0, inF1);                     // expected error: only integer inputs\n   21      // CheckAccessFullyMapped(3.0);              // expected error: only valid on integers\n   ..\n   25      // cross(inF0, inF1);                        // expected error: only on float3 inputs\n   26      // D3DCOLORtoUBYTE4(inF0);                   // expected error: only on float4 inputs\n   27:     // DeviceMemoryBarrier();                    // expected error: only valid in pixel & compute stages\n   28:     // DeviceMemoryBarrierWithGroupSync();       // expected error: only valid in compute stage\n   29      // ddx(inF0);                                // expected error: only valid in pixel stage\n   30      // ddx_coarse(inF0);                         // expected error: only valid in pixel stage\n   ..\n   56      // InterlockedXor(gs_ua, gs_ub);             // expected error: only valid in pixel stage\n   57      // InterlockedXor(gs_ua, gs_ub, out_u1);     // expected error: only valid in pixel stage\n   58:     // GroupMemoryBarrier();                     // expected error: only valid in compute stage\n   59:     // GroupMemoryBarrierWithGroupSync();        // expected error: only valid in compute stage\n   60      // length(inF0);                             // expect error: invalid on scalars\n   61      // msad4(inF0, float2(0), float4(0));        // expected error: only integer inputs\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.310.comp:\n   29  void main()\n   30  {\n   31:     barrier();\n   32      outbname.f = s;\n   33      outbnamena.na = vec4(s);\n   ..\n   38      outnames.s = outbname.uns.length();\n   39      gl_DeviceIndex;\n   40:     memoryBarrierShared();\n   41:     groupMemoryBarrier();\n   42  }\n   43  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.320.meshShaderUserDefined.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   48      blk[iid*4].mArr[1][gid]  = vec3(17.0, 18.0, 19.0);\n   49  \n   50:     BARRIER();\n   51  \n   52      blk2[iid].f           = blk2[iid-1].f + 20.0;\n   ..\n   56      blk2[iid+2].m[3]      = blk2[iid+1].m[gid];\n   57  \n   58:     BARRIER();\n   59  }\n   60  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.400.tesc:\n    8  void main()\n    9  {\n   10:     barrier();\n   11  \n   12      int a = gl_MaxTessControlInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.atomic.comp:\n   19  void main()\n   20  {\n   21:     memoryBarrierAtomicCounter();\n   22      func(counter);\n   23      uint val = atomicCounter(countArr[2]);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.atomicCounter.comp:\n   19  void main()\n   20  {\n   21:     memoryBarrierAtomicCounter();\n   22      func(counter);\n   23      uint val = atomicCounter(countArr[2]);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.barrier.vert:\n    7  {\n    8      c0 = vec4(1.0);\n    9:     memoryBarrier();\n   10      c1 = vec4(1.0);\n   11:     memoryBarrierBuffer();\n   12      ++c0;\n   13:     memoryBarrierImage();\n   14      ++c0;\n   15  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.memoryScopeSemantics.comp:\n   40      origu = atomicCompSwap(atomu, 10u, value, gl_ScopeDevice, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire);\n   41      atomicAdd(bufferu.x, 1, gl_ScopeDevice, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsRelease);\n   42:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsRelease);\n   43:     controlBarrier(gl_ScopeWorkgroup, gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire);\n   44:     controlBarrier(gl_ScopeWorkgroup, gl_ScopeWorkgroup, 0, 0);\n   45  \n   46      uint y;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.memoryScopeSemantics_Error.comp:\n   18      atomicStore(atomu, value, gl_ScopeDevice, gl_StorageSemanticsBuffer, gl_StorageSemanticsBuffer);\n   19      origi = imageAtomicLoad(imagei, ivec2(0,0), gl_ScopeDevice, gl_SemanticsAcquire, gl_SemanticsAcquire);\n   20:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, 0);\n   21:     memoryBarrier(gl_ScopeWorkgroup, 0, gl_SemanticsRelease);\n   22:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsRelease | gl_SemanticsAcquire);\n   23      atomicAdd(atomu, value, gl_ScopeDevice, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsAcquire);\n   24      uint origu = atomicCompSwap(atomu, 10u, value, gl_ScopeDevice, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquireRelease);\n   25:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsMakeVisible);\n   26:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer, gl_SemanticsAcquire | gl_SemanticsMakeAvailable);\n   27:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsVolatile);\n   28      atomicCompSwap(bufferi.x, 10u, 10u, gl_ScopeDevice, gl_StorageSemanticsBuffer, gl_SemanticsAcquire | gl_SemanticsVolatile, gl_StorageSemanticsBuffer, gl_SemanticsAcquire);\n   29  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderBuiltins.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   28      gl_MeshVerticesNV[iid].gl_CullDistance[2] = 4.0;\n   29  \n   30:     BARRIER();\n   31  \n   32      gl_MeshVerticesNV[iid+1].gl_Position = gl_MeshVerticesNV[iid].gl_Position;\n   ..\n   35      gl_MeshVerticesNV[iid+1].gl_CullDistance[2] = gl_MeshVerticesNV[iid].gl_CullDistance[2];\n   36  \n   37:     BARRIER();\n   38  \n   39      gl_MeshPrimitivesNV[iid].gl_PrimitiveID = 6;\n   ..\n   42      gl_MeshPrimitivesNV[iid].gl_ViewportMask[0] = 9;\n   43  \n   44:     BARRIER();\n   45  \n   46      gl_MeshPrimitivesNV[iid+1].gl_PrimitiveID = gl_MeshPrimitivesNV[iid].gl_PrimitiveID;\n   ..\n   49      gl_MeshPrimitivesNV[iid+1].gl_ViewportMask[0] = gl_MeshPrimitivesNV[iid].gl_ViewportMask[0];\n   50  \n   51:     BARRIER();\n   52  \n   53      // check bound limits\n   ..\n   61      gl_PrimitiveCountNV = MAX_PRIM * 3;\n   62  \n   63:     BARRIER();\n   64  }\n   65  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderPerViewBuiltins.mesh:\n    5  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    6  \n    7: #define BARRIER() \\\n    8:     memoryBarrierShared(); \\\n    9:     barrier();\n   10  \n   11  #extension GL_NV_mesh_shader : enable\n   ..\n   30      gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0] = 8;\n   31  \n   32:     BARRIER();\n   33  \n   34      gl_MeshVerticesNV[iid+1].gl_PositionPerViewNV[viewID]          = gl_MeshVerticesNV[iid].gl_PositionPerViewNV[viewID];\n   ..\n   38      gl_MeshPrimitivesNV[iid+1].gl_ViewportMaskPerViewNV[viewID][0] = gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0];\n   39  \n   40:     BARRIER();\n   41  }\n   42  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderPerViewUserDefined.mesh:\n    5  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    6  \n    7: #define BARRIER() \\\n    8:     memoryBarrierShared(); \\\n    9:     barrier();\n   10  \n   11  #extension GL_NV_mesh_shader : enable\n   ..\n   57      b[iid].color4            = vec4(4.0);\n   58  \n   59:     BARRIER();\n   60  \n   61      b2[iid].color5[viewID]    = vec4(5.0);\n   ..\n   64      b2[iid].color8[viewID]    = vec4(8.0);\n   65  \n   66:     BARRIER();\n   67  }\n   68  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderRedeclBuiltins.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   44      gl_MeshVerticesNV[iid].gl_CullDistance[2] = 4.0;\n   45  \n   46:     BARRIER();\n   47  \n   48      gl_MeshVerticesNV[iid+1].gl_Position = gl_MeshVerticesNV[iid].gl_Position;\n   ..\n   51      gl_MeshVerticesNV[iid+1].gl_CullDistance[2] = gl_MeshVerticesNV[iid].gl_CullDistance[2];\n   52  \n   53:     BARRIER();\n   54  \n   55      gl_MeshPrimitivesNV[iid].gl_PrimitiveID = 6;\n   ..\n   58      gl_MeshPrimitivesNV[iid].gl_ViewportMask[0] = 9;\n   59  \n   60:     BARRIER();\n   61  \n   62      gl_MeshPrimitivesNV[iid+1].gl_PrimitiveID = gl_MeshPrimitivesNV[iid].gl_PrimitiveID;\n   ..\n   65      gl_MeshPrimitivesNV[iid+1].gl_ViewportMask[0] = gl_MeshPrimitivesNV[iid].gl_ViewportMask[0];\n   66  \n   67:     BARRIER();\n   68  \n   69      // check bound limits\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderRedeclPerViewBuiltins.mesh:\n    5  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    6  \n    7: #define BARRIER() \\\n    8:     memoryBarrierShared(); \\\n    9:     barrier();\n   10  \n   11  #extension GL_NV_mesh_shader : enable\n   ..\n   41      gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0] = 8;\n   42  \n   43:     BARRIER();\n   44  \n   45      gl_MeshVerticesNV[iid+1].gl_PositionPerViewNV[viewID]          = gl_MeshVerticesNV[iid].gl_PositionPerViewNV[viewID];\n   ..\n   49      gl_MeshPrimitivesNV[iid+1].gl_ViewportMaskPerViewNV[viewID][0] = gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0];\n   50  \n   51:     BARRIER();\n   52  }\n   53  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderSharedMem.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   36      imageStore(uni_image, ivec2(iid), mem[gid+1]);\n   37  \n   38:     BARRIER();\n   39  }\n   40  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderTaskMem.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderUserDefined.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   48      blk[iid*4].mArr[1][gid]  = vec3(17.0, 18.0, 19.0);\n   49  \n   50:     BARRIER();\n   51  \n   52      blk2[iid].f           = blk2[iid-1].f + 20.0;\n   ..\n   56      blk2[iid+2].m[3]      = blk2[iid+1].m[gid];\n   57  \n   58:     BARRIER();\n   59  }\n   60  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshTaskShader.task:\n    3  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    4  \n    5: #define BARRIER() \\\n    6:     memoryBarrierShared(); \\\n    7:     barrier();\n    8  \n    9  #extension GL_NV_mesh_shader : enable\n   ..\n   38      imageStore(uni_image, ivec2(iid), mem[gid+1]);\n   39  \n   40:     BARRIER();\n   41  \n   42      // 2. task memory stores\n   ..\n   48      mytask.viewID     = viewID;\n   49  \n   50:     BARRIER();\n   51  \n   52      // 3. set task count\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.subgroupBasic.comp:\n   16      data.a[gl_NumSubgroups] = 1;\n   17      data.a[gl_SubgroupID] = (subgroupElect()) ? 1 : 0;\n   18:     subgroupBarrier();\n   19:     subgroupMemoryBarrier();\n   20:     subgroupMemoryBarrierBuffer();\n   21:     subgroupMemoryBarrierShared();\n   22:     subgroupMemoryBarrierImage();\n   23  }\n   24  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/web.comp:\n   27  void main()\n   28  {\n   29:     barrier();\n   30  \n   31      bInst.data[bInst.size / 2] *= vec4(7.0);\n   32  \n   33:     memoryBarrier();\n   34:     groupMemoryBarrier();\n   35:     memoryBarrierShared();\n   36:     memoryBarrierBuffer();\n   37  \n   38      s[3] = vec4(0, arrX[0], arrY[0], arrZ[0]);\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/example_win32_directx12/main.cpp:\n  386          frameCtxt->CommandAllocator->Reset();\n  387  \n  388:         D3D12_RESOURCE_BARRIER barrier = {};\n  389:         barrier.Type                   = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n  390:         barrier.Flags                  = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  391:         barrier.Transition.pResource   = g_mainRenderTargetResource[backBufferIdx];\n  392:         barrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n  393:         barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_PRESENT;\n  394:         barrier.Transition.StateAfter  = D3D12_RESOURCE_STATE_RENDER_TARGET;\n  395  \n  396          g_pd3dCommandList->Reset(frameCtxt->CommandAllocator, NULL);\n  397:         g_pd3dCommandList->ResourceBarrier(1, &barrier);\n  398          g_pd3dCommandList->ClearRenderTargetView(g_mainRenderTargetDescriptor[backBufferIdx], (float*)&clear_color, 0, NULL);\n  399          g_pd3dCommandList->OMSetRenderTargets(1, &g_mainRenderTargetDescriptor[backBufferIdx], FALSE, NULL);\n  ...\n  401          ImGui::Render();\n  402          ImGui_ImplDX12_RenderDrawData(ImGui::GetDrawData(), g_pd3dCommandList);\n  403:         barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_RENDER_TARGET;\n  404:         barrier.Transition.StateAfter  = D3D12_RESOURCE_STATE_PRESENT;\n  405:         g_pd3dCommandList->ResourceBarrier(1, &barrier);\n  406          g_pd3dCommandList->Close();\n  407  \n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/imgui_impl_dx12.cpp:\n  298          dstLocation.SubresourceIndex = 0;\n  299  \n  300:         D3D12_RESOURCE_BARRIER barrier = {};\n  301:         barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n  302:         barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  303:         barrier.Transition.pResource   = pTexture;\n  304:         barrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n  305:         barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_COPY_DEST;\n  306:         barrier.Transition.StateAfter  = D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;\n  307  \n  308          ID3D12Fence* fence = NULL;\n  ...\n  331  \n  332          cmdList->CopyTextureRegion(&dstLocation, 0, 0, 0, &srcLocation, NULL);\n  333:         cmdList->ResourceBarrier(1, &barrier);\n  334  \n  335          hr = cmdList->Close();\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/imgui_impl_vulkan.cpp:\n  425      // Copy to Image:\n  426      {\n  427:         VkImageMemoryBarrier copy_barrier[1] = {};\n  428:         copy_barrier[0].sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n  429:         copy_barrier[0].dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n  430:         copy_barrier[0].oldLayout = VK_IMAGE_LAYOUT_UNDEFINED;\n  431:         copy_barrier[0].newLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;\n  432:         copy_barrier[0].srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  433:         copy_barrier[0].dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  434:         copy_barrier[0].image = g_FontImage;\n  435:         copy_barrier[0].subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  436:         copy_barrier[0].subresourceRange.levelCount = 1;\n  437:         copy_barrier[0].subresourceRange.layerCount = 1;\n  438:         vkCmdPipelineBarrier(command_buffer, VK_PIPELINE_STAGE_HOST_BIT, VK_PIPELINE_STAGE_TRANSFER_BIT, 0, 0, NULL, 0, NULL, 1, copy_barrier);\n  439  \n  440          VkBufferImageCopy region = {};\n  ...\n  446          vkCmdCopyBufferToImage(command_buffer, g_UploadBuffer, g_FontImage, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &region);\n  447  \n  448:         VkImageMemoryBarrier use_barrier[1] = {};\n  449:         use_barrier[0].sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n  450:         use_barrier[0].srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n  451:         use_barrier[0].dstAccessMask = VK_ACCESS_SHADER_READ_BIT;\n  452:         use_barrier[0].oldLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;\n  453:         use_barrier[0].newLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;\n  454:         use_barrier[0].srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  455:         use_barrier[0].dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  456:         use_barrier[0].image = g_FontImage;\n  457:         use_barrier[0].subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  458:         use_barrier[0].subresourceRange.levelCount = 1;\n  459:         use_barrier[0].subresourceRange.layerCount = 1;\n  460:         vkCmdPipelineBarrier(command_buffer, VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, 0, 0, NULL, 0, NULL, 1, use_barrier);\n  461      }\n  462  \n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/libs/gl3w/GL/gl3w.c:\n  672  PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC gl3wGetActiveAtomicCounterBufferiv;\n  673  PFNGLBINDIMAGETEXTUREPROC gl3wBindImageTexture;\n  674: PFNGLMEMORYBARRIERPROC gl3wMemoryBarrier;\n  675  PFNGLTEXSTORAGE1DPROC gl3wTexStorage1D;\n  676  PFNGLTEXSTORAGE2DPROC gl3wTexStorage2D;\n  ...\n 1279  \tgl3wGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) get_proc(\"glGetActiveAtomicCounterBufferiv\");\n 1280  \tgl3wBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) get_proc(\"glBindImageTexture\");\n 1281: \tgl3wMemoryBarrier = (PFNGLMEMORYBARRIERPROC) get_proc(\"glMemoryBarrier\");\n 1282  \tgl3wTexStorage1D = (PFNGLTEXSTORAGE1DPROC) get_proc(\"glTexStorage1D\");\n 1283  \tgl3wTexStorage2D = (PFNGLTEXSTORAGE2DPROC) get_proc(\"glTexStorage2D\");\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/libs/gl3w/GL/gl3w.h:\n  559  extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC gl3wGetActiveAtomicCounterBufferiv;\n  560  extern PFNGLBINDIMAGETEXTUREPROC gl3wBindImageTexture;\n  561: extern PFNGLMEMORYBARRIERPROC gl3wMemoryBarrier;\n  562  extern PFNGLTEXSTORAGE1DPROC gl3wTexStorage1D;\n  563  extern PFNGLTEXSTORAGE2DPROC gl3wTexStorage2D;\n  ...\n 1164  #define glGetActiveAtomicCounterBufferiv\t\tgl3wGetActiveAtomicCounterBufferiv\n 1165  #define glBindImageTexture\t\tgl3wBindImageTexture\n 1166: #define glMemoryBarrier\t\tgl3wMemoryBarrier\n 1167  #define glTexStorage1D\t\tgl3wTexStorage1D\n 1168  #define glTexStorage2D\t\tgl3wTexStorage2D\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/libs/gl3w/GL/glcorearb.h:\n 1177  /* reuse GL_UNSIGNED_INT_ATOMIC_COUNTER */\n 1178  /* Reuse tokens from ARB_shader_image_load_store */\n 1179: /* reuse GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT */\n 1180: /* reuse GL_ELEMENT_ARRAY_BARRIER_BIT */\n 1181: /* reuse GL_UNIFORM_BARRIER_BIT */\n 1182: /* reuse GL_TEXTURE_FETCH_BARRIER_BIT */\n 1183: /* reuse GL_SHADER_IMAGE_ACCESS_BARRIER_BIT */\n 1184: /* reuse GL_COMMAND_BARRIER_BIT */\n 1185: /* reuse GL_PIXEL_BUFFER_BARRIER_BIT */\n 1186: /* reuse GL_TEXTURE_UPDATE_BARRIER_BIT */\n 1187: /* reuse GL_BUFFER_UPDATE_BARRIER_BIT */\n 1188: /* reuse GL_FRAMEBUFFER_BARRIER_BIT */\n 1189: /* reuse GL_TRANSFORM_FEEDBACK_BARRIER_BIT */\n 1190: /* reuse GL_ATOMIC_COUNTER_BARRIER_BIT */\n 1191: /* reuse GL_ALL_BARRIER_BITS */\n 1192  /* reuse GL_MAX_IMAGE_UNITS */\n 1193  /* reuse GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS */\n ....\n 1504  /* reuse GL_MAX_SHADER_STORAGE_BLOCK_SIZE */\n 1505  /* reuse GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT */\n 1506: /* reuse GL_SHADER_STORAGE_BARRIER_BIT */\n 1507  /* reuse GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES */\n 1508  /* Reuse tokens from ARB_stencil_texturing */\n ....\n 2148  \n 2149  #ifndef GL_ARB_shader_image_load_store\n 2150: #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001\n 2151: #define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002\n 2152: #define GL_UNIFORM_BARRIER_BIT            0x00000004\n 2153: #define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008\n 2154: #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020\n 2155: #define GL_COMMAND_BARRIER_BIT            0x00000040\n 2156: #define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080\n 2157: #define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100\n 2158: #define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200\n 2159: #define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400\n 2160: #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800\n 2161: #define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000\n 2162: #define GL_ALL_BARRIER_BITS               0xFFFFFFFF\n 2163  #define GL_MAX_IMAGE_UNITS                0x8F38\n 2164  #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39\n ....\n 2580  #define GL_MAX_SHADER_STORAGE_BLOCK_SIZE  0x90DE\n 2581  #define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF\n 2582: #define GL_SHADER_STORAGE_BARRIER_BIT     0x2000\n 2583  #define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS\n 2584  /* reuse GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS */\n ....\n 4262  #ifdef GLCOREARB_PROTOTYPES\n 4263  GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 4264: GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);\n 4265  #endif /* GLCOREARB_PROTOTYPES */\n 4266  typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 4267: typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);\n 4268  #endif\n 4269  \n\n/home/max/dev/Falcor/third_party/slang/external/imgui/imgui_draw.cpp:\n 2872  }\n 2873  \n 2874: static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;\n 2875: static const unsigned char *stb__barrier_in_b;\n 2876  static unsigned char *stb__dout;\n 2877  static void stb__match(const unsigned char *data, unsigned int length)\n 2878  {\n 2879      // INVERSE of memmove... write each byte before copying the next...\n 2880:     IM_ASSERT(stb__dout + length <= stb__barrier_out_e);\n 2881:     if (stb__dout + length > stb__barrier_out_e) { stb__dout += length; return; }\n 2882:     if (data < stb__barrier_out_b) { stb__dout = stb__barrier_out_e+1; return; }\n 2883      while (length--) *stb__dout++ = *data++;\n 2884  }\n ....\n 2886  static void stb__lit(const unsigned char *data, unsigned int length)\n 2887  {\n 2888:     IM_ASSERT(stb__dout + length <= stb__barrier_out_e);\n 2889:     if (stb__dout + length > stb__barrier_out_e) { stb__dout += length; return; }\n 2890:     if (data < stb__barrier_in_b) { stb__dout = stb__barrier_out_e+1; return; }\n 2891      memcpy(stb__dout, data, length);\n 2892      stb__dout += length;\n ....\n 2951      if (stb__in4(4) != 0)          return 0; // error! stream is > 4GB\n 2952      olen = stb_decompress_length(i);\n 2953:     stb__barrier_in_b = i;\n 2954:     stb__barrier_out_e = output + olen;\n 2955:     stb__barrier_out_b = output;\n 2956      i += 16;\n 2957  \n\n/home/max/dev/Falcor/third_party/slang/external/slang-binaries/premake/premake-5.0.0-alpha13/bin/osx/premake5:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.core.grammar.json:\n 2015      },\n 2016      {\n 2017:       \"opname\" : \"OpControlBarrier\",\n 2018        \"opcode\" : 224,\n 2019        \"operands\" : [\n ....\n 2024      },\n 2025      {\n 2026:       \"opname\" : \"OpMemoryBarrier\",\n 2027        \"opcode\" : 225,\n 2028        \"operands\" : [\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.cs:\n  872              OpEmitStreamVertex = 220,\n  873              OpEndStreamPrimitive = 221,\n  874:             OpControlBarrier = 224,\n  875:             OpMemoryBarrier = 225,\n  876              OpAtomicLoad = 227,\n  877              OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.h:\n  871      SpvOpEmitStreamVertex = 220,\n  872      SpvOpEndStreamPrimitive = 221,\n  873:     SpvOpControlBarrier = 224,\n  874:     SpvOpMemoryBarrier = 225,\n  875      SpvOpAtomicLoad = 227,\n  876      SpvOpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.hpp:\n  867      OpEmitStreamVertex = 220,\n  868      OpEndStreamPrimitive = 221,\n  869:     OpControlBarrier = 224,\n  870:     OpMemoryBarrier = 225,\n  871      OpAtomicLoad = 227,\n  872      OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.hpp11:\n  867      OpEmitStreamVertex = 220,\n  868      OpEndStreamPrimitive = 221,\n  869:     OpControlBarrier = 224,\n  870:     OpMemoryBarrier = 225,\n  871      OpAtomicLoad = 227,\n  872      OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.json:\n  897                      \"OpEmitStreamVertex\": 220,\n  898                      \"OpEndStreamPrimitive\": 221,\n  899:                     \"OpControlBarrier\": 224,\n  900:                     \"OpMemoryBarrier\": 225,\n  901                      \"OpAtomicLoad\": 227,\n  902                      \"OpAtomicStore\": 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.lua:\n  828          OpEmitStreamVertex = 220,\n  829          OpEndStreamPrimitive = 221,\n  830:         OpControlBarrier = 224,\n  831:         OpMemoryBarrier = 225,\n  832          OpAtomicLoad = 227,\n  833          OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.py:\n  828          'OpEmitStreamVertex' : 220,\n  829          'OpEndStreamPrimitive' : 221,\n  830:         'OpControlBarrier' : 224,\n  831:         'OpMemoryBarrier' : 225,\n  832          'OpAtomicLoad' : 227,\n  833          'OpAtomicStore' : 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.core.grammar.json:\n 2015      },\n 2016      {\n 2017:       \"opname\" : \"OpControlBarrier\",\n 2018        \"opcode\" : 224,\n 2019        \"operands\" : [\n ....\n 2024      },\n 2025      {\n 2026:       \"opname\" : \"OpMemoryBarrier\",\n 2027        \"opcode\" : 225,\n 2028        \"operands\" : [\n ....\n 3081      },\n 3082      {\n 3083:       \"opname\" : \"OpTypeNamedBarrier\",\n 3084        \"opcode\" : 327,\n 3085        \"operands\" : [\n 3086          { \"kind\" : \"IdResult\" }\n 3087        ],\n 3088:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3089      },\n 3090      {\n 3091:       \"opname\" : \"OpNamedBarrierInitialize\",\n 3092        \"opcode\" : 328,\n 3093        \"operands\" : [\n ....\n 3096          { \"kind\" : \"IdRef\",        \"name\" : \"'Subgroup Count'\" }\n 3097        ],\n 3098:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3099      },\n 3100      {\n 3101:       \"opname\" : \"OpMemoryNamedBarrier\",\n 3102        \"opcode\" : 329,\n 3103        \"operands\" : [\n 3104:         { \"kind\" : \"IdRef\",             \"name\" : \"'Named Barrier'\" },\n 3105          { \"kind\" : \"IdScope\",           \"name\" : \"'Memory'\" },\n 3106          { \"kind\" : \"IdMemorySemantics\", \"name\" : \"'Semantics'\" }\n 3107        ],\n 3108:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3109      },\n 3110      {\n ....\n 5692          },\n 5693          {\n 5694:           \"enumerant\" : \"NamedBarrier\",\n 5695            \"value\" : 59,\n 5696            \"capabilities\" : [ \"Kernel\" ]\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.cs:\n  644              MultiViewport = 57,\n  645              SubgroupDispatch = 58,\n  646:             NamedBarrier = 59,\n  647              PipeStorage = 60,\n  648              SubgroupBallotKHR = 4423,\n  ...\n  884              OpEmitStreamVertex = 220,\n  885              OpEndStreamPrimitive = 221,\n  886:             OpControlBarrier = 224,\n  887:             OpMemoryBarrier = 225,\n  888              OpAtomicLoad = 227,\n  889              OpAtomicStore = 228,\n  ...\n  979              OpGetKernelLocalSizeForSubgroupCount = 325,\n  980              OpGetKernelMaxNumSubgroups = 326,\n  981:             OpTypeNamedBarrier = 327,\n  982:             OpNamedBarrierInitialize = 328,\n  983:             OpMemoryNamedBarrier = 329,\n  984              OpModuleProcessed = 330,\n  985              OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.h:\n  643      SpvCapabilityMultiViewport = 57,\n  644      SpvCapabilitySubgroupDispatch = 58,\n  645:     SpvCapabilityNamedBarrier = 59,\n  646      SpvCapabilityPipeStorage = 60,\n  647      SpvCapabilitySubgroupBallotKHR = 4423,\n  ...\n  883      SpvOpEmitStreamVertex = 220,\n  884      SpvOpEndStreamPrimitive = 221,\n  885:     SpvOpControlBarrier = 224,\n  886:     SpvOpMemoryBarrier = 225,\n  887      SpvOpAtomicLoad = 227,\n  888      SpvOpAtomicStore = 228,\n  ...\n  978      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n  979      SpvOpGetKernelMaxNumSubgroups = 326,\n  980:     SpvOpTypeNamedBarrier = 327,\n  981:     SpvOpNamedBarrierInitialize = 328,\n  982:     SpvOpMemoryNamedBarrier = 329,\n  983      SpvOpModuleProcessed = 330,\n  984      SpvOpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.hpp:\n  639      CapabilityMultiViewport = 57,\n  640      CapabilitySubgroupDispatch = 58,\n  641:     CapabilityNamedBarrier = 59,\n  642      CapabilityPipeStorage = 60,\n  643      CapabilitySubgroupBallotKHR = 4423,\n  ...\n  879      OpEmitStreamVertex = 220,\n  880      OpEndStreamPrimitive = 221,\n  881:     OpControlBarrier = 224,\n  882:     OpMemoryBarrier = 225,\n  883      OpAtomicLoad = 227,\n  884      OpAtomicStore = 228,\n  ...\n  974      OpGetKernelLocalSizeForSubgroupCount = 325,\n  975      OpGetKernelMaxNumSubgroups = 326,\n  976:     OpTypeNamedBarrier = 327,\n  977:     OpNamedBarrierInitialize = 328,\n  978:     OpMemoryNamedBarrier = 329,\n  979      OpModuleProcessed = 330,\n  980      OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.hpp11:\n  639      MultiViewport = 57,\n  640      SubgroupDispatch = 58,\n  641:     NamedBarrier = 59,\n  642      PipeStorage = 60,\n  643      SubgroupBallotKHR = 4423,\n  ...\n  879      OpEmitStreamVertex = 220,\n  880      OpEndStreamPrimitive = 221,\n  881:     OpControlBarrier = 224,\n  882:     OpMemoryBarrier = 225,\n  883      OpAtomicLoad = 227,\n  884      OpAtomicStore = 228,\n  ...\n  974      OpGetKernelLocalSizeForSubgroupCount = 325,\n  975      OpGetKernelMaxNumSubgroups = 326,\n  976:     OpTypeNamedBarrier = 327,\n  977:     OpNamedBarrierInitialize = 328,\n  978:     OpMemoryNamedBarrier = 329,\n  979      OpModuleProcessed = 330,\n  980      OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.json:\n  664                      \"MultiViewport\": 57,\n  665                      \"SubgroupDispatch\": 58,\n  666:                     \"NamedBarrier\": 59,\n  667                      \"PipeStorage\": 60,\n  668                      \"SubgroupBallotKHR\": 4423,\n  ...\n  907                      \"OpEmitStreamVertex\": 220,\n  908                      \"OpEndStreamPrimitive\": 221,\n  909:                     \"OpControlBarrier\": 224,\n  910:                     \"OpMemoryBarrier\": 225,\n  911                      \"OpAtomicLoad\": 227,\n  912                      \"OpAtomicStore\": 228,\n  ...\n 1002                      \"OpGetKernelLocalSizeForSubgroupCount\": 325,\n 1003                      \"OpGetKernelMaxNumSubgroups\": 326,\n 1004:                     \"OpTypeNamedBarrier\": 327,\n 1005:                     \"OpNamedBarrierInitialize\": 328,\n 1006:                     \"OpMemoryNamedBarrier\": 329,\n 1007                      \"OpModuleProcessed\": 330,\n 1008                      \"OpDecorateId\": 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.lua:\n  601          MultiViewport = 57,\n  602          SubgroupDispatch = 58,\n  603:         NamedBarrier = 59,\n  604          PipeStorage = 60,\n  605          SubgroupBallotKHR = 4423,\n  ...\n  840          OpEmitStreamVertex = 220,\n  841          OpEndStreamPrimitive = 221,\n  842:         OpControlBarrier = 224,\n  843:         OpMemoryBarrier = 225,\n  844          OpAtomicLoad = 227,\n  845          OpAtomicStore = 228,\n  ...\n  935          OpGetKernelLocalSizeForSubgroupCount = 325,\n  936          OpGetKernelMaxNumSubgroups = 326,\n  937:         OpTypeNamedBarrier = 327,\n  938:         OpNamedBarrierInitialize = 328,\n  939:         OpMemoryNamedBarrier = 329,\n  940          OpModuleProcessed = 330,\n  941          OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.py:\n  601          'MultiViewport' : 57,\n  602          'SubgroupDispatch' : 58,\n  603:         'NamedBarrier' : 59,\n  604          'PipeStorage' : 60,\n  605          'SubgroupBallotKHR' : 4423,\n  ...\n  840          'OpEmitStreamVertex' : 220,\n  841          'OpEndStreamPrimitive' : 221,\n  842:         'OpControlBarrier' : 224,\n  843:         'OpMemoryBarrier' : 225,\n  844          'OpAtomicLoad' : 227,\n  845          'OpAtomicStore' : 228,\n  ...\n  935          'OpGetKernelLocalSizeForSubgroupCount' : 325,\n  936          'OpGetKernelMaxNumSubgroups' : 326,\n  937:         'OpTypeNamedBarrier' : 327,\n  938:         'OpNamedBarrierInitialize' : 328,\n  939:         'OpMemoryNamedBarrier' : 329,\n  940          'OpModuleProcessed' : 330,\n  941          'OpDecorateId' : 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.core.grammar.json:\n 2015      },\n 2016      {\n 2017:       \"opname\" : \"OpControlBarrier\",\n 2018        \"opcode\" : 224,\n 2019        \"operands\" : [\n ....\n 2024      },\n 2025      {\n 2026:       \"opname\" : \"OpMemoryBarrier\",\n 2027        \"opcode\" : 225,\n 2028        \"operands\" : [\n ....\n 3081      },\n 3082      {\n 3083:       \"opname\" : \"OpTypeNamedBarrier\",\n 3084        \"opcode\" : 327,\n 3085        \"operands\" : [\n 3086          { \"kind\" : \"IdResult\" }\n 3087        ],\n 3088:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3089      },\n 3090      {\n 3091:       \"opname\" : \"OpNamedBarrierInitialize\",\n 3092        \"opcode\" : 328,\n 3093        \"operands\" : [\n ....\n 3096          { \"kind\" : \"IdRef\",        \"name\" : \"'Subgroup Count'\" }\n 3097        ],\n 3098:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3099      },\n 3100      {\n 3101:       \"opname\" : \"OpMemoryNamedBarrier\",\n 3102        \"opcode\" : 329,\n 3103        \"operands\" : [\n 3104:         { \"kind\" : \"IdRef\",             \"name\" : \"'Named Barrier'\" },\n 3105          { \"kind\" : \"IdScope\",           \"name\" : \"'Memory'\" },\n 3106          { \"kind\" : \"IdMemorySemantics\", \"name\" : \"'Semantics'\" }\n 3107        ],\n 3108:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3109      },\n 3110      {\n ....\n 5740          },\n 5741          {\n 5742:           \"enumerant\" : \"NamedBarrier\",\n 5743            \"value\" : 59,\n 5744            \"capabilities\" : [ \"Kernel\" ]\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.cs:\n  649              MultiViewport = 57,\n  650              SubgroupDispatch = 58,\n  651:             NamedBarrier = 59,\n  652              PipeStorage = 60,\n  653              SubgroupBallotKHR = 4423,\n  ...\n  889              OpEmitStreamVertex = 220,\n  890              OpEndStreamPrimitive = 221,\n  891:             OpControlBarrier = 224,\n  892:             OpMemoryBarrier = 225,\n  893              OpAtomicLoad = 227,\n  894              OpAtomicStore = 228,\n  ...\n  984              OpGetKernelLocalSizeForSubgroupCount = 325,\n  985              OpGetKernelMaxNumSubgroups = 326,\n  986:             OpTypeNamedBarrier = 327,\n  987:             OpNamedBarrierInitialize = 328,\n  988:             OpMemoryNamedBarrier = 329,\n  989              OpModuleProcessed = 330,\n  990              OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.h:\n  648      SpvCapabilityMultiViewport = 57,\n  649      SpvCapabilitySubgroupDispatch = 58,\n  650:     SpvCapabilityNamedBarrier = 59,\n  651      SpvCapabilityPipeStorage = 60,\n  652      SpvCapabilitySubgroupBallotKHR = 4423,\n  ...\n  888      SpvOpEmitStreamVertex = 220,\n  889      SpvOpEndStreamPrimitive = 221,\n  890:     SpvOpControlBarrier = 224,\n  891:     SpvOpMemoryBarrier = 225,\n  892      SpvOpAtomicLoad = 227,\n  893      SpvOpAtomicStore = 228,\n  ...\n  983      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n  984      SpvOpGetKernelMaxNumSubgroups = 326,\n  985:     SpvOpTypeNamedBarrier = 327,\n  986:     SpvOpNamedBarrierInitialize = 328,\n  987:     SpvOpMemoryNamedBarrier = 329,\n  988      SpvOpModuleProcessed = 330,\n  989      SpvOpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.hpp:\n  644      CapabilityMultiViewport = 57,\n  645      CapabilitySubgroupDispatch = 58,\n  646:     CapabilityNamedBarrier = 59,\n  647      CapabilityPipeStorage = 60,\n  648      CapabilitySubgroupBallotKHR = 4423,\n  ...\n  884      OpEmitStreamVertex = 220,\n  885      OpEndStreamPrimitive = 221,\n  886:     OpControlBarrier = 224,\n  887:     OpMemoryBarrier = 225,\n  888      OpAtomicLoad = 227,\n  889      OpAtomicStore = 228,\n  ...\n  979      OpGetKernelLocalSizeForSubgroupCount = 325,\n  980      OpGetKernelMaxNumSubgroups = 326,\n  981:     OpTypeNamedBarrier = 327,\n  982:     OpNamedBarrierInitialize = 328,\n  983:     OpMemoryNamedBarrier = 329,\n  984      OpModuleProcessed = 330,\n  985      OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.hpp11:\n  644      MultiViewport = 57,\n  645      SubgroupDispatch = 58,\n  646:     NamedBarrier = 59,\n  647      PipeStorage = 60,\n  648      SubgroupBallotKHR = 4423,\n  ...\n  884      OpEmitStreamVertex = 220,\n  885      OpEndStreamPrimitive = 221,\n  886:     OpControlBarrier = 224,\n  887:     OpMemoryBarrier = 225,\n  888      OpAtomicLoad = 227,\n  889      OpAtomicStore = 228,\n  ...\n  979      OpGetKernelLocalSizeForSubgroupCount = 325,\n  980      OpGetKernelMaxNumSubgroups = 326,\n  981:     OpTypeNamedBarrier = 327,\n  982:     OpNamedBarrierInitialize = 328,\n  983:     OpMemoryNamedBarrier = 329,\n  984      OpModuleProcessed = 330,\n  985      OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.json:\n  669                      \"MultiViewport\": 57,\n  670                      \"SubgroupDispatch\": 58,\n  671:                     \"NamedBarrier\": 59,\n  672                      \"PipeStorage\": 60,\n  673                      \"SubgroupBallotKHR\": 4423,\n  ...\n  912                      \"OpEmitStreamVertex\": 220,\n  913                      \"OpEndStreamPrimitive\": 221,\n  914:                     \"OpControlBarrier\": 224,\n  915:                     \"OpMemoryBarrier\": 225,\n  916                      \"OpAtomicLoad\": 227,\n  917                      \"OpAtomicStore\": 228,\n  ...\n 1007                      \"OpGetKernelLocalSizeForSubgroupCount\": 325,\n 1008                      \"OpGetKernelMaxNumSubgroups\": 326,\n 1009:                     \"OpTypeNamedBarrier\": 327,\n 1010:                     \"OpNamedBarrierInitialize\": 328,\n 1011:                     \"OpMemoryNamedBarrier\": 329,\n 1012                      \"OpModuleProcessed\": 330,\n 1013                      \"OpExecutionModeId\": 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.lua:\n  606          MultiViewport = 57,\n  607          SubgroupDispatch = 58,\n  608:         NamedBarrier = 59,\n  609          PipeStorage = 60,\n  610          SubgroupBallotKHR = 4423,\n  ...\n  845          OpEmitStreamVertex = 220,\n  846          OpEndStreamPrimitive = 221,\n  847:         OpControlBarrier = 224,\n  848:         OpMemoryBarrier = 225,\n  849          OpAtomicLoad = 227,\n  850          OpAtomicStore = 228,\n  ...\n  940          OpGetKernelLocalSizeForSubgroupCount = 325,\n  941          OpGetKernelMaxNumSubgroups = 326,\n  942:         OpTypeNamedBarrier = 327,\n  943:         OpNamedBarrierInitialize = 328,\n  944:         OpMemoryNamedBarrier = 329,\n  945          OpModuleProcessed = 330,\n  946          OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.py:\n  606          'MultiViewport' : 57,\n  607          'SubgroupDispatch' : 58,\n  608:         'NamedBarrier' : 59,\n  609          'PipeStorage' : 60,\n  610          'SubgroupBallotKHR' : 4423,\n  ...\n  845          'OpEmitStreamVertex' : 220,\n  846          'OpEndStreamPrimitive' : 221,\n  847:         'OpControlBarrier' : 224,\n  848:         'OpMemoryBarrier' : 225,\n  849          'OpAtomicLoad' : 227,\n  850          'OpAtomicStore' : 228,\n  ...\n  940          'OpGetKernelLocalSizeForSubgroupCount' : 325,\n  941          'OpGetKernelMaxNumSubgroups' : 326,\n  942:         'OpTypeNamedBarrier' : 327,\n  943:         'OpNamedBarrierInitialize' : 328,\n  944:         'OpMemoryNamedBarrier' : 329,\n  945          'OpModuleProcessed' : 330,\n  946          'OpExecutionModeId' : 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.core.grammar.json:\n  110      },\n  111      {\n  112:       \"tag\"     : \"Barrier\",\n  113:       \"heading\" : \"Barrier Instructions\"\n  114      },\n  115      {\n  ...\n 2337      },\n 2338      {\n 2339:       \"opname\" : \"OpControlBarrier\",\n 2340:       \"class\"  : \"Barrier\",\n 2341        \"opcode\" : 224,\n 2342        \"operands\" : [\n ....\n 2347      },\n 2348      {\n 2349:       \"opname\" : \"OpMemoryBarrier\",\n 2350:       \"class\"  : \"Barrier\",\n 2351        \"opcode\" : 225,\n 2352        \"operands\" : [\n ....\n 3509      },\n 3510      {\n 3511:       \"opname\" : \"OpTypeNamedBarrier\",\n 3512        \"class\"  : \"Type-Declaration\",\n 3513        \"opcode\" : 327,\n ....\n 3515          { \"kind\" : \"IdResult\" }\n 3516        ],\n 3517:       \"capabilities\" : [ \"NamedBarrier\" ],\n 3518        \"version\" : \"1.1\"\n 3519      },\n 3520      {\n 3521:       \"opname\" : \"OpNamedBarrierInitialize\",\n 3522:       \"class\"  : \"Barrier\",\n 3523        \"opcode\" : 328,\n 3524        \"operands\" : [\n ....\n 3527          { \"kind\" : \"IdRef\", \"name\" : \"'Subgroup Count'\" }\n 3528        ],\n 3529:       \"capabilities\" : [ \"NamedBarrier\" ],\n 3530        \"version\" : \"1.1\"\n 3531      },\n 3532      {\n 3533:       \"opname\" : \"OpMemoryNamedBarrier\",\n 3534:       \"class\"  : \"Barrier\",\n 3535        \"opcode\" : 329,\n 3536        \"operands\" : [\n 3537:         { \"kind\" : \"IdRef\", \"name\" : \"'Named Barrier'\" },\n 3538          { \"kind\" : \"IdScope\", \"name\" : \"'Memory'\" },\n 3539          { \"kind\" : \"IdMemorySemantics\", \"name\" : \"'Semantics'\" }\n 3540        ],\n 3541:       \"capabilities\" : [ \"NamedBarrier\" ],\n 3542        \"version\" : \"1.1\"\n 3543      },\n ....\n 10834          },\n 10835          {\n 10836:           \"enumerant\" : \"NamedBarrier\",\n 10837            \"value\" : 59,\n 10838            \"capabilities\" : [ \"Kernel\" ],\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.cs:\n  863              MultiViewport = 57,\n  864              SubgroupDispatch = 58,\n  865:             NamedBarrier = 59,\n  866              PipeStorage = 60,\n  867              GroupNonUniform = 61,\n  ...\n 1236              OpEmitStreamVertex = 220,\n 1237              OpEndStreamPrimitive = 221,\n 1238:             OpControlBarrier = 224,\n 1239:             OpMemoryBarrier = 225,\n 1240              OpAtomicLoad = 227,\n 1241              OpAtomicStore = 228,\n ....\n 1331              OpGetKernelLocalSizeForSubgroupCount = 325,\n 1332              OpGetKernelMaxNumSubgroups = 326,\n 1333:             OpTypeNamedBarrier = 327,\n 1334:             OpNamedBarrierInitialize = 328,\n 1335:             OpMemoryNamedBarrier = 329,\n 1336              OpModuleProcessed = 330,\n 1337              OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.h:\n  863      SpvCapabilityMultiViewport = 57,\n  864      SpvCapabilitySubgroupDispatch = 58,\n  865:     SpvCapabilityNamedBarrier = 59,\n  866      SpvCapabilityPipeStorage = 60,\n  867      SpvCapabilityGroupNonUniform = 61,\n  ...\n 1235      SpvOpEmitStreamVertex = 220,\n 1236      SpvOpEndStreamPrimitive = 221,\n 1237:     SpvOpControlBarrier = 224,\n 1238:     SpvOpMemoryBarrier = 225,\n 1239      SpvOpAtomicLoad = 227,\n 1240      SpvOpAtomicStore = 228,\n ....\n 1330      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n 1331      SpvOpGetKernelMaxNumSubgroups = 326,\n 1332:     SpvOpTypeNamedBarrier = 327,\n 1333:     SpvOpNamedBarrierInitialize = 328,\n 1334:     SpvOpMemoryNamedBarrier = 329,\n 1335      SpvOpModuleProcessed = 330,\n 1336      SpvOpExecutionModeId = 331,\n ....\n 1806      case SpvOpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1807      case SpvOpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1808:     case SpvOpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1809:     case SpvOpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1810      case SpvOpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1811      case SpvOpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1901      case SpvOpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1902      case SpvOpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1903:     case SpvOpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1904:     case SpvOpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1905:     case SpvOpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1906      case SpvOpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1907      case SpvOpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.hpp:\n  859      CapabilityMultiViewport = 57,\n  860      CapabilitySubgroupDispatch = 58,\n  861:     CapabilityNamedBarrier = 59,\n  862      CapabilityPipeStorage = 60,\n  863      CapabilityGroupNonUniform = 61,\n  ...\n 1231      OpEmitStreamVertex = 220,\n 1232      OpEndStreamPrimitive = 221,\n 1233:     OpControlBarrier = 224,\n 1234:     OpMemoryBarrier = 225,\n 1235      OpAtomicLoad = 227,\n 1236      OpAtomicStore = 228,\n ....\n 1326      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1327      OpGetKernelMaxNumSubgroups = 326,\n 1328:     OpTypeNamedBarrier = 327,\n 1329:     OpNamedBarrierInitialize = 328,\n 1330:     OpMemoryNamedBarrier = 329,\n 1331      OpModuleProcessed = 330,\n 1332      OpExecutionModeId = 331,\n ....\n 1802      case OpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1803      case OpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1804:     case OpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1805:     case OpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1806      case OpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1807      case OpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1897      case OpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1898      case OpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1899:     case OpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1900:     case OpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1901:     case OpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1902      case OpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1903      case OpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.hpp11:\n  859      MultiViewport = 57,\n  860      SubgroupDispatch = 58,\n  861:     NamedBarrier = 59,\n  862      PipeStorage = 60,\n  863      GroupNonUniform = 61,\n  ...\n 1231      OpEmitStreamVertex = 220,\n 1232      OpEndStreamPrimitive = 221,\n 1233:     OpControlBarrier = 224,\n 1234:     OpMemoryBarrier = 225,\n 1235      OpAtomicLoad = 227,\n 1236      OpAtomicStore = 228,\n ....\n 1326      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1327      OpGetKernelMaxNumSubgroups = 326,\n 1328:     OpTypeNamedBarrier = 327,\n 1329:     OpNamedBarrierInitialize = 328,\n 1330:     OpMemoryNamedBarrier = 329,\n 1331      OpModuleProcessed = 330,\n 1332      OpExecutionModeId = 331,\n ....\n 1802      case Op::OpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1803      case Op::OpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1804:     case Op::OpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1805:     case Op::OpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1806      case Op::OpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1807      case Op::OpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1897      case Op::OpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1898      case Op::OpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1899:     case Op::OpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1900:     case Op::OpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1901:     case Op::OpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1902      case Op::OpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1903      case Op::OpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.json:\n  849                      \"MultiViewport\": 57,\n  850                      \"SubgroupDispatch\": 58,\n  851:                     \"NamedBarrier\": 59,\n  852                      \"PipeStorage\": 60,\n  853                      \"GroupNonUniform\": 61,\n  ...\n 1222                      \"OpEmitStreamVertex\": 220,\n 1223                      \"OpEndStreamPrimitive\": 221,\n 1224:                     \"OpControlBarrier\": 224,\n 1225:                     \"OpMemoryBarrier\": 225,\n 1226                      \"OpAtomicLoad\": 227,\n 1227                      \"OpAtomicStore\": 228,\n ....\n 1317                      \"OpGetKernelLocalSizeForSubgroupCount\": 325,\n 1318                      \"OpGetKernelMaxNumSubgroups\": 326,\n 1319:                     \"OpTypeNamedBarrier\": 327,\n 1320:                     \"OpNamedBarrierInitialize\": 328,\n 1321:                     \"OpMemoryNamedBarrier\": 329,\n 1322                      \"OpModuleProcessed\": 330,\n 1323                      \"OpExecutionModeId\": 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.lua:\n  821          MultiViewport = 57,\n  822          SubgroupDispatch = 58,\n  823:         NamedBarrier = 59,\n  824          PipeStorage = 60,\n  825          GroupNonUniform = 61,\n  ...\n 1188          OpEmitStreamVertex = 220,\n 1189          OpEndStreamPrimitive = 221,\n 1190:         OpControlBarrier = 224,\n 1191:         OpMemoryBarrier = 225,\n 1192          OpAtomicLoad = 227,\n 1193          OpAtomicStore = 228,\n ....\n 1283          OpGetKernelLocalSizeForSubgroupCount = 325,\n 1284          OpGetKernelMaxNumSubgroups = 326,\n 1285:         OpTypeNamedBarrier = 327,\n 1286:         OpNamedBarrierInitialize = 328,\n 1287:         OpMemoryNamedBarrier = 329,\n 1288          OpModuleProcessed = 330,\n 1289          OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.py:\n  821          'MultiViewport' : 57,\n  822          'SubgroupDispatch' : 58,\n  823:         'NamedBarrier' : 59,\n  824          'PipeStorage' : 60,\n  825          'GroupNonUniform' : 61,\n  ...\n 1188          'OpEmitStreamVertex' : 220,\n 1189          'OpEndStreamPrimitive' : 221,\n 1190:         'OpControlBarrier' : 224,\n 1191:         'OpMemoryBarrier' : 225,\n 1192          'OpAtomicLoad' : 227,\n 1193          'OpAtomicStore' : 228,\n ....\n 1283          'OpGetKernelLocalSizeForSubgroupCount' : 325,\n 1284          'OpGetKernelMaxNumSubgroups' : 326,\n 1285:         'OpTypeNamedBarrier' : 327,\n 1286:         'OpNamedBarrierInitialize' : 328,\n 1287:         'OpMemoryNamedBarrier' : 329,\n 1288          'OpModuleProcessed' : 330,\n 1289          'OpExecutionModeId' : 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spv.d:\n  866      MultiViewport = 57,\n  867      SubgroupDispatch = 58,\n  868:     NamedBarrier = 59,\n  869      PipeStorage = 60,\n  870      GroupNonUniform = 61,\n  ...\n 1239      OpEmitStreamVertex = 220,\n 1240      OpEndStreamPrimitive = 221,\n 1241:     OpControlBarrier = 224,\n 1242:     OpMemoryBarrier = 225,\n 1243      OpAtomicLoad = 227,\n 1244      OpAtomicStore = 228,\n ....\n 1334      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1335      OpGetKernelMaxNumSubgroups = 326,\n 1336:     OpTypeNamedBarrier = 327,\n 1337:     OpNamedBarrierInitialize = 328,\n 1338:     OpMemoryNamedBarrier = 329,\n 1339      OpModuleProcessed = 330,\n 1340      OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools-generated/core.insts-unified1.inc:\n   32  static const SpvCapability pygen_variable_caps_Matrix[] = {SpvCapabilityMatrix};\n   33  static const SpvCapability pygen_variable_caps_MeshShadingNV[] = {SpvCapabilityMeshShadingNV};\n   34: static const SpvCapability pygen_variable_caps_NamedBarrier[] = {SpvCapabilityNamedBarrier};\n   35  static const SpvCapability pygen_variable_caps_PipeStorage[] = {SpvCapabilityPipeStorage};\n   36  static const SpvCapability pygen_variable_caps_Pipes[] = {SpvCapabilityPipes};\n   ..\n  282    {\"EmitStreamVertex\", SpvOpEmitStreamVertex, 1, pygen_variable_caps_GeometryStreams, 1, {SPV_OPERAND_TYPE_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  283    {\"EndStreamPrimitive\", SpvOpEndStreamPrimitive, 1, pygen_variable_caps_GeometryStreams, 1, {SPV_OPERAND_TYPE_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  284:   {\"ControlBarrier\", SpvOpControlBarrier, 0, nullptr, 3, {SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  285:   {\"MemoryBarrier\", SpvOpMemoryBarrier, 0, nullptr, 2, {SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  286    {\"AtomicLoad\", SpvOpAtomicLoad, 0, nullptr, 5, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  287    {\"AtomicStore\", SpvOpAtomicStore, 0, nullptr, 4, {SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID, SPV_OPERAND_TYPE_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  ...\n  377    {\"GetKernelLocalSizeForSubgroupCount\", SpvOpGetKernelLocalSizeForSubgroupCount, 1, pygen_variable_caps_SubgroupDispatch, 7, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  378    {\"GetKernelMaxNumSubgroups\", SpvOpGetKernelMaxNumSubgroups, 1, pygen_variable_caps_SubgroupDispatch, 6, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  379:   {\"TypeNamedBarrier\", SpvOpTypeNamedBarrier, 1, pygen_variable_caps_NamedBarrier, 1, {SPV_OPERAND_TYPE_RESULT_ID}, 1, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  380:   {\"NamedBarrierInitialize\", SpvOpNamedBarrierInitialize, 1, pygen_variable_caps_NamedBarrier, 3, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  381:   {\"MemoryNamedBarrier\", SpvOpMemoryNamedBarrier, 1, pygen_variable_caps_NamedBarrier, 3, {SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  382    {\"ModuleProcessed\", SpvOpModuleProcessed, 0, nullptr, 1, {SPV_OPERAND_TYPE_LITERAL_STRING}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  383    {\"ExecutionModeId\", SpvOpExecutionModeId, 0, nullptr, 2, {SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_EXECUTION_MODE}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,2), 0xffffffffu},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools-generated/enum_string_mapping.inc:\n  275      case SpvCapabilitySubgroupDispatch:\n  276        return \"SubgroupDispatch\";\n  277:     case SpvCapabilityNamedBarrier:\n  278:       return \"NamedBarrier\";\n  279      case SpvCapabilityPipeStorage:\n  280        return \"PipeStorage\";\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools-generated/operand.kinds-unified1.inc:\n  851    {\"MultiViewport\", 57, 1, pygen_variable_caps_Geometry, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  852    {\"SubgroupDispatch\", 58, 1, pygen_variable_caps_DeviceEnqueue, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  853:   {\"NamedBarrier\", 59, 1, pygen_variable_caps_Kernel, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  854    {\"PipeStorage\", 60, 1, pygen_variable_caps_Pipes, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  855    {\"GroupNonUniform\", 61, 0, nullptr, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,3), 0xffffffffu},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/Android.mk:\n   42  \t\tsource/val/validate_arithmetics.cpp \\\n   43  \t\tsource/val/validate_atomics.cpp \\\n   44: \t\tsource/val/validate_barriers.cpp \\\n   45  \t\tsource/val/validate_bitwise.cpp \\\n   46  \t\tsource/val/validate_builtins.cpp \\\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/BUILD.gn:\n  445      \"source/val/validate_arithmetics.cpp\",\n  446      \"source/val/validate_atomics.cpp\",\n  447:     \"source/val/validate_barriers.cpp\",\n  448      \"source/val/validate_bitwise.cpp\",\n  449      \"source/val/validate_builtins.cpp\",\n  ...\n  876        \"test/text_start_new_inst_test.cpp\",\n  877        \"test/text_to_binary.annotation_test.cpp\",\n  878:       \"test/text_to_binary.barrier_test.cpp\",\n  879        \"test/text_to_binary.constant_test.cpp\",\n  880        \"test/text_to_binary.control_flow_test.cpp\",\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/CHANGES:\n  264     - For Vulkan, disallow structures containing opaque types (#2546)\n  265     - Validate storage class OpenCL environment rules for atomics (#2750)\n  266:    - Update OpControlBarriers rules for WebGPU (#2769)\n  267:    - Update OpMemoryBarriers rules for WebGPU (#2775)\n  268     - Update WebGPU validation rules of OpAtomic*s (#2777)\n  269     Fixes:\n  ...\n  643     - Check Vulkan built-in variables\n  644     - Check Vulkan-specific atomic result type rule.\n  645:    - Relax control barrier check for SPIR-V 1.3.  Fixes #1427\n  646     - Check OpPhi.\n  647     - Check OpMemoryModel.\n  ...\n  659       #1469: Vulkan: Permit Subgroup memory scope for Vulkan 1.1.\n  660       #1472: Per-vertex variable validation fixes.\n  661:      #1483: Valdiate barrier execution scopes for Vulkan 1.1.\n  662   - Fixes:\n  663     #898: Linker properly removes FuncParamAttr from imported symbols.\n  ...\n  706     - CCP can now fold floating point arithmetic. #1311\n  707   - Validator:\n  708:    - Validate barrier instructions.\n  709     - Check Vulkan-specific rules for atomics.\n  710     - Check Vulkan prohibition of Location or Component decorations on BuiltIn variables.\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/include/spirv-tools/optimizer.hpp:\n  803  // Create a pass to upgrade to the VulkanKHR memory model.\n  804  // This pass upgrades the Logical GLSL450 memory model to Logical VulkanKHR.\n  805: // Additionally, it modifies memory, image, atomic and barrier operations to\n  806  // conform to that model's requirements.\n  807  Optimizer::PassToken CreateUpgradeMemoryModelPass();\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/CMakeLists.txt:\n  286    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_arithmetics.cpp\n  287    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_atomics.cpp\n  288:   ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_barriers.cpp\n  289    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_bitwise.cpp\n  290    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_builtins.cpp\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/fuzzer_pass_replace_loads_stores_with_copy_memories.cpp:\n   39    // OpStore within the same block. Potential instructions OpLoad to be matched\n   40    // are stored in a hash map. If we encounter instructions that write to memory\n   41:   // or instructions of memory barriers that could operate on variables within\n   42    // unsafe storage classes we need to erase the hash map to avoid unsafe\n   43    // operations.\n   ..\n   69            current_op_loads.clear();\n   70          } else if (TransformationReplaceLoadStoreWithCopyMemory::\n   71:                        IsMemoryBarrierOpCode(instruction.opcode())) {\n   72            for (auto it = current_op_loads.begin();\n   73                 it != current_op_loads.end();) {\n   ..\n   80                      GetIRContext(), source_id->type_id());\n   81              if (!TransformationReplaceLoadStoreWithCopyMemory::\n   82:                     IsStorageClassSafeAcrossMemoryBarriers(storage_class)) {\n   83                it = current_op_loads.erase(it);\n   84              } else {\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/protobufs/spirvfuzz_protobufs.h:\n   16  #define SOURCE_FUZZ_SPIRVFUZZ_PROTOBUFS_H_\n   17  \n   18: // This header file serves to act as a barrier between the protobuf header\n   19  // files and files that include them.  It uses compiler pragmas to disable\n   20  // diagnostics, in order to ignore warnings generated during the processing\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/transformation_replace_load_store_with_copy_memory.cpp:\n   96      if (IsMemoryWritingOpCode(it->opcode())) {\n   97        return false;\n   98:     } else if (IsMemoryBarrierOpCode(it->opcode()) &&\n   99:                !IsStorageClassSafeAcrossMemoryBarriers(storage_class)) {\n  100        return false;\n  101      }\n  ...\n  157  }\n  158  \n  159: bool TransformationReplaceLoadStoreWithCopyMemory::IsMemoryBarrierOpCode(\n  160      SpvOp op_code) {\n  161    switch (op_code) {\n  162:     case SpvOpMemoryBarrier:\n  163:     case SpvOpMemoryNamedBarrier:\n  164        return true;\n  165      default:\n  ...\n  169  \n  170  bool TransformationReplaceLoadStoreWithCopyMemory::\n  171:     IsStorageClassSafeAcrossMemoryBarriers(SpvStorageClass storage_class) {\n  172    switch (storage_class) {\n  173      case SpvStorageClassUniformConstant:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/transformation_replace_load_store_with_copy_memory.h:\n   39    // - The OpStore must write the intermediate value loaded by the OpLoad.\n   40    // - The OpLoad and the OpStore must not have certain instruction in between\n   41:   //   (checked by IsMemoryWritingOpCode(), IsMemoryBarrierOpCode(),\n   42:   //   IsStorageClassSafeAcrossMemoryBarriers()).\n   43    bool IsApplicable(\n   44        opt::IRContext* ir_context,\n   ..\n   55    static bool IsMemoryWritingOpCode(SpvOp op_code);\n   56  \n   57:   // Checks if the instruction that has an |op_code| is a memory barrier that\n   58    // could interfere with the source operand of the OpLoad instruction\n   59:   static bool IsMemoryBarrierOpCode(SpvOp op_code);\n   60  \n   61    // Checks if the |storage_class| of the source operand of the OpLoad\n   62    // instruction implies that this variable cannot change (due to other threads)\n   63:   // across memory barriers.\n   64:   static bool IsStorageClassSafeAcrossMemoryBarriers(\n   65        SpvStorageClass storage_class);\n   66  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/name_mapper.cpp:\n  282        SaveName(result_id, \"PipeStorage\");\n  283        break;\n  284:     case SpvOpTypeNamedBarrier:\n  285:       SaveName(result_id, \"NamedBarrier\");\n  286        break;\n  287      case SpvOpTypeStruct:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opcode.cpp:\n  333      case SpvOpTypePipe:\n  334      case SpvOpTypePipeStorage:\n  335:     case SpvOpTypeNamedBarrier:\n  336      case SpvOpTypeAccelerationStructureNV:\n  337      case SpvOpTypeCooperativeMatrixNV:\n  ...\n  467      case SpvOpTypeForwardPointer:\n  468      case SpvOpTypePipeStorage:\n  469:     case SpvOpTypeNamedBarrier:\n  470        return true;\n  471      default:\n  ...\n  690  std::vector<uint32_t> spvOpcodeMemorySemanticsOperandIndices(SpvOp opcode) {\n  691    switch (opcode) {\n  692:     case SpvOpMemoryBarrier:\n  693        return {1};\n  694      case SpvOpAtomicStore:\n  695:     case SpvOpControlBarrier:\n  696      case SpvOpAtomicFlagClear:\n  697:     case SpvOpMemoryNamedBarrier:\n  698        return {2};\n  699      case SpvOpAtomicLoad:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/code_sink.cpp:\n  201    get_module()->ForEachInst([this, &has_sync](Instruction* inst) {\n  202      switch (inst->opcode()) {\n  203:       case SpvOpMemoryBarrier: {\n  204          uint32_t mem_semantics_id = inst->GetSingleWordInOperand(1);\n  205          if (IsSyncOnUniform(mem_semantics_id)) {\n  ...\n  208          break;\n  209        }\n  210:       case SpvOpControlBarrier:\n  211        case SpvOpAtomicLoad:\n  212        case SpvOpAtomicStore:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_fission.cpp:\n  299      }\n  300  \n  301:     // If we find any instruction which we can't move (such as a barrier),\n  302      // return false.\n  303      if (!MovableInstruction(*inst)) return false;\n  ...\n  311    // original and vice versa.\n  312    for (Instruction* inst : original_loop_instructions_) {\n  313:     // If we find any instruction which we can't move (such as a barrier),\n  314      // return false.\n  315      if (!MovableInstruction(*inst)) return false;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_fusion.cpp:\n  231  }  // namespace opt\n  232  \n  233: bool LoopFusion::ContainsBarriersOrFunctionCalls(Loop* loop) {\n  234    for (const auto& block : loop->GetBlocks()) {\n  235      for (const auto& inst : *containing_function_->FindBlock(block)) {\n  236        auto opcode = inst.opcode();\n  237:       if (opcode == SpvOpFunctionCall || opcode == SpvOpControlBarrier ||\n  238:           opcode == SpvOpMemoryBarrier || opcode == SpvOpTypeNamedBarrier ||\n  239:           opcode == SpvOpNamedBarrierInitialize ||\n  240:           opcode == SpvOpMemoryNamedBarrier) {\n  241          return true;\n  242        }\n  ...\n  392  \n  393    // Bail out if there are function calls as they could have side-effects that\n  394:   // cause dependencies or if there are any barriers.\n  395:   if (ContainsBarriersOrFunctionCalls(loop_0_) ||\n  396:       ContainsBarriersOrFunctionCalls(loop_1_)) {\n  397      return false;\n  398    }\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_fusion.h:\n   82    bool IsUsedInLoop(Instruction* instruction, Loop* loop);\n   83  \n   84:   // Returns |true| if |loop| has at least one barrier or function call.\n   85:   bool ContainsBarriersOrFunctionCalls(Loop* loop);\n   86  \n   87    // Get all instructions in the |loop| (except in the latch block) that have\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_unswitch_pass.cpp:\n   61    // Returns true if the loop can be unswitched.\n   62    // Can be unswitch if:\n   63:   //  - The loop has no instructions that prevents it (such as barrier);\n   64    //  - The loop has one conditional branch or switch that do not depends on the\n   65    //  loop;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/reflect.h:\n   45  inline bool IsTypeInst(SpvOp opcode) {\n   46    return (opcode >= SpvOpTypeVoid && opcode <= SpvOpTypeForwardPointer) ||\n   47:          opcode == SpvOpTypePipeStorage || opcode == SpvOpTypeNamedBarrier ||\n   48           opcode == SpvOpTypeAccelerationStructureNV ||\n   49           opcode == SpvOpTypeAccelerationStructureKHR ||\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/replace_invalid_opc.cpp:\n   88          if (model != SpvExecutionModelTessellationControl &&\n   89              model != SpvExecutionModelGLCompute) {\n   90:           if (inst->opcode() == SpvOpControlBarrier) {\n   91              assert(model != SpvExecutionModelKernel &&\n   92                     \"Expecting to be working on a shader module.\");\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/type_manager.cpp:\n  233      DefineParameterlessCase(Queue);\n  234      DefineParameterlessCase(PipeStorage);\n  235:     DefineParameterlessCase(NamedBarrier);\n  236      DefineParameterlessCase(AccelerationStructureNV);\n  237  #undef DefineParameterlessCase\n  ...\n  528      DefineNoSubtypeCase(Pipe);\n  529      DefineNoSubtypeCase(PipeStorage);\n  530:     DefineNoSubtypeCase(NamedBarrier);\n  531      DefineNoSubtypeCase(AccelerationStructureNV);\n  532  #undef DefineNoSubtypeCase\n  ...\n  851        type = new PipeStorage();\n  852        break;\n  853:     case SpvOpTypeNamedBarrier:\n  854:       type = new NamedBarrier();\n  855        break;\n  856      case SpvOpTypeAccelerationStructureNV:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/types.cpp:\n  126      DeclareKindCase(ForwardPointer);\n  127      DeclareKindCase(PipeStorage);\n  128:     DeclareKindCase(NamedBarrier);\n  129      DeclareKindCase(AccelerationStructureNV);\n  130      DeclareKindCase(CooperativeMatrixNV);\n  ...\n  172      DeclareKindCase(ForwardPointer);\n  173      DeclareKindCase(PipeStorage);\n  174:     DeclareKindCase(NamedBarrier);\n  175      DeclareKindCase(AccelerationStructureNV);\n  176      DeclareKindCase(CooperativeMatrixNV);\n  ...\n  223      DeclareKindCase(ForwardPointer);\n  224      DeclareKindCase(PipeStorage);\n  225:     DeclareKindCase(NamedBarrier);\n  226      DeclareKindCase(AccelerationStructureNV);\n  227      DeclareKindCase(CooperativeMatrixNV);\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/types.h:\n   57  class ForwardPointer;\n   58  class PipeStorage;\n   59: class NamedBarrier;\n   60  class AccelerationStructureNV;\n   61  class CooperativeMatrixNV;\n   ..\n   94      kForwardPointer,\n   95      kPipeStorage,\n   96:     kNamedBarrier,\n   97      kAccelerationStructureNV,\n   98      kCooperativeMatrixNV,\n   ..\n  199    DeclareCastMethod(ForwardPointer)\n  200    DeclareCastMethod(PipeStorage)\n  201:   DeclareCastMethod(NamedBarrier)\n  202    DeclareCastMethod(AccelerationStructureNV)\n  203    DeclareCastMethod(CooperativeMatrixNV)\n  ...\n  661  DefineParameterlessType(Queue, queue);\n  662  DefineParameterlessType(PipeStorage, pipe_storage);\n  663: DefineParameterlessType(NamedBarrier, named_barrier);\n  664  DefineParameterlessType(AccelerationStructureNV, accelerationStructureNV);\n  665  DefineParameterlessType(RayQueryProvisionalKHR, rayQueryProvisionalKHR);\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/upgrade_memory_model.cpp:\n   42    UpgradeInstructions();\n   43    CleanupDecorations();\n   44:   UpgradeBarriers();\n   45    UpgradeMemoryScope();\n   46  \n   ..\n  610  }\n  611  \n  612: void UpgradeMemoryModel::UpgradeBarriers() {\n  613:   std::vector<Instruction*> barriers;\n  614:   // Collects all the control barriers in |function|. Returns true if the\n  615    // function operates on the Output storage class.\n  616:   ProcessFunction CollectBarriers = [this, &barriers](Function* function) {\n  617      bool operates_on_output = false;\n  618      for (auto& block : *function) {\n  619:       block.ForEachInst([this, &barriers,\n  620                           &operates_on_output](Instruction* inst) {\n  621:         if (inst->opcode() == SpvOpControlBarrier) {\n  622:           barriers.push_back(inst);\n  623          } else if (!operates_on_output) {\n  624            // This instruction operates on output storage class if it is a\n  ...\n  651      if (e.GetSingleWordInOperand(0u) == SpvExecutionModelTessellationControl) {\n  652        roots.push(e.GetSingleWordInOperand(1u));\n  653:       if (context()->ProcessCallTreeFromRoots(CollectBarriers, &roots)) {\n  654:         for (auto barrier : barriers) {\n  655:           // Add OutputMemoryKHR to the semantics of the barriers.\n  656:           uint32_t semantics_id = barrier->GetSingleWordInOperand(2u);\n  657            Instruction* semantics_inst =\n  658                context()->get_def_use_mgr()->GetDef(semantics_id);\n  ...\n  664                    semantics_type, {static_cast<uint32_t>(semantics_value) |\n  665                                     SpvMemorySemanticsOutputMemoryKHRMask});\n  666:           barrier->SetInOperand(2u, {context()\n  667                                           ->get_constant_mgr()\n  668                                           ->GetDefiningInstruction(constant)\n  ...\n  670          }\n  671        }\n  672:       barriers.clear();\n  673      }\n  674  }\n  ...\n  679      // * Group operations can only be subgroup\n  680      // * Non-uniform can only be workgroup or subgroup\n  681:     // * Named barriers are not supported by Vulkan\n  682      // * Workgroup ops (e.g. async_copy) have at most workgroup scope.\n  683      if (spvOpcodeIsAtomicOp(inst->opcode())) {\n  ...\n  685          inst->SetInOperand(1, {GetScopeConstant(SpvScopeQueueFamilyKHR)});\n  686        }\n  687:     } else if (inst->opcode() == SpvOpControlBarrier) {\n  688        if (IsDeviceScope(inst->GetSingleWordInOperand(1))) {\n  689          inst->SetInOperand(1, {GetScopeConstant(SpvScopeQueueFamilyKHR)});\n  690        }\n  691:     } else if (inst->opcode() == SpvOpMemoryBarrier) {\n  692        if (IsDeviceScope(inst->GetSingleWordInOperand(0))) {\n  693          inst->SetInOperand(0, {GetScopeConstant(SpvScopeQueueFamilyKHR)});\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/upgrade_memory_model.h:\n   39  // This pass remove deprecated decorations (Volatile and Coherent) and replaces\n   40  // them with new flags on individual instructions. It adds the Output storage\n   41: // class semantic to control barriers in tessellation control shaders that have\n   42  // an access to Output memory.\n   43  class UpgradeMemoryModel : public Pass {\n   ..\n  119  \n  120    // For all tessellation control entry points, if there is an operation on\n  121:   // Output storage class, then all barriers are modified to include the\n  122    // OutputMemoryKHR semantic.\n  123:   void UpgradeBarriers();\n  124  \n  125    // If the Vulkan memory model is specified, device scope actually means\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate.cpp:\n  411      if (auto error = AtomicsPass(*vstate, &instruction)) return error;\n  412      if (auto error = PrimitivesPass(*vstate, &instruction)) return error;\n  413:     if (auto error = BarriersPass(*vstate, &instruction)) return error;\n  414      // Group\n  415      // Device-Side Enqueue\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate.h:\n  164  spv_result_t AtomicsPass(ValidationState_t& _, const Instruction* inst);\n  165  \n  166: /// Validates correctness of barrier instructions.\n  167: spv_result_t BarriersPass(ValidationState_t& _, const Instruction* inst);\n  168  \n  169  /// Validates correctness of literal numbers.\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_barriers.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Validates correctness of barrier SPIR-V instructions.\n   16  \n   17  #include <string>\n   ..\n   31  namespace val {\n   32  \n   33: // Validates correctness of barrier instructions.\n   34: spv_result_t BarriersPass(ValidationState_t& _, const Instruction* inst) {\n   35    const SpvOp opcode = inst->opcode();\n   36    const uint32_t result_type = inst->type_id();\n   37  \n   38    switch (opcode) {\n   39:     case SpvOpControlBarrier: {\n   40        if (_.version() < SPV_SPIRV_VERSION_WORD(1, 3)) {\n   41          _.function(inst->function()->id())\n   ..\n   49                      if (message) {\n   50                        *message =\n   51:                           \"OpControlBarrier requires one of the following \"\n   52                            \"Execution \"\n   53                            \"Models: TessellationControl, GLCompute or Kernel\";\n   ..\n   76      }\n   77  \n   78:     case SpvOpMemoryBarrier: {\n   79        const uint32_t memory_scope = inst->word(1);\n   80  \n   ..\n   89      }\n   90  \n   91:     case SpvOpNamedBarrierInitialize: {\n   92:       if (_.GetIdOpcode(result_type) != SpvOpTypeNamedBarrier) {\n   93          return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   94                 << spvOpcodeString(opcode)\n   95:                << \": expected Result Type to be OpTypeNamedBarrier\";\n   96        }\n   97  \n   ..\n  106      }\n  107  \n  108:     case SpvOpMemoryNamedBarrier: {\n  109:       const uint32_t named_barrier_type = _.GetOperandTypeId(inst, 0);\n  110:       if (_.GetIdOpcode(named_barrier_type) != SpvOpTypeNamedBarrier) {\n  111          return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  112                 << spvOpcodeString(opcode)\n  113:                << \": expected Named Barrier to be of type OpTypeNamedBarrier\";\n  114        }\n  115  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_memory_semantics.cpp:\n   60      uint32_t valid_bits;\n   61      switch (inst->opcode()) {\n   62:       case SpvOpControlBarrier:\n   63          if (!(value & SpvMemorySemanticsAcquireReleaseMask)) {\n   64            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   65                   << \"For WebGPU, AcquireRelease must be set for Memory \"\n   66:                     \"Semantics of OpControlBarrier.\";\n   67          }\n   68  \n   ..\n   70            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   71                   << \"For WebGPU, WorkgroupMemory must be set for Memory \"\n   72:                     \"Semantics of OpControlBarrier.\";\n   73          }\n   74  \n   ..\n   78            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   79                   << \"For WebGPU only WorkgroupMemory and AcquireRelease may be \"\n   80:                     \"set for Memory Semantics of OpControlBarrier.\";\n   81          }\n   82          break;\n   83:       case SpvOpMemoryBarrier:\n   84          if (!(value & SpvMemorySemanticsImageMemoryMask)) {\n   85            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   86                   << \"For WebGPU, ImageMemory must be set for Memory Semantics \"\n   87:                     \"of OpMemoryBarrier.\";\n   88          }\n   89          valid_bits = SpvMemorySemanticsImageMemoryMask;\n   ..\n   91            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   92                   << \"For WebGPU only ImageMemory may be set for Memory \"\n   93:                     \"Semantics of OpMemoryBarrier.\";\n   94          }\n   95          break;\n   ..\n  220                   SpvMemorySemanticsOutputMemoryKHRMask);\n  221  \n  222:     if (opcode == SpvOpMemoryBarrier && !num_memory_order_set_bits) {\n  223        return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  224               << spvOpcodeString(opcode)\n  ...\n  230      }\n  231  \n  232:     if (opcode == SpvOpMemoryBarrier && !includes_storage_class) {\n  233        return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  234               << spvOpcodeString(opcode)\n  ...\n  239  #if 0\n  240      // TODO(atgoo@github.com): this check fails Vulkan CTS, reenable once fixed.\n  241:     if (opcode == SpvOpControlBarrier && value && !includes_storage_class) {\n  242        return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  243               << spvOpcodeString(opcode)\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_non_uniform.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Validates correctness of barrier SPIR-V instructions.\n   16  \n   17  #include \"source/val/validate.h\"\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_scopes.cpp:\n  106      }\n  107  \n  108:     // If OpControlBarrier is used in fragment, vertex, tessellation evaluation,\n  109      // or geometry stages, the execution Scope must be Subgroup.\n  110:     if (opcode == SpvOpControlBarrier && value != SpvScopeSubgroup) {\n  111        _.function(inst->function()->id())\n  112            ->RegisterExecutionModelLimitation([](SpvExecutionModel model,\n  ...\n  118                if (message) {\n  119                  *message =\n  120:                     \"in Vulkan evironment, OpControlBarrier execution scope \"\n  121                      \"must be Subgroup for Fragment, Vertex, Geometry and \"\n  122                      \"TessellationEvaluation execution models\";\n  ...\n  264    if (spvIsWebGPUEnv(_.context()->target_env)) {\n  265      switch (inst->opcode()) {\n  266:       case SpvOpControlBarrier:\n  267          if (value != SpvScopeWorkgroup) {\n  268            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  269                   << spvOpcodeString(opcode)\n  270                   << \": in WebGPU environment Memory Scope is limited to \"\n  271:                  << \"Workgroup for OpControlBarrier\";\n  272          }\n  273          break;\n  274:       case SpvOpMemoryBarrier:\n  275          if (value != SpvScopeWorkgroup) {\n  276            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  277                   << spvOpcodeString(opcode)\n  278                   << \": in WebGPU environment Memory Scope is limited to \"\n  279:                  << \"Workgroup for OpMemoryBarrier\";\n  280          }\n  281          break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/binary_parse_test.cpp:\n  847          // initializer.\n  848          {\"%2 = OpVariable %1 CrossWorkgroup !0\", \"Id is 0\"},\n  849:         {\"OpControlBarrier !0 %1 %2\", \"scope ID is 0\"},\n  850:         {\"OpControlBarrier %1 !0 %2\", \"scope ID is 0\"},\n  851:         {\"OpControlBarrier %1 %2 !0\", \"memory semantics ID is 0\"},\n  852          {\"%import = OpExtInstImport \\\"GLSL.std.450\\\" \"\n  853           \"%result = OpExtInst %type %import !999999 %x\",\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/CMakeLists.txt:\n  131    text_start_new_inst_test.cpp\n  132    text_to_binary.annotation_test.cpp\n  133:   text_to_binary.barrier_test.cpp\n  134    text_to_binary.composite_test.cpp\n  135    text_to_binary.constant_test.cpp\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/enum_string_mapping_test.cpp:\n  163           {SpvCapabilityMultiViewport, \"MultiViewport\"},\n  164           {SpvCapabilitySubgroupDispatch, \"SubgroupDispatch\"},\n  165:          {SpvCapabilityNamedBarrier, \"NamedBarrier\"},\n  166           {SpvCapabilityPipeStorage, \"PipeStorage\"},\n  167           {SpvCapabilitySubgroupBallotKHR, \"SubgroupBallotKHR\"},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/link/type_match_test.cpp:\n   32  #define PartPipe(D, N) D(N) \" = OpTypePipe ReadWrite\"\n   33  #define PartPipeStorage(D, N) D(N) \" = OpTypePipeStorage\"\n   34: #define PartNamedBarrier(D, N) D(N) \" = OpTypeNamedBarrier\"\n   35  \n   36  // Compound types\n   ..\n   60      const std::string base =                                    \\\n   61          \"OpCapability Linkage\\n\"                                \\\n   62:         \"OpCapability NamedBarrier\\n\"                           \\\n   63          \"OpCapability PipeStorage\\n\"                            \\\n   64          \"OpCapability Pipes\\n\"                                  \\\n   ..\n   97  Match1(Pipe)\n   98  Match1(PipeStorage)\n   99: Match1(NamedBarrier)\n  100  \n  101  // Simpler (restricted) compound types\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/name_mapper_test.cpp:\n  204                               {\"%1 = OpTypePipe ReadWrite\", 1, \"PipeReadWrite\"},\n  205                               {\"%1 = OpTypePipeStorage\", 1, \"PipeStorage\"},\n  206:                              {\"%1 = OpTypeNamedBarrier\", 1, \"NamedBarrier\"},\n  207                           }));\n  208  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opcode_require_capabilities_test.cpp:\n   69          ExpectedOpCodeCapabilities{SpvOpEmitStreamVertex,\n   70                                     CapabilitySet{SpvCapabilityGeometryStreams}},\n   71:         ExpectedOpCodeCapabilities{SpvOpTypeNamedBarrier,\n   72:                                    CapabilitySet{SpvCapabilityNamedBarrier}},\n   73          ExpectedOpCodeCapabilities{\n   74              SpvOpGetKernelMaxNumSubgroups,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/operand-class-test-coverage.csv:\n   35  \"    OperandLoop,\",LoopMerge,,CombinedLoopControlMask,\"TEST_F(OpLoopMergeTest, WrongLoopControl)\"\n   36  \"    OperandFunction,\",Function,,AnySingleFunctionControlMask,\"TEST_F(OpFunctionControlTest, WrongFunctionControl)\"\n   37: \"    OperandMemorySemantics,\",OpMemoryBarrier,\"it's an ID, not in grammar\",OpMemoryBarrier*,not enum\n   38  \"    OperandMemoryAccess,\",UNUSED,\"should be on opstore, but hacked in opcode.cpp\",,not enum\n   39: \"    OperandScope,\",MemoryBarrier,\"it's an ID, not in grammar\",OpMemoryBarrier*,not enum\n   40  \"    OperandGroupOperation,\",GroupIAdd,,GroupOperationTest,\"TEST_F(GroupOperationTest, WrongGroupOperation)\"\n   41  \"    OperandKernelEnqueueFlags,\",OpEnqueueKernel,\"it's an ID, not in grammar\",should not have one,not enum\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/operand_capabilities_test.cpp:\n  744              ValuesIn(std::vector<EnumCapabilityCase>{\n  745                  CASE1(CAPABILITY, CapabilitySubgroupDispatch, DeviceEnqueue),\n  746:                 CASE1(CAPABILITY, CapabilityNamedBarrier, Kernel),\n  747                  CASE1(CAPABILITY, CapabilityPipeStorage, Pipes),\n  748              })));\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/aggressive_dead_code_elim_test.cpp:\n 6860  ; CHECK:      [[merge]] = OpLabel\n 6861  \n 6862:                OpControlBarrier %uint_2 %uint_2 %uint_264\n 6863           %85 = OpIEqual %bool %65 %uint_0\n 6864                 OpSelectionMerge %89 None\n ....\n 6869                 OpBranch %89\n 6870           %89 = OpLabel\n 6871:                OpControlBarrier %uint_2 %uint_2 %uint_264\n 6872           %91 = OpAccessChain %_ptr_Workgroup_uint %sharedHistogram %65\n 6873           %92 = OpLoad %uint %91\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/code_sink_test.cpp:\n  389           %14 = OpAccessChain %_ptr_Uniform_uint %11 %uint_0\n  390           %15 = OpLoad %uint %14\n  391:                OpMemoryBarrier %uint_4 %mem_semantics\n  392                 OpSelectionMerge %16 None\n  393                 OpBranchConditional %true %17 %20\n  ...\n  430           %14 = OpAccessChain %_ptr_Uniform_uint %11 %uint_0\n  431           %15 = OpLoad %uint %14\n  432:                OpMemoryBarrier %uint_4 %mem_semantics\n  433                 OpSelectionMerge %16 None\n  434                 OpBranchConditional %true %17 %20\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/instruction_test.cpp:\n  132      6};\n  133  \n  134: // The words for an OpControlBarrier instruction.\n  135: uint32_t kSampleControlBarrierInstructionWords[] = {\n  136:     (4 << 16) | uint32_t(SpvOpControlBarrier), 100, 101, 102};\n  137  \n  138: // The operands that would be parsed from kSampleControlBarrierInstructionWords.\n  139: spv_parsed_operand_t kSampleControlBarrierOperands[] = {\n  140      {1, 1, SPV_OPERAND_TYPE_SCOPE_ID, SPV_NUMBER_NONE, 0},  // Execution\n  141      {2, 1, SPV_OPERAND_TYPE_SCOPE_ID, SPV_NUMBER_NONE, 0},  // Memory\n  ...\n  144  };\n  145  \n  146: // A valid parse of kSampleControlBarrierInstructionWords\n  147: spv_parsed_instruction_t kSampleControlBarrierInstruction = {\n  148:     kSampleControlBarrierInstructionWords,\n  149      uint16_t(4),\n  150:     uint16_t(SpvOpControlBarrier),\n  151      SPV_EXT_INST_TYPE_NONE,\n  152      0,  // type id\n  153      0,  // result id\n  154:     kSampleControlBarrierOperands,\n  155      3};\n  156  \n  ...\n  254  TEST(InstructionTest, ForInIdNonstandardIdTypes) {\n  255    IRContext context(SPV_ENV_UNIVERSAL_1_2, nullptr);\n  256:   Instruction inst(&context, kSampleControlBarrierInstruction);\n  257  \n  258    std::vector<uint32_t> ids;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/loop_optimizations/fusion_illegal.cpp:\n 1187    int[10] b;\n 1188  \n 1189:   // Illegal, barrier.\n 1190    for (int i = 0; i < 10; i++) {\n 1191      a[i] = a[i] * 2;\n 1192:     memoryBarrier();\n 1193    }\n 1194    for (int j = 0; j < 10; j++) {\n ....\n 1198  \n 1199  */\n 1200: TEST_F(FusionIllegalTest, Barrier) {\n 1201    std::string text = R\"(\n 1202                 OpCapability Shader\n ....\n 1247           %30 = OpAccessChain %7 %23 %53\n 1248                 OpStore %30 %29\n 1249:                OpMemoryBarrier %31 %32\n 1250                 OpBranch %13\n 1251           %13 = OpLabel\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/loop_optimizations/loop_fission.cpp:\n 1886      for (int i = 0; i < 10; i++) {\n 1887        B[i] = A[i];\n 1888:       memoryBarrier();\n 1889        A[i] = B[i];\n 1890      }\n 1891  }\n 1892  \n 1893: This should not be split due to the memory barrier.\n 1894  */\n 1895: TEST_F(FissionClassTest, FissionBarrier) {\n 1896    // clang-format off\n 1897    // With LocalMultiStoreElimPass\n ....\n 1946  %35 = OpAccessChain %19 %5 %26\n 1947  OpStore %35 %34\n 1948: OpMemoryBarrier %20 %21\n 1949  %36 = OpAccessChain %19 %5 %26\n 1950  %37 = OpLoad %14 %36\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/module_test.cpp:\n   66    EXPECT_EQ(3000u,\n   67              BuildModule(\"%f = OpFunction %void None %fntype %a = OpLabel \"\n   68:                         \"OpMemoryBarrier !2999 %b\\n\")\n   69                  ->module()\n   70                  ->ComputeIdBound());\n   ..\n   72    EXPECT_EQ(4000u,\n   73              BuildModule(\"%f = OpFunction %void None %fntype %a = OpLabel \"\n   74:                         \"OpMemoryBarrier %b !3999\\n\")\n   75                  ->module()\n   76                  ->ComputeIdBound());\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/replace_invalid_opc_test.cpp:\n  383  }\n  384  \n  385: TEST_F(ReplaceInvalidOpcodeTest, BarrierDontReplace) {\n  386    const std::string text = R\"(\n  387              OpCapability Shader\n  ...\n  401      %main = OpFunction %void None %3\n  402         %5 = OpLabel\n  403:             OpControlBarrier %uint_2 %uint_2 %uint_264\n  404              OpReturn\n  405              OpFunctionEnd)\";\n  ...\n  410  }\n  411  \n  412: TEST_F(ReplaceInvalidOpcodeTest, BarrierReplace) {\n  413    const std::string text = R\"(\n  414: ; CHECK-NOT: OpControlBarrier\n  415              OpCapability Shader\n  416         %1 = OpExtInstImport \"GLSL.std.450\"\n  ...\n  429      %main = OpFunction %void None %3\n  430         %5 = OpLabel\n  431:             OpControlBarrier %uint_2 %uint_2 %uint_264\n  432              OpReturn\n  433              OpFunctionEnd)\";\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/strip_atomic_counter_memory_test.cpp:\n  111  }\n  112  \n  113: std::string GetOpControlBarrierInst(std::string val) {\n  114:   return \"OpControlBarrier %uint_1 %uint_1 %uint_\" + val;\n  115  }\n  116  \n  117: TEST_P(MemorySemanticsModified, OpControlBarrier) {\n  118    std::string input, expected;\n  119    std::tie(input, expected) =\n  120:       GetInputAndExpected(GetOpControlBarrierInst, GetParam());\n  121    SinglePassRunAndCheck<StripAtomicCounterMemoryPass>(input, expected,\n  122                                                        /* skip_nop = */ false);\n  123  }\n  124  \n  125: std::string GetOpMemoryBarrierInst(std::string val) {\n  126:   return \"OpMemoryBarrier %uint_1 %uint_\" + val;\n  127  }\n  128  \n  129: TEST_P(MemorySemanticsModified, OpMemoryBarrier) {\n  130    std::string input, expected;\n  131    std::tie(input, expected) =\n  132:       GetInputAndExpected(GetOpMemoryBarrierInst, GetParam());\n  133    SinglePassRunAndCheck<StripAtomicCounterMemoryPass>(input, expected,\n  134                                                        /* skip_nop = */ false);\n  ...\n  353  }\n  354  \n  355: std::string GetOpMemoryNamedBarrierInst(std::string val) {\n  356:   return \"OpMemoryNamedBarrier %4 %uint_1 %uint_\" + val;\n  357  }\n  358  \n  359: TEST_P(MemorySemanticsModified, OpMemoryNamedBarrier) {\n  360    std::string input, expected;\n  361    std::tie(input, expected) =\n  362:       GetInputAndExpected(GetOpMemoryNamedBarrierInst, GetParam());\n  363    SinglePassRunAndCheck<StripAtomicCounterMemoryPass>(input, expected,\n  364                                                        /* skip_nop = */ false);\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/type_manager_test.cpp:\n  157    types.emplace_back(new Queue());\n  158  \n  159:   // Pipe, Forward Pointer, PipeStorage, NamedBarrier, AccelerationStructureNV,\n  160    // CooperativeMatrixNV\n  161    types.emplace_back(new Pipe(SpvAccessQualifierReadWrite));\n  ...\n  165    types.emplace_back(new ForwardPointer(2, SpvStorageClassUniform));\n  166    types.emplace_back(new PipeStorage());\n  167:   types.emplace_back(new NamedBarrier());\n  168    types.emplace_back(new AccelerationStructureNV());\n  169    types.emplace_back(new CooperativeMatrixNV(f32, 24, 24, 24));\n  ...\n  203      %pipe    = OpTypePipe ReadOnly\n  204      %ps      = OpTypePipeStorage\n  205:     %nb      = OpTypeNamedBarrier\n  206      %rtacc   = OpTypeAccelerationStructureNV\n  207      ; Set up other kinds of OpTypeArray\n  ...\n  248        {27, \"pipe(0)\"},\n  249        {28, \"pipe_storage\"},\n  250:       {29, \"named_barrier\"},\n  251        {30, \"accelerationStructureNV\"},\n  252        {31, \"sint64\"},\n  ...\n 1063  ; CHECK: OpTypeForwardPointer [[uniform_ptr]] Uniform\n 1064  ; CHECK: OpTypePipeStorage\n 1065: ; CHECK: OpTypeNamedBarrier\n 1066  ; CHECK: OpTypeAccelerationStructureKHR\n 1067  ; CHECK: OpTypeCooperativeMatrixNV [[f32]] [[uint24]] [[uint24]] [[uint24]]\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/types_test.cpp:\n  109  TestMultipleInstancesOfTheSameType(ForwardPointer, 10, SpvStorageClassUniform)\n  110  TestMultipleInstancesOfTheSameType(PipeStorage)\n  111: TestMultipleInstancesOfTheSameType(NamedBarrier)\n  112  TestMultipleInstancesOfTheSameType(AccelerationStructureNV)\n  113  #undef TestMultipleInstanceOfTheSameType\n  ...\n  236    types.emplace_back(new Queue());\n  237  \n  238:   // Pipe, Forward Pointer, PipeStorage, NamedBarrier\n  239    types.emplace_back(new Pipe(SpvAccessQualifierReadWrite));\n  240    types.emplace_back(new Pipe(SpvAccessQualifierReadOnly));\n  ...\n  243    types.emplace_back(new ForwardPointer(2, SpvStorageClassUniform));\n  244    types.emplace_back(new PipeStorage());\n  245:   types.emplace_back(new NamedBarrier());\n  246  \n  247    return types;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/upgrade_memory_model_test.cpp:\n 1174  }\n 1175  \n 1176: TEST_F(UpgradeMemoryModelTest, TessellationControlBarrierNoChange) {\n 1177    const std::string text = R\"(\n 1178  ; CHECK: [[none:%\\w+]] = OpConstant {{%\\w+}} 0\n 1179  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1180: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[none]]\n 1181  OpCapability Tessellation\n 1182  OpMemoryModel Logical GLSL450\n ....\n 1189  %func = OpFunction %void None %func_ty\n 1190  %1 = OpLabel\n 1191: OpControlBarrier %workgroup %workgroup %none\n 1192  OpReturn\n 1193  OpFunctionEnd\n ....\n 1197  }\n 1198  \n 1199: TEST_F(UpgradeMemoryModelTest, TessellationControlBarrierAddOutput) {\n 1200    const std::string text = R\"(\n 1201  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1202  ; CHECK: [[output:%\\w+]] = OpConstant {{%\\w+}} 4096\n 1203: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[output]]\n 1204  OpCapability Tessellation\n 1205  OpMemoryModel Logical GLSL450\n ....\n 1215  %1 = OpLabel\n 1216  %ld = OpLoad %int %var\n 1217: OpControlBarrier %workgroup %workgroup %none\n 1218  OpStore %var %ld\n 1219  OpReturn\n ....\n 1224  }\n 1225  \n 1226: TEST_F(UpgradeMemoryModelTest, TessellationMemoryBarrierNoChange) {\n 1227    const std::string text = R\"(\n 1228  ; CHECK: [[none:%\\w+]] = OpConstant {{%\\w+}} 0\n 1229  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1230: ; CHECK: OpMemoryBarrier [[workgroup]] [[none]]\n 1231  OpCapability Tessellation\n 1232  OpMemoryModel Logical GLSL450\n ....\n 1242  %1 = OpLabel\n 1243  %ld = OpLoad %int %var\n 1244: OpMemoryBarrier %workgroup %none\n 1245  OpStore %var %ld\n 1246  OpReturn\n ....\n 1251  }\n 1252  \n 1253: TEST_F(UpgradeMemoryModelTest, TessellationControlBarrierAddOutputSubFunction) {\n 1254    const std::string text = R\"(\n 1255  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1256  ; CHECK: [[output:%\\w+]] = OpConstant {{%\\w+}} 4096\n 1257: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[output]]\n 1258  OpCapability Tessellation\n 1259  OpMemoryModel Logical GLSL450\n ....\n 1274  %2 = OpLabel\n 1275  %ld = OpLoad %int %var\n 1276: OpControlBarrier %workgroup %workgroup %none\n 1277  OpStore %var %ld\n 1278  OpReturn\n ....\n 1284  \n 1285  TEST_F(UpgradeMemoryModelTest,\n 1286:        TessellationControlBarrierAddOutputDifferentFunctions) {\n 1287    const std::string text = R\"(\n 1288  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1289  ; CHECK: [[output:%\\w+]] = OpConstant {{%\\w+}} 4096\n 1290: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[output]]\n 1291  OpCapability Tessellation\n 1292  OpMemoryModel Logical GLSL450\n ....\n 1304  %1 = OpLabel\n 1305  %call_ld = OpFunctionCall %int %ld_func\n 1306: %call_barrier = OpFunctionCall %void %barrier_func\n 1307  %call_st = OpFunctionCall %void %st_func %call_ld\n 1308  OpReturn\n ....\n 1313  OpReturnValue %ld\n 1314  OpFunctionEnd\n 1315: %barrier_func = OpFunction %void None %func_ty\n 1316  %3 = OpLabel\n 1317: OpControlBarrier %workgroup %workgroup %none\n 1318  OpReturn\n 1319  OpFunctionEnd\n ....\n 1329  }\n 1330  \n 1331: TEST_F(UpgradeMemoryModelTest, ChangeControlBarrierMemoryScope) {\n 1332    std::string text = R\"(\n 1333  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1334  ; CHECK: [[queuefamily:%\\w+]] = OpConstant {{%\\w+}} 5\n 1335: ; CHECK: OpControlBarrier [[workgroup]] [[queuefamily]]\n 1336  OpCapability Shader\n 1337  OpMemoryModel Logical GLSL450\n ....\n 1345  %func = OpFunction %void None %func_ty\n 1346  %1 = OpLabel\n 1347: OpControlBarrier %workgroup %device %none\n 1348  OpReturn\n 1349  OpFunctionEnd\n ....\n 1353  }\n 1354  \n 1355: TEST_F(UpgradeMemoryModelTest, ChangeMemoryBarrierMemoryScope) {\n 1356    std::string text = R\"(\n 1357  ; CHECK: [[queuefamily:%\\w+]] = OpConstant {{%\\w+}} 5\n 1358: ; CHECK: OpMemoryBarrier [[queuefamily]]\n 1359  OpCapability Shader\n 1360  OpMemoryModel Logical GLSL450\n ....\n 1367  %func = OpFunction %void None %func_ty\n 1368  %1 = OpLabel\n 1369: OpMemoryBarrier %device %none\n 1370  OpReturn\n 1371  OpFunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/text_to_binary.barrier_test.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Assembler tests for instructions in the \"Barrier Instructions\" section\n   16  // of the SPIR-V spec.\n   17  \n   ..\n   31  using ::testing::Eq;\n   32  \n   33: // Test OpMemoryBarrier\n   34  \n   35: using OpMemoryBarrier = spvtest::TextToBinaryTest;\n   36  \n   37: TEST_F(OpMemoryBarrier, Good) {\n   38:   const std::string input = \"OpMemoryBarrier %1 %2\\n\";\n   39    EXPECT_THAT(CompiledInstructions(input),\n   40:               Eq(MakeInstruction(SpvOpMemoryBarrier, {1, 2})));\n   41    EXPECT_THAT(EncodeAndDecodeSuccessfully(input), Eq(input));\n   42  }\n   43  \n   44: TEST_F(OpMemoryBarrier, BadMissingScopeId) {\n   45:   const std::string input = \"OpMemoryBarrier\\n\";\n   46    EXPECT_THAT(CompileFailure(input),\n   47                Eq(\"Expected operand, found end of stream.\"));\n   48  }\n   49  \n   50: TEST_F(OpMemoryBarrier, BadInvalidScopeId) {\n   51:   const std::string input = \"OpMemoryBarrier 99\\n\";\n   52    EXPECT_THAT(CompileFailure(input), Eq(\"Expected id to start with %.\"));\n   53  }\n   54  \n   55: TEST_F(OpMemoryBarrier, BadMissingMemorySemanticsId) {\n   56:   const std::string input = \"OpMemoryBarrier %scope\\n\";\n   57    EXPECT_THAT(CompileFailure(input),\n   58                Eq(\"Expected operand, found end of stream.\"));\n   59  }\n   60  \n   61: TEST_F(OpMemoryBarrier, BadInvalidMemorySemanticsId) {\n   62:   const std::string input = \"OpMemoryBarrier %scope 14\\n\";\n   63    EXPECT_THAT(CompileFailure(input), Eq(\"Expected id to start with %.\"));\n   64  }\n   65  \n   66: // TODO(dneto): OpControlBarrier\n   67  // TODO(dneto): OpGroupAsyncCopy\n   68  // TODO(dneto): OpGroupWaitEvents\n   ..\n   79  // TODO(dneto): OpGroupSMax\n   80  \n   81: using NamedMemoryBarrierTest = spvtest::TextToBinaryTest;\n   82  \n   83: // OpMemoryNamedBarrier is not in 1.0, but it is enabled by a capability.\n   84  // We should be able to assemble it.  Validation checks are in another test\n   85  // file.\n   86: TEST_F(NamedMemoryBarrierTest, OpcodeAssemblesInV10) {\n   87    EXPECT_THAT(\n   88:       CompiledInstructions(\"OpMemoryNamedBarrier %bar %scope %semantics\",\n   89                             SPV_ENV_UNIVERSAL_1_0),\n   90:       ElementsAre(spvOpcodeMake(4, SpvOpMemoryNamedBarrier), _, _, _));\n   91  }\n   92  \n   93: TEST_F(NamedMemoryBarrierTest, ArgumentCount) {\n   94:   EXPECT_THAT(CompileFailure(\"OpMemoryNamedBarrier\", SPV_ENV_UNIVERSAL_1_1),\n   95                Eq(\"Expected operand, found end of stream.\"));\n   96    EXPECT_THAT(\n   97:       CompileFailure(\"OpMemoryNamedBarrier %bar\", SPV_ENV_UNIVERSAL_1_1),\n   98        Eq(\"Expected operand, found end of stream.\"));\n   99    EXPECT_THAT(\n  100:       CompileFailure(\"OpMemoryNamedBarrier %bar %scope\", SPV_ENV_UNIVERSAL_1_1),\n  101        Eq(\"Expected operand, found end of stream.\"));\n  102    EXPECT_THAT(\n  103:       CompiledInstructions(\"OpMemoryNamedBarrier %bar %scope %semantics\",\n  104                             SPV_ENV_UNIVERSAL_1_1),\n  105:       ElementsAre(spvOpcodeMake(4, SpvOpMemoryNamedBarrier), _, _, _));\n  106    EXPECT_THAT(\n  107:       CompileFailure(\"OpMemoryNamedBarrier %bar %scope %semantics %extra\",\n  108                       SPV_ENV_UNIVERSAL_1_1),\n  109        Eq(\"Expected '=', found end of stream.\"));\n  110  }\n  111  \n  112: TEST_F(NamedMemoryBarrierTest, ArgumentTypes) {\n  113:   EXPECT_THAT(CompileFailure(\"OpMemoryNamedBarrier 123 %scope %semantics\",\n  114                               SPV_ENV_UNIVERSAL_1_1),\n  115                Eq(\"Expected id to start with %.\"));\n  116:   EXPECT_THAT(CompileFailure(\"OpMemoryNamedBarrier %bar %scope \\\"semantics\\\"\",\n  117                               SPV_ENV_UNIVERSAL_1_1),\n  118                Eq(\"Expected id to start with %.\"));\n  119  }\n  120  \n  121: using TypeNamedBarrierTest = spvtest::TextToBinaryTest;\n  122  \n  123: TEST_F(TypeNamedBarrierTest, OpcodeAssemblesInV10) {\n  124    EXPECT_THAT(\n  125:       CompiledInstructions(\"%t = OpTypeNamedBarrier\", SPV_ENV_UNIVERSAL_1_0),\n  126:       ElementsAre(spvOpcodeMake(2, SpvOpTypeNamedBarrier), _));\n  127  }\n  128  \n  129: TEST_F(TypeNamedBarrierTest, ArgumentCount) {\n  130:   EXPECT_THAT(CompileFailure(\"OpTypeNamedBarrier\", SPV_ENV_UNIVERSAL_1_1),\n  131                Eq(\"Expected <result-id> at the beginning of an instruction, \"\n  132:                  \"found 'OpTypeNamedBarrier'.\"));\n  133    EXPECT_THAT(\n  134:       CompiledInstructions(\"%t = OpTypeNamedBarrier\", SPV_ENV_UNIVERSAL_1_1),\n  135:       ElementsAre(spvOpcodeMake(2, SpvOpTypeNamedBarrier), _));\n  136    EXPECT_THAT(\n  137:       CompileFailure(\"%t = OpTypeNamedBarrier 1 2 3\", SPV_ENV_UNIVERSAL_1_1),\n  138        Eq(\"Expected <opcode> or <result-id> at the beginning of an instruction, \"\n  139           \"found '1'.\"));\n  140  }\n  141  \n  142: using NamedBarrierInitializeTest = spvtest::TextToBinaryTest;\n  143  \n  144: TEST_F(NamedBarrierInitializeTest, OpcodeAssemblesInV10) {\n  145    EXPECT_THAT(\n  146:       CompiledInstructions(\"%bar = OpNamedBarrierInitialize %type %count\",\n  147                             SPV_ENV_UNIVERSAL_1_0),\n  148:       ElementsAre(spvOpcodeMake(4, SpvOpNamedBarrierInitialize), _, _, _));\n  149  }\n  150  \n  151: TEST_F(NamedBarrierInitializeTest, ArgumentCount) {\n  152    EXPECT_THAT(\n  153:       CompileFailure(\"%bar = OpNamedBarrierInitialize\", SPV_ENV_UNIVERSAL_1_1),\n  154        Eq(\"Expected operand, found end of stream.\"));\n  155:   EXPECT_THAT(CompileFailure(\"%bar = OpNamedBarrierInitialize %ype\",\n  156                               SPV_ENV_UNIVERSAL_1_1),\n  157                Eq(\"Expected operand, found end of stream.\"));\n  158    EXPECT_THAT(\n  159:       CompiledInstructions(\"%bar = OpNamedBarrierInitialize %type %count\",\n  160                             SPV_ENV_UNIVERSAL_1_1),\n  161:       ElementsAre(spvOpcodeMake(4, SpvOpNamedBarrierInitialize), _, _, _));\n  162    EXPECT_THAT(\n  163:       CompileFailure(\"%bar = OpNamedBarrierInitialize %type %count \\\"extra\\\"\",\n  164                       SPV_ENV_UNIVERSAL_1_1),\n  165        Eq(\"Expected <opcode> or <result-id> at the beginning of an instruction, \"\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/text_to_binary.subgroup_dispatch_test.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Assembler tests for instructions in the \"Barrier Instructions\" section\n   16  // of the SPIR-V spec.\n   17  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/CMakeLists.txt:\n   26         val_arithmetics_test.cpp\n   27         val_atomics_test.cpp\n   28:        val_barriers_test.cpp\n   29         val_bitwise_test.cpp\n   30         val_builtins_test.cpp\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_barriers_test.cpp:\n   27  using ::testing::Not;\n   28  \n   29: using ValidateBarriers = spvtest::ValidateBase<bool>;\n   30  \n   31  std::string GenerateShaderCodeImpl(\n   ..\n  167  OpCapability Linkage\n  168  OpCapability Int64\n  169: OpCapability NamedBarrier\n  170  )\";\n  171  \n  ...\n  204  %acquire_release_workgroup = OpConstant %u32 264\n  205  \n  206: %named_barrier = OpTypeNamedBarrier\n  207  \n  208  %main = OpFunction %void None %func\n  ...\n  219  }\n  220  \n  221: TEST_F(ValidateBarriers, OpControlBarrierGLComputeSuccess) {\n  222    const std::string body = R\"(\n  223: OpControlBarrier %device %device %none\n  224: OpControlBarrier %workgroup %workgroup %acquire\n  225: OpControlBarrier %workgroup %device %release\n  226: OpControlBarrier %cross_device %cross_device %acquire_release\n  227: OpControlBarrier %cross_device %cross_device %sequentially_consistent\n  228: OpControlBarrier %cross_device %cross_device %acquire_release_uniform_workgroup\n  229  )\";\n  230  \n  ...\n  233  }\n  234  \n  235: TEST_F(ValidateBarriers, OpControlBarrierKernelSuccess) {\n  236    const std::string body = R\"(\n  237: OpControlBarrier %device %device %none\n  238: OpControlBarrier %workgroup %workgroup %acquire\n  239: OpControlBarrier %workgroup %device %release\n  240: OpControlBarrier %cross_device %cross_device %acquire_release\n  241: OpControlBarrier %cross_device %cross_device %sequentially_consistent\n  242: OpControlBarrier %cross_device %cross_device %acquire_release_workgroup\n  243  )\";\n  244  \n  ...\n  247  }\n  248  \n  249: TEST_F(ValidateBarriers, OpControlBarrierTesselationControlSuccess) {\n  250    const std::string body = R\"(\n  251: OpControlBarrier %device %device %none\n  252: OpControlBarrier %workgroup %workgroup %acquire\n  253: OpControlBarrier %workgroup %device %release\n  254: OpControlBarrier %cross_device %cross_device %acquire_release\n  255: OpControlBarrier %cross_device %cross_device %sequentially_consistent\n  256: OpControlBarrier %cross_device %cross_device %acquire_release_uniform_workgroup\n  257  )\";\n  258  \n  ...\n  262  }\n  263  \n  264: TEST_F(ValidateBarriers, OpControlBarrierVulkanSuccess) {\n  265    const std::string body = R\"(\n  266: OpControlBarrier %workgroup %device %none\n  267: OpControlBarrier %workgroup %workgroup %acquire_release_uniform_workgroup\n  268  )\";\n  269  \n  ...\n  272  }\n  273  \n  274: TEST_F(ValidateBarriers, OpControlBarrierWebGPUAcquireReleaseSuccess) {\n  275    const std::string body = R\"(\n  276: OpControlBarrier %workgroup %workgroup %acquire_release_workgroup\n  277  )\";\n  278  \n  ...\n  281  }\n  282  \n  283: TEST_F(ValidateBarriers, OpControlBarrierWebGPURelaxedFailure) {\n  284    const std::string body = R\"(\n  285: OpControlBarrier %workgroup %workgroup %workgroup\n  286  )\";\n  287  \n  ...\n  290    EXPECT_THAT(getDiagnosticString(),\n  291                HasSubstr(\"For WebGPU, AcquireRelease must be set for Memory \"\n  292:                         \"Semantics of OpControlBarrier\"));\n  293  }\n  294  \n  295: TEST_F(ValidateBarriers, OpControlBarrierWebGPUMissingWorkgroupFailure) {\n  296    const std::string body = R\"(\n  297: OpControlBarrier %workgroup %workgroup %acquire_release\n  298  )\";\n  299  \n  ...\n  305  }\n  306  \n  307: TEST_F(ValidateBarriers, OpControlBarrierWebGPUUniformFailure) {\n  308    const std::string body = R\"(\n  309: OpControlBarrier %workgroup %workgroup %acquire_release_uniform_workgroup\n  310  )\";\n  311  \n  ...\n  315        getDiagnosticString(),\n  316        HasSubstr(\"For WebGPU only WorkgroupMemory and AcquireRelease may be set \"\n  317:                 \"for Memory Semantics of OpControlBarrier.\"));\n  318  }\n  319  \n  320: TEST_F(ValidateBarriers, OpControlBarrierWebGPUReleaseFailure) {\n  321    const std::string body = R\"(\n  322: OpControlBarrier %workgroup %workgroup %release_uniform_workgroup\n  323  )\";\n  324  \n  ...\n  327    EXPECT_THAT(getDiagnosticString(),\n  328                HasSubstr(\"For WebGPU, AcquireRelease must be set for Memory \"\n  329:                         \"Semantics of OpControlBarrier\"));\n  330  }\n  331  \n  332: TEST_F(ValidateBarriers, OpControlBarrierExecutionModelFragmentSpirv12) {\n  333    const std::string body = R\"(\n  334: OpControlBarrier %device %device %none\n  335  )\";\n  336  \n  ...\n  340    EXPECT_THAT(\n  341        getDiagnosticString(),\n  342:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  343                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  344  }\n  345  \n  346: TEST_F(ValidateBarriers, OpControlBarrierExecutionModelFragmentSpirv13) {\n  347    const std::string body = R\"(\n  348: OpControlBarrier %device %device %none\n  349  )\";\n  350  \n  ...\n  354  }\n  355  \n  356: TEST_F(ValidateBarriers, OpControlBarrierFloatExecutionScope) {\n  357    const std::string body = R\"(\n  358: OpControlBarrier %f32_1 %device %none\n  359  )\";\n  360  \n  ...\n  362    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  363    EXPECT_THAT(getDiagnosticString(),\n  364:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  365  }\n  366  \n  367: TEST_F(ValidateBarriers, OpControlBarrierU64ExecutionScope) {\n  368    const std::string body = R\"(\n  369: OpControlBarrier %u64_1 %device %none\n  370  )\";\n  371  \n  ...\n  373    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  374    EXPECT_THAT(getDiagnosticString(),\n  375:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  376  }\n  377  \n  378: TEST_F(ValidateBarriers, OpControlBarrierFloatMemoryScope) {\n  379    const std::string body = R\"(\n  380: OpControlBarrier %device %f32_1 %none\n  381  )\";\n  382  \n  ...\n  384    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  385    EXPECT_THAT(getDiagnosticString(),\n  386:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  387  }\n  388  \n  389: TEST_F(ValidateBarriers, OpControlBarrierU64MemoryScope) {\n  390    const std::string body = R\"(\n  391: OpControlBarrier %device %u64_1 %none\n  392  )\";\n  393  \n  ...\n  395    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  396    EXPECT_THAT(getDiagnosticString(),\n  397:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  398  }\n  399  \n  400: TEST_F(ValidateBarriers, OpControlBarrierFloatMemorySemantics) {\n  401    const std::string body = R\"(\n  402: OpControlBarrier %device %device %f32_0\n  403  )\";\n  404  \n  ...\n  408        getDiagnosticString(),\n  409        HasSubstr(\n  410:           \"ControlBarrier: expected Memory Semantics to be a 32-bit int\"));\n  411  }\n  412  \n  413: TEST_F(ValidateBarriers, OpControlBarrierU64MemorySemantics) {\n  414    const std::string body = R\"(\n  415: OpControlBarrier %device %device %u64_0\n  416  )\";\n  417  \n  ...\n  421        getDiagnosticString(),\n  422        HasSubstr(\n  423:           \"ControlBarrier: expected Memory Semantics to be a 32-bit int\"));\n  424  }\n  425  \n  426: TEST_F(ValidateBarriers, OpControlBarrierVulkanExecutionScopeDevice) {\n  427    const std::string body = R\"(\n  428: OpControlBarrier %device %workgroup %none\n  429  )\";\n  430  \n  ...\n  432    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_0));\n  433    EXPECT_THAT(getDiagnosticString(),\n  434:               HasSubstr(\"ControlBarrier: in Vulkan environment Execution Scope \"\n  435                          \"is limited to Workgroup and Subgroup\"));\n  436  }\n  437  \n  438: TEST_F(ValidateBarriers, OpControlBarrierWebGPUExecutionScopeDeviceBad) {\n  439    const std::string body = R\"(\n  440: OpControlBarrier %device %workgroup %none\n  441  )\";\n  442  \n  ...\n  444    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_WEBGPU_0));\n  445    EXPECT_THAT(getDiagnosticString(),\n  446:               HasSubstr(\"ControlBarrier: in WebGPU environment Execution Scope \"\n  447                          \"is limited to Workgroup\"));\n  448  }\n  449  \n  450: TEST_F(ValidateBarriers, OpControlBarrierWebGPUExecutionScopeSubgroupBad) {\n  451    const std::string body = R\"(\n  452: OpControlBarrier %subgroup %workgroup %none\n  453  )\";\n  454  \n  ...\n  456    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_WEBGPU_0));\n  457    EXPECT_THAT(getDiagnosticString(),\n  458:               HasSubstr(\"ControlBarrier: in WebGPU environment Execution Scope \"\n  459                          \"is limited to Workgroup\"));\n  460  }\n  461  \n  462: TEST_F(ValidateBarriers,\n  463:        OpControlBarrierWebGPUExecutionScopeWorkgroupNonComputeBad) {\n  464    const std::string body = R\"(\n  465: OpControlBarrier %workgroup %workgroup %acquire_release_workgroup\n  466  )\";\n  467  \n  ...\n  474  }\n  475  \n  476: TEST_F(ValidateBarriers, OpControlBarrierVulkanMemoryScopeSubgroup) {\n  477    const std::string body = R\"(\n  478: OpControlBarrier %subgroup %subgroup %none\n  479  )\";\n  480  \n  ...\n  483    EXPECT_THAT(\n  484        getDiagnosticString(),\n  485:       HasSubstr(\"ControlBarrier: in Vulkan 1.0 environment Memory Scope is \"\n  486                  \"limited to Device, Workgroup and Invocation\"));\n  487  }\n  488  \n  489: TEST_F(ValidateBarriers, OpControlBarrierVulkan1p1MemoryScopeSubgroup) {\n  490    const std::string body = R\"(\n  491: OpControlBarrier %subgroup %subgroup %none\n  492  )\";\n  493  \n  ...\n  496  }\n  497  \n  498: TEST_F(ValidateBarriers, OpControlBarrierVulkan1p1MemoryScopeCrossDevice) {\n  499    const std::string body = R\"(\n  500: OpControlBarrier %subgroup %cross_device %none\n  501  )\";\n  502  \n  ...\n  504    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  505    EXPECT_THAT(getDiagnosticString(),\n  506:               HasSubstr(\"ControlBarrier: in Vulkan environment, Memory Scope \"\n  507                          \"cannot be CrossDevice\"));\n  508  }\n  509  \n  510: TEST_F(ValidateBarriers, OpControlBarrierWebGPUMemoryScopeNonWorkgroup) {\n  511    const std::string body = R\"(\n  512: OpControlBarrier %workgroup %subgroup %acquire_release_workgroup\n  513  )\";\n  514  \n  ...\n  516    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_WEBGPU_0));\n  517    EXPECT_THAT(getDiagnosticString(),\n  518:               HasSubstr(\"ControlBarrier: in WebGPU environment Memory Scope is \"\n  519:                         \"limited to Workgroup for OpControlBarrier\"));\n  520  }\n  521  \n  522: TEST_F(ValidateBarriers, OpControlBarrierAcquireAndRelease) {\n  523    const std::string body = R\"(\n  524: OpControlBarrier %device %device %acquire_and_release_uniform\n  525  )\";\n  526  \n  ...\n  528    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  529    EXPECT_THAT(getDiagnosticString(),\n  530:               HasSubstr(\"ControlBarrier: Memory Semantics can have at most one \"\n  531                          \"of the following bits set: Acquire, Release, \"\n  532                          \"AcquireRelease or SequentiallyConsistent\"));\n  ...\n  535  // TODO(atgoo@github.com): the corresponding check fails Vulkan CTS,\n  536  // reenable once fixed.\n  537: TEST_F(ValidateBarriers, DISABLED_OpControlBarrierVulkanSubgroupStorageClass) {\n  538    const std::string body = R\"(\n  539: OpControlBarrier %workgroup %device %acquire_release_subgroup\n  540  )\";\n  541  \n  ...\n  545        getDiagnosticString(),\n  546        HasSubstr(\n  547:           \"ControlBarrier: expected Memory Semantics to include a \"\n  548            \"Vulkan-supported storage class if Memory Semantics is not None\"));\n  549  }\n  550  \n  551: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionFragment1p1) {\n  552    const std::string body = R\"(\n  553: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  554  )\";\n  555  \n  ...\n  559  }\n  560  \n  561: TEST_F(ValidateBarriers, OpControlBarrierWorkgroupExecutionFragment1p1) {\n  562    const std::string body = R\"(\n  563: OpControlBarrier %workgroup %workgroup %acquire_release\n  564  )\";\n  565  \n  ...\n  568    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  569    EXPECT_THAT(getDiagnosticString(),\n  570:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  571                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  572                          \"execution models\"));\n  573  }\n  574  \n  575: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionFragment1p0) {\n  576    const std::string body = R\"(\n  577: OpControlBarrier %subgroup %workgroup %acquire_release\n  578  )\";\n  579  \n  ...\n  583    EXPECT_THAT(\n  584        getDiagnosticString(),\n  585:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  586                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  587  }\n  588  \n  589: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionVertex1p1) {\n  590    const std::string body = R\"(\n  591: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  592  )\";\n  593  \n  ...\n  597  }\n  598  \n  599: TEST_F(ValidateBarriers, OpControlBarrierWorkgroupExecutionVertex1p1) {\n  600    const std::string body = R\"(\n  601: OpControlBarrier %workgroup %workgroup %acquire_release\n  602  )\";\n  603  \n  ...\n  606    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  607    EXPECT_THAT(getDiagnosticString(),\n  608:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  609                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  610                          \"execution models\"));\n  611  }\n  612  \n  613: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionVertex1p0) {\n  614    const std::string body = R\"(\n  615: OpControlBarrier %subgroup %workgroup %acquire_release\n  616  )\";\n  617  \n  ...\n  621    EXPECT_THAT(\n  622        getDiagnosticString(),\n  623:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  624                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  625  }\n  626  \n  627: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionGeometry1p1) {\n  628    const std::string body = R\"(\n  629: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  630  )\";\n  631  \n  ...\n  636  }\n  637  \n  638: TEST_F(ValidateBarriers, OpControlBarrierWorkgroupExecutionGeometry1p1) {\n  639    const std::string body = R\"(\n  640: OpControlBarrier %workgroup %workgroup %acquire_release\n  641  )\";\n  642  \n  ...\n  646    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  647    EXPECT_THAT(getDiagnosticString(),\n  648:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  649                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  650                          \"execution models\"));\n  651  }\n  652  \n  653: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionGeometry1p0) {\n  654    const std::string body = R\"(\n  655: OpControlBarrier %subgroup %workgroup %acquire_release\n  656  )\";\n  657  \n  ...\n  662    EXPECT_THAT(\n  663        getDiagnosticString(),\n  664:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  665                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  666  }\n  667  \n  668: TEST_F(ValidateBarriers,\n  669:        OpControlBarrierSubgroupExecutionTessellationEvaluation1p1) {\n  670    const std::string body = R\"(\n  671: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  672  )\";\n  673  \n  ...\n  678  }\n  679  \n  680: TEST_F(ValidateBarriers,\n  681:        OpControlBarrierWorkgroupExecutionTessellationEvaluation1p1) {\n  682    const std::string body = R\"(\n  683: OpControlBarrier %workgroup %workgroup %acquire_release\n  684  )\";\n  685  \n  ...\n  689    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  690    EXPECT_THAT(getDiagnosticString(),\n  691:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  692                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  693                          \"execution models\"));\n  694  }\n  695  \n  696: TEST_F(ValidateBarriers,\n  697:        OpControlBarrierSubgroupExecutionTessellationEvaluation1p0) {\n  698    const std::string body = R\"(\n  699: OpControlBarrier %subgroup %workgroup %acquire_release\n  700  )\";\n  701  \n  ...\n  706    EXPECT_THAT(\n  707        getDiagnosticString(),\n  708:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  709                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  710  }\n  711  \n  712: TEST_F(ValidateBarriers, OpMemoryBarrierSuccess) {\n  713    const std::string body = R\"(\n  714: OpMemoryBarrier %cross_device %acquire_release_uniform_workgroup\n  715: OpMemoryBarrier %device %uniform\n  716  )\";\n  717  \n  ...\n  720  }\n  721  \n  722: TEST_F(ValidateBarriers, OpMemoryBarrierKernelSuccess) {\n  723    const std::string body = R\"(\n  724: OpMemoryBarrier %cross_device %acquire_release_workgroup\n  725: OpMemoryBarrier %device %none\n  726  )\";\n  727  \n  ...\n  730  }\n  731  \n  732: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanSuccess) {\n  733    const std::string body = R\"(\n  734: OpMemoryBarrier %workgroup %acquire_release_uniform_workgroup\n  735  )\";\n  736  \n  ...\n  739  }\n  740  \n  741: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUImageMemorySuccess) {\n  742    const std::string body = R\"(\n  743: OpMemoryBarrier %workgroup %image_memory\n  744  )\";\n  745  \n  ...\n  748  }\n  749  \n  750: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUDeviceFailure) {\n  751    const std::string body = R\"(\n  752: OpMemoryBarrier %subgroup %image_memory\n  753  )\";\n  754  \n  ...\n  757    EXPECT_THAT(getDiagnosticString(),\n  758                HasSubstr(\"in WebGPU environment Memory Scope is limited to \"\n  759:                         \"Workgroup for OpMemoryBarrier\"));\n  760  }\n  761  \n  762: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUAcquireReleaseFailure) {\n  763    const std::string body = R\"(\n  764: OpMemoryBarrier %workgroup %acquire_release_uniform_workgroup\n  765  )\";\n  766  \n  ...\n  769    EXPECT_THAT(getDiagnosticString(),\n  770                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  771:                         \"OpMemoryBarrier\"));\n  772  }\n  773  \n  774: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPURelaxedFailure) {\n  775    const std::string body = R\"(\n  776: OpMemoryBarrier %workgroup %uniform_workgroup\n  777  )\";\n  778  \n  ...\n  781    EXPECT_THAT(getDiagnosticString(),\n  782                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  783:                         \"OpMemoryBarrier\"));\n  784  }\n  785  \n  786: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUAcquireFailure) {\n  787    const std::string body = R\"(\n  788: OpMemoryBarrier %workgroup %acquire_uniform_workgroup\n  789  )\";\n  790  \n  ...\n  793    EXPECT_THAT(getDiagnosticString(),\n  794                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  795:                         \"OpMemoryBarrier\"));\n  796  }\n  797  \n  798: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUReleaseFailure) {\n  799    const std::string body = R\"(\n  800: OpMemoryBarrier %workgroup %release_uniform_workgroup\n  801  )\";\n  802  \n  ...\n  805    EXPECT_THAT(getDiagnosticString(),\n  806                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  807:                         \"OpMemoryBarrier\"));\n  808  }\n  809  \n  810: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUUniformFailure) {\n  811    const std::string body = R\"(\n  812: OpMemoryBarrier %workgroup %uniform_image_memory\n  813  )\";\n  814  \n  ...\n  817    EXPECT_THAT(getDiagnosticString(),\n  818                HasSubstr(\"only ImageMemory may be set for Memory Semantics of \"\n  819:                         \"OpMemoryBarrier\"));\n  820  }\n  821  \n  822: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUWorkgroupNonComputeFailure) {\n  823    const std::string body = R\"(\n  824: OpMemoryBarrier %workgroup %image_memory\n  825  )\";\n  826  \n  ...\n  833  }\n  834  \n  835: TEST_F(ValidateBarriers, OpMemoryBarrierFloatMemoryScope) {\n  836    const std::string body = R\"(\n  837: OpMemoryBarrier %f32_1 %acquire_release_uniform_workgroup\n  838  )\";\n  839  \n  ...\n  841    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  842    EXPECT_THAT(getDiagnosticString(),\n  843:               HasSubstr(\"MemoryBarrier: expected scope to be a 32-bit int\"));\n  844  }\n  845  \n  846: TEST_F(ValidateBarriers, OpMemoryBarrierU64MemoryScope) {\n  847    const std::string body = R\"(\n  848: OpMemoryBarrier %u64_1 %acquire_release_uniform_workgroup\n  849  )\";\n  850  \n  ...\n  852    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  853    EXPECT_THAT(getDiagnosticString(),\n  854:               HasSubstr(\"MemoryBarrier: expected scope to be a 32-bit int\"));\n  855  }\n  856  \n  857: TEST_F(ValidateBarriers, OpMemoryBarrierFloatMemorySemantics) {\n  858    const std::string body = R\"(\n  859: OpMemoryBarrier %device %f32_0\n  860  )\";\n  861  \n  ...\n  864    EXPECT_THAT(\n  865        getDiagnosticString(),\n  866:       HasSubstr(\"MemoryBarrier: expected Memory Semantics to be a 32-bit int\"));\n  867  }\n  868  \n  869: TEST_F(ValidateBarriers, OpMemoryBarrierU64MemorySemantics) {\n  870    const std::string body = R\"(\n  871: OpMemoryBarrier %device %u64_0\n  872  )\";\n  873  \n  ...\n  876    EXPECT_THAT(\n  877        getDiagnosticString(),\n  878:       HasSubstr(\"MemoryBarrier: expected Memory Semantics to be a 32-bit int\"));\n  879  }\n  880  \n  881: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanMemoryScopeSubgroup) {\n  882    const std::string body = R\"(\n  883: OpMemoryBarrier %subgroup %acquire_release_uniform_workgroup\n  884  )\";\n  885  \n  ...\n  888    EXPECT_THAT(\n  889        getDiagnosticString(),\n  890:       HasSubstr(\"MemoryBarrier: in Vulkan 1.0 environment Memory Scope is \"\n  891                  \"limited to Device, Workgroup and Invocation\"));\n  892  }\n  893  \n  894: TEST_F(ValidateBarriers, OpMemoryBarrierVulkan1p1MemoryScopeSubgroup) {\n  895    const std::string body = R\"(\n  896: OpMemoryBarrier %subgroup %acquire_release_uniform_workgroup\n  897  )\";\n  898  \n  ...\n  901  }\n  902  \n  903: TEST_F(ValidateBarriers, OpMemoryBarrierAcquireAndRelease) {\n  904    const std::string body = R\"(\n  905: OpMemoryBarrier %device %acquire_and_release_uniform\n  906  )\";\n  907  \n  ...\n  909    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  910    EXPECT_THAT(getDiagnosticString(),\n  911:               HasSubstr(\"MemoryBarrier: Memory Semantics can have at most one \"\n  912                          \"of the following bits set: Acquire, Release, \"\n  913                          \"AcquireRelease or SequentiallyConsistent\"));\n  914  }\n  915  \n  916: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanMemorySemanticsNone) {\n  917    const std::string body = R\"(\n  918: OpMemoryBarrier %device %none\n  919  )\";\n  920  \n  ...\n  923    EXPECT_THAT(\n  924        getDiagnosticString(),\n  925:       HasSubstr(\"MemoryBarrier: Vulkan specification requires Memory Semantics \"\n  926                  \"to have one of the following bits set: Acquire, Release, \"\n  927                  \"AcquireRelease or SequentiallyConsistent\"));\n  928  }\n  929  \n  930: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanMemorySemanticsAcquire) {\n  931    const std::string body = R\"(\n  932: OpMemoryBarrier %device %acquire\n  933  )\";\n  934  \n  ...\n  936    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_0));\n  937    EXPECT_THAT(getDiagnosticString(),\n  938:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n  939                          \"Vulkan-supported storage class\"));\n  940  }\n  941  \n  942: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanSubgroupStorageClass) {\n  943    const std::string body = R\"(\n  944: OpMemoryBarrier %device %acquire_release_subgroup\n  945  )\";\n  946  \n  ...\n  948    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_0));\n  949    EXPECT_THAT(getDiagnosticString(),\n  950:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n  951                          \"Vulkan-supported storage class\"));\n  952  }\n  953  \n  954: TEST_F(ValidateBarriers, OpNamedBarrierInitializeSuccess) {\n  955    const std::string body = R\"(\n  956: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n  957  )\";\n  958  \n  ...\n  961  }\n  962  \n  963: TEST_F(ValidateBarriers, OpNamedBarrierInitializeWrongResultType) {\n  964    const std::string body = R\"(\n  965: %barrier = OpNamedBarrierInitialize %u32 %u32_4\n  966  )\";\n  967  \n  ...\n  970              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  971    EXPECT_THAT(getDiagnosticString(),\n  972:               HasSubstr(\"NamedBarrierInitialize: expected Result Type to be \"\n  973:                         \"OpTypeNamedBarrier\"));\n  974  }\n  975  \n  976: TEST_F(ValidateBarriers, OpNamedBarrierInitializeFloatSubgroupCount) {\n  977    const std::string body = R\"(\n  978: %barrier = OpNamedBarrierInitialize %named_barrier %f32_4\n  979  )\";\n  980  \n  ...\n  983              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  984    EXPECT_THAT(getDiagnosticString(),\n  985:               HasSubstr(\"NamedBarrierInitialize: expected Subgroup Count to be \"\n  986                          \"a 32-bit int\"));\n  987  }\n  988  \n  989: TEST_F(ValidateBarriers, OpNamedBarrierInitializeU64SubgroupCount) {\n  990    const std::string body = R\"(\n  991: %barrier = OpNamedBarrierInitialize %named_barrier %u64_4\n  992  )\";\n  993  \n  ...\n  996              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  997    EXPECT_THAT(getDiagnosticString(),\n  998:               HasSubstr(\"NamedBarrierInitialize: expected Subgroup Count to be \"\n  999                          \"a 32-bit int\"));\n 1000  }\n 1001  \n 1002: TEST_F(ValidateBarriers, OpMemoryNamedBarrierSuccess) {\n 1003    const std::string body = R\"(\n 1004: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1005: OpMemoryNamedBarrier %barrier %workgroup %acquire_release_workgroup\n 1006  )\";\n 1007  \n ....\n 1010  }\n 1011  \n 1012: TEST_F(ValidateBarriers, OpMemoryNamedBarrierNotNamedBarrier) {\n 1013    const std::string body = R\"(\n 1014: OpMemoryNamedBarrier %u32_1 %workgroup %acquire_release_workgroup\n 1015  )\";\n 1016  \n ....\n 1019              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n 1020    EXPECT_THAT(getDiagnosticString(),\n 1021:               HasSubstr(\"MemoryNamedBarrier: expected Named Barrier to be of \"\n 1022:                         \"type OpTypeNamedBarrier\"));\n 1023  }\n 1024  \n 1025: TEST_F(ValidateBarriers, OpMemoryNamedBarrierFloatMemoryScope) {\n 1026    const std::string body = R\"(\n 1027: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1028: OpMemoryNamedBarrier %barrier %f32_1 %acquire_release_workgroup\n 1029  )\";\n 1030  \n ....\n 1034    EXPECT_THAT(\n 1035        getDiagnosticString(),\n 1036:       HasSubstr(\"MemoryNamedBarrier: expected scope to be a 32-bit int\"));\n 1037  }\n 1038  \n 1039: TEST_F(ValidateBarriers, OpMemoryNamedBarrierFloatMemorySemantics) {\n 1040    const std::string body = R\"(\n 1041: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1042: OpMemoryNamedBarrier %barrier %workgroup %f32_0\n 1043  )\";\n 1044  \n ....\n 1049        getDiagnosticString(),\n 1050        HasSubstr(\n 1051:           \"MemoryNamedBarrier: expected Memory Semantics to be a 32-bit int\"));\n 1052  }\n 1053  \n 1054: TEST_F(ValidateBarriers, OpMemoryNamedBarrierAcquireAndRelease) {\n 1055    const std::string body = R\"(\n 1056: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1057: OpMemoryNamedBarrier %barrier %workgroup %acquire_and_release\n 1058  )\";\n 1059  \n ....\n 1062              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n 1063    EXPECT_THAT(getDiagnosticString(),\n 1064:               HasSubstr(\"MemoryNamedBarrier: Memory Semantics can have at most \"\n 1065                          \"one of the following bits set: Acquire, Release, \"\n 1066                          \"AcquireRelease or SequentiallyConsistent\"));\n 1067  }\n 1068  \n 1069: TEST_F(ValidateBarriers, TypeAsMemoryScope) {\n 1070    const std::string body = R\"(\n 1071: OpMemoryBarrier %u32 %u32_0\n 1072  )\";\n 1073  \n ....\n 1078  }\n 1079  \n 1080: TEST_F(ValidateBarriers,\n 1081:        OpControlBarrierVulkanMemoryModelBanSequentiallyConsistent) {\n 1082    const std::string text = R\"(\n 1083  OpCapability Shader\n ....\n 1094  %1 = OpFunction %2 None %5\n 1095  %7 = OpLabel\n 1096: OpControlBarrier %6 %6 %4\n 1097  OpReturn\n 1098  OpFunctionEnd\n ....\n 1107  }\n 1108  \n 1109: TEST_F(ValidateBarriers,\n 1110:        OpMemoryBarrierVulkanMemoryModelBanSequentiallyConsistent) {\n 1111    const std::string text = R\"(\n 1112  OpCapability Shader\n ....\n 1123  %1 = OpFunction %2 None %5\n 1124  %7 = OpLabel\n 1125: OpMemoryBarrier %6 %4\n 1126  OpReturn\n 1127  OpFunctionEnd\n ....\n 1136  }\n 1137  \n 1138: TEST_F(ValidateBarriers, OutputMemoryKHRRequireVulkanMemoryModelKHR) {\n 1139    const std::string text = R\"(\n 1140  OpCapability Shader\n ....\n 1149  %1 = OpFunction %2 None %5\n 1150  %7 = OpLabel\n 1151: OpControlBarrier %device %device %semantics\n 1152  OpReturn\n 1153  OpFunctionEnd\n ....\n 1157    EXPECT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n 1158    EXPECT_THAT(getDiagnosticString(),\n 1159:               HasSubstr(\"ControlBarrier: Memory Semantics OutputMemoryKHR \"\n 1160                          \"requires capability VulkanMemoryModelKHR\"));\n 1161  }\n 1162  \n 1163: TEST_F(ValidateBarriers, MakeAvailableKHRRequireVulkanMemoryModelKHR) {\n 1164    const std::string text = R\"(\n 1165  OpCapability Shader\n ....\n 1174  %1 = OpFunction %2 None %5\n 1175  %7 = OpLabel\n 1176: OpControlBarrier %device %device %semantics\n 1177  OpReturn\n 1178  OpFunctionEnd\n ....\n 1182    EXPECT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n 1183    EXPECT_THAT(getDiagnosticString(),\n 1184:               HasSubstr(\"ControlBarrier: Memory Semantics MakeAvailableKHR \"\n 1185                          \"requires capability VulkanMemoryModelKHR\"));\n 1186  }\n 1187  \n 1188: TEST_F(ValidateBarriers, MakeVisibleKHRRequireVulkanMemoryModelKHR) {\n 1189    const std::string text = R\"(\n 1190  OpCapability Shader\n ....\n 1199  %1 = OpFunction %2 None %5\n 1200  %7 = OpLabel\n 1201: OpControlBarrier %device %device %semantics\n 1202  OpReturn\n 1203  OpFunctionEnd\n ....\n 1207    EXPECT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n 1208    EXPECT_THAT(getDiagnosticString(),\n 1209:               HasSubstr(\"ControlBarrier: Memory Semantics MakeVisibleKHR \"\n 1210                          \"requires capability VulkanMemoryModelKHR\"));\n 1211  }\n 1212  \n 1213: TEST_F(ValidateBarriers, MakeAvailableKHRRequiresReleaseSemantics) {\n 1214    const std::string text = R\"(\n 1215  OpCapability Shader\n ....\n 1226  %func = OpFunction %void None %functy\n 1227  %1 = OpLabel\n 1228: OpControlBarrier %workgroup %workgroup %semantics\n 1229  OpReturn\n 1230  OpFunctionEnd\n ....\n 1236    EXPECT_THAT(\n 1237        getDiagnosticString(),\n 1238:       HasSubstr(\"ControlBarrier: MakeAvailableKHR Memory Semantics also \"\n 1239                  \"requires either Release or AcquireRelease Memory Semantics\"));\n 1240  }\n 1241  \n 1242: TEST_F(ValidateBarriers, MakeVisibleKHRRequiresAcquireSemantics) {\n 1243    const std::string text = R\"(\n 1244  OpCapability Shader\n ....\n 1255  %func = OpFunction %void None %functy\n 1256  %1 = OpLabel\n 1257: OpControlBarrier %workgroup %workgroup %semantics\n 1258  OpReturn\n 1259  OpFunctionEnd\n ....\n 1265    EXPECT_THAT(\n 1266        getDiagnosticString(),\n 1267:       HasSubstr(\"ControlBarrier: MakeVisibleKHR Memory Semantics also requires \"\n 1268                  \"either Acquire or AcquireRelease Memory Semantics\"));\n 1269  }\n 1270  \n 1271: TEST_F(ValidateBarriers, MakeAvailableKHRRequiresStorageSemantics) {\n 1272    const std::string text = R\"(\n 1273  OpCapability Shader\n ....\n 1284  %func = OpFunction %void None %functy\n 1285  %1 = OpLabel\n 1286: OpMemoryBarrier %workgroup %semantics\n 1287  OpReturn\n 1288  OpFunctionEnd\n ....\n 1293              ValidateInstructions(SPV_ENV_UNIVERSAL_1_3));\n 1294    EXPECT_THAT(getDiagnosticString(),\n 1295:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n 1296                          \"storage class\"));\n 1297  }\n 1298  \n 1299: TEST_F(ValidateBarriers, MakeVisibleKHRRequiresStorageSemantics) {\n 1300    const std::string text = R\"(\n 1301  OpCapability Shader\n ....\n 1312  %func = OpFunction %void None %functy\n 1313  %1 = OpLabel\n 1314: OpMemoryBarrier %workgroup %semantics\n 1315  OpReturn\n 1316  OpFunctionEnd\n ....\n 1321              ValidateInstructions(SPV_ENV_UNIVERSAL_1_3));\n 1322    EXPECT_THAT(getDiagnosticString(),\n 1323:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n 1324                          \"storage class\"));\n 1325  }\n 1326  \n 1327: TEST_F(ValidateBarriers, SemanticsSpecConstantShader) {\n 1328    const std::string spirv = R\"(\n 1329  OpCapability Shader\n ....\n 1340  %func = OpFunction %void None %voidfn\n 1341  %entry = OpLabel\n 1342: OpMemoryBarrier %workgroup %spec_const\n 1343  OpReturn\n 1344  OpFunctionEnd\n ....\n 1352  }\n 1353  \n 1354: TEST_F(ValidateBarriers, SemanticsSpecConstantKernel) {\n 1355    const std::string spirv = R\"(\n 1356  OpCapability Kernel\n ....\n 1366  %func = OpFunction %void None %voidfn\n 1367  %entry = OpLabel\n 1368: OpMemoryBarrier %workgroup %spec_const\n 1369  OpReturn\n 1370  OpFunctionEnd\n ....\n 1375  }\n 1376  \n 1377: TEST_F(ValidateBarriers, ScopeSpecConstantShader) {\n 1378    const std::string spirv = R\"(\n 1379  OpCapability Shader\n ....\n 1390  %func = OpFunction %void None %voidfn\n 1391  %entry = OpLabel\n 1392: OpMemoryBarrier %spec_const %relaxed\n 1393  OpReturn\n 1394  OpFunctionEnd\n ....\n 1402  }\n 1403  \n 1404: TEST_F(ValidateBarriers, ScopeSpecConstantKernel) {\n 1405    const std::string spirv = R\"(\n 1406  OpCapability Kernel\n ....\n 1416  %func = OpFunction %void None %voidfn\n 1417  %entry = OpLabel\n 1418: OpMemoryBarrier %spec_const %relaxed\n 1419  OpReturn\n 1420  OpFunctionEnd\n ....\n 1425  }\n 1426  \n 1427: TEST_F(ValidateBarriers, VulkanMemoryModelDeviceScopeBad) {\n 1428    const std::string text = R\"(\n 1429  OpCapability Shader\n ....\n 1440  %func = OpFunction %void None %functy\n 1441  %1 = OpLabel\n 1442: OpMemoryBarrier %device %semantics\n 1443  OpReturn\n 1444  OpFunctionEnd\n ....\n 1454  }\n 1455  \n 1456: TEST_F(ValidateBarriers, VulkanMemoryModelDeviceScopeGood) {\n 1457    const std::string text = R\"(\n 1458  OpCapability Shader\n ....\n 1470  %func = OpFunction %void None %functy\n 1471  %1 = OpLabel\n 1472: OpMemoryBarrier %device %semantics\n 1473  OpReturn\n 1474  OpFunctionEnd\n ....\n 1479  }\n 1480  \n 1481: TEST_F(ValidateBarriers, VolatileMemoryBarrier) {\n 1482    const std::string text = R\"(\n 1483  OpCapability Shader\n ....\n 1494  %func = OpFunction %void None %functy\n 1495  %1 = OpLabel\n 1496: OpMemoryBarrier %device %semantics\n 1497  OpReturn\n 1498  OpFunctionEnd\n ....\n 1506  }\n 1507  \n 1508: TEST_F(ValidateBarriers, VolatileControlBarrier) {\n 1509    const std::string text = R\"(\n 1510  OpCapability Shader\n ....\n 1521  %func = OpFunction %void None %functy\n 1522  %1 = OpLabel\n 1523: OpControlBarrier %device %device %semantics\n 1524  OpReturn\n 1525  OpFunctionEnd\n ....\n 1533  }\n 1534  \n 1535: TEST_F(ValidateBarriers, CooperativeMatrixSpecConstantVolatile) {\n 1536    const std::string text = R\"(\n 1537  OpCapability Shader\n ....\n 1550  %func = OpFunction %void None %functy\n 1551  %1 = OpLabel\n 1552: OpControlBarrier %device %device %semantics\n 1553  OpReturn\n 1554  OpFunctionEnd\n ....\n 1559  }\n 1560  \n 1561: TEST_F(ValidateBarriers, CooperativeMatrixNonConstantSemantics) {\n 1562    const std::string text = R\"(\n 1563  OpCapability Shader\n ....\n 1576  %func = OpFunction %void None %functy\n 1577  %1 = OpLabel\n 1578: OpControlBarrier %device %device %semantics\n 1579  OpReturn\n 1580  OpFunctionEnd\n ....\n 1588  }\n 1589  \n 1590: TEST_F(ValidateBarriers, OpMemoryBarrierShaderCallRayGenSuccess) {\n 1591    const std::string body =\n 1592:       \"OpMemoryBarrier %shadercall %release_uniform_workgroup\";\n 1593  \n 1594    CompileSuccessfully(GenerateShaderCodeImpl(body,\n ....\n 1611  }\n 1612  \n 1613: TEST_F(ValidateBarriers, OpMemoryBarrierShaderCallComputeFailure) {\n 1614    const std::string body =\n 1615:       \"OpMemoryBarrier %shadercall %release_uniform_workgroup\";\n 1616  \n 1617    CompileSuccessfully(GenerateShaderCodeImpl(body,\n ....\n 1636  }\n 1637  \n 1638: TEST_F(ValidateBarriers, OpControlBarrierShaderCallRayGenFailure) {\n 1639:   const std::string body = \"OpControlBarrier %shadercall %shadercall %none\";\n 1640  \n 1641    CompileSuccessfully(GenerateShaderCodeImpl(body,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_capability_test.cpp:\n   58  //\n   59  // OpCapability Kernel\n   60: // %1 = OpTypeNamedBarrier ; requires NamedBarrier\n   61  //\n   62  // So how does the test parameter capture which capabilities should cause\n   ..\n  196      \"MultiViewport\",\n  197      \"SubgroupDispatch\",\n  198:     \"NamedBarrier\",\n  199      \"PipeStorage\",\n  200      \"GroupNonUniform\",\n  ...\n  280      \"MultiViewport\",\n  281      \"SubgroupDispatch\",\n  282:     \"NamedBarrier\",\n  283      \"PipeStorage\",\n  284      \"GroupNonUniform\",\n  ...\n  725    \"LiteralSampler\",\n  726    \"SubgroupDispatch\",\n  727:   \"NamedBarrier\",\n  728    \"PipeStorage\"};\n  729    return *r;\n  ...\n  742    \"LiteralSampler\",\n  743    \"SubgroupDispatch\",\n  744:   \"NamedBarrier\",\n  745    \"PipeStorage\",\n  746    \"GroupNonUniform\",\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_id_test.cpp:\n 5290  %f      = OpFunction %void None %void_f\n 5291  %l      = OpLabel\n 5292:           OpMemoryBarrier %undef %memsem\n 5293            OpReturn\n 5294            OpFunctionEnd\n ....\n 5308  %f      = OpFunction %void None %void_f\n 5309  %l      = OpLabel\n 5310:           OpMemoryBarrier %scope %undef\n 5311            OpReturn\n 5312            OpFunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_type_unique_test.cpp:\n  185  }\n  186  \n  187: TEST_F(ValidateTypeUnique, duplicate_named_barrier) {\n  188    std::string str = R\"(\n  189  OpCapability Addresses\n  190  OpCapability Kernel\n  191  OpCapability Linkage\n  192: OpCapability NamedBarrier\n  193  OpMemoryModel Physical32 OpenCL\n  194: %nb = OpTypeNamedBarrier\n  195: %nb2 = OpTypeNamedBarrier\n  196  )\";\n  197    CompileSuccessfully(str.c_str(), SPV_ENV_UNIVERSAL_1_1);\n  198    ASSERT_EQ(kDuplicateTypeError, ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  199    EXPECT_THAT(getDiagnosticString(),\n  200:               HasSubstr(GetErrorString(SpvOpTypeNamedBarrier)));\n  201  }\n  202  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/tools/opt/opt.cpp:\n  506    --upgrade-memory-model\n  507                 Upgrades the Logical GLSL450 memory model to Logical VulkanKHR.\n  508:                Transforms memory, image, atomic and barrier operations to conform\n  509                 to that model's requirements.)\");\n  510    printf(R\"(\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/tools/sva/src/spirv.data.js:\n 2763        ]\n 2764      },\n 2765:     \"OpControlBarrier\": {\n 2766        \"opcode\": 224,\n 2767        \"operands\": [\n ....\n 2777        ]\n 2778      },\n 2779:     \"OpMemoryBarrier\": {\n 2780        \"opcode\": 225,\n 2781        \"operands\": [\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/utils/vscode/spirv.json:\n  166  \t\t},\n  167  \t\t\"ValueEnum_Capability\": {\n  168: \t\t\t\"match\": \"\\\\b(Matrix|Shader|Geometry|Tessellation|Addresses|Linkage|Kernel|Vector16|Float16Buffer|Float16|Float64|Int64|Int64Atomics|ImageBasic|ImageReadWrite|ImageMipmap|Pipes|Groups|DeviceEnqueue|LiteralSampler|AtomicStorage|Int16|TessellationPointSize|GeometryPointSize|ImageGatherExtended|StorageImageMultisample|UniformBufferArrayDynamicIndexing|SampledImageArrayDynamicIndexing|StorageBufferArrayDynamicIndexing|StorageImageArrayDynamicIndexing|ClipDistance|CullDistance|ImageCubeArray|SampleRateShading|ImageRect|SampledRect|GenericPointer|Int8|InputAttachment|SparseResidency|MinLod|Sampled1D|Image1D|SampledCubeArray|SampledBuffer|ImageBuffer|ImageMSArray|StorageImageExtendedFormats|ImageQuery|DerivativeControl|InterpolationFunction|TransformFeedback|GeometryStreams|StorageImageReadWithoutFormat|StorageImageWriteWithoutFormat|MultiViewport|SubgroupDispatch|NamedBarrier|PipeStorage|GroupNonUniform|GroupNonUniformVote|GroupNonUniformArithmetic|GroupNonUniformBallot|GroupNonUniformShuffle|GroupNonUniformShuffleRelative|GroupNonUniformClustered|GroupNonUniformQuad|ShaderLayer|ShaderViewportIndex|SubgroupBallotKHR|DrawParameters|SubgroupVoteKHR|StorageBuffer16BitAccess|StorageUniformBufferBlock16|UniformAndStorageBuffer16BitAccess|StorageUniform16|StoragePushConstant16|StorageInputOutput16|DeviceGroup|MultiView|VariablePointersStorageBuffer|VariablePointers|AtomicStorageOps|SampleMaskPostDepthCoverage|StorageBuffer8BitAccess|UniformAndStorageBuffer8BitAccess|StoragePushConstant8|DenormPreserve|DenormFlushToZero|SignedZeroInfNanPreserve|RoundingModeRTE|RoundingModeRTZ|Float16ImageAMD|ImageGatherBiasLodAMD|FragmentMaskAMD|StencilExportEXT|ImageReadWriteLodAMD|ShaderClockKHR|SampleMaskOverrideCoverageNV|GeometryShaderPassthroughNV|ShaderViewportIndexLayerEXT|ShaderViewportIndexLayerNV|ShaderViewportMaskNV|ShaderStereoViewNV|PerViewAttributesNV|FragmentFullyCoveredEXT|MeshShadingNV|ImageFootprintNV|FragmentBarycentricNV|ComputeDerivativeGroupQuadsNV|FragmentDensityEXT|ShadingRateNV|GroupNonUniformPartitionedNV|ShaderNonUniform|ShaderNonUniformEXT|RuntimeDescriptorArray|RuntimeDescriptorArrayEXT|InputAttachmentArrayDynamicIndexing|InputAttachmentArrayDynamicIndexingEXT|UniformTexelBufferArrayDynamicIndexing|UniformTexelBufferArrayDynamicIndexingEXT|StorageTexelBufferArrayDynamicIndexing|StorageTexelBufferArrayDynamicIndexingEXT|UniformBufferArrayNonUniformIndexing|UniformBufferArrayNonUniformIndexingEXT|SampledImageArrayNonUniformIndexing|SampledImageArrayNonUniformIndexingEXT|StorageBufferArrayNonUniformIndexing|StorageBufferArrayNonUniformIndexingEXT|StorageImageArrayNonUniformIndexing|StorageImageArrayNonUniformIndexingEXT|InputAttachmentArrayNonUniformIndexing|InputAttachmentArrayNonUniformIndexingEXT|UniformTexelBufferArrayNonUniformIndexing|UniformTexelBufferArrayNonUniformIndexingEXT|StorageTexelBufferArrayNonUniformIndexing|StorageTexelBufferArrayNonUniformIndexingEXT|RayTracingNV|VulkanMemoryModel|VulkanMemoryModelKHR|VulkanMemoryModelDeviceScope|VulkanMemoryModelDeviceScopeKHR|PhysicalStorageBufferAddresses|PhysicalStorageBufferAddressesEXT|ComputeDerivativeGroupLinearNV|CooperativeMatrixNV|FragmentShaderSampleInterlockEXT|FragmentShaderShadingRateInterlockEXT|ShaderSMBuiltinsNV|FragmentShaderPixelInterlockEXT|DemoteToHelperInvocationEXT|SubgroupShuffleINTEL|SubgroupBufferBlockIOINTEL|SubgroupImageBlockIOINTEL|SubgroupImageMediaBlockIOINTEL|IntegerFunctions2INTEL|SubgroupAvcMotionEstimationINTEL|SubgroupAvcMotionEstimationIntraINTEL|SubgroupAvcMotionEstimationChromaINTEL)\\\\b\",\n  169  \t\t\t\"name\": \"keyword.spirv\"\n  170  \t\t},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/utils/vscode/src/schema/schema.go:\n  309  \t\t\"OpEmitStreamVertex\": OpEmitStreamVertex,\n  310  \t\t\"OpEndStreamPrimitive\": OpEndStreamPrimitive,\n  311: \t\t\"OpControlBarrier\": OpControlBarrier,\n  312: \t\t\"OpMemoryBarrier\": OpMemoryBarrier,\n  313  \t\t\"OpAtomicLoad\": OpAtomicLoad,\n  314  \t\t\"OpAtomicStore\": OpAtomicStore,\n  ...\n  404  \t\t\"OpGetKernelLocalSizeForSubgroupCount\": OpGetKernelLocalSizeForSubgroupCount,\n  405  \t\t\"OpGetKernelMaxNumSubgroups\": OpGetKernelMaxNumSubgroups,\n  406: \t\t\"OpTypeNamedBarrier\": OpTypeNamedBarrier,\n  407: \t\t\"OpNamedBarrierInitialize\": OpNamedBarrierInitialize,\n  408: \t\t\"OpMemoryNamedBarrier\": OpMemoryNamedBarrier,\n  409  \t\t\"OpModuleProcessed\": OpModuleProcessed,\n  410  \t\t\"OpExecutionModeId\": OpExecutionModeId,\n  ...\n 5850  \t\t},\n 5851  \t}\n 5852: \tOpControlBarrier = &Opcode {\n 5853: \t\tOpname:   \"OpControlBarrier\",\n 5854: \t\tClass:    \"Barrier\",\n 5855  \t\tOpcode:   224,\n 5856  \t\tOperands: []Operand {\n ....\n 5872  \t\t},\n 5873  \t}\n 5874: \tOpMemoryBarrier = &Opcode {\n 5875: \t\tOpname:   \"OpMemoryBarrier\",\n 5876: \t\tClass:    \"Barrier\",\n 5877  \t\tOpcode:   225,\n 5878  \t\tOperands: []Operand {\n ....\n 8700  \t\t},\n 8701  \t}\n 8702: \tOpTypeNamedBarrier = &Opcode {\n 8703: \t\tOpname:   \"OpTypeNamedBarrier\",\n 8704  \t\tClass:    \"Type-Declaration\",\n 8705  \t\tOpcode:   327,\n ....\n 8712  \t\t},\n 8713  \t}\n 8714: \tOpNamedBarrierInitialize = &Opcode {\n 8715: \t\tOpname:   \"OpNamedBarrierInitialize\",\n 8716: \t\tClass:    \"Barrier\",\n 8717  \t\tOpcode:   328,\n 8718  \t\tOperands: []Operand {\n ....\n 8734  \t\t},\n 8735  \t}\n 8736: \tOpMemoryNamedBarrier = &Opcode {\n 8737: \t\tOpname:   \"OpMemoryNamedBarrier\",\n 8738: \t\tClass:    \"Barrier\",\n 8739  \t\tOpcode:   329,\n 8740  \t\tOperands: []Operand {\n 8741  \t\t\tOperand {\n 8742  \t\t\t\tKind:       OperandKindIdRef,\n 8743: \t\t\t\tName:       \"'Named Barrier'\",\n 8744  \t\t\t\tQuantifier: \"\",\n 8745  \t\t\t}, \n ....\n 23836  \t\t\t},\n 23837  \t\t\tEnumerant{\n 23838: \t\t\t\tEnumerant:    \"NamedBarrier\",\n 23839  \t\t\t\tValue:        59,\n 23840  \t\t\t\tCapabilities: []string{\"Kernel\",},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv/spirv.h:\n  659      SpvCapabilityMultiViewport = 57,\n  660      SpvCapabilitySubgroupDispatch = 58,\n  661:     SpvCapabilityNamedBarrier = 59,\n  662      SpvCapabilityPipeStorage = 60,\n  663      SpvCapabilityGroupNonUniform = 61,\n  ...\n  925      SpvOpEmitStreamVertex = 220,\n  926      SpvOpEndStreamPrimitive = 221,\n  927:     SpvOpControlBarrier = 224,\n  928:     SpvOpMemoryBarrier = 225,\n  929      SpvOpAtomicLoad = 227,\n  930      SpvOpAtomicStore = 228,\n  ...\n 1020      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n 1021      SpvOpGetKernelMaxNumSubgroups = 326,\n 1022:     SpvOpTypeNamedBarrier = 327,\n 1023:     SpvOpNamedBarrierInitialize = 328,\n 1024:     SpvOpMemoryNamedBarrier = 329,\n 1025      SpvOpModuleProcessed = 330,\n 1026      SpvOpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/include/vulkan/vulkan.hpp:\n  110  #endif\n  111  \n  112: // Windows defines MemoryBarrier which is deprecated and collides\n  113: // with the VULKAN_HPP_NAMESPACE::MemoryBarrier struct.\n  114: #if defined(MemoryBarrier)\n  115:   #undef MemoryBarrier\n  116  #endif\n  117  \n  ...\n 1580      }\n 1581  \n 1582:     void vkCmdPipelineBarrier( VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers ) const VULKAN_HPP_NOEXCEPT\n 1583      {\n 1584:       return ::vkCmdPipelineBarrier( commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers );\n 1585      }\n 1586  \n ....\n 1814      }\n 1815  \n 1816:     void vkCmdWaitEvents( VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers ) const VULKAN_HPP_NOEXCEPT\n 1817      {\n 1818:       return ::vkCmdWaitEvents( commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers );\n 1819      }\n 1820  \n ....\n 7980      eCommandBufferBeginInfo = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,\n 7981      eRenderPassBeginInfo = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,\n 7982:     eBufferMemoryBarrier = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,\n 7983:     eImageMemoryBarrier = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,\n 7984:     eMemoryBarrier = VK_STRUCTURE_TYPE_MEMORY_BARRIER,\n 7985      eLoaderInstanceCreateInfo = VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,\n 7986      eLoaderDeviceCreateInfo = VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,\n ....\n 8544        case StructureType::eCommandBufferBeginInfo : return \"CommandBufferBeginInfo\";\n 8545        case StructureType::eRenderPassBeginInfo : return \"RenderPassBeginInfo\";\n 8546:       case StructureType::eBufferMemoryBarrier : return \"BufferMemoryBarrier\";\n 8547:       case StructureType::eImageMemoryBarrier : return \"ImageMemoryBarrier\";\n 8548:       case StructureType::eMemoryBarrier : return \"MemoryBarrier\";\n 8549        case StructureType::eLoaderInstanceCreateInfo : return \"LoaderInstanceCreateInfo\";\n 8550        case StructureType::eLoaderDeviceCreateInfo : return \"LoaderDeviceCreateInfo\";\n ....\n 21775    static_assert( std::is_standard_layout<BufferImageCopy>::value, \"struct wrapper is not a standard layout!\" );\n 21776  \n 21777:   struct BufferMemoryBarrier\n 21778    {\n 21779      static const bool allowDuplicate = false;\n 21780:     static VULKAN_HPP_CONST_OR_CONSTEXPR StructureType structureType = StructureType::eBufferMemoryBarrier;\n 21781  \n 21782  #if !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 21783:     VULKAN_HPP_CONSTEXPR BufferMemoryBarrier(VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ = {}, VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ = {}, uint32_t srcQueueFamilyIndex_ = {}, uint32_t dstQueueFamilyIndex_ = {}, VULKAN_HPP_NAMESPACE::Buffer buffer_ = {}, VULKAN_HPP_NAMESPACE::DeviceSize offset_ = {}, VULKAN_HPP_NAMESPACE::DeviceSize size_ = {}) VULKAN_HPP_NOEXCEPT\n 21784      : srcAccessMask( srcAccessMask_ ), dstAccessMask( dstAccessMask_ ), srcQueueFamilyIndex( srcQueueFamilyIndex_ ), dstQueueFamilyIndex( dstQueueFamilyIndex_ ), buffer( buffer_ ), offset( offset_ ), size( size_ )\n 21785      {}\n 21786  \n 21787:     BufferMemoryBarrier( VkBufferMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 21788      {\n 21789        *this = rhs;\n .....\n 21791  #endif // !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 21792  \n 21793:     BufferMemoryBarrier & operator=( VkBufferMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 21794      {\n 21795:       *this = *reinterpret_cast<VULKAN_HPP_NAMESPACE::BufferMemoryBarrier const *>( &rhs );\n 21796        return *this;\n 21797      }\n 21798  \n 21799:     BufferMemoryBarrier & operator=( BufferMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 21800      {\n 21801      pNext = rhs.pNext;\n .....\n 21811      }\n 21812  \n 21813:     BufferMemoryBarrier & setPNext( const void* pNext_ ) VULKAN_HPP_NOEXCEPT\n 21814      {\n 21815        pNext = pNext_;\n .....\n 21817      }\n 21818  \n 21819:     BufferMemoryBarrier & setSrcAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 21820      {\n 21821        srcAccessMask = srcAccessMask_;\n .....\n 21823      }\n 21824  \n 21825:     BufferMemoryBarrier & setDstAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 21826      {\n 21827        dstAccessMask = dstAccessMask_;\n .....\n 21829      }\n 21830  \n 21831:     BufferMemoryBarrier & setSrcQueueFamilyIndex( uint32_t srcQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 21832      {\n 21833        srcQueueFamilyIndex = srcQueueFamilyIndex_;\n .....\n 21835      }\n 21836  \n 21837:     BufferMemoryBarrier & setDstQueueFamilyIndex( uint32_t dstQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 21838      {\n 21839        dstQueueFamilyIndex = dstQueueFamilyIndex_;\n .....\n 21841      }\n 21842  \n 21843:     BufferMemoryBarrier & setBuffer( VULKAN_HPP_NAMESPACE::Buffer buffer_ ) VULKAN_HPP_NOEXCEPT\n 21844      {\n 21845        buffer = buffer_;\n .....\n 21847      }\n 21848  \n 21849:     BufferMemoryBarrier & setOffset( VULKAN_HPP_NAMESPACE::DeviceSize offset_ ) VULKAN_HPP_NOEXCEPT\n 21850      {\n 21851        offset = offset_;\n .....\n 21853      }\n 21854  \n 21855:     BufferMemoryBarrier & setSize( VULKAN_HPP_NAMESPACE::DeviceSize size_ ) VULKAN_HPP_NOEXCEPT\n 21856      {\n 21857        size = size_;\n .....\n 21860  \n 21861  \n 21862:     operator VkBufferMemoryBarrier const&() const VULKAN_HPP_NOEXCEPT\n 21863      {\n 21864:       return *reinterpret_cast<const VkBufferMemoryBarrier*>( this );\n 21865      }\n 21866  \n 21867:     operator VkBufferMemoryBarrier &() VULKAN_HPP_NOEXCEPT\n 21868      {\n 21869:       return *reinterpret_cast<VkBufferMemoryBarrier*>( this );\n 21870      }\n 21871  \n 21872  \n 21873  #if defined(VULKAN_HPP_HAS_SPACESHIP_OPERATOR)\n 21874:     auto operator<=>( BufferMemoryBarrier const& ) const = default;\n 21875  #else\n 21876:     bool operator==( BufferMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 21877      {\n 21878        return ( sType == rhs.sType )\n .....\n 21887      }\n 21888  \n 21889:     bool operator!=( BufferMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 21890      {\n 21891        return !operator==( rhs );\n .....\n 21896  \n 21897    public:\n 21898:     const VULKAN_HPP_NAMESPACE::StructureType sType = StructureType::eBufferMemoryBarrier;\n 21899      const void* pNext = {};\n 21900      VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask = {};\n .....\n 21907  \n 21908    };\n 21909:   static_assert( sizeof( BufferMemoryBarrier ) == sizeof( VkBufferMemoryBarrier ), \"struct and wrapper have different size!\" );\n 21910:   static_assert( std::is_standard_layout<BufferMemoryBarrier>::value, \"struct wrapper is not a standard layout!\" );\n 21911  \n 21912    template <>\n 21913:   struct CppType<StructureType, StructureType::eBufferMemoryBarrier>\n 21914    {\n 21915:     using Type = BufferMemoryBarrier;\n 21916    };\n 21917  \n .....\n 31214    };\n 31215  \n 31216:   struct MemoryBarrier\n 31217    {\n 31218      static const bool allowDuplicate = false;\n 31219:     static VULKAN_HPP_CONST_OR_CONSTEXPR StructureType structureType = StructureType::eMemoryBarrier;\n 31220  \n 31221  #if !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31222:     VULKAN_HPP_CONSTEXPR MemoryBarrier(VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ = {}, VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ = {}) VULKAN_HPP_NOEXCEPT\n 31223      : srcAccessMask( srcAccessMask_ ), dstAccessMask( dstAccessMask_ )\n 31224      {}\n 31225  \n 31226:     MemoryBarrier( VkMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31227      {\n 31228        *this = rhs;\n .....\n 31230  #endif // !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31231  \n 31232:     MemoryBarrier & operator=( VkMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31233      {\n 31234:       *this = *reinterpret_cast<VULKAN_HPP_NAMESPACE::MemoryBarrier const *>( &rhs );\n 31235        return *this;\n 31236      }\n 31237  \n 31238:     MemoryBarrier & operator=( MemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31239      {\n 31240      pNext = rhs.pNext;\n .....\n 31245      }\n 31246  \n 31247:     MemoryBarrier & setPNext( const void* pNext_ ) VULKAN_HPP_NOEXCEPT\n 31248      {\n 31249        pNext = pNext_;\n .....\n 31251      }\n 31252  \n 31253:     MemoryBarrier & setSrcAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31254      {\n 31255        srcAccessMask = srcAccessMask_;\n .....\n 31257      }\n 31258  \n 31259:     MemoryBarrier & setDstAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31260      {\n 31261        dstAccessMask = dstAccessMask_;\n .....\n 31264  \n 31265  \n 31266:     operator VkMemoryBarrier const&() const VULKAN_HPP_NOEXCEPT\n 31267      {\n 31268:       return *reinterpret_cast<const VkMemoryBarrier*>( this );\n 31269      }\n 31270  \n 31271:     operator VkMemoryBarrier &() VULKAN_HPP_NOEXCEPT\n 31272      {\n 31273:       return *reinterpret_cast<VkMemoryBarrier*>( this );\n 31274      }\n 31275  \n 31276  \n 31277  #if defined(VULKAN_HPP_HAS_SPACESHIP_OPERATOR)\n 31278:     auto operator<=>( MemoryBarrier const& ) const = default;\n 31279  #else\n 31280:     bool operator==( MemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31281      {\n 31282        return ( sType == rhs.sType )\n .....\n 31286      }\n 31287  \n 31288:     bool operator!=( MemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31289      {\n 31290        return !operator==( rhs );\n .....\n 31295  \n 31296    public:\n 31297:     const VULKAN_HPP_NAMESPACE::StructureType sType = StructureType::eMemoryBarrier;\n 31298      const void* pNext = {};\n 31299      VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask = {};\n .....\n 31301  \n 31302    };\n 31303:   static_assert( sizeof( MemoryBarrier ) == sizeof( VkMemoryBarrier ), \"struct and wrapper have different size!\" );\n 31304:   static_assert( std::is_standard_layout<MemoryBarrier>::value, \"struct wrapper is not a standard layout!\" );\n 31305  \n 31306    template <>\n 31307:   struct CppType<StructureType, StructureType::eMemoryBarrier>\n 31308    {\n 31309:     using Type = MemoryBarrier;\n 31310    };\n 31311  \n 31312:   struct ImageMemoryBarrier\n 31313    {\n 31314      static const bool allowDuplicate = false;\n 31315:     static VULKAN_HPP_CONST_OR_CONSTEXPR StructureType structureType = StructureType::eImageMemoryBarrier;\n 31316  \n 31317  #if !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31318:     VULKAN_HPP_CONSTEXPR ImageMemoryBarrier(VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ = {}, VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ = {}, VULKAN_HPP_NAMESPACE::ImageLayout oldLayout_ = VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined, VULKAN_HPP_NAMESPACE::ImageLayout newLayout_ = VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined, uint32_t srcQueueFamilyIndex_ = {}, uint32_t dstQueueFamilyIndex_ = {}, VULKAN_HPP_NAMESPACE::Image image_ = {}, VULKAN_HPP_NAMESPACE::ImageSubresourceRange subresourceRange_ = {}) VULKAN_HPP_NOEXCEPT\n 31319      : srcAccessMask( srcAccessMask_ ), dstAccessMask( dstAccessMask_ ), oldLayout( oldLayout_ ), newLayout( newLayout_ ), srcQueueFamilyIndex( srcQueueFamilyIndex_ ), dstQueueFamilyIndex( dstQueueFamilyIndex_ ), image( image_ ), subresourceRange( subresourceRange_ )\n 31320      {}\n 31321  \n 31322:     ImageMemoryBarrier( VkImageMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31323      {\n 31324        *this = rhs;\n .....\n 31326  #endif // !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31327  \n 31328:     ImageMemoryBarrier & operator=( VkImageMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31329      {\n 31330:       *this = *reinterpret_cast<VULKAN_HPP_NAMESPACE::ImageMemoryBarrier const *>( &rhs );\n 31331        return *this;\n 31332      }\n 31333  \n 31334:     ImageMemoryBarrier & operator=( ImageMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31335      {\n 31336      pNext = rhs.pNext;\n .....\n 31347      }\n 31348  \n 31349:     ImageMemoryBarrier & setPNext( const void* pNext_ ) VULKAN_HPP_NOEXCEPT\n 31350      {\n 31351        pNext = pNext_;\n .....\n 31353      }\n 31354  \n 31355:     ImageMemoryBarrier & setSrcAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31356      {\n 31357        srcAccessMask = srcAccessMask_;\n .....\n 31359      }\n 31360  \n 31361:     ImageMemoryBarrier & setDstAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31362      {\n 31363        dstAccessMask = dstAccessMask_;\n .....\n 31365      }\n 31366  \n 31367:     ImageMemoryBarrier & setOldLayout( VULKAN_HPP_NAMESPACE::ImageLayout oldLayout_ ) VULKAN_HPP_NOEXCEPT\n 31368      {\n 31369        oldLayout = oldLayout_;\n .....\n 31371      }\n 31372  \n 31373:     ImageMemoryBarrier & setNewLayout( VULKAN_HPP_NAMESPACE::ImageLayout newLayout_ ) VULKAN_HPP_NOEXCEPT\n 31374      {\n 31375        newLayout = newLayout_;\n .....\n 31377      }\n 31378  \n 31379:     ImageMemoryBarrier & setSrcQueueFamilyIndex( uint32_t srcQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 31380      {\n 31381        srcQueueFamilyIndex = srcQueueFamilyIndex_;\n .....\n 31383      }\n 31384  \n 31385:     ImageMemoryBarrier & setDstQueueFamilyIndex( uint32_t dstQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 31386      {\n 31387        dstQueueFamilyIndex = dstQueueFamilyIndex_;\n .....\n 31389      }\n 31390  \n 31391:     ImageMemoryBarrier & setImage( VULKAN_HPP_NAMESPACE::Image image_ ) VULKAN_HPP_NOEXCEPT\n 31392      {\n 31393        image = image_;\n .....\n 31395      }\n 31396  \n 31397:     ImageMemoryBarrier & setSubresourceRange( VULKAN_HPP_NAMESPACE::ImageSubresourceRange const & subresourceRange_ ) VULKAN_HPP_NOEXCEPT\n 31398      {\n 31399        subresourceRange = subresourceRange_;\n .....\n 31402  \n 31403  \n 31404:     operator VkImageMemoryBarrier const&() const VULKAN_HPP_NOEXCEPT\n 31405      {\n 31406:       return *reinterpret_cast<const VkImageMemoryBarrier*>( this );\n 31407      }\n 31408  \n 31409:     operator VkImageMemoryBarrier &() VULKAN_HPP_NOEXCEPT\n 31410      {\n 31411:       return *reinterpret_cast<VkImageMemoryBarrier*>( this );\n 31412      }\n 31413  \n 31414  \n 31415  #if defined(VULKAN_HPP_HAS_SPACESHIP_OPERATOR)\n 31416:     auto operator<=>( ImageMemoryBarrier const& ) const = default;\n 31417  #else\n 31418:     bool operator==( ImageMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31419      {\n 31420        return ( sType == rhs.sType )\n .....\n 31430      }\n 31431  \n 31432:     bool operator!=( ImageMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31433      {\n 31434        return !operator==( rhs );\n .....\n 31439  \n 31440    public:\n 31441:     const VULKAN_HPP_NAMESPACE::StructureType sType = StructureType::eImageMemoryBarrier;\n 31442      const void* pNext = {};\n 31443      VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask = {};\n .....\n 31451  \n 31452    };\n 31453:   static_assert( sizeof( ImageMemoryBarrier ) == sizeof( VkImageMemoryBarrier ), \"struct and wrapper have different size!\" );\n 31454:   static_assert( std::is_standard_layout<ImageMemoryBarrier>::value, \"struct wrapper is not a standard layout!\" );\n 31455  \n 31456    template <>\n 31457:   struct CppType<StructureType, StructureType::eImageMemoryBarrier>\n 31458    {\n 31459:     using Type = ImageMemoryBarrier;\n 31460    };\n 31461  \n .....\n 33044  \n 33045      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33046:     void pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33047  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 33048      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33049:     void pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33050  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n 33051  \n .....\n 33270  \n 33271      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33272:     void waitEvents( uint32_t eventCount, const VULKAN_HPP_NAMESPACE::Event* pEvents, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33273  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 33274      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33275:     void waitEvents( ArrayProxy<const VULKAN_HPP_NAMESPACE::Event> const &events, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33276  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n 33277  \n .....\n 78767  \n 78768    template<typename Dispatch>\n 78769:   VULKAN_HPP_INLINE void CommandBuffer::pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d) const VULKAN_HPP_NOEXCEPT\n 78770    {\n 78771:     d.vkCmdPipelineBarrier( m_commandBuffer, static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), static_cast<VkDependencyFlags>( dependencyFlags ), memoryBarrierCount, reinterpret_cast<const VkMemoryBarrier*>( pMemoryBarriers ), bufferMemoryBarrierCount, reinterpret_cast<const VkBufferMemoryBarrier*>( pBufferMemoryBarriers ), imageMemoryBarrierCount, reinterpret_cast<const VkImageMemoryBarrier*>( pImageMemoryBarriers ) );\n 78772    }\n 78773  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 78774    template<typename Dispatch>\n 78775:   VULKAN_HPP_INLINE void CommandBuffer::pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d ) const VULKAN_HPP_NOEXCEPT\n 78776    {\n 78777:     d.vkCmdPipelineBarrier( m_commandBuffer, static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), static_cast<VkDependencyFlags>( dependencyFlags ), memoryBarriers.size() , reinterpret_cast<const VkMemoryBarrier*>( memoryBarriers.data() ), bufferMemoryBarriers.size() , reinterpret_cast<const VkBufferMemoryBarrier*>( bufferMemoryBarriers.data() ), imageMemoryBarriers.size() , reinterpret_cast<const VkImageMemoryBarrier*>( imageMemoryBarriers.data() ) );\n 78778    }\n 78779  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n .....\n 79443  \n 79444    template<typename Dispatch>\n 79445:   VULKAN_HPP_INLINE void CommandBuffer::waitEvents( uint32_t eventCount, const VULKAN_HPP_NAMESPACE::Event* pEvents, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d) const VULKAN_HPP_NOEXCEPT\n 79446    {\n 79447:     d.vkCmdWaitEvents( m_commandBuffer, eventCount, reinterpret_cast<const VkEvent*>( pEvents ), static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), memoryBarrierCount, reinterpret_cast<const VkMemoryBarrier*>( pMemoryBarriers ), bufferMemoryBarrierCount, reinterpret_cast<const VkBufferMemoryBarrier*>( pBufferMemoryBarriers ), imageMemoryBarrierCount, reinterpret_cast<const VkImageMemoryBarrier*>( pImageMemoryBarriers ) );\n 79448    }\n 79449  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 79450    template<typename Dispatch>\n 79451:   VULKAN_HPP_INLINE void CommandBuffer::waitEvents( ArrayProxy<const VULKAN_HPP_NAMESPACE::Event> const &events, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d ) const VULKAN_HPP_NOEXCEPT\n 79452    {\n 79453:     d.vkCmdWaitEvents( m_commandBuffer, events.size() , reinterpret_cast<const VkEvent*>( events.data() ), static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), memoryBarriers.size() , reinterpret_cast<const VkMemoryBarrier*>( memoryBarriers.data() ), bufferMemoryBarriers.size() , reinterpret_cast<const VkBufferMemoryBarrier*>( bufferMemoryBarriers.data() ), imageMemoryBarriers.size() , reinterpret_cast<const VkImageMemoryBarrier*>( imageMemoryBarriers.data() ) );\n 79454    }\n 79455  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n .....\n 87599    template <> struct StructExtends<RenderPassSampleLocationsBeginInfoEXT, RenderPassBeginInfo>{ enum { value = true }; };\n 87600    template <> struct StructExtends<RenderPassTransformBeginInfoQCOM, RenderPassBeginInfo>{ enum { value = true }; };\n 87601:   template <> struct StructExtends<SampleLocationsInfoEXT, ImageMemoryBarrier>{ enum { value = true }; };\n 87602    template <> struct StructExtends<SamplerCustomBorderColorCreateInfoEXT, SamplerCreateInfo>{ enum { value = true }; };\n 87603    template <> struct StructExtends<SamplerReductionModeCreateInfo, SamplerCreateInfo>{ enum { value = true }; };\n .....\n 87830      PFN_vkCmdNextSubpass2 vkCmdNextSubpass2 = 0;\n 87831      PFN_vkCmdNextSubpass2KHR vkCmdNextSubpass2KHR = 0;\n 87832:     PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier = 0;\n 87833      PFN_vkCmdPreprocessGeneratedCommandsNV vkCmdPreprocessGeneratedCommandsNV = 0;\n 87834      PFN_vkCmdPushConstants vkCmdPushConstants = 0;\n .....\n 88571        vkCmdNextSubpass2 = PFN_vkCmdNextSubpass2( vkGetInstanceProcAddr( instance, \"vkCmdNextSubpass2\" ) );\n 88572        vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2KHR( vkGetInstanceProcAddr( instance, \"vkCmdNextSubpass2KHR\" ) );\n 88573:       vkCmdPipelineBarrier = PFN_vkCmdPipelineBarrier( vkGetInstanceProcAddr( instance, \"vkCmdPipelineBarrier\" ) );\n 88574        vkCmdPreprocessGeneratedCommandsNV = PFN_vkCmdPreprocessGeneratedCommandsNV( vkGetInstanceProcAddr( instance, \"vkCmdPreprocessGeneratedCommandsNV\" ) );\n 88575        vkCmdPushConstants = PFN_vkCmdPushConstants( vkGetInstanceProcAddr( instance, \"vkCmdPushConstants\" ) );\n .....\n 88993        vkCmdNextSubpass2 = PFN_vkCmdNextSubpass2( vkGetDeviceProcAddr( device, \"vkCmdNextSubpass2\" ) );\n 88994        vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2KHR( vkGetDeviceProcAddr( device, \"vkCmdNextSubpass2KHR\" ) );\n 88995:       vkCmdPipelineBarrier = PFN_vkCmdPipelineBarrier( vkGetDeviceProcAddr( device, \"vkCmdPipelineBarrier\" ) );\n 88996        vkCmdPreprocessGeneratedCommandsNV = PFN_vkCmdPreprocessGeneratedCommandsNV( vkGetDeviceProcAddr( device, \"vkCmdPreprocessGeneratedCommandsNV\" ) );\n 88997        vkCmdPushConstants = PFN_vkCmdPushConstants( vkGetDeviceProcAddr( device, \"vkCmdPushConstants\" ) );\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/include/vulkan/vulkan_core.h:\n  195      VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,\n  196      VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,\n  197:     VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,\n  198:     VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,\n  199:     VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,\n  200      VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,\n  201      VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,\n  ...\n 2000  } VkBaseOutStructure;\n 2001  \n 2002: typedef struct VkBufferMemoryBarrier {\n 2003      VkStructureType    sType;\n 2004      const void*        pNext;\n ....\n 2010      VkDeviceSize       offset;\n 2011      VkDeviceSize       size;\n 2012: } VkBufferMemoryBarrier;\n 2013  \n 2014  typedef struct VkDispatchIndirectCommand {\n ....\n 2041  } VkImageSubresourceRange;\n 2042  \n 2043: typedef struct VkImageMemoryBarrier {\n 2044      VkStructureType            sType;\n 2045      const void*                pNext;\n ....\n 2052      VkImage                    image;\n 2053      VkImageSubresourceRange    subresourceRange;\n 2054: } VkImageMemoryBarrier;\n 2055  \n 2056: typedef struct VkMemoryBarrier {\n 2057      VkStructureType    sType;\n 2058      const void*        pNext;\n 2059      VkAccessFlags      srcAccessMask;\n 2060      VkAccessFlags      dstAccessMask;\n 2061: } VkMemoryBarrier;\n 2062  \n 2063  typedef void* (VKAPI_PTR *PFN_vkAllocationFunction)(\n ....\n 3203  typedef void (VKAPI_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);\n 3204  typedef void (VKAPI_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);\n 3205: typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);\n 3206: typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);\n 3207  typedef void (VKAPI_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);\n 3208  typedef void (VKAPI_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);\n ....\n 3937      VkPipelineStageFlags                        srcStageMask,\n 3938      VkPipelineStageFlags                        dstStageMask,\n 3939:     uint32_t                                    memoryBarrierCount,\n 3940:     const VkMemoryBarrier*                      pMemoryBarriers,\n 3941:     uint32_t                                    bufferMemoryBarrierCount,\n 3942:     const VkBufferMemoryBarrier*                pBufferMemoryBarriers,\n 3943:     uint32_t                                    imageMemoryBarrierCount,\n 3944:     const VkImageMemoryBarrier*                 pImageMemoryBarriers);\n 3945  \n 3946: VKAPI_ATTR void VKAPI_CALL vkCmdPipelineBarrier(\n 3947      VkCommandBuffer                             commandBuffer,\n 3948      VkPipelineStageFlags                        srcStageMask,\n 3949      VkPipelineStageFlags                        dstStageMask,\n 3950      VkDependencyFlags                           dependencyFlags,\n 3951:     uint32_t                                    memoryBarrierCount,\n 3952:     const VkMemoryBarrier*                      pMemoryBarriers,\n 3953:     uint32_t                                    bufferMemoryBarrierCount,\n 3954:     const VkBufferMemoryBarrier*                pBufferMemoryBarriers,\n 3955:     uint32_t                                    imageMemoryBarrierCount,\n 3956:     const VkImageMemoryBarrier*                 pImageMemoryBarriers);\n 3957  \n 3958  VKAPI_ATTR void VKAPI_CALL vkCmdBeginQuery(\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/registry/validusage.json:\n 2973          {\n 2974            \"vuid\": \"VUID-vkCmdWaitEvents-srcAccessMask-02815\",\n 2975:           \"text\": \" The <code>srcAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2976          },\n 2977          {\n 2978            \"vuid\": \"VUID-vkCmdWaitEvents-dstAccessMask-02816\",\n 2979:           \"text\": \" The <code>dstAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2980          },\n 2981          {\n 2982:           \"vuid\": \"VUID-vkCmdWaitEvents-pBufferMemoryBarriers-02817\",\n 2983:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2984          },\n 2985          {\n 2986:           \"vuid\": \"VUID-vkCmdWaitEvents-pBufferMemoryBarriers-02818\",\n 2987:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2988          },\n 2989          {\n 2990:           \"vuid\": \"VUID-vkCmdWaitEvents-pImageMemoryBarriers-02819\",\n 2991:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2992          },\n 2993          {\n 2994:           \"vuid\": \"VUID-vkCmdWaitEvents-pImageMemoryBarriers-02820\",\n 2995:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2996          },\n 2997          {\n ....\n 3005          {\n 3006            \"vuid\": \"VUID-vkCmdWaitEvents-srcQueueFamilyIndex-02803\",\n 3007:           \"text\": \" The <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members of any element of <code>pBufferMemoryBarriers</code> or <code>pImageMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be equal\"\n 3008          },\n 3009          {\n ....\n 3032          },\n 3033          {\n 3034:           \"vuid\": \"VUID-vkCmdWaitEvents-pMemoryBarriers-parameter\",\n 3035:           \"text\": \" If <code>memoryBarrierCount</code> is not <code>0</code>, <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>memoryBarrierCount</code> valid <a href=\\\"#VkMemoryBarrier\\\">VkMemoryBarrier</a> structures\"\n 3036          },\n 3037          {\n 3038:           \"vuid\": \"VUID-vkCmdWaitEvents-pBufferMemoryBarriers-parameter\",\n 3039:           \"text\": \" If <code>bufferMemoryBarrierCount</code> is not <code>0</code>, <code>pBufferMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>bufferMemoryBarrierCount</code> valid <a href=\\\"#VkBufferMemoryBarrier\\\">VkBufferMemoryBarrier</a> structures\"\n 3040          },\n 3041          {\n 3042:           \"vuid\": \"VUID-vkCmdWaitEvents-pImageMemoryBarriers-parameter\",\n 3043:           \"text\": \" If <code>imageMemoryBarrierCount</code> is not <code>0</code>, <code>pImageMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>imageMemoryBarrierCount</code> valid <a href=\\\"#VkImageMemoryBarrier\\\">VkImageMemoryBarrier</a> structures\"\n 3044          },\n 3045          {\n ....\n 3125        ]\n 3126      },\n 3127:     \"vkCmdPipelineBarrier\": {\n 3128        \"core\": [\n 3129          {\n 3130:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04090\",\n 3131            \"text\": \" If the <a href=\\\"#features-geometryShader\\\">geometry shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code>\"\n 3132          },\n 3133          {\n 3134:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04091\",\n 3135            \"text\": \" If the <a href=\\\"#features-tessellationShader\\\">tessellation shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or <code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>\"\n 3136          },\n 3137          {\n 3138:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-4098\",\n 3139            \"text\": \" Any pipeline stage included in pname:srcStageMask <strong class=\\\"purple\\\">must</strong> be supported by the capabilities of the queue family specified by the <code>queueFamilyIndex</code> member of the <a href=\\\"#VkCommandPoolCreateInfo\\\">VkCommandPoolCreateInfo</a> structure that was used to create the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from, as specified in the <a href=\\\"#synchronization-pipeline-stages-supported\\\">table of supported pipeline stages</a>\"\n 3140          },\n 3141          {\n 3142:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04090\",\n 3143            \"text\": \" If the <a href=\\\"#features-geometryShader\\\">geometry shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code>\"\n 3144          },\n 3145          {\n 3146:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04091\",\n 3147            \"text\": \" If the <a href=\\\"#features-tessellationShader\\\">tessellation shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or <code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>\"\n 3148          },\n 3149          {\n 3150:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-4098\",\n 3151            \"text\": \" Any pipeline stage included in pname:dstStageMask <strong class=\\\"purple\\\">must</strong> be supported by the capabilities of the queue family specified by the <code>queueFamilyIndex</code> member of the <a href=\\\"#VkCommandPoolCreateInfo\\\">VkCommandPoolCreateInfo</a> structure that was used to create the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from, as specified in the <a href=\\\"#synchronization-pipeline-stages-supported\\\">table of supported pipeline stages</a>\"\n 3152          },\n 3153          {\n 3154:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcAccessMask-02815\",\n 3155:           \"text\": \" The <code>srcAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3156          },\n 3157          {\n 3158:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstAccessMask-02816\",\n 3159:           \"text\": \" The <code>dstAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3160          },\n 3161          {\n 3162:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-02817\",\n 3163:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3164          },\n 3165          {\n 3166:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-02818\",\n 3167:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3168          },\n 3169          {\n 3170:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-02819\",\n 3171:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3172          },\n 3173          {\n 3174:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-02820\",\n 3175:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3176          },\n 3177          {\n 3178:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pDependencies-02285\",\n 3179:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the render pass <strong class=\\\"purple\\\">must</strong> have been created with at least one <a href=\\\"#VkSubpassDependency\\\">VkSubpassDependency</a> instance in <code>VkRenderPassCreateInfo</code>::<code>pDependencies</code> that expresses a dependency from the current subpass to itself, with <a href=\\\"#synchronization-dependencies-scopes\\\">synchronization scopes</a> and <a href=\\\"#synchronization-dependencies-access-scopes\\\">access scopes</a> that are all supersets of the scopes defined in this command\"\n 3180          },\n 3181          {\n 3182:           \"vuid\": \"VUID-vkCmdPipelineBarrier-bufferMemoryBarrierCount-01178\",\n 3183:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, it <strong class=\\\"purple\\\">must</strong> not include any buffer memory barriers\"\n 3184          },\n 3185          {\n 3186:           \"vuid\": \"VUID-vkCmdPipelineBarrier-image-04073\",\n 3187:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the <code>image</code> member of any image memory barrier included in this command <strong class=\\\"purple\\\">must</strong> be an attachment used in the current subpass both as an input attachment, and as either a color or depth/stencil attachment\"\n 3188          },\n 3189          {\n 3190:           \"vuid\": \"VUID-vkCmdPipelineBarrier-oldLayout-01181\",\n 3191:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the <code>oldLayout</code> and <code>newLayout</code> members of any image memory barrier included in this command <strong class=\\\"purple\\\">must</strong> be equal\"\n 3192          },\n 3193          {\n 3194:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcQueueFamilyIndex-01182\",\n 3195:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members of any image memory barrier included in this command <strong class=\\\"purple\\\">must</strong> be equal\"\n 3196          },\n 3197          {\n 3198:           \"vuid\": \"VUID-vkCmdPipelineBarrier-commandBuffer-parameter\",\n 3199            \"text\": \" <code>commandBuffer</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkCommandBuffer\\\">VkCommandBuffer</a> handle\"\n 3200          },\n 3201          {\n 3202:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-parameter\",\n 3203            \"text\": \" <code>srcStageMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkPipelineStageFlagBits\\\">VkPipelineStageFlagBits</a> values\"\n 3204          },\n 3205          {\n 3206:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-requiredbitmask\",\n 3207            \"text\": \" <code>srcStageMask</code> <strong class=\\\"purple\\\">must</strong> not be <code>0</code>\"\n 3208          },\n 3209          {\n 3210:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-parameter\",\n 3211            \"text\": \" <code>dstStageMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkPipelineStageFlagBits\\\">VkPipelineStageFlagBits</a> values\"\n 3212          },\n 3213          {\n 3214:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-requiredbitmask\",\n 3215            \"text\": \" <code>dstStageMask</code> <strong class=\\\"purple\\\">must</strong> not be <code>0</code>\"\n 3216          },\n 3217          {\n 3218:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dependencyFlags-parameter\",\n 3219            \"text\": \" <code>dependencyFlags</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkDependencyFlagBits\\\">VkDependencyFlagBits</a> values\"\n 3220          },\n 3221          {\n 3222:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pMemoryBarriers-parameter\",\n 3223:           \"text\": \" If <code>memoryBarrierCount</code> is not <code>0</code>, <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>memoryBarrierCount</code> valid <a href=\\\"#VkMemoryBarrier\\\">VkMemoryBarrier</a> structures\"\n 3224          },\n 3225          {\n 3226:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-parameter\",\n 3227:           \"text\": \" If <code>bufferMemoryBarrierCount</code> is not <code>0</code>, <code>pBufferMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>bufferMemoryBarrierCount</code> valid <a href=\\\"#VkBufferMemoryBarrier\\\">VkBufferMemoryBarrier</a> structures\"\n 3228          },\n 3229          {\n 3230:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-parameter\",\n 3231:           \"text\": \" If <code>imageMemoryBarrierCount</code> is not <code>0</code>, <code>pImageMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>imageMemoryBarrierCount</code> valid <a href=\\\"#VkImageMemoryBarrier\\\">VkImageMemoryBarrier</a> structures\"\n 3232          },\n 3233          {\n 3234:           \"vuid\": \"VUID-vkCmdPipelineBarrier-commandBuffer-recording\",\n 3235            \"text\": \" <code>commandBuffer</code> <strong class=\\\"purple\\\">must</strong> be in the <a href=\\\"#commandbuffers-lifecycle\\\">recording state</a>\"\n 3236          },\n 3237          {\n 3238:           \"vuid\": \"VUID-vkCmdPipelineBarrier-commandBuffer-cmdpool\",\n 3239            \"text\": \" The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class=\\\"purple\\\">must</strong> support transfer, graphics, or compute operations\"\n 3240          }\n ....\n 3242        \"(VK_EXT_conditional_rendering)\": [\n 3243          {\n 3244:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04092\",\n 3245            \"text\": \" If the <a href=\\\"#features-conditionalRendering\\\">conditional rendering</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT</code>\"\n 3246          },\n 3247          {\n 3248:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04092\",\n 3249            \"text\": \" If the <a href=\\\"#features-conditionalRendering\\\">conditional rendering</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT</code>\"\n 3250          }\n ....\n 3252        \"(VK_EXT_fragment_density_map)\": [\n 3253          {\n 3254:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04093\",\n 3255            \"text\": \" If the <a href=\\\"#features-fragmentDensityMap\\\">fragment density map</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code>\"\n 3256          },\n 3257          {\n 3258:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04093\",\n 3259            \"text\": \" If the <a href=\\\"#features-fragmentDensityMap\\\">fragment density map</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code>\"\n 3260          }\n ....\n 3262        \"(VK_EXT_transform_feedback)\": [\n 3263          {\n 3264:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04094\",\n 3265            \"text\": \" If the <a href=\\\"#features-transformFeedback\\\">transform feedback</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code>\"\n 3266          },\n 3267          {\n 3268:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04094\",\n 3269            \"text\": \" If the <a href=\\\"#features-transformFeedback\\\">transform feedback</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code>\"\n 3270          }\n ....\n 3272        \"(VK_NV_mesh_shader)\": [\n 3273          {\n 3274:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04095\",\n 3275            \"text\": \" If the <a href=\\\"#features-meshShader\\\">mesh shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code>\"\n 3276          },\n 3277          {\n 3278:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04096\",\n 3279            \"text\": \" If the <a href=\\\"#features-taskShader\\\">task shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code>\"\n 3280          },\n 3281          {\n 3282:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04095\",\n 3283            \"text\": \" If the <a href=\\\"#features-meshShader\\\">mesh shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code>\"\n 3284          },\n 3285          {\n 3286:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04096\",\n 3287            \"text\": \" If the <a href=\\\"#features-taskShader\\\">task shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code>\"\n 3288          }\n ....\n 3290        \"(VK_NV_shading_rate_image)\": [\n 3291          {\n 3292:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04097\",\n 3293            \"text\": \" If the <a href=\\\"#features-shadingRateImage\\\">shading rate image</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV</code>\"\n 3294          },\n 3295          {\n 3296:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04097\",\n 3297            \"text\": \" If the <a href=\\\"#features-shadingRateImage\\\">shading rate image</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV</code>\"\n 3298          }\n ....\n 3300        \"(VK_VERSION_1_1,VK_KHR_multiview)\": [\n 3301          {\n 3302:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dependencyFlags-01186\",\n 3303:           \"text\": \" If fname:vkCmdPipelineBarrier is called outside of a render pass instance, <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code> <strong class=\\\"purple\\\">must</strong> not be included in the dependency flags\"\n 3304          }\n 3305        ]\n 3306      },\n 3307:     \"VkMemoryBarrier\": {\n 3308        \"core\": [\n 3309          {\n 3310:           \"vuid\": \"VUID-VkMemoryBarrier-sType-sType\",\n 3311:           \"text\": \" <code>sType</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_BARRIER</code>\"\n 3312          },\n 3313          {\n 3314:           \"vuid\": \"VUID-VkMemoryBarrier-pNext-pNext\",\n 3315            \"text\": \" <code>pNext</code> <strong class=\\\"purple\\\">must</strong> be <code>NULL</code>\"\n 3316          },\n 3317          {\n 3318:           \"vuid\": \"VUID-VkMemoryBarrier-srcAccessMask-parameter\",\n 3319            \"text\": \" <code>srcAccessMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkAccessFlagBits\\\">VkAccessFlagBits</a> values\"\n 3320          },\n 3321          {\n 3322:           \"vuid\": \"VUID-VkMemoryBarrier-dstAccessMask-parameter\",\n 3323            \"text\": \" <code>dstAccessMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkAccessFlagBits\\\">VkAccessFlagBits</a> values\"\n 3324          }\n 3325        ]\n 3326      },\n 3327:     \"VkBufferMemoryBarrier\": {\n 3328        \"core\": [\n 3329          {\n 3330:           \"vuid\": \"VUID-VkBufferMemoryBarrier-offset-01187\",\n 3331            \"text\": \" <code>offset</code> <strong class=\\\"purple\\\">must</strong> be less than the size of <code>buffer</code>\"\n 3332          },\n 3333          {\n 3334:           \"vuid\": \"VUID-VkBufferMemoryBarrier-size-01188\",\n 3335            \"text\": \" If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class=\\\"purple\\\">must</strong> be greater than <code>0</code>\"\n 3336          },\n 3337          {\n 3338:           \"vuid\": \"VUID-VkBufferMemoryBarrier-size-01189\",\n 3339            \"text\": \" If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class=\\\"purple\\\">must</strong> be less than or equal to than the size of <code>buffer</code> minus <code>offset</code>\"\n 3340          },\n 3341          {\n 3342:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-01931\",\n 3343            \"text\": \" If <code>buffer</code> is non-sparse then it <strong class=\\\"purple\\\">must</strong> be bound completely and contiguously to a single <code>VkDeviceMemory</code> object\"\n 3344          },\n 3345          {\n 3346:           \"vuid\": \"VUID-VkBufferMemoryBarrier-sType-sType\",\n 3347:           \"text\": \" <code>sType</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER</code>\"\n 3348          },\n 3349          {\n 3350:           \"vuid\": \"VUID-VkBufferMemoryBarrier-pNext-pNext\",\n 3351            \"text\": \" <code>pNext</code> <strong class=\\\"purple\\\">must</strong> be <code>NULL</code>\"\n 3352          },\n 3353          {\n 3354:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-parameter\",\n 3355            \"text\": \" <code>buffer</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkBuffer\\\">VkBuffer</a> handle\"\n 3356          }\n ....\n 3358        \"!(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3359          {\n 3360:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-04086\",\n 3361            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be valid queue families\"\n 3362          },\n 3363          {\n 3364:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-01190\",\n 3365            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3366          }\n ....\n 3368        \"(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3369          {\n 3370:           \"vuid\": \"VUID-VkBufferMemoryBarrier-srcQueueFamilyIndex-04087\",\n 3371            \"text\": \" If <code>srcQueueFamilyIndex</code> is not equal to <code>dstQueueFamilyIndex</code>, at least one <strong class=\\\"purple\\\">must</strong> not be a special queue family reserved for external memory ownership transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3372          },\n 3373          {\n 3374:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-04088\",\n 3375            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, and one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> is a special queue family values reserved for external memory transfers, the other <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3376          },\n 3377          {\n 3378:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-04089\",\n 3379            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be valid queue families, or one of the special queue family values reserved for external memory transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3380          },\n 3381          {\n 3382:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-01191\",\n 3383            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, at least one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3384          }\n 3385        ]\n 3386      },\n 3387:     \"VkImageMemoryBarrier\": {\n 3388        \"core\": [\n 3389          {\n 3390:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01486\",\n 3391            \"text\": \" <code>subresourceRange.baseMipLevel</code> <strong class=\\\"purple\\\">must</strong> be less than the <code>mipLevels</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3392          },\n 3393          {\n 3394:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01724\",\n 3395            \"text\": \" If <code>subresourceRange.levelCount</code> is not <code>VK_REMAINING_MIP_LEVELS</code>, <span class=\\\"eq\\\"><code>subresourceRange.baseMipLevel</code> &#43; <code>subresourceRange.levelCount</code></span> <strong class=\\\"purple\\\">must</strong> be less than or equal to the <code>mipLevels</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3396          },\n 3397          {\n 3398:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01488\",\n 3399            \"text\": \" <code>subresourceRange.baseArrayLayer</code> <strong class=\\\"purple\\\">must</strong> be less than the <code>arrayLayers</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3400          },\n 3401          {\n 3402:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01725\",\n 3403            \"text\": \" If <code>subresourceRange.layerCount</code> is not <code>VK_REMAINING_ARRAY_LAYERS</code>, <span class=\\\"eq\\\"><code>subresourceRange.baseArrayLayer</code> &#43; <code>subresourceRange.layerCount</code></span> <strong class=\\\"purple\\\">must</strong> be less than or equal to the <code>arrayLayers</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3404          },\n 3405          {\n 3406:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01932\",\n 3407            \"text\": \" If <code>image</code> is non-sparse then it <strong class=\\\"purple\\\">must</strong> be bound completely and contiguously to a single <code>VkDeviceMemory</code> object\"\n 3408          },\n 3409          {\n 3410:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01208\",\n 3411            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code> set\"\n 3412          },\n 3413          {\n 3414:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01209\",\n 3415            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3416          },\n 3417          {\n 3418:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01210\",\n 3419            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3420          },\n 3421          {\n 3422:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01211\",\n 3423            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_SAMPLED_BIT</code> or <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set\"\n 3424          },\n 3425          {\n 3426:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01212\",\n 3427            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> set\"\n 3428          },\n 3429          {\n 3430:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01213\",\n 3431            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> set\"\n 3432          },\n 3433          {\n 3434:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01197\",\n 3435:           \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, <code>oldLayout</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or the current layout of the image subresources affected by the barrier\"\n 3436          },\n 3437          {\n 3438:           \"vuid\": \"VUID-VkImageMemoryBarrier-newLayout-01198\",\n 3439            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, <code>newLayout</code> <strong class=\\\"purple\\\">must</strong> not be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or <code>VK_IMAGE_LAYOUT_PREINITIALIZED</code>\"\n 3440          },\n 3441          {\n 3442:           \"vuid\": \"VUID-VkImageMemoryBarrier-sType-sType\",\n 3443:           \"text\": \" <code>sType</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</code>\"\n 3444          },\n 3445          {\n 3446:           \"vuid\": \"VUID-VkImageMemoryBarrier-pNext-pNext\",\n 3447            \"text\": \" <code>pNext</code> <strong class=\\\"purple\\\">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href=\\\"#VkSampleLocationsInfoEXT\\\">VkSampleLocationsInfoEXT</a>\"\n 3448          },\n 3449          {\n 3450:           \"vuid\": \"VUID-VkImageMemoryBarrier-sType-unique\",\n 3451            \"text\": \" The <code>sType</code> value of each struct in the <code>pNext</code> chain <strong class=\\\"purple\\\">must</strong> be unique\"\n 3452          },\n 3453          {\n 3454:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-parameter\",\n 3455            \"text\": \" <code>oldLayout</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImageLayout\\\">VkImageLayout</a> value\"\n 3456          },\n 3457          {\n 3458:           \"vuid\": \"VUID-VkImageMemoryBarrier-newLayout-parameter\",\n 3459            \"text\": \" <code>newLayout</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImageLayout\\\">VkImageLayout</a> value\"\n 3460          },\n 3461          {\n 3462:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-parameter\",\n 3463            \"text\": \" <code>image</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImage\\\">VkImage</a> handle\"\n 3464          },\n 3465          {\n 3466:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n 3467            \"text\": \" <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImageSubresourceRange\\\">VkImageSubresourceRange</a> structure\"\n 3468          }\n ....\n 3470        \"(VK_VERSION_1_1,VK_KHR_maintenance2)\": [\n 3471          {\n 3472:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01658\",\n 3473            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3474          },\n 3475          {\n 3476:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01659\",\n 3477            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3478          }\n ....\n 3480        \"(VK_VERSION_1_2,VK_EXT_separate_depth_stencil_layouts)\": [\n 3481          {\n 3482:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04065\",\n 3483            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with at least one of <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, or <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set\"\n 3484          },\n 3485          {\n 3486:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04066\",\n 3487            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3488          },\n 3489          {\n 3490:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04067\",\n 3491            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with at least one of <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, or <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set\"\n 3492          },\n 3493          {\n 3494:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04068\",\n 3495            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3496          }\n ....\n 3498        \"(VK_NV_shading_rate_image)\": [\n 3499          {\n 3500:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-02088\",\n 3501            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code> set\"\n 3502          }\n ....\n 3504        \"!(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)\": [\n 3505          {\n 3506:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-02902\",\n 3507            \"text\": \" If <code>image</code> has a color format, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_IMAGE_ASPECT_COLOR_BIT</code>\"\n 3508          }\n ....\n 3510        \"(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)\": [\n 3511          {\n 3512:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01671\",\n 3513            \"text\": \" If <code>image</code> has a single-plane color format or is not <em>disjoint</em>, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_IMAGE_ASPECT_COLOR_BIT</code>\"\n 3514          },\n 3515          {\n 3516:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01672\",\n 3517            \"text\": \" If <code>image</code> has a multi-planar format and the image is <em>disjoint</em>, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include either at least one of <code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, and <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>; or <strong class=\\\"purple\\\">must</strong> include <code>VK_IMAGE_ASPECT_COLOR_BIT</code>\"\n 3518          },\n 3519          {\n 3520:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01673\",\n 3521            \"text\": \" If <code>image</code> has a multi-planar format with only two planes, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> not include <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>\"\n 3522          }\n ....\n 3524        \"!(VK_VERSION_1_2,VK_KHR_separate_depth_stencil_layouts)\": [\n 3525          {\n 3526:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01207\",\n 3527            \"text\": \" If <code>image</code> has a depth/stencil format with both depth and stencil components, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>\"\n 3528          }\n ....\n 3530        \"(VK_VERSION_1_2,VK_KHR_separate_depth_stencil_layouts)\": [\n 3531          {\n 3532:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-03319\",\n 3533            \"text\": \" If <code>image</code> has a depth/stencil format with both depth and stencil and the <a href=\\\"#features-separateDepthStencilLayouts\\\">separateDepthStencilLayouts</a> feature is enabled, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include either or both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>\"\n 3534          },\n 3535          {\n 3536:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-03320\",\n 3537            \"text\": \" If <code>image</code> has a depth/stencil format with both depth and stencil and the <a href=\\\"#features-separateDepthStencilLayouts\\\">separateDepthStencilLayouts</a> feature is not enabled, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>\"\n 3538          }\n ....\n 3540        \"!(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3541          {\n 3542:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-04069\",\n 3543            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be valid queue families\"\n 3544          },\n 3545          {\n 3546:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01199\",\n 3547            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3548          }\n ....\n 3550        \"(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3551          {\n 3552:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04070\",\n 3553            \"text\": \" If <code>srcQueueFamilyIndex</code> is not equal to <code>dstQueueFamilyIndex</code>, at least one <strong class=\\\"purple\\\">must</strong> not be a special queue family reserved for external memory ownership transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3554          },\n 3555          {\n 3556:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-04071\",\n 3557            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, and one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> is a special queue family values reserved for external memory transfers, the other <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3558          },\n 3559          {\n 3560:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-04072\",\n 3561            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be valid queue families, or one of the special queue family values reserved for external memory transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3562          },\n 3563          {\n 3564:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01381\",\n 3565            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, at least one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3566          }\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/registry/vk.xml:\n  888              <member><type>uint32_t</type>               <name>layerCount</name></member>\n  889          </type>\n  890:         <type category=\"struct\" name=\"VkMemoryBarrier\">\n  891:             <member values=\"VK_STRUCTURE_TYPE_MEMORY_BARRIER\"><type>VkStructureType</type> <name>sType</name></member>\n  892              <member>const <type>void</type>*            <name>pNext</name></member>\n  893              <member optional=\"true\"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>\n  894              <member optional=\"true\"><type>VkAccessFlags</type>          <name>dstAccessMask</name><comment>Memory accesses from the destination of the dependency to synchronize</comment></member>\n  895          </type>\n  896:         <type category=\"struct\" name=\"VkBufferMemoryBarrier\">\n  897:             <member values=\"VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER\"><type>VkStructureType</type> <name>sType</name></member>\n  898              <member>const <type>void</type>*            <name>pNext</name></member>\n  899              <member noautovalidity=\"true\"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>\n  ...\n  905              <member><type>VkDeviceSize</type>           <name>size</name><comment>Amount of bytes to sync</comment></member>\n  906          </type>\n  907:         <type category=\"struct\" name=\"VkImageMemoryBarrier\">\n  908:             <member values=\"VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER\"><type>VkStructureType</type> <name>sType</name></member>\n  909              <member>const <type>void</type>*            <name>pNext</name></member>\n  910              <member noautovalidity=\"true\"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>\n  ...\n 2906              <member><type>float</type>                            <name>y</name></member>\n 2907          </type>\n 2908:         <type category=\"struct\" name=\"VkSampleLocationsInfoEXT\" structextends=\"VkImageMemoryBarrier\">\n 2909              <member values=\"VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT\"><type>VkStructureType</type> <name>sType</name></member>\n 2910              <member>const <type>void</type>*                            <name>pNext</name></member>\n ....\n 5365          <enum value=\"42\"    name=\"VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO\"/>\n 5366          <enum value=\"43\"    name=\"VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO\"/>\n 5367:         <enum value=\"44\"    name=\"VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER\"/>\n 5368:         <enum value=\"45\"    name=\"VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER\"/>\n 5369:         <enum value=\"46\"    name=\"VK_STRUCTURE_TYPE_MEMORY_BARRIER\"/>\n 5370          <enum value=\"47\"    name=\"VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO\" comment=\"Reserved for internal use by the loader, layers, and ICDs\"/>\n 5371          <enum value=\"48\"    name=\"VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO\" comment=\"Reserved for internal use by the loader, layers, and ICDs\"/>\n ....\n 7097              <param><type>VkPipelineStageFlags</type> <name>srcStageMask</name></param>\n 7098              <param><type>VkPipelineStageFlags</type> <name>dstStageMask</name></param>\n 7099:             <param optional=\"true\"><type>uint32_t</type> <name>memoryBarrierCount</name></param>\n 7100:             <param len=\"memoryBarrierCount\">const <type>VkMemoryBarrier</type>* <name>pMemoryBarriers</name></param>\n 7101:             <param optional=\"true\"><type>uint32_t</type> <name>bufferMemoryBarrierCount</name></param>\n 7102:             <param len=\"bufferMemoryBarrierCount\">const <type>VkBufferMemoryBarrier</type>* <name>pBufferMemoryBarriers</name></param>\n 7103:             <param optional=\"true\"><type>uint32_t</type> <name>imageMemoryBarrierCount</name></param>\n 7104:             <param len=\"imageMemoryBarrierCount\">const <type>VkImageMemoryBarrier</type>* <name>pImageMemoryBarriers</name></param>\n 7105          </command>\n 7106          <command queues=\"transfer,graphics,compute\" renderpass=\"both\" cmdbufferlevel=\"primary,secondary\">\n 7107:             <proto><type>void</type> <name>vkCmdPipelineBarrier</name></proto>\n 7108              <param externsync=\"true\"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>\n 7109              <param><type>VkPipelineStageFlags</type> <name>srcStageMask</name></param>\n 7110              <param><type>VkPipelineStageFlags</type> <name>dstStageMask</name></param>\n 7111              <param optional=\"true\"><type>VkDependencyFlags</type> <name>dependencyFlags</name></param>\n 7112:             <param optional=\"true\"><type>uint32_t</type> <name>memoryBarrierCount</name></param>\n 7113:             <param len=\"memoryBarrierCount\">const <type>VkMemoryBarrier</type>* <name>pMemoryBarriers</name></param>\n 7114:             <param optional=\"true\"><type>uint32_t</type> <name>bufferMemoryBarrierCount</name></param>\n 7115:             <param len=\"bufferMemoryBarrierCount\">const <type>VkBufferMemoryBarrier</type>* <name>pBufferMemoryBarriers</name></param>\n 7116:             <param optional=\"true\"><type>uint32_t</type> <name>imageMemoryBarrierCount</name></param>\n 7117:             <param len=\"imageMemoryBarrierCount\">const <type>VkImageMemoryBarrier</type>* <name>pImageMemoryBarriers</name></param>\n 7118          </command>\n 7119          <command queues=\"graphics,compute\" renderpass=\"both\" cmdbufferlevel=\"primary,secondary\">\n ....\n 8899              <type name=\"VkBaseInStructure\"/>\n 8900              <type name=\"VkBaseOutStructure\"/>\n 8901:             <type name=\"VkBufferMemoryBarrier\"/>\n 8902              <type name=\"VkDispatchIndirectCommand\"/>\n 8903              <type name=\"VkDrawIndexedIndirectCommand\"/>\n 8904              <type name=\"VkDrawIndirectCommand\"/>\n 8905:             <type name=\"VkImageMemoryBarrier\"/>\n 8906:             <type name=\"VkMemoryBarrier\"/>\n 8907              <type name=\"VkObjectType\"/>\n 8908              <type name=\"VkVendorId\"/>\n ....\n 9367              <command name=\"vkCmdResetEvent\"/>\n 9368              <command name=\"vkCmdWaitEvents\"/>\n 9369:             <command name=\"vkCmdPipelineBarrier\"/>\n 9370              <command name=\"vkCmdBeginQuery\"/>\n 9371              <command name=\"vkCmdEndQuery\"/>\n\n/home/max/dev/Falcor/third_party/slang/source/slang-glslang/slang-glslang.vcxproj:\n  397      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_arithmetics.cpp\" />\n  398      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_atomics.cpp\" />\n  399:     <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_barriers.cpp\" />\n  400      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_bitwise.cpp\" />\n  401      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_builtins.cpp\" />\n\n/home/max/dev/Falcor/third_party/slang/source/slang-glslang/slang-glslang.vcxproj.filters:\n  561        <Filter>Source Files\\spirv-tools\\val</Filter>\n  562      </ClCompile>\n  563:     <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_barriers.cpp\">\n  564        <Filter>Source Files\\spirv-tools\\val</Filter>\n  565      </ClCompile>\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang:\n  746  */\n  747  \n  748: // Barrier for writes to all memory spaces (HLSL SM 5.0)\n  749: __target_intrinsic(glsl, \"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\")\n  750  __target_intrinsic(cuda, \"__threadfence()\")\n  751: void AllMemoryBarrier();\n  752  \n  753: // Thread-group sync and barrier for writes to all memory spaces (HLSL SM 5.0)\n  754: __target_intrinsic(glsl, \"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\")\n  755  __target_intrinsic(cuda, \"__syncthreads()\")\n  756: void AllMemoryBarrierWithGroupSync();\n  757  \n  758  // Test if any components is non-zero (HLSL SM 1.0)\n  ...\n 1405  __generic<T : __BuiltinFloatingPointType, let N : int> T determinant(matrix<T,N,N> m);\n 1406  \n 1407: // Barrier for device memory\n 1408: __target_intrinsic(glsl, \"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\")\n 1409  __target_intrinsic(cuda, \"__threadfence()\")\n 1410: void DeviceMemoryBarrier();\n 1411  \n 1412: __target_intrinsic(glsl, \"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\")\n 1413  __target_intrinsic(glsl, \"__syncthreads()\")\n 1414: void DeviceMemoryBarrierWithGroupSync();\n 1415  \n 1416  // Vector distance\n ....\n 1772  float2 GetRenderTargetSamplePosition(int Index);\n 1773  \n 1774: // Group memory barrier\n 1775: __target_intrinsic(glsl, \"groupMemoryBarrier\")\n 1776  __target_intrinsic(cuda, \"__threadfence_block\")\n 1777: void GroupMemoryBarrier();\n 1778  \n 1779  \n 1780: __target_intrinsic(glsl, \"groupMemoryBarrier(), barrier()\")\n 1781  __target_intrinsic(cuda, \"__syncthreads()\")\n 1782: void GroupMemoryBarrierWithGroupSync();\n 1783  \n 1784  // Atomics\n ....\n 2936  // Waits until all warp lanes named in mask have executed a WaveMaskSharedSync (with the same mask)\n 2937  // before resuming execution. Guarantees memory ordering in shared memory among threads participating\n 2938: // in the barrier.\n 2939  //\n 2940: // The CUDA intrinsic says it orders *all* memory accesses, which appears to match most closely subgroupBarrier.\n 2941  //\n 2942  // TODO(JS):\n ....\n 2947  // \n 2948  // It seems this can only mean the active threads are the \"threads the program flow would lead to\". This implies a lockstep\n 2949: // \"straight SIMD\" style interpretation. That being the case this op on HLSL is just a memory barrier without any Sync.\n 2950  \n 2951  __target_intrinsic(cuda, \"__syncwarp($0)\")\n 2952  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2953  __spirv_version(1.3)\n 2954: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2955: __target_intrinsic(hlsl, \"AllMemoryBarrier()\")\n 2956: void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n 2957  \n 2958: // On GLSL, it appears we can't use subgroupMemoryBarrierShared, because it only implies a memory ordering, it does not\n 2959: // imply convergence. For subgroupBarrier we have from the docs..\n 2960: // \"The function subgroupBarrier() enforces that all active invocations within a subgroup must execute this function before any\n 2961  // are allowed to continue their execution\"\n 2962  // TODO(JS):\n 2963  // It's not entirely clear what to do here on HLSL. \n 2964  // Reading the dxc wiki (https://github.com/Microsoft/DirectXShaderCompiler/wiki/Wave-Intrinsics), we have statements like:\n 2965: //    ... these intrinsics enable the elimination of barrier constructs when the scope of synchronization is within the width of the SIMD processor.\n 2966: //    Wave: A set of lanes executed simultaneously in the processor. No explicit barriers are required to guarantee that they execute in parallel.\n 2967: // Which seems to imply at least some memory barriers like Shared might not be needed.\n 2968  //\n 2969: // The barrier is left here though, because not only is the barrier make writes before the barrier across the wave appear to others afterwards, it's\n 2970  // also there to inform the compiler on what order reads and writes can take place. This might seem to be silly because of the 'Active' lanes\n 2971  // aspect of HLSL seems to make everything in lock step - but that's not quite so, it only has to apparently be that way as far as the programmers\n ....\n 2974  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2975  __spirv_version(1.3)\n 2976: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2977: __target_intrinsic(hlsl, \"GroupMemoryBarrier()\")\n 2978: void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n 2979  \n 2980  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2981  __spirv_version(1.3)\n 2982: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2983: __target_intrinsic(hlsl, \"AllMemoryBarrier()\")\n 2984: void AllMemoryBarrierWithWaveSync();\n 2985  \n 2986  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2987  __spirv_version(1.3)\n 2988: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2989: __target_intrinsic(hlsl, \"GroupMemoryBarrier()\")\n 2990: void GroupMemoryBarrierWithWaveSync();\n 2991  \n 2992  // NOTE! WaveMaskBroadcastLaneAt is *NOT* standard HLSL\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang.h:\n  812  SLANG_RAW(\"*/\\n\")\n  813  SLANG_RAW(\"\\n\")\n  814: SLANG_RAW(\"// Barrier for writes to all memory spaces (HLSL SM 5.0)\\n\")\n  815: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\\\")\\n\")\n  816  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__threadfence()\\\")\\n\")\n  817: SLANG_RAW(\"void AllMemoryBarrier();\\n\")\n  818  SLANG_RAW(\"\\n\")\n  819: SLANG_RAW(\"// Thread-group sync and barrier for writes to all memory spaces (HLSL SM 5.0)\\n\")\n  820: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\\\")\\n\")\n  821  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__syncthreads()\\\")\\n\")\n  822: SLANG_RAW(\"void AllMemoryBarrierWithGroupSync();\\n\")\n  823  SLANG_RAW(\"\\n\")\n  824  SLANG_RAW(\"// Test if any components is non-zero (HLSL SM 1.0)\\n\")\n  ...\n 1471  SLANG_RAW(\"__generic<T : __BuiltinFloatingPointType, let N : int> T determinant(matrix<T,N,N> m);\\n\")\n 1472  SLANG_RAW(\"\\n\")\n 1473: SLANG_RAW(\"// Barrier for device memory\\n\")\n 1474: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\\\")\\n\")\n 1475  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__threadfence()\\\")\\n\")\n 1476: SLANG_RAW(\"void DeviceMemoryBarrier();\\n\")\n 1477  SLANG_RAW(\"\\n\")\n 1478: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\\\")\\n\")\n 1479  SLANG_RAW(\"__target_intrinsic(glsl, \\\"__syncthreads()\\\")\\n\")\n 1480: SLANG_RAW(\"void DeviceMemoryBarrierWithGroupSync();\\n\")\n 1481  SLANG_RAW(\"\\n\")\n 1482  SLANG_RAW(\"// Vector distance\\n\")\n ....\n 1841  SLANG_RAW(\"float2 GetRenderTargetSamplePosition(int Index);\\n\")\n 1842  SLANG_RAW(\"\\n\")\n 1843: SLANG_RAW(\"// Group memory barrier\\n\")\n 1844: SLANG_RAW(\"__target_intrinsic(glsl, \\\"groupMemoryBarrier\\\")\\n\")\n 1845  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__threadfence_block\\\")\\n\")\n 1846: SLANG_RAW(\"void GroupMemoryBarrier();\\n\")\n 1847  SLANG_RAW(\"\\n\")\n 1848  SLANG_RAW(\"\\n\")\n 1849: SLANG_RAW(\"__target_intrinsic(glsl, \\\"groupMemoryBarrier(), barrier()\\\")\\n\")\n 1850  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__syncthreads()\\\")\\n\")\n 1851: SLANG_RAW(\"void GroupMemoryBarrierWithGroupSync();\\n\")\n 1852  SLANG_RAW(\"\\n\")\n 1853  SLANG_RAW(\"// Atomics\\n\")\n ....\n 3023  SLANG_RAW(\"// Waits until all warp lanes named in mask have executed a WaveMaskSharedSync (with the same mask)\\n\")\n 3024  SLANG_RAW(\"// before resuming execution. Guarantees memory ordering in shared memory among threads participating\\n\")\n 3025: SLANG_RAW(\"// in the barrier.\\n\")\n 3026  SLANG_RAW(\"//\\n\")\n 3027: SLANG_RAW(\"// The CUDA intrinsic says it orders *all* memory accesses, which appears to match most closely subgroupBarrier.\\n\")\n 3028  SLANG_RAW(\"//\\n\")\n 3029  SLANG_RAW(\"// TODO(JS):\\n\")\n ....\n 3034  SLANG_RAW(\"// \\n\")\n 3035  SLANG_RAW(\"// It seems this can only mean the active threads are the \\\"threads the program flow would lead to\\\". This implies a lockstep\\n\")\n 3036: SLANG_RAW(\"// \\\"straight SIMD\\\" style interpretation. That being the case this op on HLSL is just a memory barrier without any Sync.\\n\")\n 3037  SLANG_RAW(\"\\n\")\n 3038  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__syncwarp($0)\\\")\\n\")\n 3039  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3040  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3041: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3042: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"AllMemoryBarrier()\\\")\\n\")\n 3043: SLANG_RAW(\"void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\\n\")\n 3044  SLANG_RAW(\"\\n\")\n 3045: SLANG_RAW(\"// On GLSL, it appears we can't use subgroupMemoryBarrierShared, because it only implies a memory ordering, it does not\\n\")\n 3046: SLANG_RAW(\"// imply convergence. For subgroupBarrier we have from the docs..\\n\")\n 3047: SLANG_RAW(\"// \\\"The function subgroupBarrier() enforces that all active invocations within a subgroup must execute this function before any\\n\")\n 3048  SLANG_RAW(\"// are allowed to continue their execution\\\"\\n\")\n 3049  SLANG_RAW(\"// TODO(JS):\\n\")\n 3050  SLANG_RAW(\"// It's not entirely clear what to do here on HLSL. \\n\")\n 3051  SLANG_RAW(\"// Reading the dxc wiki (https://github.com/Microsoft/DirectXShaderCompiler/wiki/Wave-Intrinsics), we have statements like:\\n\")\n 3052: SLANG_RAW(\"//    ... these intrinsics enable the elimination of barrier constructs when the scope of synchronization is within the width of the SIMD processor.\\n\")\n 3053: SLANG_RAW(\"//    Wave: A set of lanes executed simultaneously in the processor. No explicit barriers are required to guarantee that they execute in parallel.\\n\")\n 3054: SLANG_RAW(\"// Which seems to imply at least some memory barriers like Shared might not be needed.\\n\")\n 3055  SLANG_RAW(\"//\\n\")\n 3056: SLANG_RAW(\"// The barrier is left here though, because not only is the barrier make writes before the barrier across the wave appear to others afterwards, it's\\n\")\n 3057  SLANG_RAW(\"// also there to inform the compiler on what order reads and writes can take place. This might seem to be silly because of the 'Active' lanes\\n\")\n 3058  SLANG_RAW(\"// aspect of HLSL seems to make everything in lock step - but that's not quite so, it only has to apparently be that way as far as the programmers\\n\")\n ....\n 3061  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3062  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3063: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3064: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"GroupMemoryBarrier()\\\")\\n\")\n 3065: SLANG_RAW(\"void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\\n\")\n 3066  SLANG_RAW(\"\\n\")\n 3067  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3068  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3069: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3070: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"AllMemoryBarrier()\\\")\\n\")\n 3071: SLANG_RAW(\"void AllMemoryBarrierWithWaveSync();\\n\")\n 3072  SLANG_RAW(\"\\n\")\n 3073  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3074  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3075: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3076: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"GroupMemoryBarrier()\\\")\\n\")\n 3077: SLANG_RAW(\"void GroupMemoryBarrierWithWaveSync();\\n\")\n 3078  SLANG_RAW(\"\\n\")\n 3079  SLANG_RAW(\"// NOTE! WaveMaskBroadcastLaneAt is *NOT* standard HLSL\\n\")\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-emit-c-like.cpp:\n 2275          break;\n 2276  \n 2277:     case kIROp_GroupMemoryBarrierWithGroupSync:\n 2278:         m_writer->emit(\"GroupMemoryBarrierWithGroupSync()\");\n 2279          break;\n 2280  \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-emit-cpp.cpp:\n   30  If we can invoke a bunch of threads as a single invocation we could effectively have the ThreadShared not part of the ABI, but something\n   31  that is say allocated on the stack before the threads are kicked off. If we kick of threads individually then we would need to pass this\n   32: in as part of ABI. NOTE that it isn't right in so far as memory barriers etc couldn't work, as each thread would run to completion, but\n   33: we aren't going to worry about barriers for now. \n   34  \n   35  On 1 - there could be potentially input and outputs (perhaps in out?). On CPU I guess that's fine. \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ir-inst-defs.h:\n  468  INST(SampleGrad, sampleGrad, 4, 0)\n  469  \n  470: INST(GroupMemoryBarrierWithGroupSync, GroupMemoryBarrierWithGroupSync, 0, 0)\n  471  \n  472  // GPU_FOREACH loop of the form \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ir-restructure.cpp:\n  367                      // but it could lead to Bad Things if somebody were to call\n  368                      // a function in their continue clause, and that function does\n  369:                     // a compute shader barrier operation.\n  370                      //\n  371                      // A better long-term fix is to take a high-level loop like:\n  ...\n  395                      // Unlike the current code-duplication solution, `C` appears only once\n  396                      // in the output, and seems to clearly be at a \"joint point\" for control\n  397:                     // flow so that it is clear that a barrier there is valid in GLSL.\n  398                      //\n  399                      // Anyway, back our regularly scheduled programming.\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/atomics-groupshared.slang:\n   18      shared[val] = 0;\n   19  \n   20:     GroupMemoryBarrierWithGroupSync();\n   21  \n   22      uint originalSum = 0;\n   ..\n   31      originalSum += originalValue;\n   32      \n   33:     GroupMemoryBarrierWithGroupSync();\n   34  \n   35      return shared[val] ^ originalSum;\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/groupshared.slang:\n   15  {\n   16  \tgA[val] = val;\n   17: \tGroupMemoryBarrierWithGroupSync();\n   18  \tval = gA[val ^ 1];\n   19  \n   ..\n   22  \n   23  \tgB[val] = val;\n   24: \tGroupMemoryBarrierWithGroupSync();\n   25  \tval = gB[val ^ 2];\n   26  */\n\n/home/max/dev/Falcor/third_party/slang/tests/cross-compile/barriers.slang:\n    1  //TEST:CROSS_COMPILE:-target spirv-assembly -entry main -stage compute\n    2  \n    3: // Confirm that all HLSL barrier operations can be used when cross-compiling.\n    4  \n    5  [numthreads(1,1,1)]\n    6  void main()\n    7  {\n    8: \tAllMemoryBarrier();\n    9: \tAllMemoryBarrierWithGroupSync();\n   10: \tDeviceMemoryBarrier();\n   11: \tDeviceMemoryBarrierWithGroupSync();\n   12: \tGroupMemoryBarrier();\n   13: \tGroupMemoryBarrierWithGroupSync();\n   14  }\n   15  \n\n/home/max/dev/Falcor/third_party/slang/tests/cross-compile/barriers.slang.expected:\n   26           4(main):           2 Function None 3\n   27                 5:             Label\n   28:                               MemoryBarrier 7 8\n   29:                               MemoryBarrier 9 8\n   30:                               MemoryBarrier 7 10\n   31:                               MemoryBarrier 7 11\n   32:                               MemoryBarrier 7 8\n   33:                               MemoryBarrier 9 8\n   34:                               MemoryBarrier 7 10\n   35:                               MemoryBarrier 7 11\n   36:                               ControlBarrier 9 9 12\n   37:                               MemoryBarrier 7 8\n   38:                               MemoryBarrier 7 10\n   39:                               MemoryBarrier 7 11\n   40:                               MemoryBarrier 7 8\n   41:                               MemoryBarrier 7 10\n   42:                               MemoryBarrier 7 11\n   43:                               ControlBarrier 9 9 12\n   44:                               MemoryBarrier 9 8\n   45:                               MemoryBarrier 9 8\n   46:                               ControlBarrier 9 9 12\n   47                                Return\n   48                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/tests/cross-compile/barriers.slang.glsl:\n    4  void main()\n    5  {\n    6:     (memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer());\n    7:     (memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier());\n    8:     (memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer());\n    9:     (memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier());\n   10:     groupMemoryBarrier();\n   11:     (groupMemoryBarrier(), barrier());\n   12  \n   13      return;\n\n/home/max/dev/Falcor/third_party/slang/tests/ir/loop.slang:\n   32      for(uint stride = 1; stride < GROUP_THREAD_COUNT; stride <<= 1)\n   33      {\n   34:         GroupMemoryBarrierWithGroupSync();\n   35  \n   36          s[groupThreadID] += s[groupThreadID - stride];\n   37      }\n   38  \n   39:     GroupMemoryBarrierWithGroupSync();\n   40  \n   41      output[dispatchThreadID] = s[0];\n\n/home/max/dev/Falcor/third_party/slang/tests/ir/loop.slang.expected:\n    8  let  %2\t: int\t= integer_constant(64)\n    9  \n   10: ir_func @_S031GroupMemoryBarrierWithGroupSyncp0pV\t: () -> void;\n   11  \n   12  ir_global_var @_SV06output\t: Ptr<RWStructuredBuffer<vector<float,4>>>;\n   ..\n   33  \n   34  block %18:\n   35: \tcall @_S031GroupMemoryBarrierWithGroupSyncp0pV()\n   36  \tlet  %19\t: Ptr<vector<float,4>>\t= getElementPtr(@_SV01s, %6)\n   37  \tlet  %20\t: vector<float,4>\t= load(%19)\n   ..\n   49  \n   50  block %13:\n   51: \tcall @_S031GroupMemoryBarrierWithGroupSyncp0pV()\n   52  \tlet  %27\t: RWStructuredBuffer<vector<float,4>>\t= load(@_SV06output)\n   53  \tlet  %28\t: Ptr<vector<float,4>>\t= bufferElementRef(%27, %5)\n\n/home/max/dev/Falcor/third_party/slang/tests/slang-extension/atomic-float-byte-address-buffer.slang:\n   38      //workBuffer.InterlockedAddF32(anotherIdx << 2, delta);\n   39      \n   40:     GroupMemoryBarrierWithGroupSync();\n   41      \n   42      if (tid < 4)\n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/render-d3d12.cpp:\n  887          // Make sure it's in the right state\n  888          {\n  889:             D3D12BarrierSubmitter submitter(m_commandList);\n  890              resourceOut.transition(finalState, submitter);\n  891          }\n  ...\n  929      // Indicate that the render target needs to be writable\n  930      {\n  931:         D3D12BarrierSubmitter submitter(m_commandList);\n  932          m_renderTargets[m_renderTargetIndex]->transition(D3D12_RESOURCE_STATE_RENDER_TARGET, submitter);\n  933      }\n  ...\n  951          D3D12Resource& renderTarget = *m_renderTargets[m_renderTargetIndex];\n  952          assert(&renderTarget != &backBuffer);\n  953:         // Barriers to wait for the render target, and the backbuffer to be in correct state\n  954          {\n  955:             D3D12BarrierSubmitter submitter(m_commandList);\n  956              renderTarget.transition(D3D12_RESOURCE_STATE_RESOLVE_SOURCE, submitter);\n  957              backBuffer.transition(D3D12_RESOURCE_STATE_RESOLVE_DEST, submitter);\n  ...\n  964      // Make the back buffer presentable\n  965      {\n  966:         D3D12BarrierSubmitter submitter(m_commandList);\n  967          backBuffer.transition(D3D12_RESOURCE_STATE_PRESENT, submitter);\n  968      }\n  ...\n 1036  \n 1037      {\n 1038:         D3D12BarrierSubmitter submitter(m_commandList);\n 1039          resource.transition(D3D12_RESOURCE_STATE_COPY_SOURCE, submitter);\n 1040      }\n ....\n 1061  \n 1062      {\n 1063:         D3D12BarrierSubmitter submitter(m_commandList);\n 1064          resource.transition(initialState, submitter);\n 1065      }\n ....\n 2245      {\n 2246          const D3D12_RESOURCE_STATES finalState = _calcResourceState(initialUsage);\n 2247:         D3D12BarrierSubmitter submitter(m_commandList);\n 2248          texture->m_resource.transition(finalState, submitter);\n 2249  \n ....\n 2644                  case MapFlavor::WriteDiscard:\n 2645                  {\n 2646:                     D3D12BarrierSubmitter submitter(m_commandList);\n 2647                      buffer->m_uploadResource.transition(D3D12_RESOURCE_STATE_GENERIC_READ, submitter);\n 2648                      buffer->m_resource.transition(D3D12_RESOURCE_STATE_COPY_DEST, submitter);\n ....\n 2680                      // Make it a source\n 2681                      {\n 2682:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2683                          resource.transition(D3D12_RESOURCE_STATE_COPY_SOURCE, submitter);\n 2684                      }\n ....\n 2687                      // Switch it back\n 2688                      {\n 2689:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2690                          resource.transition(initialState, submitter);\n 2691                      }\n ....\n 2752  \n 2753                      {\n 2754:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2755                          buffer->m_uploadResource.transition(D3D12_RESOURCE_STATE_GENERIC_READ, submitter);\n 2756                          buffer->m_resource.transition(D3D12_RESOURCE_STATE_COPY_DEST, submitter);\n ....\n 2760  \n 2761                      {\n 2762:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2763                          buffer->m_resource.transition(initialState, submitter);\n 2764                      }\n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/resource-d3d12.cpp:\n    5  using namespace Slang;\n    6  \n    7: /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! D3D12BarrierSubmitter !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */\n    8  \n    9: void D3D12BarrierSubmitter::_flush()\n   10  {\n   11: \tassert(m_numBarriers > 0);\n   12  \n   13  \tif (m_commandList)\n   14  \t{\n   15: \t\tm_commandList->ResourceBarrier(UINT(m_numBarriers), m_barriers);\n   16  \t}\n   17: \tm_numBarriers = 0;\n   18  }\n   19  \n   20: D3D12_RESOURCE_BARRIER& D3D12BarrierSubmitter::_expandOne()\n   21  {\n   22  \t_flush();\n   23: \treturn m_barriers[m_numBarriers++];\n   24  }\n   25  \n   26: void D3D12BarrierSubmitter::transition(ID3D12Resource* resource, D3D12_RESOURCE_STATES prevState, D3D12_RESOURCE_STATES nextState)\n   27  {\n   28      if (nextState != prevState)\n   29      {\n   30:         D3D12_RESOURCE_BARRIER& barrier = expandOne();\n   31  \n   32:         const UINT subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n   33:         const D3D12_RESOURCE_BARRIER_FLAGS flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n   34  \n   35:         ::memset(&barrier, 0, sizeof(barrier));\n   36:         barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n   37:         barrier.Flags = flags;\n   38:         barrier.Transition.pResource = resource;\n   39:         barrier.Transition.StateBefore = prevState;\n   40:         barrier.Transition.StateAfter = nextState;\n   41:         barrier.Transition.Subresource = subresource;\n   42      }\n   43      else\n   ..\n   45          if (nextState == D3D12_RESOURCE_STATE_UNORDERED_ACCESS)\n   46          {\n   47:             D3D12_RESOURCE_BARRIER& barrier = expandOne();\n   48  \n   49:             ::memset(&barrier, 0, sizeof(barrier));\n   50:             barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_UAV;\n   51:             barrier.UAV.pResource = resource;\n   52          }\n   53      }\n   ..\n   61  }\n   62  \n   63: void D3D12ResourceBase::transition(D3D12_RESOURCE_STATES nextState, D3D12BarrierSubmitter& submitter)\n   64  {\n   65  \t// Transition only if there is a resource\n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/resource-d3d12.h:\n   16  namespace gfx {\n   17  \n   18: // Enables more conservative barriers - restoring the state of resources after they are used.\n   19: // Should not need to be enabled in normal builds, as the barriers should correctly sync resources\n   20: // If enabling fixes an issue it implies regular barriers are not correctly used.\n   21: #define SLANG_ENABLE_CONSERVATIVE_RESOURCE_BARRIERS 0\n   22  \n   23: struct D3D12BarrierSubmitter\n   24  {\n   25: \tenum { MAX_BARRIERS = 8 };\n   26  \n   27: \t/// Expand one space to hold a barrier\n   28: \tSLANG_FORCE_INLINE D3D12_RESOURCE_BARRIER& expandOne() { return (m_numBarriers < MAX_BARRIERS) ? m_barriers[m_numBarriers++] : _expandOne(); }\n   29: \t/// Flush barriers to command list\n   30: \tSLANG_FORCE_INLINE void flush() { if (m_numBarriers > 0) _flush(); }\n   31  \n   32          /// Transition resource from prevState to nextState\n   ..\n   34  \n   35  \t/// Ctor\n   36: \tSLANG_FORCE_INLINE D3D12BarrierSubmitter(ID3D12GraphicsCommandList* commandList) : m_numBarriers(0), m_commandList(commandList) { }\n   37  \t/// Dtor\n   38: \tSLANG_FORCE_INLINE ~D3D12BarrierSubmitter() { flush(); }\n   39  \n   40  protected:\n   41: \tD3D12_RESOURCE_BARRIER& _expandOne();\n   42  \tvoid _flush();\n   43  \n   44  \tID3D12GraphicsCommandList* m_commandList;\n   45: \tint m_numBarriers;\n   46: \tD3D12_RESOURCE_BARRIER m_barriers[MAX_BARRIERS];\n   47  };\n   48  \n   ..\n   99  {\n  100  \t\t/// Add a transition if necessary to the list\n  101: \tvoid transition(D3D12_RESOURCE_STATES nextState, D3D12BarrierSubmitter& submitter);\n  102  \t\t/// Get the current state\n  103  \tSLANG_FORCE_INLINE D3D12_RESOURCE_STATES getState() const { return m_state; }\n  ...\n  113  \n  114  \t\t/// restore previous state\n  115: #if SLANG_ENABLE_CONSERVATIVE_RESOURCE_BARRIERS\n  116: \tSLANG_FORCE_INLINE Void restore(D3D12BarrierSubmitter& submitter) { transition(m_prevState, submitter); }\n  117  #else\n  118: \tSLANG_FORCE_INLINE void restore(D3D12BarrierSubmitter& submitter) { SLANG_UNUSED(submitter) }\n  119  #endif\n  120  \n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/vulkan/render-vk.cpp:\n 1375  void VKRenderer::_transitionImageLayout(VkImage image, VkFormat format, const TextureResource::Desc& desc, VkImageLayout oldLayout, VkImageLayout newLayout)\n 1376  {\n 1377:     VkImageMemoryBarrier barrier = {};\n 1378:     barrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n 1379:     barrier.oldLayout = oldLayout;\n 1380:     barrier.newLayout = newLayout;\n 1381:     barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n 1382:     barrier.dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n 1383:     barrier.image = image;\n 1384:     barrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n 1385:     barrier.subresourceRange.baseMipLevel = 0;\n 1386:     barrier.subresourceRange.levelCount = desc.numMipLevels;\n 1387:     barrier.subresourceRange.baseArrayLayer = 0;\n 1388:     barrier.subresourceRange.layerCount = 1;\n 1389  \n 1390      VkPipelineStageFlags sourceStage;\n ....\n 1393      if (oldLayout == VK_IMAGE_LAYOUT_UNDEFINED && newLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL)\n 1394      {\n 1395:         barrier.srcAccessMask = 0;\n 1396:         barrier.dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n 1397  \n 1398          sourceStage = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;\n ....\n 1401      else if (oldLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL && newLayout == VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL)\n 1402      {\n 1403:         barrier.srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n 1404:         barrier.dstAccessMask = VK_ACCESS_SHADER_READ_BIT;\n 1405  \n 1406          sourceStage = VK_PIPELINE_STAGE_TRANSFER_BIT;\n ....\n 1415      VkCommandBuffer commandBuffer = m_deviceQueue.getCommandBuffer();\n 1416  \n 1417:     m_api.vkCmdPipelineBarrier(commandBuffer, sourceStage, destinationStage, 0, 0, nullptr, 0, nullptr, 1, &barrier);\n 1418  }\n 1419  \n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/vulkan/vk-api.h:\n   83      x(vkCmdBeginRenderPass) \\\n   84      x(vkCmdEndRenderPass) \\\n   85:     x(vkCmdPipelineBarrier) \\\n   86      x(vkCmdCopyBufferToImage)\\\n   87      x(vkCmdPushConstants) \\\n\n2999 matches across 257 files\n\n\nSearching 7381 files for \"barrier\"\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slang-cpp-extractor:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slang-test:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/bin/linux-x64/debug/slangc:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/docs/cpu-target.md:\n   16  These limitations apply to Slang transpiling to C++. \n   17  \n   18: * Barriers are not supported (making these work would require an ABI change)\n   19  * Atomics are not supported\n   20  * Complex resource types (such as Texture2d) are work in progress\n\n/home/max/dev/Falcor/third_party/slang/docs/target-compatibility.md:\n   31  | Resource bounds             |     Yes      |   Yes        |   Yes      | Yes (optional)|    Yes\n   32  | Atomics                     |     Yes      |   Yes        |   Yes      |     Yes       |    Yes\n   33: | Group shared mem/Barriers   |     Yes      |   Yes        |   Yes      |     Yes       |    No + \n   34  | TextureArray.Sample float   |     Yes      |   Yes        |   Yes      |     No        |    Yes\n   35  | Separate Sampler            |     Yes      |   Yes        |   Yes      |     No        |    Yes\n\n/home/max/dev/Falcor/third_party/slang/docs/wave-intrinsics.md:\n  199  uint4 WaveGetConvergedMulti();\n  200  \n  201: // Barriers \n  202  \n  203: void AllMemoryBarrierWithWaveSync();\n  204  \n  205: void GroupMemoryBarrierWithWaveSync();\n  206  ```\n  207  \n  ...\n  226  \n  227  ```\n  228: void AllMemoryBarrierWithWaveSync();\n  229  ```\n  230  \n  231: Synchronizes all lanes to the same AllMemoryBarrierWithWaveSync in program flow. Orders all memory accesses such that accesses after the barrier can be seen by writes before.  \n  232  \n  233  ```\n  234: void GroupMemoryBarrierWithWaveSync();\n  235  ```\n  236  \n  237: Synchronizes all lanes to the same GroupMemoryBarrierWithWaveSync in program flow. Orders group shared memory accesses such that accesses after the barrier can be seen by writes before.  \n  238  \n  239  Wave Mask Intrinsics\n  ...\n  257  \n  258  ```\n  259: void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  260  ```\n  261  \n  262: Same as AllMemoryBarrierWithWaveSync but takes a mask of active lanes to sync with. \n  263  \n  264  ```\n  265: void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  266  ```\n  267  \n  268: Same as GroupMemoryBarrierWithWaveSync but takes a mask of active lanes to sync with. \n  269   \n  270  The intrinsics that make up the Slang `WaveMask` extension. \n  ...\n  291  WaveMask WaveMaskMatch<T>(WaveMask mask, T value);\n  292  \n  293: // Barriers\n  294  \n  295: void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  296  \n  297: void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n  298  \n  299  // Across lane ops\n\n/home/max/dev/Falcor/third_party/slang/external/glext.h:\n 2102  #define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA\n 2103  #define GL_UNSIGNED_INT_ATOMIC_COUNTER    0x92DB\n 2104: #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001\n 2105: #define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002\n 2106: #define GL_UNIFORM_BARRIER_BIT            0x00000004\n 2107: #define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008\n 2108: #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020\n 2109: #define GL_COMMAND_BARRIER_BIT            0x00000040\n 2110: #define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080\n 2111: #define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100\n 2112: #define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200\n 2113: #define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400\n 2114: #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800\n 2115: #define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000\n 2116: #define GL_ALL_BARRIER_BITS               0xFFFFFFFF\n 2117  #define GL_MAX_IMAGE_UNITS                0x8F38\n 2118  #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39\n ....\n 2177  typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);\n 2178  typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 2179: typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);\n 2180  typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2181  typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n ....\n 2190  GLAPI void APIENTRY glGetActiveAtomicCounterBufferiv (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);\n 2191  GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 2192: GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);\n 2193  GLAPI void APIENTRY glTexStorage1D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\n 2194  GLAPI void APIENTRY glTexStorage2D (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\n ....\n 2441  #define GL_MAX_SHADER_STORAGE_BLOCK_SIZE  0x90DE\n 2442  #define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF\n 2443: #define GL_SHADER_STORAGE_BARRIER_BIT     0x00002000\n 2444  #define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39\n 2445  #define GL_DEPTH_STENCIL_TEXTURE_MODE     0x90EA\n ....\n 2560  #define GL_DYNAMIC_STORAGE_BIT            0x0100\n 2561  #define GL_CLIENT_STORAGE_BIT             0x0200\n 2562: #define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000\n 2563  #define GL_BUFFER_IMMUTABLE_STORAGE       0x821F\n 2564  #define GL_BUFFER_STORAGE_FLAGS           0x8220\n ....\n 2568  #define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C\n 2569  #define GL_QUERY_BUFFER                   0x9192\n 2570: #define GL_QUERY_BUFFER_BARRIER_BIT       0x00008000\n 2571  #define GL_QUERY_BUFFER_BINDING           0x9193\n 2572  #define GL_QUERY_RESULT_NO_WAIT           0x9194\n ....\n 2716  typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2717  typedef void (APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2718: typedef void (APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers);\n 2719  typedef void (APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);\n 2720  typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);\n ....\n 2739  typedef void (APIENTRYP PFNGLGETNHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2740  typedef void (APIENTRYP PFNGLGETNMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2741: typedef void (APIENTRYP PFNGLTEXTUREBARRIERPROC) (void);\n 2742  #ifdef GL_GLEXT_PROTOTYPES\n 2743  GLAPI void APIENTRY glClipControl (GLenum origin, GLenum depth);\n ....\n 2839  GLAPI void APIENTRY glGetQueryBufferObjectui64v (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2840  GLAPI void APIENTRY glGetQueryBufferObjectuiv (GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\n 2841: GLAPI void APIENTRY glMemoryBarrierByRegion (GLbitfield barriers);\n 2842  GLAPI void APIENTRY glGetTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);\n 2843  GLAPI void APIENTRY glGetCompressedTextureSubImage (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);\n ....\n 2862  GLAPI void APIENTRY glGetnHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2863  GLAPI void APIENTRY glGetnMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);\n 2864: GLAPI void APIENTRY glTextureBarrier (void);\n 2865  #endif\n 2866  #endif /* GL_VERSION_4_5 */\n ....\n 4298  #endif /* GL_ARB_tessellation_shader */\n 4299  \n 4300: #ifndef GL_ARB_texture_barrier\n 4301: #define GL_ARB_texture_barrier 1\n 4302: #endif /* GL_ARB_texture_barrier */\n 4303  \n 4304  #ifndef GL_ARB_texture_border_clamp\n ....\n 4919  #define GL_HSL_COLOR_KHR                  0x92AF\n 4920  #define GL_HSL_LUMINOSITY_KHR             0x92B0\n 4921: typedef void (APIENTRYP PFNGLBLENDBARRIERKHRPROC) (void);\n 4922  #ifdef GL_GLEXT_PROTOTYPES\n 4923: GLAPI void APIENTRY glBlendBarrierKHR (void);\n 4924  #endif\n 4925  #endif /* GL_KHR_blend_equation_advanced */\n ....\n 7889  #define GL_MAX_IMAGE_SAMPLES_EXT          0x906D\n 7890  #define GL_IMAGE_BINDING_FORMAT_EXT       0x906E\n 7891: #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001\n 7892: #define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT  0x00000002\n 7893: #define GL_UNIFORM_BARRIER_BIT_EXT        0x00000004\n 7894: #define GL_TEXTURE_FETCH_BARRIER_BIT_EXT  0x00000008\n 7895: #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020\n 7896: #define GL_COMMAND_BARRIER_BIT_EXT        0x00000040\n 7897: #define GL_PIXEL_BUFFER_BARRIER_BIT_EXT   0x00000080\n 7898: #define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100\n 7899: #define GL_BUFFER_UPDATE_BARRIER_BIT_EXT  0x00000200\n 7900: #define GL_FRAMEBUFFER_BARRIER_BIT_EXT    0x00000400\n 7901: #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800\n 7902: #define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000\n 7903: #define GL_ALL_BARRIER_BITS_EXT           0xFFFFFFFF\n 7904  typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);\n 7905: typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);\n 7906  #ifdef GL_GLEXT_PROTOTYPES\n 7907  GLAPI void APIENTRY glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);\n 7908: GLAPI void APIENTRY glMemoryBarrierEXT (GLbitfield barriers);\n 7909  #endif\n 7910  #endif /* GL_EXT_shader_image_load_store */\n ....\n 9217  #define GL_XOR_NV                         0x1506\n 9218  typedef void (APIENTRYP PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value);\n 9219: typedef void (APIENTRYP PFNGLBLENDBARRIERNVPROC) (void);\n 9220  #ifdef GL_GLEXT_PROTOTYPES\n 9221  GLAPI void APIENTRY glBlendParameteriNV (GLenum pname, GLint value);\n 9222: GLAPI void APIENTRY glBlendBarrierNV (void);\n 9223  #endif\n 9224  #endif /* GL_NV_blend_equation_advanced */\n ....\n 9670  typedef void (APIENTRYP PFNGLMULTICASTBLITFRAMEBUFFERNVPROC) (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 9671  typedef void (APIENTRYP PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC) (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);\n 9672: typedef void (APIENTRYP PFNGLMULTICASTBARRIERNVPROC) (void);\n 9673  typedef void (APIENTRYP PFNGLMULTICASTWAITSYNCNVPROC) (GLuint signalGpu, GLbitfield waitGpuMask);\n 9674  typedef void (APIENTRYP PFNGLMULTICASTGETQUERYOBJECTIVNVPROC) (GLuint gpu, GLuint id, GLenum pname, GLint *params);\n ....\n 9683  GLAPI void APIENTRY glMulticastBlitFramebufferNV (GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\n 9684  GLAPI void APIENTRY glMulticastFramebufferSampleLocationsfvNV (GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat *v);\n 9685: GLAPI void APIENTRY glMulticastBarrierNV (void);\n 9686  GLAPI void APIENTRY glMulticastWaitSyncNV (GLuint signalGpu, GLbitfield waitGpuMask);\n 9687  GLAPI void APIENTRY glMulticastGetQueryObjectivNV (GLuint gpu, GLuint id, GLenum pname, GLint *params);\n ....\n 10487  #ifndef GL_NV_shader_buffer_store\n 10488  #define GL_NV_shader_buffer_store 1\n 10489: #define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010\n 10490  #endif /* GL_NV_shader_buffer_store */\n 10491  \n .....\n 10531  #endif /* GL_NV_texgen_reflection */\n 10532  \n 10533: #ifndef GL_NV_texture_barrier\n 10534: #define GL_NV_texture_barrier 1\n 10535: typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC) (void);\n 10536  #ifdef GL_GLEXT_PROTOTYPES\n 10537: GLAPI void APIENTRY glTextureBarrierNV (void);\n 10538  #endif\n 10539: #endif /* GL_NV_texture_barrier */\n 10540  \n 10541  #ifndef GL_NV_texture_compression_vtc\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/HLSL/hlslParseables.cpp:\n  511          { \"acos\",                             nullptr, nullptr,   \"SVM\",            \"F\",             EShLangAll,    false },\n  512          { \"all\",                              \"S\",    \"B\",        \"SVM\",            \"BFIU\",          EShLangAll,    false },\n  513:         { \"AllMemoryBarrier\",                 nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  514:         { \"AllMemoryBarrierWithGroupSync\",    nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  515          { \"any\",                              \"S\",     \"B\",       \"SVM\",            \"BFIU\",          EShLangAll,    false },\n  516          { \"asdouble\",                         \"S\",     \"D\",       \"S,\",             \"UI,\",           EShLangAll,    false },\n  ...\n  539          { \"degrees\",                          nullptr, nullptr,   \"SVM\",            \"F\",             EShLangAll,    false },\n  540          { \"determinant\",                      \"S\",     \"F\",       \"M\",              \"F\",             EShLangAll,    false },\n  541:         { \"DeviceMemoryBarrier\",              nullptr, nullptr,   \"-\",              \"-\",             EShLangPSCS,   false },\n  542:         { \"DeviceMemoryBarrierWithGroupSync\", nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  543          { \"distance\",                         \"S\",     \"F\",       \"SV,\",            \"F,\",            EShLangAll,    false },\n  544          { \"dot\",                              \"S\",     nullptr,   \"SV,\",            \"FI,\",           EShLangAll,    false },\n  ...\n  563          { \"GetRenderTargetSampleCount\",       \"S\",     \"U\",       \"-\",              \"-\",             EShLangAll,    false },\n  564          { \"GetRenderTargetSamplePosition\",    \"V2\",    \"F\",       \"V1\",             \"I\",             EShLangAll,    false },\n  565:         { \"GroupMemoryBarrier\",               nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  566:         { \"GroupMemoryBarrierWithGroupSync\",  nullptr, nullptr,   \"-\",              \"-\",             EShLangCS,     false },\n  567          { \"InterlockedAdd\",                   \"-\",     \"-\",       \"SVM,,>\",         \"UI,,\",          EShLangPSCS,   false },\n  568          { \"InterlockedAdd\",                   \"-\",     \"-\",       \"SVM,\",           \"UI,\",           EShLangPSCS,   false },\n  ...\n 1027      symbolTable.relateToOperator(\"acos\",                        EOpAcos);\n 1028      symbolTable.relateToOperator(\"all\",                         EOpAll);\n 1029:     symbolTable.relateToOperator(\"AllMemoryBarrier\",            EOpMemoryBarrier);\n 1030:     symbolTable.relateToOperator(\"AllMemoryBarrierWithGroupSync\", EOpAllMemoryBarrierWithGroupSync);\n 1031      symbolTable.relateToOperator(\"any\",                         EOpAny);\n 1032      symbolTable.relateToOperator(\"asdouble\",                    EOpAsDouble);\n ....\n 1054      symbolTable.relateToOperator(\"degrees\",                     EOpDegrees);\n 1055      symbolTable.relateToOperator(\"determinant\",                 EOpDeterminant);\n 1056:     symbolTable.relateToOperator(\"DeviceMemoryBarrier\",         EOpDeviceMemoryBarrier);\n 1057:     symbolTable.relateToOperator(\"DeviceMemoryBarrierWithGroupSync\", EOpDeviceMemoryBarrierWithGroupSync);\n 1058      symbolTable.relateToOperator(\"distance\",                    EOpDistance);\n 1059      symbolTable.relateToOperator(\"dot\",                         EOpDot);\n ....\n 1078      // symbolTable.relateToOperator(\"GetRenderTargetSampleCount\");\n 1079      // symbolTable.relateToOperator(\"GetRenderTargetSamplePosition\");\n 1080:     symbolTable.relateToOperator(\"GroupMemoryBarrier\",          EOpWorkgroupMemoryBarrier);\n 1081:     symbolTable.relateToOperator(\"GroupMemoryBarrierWithGroupSync\", EOpWorkgroupMemoryBarrierWithGroupSync);\n 1082      symbolTable.relateToOperator(\"InterlockedAdd\",              EOpInterlockedAdd);\n 1083      symbolTable.relateToOperator(\"InterlockedAnd\",              EOpInterlockedAnd);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/HLSL/hlslParseHelper.cpp:\n 9784      //    indirections into a complex R-value coming from the call to the PCF.\n 9785      //\n 9786:     // 4. Create a barrier.\n 9787      //\n 9788      // 5/5B. Call the PCF inside an if test for (invocation id == 0).\n ....\n 10048      }\n 10049  \n 10050:     // ================ Step 4: Barrier ================\n 10051:     TIntermTyped* barrier = new TIntermAggregate(EOpBarrier);\n 10052:     barrier->setLoc(loc);\n 10053:     barrier->setType(TType(EbtVoid));\n 10054:     epBodySeq.insert(epBodySeq.end(), barrier);\n 10055  \n 10056      // ================ Step 5: Test on invocation ID ================\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/Include/intermediate.h:\n  462      EOpEndStreamPrimitive,   // geometry only\n  463  \n  464:     EOpBarrier,\n  465:     EOpMemoryBarrier,\n  466:     EOpMemoryBarrierAtomicCounter,\n  467:     EOpMemoryBarrierBuffer,\n  468:     EOpMemoryBarrierImage,\n  469:     EOpMemoryBarrierShared,  // compute only\n  470:     EOpGroupMemoryBarrier,   // compute only\n  471  \n  472      EOpBallot,\n  ...\n  479  \n  480      EOpSubgroupGuardStart,\n  481:     EOpSubgroupBarrier,\n  482:     EOpSubgroupMemoryBarrier,\n  483:     EOpSubgroupMemoryBarrierBuffer,\n  484:     EOpSubgroupMemoryBarrierImage,\n  485:     EOpSubgroupMemoryBarrierShared, // compute only\n  486      EOpSubgroupElect,\n  487      EOpSubgroupAll,\n  ...\n  968      EOpInterlockedOr,       // ...\n  969      EOpInterlockedXor,      // ...\n  970:     EOpAllMemoryBarrierWithGroupSync,    // memory barriers without non-hlsl AST equivalents\n  971:     EOpDeviceMemoryBarrier,              // ...\n  972:     EOpDeviceMemoryBarrierWithGroupSync, // ...\n  973:     EOpWorkgroupMemoryBarrier,           // ...\n  974:     EOpWorkgroupMemoryBarrierWithGroupSync, // ...\n  975      EOpEvaluateAttributeSnapped,         // InterpolateAtOffset with int position on 16x16 grid\n  976      EOpF32tof16,                         // HLSL conversion: half of a PackHalf2x16\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp:\n  288  \n  289  const CustomFunction CustomFunctions[] = {\n  290:     { EOpBarrier,             \"barrier\",             nullptr },\n  291:     { EOpMemoryBarrierShared, \"memoryBarrierShared\", nullptr },\n  292:     { EOpGroupMemoryBarrier,  \"groupMemoryBarrier\",  nullptr },\n  293:     { EOpMemoryBarrier,       \"memoryBarrier\",       nullptr },\n  294:     { EOpMemoryBarrierBuffer, \"memoryBarrierBuffer\", nullptr },\n  295  \n  296      { EOpPackSnorm2x16,       \"packSnorm2x16\",       nullptr },\n  ...\n 1805          (profile != EEsProfile && version >= 140)) {\n 1806          commonBuiltins.append(\n 1807:             \"void subgroupBarrier();\"\n 1808:             \"void subgroupMemoryBarrier();\"\n 1809:             \"void subgroupMemoryBarrierBuffer();\"\n 1810:             \"void subgroupMemoryBarrierImage();\"\n 1811              \"bool subgroupElect();\"\n 1812  \n ....\n 1947  \n 1948          stageBuiltins[EShLangCompute].append(\n 1949:             \"void subgroupMemoryBarrierShared();\"\n 1950  \n 1951              \"\\n\"\n 1952              );\n 1953          stageBuiltins[EShLangMeshNV].append(\n 1954:             \"void subgroupMemoryBarrierShared();\"\n 1955              \"\\n\"\n 1956              );\n 1957          stageBuiltins[EShLangTaskNV].append(\n 1958:             \"void subgroupMemoryBarrierShared();\"\n 1959              \"\\n\"\n 1960              );\n ....\n 4065      //\n 4066      //============================================================================\n 4067:     bool esBarrier = (profile == EEsProfile && version >= 310);\n 4068:     if ((profile != EEsProfile && version >= 150) || esBarrier)\n 4069          stageBuiltins[EShLangTessControl].append(\n 4070:             \"void barrier();\"\n 4071              );\n 4072:     if ((profile != EEsProfile && version >= 420) || esBarrier)\n 4073          stageBuiltins[EShLangCompute].append(\n 4074:             \"void barrier();\"\n 4075              );\n 4076      if ((profile != EEsProfile && version >= 450) || (profile == EEsProfile && version >= 320)) {\n 4077          stageBuiltins[EShLangMeshNV].append(\n 4078:             \"void barrier();\"\n 4079              );\n 4080          stageBuiltins[EShLangTaskNV].append(\n 4081:             \"void barrier();\"\n 4082              );\n 4083      }\n 4084:     if ((profile != EEsProfile && version >= 130) || esBarrier)\n 4085          commonBuiltins.append(\n 4086:             \"void memoryBarrier();\"\n 4087              );\n 4088:     if ((profile != EEsProfile && version >= 420) || esBarrier) {\n 4089          commonBuiltins.append(\n 4090:             \"void memoryBarrierBuffer();\"\n 4091              );\n 4092          stageBuiltins[EShLangCompute].append(\n 4093:             \"void memoryBarrierShared();\"\n 4094:             \"void groupMemoryBarrier();\"\n 4095              );\n 4096      }\n 4097  #ifndef GLSLANG_WEB\n 4098:     if ((profile != EEsProfile && version >= 420) || esBarrier) {\n 4099          if (spvVersion.vulkan == 0) {\n 4100:             commonBuiltins.append(\"void memoryBarrierAtomicCounter();\");\n 4101          }\n 4102:         commonBuiltins.append(\"void memoryBarrierImage();\");\n 4103      }\n 4104      if ((profile != EEsProfile && version >= 450) || (profile == EEsProfile && version >= 320)) {\n 4105          stageBuiltins[EShLangMeshNV].append(\n 4106:             \"void memoryBarrierShared();\"\n 4107:             \"void groupMemoryBarrier();\"\n 4108          );\n 4109          stageBuiltins[EShLangTaskNV].append(\n 4110:             \"void memoryBarrierShared();\"\n 4111:             \"void groupMemoryBarrier();\"\n 4112          );\n 4113      }\n 4114  \n 4115:     commonBuiltins.append(\"void controlBarrier(int, int, int, int);\\n\"\n 4116:                           \"void memoryBarrier(int, int, int);\\n\");\n 4117  \n 4118      commonBuiltins.append(\"void debugPrintfEXT();\\n\");\n ....\n 7754          // E_GL_ARB_shader_image_load_store\n 7755          if (profile != EEsProfile && version < 420)\n 7756:             symbolTable.setFunctionExtensions(\"memoryBarrier\", 1, &E_GL_ARB_shader_image_load_store);\n 7757          // All the image access functions are protected by checks on the type of the first argument.\n 7758  \n ....\n 7981              BuiltInVariable(\"gl_SubgroupLtMask\",       EbvSubgroupLtMask2,     symbolTable);\n 7982  \n 7983:             symbolTable.setFunctionExtensions(\"subgroupBarrier\",                 1, &E_GL_KHR_shader_subgroup_basic);\n 7984:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrier\",           1, &E_GL_KHR_shader_subgroup_basic);\n 7985:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierBuffer\",     1, &E_GL_KHR_shader_subgroup_basic);\n 7986:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierImage\",      1, &E_GL_KHR_shader_subgroup_basic);\n 7987              symbolTable.setFunctionExtensions(\"subgroupElect\",                   1, &E_GL_KHR_shader_subgroup_basic);\n 7988              symbolTable.setFunctionExtensions(\"subgroupAll\",                     1, &E_GL_KHR_shader_subgroup_vote);\n ....\n 8132              symbolTable.setVariableExtensions(\"gl_MaxComputeAtomicCounterBuffers\", 1, &E_GL_ARB_compute_shader);\n 8133  \n 8134:             symbolTable.setFunctionExtensions(\"barrier\",                    1, &E_GL_ARB_compute_shader);\n 8135:             symbolTable.setFunctionExtensions(\"memoryBarrierAtomicCounter\", 1, &E_GL_ARB_compute_shader);\n 8136:             symbolTable.setFunctionExtensions(\"memoryBarrierBuffer\",        1, &E_GL_ARB_compute_shader);\n 8137:             symbolTable.setFunctionExtensions(\"memoryBarrierImage\",         1, &E_GL_ARB_compute_shader);\n 8138:             symbolTable.setFunctionExtensions(\"memoryBarrierShared\",        1, &E_GL_ARB_compute_shader);\n 8139:             symbolTable.setFunctionExtensions(\"groupMemoryBarrier\",         1, &E_GL_ARB_compute_shader);\n 8140          }\n 8141  \n 8142  \n 8143:         symbolTable.setFunctionExtensions(\"controlBarrier\",                 1, &E_GL_KHR_memory_scope_semantics);\n 8144          symbolTable.setFunctionExtensions(\"debugPrintfEXT\",                 1, &E_GL_EXT_debug_printf);\n 8145  \n ....\n 8207              BuiltInVariable(\"gl_SubgroupID\",   EbvSubgroupID,   symbolTable);\n 8208  \n 8209:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierShared\", 1, &E_GL_KHR_shader_subgroup_basic);\n 8210          }\n 8211  \n ....\n 8446  \n 8447              // builtin functions\n 8448:             symbolTable.setFunctionExtensions(\"barrier\",                      1, &E_GL_NV_mesh_shader);\n 8449:             symbolTable.setFunctionExtensions(\"memoryBarrierShared\",          1, &E_GL_NV_mesh_shader);\n 8450:             symbolTable.setFunctionExtensions(\"groupMemoryBarrier\",           1, &E_GL_NV_mesh_shader);\n 8451          }\n 8452  \n ....\n 8509              BuiltInVariable(\"gl_SubgroupLtMask\",       EbvSubgroupLtMask2,     symbolTable);\n 8510  \n 8511:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierShared\", 1, &E_GL_KHR_shader_subgroup_basic);\n 8512  \n 8513              // GL_NV_shader_sm_builtins\n ....\n 8546              symbolTable.setVariableExtensions(\"gl_MaxMeshViewCountNV\",     1, &E_GL_NV_mesh_shader);\n 8547  \n 8548:             symbolTable.setFunctionExtensions(\"barrier\",                   1, &E_GL_NV_mesh_shader);\n 8549:             symbolTable.setFunctionExtensions(\"memoryBarrierShared\",       1, &E_GL_NV_mesh_shader);\n 8550:             symbolTable.setFunctionExtensions(\"groupMemoryBarrier\",        1, &E_GL_NV_mesh_shader);\n 8551          }\n 8552  \n ....\n 8609              BuiltInVariable(\"gl_SubgroupLtMask\",       EbvSubgroupLtMask2,     symbolTable);\n 8610  \n 8611:             symbolTable.setFunctionExtensions(\"subgroupMemoryBarrierShared\", 1, &E_GL_KHR_shader_subgroup_basic);\n 8612  \n 8613              // GL_NV_shader_sm_builtins\n ....\n 8686      symbolTable.relateToOperator(\"unpack8\",         EOpUnpack8);\n 8687  \n 8688:     symbolTable.relateToOperator(\"controlBarrier\",             EOpBarrier);\n 8689:     symbolTable.relateToOperator(\"memoryBarrierAtomicCounter\", EOpMemoryBarrierAtomicCounter);\n 8690:     symbolTable.relateToOperator(\"memoryBarrierImage\",         EOpMemoryBarrierImage);\n 8691  \n 8692      symbolTable.relateToOperator(\"atomicLoad\",     EOpAtomicLoad);\n ....\n 8921          if ((profile == EEsProfile && version >= 310) ||\n 8922              (profile != EEsProfile && version >= 140)) {\n 8923:             symbolTable.relateToOperator(\"subgroupBarrier\",                 EOpSubgroupBarrier);\n 8924:             symbolTable.relateToOperator(\"subgroupMemoryBarrier\",           EOpSubgroupMemoryBarrier);\n 8925:             symbolTable.relateToOperator(\"subgroupMemoryBarrierBuffer\",     EOpSubgroupMemoryBarrierBuffer);\n 8926:             symbolTable.relateToOperator(\"subgroupMemoryBarrierImage\",      EOpSubgroupMemoryBarrierImage);\n 8927              symbolTable.relateToOperator(\"subgroupElect\",                   EOpSubgroupElect);\n 8928              symbolTable.relateToOperator(\"subgroupAll\",                     EOpSubgroupAll);\n ....\n 9070  \n 9071      case EShLangCompute:\n 9072:         symbolTable.relateToOperator(\"subgroupMemoryBarrierShared\", EOpSubgroupMemoryBarrierShared);\n 9073          if ((profile != EEsProfile && version >= 450) ||\n 9074              (profile == EEsProfile && version >= 320)) {\n ....\n 9125      case EShLangTaskNV:\n 9126          if ((profile != EEsProfile && version >= 450) || (profile == EEsProfile && version >= 320)) {\n 9127:             symbolTable.relateToOperator(\"memoryBarrierShared\", EOpMemoryBarrierShared);\n 9128:             symbolTable.relateToOperator(\"groupMemoryBarrier\", EOpGroupMemoryBarrier);\n 9129:             symbolTable.relateToOperator(\"subgroupMemoryBarrierShared\", EOpSubgroupMemoryBarrierShared);\n 9130          }\n 9131          break;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/intermOut.cpp:\n  863      case EOpEndPrimitive:  out.debug << \"EndPrimitive\";            break;\n  864  \n  865:     case EOpBarrier:                    out.debug << \"Barrier\";                    break;\n  866:     case EOpMemoryBarrier:              out.debug << \"MemoryBarrier\";              break;\n  867:     case EOpMemoryBarrierAtomicCounter: out.debug << \"MemoryBarrierAtomicCounter\"; break;\n  868:     case EOpMemoryBarrierBuffer:        out.debug << \"MemoryBarrierBuffer\";        break;\n  869:     case EOpMemoryBarrierImage:         out.debug << \"MemoryBarrierImage\";         break;\n  870:     case EOpMemoryBarrierShared:        out.debug << \"MemoryBarrierShared\";        break;\n  871:     case EOpGroupMemoryBarrier:         out.debug << \"GroupMemoryBarrier\";         break;\n  872  \n  873      case EOpReadInvocation:             out.debug << \"readInvocation\";        break;\n  ...\n  992      case EOpGenMul:                     out.debug << \"mul\";                   break;\n  993  \n  994:     case EOpAllMemoryBarrierWithGroupSync:    out.debug << \"AllMemoryBarrierWithGroupSync\";    break;\n  995:     case EOpDeviceMemoryBarrier:              out.debug << \"DeviceMemoryBarrier\";              break;\n  996:     case EOpDeviceMemoryBarrierWithGroupSync: out.debug << \"DeviceMemoryBarrierWithGroupSync\"; break;\n  997:     case EOpWorkgroupMemoryBarrier:           out.debug << \"WorkgroupMemoryBarrier\";           break;\n  998:     case EOpWorkgroupMemoryBarrierWithGroupSync: out.debug << \"WorkgroupMemoryBarrierWithGroupSync\"; break;\n  999  \n 1000:     case EOpSubgroupBarrier:                 out.debug << \"subgroupBarrier\"; break;\n 1001:     case EOpSubgroupMemoryBarrier:           out.debug << \"subgroupMemoryBarrier\"; break;\n 1002:     case EOpSubgroupMemoryBarrierBuffer:     out.debug << \"subgroupMemoryBarrierBuffer\"; break;\n 1003:     case EOpSubgroupMemoryBarrierImage:      out.debug << \"subgroupMemoryBarrierImage\";   break;\n 1004:     case EOpSubgroupMemoryBarrierShared:     out.debug << \"subgroupMemoryBarrierShared\"; break;\n 1005      case EOpSubgroupElect:                   out.debug << \"subgroupElect\"; break;\n 1006      case EOpSubgroupAll:                     out.debug << \"subgroupAll\"; break;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/ParseHelper.cpp:\n 1445  #ifndef GLSLANG_WEB\n 1446      switch (op) {\n 1447:     case EOpBarrier:\n 1448          if (language == EShLangTessControl) {\n 1449              if (controlFlowNestingLevel > 0)\n 1450:                 error(loc, \"tessellation control barrier() cannot be placed within flow control\", \"\", \"\");\n 1451              if (! inMain)\n 1452:                 error(loc, \"tessellation control barrier() must be in main()\", \"\", \"\");\n 1453              else if (postEntryPointReturn)\n 1454:                 error(loc, \"tessellation control barrier() cannot be placed after a return from main()\", \"\", \"\");\n 1455          }\n 1456          break;\n ....\n 1752          break;\n 1753  \n 1754:     case EOpBarrier:\n 1755          storageClassSemantics = (*argp)[2]->getAsConstantUnion()->getConstArray()[0].getIConst();\n 1756          semantics = (*argp)[3]->getAsConstantUnion()->getConstArray()[0].getIConst();\n 1757          break;\n 1758:     case EOpMemoryBarrier:\n 1759          storageClassSemantics = (*argp)[1]->getAsConstantUnion()->getConstArray()[0].getIConst();\n 1760          semantics = (*argp)[2]->getAsConstantUnion()->getConstArray()[0].getIConst();\n ....\n 1795      }\n 1796  \n 1797:     if (callNode.getOp() == EOpMemoryBarrier) {\n 1798          if (!IsPow2(semantics & (gl_SemanticsAcquire | gl_SemanticsRelease | gl_SemanticsAcquireRelease))) {\n 1799              error(loc, \"Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or \"\n ....\n 1814          }\n 1815      }\n 1816:     if (callNode.getOp() == EOpMemoryBarrier) {\n 1817          if (storageClassSemantics == 0) {\n 1818              error(loc, \"Storage class semantics must not be zero\", fnCandidate.getName().c_str(), \"\");\n 1819          }\n 1820      }\n 1821:     if (callNode.getOp() == EOpBarrier && semantics != 0 && storageClassSemantics == 0) {\n 1822          error(loc, \"Storage class semantics must not be zero\", fnCandidate.getName().c_str(), \"\");\n 1823      }\n ....\n 1838      }\n 1839      if ((semantics & gl_SemanticsVolatile) &&\n 1840:         (callNode.getOp() == EOpMemoryBarrier || callNode.getOp() == EOpBarrier)) {\n 1841:         error(loc, \"gl_SemanticsVolatile must not be used with memoryBarrier or controlBarrier\",\n 1842                fnCandidate.getName().c_str(), \"\");\n 1843      }\n ....\n 2233          break;\n 2234  \n 2235:     case EOpBarrier:\n 2236:     case EOpMemoryBarrier:\n 2237          if (argp->size() > 0) {\n 2238              requireExtensions(loc, 1, &E_GL_KHR_memory_scope_semantics, fnCandidate.getName().c_str());\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/gtests/Hlsl.FromFile.cpp:\n  244          {\"hlsl.init2.frag\", \"main\"},\n  245          {\"hlsl.isfinite.frag\", \"main\"},\n  246:         {\"hlsl.intrinsics.barriers.comp\", \"ComputeShaderFunction\"},\n  247          {\"hlsl.intrinsics.comp\", \"ComputeShaderFunction\"},\n  248          {\"hlsl.intrinsics.evalfns.frag\", \"main\"},\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/gtests/Spv.FromFile.cpp:\n  220          // No tests yet for making sure break and continue from a nested loop\n  221          // goes to the innermost target.\n  222:         \"spv.barrier.vert\",\n  223          \"spv.do-simple.vert\",\n  224          \"spv.do-while-continue-break.vert\",\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/doc.cpp:\n 1174      case 222: return \"Bad\";\n 1175      case 223: return \"Bad\";\n 1176:     case 224: return \"OpControlBarrier\";\n 1177:     case 225: return \"OpMemoryBarrier\";\n 1178      case 226: return \"Bad\";\n 1179      case 227: return \"OpAtomicLoad\";\n ....\n 1467      InstructionDesc[OpEmitStreamVertex].setResultAndType(false, false);\n 1468      InstructionDesc[OpEndStreamPrimitive].setResultAndType(false, false);\n 1469:     InstructionDesc[OpControlBarrier].setResultAndType(false, false);\n 1470:     InstructionDesc[OpMemoryBarrier].setResultAndType(false, false);\n 1471      InstructionDesc[OpAtomicStore].setResultAndType(false, false);\n 1472      InstructionDesc[OpLoopMerge].setResultAndType(false, false);\n ....\n 2214      InstructionDesc[OpEndStreamPrimitive].operands.push(OperandId, \"'Stream'\");\n 2215  \n 2216:     InstructionDesc[OpControlBarrier].operands.push(OperandScope, \"'Execution'\");\n 2217:     InstructionDesc[OpControlBarrier].operands.push(OperandScope, \"'Memory'\");\n 2218:     InstructionDesc[OpControlBarrier].operands.push(OperandMemorySemantics, \"'Semantics'\");\n 2219  \n 2220:     InstructionDesc[OpMemoryBarrier].operands.push(OperandScope, \"'Memory'\");\n 2221:     InstructionDesc[OpMemoryBarrier].operands.push(OperandMemorySemantics, \"'Semantics'\");\n 2222  \n 2223      InstructionDesc[OpImageTexelPointer].operands.push(OperandId, \"'Image'\");\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/doc.h:\n  105      OpClassAtomic,\n  106      OpClassPrimitive,\n  107:     OpClassBarrier,\n  108      OpClassGroup,\n  109      OpClassDeviceSideEnqueue,\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp:\n 2660      case glslang::EOpEmitVertex:\n 2661      case glslang::EOpEndPrimitive:\n 2662:     case glslang::EOpBarrier:\n 2663:     case glslang::EOpMemoryBarrier:\n 2664:     case glslang::EOpMemoryBarrierAtomicCounter:\n 2665:     case glslang::EOpMemoryBarrierBuffer:\n 2666:     case glslang::EOpMemoryBarrierImage:\n 2667:     case glslang::EOpMemoryBarrierShared:\n 2668:     case glslang::EOpGroupMemoryBarrier:\n 2669:     case glslang::EOpDeviceMemoryBarrier:\n 2670:     case glslang::EOpAllMemoryBarrierWithGroupSync:\n 2671:     case glslang::EOpDeviceMemoryBarrierWithGroupSync:\n 2672:     case glslang::EOpWorkgroupMemoryBarrier:\n 2673:     case glslang::EOpWorkgroupMemoryBarrierWithGroupSync:\n 2674:     case glslang::EOpSubgroupBarrier:\n 2675:     case glslang::EOpSubgroupMemoryBarrier:\n 2676:     case glslang::EOpSubgroupMemoryBarrierBuffer:\n 2677:     case glslang::EOpSubgroupMemoryBarrierImage:\n 2678:     case glslang::EOpSubgroupMemoryBarrierShared:\n 2679          noReturnValue = true;\n 2680          // These all have 0 operands and will naturally finish up in the code below for 0 operands\n ....\n 7548          libCall = spv::GLSLstd450Refract;\n 7549          break;\n 7550:     case glslang::EOpBarrier:\n 7551          {\n 7552:             // This is for the extended controlBarrier function, with four operands.\n 7553:             // The unextended barrier() goes through createNoArgOperation.\n 7554              assert(operands.size() == 4);\n 7555              unsigned int executionScope = builder.getConstantScalar(operands[0]);\n 7556              unsigned int memoryScope = builder.getConstantScalar(operands[1]);\n 7557              unsigned int semantics = builder.getConstantScalar(operands[2]) | builder.getConstantScalar(operands[3]);\n 7558:             builder.createControlBarrier((spv::Scope)executionScope, (spv::Scope)memoryScope,\n 7559                  (spv::MemorySemanticsMask)semantics);\n 7560              if (semantics & (spv::MemorySemanticsMakeAvailableKHRMask |\n ....\n 7571          }\n 7572          break;\n 7573:     case glslang::EOpMemoryBarrier:\n 7574          {\n 7575:             // This is for the extended memoryBarrier function, with three operands.\n 7576:             // The unextended memoryBarrier() goes through createNoArgOperation.\n 7577              assert(operands.size() == 3);\n 7578              unsigned int memoryScope = builder.getConstantScalar(operands[0]);\n 7579              unsigned int semantics = builder.getConstantScalar(operands[1]) | builder.getConstantScalar(operands[2]);\n 7580:             builder.createMemoryBarrier((spv::Scope)memoryScope, (spv::MemorySemanticsMask)semantics);\n 7581              if (semantics & (spv::MemorySemanticsMakeAvailableKHRMask |\n 7582                               spv::MemorySemanticsMakeVisibleKHRMask |\n ....\n 7939  spv::Id TGlslangToSpvTraverser::createNoArgOperation(glslang::TOperator op, spv::Decoration precision, spv::Id typeId)\n 7940  {\n 7941:     // GLSL memory barriers use queuefamily scope in new model, device scope in old model\n 7942:     spv::Scope memoryBarrierScope = glslangIntermediate->usingVulkanMemoryModel() ?\n 7943          spv::ScopeQueueFamilyKHR : spv::ScopeDevice;\n 7944  \n 7945      switch (op) {\n 7946:     case glslang::EOpBarrier:\n 7947          if (glslangIntermediate->getStage() == EShLangTessControl) {\n 7948              if (glslangIntermediate->usingVulkanMemoryModel()) {\n 7949:                 builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeWorkgroup,\n 7950                                               spv::MemorySemanticsOutputMemoryKHRMask |\n 7951                                               spv::MemorySemanticsAcquireReleaseMask);\n 7952                  builder.addCapability(spv::CapabilityVulkanMemoryModelKHR);\n 7953              } else {\n 7954:                 builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeInvocation, spv::MemorySemanticsMaskNone);\n 7955              }\n 7956          } else {\n 7957:             builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeWorkgroup,\n 7958                                              spv::MemorySemanticsWorkgroupMemoryMask |\n 7959                                              spv::MemorySemanticsAcquireReleaseMask);\n 7960          }\n 7961          return 0;\n 7962:     case glslang::EOpMemoryBarrier:\n 7963:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsAllMemory |\n 7964                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7965          return 0;\n 7966:     case glslang::EOpMemoryBarrierBuffer:\n 7967:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsUniformMemoryMask |\n 7968                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7969          return 0;\n 7970:     case glslang::EOpMemoryBarrierShared:\n 7971:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsWorkgroupMemoryMask |\n 7972                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7973          return 0;\n 7974:     case glslang::EOpGroupMemoryBarrier:\n 7975:         builder.createMemoryBarrier(spv::ScopeWorkgroup, spv::MemorySemanticsAllMemory |\n 7976                                                           spv::MemorySemanticsAcquireReleaseMask);\n 7977          return 0;\n 7978  #ifndef GLSLANG_WEB\n 7979:     case glslang::EOpMemoryBarrierAtomicCounter:\n 7980:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsAtomicCounterMemoryMask |\n 7981                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7982          return 0;\n 7983:     case glslang::EOpMemoryBarrierImage:\n 7984:         builder.createMemoryBarrier(memoryBarrierScope, spv::MemorySemanticsImageMemoryMask |\n 7985                                                          spv::MemorySemanticsAcquireReleaseMask);\n 7986          return 0;\n 7987:     case glslang::EOpAllMemoryBarrierWithGroupSync:\n 7988:         builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeDevice,\n 7989                                          spv::MemorySemanticsAllMemory |\n 7990                                          spv::MemorySemanticsAcquireReleaseMask);\n 7991          return 0;\n 7992:     case glslang::EOpDeviceMemoryBarrier:\n 7993:         builder.createMemoryBarrier(spv::ScopeDevice, spv::MemorySemanticsUniformMemoryMask |\n 7994                                                        spv::MemorySemanticsImageMemoryMask |\n 7995                                                        spv::MemorySemanticsAcquireReleaseMask);\n 7996          return 0;\n 7997:     case glslang::EOpDeviceMemoryBarrierWithGroupSync:\n 7998:         builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeDevice, spv::MemorySemanticsUniformMemoryMask |\n 7999                                                                              spv::MemorySemanticsImageMemoryMask |\n 8000                                                                              spv::MemorySemanticsAcquireReleaseMask);\n 8001          return 0;\n 8002:     case glslang::EOpWorkgroupMemoryBarrier:\n 8003:         builder.createMemoryBarrier(spv::ScopeWorkgroup, spv::MemorySemanticsWorkgroupMemoryMask |\n 8004                                                           spv::MemorySemanticsAcquireReleaseMask);\n 8005          return 0;\n 8006:     case glslang::EOpWorkgroupMemoryBarrierWithGroupSync:\n 8007:         builder.createControlBarrier(spv::ScopeWorkgroup, spv::ScopeWorkgroup,\n 8008                                          spv::MemorySemanticsWorkgroupMemoryMask |\n 8009                                          spv::MemorySemanticsAcquireReleaseMask);\n 8010          return 0;\n 8011:     case glslang::EOpSubgroupBarrier:\n 8012:         builder.createControlBarrier(spv::ScopeSubgroup, spv::ScopeSubgroup, spv::MemorySemanticsAllMemory |\n 8013                                                                               spv::MemorySemanticsAcquireReleaseMask);\n 8014          return spv::NoResult;\n 8015:     case glslang::EOpSubgroupMemoryBarrier:\n 8016:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsAllMemory |\n 8017                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8018          return spv::NoResult;\n 8019:     case glslang::EOpSubgroupMemoryBarrierBuffer:\n 8020:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsUniformMemoryMask |\n 8021                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8022          return spv::NoResult;\n 8023:     case glslang::EOpSubgroupMemoryBarrierImage:\n 8024:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsImageMemoryMask |\n 8025                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8026          return spv::NoResult;\n 8027:     case glslang::EOpSubgroupMemoryBarrierShared:\n 8028:         builder.createMemoryBarrier(spv::ScopeSubgroup, spv::MemorySemanticsWorkgroupMemoryMask |\n 8029                                                          spv::MemorySemanticsAcquireReleaseMask);\n 8030          return spv::NoResult;\n ....\n 8667      // return 1; // start\n 8668      // return 2; // EOpAtomicCounterDecrement gets a post decrement, to map between GLSL -> SPIR-V\n 8669:     // return 3; // change/correct barrier-instruction operands, to match memory model group decisions\n 8670      // return 4; // some deeper access chains: for dynamic vector component, and local Boolean component\n 8671      // return 5; // make OpArrayLength result type be an int with signedness of 0\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/spirv.hpp:\n  859      CapabilityMultiViewport = 57,\n  860      CapabilitySubgroupDispatch = 58,\n  861:     CapabilityNamedBarrier = 59,\n  862      CapabilityPipeStorage = 60,\n  863      CapabilityGroupNonUniform = 61,\n  ...\n 1231      OpEmitStreamVertex = 220,\n 1232      OpEndStreamPrimitive = 221,\n 1233:     OpControlBarrier = 224,\n 1234:     OpMemoryBarrier = 225,\n 1235      OpAtomicLoad = 227,\n 1236      OpAtomicStore = 228,\n ....\n 1326      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1327      OpGetKernelMaxNumSubgroups = 326,\n 1328:     OpTypeNamedBarrier = 327,\n 1329:     OpNamedBarrierInitialize = 328,\n 1330:     OpMemoryNamedBarrier = 329,\n 1331      OpModuleProcessed = 330,\n 1332      OpExecutionModeId = 331,\n ....\n 1801      case OpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1802      case OpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1803:     case OpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1804:     case OpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1805      case OpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1806      case OpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1896      case OpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1897      case OpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1898:     case OpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1899:     case OpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1900:     case OpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1901      case OpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1902      case OpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.cpp:\n 1631  }\n 1632  \n 1633: void Builder::createControlBarrier(Scope execution, Scope memory, MemorySemanticsMask semantics)\n 1634  {\n 1635:     Instruction* op = new Instruction(OpControlBarrier);\n 1636      op->addIdOperand(makeUintConstant(execution));\n 1637      op->addIdOperand(makeUintConstant(memory));\n ....\n 1640  }\n 1641  \n 1642: void Builder::createMemoryBarrier(unsigned executionScope, unsigned memorySemantics)\n 1643  {\n 1644:     Instruction* op = new Instruction(OpMemoryBarrier);\n 1645      op->addIdOperand(makeUintConstant(executionScope));\n 1646      op->addIdOperand(makeUintConstant(memorySemantics));\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.h:\n  392      void createNoResultOp(Op, const std::vector<Id>& operands);\n  393      void createNoResultOp(Op, const std::vector<IdImmediate>& operands);\n  394:     void createControlBarrier(Scope execution, Scope memory, MemorySemanticsMask);\n  395:     void createMemoryBarrier(unsigned executionScope, unsigned memorySemantics);\n  396      Id createUnaryOp(Op, Id typeId, Id operand);\n  397      Id createBinOp(Op, Id typeId, Id operand1, Id operand2);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/150.tesc:\n   10  void main()\n   11  {\n   12:     barrier();\n   13  \n   14      int a = gl_MaxTessControlInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/150.tese:\n   10  void main()\n   11  {\n   12:     barrier(); // ERROR\n   13  \n   14      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/310.comp:\n   27  void main()\n   28  {\n   29:     barrier();\n   30:     memoryBarrier();\n   31:     memoryBarrierAtomicCounter();\n   32:     memoryBarrierBuffer();\n   33:     memoryBarrierShared();\n   34:     memoryBarrierImage();\n   35:     groupMemoryBarrier();\n   36      value = int(values[gl_LocalInvocationIndex]);\n   37  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/310.tesc:\n   15  void main()\n   16  {\n   17:     barrier();\n   18  \n   19      int a = gl_MaxTessControlInputComponents +\n   ..\n   39  \n   40      if (a > 10)\n   41:         barrier();           // ERROR\n   42      else\n   43:         barrier();           // ERROR\n   44  \n   45:     barrier();\n   46  \n   47      do {\n   48:         barrier();           // ERROR\n   49      } while (a > 10);\n   50  \n   51      switch (a) {\n   52      default:\n   53:         barrier();           // ERROR\n   54          break;\n   55      }\n   56:     a < 12 ? a : (barrier(), a); // ERROR\n   57      {\n   58:         barrier();\n   59      }\n   60  \n   61      return;\n   62  \n   63:     barrier();               // ERROR\n   64  }\n   65  \n   ..\n   71      gl_out[4].gl_Position;  // ERROR, out of range\n   72  \n   73:     barrier();              // ERROR, not in main\n   74  }\n   75  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/310.tese:\n   24  void main()\n   25  {\n   26:     barrier(); // ERROR\n   27  \n   28      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/320.tesc:\n   13  void main()\n   14  {\n   15:     barrier();\n   16  \n   17      int a = gl_MaxTessControlInputComponents +\n   ..\n   37  \n   38      if (a > 10)\n   39:         barrier();           // ERROR\n   40      else\n   41:         barrier();           // ERROR\n   42  \n   43:     barrier();\n   44  \n   45      do {\n   46:         barrier();           // ERROR\n   47      } while (a > 10);\n   48  \n   49      switch (a) {\n   50      default:\n   51:         barrier();           // ERROR\n   52          break;\n   53      }\n   54:     a < 12 ? a : (barrier(), a); // ERROR\n   55      {\n   56:         barrier();\n   57      }\n   58  \n   59      return;\n   60  \n   61:     barrier();               // ERROR\n   62  }\n   63  \n   ..\n   69      gl_out[4].gl_Position;  // ERROR, out of range\n   70  \n   71:     barrier();              // ERROR, not in main\n   72  }\n   73  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/320.tese:\n   20  void main()\n   21  {\n   22:     barrier(); // ERROR\n   23  \n   24      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/400.tesc:\n   13  void main()\n   14  {\n   15:     barrier();\n   16  \n   17      int a = gl_MaxTessControlInputComponents +\n   ..\n   37  \n   38      if (a > 10)\n   39:         barrier();           // ERROR\n   40      else\n   41:         barrier();           // ERROR\n   42  \n   43:     barrier();\n   44  \n   45      do {\n   46:         barrier();           // ERROR\n   47      } while (a > 10);\n   48  \n   49      switch (a) {\n   50      default:\n   51:         barrier();           // ERROR\n   52          break;\n   53      }\n   54:     a < 12 ? a : (barrier(), a); // ERROR\n   55      {\n   56:         barrier();\n   57      }\n   58  \n   59      return;\n   60  \n   61:     barrier();               // ERROR\n   62  }\n   63  \n   ..\n   69      gl_out[4].gl_PointSize;  // ERROR\n   70  \n   71:     barrier();                // ERROR\n   72  }\n   73  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/400.tese:\n   20  void main()\n   21  {\n   22:     barrier(); // ERROR\n   23  \n   24      int a = gl_MaxTessEvaluationInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/420.comp:\n   21              gl_MaxComputeAtomicCounterBuffers;\n   22  \n   23:     barrier();\n   24:     memoryBarrier();\n   25:     memoryBarrierAtomicCounter();\n   26:     memoryBarrierBuffer();\n   27:     memoryBarrierImage();\n   28:     memoryBarrierShared();\n   29:     groupMemoryBarrier();\n   30  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/420.tese:\n   82  void main()\n   83  {\n   84:     memoryBarrier();\n   85  \n   86      if (constructed == curlybad1)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/430.comp:\n   27  void main()\n   28  {\n   29:     barrier();\n   30:     memoryBarrier();\n   31:     memoryBarrierAtomicCounter();\n   32:     memoryBarrierBuffer();\n   33:     memoryBarrierShared();\n   34:     memoryBarrierImage();\n   35:     groupMemoryBarrier();\n   36      value = int(values[gl_LocalInvocationIndex]);\n   37  \n   38      int a;\n   39      if (a > 10)\n   40:         barrier();\n   41  }\n   42  \n   ..\n   68      ro.values[2] = 4.7;             // ERROR, readonly\n   69      ro.values.length();\n   70:     barrier();\n   71  }\n   72  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/430.vert:\n  146  shared vec4 sharedv;                // ERROR\n  147  \n  148: void fooBarrier()\n  149  {\n  150:     barrier();                       // ERROR\n  151:     memoryBarrier();\n  152:     memoryBarrierAtomicCounter();\n  153:     memoryBarrierBuffer();\n  154:     memoryBarrierShared();           // ERROR\n  155:     memoryBarrierImage();\n  156:     groupMemoryBarrier();            // ERROR\n  157  }\n  158  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/150.tesc.out:\n    7  0:10    Function Parameters: \n    8  0:12    Sequence\n    9: 0:12      Barrier ( global void)\n   10  0:14      Sequence\n   11  0:14        move second child to first child ( temp int)\n   ..\n  105  \n  106  150.tese\n  107: ERROR: 0:12: 'barrier' : no matching overloaded function found \n  108  ERROR: 1 compilation errors.  No code generated.\n  109  \n  ...\n  215  ERROR: 0:8: 'fractional_even_spacing' : unrecognized layout identifier, or qualifier requires assignment (e.g., binding = 4) \n  216  ERROR: 0:10: 'patch' : can only use on output in tessellation-control shader \n  217: ERROR: 0:39: '' : tessellation control barrier() cannot be placed within flow control \n  218: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n  219: ERROR: 0:46: '' : tessellation control barrier() cannot be placed within flow control \n  220: ERROR: 0:51: '' : tessellation control barrier() cannot be placed within flow control \n  221: ERROR: 0:54: '' : tessellation control barrier() cannot be placed within flow control \n  222: ERROR: 0:61: '' : tessellation control barrier() cannot be placed after a return from main() \n  223  ERROR: 0:64: 'vertices' : can only apply to 'out' \n  224  ERROR: 0:65: 'vertices' : cannot change previously set layout value \n  225  ERROR: 0:69: '[' :  array index out of range '4'\n  226: ERROR: 0:71: '' : tessellation control barrier() must be in main() \n  227  ERROR: 0:74: 'in' : type must be an array: ina\n  228  ERROR: 0:76: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n  ...\n  246  0:13    Function Parameters: \n  247  0:15    Sequence\n  248: 0:15      Barrier ( global void)\n  249  0:17      Sequence\n  250  0:17        move second child to first child ( temp int)\n  ...\n  345  0:38            10 (const int)\n  346  0:38        true case\n  347: 0:39        Barrier ( global void)\n  348  0:38        false case\n  349: 0:41        Barrier ( global void)\n  350: 0:43      Barrier ( global void)\n  351  0:47      Loop with condition not tested first\n  352  0:47        Loop Condition\n  ...\n  357  0:47        Loop Body\n  358  0:46        Sequence\n  359: 0:46          Barrier ( global void)\n  360  0:49      switch\n  361  0:49      condition\n  ...\n  365  0:50          default: \n  366  0:?           Sequence\n  367: 0:51            Barrier ( global void)\n  368  0:52            Branch: Break\n  369  0:54      Test condition and select ( temp int)\n  ...\n  377  0:54        false case\n  378  0:54        Comma ( temp int)\n  379: 0:54          Barrier ( global void)\n  380  0:54          'a' ( temp int)\n  381  0:56      Sequence\n  382: 0:56        Barrier ( global void)\n  383  0:59      Branch: Return\n  384: 0:61      Barrier ( global void)\n  385  0:67  Function Definition: foo( ( global void)\n  386  0:67    Function Parameters: \n  ...\n  393  0:69        Constant:\n  394  0:69          1 (const int)\n  395: 0:71      Barrier ( global void)\n  396  0:91  Function Definition: foop( ( global void)\n  397  0:91    Function Parameters: \n  ...\n  449  ERROR: 0:13: 'fractional_even_spacing' : cannot change previously set vertex spacing \n  450  ERROR: 0:18: 'patch' : can only use on input in tessellation-evaluation shader \n  451: ERROR: 0:22: 'barrier' : no matching overloaded function found \n  452  ERROR: 0:47: 'patch' : cannot use interpolation qualifiers with patch \n  453  ERROR: 0:48: 'patch' : cannot use interpolation qualifiers with patch \n  ...\n  832  0:82    Function Parameters: \n  833  0:84    Sequence\n  834: 0:84      MemoryBarrier ( global void)\n  835  0:86      Test condition and select ( temp void)\n  836  0:86        Condition\n  ...\n  978  0:10    Function Parameters: \n  979  0:12    Sequence\n  980: 0:12      Barrier ( global void)\n  981  0:14      Sequence\n  982  0:14        move second child to first child ( temp int)\n  ...\n 1073  0:13    Function Parameters: \n 1074  0:15    Sequence\n 1075: 0:15      Barrier ( global void)\n 1076  0:17      Sequence\n 1077  0:17        move second child to first child ( temp int)\n ....\n 1172  0:38            10 (const int)\n 1173  0:38        true case\n 1174: 0:39        Barrier ( global void)\n 1175  0:38        false case\n 1176: 0:41        Barrier ( global void)\n 1177: 0:43      Barrier ( global void)\n 1178  0:47      Loop with condition not tested first\n 1179  0:47        Loop Condition\n ....\n 1184  0:47        Loop Body\n 1185  0:46        Sequence\n 1186: 0:46          Barrier ( global void)\n 1187  0:49      switch\n 1188  0:49      condition\n ....\n 1192  0:50          default: \n 1193  0:?           Sequence\n 1194: 0:51            Barrier ( global void)\n 1195  0:52            Branch: Break\n 1196  0:54      Test condition and select ( temp int)\n ....\n 1204  0:54        false case\n 1205  0:54        Comma ( temp int)\n 1206: 0:54          Barrier ( global void)\n 1207  0:54          'a' ( temp int)\n 1208  0:56      Sequence\n 1209: 0:56        Barrier ( global void)\n 1210  0:59      Branch: Return\n 1211: 0:61      Barrier ( global void)\n 1212  0:8  Function Definition: main( ( global void)\n 1213  0:8    Function Parameters: \n ....\n 1553  0:82    Function Parameters: \n 1554  0:84    Sequence\n 1555: 0:84      MemoryBarrier ( global void)\n 1556  0:86      Test condition and select ( temp void)\n 1557  0:86        Condition\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/310.comp.out:\n   97  0:27    Function Parameters: \n   98  0:29    Sequence\n   99: 0:29      Barrier ( global void)\n  100: 0:30      MemoryBarrier ( global void)\n  101: 0:31      MemoryBarrierAtomicCounter ( global void)\n  102: 0:32      MemoryBarrierBuffer ( global void)\n  103: 0:33      MemoryBarrierShared ( global void)\n  104: 0:34      MemoryBarrierImage ( global void)\n  105: 0:35      GroupMemoryBarrier ( global void)\n  106  0:36      move second child to first child ( temp highp int)\n  107  0:36        value: direct index for structure (layout( column_major shared) buffer highp int)\n  ...\n  535  0:27    Function Parameters: \n  536  0:29    Sequence\n  537: 0:29      Barrier ( global void)\n  538: 0:30      MemoryBarrier ( global void)\n  539: 0:31      MemoryBarrierAtomicCounter ( global void)\n  540: 0:32      MemoryBarrierBuffer ( global void)\n  541: 0:33      MemoryBarrierShared ( global void)\n  542: 0:34      MemoryBarrierImage ( global void)\n  543: 0:35      GroupMemoryBarrier ( global void)\n  544  0:36      move second child to first child ( temp highp int)\n  545  0:36        value: direct index for structure (layout( column_major shared) buffer highp int)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/310.tesc.out:\n   15  ERROR: 0:35: 'expression' :  left of '[' is not of type array, matrix, or vector  \n   16  ERROR: 0:35: 'assign' :  l-value required (can't modify a const)\n   17: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n   18: ERROR: 0:43: '' : tessellation control barrier() cannot be placed within flow control \n   19: ERROR: 0:48: '' : tessellation control barrier() cannot be placed within flow control \n   20: ERROR: 0:53: '' : tessellation control barrier() cannot be placed within flow control \n   21: ERROR: 0:56: '' : tessellation control barrier() cannot be placed within flow control \n   22: ERROR: 0:63: '' : tessellation control barrier() cannot be placed after a return from main() \n   23  ERROR: 0:66: 'vertices' : can only apply to 'out' \n   24  ERROR: 0:67: 'vertices' : cannot change previously set layout value \n   25  ERROR: 0:71: '[' :  array index out of range '4'\n   26: ERROR: 0:73: '' : tessellation control barrier() must be in main() \n   27  ERROR: 0:76: 'in' : type must be an array: ina\n   28  ERROR: 0:78: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n   ..\n   63  0:15    Function Parameters: \n   64  0:17    Sequence\n   65: 0:17      Barrier ( global void)\n   66  0:19      Sequence\n   67  0:19        move second child to first child ( temp highp int)\n   ..\n  147  0:40            10 (const int)\n  148  0:40        true case\n  149: 0:41        Barrier ( global void)\n  150  0:40        false case\n  151: 0:43        Barrier ( global void)\n  152: 0:45      Barrier ( global void)\n  153  0:49      Loop with condition not tested first\n  154  0:49        Loop Condition\n  ...\n  159  0:49        Loop Body\n  160  0:48        Sequence\n  161: 0:48          Barrier ( global void)\n  162  0:51      switch\n  163  0:51      condition\n  ...\n  167  0:52          default: \n  168  0:?           Sequence\n  169: 0:53            Barrier ( global void)\n  170  0:54            Branch: Break\n  171  0:56      Test condition and select ( temp highp int)\n  ...\n  179  0:56        false case\n  180  0:56        Comma ( temp highp int)\n  181: 0:56          Barrier ( global void)\n  182  0:56          'a' ( temp highp int)\n  183  0:58      Sequence\n  184: 0:58        Barrier ( global void)\n  185  0:61      Branch: Return\n  186: 0:63      Barrier ( global void)\n  187  0:69  Function Definition: foo( ( global void)\n  188  0:69    Function Parameters: \n  ...\n  195  0:71        Constant:\n  196  0:71          0 (const int)\n  197: 0:73      Barrier ( global void)\n  198  0:92  Function Definition: foop( ( global void)\n  199  0:92    Function Parameters: \n  ...\n  433  0:15    Function Parameters: \n  434  0:17    Sequence\n  435: 0:17      Barrier ( global void)\n  436  0:19      Sequence\n  437  0:19        move second child to first child ( temp highp int)\n  ...\n  517  0:40            10 (const int)\n  518  0:40        true case\n  519: 0:41        Barrier ( global void)\n  520  0:40        false case\n  521: 0:43        Barrier ( global void)\n  522: 0:45      Barrier ( global void)\n  523  0:49      Loop with condition not tested first\n  524  0:49        Loop Condition\n  ...\n  529  0:49        Loop Body\n  530  0:48        Sequence\n  531: 0:48          Barrier ( global void)\n  532  0:51      switch\n  533  0:51      condition\n  ...\n  537  0:52          default: \n  538  0:?           Sequence\n  539: 0:53            Barrier ( global void)\n  540  0:54            Branch: Break\n  541  0:56      Test condition and select ( temp highp int)\n  ...\n  549  0:56        false case\n  550  0:56        Comma ( temp highp int)\n  551: 0:56          Barrier ( global void)\n  552  0:56          'a' ( temp highp int)\n  553  0:58      Sequence\n  554: 0:58        Barrier ( global void)\n  555  0:61      Branch: Return\n  556: 0:63      Barrier ( global void)\n  557  0:?   Linker Objects\n  558  0:?     'gl_out' ( out 4-element array of block{ out highp 4-component vector of float Position gl_Position,  out highp float PointSize gl_PointSize})\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/310.tese.out:\n    7  ERROR: 0:17: 'fractional_even_spacing' : cannot change previously set vertex spacing \n    8  ERROR: 0:22: 'patch' : can only use on input in tessellation-evaluation shader \n    9: ERROR: 0:26: 'barrier' : no matching overloaded function found \n   10  ERROR: 0:37: 'gl_PointSize' : required extension not requested: Possible extensions include:\n   11  GL_EXT_tessellation_point_size\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/320.tesc.out:\n   15  ERROR: 0:33: 'expression' :  left of '[' is not of type array, matrix, or vector  \n   16  ERROR: 0:33: 'assign' :  l-value required (can't modify a const)\n   17: ERROR: 0:39: '' : tessellation control barrier() cannot be placed within flow control \n   18: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n   19: ERROR: 0:46: '' : tessellation control barrier() cannot be placed within flow control \n   20: ERROR: 0:51: '' : tessellation control barrier() cannot be placed within flow control \n   21: ERROR: 0:54: '' : tessellation control barrier() cannot be placed within flow control \n   22: ERROR: 0:61: '' : tessellation control barrier() cannot be placed after a return from main() \n   23  ERROR: 0:64: 'vertices' : can only apply to 'out' \n   24  ERROR: 0:65: 'vertices' : cannot change previously set layout value \n   25  ERROR: 0:69: '[' :  array index out of range '4'\n   26: ERROR: 0:71: '' : tessellation control barrier() must be in main() \n   27  ERROR: 0:74: 'in' : type must be an array: ina\n   28  ERROR: 0:76: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n   ..\n   57  0:13    Function Parameters: \n   58  0:15    Sequence\n   59: 0:15      Barrier ( global void)\n   60  0:17      Sequence\n   61  0:17        move second child to first child ( temp highp int)\n   ..\n  141  0:38            10 (const int)\n  142  0:38        true case\n  143: 0:39        Barrier ( global void)\n  144  0:38        false case\n  145: 0:41        Barrier ( global void)\n  146: 0:43      Barrier ( global void)\n  147  0:47      Loop with condition not tested first\n  148  0:47        Loop Condition\n  ...\n  153  0:47        Loop Body\n  154  0:46        Sequence\n  155: 0:46          Barrier ( global void)\n  156  0:49      switch\n  157  0:49      condition\n  ...\n  161  0:50          default: \n  162  0:?           Sequence\n  163: 0:51            Barrier ( global void)\n  164  0:52            Branch: Break\n  165  0:54      Test condition and select ( temp highp int)\n  ...\n  173  0:54        false case\n  174  0:54        Comma ( temp highp int)\n  175: 0:54          Barrier ( global void)\n  176  0:54          'a' ( temp highp int)\n  177  0:56      Sequence\n  178: 0:56        Barrier ( global void)\n  179  0:59      Branch: Return\n  180: 0:61      Barrier ( global void)\n  181  0:67  Function Definition: foo( ( global void)\n  182  0:67    Function Parameters: \n  ...\n  189  0:69        Constant:\n  190  0:69          0 (const int)\n  191: 0:71      Barrier ( global void)\n  192  0:102  Function Definition: pointSize2( ( global void)\n  193  0:102    Function Parameters: \n  ...\n  415  0:13    Function Parameters: \n  416  0:15    Sequence\n  417: 0:15      Barrier ( global void)\n  418  0:17      Sequence\n  419  0:17        move second child to first child ( temp highp int)\n  ...\n  499  0:38            10 (const int)\n  500  0:38        true case\n  501: 0:39        Barrier ( global void)\n  502  0:38        false case\n  503: 0:41        Barrier ( global void)\n  504: 0:43      Barrier ( global void)\n  505  0:47      Loop with condition not tested first\n  506  0:47        Loop Condition\n  ...\n  511  0:47        Loop Body\n  512  0:46        Sequence\n  513: 0:46          Barrier ( global void)\n  514  0:49      switch\n  515  0:49      condition\n  ...\n  519  0:50          default: \n  520  0:?           Sequence\n  521: 0:51            Barrier ( global void)\n  522  0:52            Branch: Break\n  523  0:54      Test condition and select ( temp highp int)\n  ...\n  531  0:54        false case\n  532  0:54        Comma ( temp highp int)\n  533: 0:54          Barrier ( global void)\n  534  0:54          'a' ( temp highp int)\n  535  0:56      Sequence\n  536: 0:56        Barrier ( global void)\n  537  0:59      Branch: Return\n  538: 0:61      Barrier ( global void)\n  539  0:?   Linker Objects\n  540  0:?     'gl_out' ( out 4-element array of block{ out highp 4-component vector of float Position gl_Position,  out highp float PointSize gl_PointSize})\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/320.tese.out:\n    7  ERROR: 0:13: 'fractional_even_spacing' : cannot change previously set vertex spacing \n    8  ERROR: 0:18: 'patch' : can only use on input in tessellation-evaluation shader \n    9: ERROR: 0:22: 'barrier' : no matching overloaded function found \n   10  ERROR: 0:33: 'gl_PointSize' : required extension not requested: Possible extensions include:\n   11  GL_EXT_tessellation_point_size\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/400.tesc.out:\n    4  ERROR: 0:8: 'fractional_even_spacing' : unrecognized layout identifier, or qualifier requires assignment (e.g., binding = 4) \n    5  ERROR: 0:10: 'patch' : can only use on output in tessellation-control shader \n    6: ERROR: 0:39: '' : tessellation control barrier() cannot be placed within flow control \n    7: ERROR: 0:41: '' : tessellation control barrier() cannot be placed within flow control \n    8: ERROR: 0:46: '' : tessellation control barrier() cannot be placed within flow control \n    9: ERROR: 0:51: '' : tessellation control barrier() cannot be placed within flow control \n   10: ERROR: 0:54: '' : tessellation control barrier() cannot be placed within flow control \n   11: ERROR: 0:61: '' : tessellation control barrier() cannot be placed after a return from main() \n   12  ERROR: 0:64: 'vertices' : can only apply to 'out' \n   13  ERROR: 0:65: 'vertices' : cannot change previously set layout value \n   14  ERROR: 0:69: '[' :  array index out of range '4'\n   15: ERROR: 0:71: '' : tessellation control barrier() must be in main() \n   16  ERROR: 0:74: 'in' : type must be an array: ina\n   17  ERROR: 0:76: '[]' : tessellation input array size must be gl_MaxPatchVertices or implicitly sized \n   ..\n   35  0:13    Function Parameters: \n   36  0:15    Sequence\n   37: 0:15      Barrier ( global void)\n   38  0:17      Sequence\n   39  0:17        move second child to first child ( temp int)\n   ..\n  134  0:38            10 (const int)\n  135  0:38        true case\n  136: 0:39        Barrier ( global void)\n  137  0:38        false case\n  138: 0:41        Barrier ( global void)\n  139: 0:43      Barrier ( global void)\n  140  0:47      Loop with condition not tested first\n  141  0:47        Loop Condition\n  ...\n  146  0:47        Loop Body\n  147  0:46        Sequence\n  148: 0:46          Barrier ( global void)\n  149  0:49      switch\n  150  0:49      condition\n  ...\n  154  0:50          default: \n  155  0:?           Sequence\n  156: 0:51            Barrier ( global void)\n  157  0:52            Branch: Break\n  158  0:54      Test condition and select ( temp int)\n  ...\n  166  0:54        false case\n  167  0:54        Comma ( temp int)\n  168: 0:54          Barrier ( global void)\n  169  0:54          'a' ( temp int)\n  170  0:56      Sequence\n  171: 0:56        Barrier ( global void)\n  172  0:59      Branch: Return\n  173: 0:61      Barrier ( global void)\n  174  0:67  Function Definition: foo( ( global void)\n  175  0:67    Function Parameters: \n  ...\n  182  0:69        Constant:\n  183  0:69          1 (const int)\n  184: 0:71      Barrier ( global void)\n  185  0:91  Function Definition: foop( ( global void)\n  186  0:91    Function Parameters: \n  ...\n  243  0:13    Function Parameters: \n  244  0:15    Sequence\n  245: 0:15      Barrier ( global void)\n  246  0:17      Sequence\n  247  0:17        move second child to first child ( temp int)\n  ...\n  342  0:38            10 (const int)\n  343  0:38        true case\n  344: 0:39        Barrier ( global void)\n  345  0:38        false case\n  346: 0:41        Barrier ( global void)\n  347: 0:43      Barrier ( global void)\n  348  0:47      Loop with condition not tested first\n  349  0:47        Loop Condition\n  ...\n  354  0:47        Loop Body\n  355  0:46        Sequence\n  356: 0:46          Barrier ( global void)\n  357  0:49      switch\n  358  0:49      condition\n  ...\n  362  0:50          default: \n  363  0:?           Sequence\n  364: 0:51            Barrier ( global void)\n  365  0:52            Branch: Break\n  366  0:54      Test condition and select ( temp int)\n  ...\n  374  0:54        false case\n  375  0:54        Comma ( temp int)\n  376: 0:54          Barrier ( global void)\n  377  0:54          'a' ( temp int)\n  378  0:56      Sequence\n  379: 0:56        Barrier ( global void)\n  380  0:59      Branch: Return\n  381: 0:61      Barrier ( global void)\n  382  0:?   Linker Objects\n  383  0:?     'gl_out' ( out 4-element array of block{ out 4-component vector of float Position gl_Position,  out float PointSize gl_PointSize,  out 2-element array of float ClipDistance gl_ClipDistance})\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/400.tese.out:\n    7  ERROR: 0:13: 'fractional_even_spacing' : cannot change previously set vertex spacing \n    8  ERROR: 0:18: 'patch' : can only use on input in tessellation-evaluation shader \n    9: ERROR: 0:22: 'barrier' : no matching overloaded function found \n   10  ERROR: 0:47: 'patch' : cannot use interpolation qualifiers with patch \n   11  ERROR: 0:48: 'patch' : cannot use interpolation qualifiers with patch \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/420.comp.out:\n   46  0:17        Constant:\n   47  0:17          1057.000000\n   48: 0:23      Barrier ( global void)\n   49: 0:24      MemoryBarrier ( global void)\n   50: 0:25      MemoryBarrierAtomicCounter ( global void)\n   51: 0:26      MemoryBarrierBuffer ( global void)\n   52: 0:27      MemoryBarrierImage ( global void)\n   53: 0:28      MemoryBarrierShared ( global void)\n   54: 0:29      GroupMemoryBarrier ( global void)\n   55  0:?   Linker Objects\n   56  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n   ..\n  106  0:17        Constant:\n  107  0:17          1057.000000\n  108: 0:23      Barrier ( global void)\n  109: 0:24      MemoryBarrier ( global void)\n  110: 0:25      MemoryBarrierAtomicCounter ( global void)\n  111: 0:26      MemoryBarrierBuffer ( global void)\n  112: 0:27      MemoryBarrierImage ( global void)\n  113: 0:28      MemoryBarrierShared ( global void)\n  114: 0:29      GroupMemoryBarrier ( global void)\n  115  0:?   Linker Objects\n  116  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/420.tese.out:\n   89  0:82    Function Parameters: \n   90  0:84    Sequence\n   91: 0:84      MemoryBarrier ( global void)\n   92  0:86      Test condition and select ( temp void)\n   93  0:86        Condition\n   ..\n  265  0:82    Function Parameters: \n  266  0:84    Sequence\n  267: 0:84      MemoryBarrier ( global void)\n  268  0:86      Test condition and select ( temp void)\n  269  0:86        Condition\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/430.comp.out:\n   26  0:27    Function Parameters: \n   27  0:29    Sequence\n   28: 0:29      Barrier ( global void)\n   29: 0:30      MemoryBarrier ( global void)\n   30: 0:31      MemoryBarrierAtomicCounter ( global void)\n   31: 0:32      MemoryBarrierBuffer ( global void)\n   32: 0:33      MemoryBarrierShared ( global void)\n   33: 0:34      MemoryBarrierImage ( global void)\n   34: 0:35      GroupMemoryBarrier ( global void)\n   35  0:36      move second child to first child ( temp int)\n   36  0:36        value: direct index for structure (layout( column_major shared) buffer int)\n   ..\n   52  0:39            10 (const int)\n   53  0:39        true case\n   54: 0:40        Barrier ( global void)\n   55  0:66  Function Definition: foo( ( global void)\n   56  0:66    Function Parameters: \n   ..\n   71  0:69          Constant:\n   72  0:69            1 (const int)\n   73: 0:70      Barrier ( global void)\n   74  0:75  Function Definition: fooaoeu( ( global void)\n   75  0:75    Function Parameters: \n   ..\n  158  0:27    Function Parameters: \n  159  0:29    Sequence\n  160: 0:29      Barrier ( global void)\n  161: 0:30      MemoryBarrier ( global void)\n  162: 0:31      MemoryBarrierAtomicCounter ( global void)\n  163: 0:32      MemoryBarrierBuffer ( global void)\n  164: 0:33      MemoryBarrierShared ( global void)\n  165: 0:34      MemoryBarrierImage ( global void)\n  166: 0:35      GroupMemoryBarrier ( global void)\n  167  0:36      move second child to first child ( temp int)\n  168  0:36        value: direct index for structure (layout( column_major shared) buffer int)\n  ...\n  184  0:39            10 (const int)\n  185  0:39        true case\n  186: 0:40        Barrier ( global void)\n  187  0:?   Linker Objects\n  188  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/430.vert.out:\n   53  ERROR: 0:123: 'input block' : not supported in this stage: vertex\n   54  ERROR: 0:146: 'shared' : not supported in this stage: vertex\n   55: ERROR: 0:150: 'barrier' : no matching overloaded function found \n   56: ERROR: 0:154: 'memoryBarrierShared' : no matching overloaded function found \n   57: ERROR: 0:156: 'groupMemoryBarrier' : no matching overloaded function found \n   58  ERROR: 0:159: 'buffer' : buffers can be declared only as blocks \n   59  ERROR: 0:168: 'textureSamples and imageSamples' : not supported for this version or the enabled extensions \n   ..\n   92  0:31      'v2' ( in 2-component vector of float)\n   93  0:31      'cv3' ( in 3-component vector of float)\n   94: 0:148  Function Definition: fooBarrier( ( global void)\n   95  0:148    Function Parameters: \n   96  0:150    Sequence\n   97  0:150      Constant:\n   98  0:150        0.000000\n   99: 0:151      MemoryBarrier ( global void)\n  100: 0:152      MemoryBarrierAtomicCounter ( global void)\n  101: 0:153      MemoryBarrierBuffer ( global void)\n  102  0:154      Constant:\n  103  0:154        0.000000\n  104: 0:155      MemoryBarrierImage ( global void)\n  105  0:156      Constant:\n  106  0:156        0.000000\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.frag.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  113  0:6      'gl_SubgroupSize' ( flat in uint SubgroupSize)\n  114  0:7      'gl_SubgroupInvocationID' ( flat in uint SubgroupInvocationID)\n  115: 0:8      subgroupBarrier ( global void)\n  116: 0:9      subgroupMemoryBarrier ( global void)\n  117: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  118: 0:11      subgroupMemoryBarrierImage ( global void)\n  119  0:12      subgroupElect ( global bool)\n  120  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  347  0:107          Constant:\n  348  0:107            0 (const uint)\n  349: 0:108      subgroupBarrier ( global void)\n  350: 0:109      subgroupMemoryBarrier ( global void)\n  351: 0:110      subgroupMemoryBarrierBuffer ( global void)\n  352: 0:111      subgroupMemoryBarrierImage ( global void)\n  353  0:112      subgroupElect ( global bool)\n  354  0:116  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  658  0:107          Constant:\n  659  0:107            0 (const uint)\n  660: 0:108      subgroupBarrier ( global void)\n  661: 0:109      subgroupMemoryBarrier ( global void)\n  662: 0:110      subgroupMemoryBarrierBuffer ( global void)\n  663: 0:111      subgroupMemoryBarrierImage ( global void)\n  664  0:112      subgroupElect ( global bool)\n  665  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.geom.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  115  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  116  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  117: 0:8      subgroupBarrier ( global void)\n  118: 0:9      subgroupMemoryBarrier ( global void)\n  119: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  120: 0:11      subgroupMemoryBarrierImage ( global void)\n  121  0:12      subgroupElect ( global bool)\n  122  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  354  0:113          Constant:\n  355  0:113            0 (const uint)\n  356: 0:114      subgroupBarrier ( global void)\n  357: 0:115      subgroupMemoryBarrier ( global void)\n  358: 0:116      subgroupMemoryBarrierBuffer ( global void)\n  359: 0:117      subgroupMemoryBarrierImage ( global void)\n  360  0:118      subgroupElect ( global bool)\n  361  0:122  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  666  0:113          Constant:\n  667  0:113            0 (const uint)\n  668: 0:114      subgroupBarrier ( global void)\n  669: 0:115      subgroupMemoryBarrier ( global void)\n  670: 0:116      subgroupMemoryBarrierBuffer ( global void)\n  671: 0:117      subgroupMemoryBarrierImage ( global void)\n  672  0:118      subgroupElect ( global bool)\n  673  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.tesc.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:8      subgroupBarrier ( global void)\n  115: 0:9      subgroupMemoryBarrier ( global void)\n  116: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:11      subgroupMemoryBarrierImage ( global void)\n  118  0:12      subgroupElect ( global bool)\n  119  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  351  0:112          Constant:\n  352  0:112            0 (const uint)\n  353: 0:113      subgroupBarrier ( global void)\n  354: 0:114      subgroupMemoryBarrier ( global void)\n  355: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  356: 0:116      subgroupMemoryBarrierImage ( global void)\n  357  0:117      subgroupElect ( global bool)\n  358  0:121  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  660  0:112          Constant:\n  661  0:112            0 (const uint)\n  662: 0:113      subgroupBarrier ( global void)\n  663: 0:114      subgroupMemoryBarrier ( global void)\n  664: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  665: 0:116      subgroupMemoryBarrierImage ( global void)\n  666  0:117      subgroupElect ( global bool)\n  667  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.tese.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  114  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  115  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  116: 0:8      subgroupBarrier ( global void)\n  117: 0:9      subgroupMemoryBarrier ( global void)\n  118: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  119: 0:11      subgroupMemoryBarrierImage ( global void)\n  120  0:12      subgroupElect ( global bool)\n  121  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  353  0:112          Constant:\n  354  0:112            0 (const uint)\n  355: 0:113      subgroupBarrier ( global void)\n  356: 0:114      subgroupMemoryBarrier ( global void)\n  357: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  358: 0:116      subgroupMemoryBarrierImage ( global void)\n  359  0:117      subgroupElect ( global bool)\n  360  0:121  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  664  0:112          Constant:\n  665  0:112            0 (const uint)\n  666: 0:113      subgroupBarrier ( global void)\n  667: 0:114      subgroupMemoryBarrier ( global void)\n  668: 0:115      subgroupMemoryBarrierBuffer ( global void)\n  669: 0:116      subgroupMemoryBarrierImage ( global void)\n  670  0:117      subgroupElect ( global bool)\n  671  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroup.vert.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:14: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  111  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  112  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  113: 0:8      subgroupBarrier ( global void)\n  114: 0:9      subgroupMemoryBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  116: 0:11      subgroupMemoryBarrierImage ( global void)\n  117  0:12      subgroupElect ( global bool)\n  118  0:13      'gl_NumSubgroups' ( temp float)\n  ...\n  350  0:111          Constant:\n  351  0:111            0 (const uint)\n  352: 0:112      subgroupBarrier ( global void)\n  353: 0:113      subgroupMemoryBarrier ( global void)\n  354: 0:114      subgroupMemoryBarrierBuffer ( global void)\n  355: 0:115      subgroupMemoryBarrierImage ( global void)\n  356  0:116      subgroupElect ( global bool)\n  357  0:120  Function Definition: ballot_works(vf4; ( global void)\n  ...\n  660  0:111          Constant:\n  661  0:111            0 (const uint)\n  662: 0:112      subgroupBarrier ( global void)\n  663: 0:113      subgroupMemoryBarrier ( global void)\n  664: 0:114      subgroupMemoryBarrierBuffer ( global void)\n  665: 0:115      subgroupMemoryBarrierImage ( global void)\n  666  0:116      subgroupElect ( global bool)\n  667  0:?   Linker Objects\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.450.subgroupBasic.comp.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : required extension not requested: GL_KHR_shader_subgroup_basic\n   10  ERROR: 0:14: 'gl_SubgroupID' : required extension not requested: GL_KHR_shader_subgroup_basic\n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : required extension not requested: GL_KHR_shader_subgroup_basic\n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:8      subgroupBarrier ( global void)\n  115: 0:9      subgroupMemoryBarrier ( global void)\n  116: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:11      subgroupMemoryBarrierImage ( global void)\n  118  0:12      subgroupElect ( global bool)\n  119  0:13      'gl_NumSubgroups' ( in uint NumSubgroups)\n  120  0:14      'gl_SubgroupID' ( in uint SubgroupID)\n  121: 0:15      subgroupMemoryBarrierShared ( global void)\n  122  0:17      subgroupAll ( global bool)\n  123  0:17        Constant:\n  ...\n  379  0:117          Constant:\n  380  0:117            0 (const int)\n  381: 0:118      subgroupBarrier ( global void)\n  382: 0:119      subgroupMemoryBarrier ( global void)\n  383: 0:120      subgroupMemoryBarrierBuffer ( global void)\n  384: 0:121      subgroupMemoryBarrierShared ( global void)\n  385: 0:122      subgroupMemoryBarrierImage ( global void)\n  386  0:126  Function Definition: ballot_works(vf4; ( global void)\n  387  0:126    Function Parameters: \n  ...\n  721  0:117          Constant:\n  722  0:117            0 (const int)\n  723: 0:118      subgroupBarrier ( global void)\n  724: 0:119      subgroupMemoryBarrier ( global void)\n  725: 0:120      subgroupMemoryBarrierBuffer ( global void)\n  726: 0:121      subgroupMemoryBarrierShared ( global void)\n  727: 0:122      subgroupMemoryBarrierImage ( global void)\n  728  0:?   Linker Objects\n  729  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.mesh.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : required extension not requested: GL_KHR_shader_subgroup_basic\n   10  ERROR: 0:14: 'gl_SubgroupID' : required extension not requested: GL_KHR_shader_subgroup_basic\n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : required extension not requested: GL_KHR_shader_subgroup_basic\n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  116  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  117  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  118: 0:8      subgroupBarrier ( global void)\n  119: 0:9      subgroupMemoryBarrier ( global void)\n  120: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  121: 0:11      subgroupMemoryBarrierImage ( global void)\n  122  0:12      subgroupElect ( global bool)\n  123  0:13      'gl_NumSubgroups' ( in uint NumSubgroups)\n  124  0:14      'gl_SubgroupID' ( in uint SubgroupID)\n  125: 0:15      subgroupMemoryBarrierShared ( global void)\n  126  0:17      subgroupAll ( global bool)\n  127  0:17        Constant:\n  ...\n  399  0:128        Constant:\n  400  0:128          4.000000\n  401: 0:130      MemoryBarrierShared ( global void)\n  402: 0:130      Barrier ( global void)\n  403  0:132      move second child to first child ( temp 4-component vector of float)\n  404  0:132        gl_Position: direct index for structure ( out 4-component vector of float Position)\n  ...\n  477  0:135          Constant:\n  478  0:135            2 (const int)\n  479: 0:137      MemoryBarrierShared ( global void)\n  480: 0:137      Barrier ( global void)\n  481  0:139      move second child to first child ( temp int)\n  482  0:139        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n  ...\n  518  0:142        Constant:\n  519  0:142          9 (const int)\n  520: 0:144      MemoryBarrierShared ( global void)\n  521: 0:144      Barrier ( global void)\n  522  0:146      move second child to first child ( temp int)\n  523  0:146        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n  ...\n  590  0:149          Constant:\n  591  0:149            0 (const int)\n  592: 0:151      MemoryBarrierShared ( global void)\n  593: 0:151      Barrier ( global void)\n  594  0:154      move second child to first child ( temp uint)\n  595  0:154        direct index ( temp uint PrimitiveIndicesNV)\n  ...\n  625  0:161        Constant:\n  626  0:161          96 (const uint)\n  627: 0:163      MemoryBarrierShared ( global void)\n  628: 0:163      Barrier ( global void)\n  629  0:167  Function Definition: basic_works( ( global void)\n  630  0:167    Function Parameters: \n  ...\n  632  0:169      'gl_SubgroupSize' ( in uint SubgroupSize)\n  633  0:170      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  634: 0:171      subgroupBarrier ( global void)\n  635: 0:172      subgroupMemoryBarrier ( global void)\n  636: 0:173      subgroupMemoryBarrierBuffer ( global void)\n  637: 0:174      subgroupMemoryBarrierImage ( global void)\n  638  0:175      subgroupElect ( global bool)\n  639  0:176      'gl_NumSubgroups' ( in uint NumSubgroups)\n  640  0:177      'gl_SubgroupID' ( in uint SubgroupID)\n  641: 0:178      subgroupMemoryBarrierShared ( global void)\n  642  0:182  Function Definition: ballot_works(vf4; ( global void)\n  643  0:182    Function Parameters: \n  ...\n  999  0:128        Constant:\n 1000  0:128          4.000000\n 1001: 0:130      MemoryBarrierShared ( global void)\n 1002: 0:130      Barrier ( global void)\n 1003  0:132      move second child to first child ( temp 4-component vector of float)\n 1004  0:132        gl_Position: direct index for structure ( out 4-component vector of float Position)\n ....\n 1077  0:135          Constant:\n 1078  0:135            2 (const int)\n 1079: 0:137      MemoryBarrierShared ( global void)\n 1080: 0:137      Barrier ( global void)\n 1081  0:139      move second child to first child ( temp int)\n 1082  0:139        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n ....\n 1118  0:142        Constant:\n 1119  0:142          9 (const int)\n 1120: 0:144      MemoryBarrierShared ( global void)\n 1121: 0:144      Barrier ( global void)\n 1122  0:146      move second child to first child ( temp int)\n 1123  0:146        gl_PrimitiveID: direct index for structure ( perprimitiveNV out int PrimitiveID)\n ....\n 1190  0:149          Constant:\n 1191  0:149            0 (const int)\n 1192: 0:151      MemoryBarrierShared ( global void)\n 1193: 0:151      Barrier ( global void)\n 1194  0:154      move second child to first child ( temp uint)\n 1195  0:154        direct index ( temp uint PrimitiveIndicesNV)\n ....\n 1225  0:161        Constant:\n 1226  0:161          96 (const uint)\n 1227: 0:163      MemoryBarrierShared ( global void)\n 1228: 0:163      Barrier ( global void)\n 1229  0:?   Linker Objects\n 1230  0:?     'gl_WorkGroupSize' ( const 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rahit.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  419  0:133      'gl_SubgroupSize' ( in uint SubgroupSize)\n  420  0:134      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  421: 0:135      subgroupBarrier ( global void)\n  422: 0:136      subgroupMemoryBarrier ( global void)\n  423: 0:137      subgroupMemoryBarrierBuffer ( global void)\n  424: 0:138      subgroupMemoryBarrierImage ( global void)\n  425  0:139      subgroupElect ( global bool)\n  426  0:143  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rcall.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  362  0:121      'gl_SubgroupSize' ( in uint SubgroupSize)\n  363  0:122      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  364: 0:123      subgroupBarrier ( global void)\n  365: 0:124      subgroupMemoryBarrier ( global void)\n  366: 0:125      subgroupMemoryBarrierBuffer ( global void)\n  367: 0:126      subgroupMemoryBarrierImage ( global void)\n  368  0:127      subgroupElect ( global bool)\n  369  0:131  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rchit.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  428  0:131      'gl_SubgroupSize' ( in uint SubgroupSize)\n  429  0:132      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  430: 0:133      subgroupBarrier ( global void)\n  431: 0:134      subgroupMemoryBarrier ( global void)\n  432: 0:135      subgroupMemoryBarrierBuffer ( global void)\n  433: 0:136      subgroupMemoryBarrierImage ( global void)\n  434  0:137      subgroupElect ( global bool)\n  435  0:141  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rgen.out:\n    2  ERROR: 0:7: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:8: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:9: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:10: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:11: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:12: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:13: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:14: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:15: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:16: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:18: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:19: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:7      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:8      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:9      subgroupBarrier ( global void)\n  115: 0:10      subgroupMemoryBarrier ( global void)\n  116: 0:11      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:12      subgroupMemoryBarrierImage ( global void)\n  118  0:13      subgroupElect ( global bool)\n  119  0:14      'gl_NumSubgroups' ( temp float)\n  ...\n  392  0:125      'gl_SubgroupSize' ( in uint SubgroupSize)\n  393  0:126      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  394: 0:127      subgroupBarrier ( global void)\n  395: 0:128      subgroupMemoryBarrier ( global void)\n  396: 0:129      subgroupMemoryBarrierBuffer ( global void)\n  397: 0:130      subgroupMemoryBarrierImage ( global void)\n  398  0:131      subgroupElect ( global bool)\n  399  0:135  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rint.out:\n    2  ERROR: 0:8: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:9: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:10: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:11: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:12: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:13: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:14: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:15: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:16: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:17: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:19: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:20: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:8      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:9      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:10      subgroupBarrier ( global void)\n  115: 0:11      subgroupMemoryBarrier ( global void)\n  116: 0:12      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:13      subgroupMemoryBarrierImage ( global void)\n  118  0:14      subgroupElect ( global bool)\n  119  0:15      'gl_NumSubgroups' ( temp float)\n  ...\n  406  0:131      'gl_SubgroupSize' ( in uint SubgroupSize)\n  407  0:132      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  408: 0:133      subgroupBarrier ( global void)\n  409: 0:134      subgroupMemoryBarrier ( global void)\n  410: 0:135      subgroupMemoryBarrierBuffer ( global void)\n  411: 0:136      subgroupMemoryBarrierImage ( global void)\n  412  0:137      subgroupElect ( global bool)\n  413  0:141  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.rmiss.out:\n    2  ERROR: 0:8: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:9: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:10: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:11: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:12: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:13: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:14: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:15: 'gl_NumSubgroups' : undeclared identifier \n   10  ERROR: 0:16: 'gl_SubgroupID' : undeclared identifier \n   11: ERROR: 0:17: 'subgroupMemoryBarrierShared' : no matching overloaded function found \n   12  ERROR: 0:19: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:20: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  112  0:8      'gl_SubgroupSize' ( in uint SubgroupSize)\n  113  0:9      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  114: 0:10      subgroupBarrier ( global void)\n  115: 0:11      subgroupMemoryBarrier ( global void)\n  116: 0:12      subgroupMemoryBarrierBuffer ( global void)\n  117: 0:13      subgroupMemoryBarrierImage ( global void)\n  118  0:14      subgroupElect ( global bool)\n  119  0:15      'gl_NumSubgroups' ( temp float)\n  ...\n  400  0:125      'gl_SubgroupSize' ( in uint SubgroupSize)\n  401  0:126      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  402: 0:127      subgroupBarrier ( global void)\n  403: 0:128      subgroupMemoryBarrier ( global void)\n  404: 0:129      subgroupMemoryBarrierBuffer ( global void)\n  405: 0:130      subgroupMemoryBarrierImage ( global void)\n  406  0:131      subgroupElect ( global bool)\n  407  0:135  Function Definition: ballot_works(vf4; ( global void)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.460.subgroup.task.out:\n    2  ERROR: 0:6: 'gl_SubgroupSize' : required extension not requested: GL_KHR_shader_subgroup_basic\n    3  ERROR: 0:7: 'gl_SubgroupInvocationID' : required extension not requested: GL_KHR_shader_subgroup_basic\n    4: ERROR: 0:8: 'subgroupBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    5: ERROR: 0:9: 'subgroupMemoryBarrier' : required extension not requested: GL_KHR_shader_subgroup_basic\n    6: ERROR: 0:10: 'subgroupMemoryBarrierBuffer' : required extension not requested: GL_KHR_shader_subgroup_basic\n    7: ERROR: 0:11: 'subgroupMemoryBarrierImage' : required extension not requested: GL_KHR_shader_subgroup_basic\n    8  ERROR: 0:12: 'subgroupElect' : required extension not requested: GL_KHR_shader_subgroup_basic\n    9  ERROR: 0:13: 'gl_NumSubgroups' : required extension not requested: GL_KHR_shader_subgroup_basic\n   10  ERROR: 0:14: 'gl_SubgroupID' : required extension not requested: GL_KHR_shader_subgroup_basic\n   11: ERROR: 0:15: 'subgroupMemoryBarrierShared' : required extension not requested: GL_KHR_shader_subgroup_basic\n   12  ERROR: 0:17: 'subgroupAll' : required extension not requested: GL_KHR_shader_subgroup_vote\n   13  ERROR: 0:18: 'subgroupAny' : required extension not requested: GL_KHR_shader_subgroup_vote\n   ..\n  113  0:6      'gl_SubgroupSize' ( in uint SubgroupSize)\n  114  0:7      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  115: 0:8      subgroupBarrier ( global void)\n  116: 0:9      subgroupMemoryBarrier ( global void)\n  117: 0:10      subgroupMemoryBarrierBuffer ( global void)\n  118: 0:11      subgroupMemoryBarrierImage ( global void)\n  119  0:12      subgroupElect ( global bool)\n  120  0:13      'gl_NumSubgroups' ( in uint NumSubgroups)\n  121  0:14      'gl_SubgroupID' ( in uint SubgroupID)\n  122: 0:15      subgroupMemoryBarrierShared ( global void)\n  123  0:17      subgroupAll ( global bool)\n  124  0:17        Constant:\n  ...\n  408  0:138            Constant:\n  409  0:138              1 (const uint)\n  410: 0:140      MemoryBarrierShared ( global void)\n  411: 0:140      Barrier ( global void)\n  412  0:144      move second child to first child ( temp 2-component vector of float)\n  413  0:144        dummy: direct index for structure (layout( std430 offset=0) taskNV out 2-component vector of float)\n  ...\n  463  0:148            2 (const int)\n  464  0:148        'viewID' ( temp uint)\n  465: 0:150      MemoryBarrierShared ( global void)\n  466: 0:150      Barrier ( global void)\n  467  0:153      move second child to first child ( temp uint)\n  468  0:153        'gl_TaskCountNV' ( out uint TaskCountNV)\n  ...\n  474  0:159      'gl_SubgroupSize' ( in uint SubgroupSize)\n  475  0:160      'gl_SubgroupInvocationID' ( in uint SubgroupInvocationID)\n  476: 0:161      subgroupBarrier ( global void)\n  477: 0:162      subgroupMemoryBarrier ( global void)\n  478: 0:163      subgroupMemoryBarrierBuffer ( global void)\n  479: 0:164      subgroupMemoryBarrierImage ( global void)\n  480  0:165      subgroupElect ( global bool)\n  481  0:166      'gl_NumSubgroups' ( in uint NumSubgroups)\n  482  0:167      'gl_SubgroupID' ( in uint SubgroupID)\n  483: 0:168      subgroupMemoryBarrierShared ( global void)\n  484  0:172  Function Definition: ballot_works(vf4; ( global void)\n  485  0:172    Function Parameters: \n  ...\n  851  0:138            Constant:\n  852  0:138              1 (const uint)\n  853: 0:140      MemoryBarrierShared ( global void)\n  854: 0:140      Barrier ( global void)\n  855  0:144      move second child to first child ( temp 2-component vector of float)\n  856  0:144        dummy: direct index for structure (layout( std430 offset=0) taskNV out 2-component vector of float)\n  ...\n  906  0:148            2 (const int)\n  907  0:148        'viewID' ( temp uint)\n  908: 0:150      MemoryBarrierShared ( global void)\n  909: 0:150      Barrier ( global void)\n  910  0:153      move second child to first child ( temp uint)\n  911  0:153        'gl_TaskCountNV' ( out uint TaskCountNV)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/glsl.es320.subgroupBasic.comp.out:\n   50  0:17          Constant:\n   51  0:17            0 (const int)\n   52: 0:18      subgroupBarrier ( global void)\n   53: 0:19      subgroupMemoryBarrier ( global void)\n   54: 0:20      subgroupMemoryBarrierBuffer ( global void)\n   55: 0:21      subgroupMemoryBarrierShared ( global void)\n   56: 0:22      subgroupMemoryBarrierImage ( global void)\n   57  0:?   Linker Objects\n   58  0:?     'gl_WorkGroupSize' ( const highp 3-component vector of uint WorkGroupSize)\n   ..\n  116  0:17          Constant:\n  117  0:17            0 (const int)\n  118: 0:18      subgroupBarrier ( global void)\n  119: 0:19      subgroupMemoryBarrier ( global void)\n  120: 0:20      subgroupMemoryBarrierBuffer ( global void)\n  121: 0:21      subgroupMemoryBarrierShared ( global void)\n  122: 0:22      subgroupMemoryBarrierImage ( global void)\n  123  0:?   Linker Objects\n  124  0:?     'gl_WorkGroupSize' ( const highp 3-component vector of uint WorkGroupSize)\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.color.hull.tesc.out:\n  192  0:63            Constant:\n  193  0:63              1 (const int)\n  194: 0:?       Barrier ( temp void)\n  195  0:?       Test condition and select ( temp void)\n  196  0:?         Condition\n  ...\n  459  0:63            Constant:\n  460  0:63              1 (const int)\n  461: 0:?       Barrier ( temp void)\n  462  0:?       Test condition and select ( temp void)\n  463  0:?         Condition\n  ...\n  714               125:    124(ptr) AccessChain 120(@entryPointOutput.color) 121\n  715                                Store 125 123\n  716:                               ControlBarrier 126 127 128\n  717               129:     10(int) Load 99(pointId)\n  718               131:   130(bool) IEqual 129 32\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.gs-hs-mix.tesc.out:\n  223  0:61            Constant:\n  224  0:61              0 (const int)\n  225: 0:?       Barrier ( temp void)\n  226  0:?       Test condition and select ( temp void)\n  227  0:?         Condition\n  ...\n  718  0:61            Constant:\n  719  0:61              0 (const int)\n  720: 0:?       Barrier ( temp void)\n  721  0:?       Test condition and select ( temp void)\n  722  0:?         Condition\n  ...\n 1201               132:    131(ptr) AccessChain 123(@entryPointOutput.PositionWS) 124\n 1202                                Store 132 130\n 1203:                               ControlBarrier 68 133 58\n 1204               134:      9(int) Load 120(id)\n 1205               136:   135(bool) IEqual 134 57\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.1.tesc.out:\n   89  0:26            Constant:\n   90  0:26              0 (const int)\n   91: 0:?       Barrier ( temp void)\n   92  0:?       Test condition and select ( temp void)\n   93  0:?         Condition\n   ..\n  253  0:26            Constant:\n  254  0:26              0 (const int)\n  255: 0:?       Barrier ( temp void)\n  256  0:?       Test condition and select ( temp void)\n  257  0:?         Condition\n  ...\n  445                72:     71(ptr) AccessChain 63(@entryPointOutput.cpoint) 64\n  446                                Store 72 70\n  447:                               ControlBarrier 20 10 73\n  448                74:      9(int) Load 60(m_cpid)\n  449                76:    75(bool) IEqual 74 30\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.2.tesc.out:\n   84  0:26            Constant:\n   85  0:26              0 (const int)\n   86: 0:?       Barrier ( temp void)\n   87  0:?       Test condition and select ( temp void)\n   88  0:?         Condition\n   ..\n  246  0:26            Constant:\n  247  0:26              0 (const int)\n  248: 0:?       Barrier ( temp void)\n  249  0:?       Test condition and select ( temp void)\n  250  0:?         Condition\n  ...\n  441                70:     69(ptr) AccessChain 61(@entryPointOutput.cpoint) 64\n  442                                Store 70 68\n  443:                               ControlBarrier 21 10 71\n  444                72:      9(int) Load 63(InvocationId)\n  445                74:    73(bool) IEqual 72 32\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.3.tesc.out:\n   84  0:26            Constant:\n   85  0:26              0 (const int)\n   86: 0:?       Barrier ( temp void)\n   87  0:?       Test condition and select ( temp void)\n   88  0:?         Condition\n   ..\n  246  0:26            Constant:\n  247  0:26              0 (const int)\n  248: 0:?       Barrier ( temp void)\n  249  0:?       Test condition and select ( temp void)\n  250  0:?         Condition\n  ...\n  442                70:     69(ptr) AccessChain 61(@entryPointOutput.cpoint) 64\n  443                                Store 70 68\n  444:                               ControlBarrier 21 10 71\n  445                72:      9(int) Load 63(InvocationId)\n  446                74:    73(bool) IEqual 72 32\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.4.tesc.out:\n  160  0:39            Constant:\n  161  0:39              0 (const int)\n  162: 0:?       Barrier ( temp void)\n  163  0:?       Test condition and select ( temp void)\n  164  0:?         Condition\n  ...\n  391  0:39            Constant:\n  392  0:39              0 (const int)\n  393: 0:?       Barrier ( temp void)\n  394  0:?       Test condition and select ( temp void)\n  395  0:?         Condition\n  ...\n  599                92:     91(ptr) AccessChain 83(@entryPointOutput.m_Position) 84\n  600                                Store 92 90\n  601:                               ControlBarrier 93 94 95\n  602                96:      9(int) Load 80(cpid)\n  603                98:    97(bool) IEqual 96 33\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.6.tesc.out:\n  149  0:42            Constant:\n  150  0:42              1 (const int)\n  151: 0:?       Barrier ( temp void)\n  152  0:?       Test condition and select ( temp void)\n  153  0:?         Condition\n  ...\n  376  0:42            Constant:\n  377  0:42              1 (const int)\n  378: 0:?       Barrier ( temp void)\n  379  0:?       Test condition and select ( temp void)\n  380  0:?         Condition\n  ...\n  605               109:    108(ptr) AccessChain 104(@entryPointOutput.Color) 105\n  606                                Store 109 107\n  607:                               ControlBarrier 15 18 110\n  608               111:     10(int) Load 88(uCPID)\n  609               113:   112(bool) IEqual 111 36\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.ctrlpt-1.tesc.out:\n   74  0:27            Constant:\n   75  0:27              0 (const int)\n   76: 0:?       Barrier ( temp void)\n   77  0:?       Test condition and select ( temp void)\n   78  0:?         Condition\n   ..\n  312  0:27            Constant:\n  313  0:27              0 (const int)\n  314: 0:?       Barrier ( temp void)\n  315  0:?       Test condition and select ( temp void)\n  316  0:?         Condition\n  ...\n  614                69:     68(ptr) AccessChain 60(@entryPointOutput.val) 61\n  615                                Store 69 67\n  616:                               ControlBarrier 70 71 72\n  617                73:      9(int) Load 57(cpid)\n  618                75:    74(bool) IEqual 73 30\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.ctrlpt-2.tesc.out:\n   81  0:28            Constant:\n   82  0:28              0 (const int)\n   83: 0:?       Barrier ( temp void)\n   84  0:?       Test condition and select ( temp void)\n   85  0:?         Condition\n   ..\n  328  0:28            Constant:\n  329  0:28              0 (const int)\n  330: 0:?       Barrier ( temp void)\n  331  0:?       Test condition and select ( temp void)\n  332  0:?         Condition\n  ...\n  633                70:     69(ptr) AccessChain 61(@entryPointOutput.val) 62\n  634                                Store 70 68\n  635:                               ControlBarrier 71 72 73\n  636                74:      9(int) Load 58(cpid)\n  637                76:    75(bool) IEqual 74 29\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.hull.void.tesc.out:\n   73  0:26            Constant:\n   74  0:26              0 (const int)\n   75: 0:?       Barrier ( temp void)\n   76  0:?       Test condition and select ( temp void)\n   77  0:?         Condition\n   ..\n  167  0:26            Constant:\n  168  0:26              0 (const int)\n  169: 0:?       Barrier ( temp void)\n  170  0:?       Test condition and select ( temp void)\n  171  0:?         Condition\n  ...\n  267                57:     56(ptr) AccessChain 48(@entryPointOutput.cpoint) 51\n  268                                Store 57 55\n  269:                               ControlBarrier 58 59 60\n  270                61:      9(int) Load 50(InvocationId)\n  271                63:    62(bool) IEqual 61 23\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/hlsl.intrinsics.barriers.comp.out:\n    1: hlsl.intrinsics.barriers.comp\n    2  Shader version: 500\n    3  local_size = (1, 1, 1)\n    .\n    6  0:3    Function Parameters: \n    7  0:?     Sequence\n    8: 0:4      MemoryBarrier ( temp void)\n    9: 0:5      AllMemoryBarrierWithGroupSync ( temp void)\n   10: 0:6      DeviceMemoryBarrier ( temp void)\n   11: 0:7      DeviceMemoryBarrierWithGroupSync ( temp void)\n   12: 0:8      WorkgroupMemoryBarrier ( temp void)\n   13: 0:9      WorkgroupMemoryBarrierWithGroupSync ( temp void)\n   14  0:11      Branch: Return with expression\n   15  0:11        Constant:\n   ..\n   34  0:3    Function Parameters: \n   35  0:?     Sequence\n   36: 0:4      MemoryBarrier ( temp void)\n   37: 0:5      AllMemoryBarrierWithGroupSync ( temp void)\n   38: 0:6      DeviceMemoryBarrier ( temp void)\n   39: 0:7      DeviceMemoryBarrierWithGroupSync ( temp void)\n   40: 0:8      WorkgroupMemoryBarrier ( temp void)\n   41: 0:9      WorkgroupMemoryBarrierWithGroupSync ( temp void)\n   42  0:11      Branch: Return with expression\n   43  0:11        Constant:\n   ..\n   87  8(@ComputeShaderFunction():    6(float) Function None 7\n   88                 9:             Label\n   89:                               MemoryBarrier 11 12\n   90:                               ControlBarrier 13 11 12\n   91:                               MemoryBarrier 11 14\n   92:                               ControlBarrier 13 11 14\n   93:                               MemoryBarrier 13 15\n   94:                               ControlBarrier 13 13 15\n   95                                ReturnValue 16\n   96                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.310.comp.out:\n  104           4(main):           2 Function None 3\n  105                 5:             Label\n  106:                               ControlBarrier 7 7 8\n  107                19:    9(float) Load 18(s)\n  108                21:     20(ptr) AccessChain 14(outbname) 16\n  ...\n  132                63:     62(ptr) AccessChain 50(outnames) 16\n  133                                Store 63 61\n  134:                               MemoryBarrier 66 8\n  135:                               MemoryBarrier 7 67\n  136                                Return\n  137                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.320.meshShaderUserDefined.mesh.out:\n  165                97:     58(ptr) AccessChain 37(blk) 91 82 44 92\n  166                                Store 97 96\n  167:                               MemoryBarrier 88 98\n  168:                               ControlBarrier 31 31 98\n  169               104:      6(int) Load 8(iid)\n  170               105:      6(int) Load 8(iid)\n  ...\n  200               138:     69(ptr) AccessChain 103(blk2) 132 52 64\n  201                                Store 138 137\n  202:                               MemoryBarrier 88 98\n  203:                               ControlBarrier 31 31 98\n  204                                Return\n  205                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.400.tesc.out:\n  137           43(pid):     11(ptr) Variable Function\n  138           46(iid):     11(ptr) Variable Function\n  139:                               ControlBarrier 7 8 9\n  140                                Store 12(a) 13\n  141                28:     27(ptr) AccessChain 24(gl_in) 25 26\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.atomic.comp.out:\n   85                 5:             Label\n   86           23(val):     22(ptr) Variable Function\n   87:                               MemoryBarrier 14 19\n   88                21:      6(int) FunctionCall 10(func(au1;) 20(counter)\n   89                30:      7(ptr) AccessChain 27(countArr) 29\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.atomicCounter.comp.out:\n    5  ERROR: 0:16: 'atomicCounterIncrement' : no matching overloaded function found \n    6  ERROR: 0:16: 'return' : type does not match, or is not convertible to, the function's return type \n    7: ERROR: 0:21: 'memoryBarrierAtomicCounter' : no matching overloaded function found \n    8  ERROR: 0:23: 'atomicCounter' : no matching overloaded function found \n    9  ERROR: 0:23: '=' :  cannot convert from ' const float' to ' temp highp uint'\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.barrier.vert.out:\n    1: spv.barrier.vert\n    2  // Module Version 10000\n    3  // Generated by (magic number): 8000a\n    .\n   31                 5:             Label\n   32                                Store 9(c0) 11\n   33:                               MemoryBarrier 13 14\n   34                                Store 15(c1) 11\n   35:                               MemoryBarrier 13 16\n   36                17:    7(fvec4) Load 9(c0)\n   37                18:    7(fvec4) CompositeConstruct 10 10 10 10\n   38                19:    7(fvec4) FAdd 17 18\n   39                                Store 9(c0) 19\n   40:                               MemoryBarrier 13 20\n   41                21:    7(fvec4) Load 9(c0)\n   42                22:    7(fvec4) CompositeConstruct 10 10 10 10\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.memoryScopeSemantics.comp.out:\n  222                70:     69(ptr) AccessChain 68(bufferu) 38\n  223                72:     15(int) AtomicIAdd 70 12 18 71\n  224:                               MemoryBarrier 26 18\n  225:                               ControlBarrier 26 26 64\n  226:                               ControlBarrier 26 26 17\n  227                74:     69(ptr) AccessChain 68(bufferu) 38\n  228                75:     15(int) Load 74 MakePointerVisibleKHR NonPrivatePointerKHR 26\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.memoryScopeSemantics_Error.comp.out:\n    5  ERROR: 0:18: 'atomicStore' : Invalid semantics value \n    6  ERROR: 0:19: 'imageAtomicLoad' : Invalid storage class semantics value \n    7: ERROR: 0:20: 'memoryBarrier' : Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease \n    8: ERROR: 0:21: 'memoryBarrier' : Storage class semantics must not be zero \n    9: ERROR: 0:22: 'memoryBarrier' : Semantics must include exactly one of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease \n   10  ERROR: 0:23: 'atomicAdd' : Semantics must not include multiple of gl_SemanticsRelease, gl_SemanticsAcquire, or gl_SemanticsAcquireRelease \n   11  ERROR: 0:24: 'atomicCompSwap' : semUnequal must not be gl_SemanticsRelease or gl_SemanticsAcquireRelease \n   12: ERROR: 0:25: 'memoryBarrier' : gl_SemanticsMakeVisible requires gl_SemanticsAcquire or gl_SemanticsAcquireRelease \n   13: ERROR: 0:26: 'memoryBarrier' : gl_SemanticsMakeAvailable requires gl_SemanticsRelease or gl_SemanticsAcquireRelease \n   14: ERROR: 0:27: 'memoryBarrier' : gl_SemanticsVolatile must not be used with memoryBarrier or controlBarrier \n   15  ERROR: 0:28: 'atomicCompSwap' : semEqual and semUnequal must either both include gl_SemanticsVolatile or neither \n   16  ERROR: 14 compilation errors.  No code generated.\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderBuiltins.mesh.out:\n  165                54:     45(ptr) AccessChain 34(gl_MeshVerticesNV) 52 49 48\n  166                                Store 54 53\n  167:                               MemoryBarrier 27 55\n  168:                               ControlBarrier 56 56 55\n  169                57:      6(int) Load 8(iid)\n  170                58:      6(int) IAdd 57 27\n  ...\n  195                80:     45(ptr) AccessChain 34(gl_MeshVerticesNV) 76 49 48\n  196                                Store 80 79\n  197:                               MemoryBarrier 27 55\n  198:                               ControlBarrier 56 56 55\n  199                89:      6(int) Load 8(iid)\n  200                92:     91(ptr) AccessChain 88(gl_MeshPrimitivesNV) 89 37\n  ...\n  209               101:     91(ptr) AccessChain 88(gl_MeshPrimitivesNV) 99 49 37\n  210                                Store 101 100\n  211:                               MemoryBarrier 27 55\n  212:                               ControlBarrier 56 56 55\n  213               102:      6(int) Load 8(iid)\n  214               103:      6(int) IAdd 102 27\n  ...\n  239               125:     91(ptr) AccessChain 88(gl_MeshPrimitivesNV) 121 49 37\n  240                                Store 125 124\n  241:                               MemoryBarrier 27 55\n  242:                               ControlBarrier 56 56 55\n  243               132:    131(ptr) AccessChain 129(gl_PrimitiveIndicesNV) 37\n  244                                Store 132 130\n  ...\n  256               145:         144 WritePackedPrimitiveIndices4x8NV\n  257                                Store 146(gl_PrimitiveCountNV) 126\n  258:                               MemoryBarrier 27 55\n  259:                               ControlBarrier 56 56 55\n  260                                Return\n  261                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderPerViewBuiltins.mesh.out:\n  162                82:     76(ptr) AccessChain 72(gl_MeshPrimitivesNV) 78 53 79 80\n  163                                Store 82 81\n  164:                               MemoryBarrier 28 83\n  165:                               ControlBarrier 84 84 83\n  166                85:      6(int) Load 8(iid)\n  167                86:      6(int) IAdd 85 28\n  ...\n  209               124:     76(ptr) AccessChain 72(gl_MeshPrimitivesNV) 118 53 119 80\n  210                                Store 124 123\n  211:                               MemoryBarrier 28 83\n  212:                               ControlBarrier 84 84 83\n  213                                Return\n  214                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderPerViewUserDefined.mesh.out:\n  180                59:     43(ptr) AccessChain 35(b) 55 56\n  181                                Store 59 58\n  182:                               MemoryBarrier 60 61\n  183:                               ControlBarrier 62 62 61\n  184                68:      6(int) Load 8(iid)\n  185                69:      6(int) Load 16(viewID)\n  ...\n  198                87:     43(ptr) AccessChain 67(b2) 83 56 84\n  199                                Store 87 86\n  200:                               MemoryBarrier 60 61\n  201:                               ControlBarrier 62 62 61\n  202                                Return\n  203                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderRedeclBuiltins.mesh.out:\n  133                48:     39(ptr) AccessChain 28(gl_MeshVerticesNV) 46 43 42\n  134                                Store 48 47\n  135:                               MemoryBarrier 49 50\n  136:                               ControlBarrier 51 51 50\n  137                52:      6(int) Load 8(iid)\n  138                53:      6(int) IAdd 52 49\n  ...\n  163                75:     39(ptr) AccessChain 28(gl_MeshVerticesNV) 71 43 42\n  164                                Store 75 74\n  165:                               MemoryBarrier 49 50\n  166:                               ControlBarrier 51 51 50\n  167                82:      6(int) Load 8(iid)\n  168                85:     84(ptr) AccessChain 81(gl_MeshPrimitivesNV) 82 31\n  ...\n  177                94:     84(ptr) AccessChain 81(gl_MeshPrimitivesNV) 92 43 31\n  178                                Store 94 93\n  179:                               MemoryBarrier 49 50\n  180:                               ControlBarrier 51 51 50\n  181                95:      6(int) Load 8(iid)\n  182                96:      6(int) IAdd 95 49\n  ...\n  207               118:     84(ptr) AccessChain 81(gl_MeshPrimitivesNV) 114 43 31\n  208                                Store 118 117\n  209:                               MemoryBarrier 49 50\n  210:                               ControlBarrier 51 51 50\n  211               124:    123(ptr) AccessChain 122(gl_PrimitiveIndicesNV) 31\n  212                                Store 124 49\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderRedeclPerViewBuiltins.mesh.out:\n  135                76:     71(ptr) AccessChain 67(gl_MeshPrimitivesNV) 73 48 74 38\n  136                                Store 76 75\n  137:                               MemoryBarrier 60 77\n  138:                               ControlBarrier 78 78 77\n  139                79:      6(int) Load 8(iid)\n  140                80:      6(int) IAdd 79 60\n  ...\n  182               118:     71(ptr) AccessChain 67(gl_MeshPrimitivesNV) 112 48 113 38\n  183                                Store 118 117\n  184:                               MemoryBarrier 60 77\n  185:                               ControlBarrier 78 78 77\n  186                                Return\n  187                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderSharedMem.mesh.out:\n  125                72:   31(fvec4) Load 71\n  126                                ImageWrite 64 67 72\n  127:                               MemoryBarrier 69 73\n  128:                               ControlBarrier 74 74 73\n  129                                Return\n  130                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshShaderUserDefined.mesh.out:\n  163                95:     57(ptr) AccessChain 34(blk) 89 81 44 90\n  164                                Store 95 94\n  165:                               MemoryBarrier 42 96\n  166:                               ControlBarrier 28 28 96\n  167               102:      6(int) Load 8(iid)\n  168               103:      6(int) Load 8(iid)\n  ...\n  198               136:     68(ptr) AccessChain 101(blk2) 130 52 63\n  199                                Store 136 135\n  200:                               MemoryBarrier 42 96\n  201:                               ControlBarrier 28 28 96\n  202                                Return\n  203                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.meshTaskShader.task.out:\n  173                82:   41(fvec4) Load 81\n  174                                ImageWrite 74 77 82\n  175:                               MemoryBarrier 79 83\n  176:                               ControlBarrier 84 84 83\n  177                95:     94(ptr) AccessChain 90(mytask) 51\n  178                                Store 95 93\n  ...\n  190               112:    111(ptr) AccessChain 90(mytask) 104\n  191                                Store 112 110\n  192:                               MemoryBarrier 79 83\n  193:                               ControlBarrier 84 84 83\n  194                                Store 113(gl_TaskCountNV) 86\n  195                                Return\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/spv.subgroupBasic.comp.out:\n   76                31:     17(ptr) AccessChain 10(data) 11 26\n   77                                Store 31 30\n   78:                               ControlBarrier 28 28 32\n   79:                               MemoryBarrier 28 32\n   80:                               MemoryBarrier 28 33\n   81:                               MemoryBarrier 28 34\n   82:                               MemoryBarrier 28 35\n   83                                Return\n   84                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/baseResults/web.comp.out:\n   97         %main = OpFunction %void None %3\n   98            %5 = OpLabel\n   99:                OpControlBarrier %uint_2 %uint_2 %uint_264\n  100           %20 = OpAccessChain %_ptr_Uniform_int %bInst %int_0\n  101           %21 = OpLoad %int %20\n  ...\n  106           %29 = OpAccessChain %_ptr_Uniform_v4float %bInst %int_2 %22\n  107                 OpStore %29 %28\n  108:                OpMemoryBarrier %uint_1 %uint_3400\n  109:                OpMemoryBarrier %uint_2 %uint_3400\n  110:                OpMemoryBarrier %uint_1 %uint_264\n  111:                OpMemoryBarrier %uint_1 %uint_72\n  112           %44 = OpCompositeExtract %uint %gl_WorkGroupSize 0\n  113           %49 = OpAccessChain %_ptr_Private_int %arrX %int_0\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.frag:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)         \n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  106  {\n  107    data = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  108:   subgroupBarrier();\n  109:   subgroupMemoryBarrier();\n  110:   subgroupMemoryBarrierBuffer();\n  111:   subgroupMemoryBarrierImage();\n  112    subgroupElect();\n  113  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.geom:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  112  {\n  113    result[gl_PrimitiveIDIn] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  114:   subgroupBarrier();\n  115:   subgroupMemoryBarrier();\n  116:   subgroupMemoryBarrierBuffer();\n  117:   subgroupMemoryBarrierImage();\n  118    subgroupElect();\n  119  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.tesc:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  111  {\n  112    result[gl_PrimitiveID] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  113:   subgroupBarrier();\n  114:   subgroupMemoryBarrier();\n  115:   subgroupMemoryBarrierBuffer();\n  116:   subgroupMemoryBarrierImage();\n  117    subgroupElect();\n  118  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.tese:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  111  {\n  112    result[gl_PrimitiveID] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  113:   subgroupBarrier();\n  114:   subgroupMemoryBarrier();\n  115:   subgroupMemoryBarrierBuffer();\n  116:   subgroupMemoryBarrierImage();\n  117    subgroupElect();\n  118  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroup.vert:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, only defined in compute\n   14    gl_SubgroupID;                 // ERROR, only defined in compute\n   15:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  110  {\n  111    result[gl_VertexID] = uvec4(gl_SubgroupSize, gl_SubgroupInvocationID, 0, 0);\n  112:   subgroupBarrier();\n  113:   subgroupMemoryBarrier();\n  114:   subgroupMemoryBarrierBuffer();\n  115:   subgroupMemoryBarrierImage();\n  116    subgroupElect();\n  117  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.450.subgroupBasic.comp:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, extension not enabled (basic)\n   14    gl_SubgroupID;                 // ERROR, extension not enabled (basic)\n   15:   subgroupMemoryBarrierShared(); // ERROR, extension not enabled (basic)\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  116      data.a[gl_NumSubgroups] = 1;\n  117      data.a[gl_SubgroupID] = (subgroupElect()) ? 1 : 0;\n  118:     subgroupBarrier();\n  119:     subgroupMemoryBarrier();\n  120:     subgroupMemoryBarrierBuffer();\n  121:     subgroupMemoryBarrierShared();\n  122:     subgroupMemoryBarrierImage();\n  123  }\n  124  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.mesh:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, extension not enabled (basic)\n   14    gl_SubgroupID;                 // ERROR, extension not enabled (basic)\n   15:   subgroupMemoryBarrierShared(); // ERROR, extension not enabled (basic)\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  104  #define MAX_PRIM 32\n  105  \n  106: #define BARRIER() \\\n  107:     memoryBarrierShared(); \\\n  108:     barrier();\n  109  \n  110  #extension GL_NV_mesh_shader : enable\n  ...\n  128      gl_MeshVerticesNV[iid].gl_CullDistance[2] = 4.0;\n  129  \n  130:     BARRIER();\n  131  \n  132      gl_MeshVerticesNV[iid+1].gl_Position = gl_MeshVerticesNV[iid].gl_Position;\n  ...\n  135      gl_MeshVerticesNV[iid+1].gl_CullDistance[2] = gl_MeshVerticesNV[iid].gl_CullDistance[2];\n  136  \n  137:     BARRIER();\n  138  \n  139      gl_MeshPrimitivesNV[iid].gl_PrimitiveID = 6;\n  ...\n  142      gl_MeshPrimitivesNV[iid].gl_ViewportMask[0] = 9;\n  143  \n  144:     BARRIER();\n  145  \n  146      gl_MeshPrimitivesNV[iid+1].gl_PrimitiveID = gl_MeshPrimitivesNV[iid].gl_PrimitiveID;\n  ...\n  149      gl_MeshPrimitivesNV[iid+1].gl_ViewportMask[0] = gl_MeshPrimitivesNV[iid].gl_ViewportMask[0];\n  150  \n  151:     BARRIER();\n  152  \n  153      // check bound limits\n  ...\n  161      gl_PrimitiveCountNV = MAX_PRIM * 3;\n  162  \n  163:     BARRIER();\n  164  }\n  165  \n  ...\n  169    gl_SubgroupSize;\n  170    gl_SubgroupInvocationID;\n  171:   subgroupBarrier();\n  172:   subgroupMemoryBarrier();\n  173:   subgroupMemoryBarrierBuffer();\n  174:   subgroupMemoryBarrierImage();\n  175    subgroupElect();\n  176    gl_NumSubgroups;                  // allowed in mesh\n  177    gl_SubgroupID;                    // allowed in mesh\n  178:   subgroupMemoryBarrierShared();    // allowed in mesh\n  179  }\n  180  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rahit:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  133    gl_SubgroupSize;\n  134    gl_SubgroupInvocationID;\n  135:   subgroupBarrier();\n  136:   subgroupMemoryBarrier();\n  137:   subgroupMemoryBarrierBuffer();\n  138:   subgroupMemoryBarrierImage();\n  139    subgroupElect();\n  140  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rcall:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  121    gl_SubgroupSize;\n  122    gl_SubgroupInvocationID;\n  123:   subgroupBarrier();\n  124:   subgroupMemoryBarrier();\n  125:   subgroupMemoryBarrierBuffer();\n  126:   subgroupMemoryBarrierImage();\n  127    subgroupElect();\n  128  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rchit:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  131    gl_SubgroupSize;\n  132    gl_SubgroupInvocationID;\n  133:   subgroupBarrier();\n  134:   subgroupMemoryBarrier();\n  135:   subgroupMemoryBarrierBuffer();\n  136:   subgroupMemoryBarrierImage();\n  137    subgroupElect();\n  138  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rgen:\n    7    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    8    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    9:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   13    subgroupElect();               // ERROR, extension not enabled (basic)\n   14    gl_NumSubgroups;               // ERROR, only defined in compute\n   15    gl_SubgroupID;                 // ERROR, only defined in compute\n   16:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   17  \n   18    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  125    gl_SubgroupSize;\n  126    gl_SubgroupInvocationID;\n  127:   subgroupBarrier();\n  128:   subgroupMemoryBarrier();\n  129:   subgroupMemoryBarrierBuffer();\n  130:   subgroupMemoryBarrierImage();\n  131    subgroupElect();\n  132  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rint:\n    8    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    9    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n   10:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   13:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   14    subgroupElect();               // ERROR, extension not enabled (basic)\n   15    gl_NumSubgroups;               // ERROR, only defined in compute\n   16    gl_SubgroupID;                 // ERROR, only defined in compute\n   17:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   18  \n   19    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  131    gl_SubgroupSize;\n  132    gl_SubgroupInvocationID;\n  133:   subgroupBarrier();\n  134:   subgroupMemoryBarrier();\n  135:   subgroupMemoryBarrierBuffer();\n  136:   subgroupMemoryBarrierImage();\n  137    subgroupElect();\n  138  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.rmiss:\n    8    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    9    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n   10:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   12:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   13:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   14    subgroupElect();               // ERROR, extension not enabled (basic)\n   15    gl_NumSubgroups;               // ERROR, only defined in compute\n   16    gl_SubgroupID;                 // ERROR, only defined in compute\n   17:   subgroupMemoryBarrierShared(); // ERROR, only defined in compute\n   18  \n   19    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  125    gl_SubgroupSize;\n  126    gl_SubgroupInvocationID;\n  127:   subgroupBarrier();\n  128:   subgroupMemoryBarrier();\n  129:   subgroupMemoryBarrierBuffer();\n  130:   subgroupMemoryBarrierImage();\n  131    subgroupElect();\n  132  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.460.subgroup.task:\n    6    gl_SubgroupSize;               // ERROR, extension not enabled (basic)\n    7    gl_SubgroupInvocationID;       // ERROR, extension not enabled (basic)\n    8:   subgroupBarrier();             // ERROR, extension not enabled (basic)\n    9:   subgroupMemoryBarrier();       // ERROR, extension not enabled (basic)\n   10:   subgroupMemoryBarrierBuffer(); // ERROR, extension not enabled (basic)\n   11:   subgroupMemoryBarrierImage();  // ERROR, extension not enabled (basic)\n   12    subgroupElect();               // ERROR, extension not enabled (basic)\n   13    gl_NumSubgroups;               // ERROR, extension not enabled (basic)\n   14    gl_SubgroupID;                 // ERROR, extension not enabled (basic)\n   15:   subgroupMemoryBarrierShared(); // ERROR, extension not enabled (basic)\n   16  \n   17    subgroupAll(true);        // ERROR extension not enabled (vote)\n   ..\n  103  #define MAX_VIEWS gl_MaxMeshViewCountNV\n  104  \n  105: #define BARRIER() \\\n  106:     memoryBarrierShared(); \\\n  107:     barrier();\n  108  \n  109  #extension GL_NV_mesh_shader : enable\n  ...\n  138      imageStore(uni_image, ivec2(iid), mem[gid+1]);\n  139  \n  140:     BARRIER();\n  141  \n  142      // 2. task memory stores\n  ...\n  148      mytask.viewID     = viewID;\n  149  \n  150:     BARRIER();\n  151  \n  152      // 3. set task count\n  ...\n  159    gl_SubgroupSize;\n  160    gl_SubgroupInvocationID;\n  161:   subgroupBarrier();\n  162:   subgroupMemoryBarrier();\n  163:   subgroupMemoryBarrierBuffer();\n  164:   subgroupMemoryBarrierImage();\n  165    subgroupElect();\n  166    gl_NumSubgroups;                  // allowed in task\n  167    gl_SubgroupID;                    // allowed in task\n  168:   subgroupMemoryBarrierShared();    // allowed in task\n  169  }\n  170  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/glsl.es320.subgroupBasic.comp:\n   16      data.a[gl_NumSubgroups] = 1;\n   17      data.a[gl_SubgroupID] = (subgroupElect()) ? 1 : 0;\n   18:     subgroupBarrier();\n   19:     subgroupMemoryBarrier();\n   20:     subgroupMemoryBarrierBuffer();\n   21:     subgroupMemoryBarrierShared();\n   22:     subgroupMemoryBarrierImage();\n   23  }\n   24  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.barriers.comp:\n    2  float ComputeShaderFunction()\n    3  {\n    4:     AllMemoryBarrier();\n    5:     AllMemoryBarrierWithGroupSync();\n    6:     DeviceMemoryBarrier();\n    7:     DeviceMemoryBarrierWithGroupSync();\n    8:     GroupMemoryBarrier();\n    9:     GroupMemoryBarrierWithGroupSync();\n   10  \n   11      return 0.0;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.negative.comp:\n    3      uint out_u1;\n    4  \n    5:     // AllMemoryBarrier();              // invalid in fragment stage  TODO: parser currently crashes on empty arg list\n    6:     // AllMemoryBarrierWithGroupSync(); // invalid in fragment stage  TODO: parser currently crashes on empty arg list\n    7      // asdouble(inF0, inF1);                     // expected error: only integer inputs\n    8      // CheckAccessFullyMapped(3.0);              // expected error: only valid on integers\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.negative.frag:\n    1  float PixelShaderFunctionS(float inF0, float inF1, float inF2, int inI0)\n    2  {\n    3:     // AllMemoryBarrier();              // TODO: expected error: invalid in fragment stage\n    4:     // AllMemoryBarrierWithGroupSync(); // TODO: expected error: invalid in fragment stage\n    5      asdouble(inF0, inF1);                     // expected error: only integer inputs\n    6      CheckAccessFullyMapped(3.0);              // expected error: only valid on integers\n    .\n    9      D3DCOLORtoUBYTE4(inF0);                   // expected error: only on float4 inputs\n   10      determinant(inF0);                        // expected error: only valid on mats\n   11:     // DeviceMemoryBarrierWithGroupSync();      // TODO: expected error: only valid in compute stage\n   12      f16tof32(inF0);                           // expected error: only integer inputs\n   13      firstbithigh(inF0);                       // expected error: only integer inputs\n   ..\n   19      // InterlockedOor(inI0, inI0, 3);            // expected error: last parameter is out TODO: accepted even though marked as out in proto generator\n   20      // InterlockedXor(inI0, inI0, 3);            // expected error: last parameter is out TODO: accepted even though marked as out in proto generator\n   21:     // GroupMemoryBarrier();               // TODO: expected error: invalid in fragment stage\n   22:     // GroupMemoryBarrierWithGroupSync();  // TODO: expected error: invalid in fragment stage\n   23      length(inF0);                             // expected error: invalid on scalars\n   24      msad4(inF0, float2(0), float4(0));        // expected error: only integer inputs\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/hlsl.intrinsics.negative.vert:\n   16      uint out_u1;\n   17  \n   18:     // AllMemoryBarrier();                       // expected error: only valid in compute stage\n   19:     // AllMemoryBarrierWithGroupSync();          // expected error: only valid in compute stage\n   20      // asdouble(inF0, inF1);                     // expected error: only integer inputs\n   21      // CheckAccessFullyMapped(3.0);              // expected error: only valid on integers\n   ..\n   25      // cross(inF0, inF1);                        // expected error: only on float3 inputs\n   26      // D3DCOLORtoUBYTE4(inF0);                   // expected error: only on float4 inputs\n   27:     // DeviceMemoryBarrier();                    // expected error: only valid in pixel & compute stages\n   28:     // DeviceMemoryBarrierWithGroupSync();       // expected error: only valid in compute stage\n   29      // ddx(inF0);                                // expected error: only valid in pixel stage\n   30      // ddx_coarse(inF0);                         // expected error: only valid in pixel stage\n   ..\n   56      // InterlockedXor(gs_ua, gs_ub);             // expected error: only valid in pixel stage\n   57      // InterlockedXor(gs_ua, gs_ub, out_u1);     // expected error: only valid in pixel stage\n   58:     // GroupMemoryBarrier();                     // expected error: only valid in compute stage\n   59:     // GroupMemoryBarrierWithGroupSync();        // expected error: only valid in compute stage\n   60      // length(inF0);                             // expect error: invalid on scalars\n   61      // msad4(inF0, float2(0), float4(0));        // expected error: only integer inputs\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.310.comp:\n   29  void main()\n   30  {\n   31:     barrier();\n   32      outbname.f = s;\n   33      outbnamena.na = vec4(s);\n   ..\n   38      outnames.s = outbname.uns.length();\n   39      gl_DeviceIndex;\n   40:     memoryBarrierShared();\n   41:     groupMemoryBarrier();\n   42  }\n   43  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.320.meshShaderUserDefined.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   48      blk[iid*4].mArr[1][gid]  = vec3(17.0, 18.0, 19.0);\n   49  \n   50:     BARRIER();\n   51  \n   52      blk2[iid].f           = blk2[iid-1].f + 20.0;\n   ..\n   56      blk2[iid+2].m[3]      = blk2[iid+1].m[gid];\n   57  \n   58:     BARRIER();\n   59  }\n   60  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.400.tesc:\n    8  void main()\n    9  {\n   10:     barrier();\n   11  \n   12      int a = gl_MaxTessControlInputComponents +\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.atomic.comp:\n   19  void main()\n   20  {\n   21:     memoryBarrierAtomicCounter();\n   22      func(counter);\n   23      uint val = atomicCounter(countArr[2]);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.atomicCounter.comp:\n   19  void main()\n   20  {\n   21:     memoryBarrierAtomicCounter();\n   22      func(counter);\n   23      uint val = atomicCounter(countArr[2]);\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.barrier.vert:\n    7  {\n    8      c0 = vec4(1.0);\n    9:     memoryBarrier();\n   10      c1 = vec4(1.0);\n   11:     memoryBarrierBuffer();\n   12      ++c0;\n   13:     memoryBarrierImage();\n   14      ++c0;\n   15  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.memoryScopeSemantics.comp:\n   40      origu = atomicCompSwap(atomu, 10u, value, gl_ScopeDevice, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire);\n   41      atomicAdd(bufferu.x, 1, gl_ScopeDevice, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsRelease);\n   42:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsRelease);\n   43:     controlBarrier(gl_ScopeWorkgroup, gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire);\n   44:     controlBarrier(gl_ScopeWorkgroup, gl_ScopeWorkgroup, 0, 0);\n   45  \n   46      uint y;\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.memoryScopeSemantics_Error.comp:\n   18      atomicStore(atomu, value, gl_ScopeDevice, gl_StorageSemanticsBuffer, gl_StorageSemanticsBuffer);\n   19      origi = imageAtomicLoad(imagei, ivec2(0,0), gl_ScopeDevice, gl_SemanticsAcquire, gl_SemanticsAcquire);\n   20:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, 0);\n   21:     memoryBarrier(gl_ScopeWorkgroup, 0, gl_SemanticsRelease);\n   22:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsRelease | gl_SemanticsAcquire);\n   23      atomicAdd(atomu, value, gl_ScopeDevice, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsAcquire);\n   24      uint origu = atomicCompSwap(atomu, 10u, value, gl_ScopeDevice, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquire, gl_StorageSemanticsBuffer | gl_StorageSemanticsShared, gl_SemanticsAcquireRelease);\n   25:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsMakeVisible);\n   26:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer, gl_SemanticsAcquire | gl_SemanticsMakeAvailable);\n   27:     memoryBarrier(gl_ScopeWorkgroup, gl_StorageSemanticsBuffer, gl_SemanticsRelease | gl_SemanticsVolatile);\n   28      atomicCompSwap(bufferi.x, 10u, 10u, gl_ScopeDevice, gl_StorageSemanticsBuffer, gl_SemanticsAcquire | gl_SemanticsVolatile, gl_StorageSemanticsBuffer, gl_SemanticsAcquire);\n   29  }\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderBuiltins.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   28      gl_MeshVerticesNV[iid].gl_CullDistance[2] = 4.0;\n   29  \n   30:     BARRIER();\n   31  \n   32      gl_MeshVerticesNV[iid+1].gl_Position = gl_MeshVerticesNV[iid].gl_Position;\n   ..\n   35      gl_MeshVerticesNV[iid+1].gl_CullDistance[2] = gl_MeshVerticesNV[iid].gl_CullDistance[2];\n   36  \n   37:     BARRIER();\n   38  \n   39      gl_MeshPrimitivesNV[iid].gl_PrimitiveID = 6;\n   ..\n   42      gl_MeshPrimitivesNV[iid].gl_ViewportMask[0] = 9;\n   43  \n   44:     BARRIER();\n   45  \n   46      gl_MeshPrimitivesNV[iid+1].gl_PrimitiveID = gl_MeshPrimitivesNV[iid].gl_PrimitiveID;\n   ..\n   49      gl_MeshPrimitivesNV[iid+1].gl_ViewportMask[0] = gl_MeshPrimitivesNV[iid].gl_ViewportMask[0];\n   50  \n   51:     BARRIER();\n   52  \n   53      // check bound limits\n   ..\n   61      gl_PrimitiveCountNV = MAX_PRIM * 3;\n   62  \n   63:     BARRIER();\n   64  }\n   65  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderPerViewBuiltins.mesh:\n    5  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    6  \n    7: #define BARRIER() \\\n    8:     memoryBarrierShared(); \\\n    9:     barrier();\n   10  \n   11  #extension GL_NV_mesh_shader : enable\n   ..\n   30      gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0] = 8;\n   31  \n   32:     BARRIER();\n   33  \n   34      gl_MeshVerticesNV[iid+1].gl_PositionPerViewNV[viewID]          = gl_MeshVerticesNV[iid].gl_PositionPerViewNV[viewID];\n   ..\n   38      gl_MeshPrimitivesNV[iid+1].gl_ViewportMaskPerViewNV[viewID][0] = gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0];\n   39  \n   40:     BARRIER();\n   41  }\n   42  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderPerViewUserDefined.mesh:\n    5  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    6  \n    7: #define BARRIER() \\\n    8:     memoryBarrierShared(); \\\n    9:     barrier();\n   10  \n   11  #extension GL_NV_mesh_shader : enable\n   ..\n   57      b[iid].color4            = vec4(4.0);\n   58  \n   59:     BARRIER();\n   60  \n   61      b2[iid].color5[viewID]    = vec4(5.0);\n   ..\n   64      b2[iid].color8[viewID]    = vec4(8.0);\n   65  \n   66:     BARRIER();\n   67  }\n   68  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderRedeclBuiltins.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   44      gl_MeshVerticesNV[iid].gl_CullDistance[2] = 4.0;\n   45  \n   46:     BARRIER();\n   47  \n   48      gl_MeshVerticesNV[iid+1].gl_Position = gl_MeshVerticesNV[iid].gl_Position;\n   ..\n   51      gl_MeshVerticesNV[iid+1].gl_CullDistance[2] = gl_MeshVerticesNV[iid].gl_CullDistance[2];\n   52  \n   53:     BARRIER();\n   54  \n   55      gl_MeshPrimitivesNV[iid].gl_PrimitiveID = 6;\n   ..\n   58      gl_MeshPrimitivesNV[iid].gl_ViewportMask[0] = 9;\n   59  \n   60:     BARRIER();\n   61  \n   62      gl_MeshPrimitivesNV[iid+1].gl_PrimitiveID = gl_MeshPrimitivesNV[iid].gl_PrimitiveID;\n   ..\n   65      gl_MeshPrimitivesNV[iid+1].gl_ViewportMask[0] = gl_MeshPrimitivesNV[iid].gl_ViewportMask[0];\n   66  \n   67:     BARRIER();\n   68  \n   69      // check bound limits\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderRedeclPerViewBuiltins.mesh:\n    5  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    6  \n    7: #define BARRIER() \\\n    8:     memoryBarrierShared(); \\\n    9:     barrier();\n   10  \n   11  #extension GL_NV_mesh_shader : enable\n   ..\n   41      gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0] = 8;\n   42  \n   43:     BARRIER();\n   44  \n   45      gl_MeshVerticesNV[iid+1].gl_PositionPerViewNV[viewID]          = gl_MeshVerticesNV[iid].gl_PositionPerViewNV[viewID];\n   ..\n   49      gl_MeshPrimitivesNV[iid+1].gl_ViewportMaskPerViewNV[viewID][0] = gl_MeshPrimitivesNV[iid].gl_ViewportMaskPerViewNV[viewID][0];\n   50  \n   51:     BARRIER();\n   52  }\n   53  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderSharedMem.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   36      imageStore(uni_image, ivec2(iid), mem[gid+1]);\n   37  \n   38:     BARRIER();\n   39  }\n   40  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderTaskMem.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshShaderUserDefined.mesh:\n    4  #define MAX_PRIM 32\n    5  \n    6: #define BARRIER() \\\n    7:     memoryBarrierShared(); \\\n    8:     barrier();\n    9  \n   10  #extension GL_NV_mesh_shader : enable\n   ..\n   48      blk[iid*4].mArr[1][gid]  = vec3(17.0, 18.0, 19.0);\n   49  \n   50:     BARRIER();\n   51  \n   52      blk2[iid].f           = blk2[iid-1].f + 20.0;\n   ..\n   56      blk2[iid+2].m[3]      = blk2[iid+1].m[gid];\n   57  \n   58:     BARRIER();\n   59  }\n   60  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.meshTaskShader.task:\n    3  #define MAX_VIEWS gl_MaxMeshViewCountNV\n    4  \n    5: #define BARRIER() \\\n    6:     memoryBarrierShared(); \\\n    7:     barrier();\n    8  \n    9  #extension GL_NV_mesh_shader : enable\n   ..\n   38      imageStore(uni_image, ivec2(iid), mem[gid+1]);\n   39  \n   40:     BARRIER();\n   41  \n   42      // 2. task memory stores\n   ..\n   48      mytask.viewID     = viewID;\n   49  \n   50:     BARRIER();\n   51  \n   52      // 3. set task count\n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/spv.subgroupBasic.comp:\n   16      data.a[gl_NumSubgroups] = 1;\n   17      data.a[gl_SubgroupID] = (subgroupElect()) ? 1 : 0;\n   18:     subgroupBarrier();\n   19:     subgroupMemoryBarrier();\n   20:     subgroupMemoryBarrierBuffer();\n   21:     subgroupMemoryBarrierShared();\n   22:     subgroupMemoryBarrierImage();\n   23  }\n   24  \n\n/home/max/dev/Falcor/third_party/slang/external/glslang/Test/web.comp:\n   27  void main()\n   28  {\n   29:     barrier();\n   30  \n   31      bInst.data[bInst.size / 2] *= vec4(7.0);\n   32  \n   33:     memoryBarrier();\n   34:     groupMemoryBarrier();\n   35:     memoryBarrierShared();\n   36:     memoryBarrierBuffer();\n   37  \n   38      s[3] = vec4(0, arrX[0], arrY[0], arrZ[0]);\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/example_win32_directx12/main.cpp:\n  386          frameCtxt->CommandAllocator->Reset();\n  387  \n  388:         D3D12_RESOURCE_BARRIER barrier = {};\n  389:         barrier.Type                   = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n  390:         barrier.Flags                  = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  391:         barrier.Transition.pResource   = g_mainRenderTargetResource[backBufferIdx];\n  392:         barrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n  393:         barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_PRESENT;\n  394:         barrier.Transition.StateAfter  = D3D12_RESOURCE_STATE_RENDER_TARGET;\n  395  \n  396          g_pd3dCommandList->Reset(frameCtxt->CommandAllocator, NULL);\n  397:         g_pd3dCommandList->ResourceBarrier(1, &barrier);\n  398          g_pd3dCommandList->ClearRenderTargetView(g_mainRenderTargetDescriptor[backBufferIdx], (float*)&clear_color, 0, NULL);\n  399          g_pd3dCommandList->OMSetRenderTargets(1, &g_mainRenderTargetDescriptor[backBufferIdx], FALSE, NULL);\n  ...\n  401          ImGui::Render();\n  402          ImGui_ImplDX12_RenderDrawData(ImGui::GetDrawData(), g_pd3dCommandList);\n  403:         barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_RENDER_TARGET;\n  404:         barrier.Transition.StateAfter  = D3D12_RESOURCE_STATE_PRESENT;\n  405:         g_pd3dCommandList->ResourceBarrier(1, &barrier);\n  406          g_pd3dCommandList->Close();\n  407  \n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/imgui_impl_dx12.cpp:\n  298          dstLocation.SubresourceIndex = 0;\n  299  \n  300:         D3D12_RESOURCE_BARRIER barrier = {};\n  301:         barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n  302:         barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  303:         barrier.Transition.pResource   = pTexture;\n  304:         barrier.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n  305:         barrier.Transition.StateBefore = D3D12_RESOURCE_STATE_COPY_DEST;\n  306:         barrier.Transition.StateAfter  = D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;\n  307  \n  308          ID3D12Fence* fence = NULL;\n  ...\n  331  \n  332          cmdList->CopyTextureRegion(&dstLocation, 0, 0, 0, &srcLocation, NULL);\n  333:         cmdList->ResourceBarrier(1, &barrier);\n  334  \n  335          hr = cmdList->Close();\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/imgui_impl_vulkan.cpp:\n  425      // Copy to Image:\n  426      {\n  427:         VkImageMemoryBarrier copy_barrier[1] = {};\n  428:         copy_barrier[0].sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n  429:         copy_barrier[0].dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n  430:         copy_barrier[0].oldLayout = VK_IMAGE_LAYOUT_UNDEFINED;\n  431:         copy_barrier[0].newLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;\n  432:         copy_barrier[0].srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  433:         copy_barrier[0].dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  434:         copy_barrier[0].image = g_FontImage;\n  435:         copy_barrier[0].subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  436:         copy_barrier[0].subresourceRange.levelCount = 1;\n  437:         copy_barrier[0].subresourceRange.layerCount = 1;\n  438:         vkCmdPipelineBarrier(command_buffer, VK_PIPELINE_STAGE_HOST_BIT, VK_PIPELINE_STAGE_TRANSFER_BIT, 0, 0, NULL, 0, NULL, 1, copy_barrier);\n  439  \n  440          VkBufferImageCopy region = {};\n  ...\n  446          vkCmdCopyBufferToImage(command_buffer, g_UploadBuffer, g_FontImage, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &region);\n  447  \n  448:         VkImageMemoryBarrier use_barrier[1] = {};\n  449:         use_barrier[0].sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n  450:         use_barrier[0].srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n  451:         use_barrier[0].dstAccessMask = VK_ACCESS_SHADER_READ_BIT;\n  452:         use_barrier[0].oldLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;\n  453:         use_barrier[0].newLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;\n  454:         use_barrier[0].srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  455:         use_barrier[0].dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n  456:         use_barrier[0].image = g_FontImage;\n  457:         use_barrier[0].subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  458:         use_barrier[0].subresourceRange.levelCount = 1;\n  459:         use_barrier[0].subresourceRange.layerCount = 1;\n  460:         vkCmdPipelineBarrier(command_buffer, VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, 0, 0, NULL, 0, NULL, 1, use_barrier);\n  461      }\n  462  \n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/libs/gl3w/GL/gl3w.c:\n  672  PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC gl3wGetActiveAtomicCounterBufferiv;\n  673  PFNGLBINDIMAGETEXTUREPROC gl3wBindImageTexture;\n  674: PFNGLMEMORYBARRIERPROC gl3wMemoryBarrier;\n  675  PFNGLTEXSTORAGE1DPROC gl3wTexStorage1D;\n  676  PFNGLTEXSTORAGE2DPROC gl3wTexStorage2D;\n  ...\n 1279  \tgl3wGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) get_proc(\"glGetActiveAtomicCounterBufferiv\");\n 1280  \tgl3wBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC) get_proc(\"glBindImageTexture\");\n 1281: \tgl3wMemoryBarrier = (PFNGLMEMORYBARRIERPROC) get_proc(\"glMemoryBarrier\");\n 1282  \tgl3wTexStorage1D = (PFNGLTEXSTORAGE1DPROC) get_proc(\"glTexStorage1D\");\n 1283  \tgl3wTexStorage2D = (PFNGLTEXSTORAGE2DPROC) get_proc(\"glTexStorage2D\");\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/libs/gl3w/GL/gl3w.h:\n  559  extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC gl3wGetActiveAtomicCounterBufferiv;\n  560  extern PFNGLBINDIMAGETEXTUREPROC gl3wBindImageTexture;\n  561: extern PFNGLMEMORYBARRIERPROC gl3wMemoryBarrier;\n  562  extern PFNGLTEXSTORAGE1DPROC gl3wTexStorage1D;\n  563  extern PFNGLTEXSTORAGE2DPROC gl3wTexStorage2D;\n  ...\n 1164  #define glGetActiveAtomicCounterBufferiv\t\tgl3wGetActiveAtomicCounterBufferiv\n 1165  #define glBindImageTexture\t\tgl3wBindImageTexture\n 1166: #define glMemoryBarrier\t\tgl3wMemoryBarrier\n 1167  #define glTexStorage1D\t\tgl3wTexStorage1D\n 1168  #define glTexStorage2D\t\tgl3wTexStorage2D\n\n/home/max/dev/Falcor/third_party/slang/external/imgui/examples/libs/gl3w/GL/glcorearb.h:\n 1177  /* reuse GL_UNSIGNED_INT_ATOMIC_COUNTER */\n 1178  /* Reuse tokens from ARB_shader_image_load_store */\n 1179: /* reuse GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT */\n 1180: /* reuse GL_ELEMENT_ARRAY_BARRIER_BIT */\n 1181: /* reuse GL_UNIFORM_BARRIER_BIT */\n 1182: /* reuse GL_TEXTURE_FETCH_BARRIER_BIT */\n 1183: /* reuse GL_SHADER_IMAGE_ACCESS_BARRIER_BIT */\n 1184: /* reuse GL_COMMAND_BARRIER_BIT */\n 1185: /* reuse GL_PIXEL_BUFFER_BARRIER_BIT */\n 1186: /* reuse GL_TEXTURE_UPDATE_BARRIER_BIT */\n 1187: /* reuse GL_BUFFER_UPDATE_BARRIER_BIT */\n 1188: /* reuse GL_FRAMEBUFFER_BARRIER_BIT */\n 1189: /* reuse GL_TRANSFORM_FEEDBACK_BARRIER_BIT */\n 1190: /* reuse GL_ATOMIC_COUNTER_BARRIER_BIT */\n 1191: /* reuse GL_ALL_BARRIER_BITS */\n 1192  /* reuse GL_MAX_IMAGE_UNITS */\n 1193  /* reuse GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS */\n ....\n 1504  /* reuse GL_MAX_SHADER_STORAGE_BLOCK_SIZE */\n 1505  /* reuse GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT */\n 1506: /* reuse GL_SHADER_STORAGE_BARRIER_BIT */\n 1507  /* reuse GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES */\n 1508  /* Reuse tokens from ARB_stencil_texturing */\n ....\n 2148  \n 2149  #ifndef GL_ARB_shader_image_load_store\n 2150: #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001\n 2151: #define GL_ELEMENT_ARRAY_BARRIER_BIT      0x00000002\n 2152: #define GL_UNIFORM_BARRIER_BIT            0x00000004\n 2153: #define GL_TEXTURE_FETCH_BARRIER_BIT      0x00000008\n 2154: #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020\n 2155: #define GL_COMMAND_BARRIER_BIT            0x00000040\n 2156: #define GL_PIXEL_BUFFER_BARRIER_BIT       0x00000080\n 2157: #define GL_TEXTURE_UPDATE_BARRIER_BIT     0x00000100\n 2158: #define GL_BUFFER_UPDATE_BARRIER_BIT      0x00000200\n 2159: #define GL_FRAMEBUFFER_BARRIER_BIT        0x00000400\n 2160: #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800\n 2161: #define GL_ATOMIC_COUNTER_BARRIER_BIT     0x00001000\n 2162: #define GL_ALL_BARRIER_BITS               0xFFFFFFFF\n 2163  #define GL_MAX_IMAGE_UNITS                0x8F38\n 2164  #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39\n ....\n 2580  #define GL_MAX_SHADER_STORAGE_BLOCK_SIZE  0x90DE\n 2581  #define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF\n 2582: #define GL_SHADER_STORAGE_BARRIER_BIT     0x2000\n 2583  #define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS\n 2584  /* reuse GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS */\n ....\n 4262  #ifdef GLCOREARB_PROTOTYPES\n 4263  GLAPI void APIENTRY glBindImageTexture (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 4264: GLAPI void APIENTRY glMemoryBarrier (GLbitfield barriers);\n 4265  #endif /* GLCOREARB_PROTOTYPES */\n 4266  typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\n 4267: typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);\n 4268  #endif\n 4269  \n\n/home/max/dev/Falcor/third_party/slang/external/imgui/imgui_draw.cpp:\n 2872  }\n 2873  \n 2874: static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;\n 2875: static const unsigned char *stb__barrier_in_b;\n 2876  static unsigned char *stb__dout;\n 2877  static void stb__match(const unsigned char *data, unsigned int length)\n 2878  {\n 2879      // INVERSE of memmove... write each byte before copying the next...\n 2880:     IM_ASSERT(stb__dout + length <= stb__barrier_out_e);\n 2881:     if (stb__dout + length > stb__barrier_out_e) { stb__dout += length; return; }\n 2882:     if (data < stb__barrier_out_b) { stb__dout = stb__barrier_out_e+1; return; }\n 2883      while (length--) *stb__dout++ = *data++;\n 2884  }\n ....\n 2886  static void stb__lit(const unsigned char *data, unsigned int length)\n 2887  {\n 2888:     IM_ASSERT(stb__dout + length <= stb__barrier_out_e);\n 2889:     if (stb__dout + length > stb__barrier_out_e) { stb__dout += length; return; }\n 2890:     if (data < stb__barrier_in_b) { stb__dout = stb__barrier_out_e+1; return; }\n 2891      memcpy(stb__dout, data, length);\n 2892      stb__dout += length;\n ....\n 2951      if (stb__in4(4) != 0)          return 0; // error! stream is > 4GB\n 2952      olen = stb_decompress_length(i);\n 2953:     stb__barrier_in_b = i;\n 2954:     stb__barrier_out_e = output + olen;\n 2955:     stb__barrier_out_b = output;\n 2956      i += 16;\n 2957  \n\n/home/max/dev/Falcor/third_party/slang/external/slang-binaries/premake/premake-5.0.0-alpha13/bin/osx/premake5:\n    <binary>\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.core.grammar.json:\n 2015      },\n 2016      {\n 2017:       \"opname\" : \"OpControlBarrier\",\n 2018        \"opcode\" : 224,\n 2019        \"operands\" : [\n ....\n 2024      },\n 2025      {\n 2026:       \"opname\" : \"OpMemoryBarrier\",\n 2027        \"opcode\" : 225,\n 2028        \"operands\" : [\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.cs:\n  872              OpEmitStreamVertex = 220,\n  873              OpEndStreamPrimitive = 221,\n  874:             OpControlBarrier = 224,\n  875:             OpMemoryBarrier = 225,\n  876              OpAtomicLoad = 227,\n  877              OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.h:\n  871      SpvOpEmitStreamVertex = 220,\n  872      SpvOpEndStreamPrimitive = 221,\n  873:     SpvOpControlBarrier = 224,\n  874:     SpvOpMemoryBarrier = 225,\n  875      SpvOpAtomicLoad = 227,\n  876      SpvOpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.hpp:\n  867      OpEmitStreamVertex = 220,\n  868      OpEndStreamPrimitive = 221,\n  869:     OpControlBarrier = 224,\n  870:     OpMemoryBarrier = 225,\n  871      OpAtomicLoad = 227,\n  872      OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.hpp11:\n  867      OpEmitStreamVertex = 220,\n  868      OpEndStreamPrimitive = 221,\n  869:     OpControlBarrier = 224,\n  870:     OpMemoryBarrier = 225,\n  871      OpAtomicLoad = 227,\n  872      OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.json:\n  897                      \"OpEmitStreamVertex\": 220,\n  898                      \"OpEndStreamPrimitive\": 221,\n  899:                     \"OpControlBarrier\": 224,\n  900:                     \"OpMemoryBarrier\": 225,\n  901                      \"OpAtomicLoad\": 227,\n  902                      \"OpAtomicStore\": 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.lua:\n  828          OpEmitStreamVertex = 220,\n  829          OpEndStreamPrimitive = 221,\n  830:         OpControlBarrier = 224,\n  831:         OpMemoryBarrier = 225,\n  832          OpAtomicLoad = 227,\n  833          OpAtomicStore = 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.0/spirv.py:\n  828          'OpEmitStreamVertex' : 220,\n  829          'OpEndStreamPrimitive' : 221,\n  830:         'OpControlBarrier' : 224,\n  831:         'OpMemoryBarrier' : 225,\n  832          'OpAtomicLoad' : 227,\n  833          'OpAtomicStore' : 228,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.core.grammar.json:\n 2015      },\n 2016      {\n 2017:       \"opname\" : \"OpControlBarrier\",\n 2018        \"opcode\" : 224,\n 2019        \"operands\" : [\n ....\n 2024      },\n 2025      {\n 2026:       \"opname\" : \"OpMemoryBarrier\",\n 2027        \"opcode\" : 225,\n 2028        \"operands\" : [\n ....\n 3081      },\n 3082      {\n 3083:       \"opname\" : \"OpTypeNamedBarrier\",\n 3084        \"opcode\" : 327,\n 3085        \"operands\" : [\n 3086          { \"kind\" : \"IdResult\" }\n 3087        ],\n 3088:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3089      },\n 3090      {\n 3091:       \"opname\" : \"OpNamedBarrierInitialize\",\n 3092        \"opcode\" : 328,\n 3093        \"operands\" : [\n ....\n 3096          { \"kind\" : \"IdRef\",        \"name\" : \"'Subgroup Count'\" }\n 3097        ],\n 3098:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3099      },\n 3100      {\n 3101:       \"opname\" : \"OpMemoryNamedBarrier\",\n 3102        \"opcode\" : 329,\n 3103        \"operands\" : [\n 3104:         { \"kind\" : \"IdRef\",             \"name\" : \"'Named Barrier'\" },\n 3105          { \"kind\" : \"IdScope\",           \"name\" : \"'Memory'\" },\n 3106          { \"kind\" : \"IdMemorySemantics\", \"name\" : \"'Semantics'\" }\n 3107        ],\n 3108:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3109      },\n 3110      {\n ....\n 5692          },\n 5693          {\n 5694:           \"enumerant\" : \"NamedBarrier\",\n 5695            \"value\" : 59,\n 5696            \"capabilities\" : [ \"Kernel\" ]\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.cs:\n  644              MultiViewport = 57,\n  645              SubgroupDispatch = 58,\n  646:             NamedBarrier = 59,\n  647              PipeStorage = 60,\n  648              SubgroupBallotKHR = 4423,\n  ...\n  884              OpEmitStreamVertex = 220,\n  885              OpEndStreamPrimitive = 221,\n  886:             OpControlBarrier = 224,\n  887:             OpMemoryBarrier = 225,\n  888              OpAtomicLoad = 227,\n  889              OpAtomicStore = 228,\n  ...\n  979              OpGetKernelLocalSizeForSubgroupCount = 325,\n  980              OpGetKernelMaxNumSubgroups = 326,\n  981:             OpTypeNamedBarrier = 327,\n  982:             OpNamedBarrierInitialize = 328,\n  983:             OpMemoryNamedBarrier = 329,\n  984              OpModuleProcessed = 330,\n  985              OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.h:\n  643      SpvCapabilityMultiViewport = 57,\n  644      SpvCapabilitySubgroupDispatch = 58,\n  645:     SpvCapabilityNamedBarrier = 59,\n  646      SpvCapabilityPipeStorage = 60,\n  647      SpvCapabilitySubgroupBallotKHR = 4423,\n  ...\n  883      SpvOpEmitStreamVertex = 220,\n  884      SpvOpEndStreamPrimitive = 221,\n  885:     SpvOpControlBarrier = 224,\n  886:     SpvOpMemoryBarrier = 225,\n  887      SpvOpAtomicLoad = 227,\n  888      SpvOpAtomicStore = 228,\n  ...\n  978      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n  979      SpvOpGetKernelMaxNumSubgroups = 326,\n  980:     SpvOpTypeNamedBarrier = 327,\n  981:     SpvOpNamedBarrierInitialize = 328,\n  982:     SpvOpMemoryNamedBarrier = 329,\n  983      SpvOpModuleProcessed = 330,\n  984      SpvOpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.hpp:\n  639      CapabilityMultiViewport = 57,\n  640      CapabilitySubgroupDispatch = 58,\n  641:     CapabilityNamedBarrier = 59,\n  642      CapabilityPipeStorage = 60,\n  643      CapabilitySubgroupBallotKHR = 4423,\n  ...\n  879      OpEmitStreamVertex = 220,\n  880      OpEndStreamPrimitive = 221,\n  881:     OpControlBarrier = 224,\n  882:     OpMemoryBarrier = 225,\n  883      OpAtomicLoad = 227,\n  884      OpAtomicStore = 228,\n  ...\n  974      OpGetKernelLocalSizeForSubgroupCount = 325,\n  975      OpGetKernelMaxNumSubgroups = 326,\n  976:     OpTypeNamedBarrier = 327,\n  977:     OpNamedBarrierInitialize = 328,\n  978:     OpMemoryNamedBarrier = 329,\n  979      OpModuleProcessed = 330,\n  980      OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.hpp11:\n  639      MultiViewport = 57,\n  640      SubgroupDispatch = 58,\n  641:     NamedBarrier = 59,\n  642      PipeStorage = 60,\n  643      SubgroupBallotKHR = 4423,\n  ...\n  879      OpEmitStreamVertex = 220,\n  880      OpEndStreamPrimitive = 221,\n  881:     OpControlBarrier = 224,\n  882:     OpMemoryBarrier = 225,\n  883      OpAtomicLoad = 227,\n  884      OpAtomicStore = 228,\n  ...\n  974      OpGetKernelLocalSizeForSubgroupCount = 325,\n  975      OpGetKernelMaxNumSubgroups = 326,\n  976:     OpTypeNamedBarrier = 327,\n  977:     OpNamedBarrierInitialize = 328,\n  978:     OpMemoryNamedBarrier = 329,\n  979      OpModuleProcessed = 330,\n  980      OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.json:\n  664                      \"MultiViewport\": 57,\n  665                      \"SubgroupDispatch\": 58,\n  666:                     \"NamedBarrier\": 59,\n  667                      \"PipeStorage\": 60,\n  668                      \"SubgroupBallotKHR\": 4423,\n  ...\n  907                      \"OpEmitStreamVertex\": 220,\n  908                      \"OpEndStreamPrimitive\": 221,\n  909:                     \"OpControlBarrier\": 224,\n  910:                     \"OpMemoryBarrier\": 225,\n  911                      \"OpAtomicLoad\": 227,\n  912                      \"OpAtomicStore\": 228,\n  ...\n 1002                      \"OpGetKernelLocalSizeForSubgroupCount\": 325,\n 1003                      \"OpGetKernelMaxNumSubgroups\": 326,\n 1004:                     \"OpTypeNamedBarrier\": 327,\n 1005:                     \"OpNamedBarrierInitialize\": 328,\n 1006:                     \"OpMemoryNamedBarrier\": 329,\n 1007                      \"OpModuleProcessed\": 330,\n 1008                      \"OpDecorateId\": 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.lua:\n  601          MultiViewport = 57,\n  602          SubgroupDispatch = 58,\n  603:         NamedBarrier = 59,\n  604          PipeStorage = 60,\n  605          SubgroupBallotKHR = 4423,\n  ...\n  840          OpEmitStreamVertex = 220,\n  841          OpEndStreamPrimitive = 221,\n  842:         OpControlBarrier = 224,\n  843:         OpMemoryBarrier = 225,\n  844          OpAtomicLoad = 227,\n  845          OpAtomicStore = 228,\n  ...\n  935          OpGetKernelLocalSizeForSubgroupCount = 325,\n  936          OpGetKernelMaxNumSubgroups = 326,\n  937:         OpTypeNamedBarrier = 327,\n  938:         OpNamedBarrierInitialize = 328,\n  939:         OpMemoryNamedBarrier = 329,\n  940          OpModuleProcessed = 330,\n  941          OpDecorateId = 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.1/spirv.py:\n  601          'MultiViewport' : 57,\n  602          'SubgroupDispatch' : 58,\n  603:         'NamedBarrier' : 59,\n  604          'PipeStorage' : 60,\n  605          'SubgroupBallotKHR' : 4423,\n  ...\n  840          'OpEmitStreamVertex' : 220,\n  841          'OpEndStreamPrimitive' : 221,\n  842:         'OpControlBarrier' : 224,\n  843:         'OpMemoryBarrier' : 225,\n  844          'OpAtomicLoad' : 227,\n  845          'OpAtomicStore' : 228,\n  ...\n  935          'OpGetKernelLocalSizeForSubgroupCount' : 325,\n  936          'OpGetKernelMaxNumSubgroups' : 326,\n  937:         'OpTypeNamedBarrier' : 327,\n  938:         'OpNamedBarrierInitialize' : 328,\n  939:         'OpMemoryNamedBarrier' : 329,\n  940          'OpModuleProcessed' : 330,\n  941          'OpDecorateId' : 332,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.core.grammar.json:\n 2015      },\n 2016      {\n 2017:       \"opname\" : \"OpControlBarrier\",\n 2018        \"opcode\" : 224,\n 2019        \"operands\" : [\n ....\n 2024      },\n 2025      {\n 2026:       \"opname\" : \"OpMemoryBarrier\",\n 2027        \"opcode\" : 225,\n 2028        \"operands\" : [\n ....\n 3081      },\n 3082      {\n 3083:       \"opname\" : \"OpTypeNamedBarrier\",\n 3084        \"opcode\" : 327,\n 3085        \"operands\" : [\n 3086          { \"kind\" : \"IdResult\" }\n 3087        ],\n 3088:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3089      },\n 3090      {\n 3091:       \"opname\" : \"OpNamedBarrierInitialize\",\n 3092        \"opcode\" : 328,\n 3093        \"operands\" : [\n ....\n 3096          { \"kind\" : \"IdRef\",        \"name\" : \"'Subgroup Count'\" }\n 3097        ],\n 3098:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3099      },\n 3100      {\n 3101:       \"opname\" : \"OpMemoryNamedBarrier\",\n 3102        \"opcode\" : 329,\n 3103        \"operands\" : [\n 3104:         { \"kind\" : \"IdRef\",             \"name\" : \"'Named Barrier'\" },\n 3105          { \"kind\" : \"IdScope\",           \"name\" : \"'Memory'\" },\n 3106          { \"kind\" : \"IdMemorySemantics\", \"name\" : \"'Semantics'\" }\n 3107        ],\n 3108:       \"capabilities\" : [ \"NamedBarrier\" ]\n 3109      },\n 3110      {\n ....\n 5740          },\n 5741          {\n 5742:           \"enumerant\" : \"NamedBarrier\",\n 5743            \"value\" : 59,\n 5744            \"capabilities\" : [ \"Kernel\" ]\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.cs:\n  649              MultiViewport = 57,\n  650              SubgroupDispatch = 58,\n  651:             NamedBarrier = 59,\n  652              PipeStorage = 60,\n  653              SubgroupBallotKHR = 4423,\n  ...\n  889              OpEmitStreamVertex = 220,\n  890              OpEndStreamPrimitive = 221,\n  891:             OpControlBarrier = 224,\n  892:             OpMemoryBarrier = 225,\n  893              OpAtomicLoad = 227,\n  894              OpAtomicStore = 228,\n  ...\n  984              OpGetKernelLocalSizeForSubgroupCount = 325,\n  985              OpGetKernelMaxNumSubgroups = 326,\n  986:             OpTypeNamedBarrier = 327,\n  987:             OpNamedBarrierInitialize = 328,\n  988:             OpMemoryNamedBarrier = 329,\n  989              OpModuleProcessed = 330,\n  990              OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.h:\n  648      SpvCapabilityMultiViewport = 57,\n  649      SpvCapabilitySubgroupDispatch = 58,\n  650:     SpvCapabilityNamedBarrier = 59,\n  651      SpvCapabilityPipeStorage = 60,\n  652      SpvCapabilitySubgroupBallotKHR = 4423,\n  ...\n  888      SpvOpEmitStreamVertex = 220,\n  889      SpvOpEndStreamPrimitive = 221,\n  890:     SpvOpControlBarrier = 224,\n  891:     SpvOpMemoryBarrier = 225,\n  892      SpvOpAtomicLoad = 227,\n  893      SpvOpAtomicStore = 228,\n  ...\n  983      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n  984      SpvOpGetKernelMaxNumSubgroups = 326,\n  985:     SpvOpTypeNamedBarrier = 327,\n  986:     SpvOpNamedBarrierInitialize = 328,\n  987:     SpvOpMemoryNamedBarrier = 329,\n  988      SpvOpModuleProcessed = 330,\n  989      SpvOpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.hpp:\n  644      CapabilityMultiViewport = 57,\n  645      CapabilitySubgroupDispatch = 58,\n  646:     CapabilityNamedBarrier = 59,\n  647      CapabilityPipeStorage = 60,\n  648      CapabilitySubgroupBallotKHR = 4423,\n  ...\n  884      OpEmitStreamVertex = 220,\n  885      OpEndStreamPrimitive = 221,\n  886:     OpControlBarrier = 224,\n  887:     OpMemoryBarrier = 225,\n  888      OpAtomicLoad = 227,\n  889      OpAtomicStore = 228,\n  ...\n  979      OpGetKernelLocalSizeForSubgroupCount = 325,\n  980      OpGetKernelMaxNumSubgroups = 326,\n  981:     OpTypeNamedBarrier = 327,\n  982:     OpNamedBarrierInitialize = 328,\n  983:     OpMemoryNamedBarrier = 329,\n  984      OpModuleProcessed = 330,\n  985      OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.hpp11:\n  644      MultiViewport = 57,\n  645      SubgroupDispatch = 58,\n  646:     NamedBarrier = 59,\n  647      PipeStorage = 60,\n  648      SubgroupBallotKHR = 4423,\n  ...\n  884      OpEmitStreamVertex = 220,\n  885      OpEndStreamPrimitive = 221,\n  886:     OpControlBarrier = 224,\n  887:     OpMemoryBarrier = 225,\n  888      OpAtomicLoad = 227,\n  889      OpAtomicStore = 228,\n  ...\n  979      OpGetKernelLocalSizeForSubgroupCount = 325,\n  980      OpGetKernelMaxNumSubgroups = 326,\n  981:     OpTypeNamedBarrier = 327,\n  982:     OpNamedBarrierInitialize = 328,\n  983:     OpMemoryNamedBarrier = 329,\n  984      OpModuleProcessed = 330,\n  985      OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.json:\n  669                      \"MultiViewport\": 57,\n  670                      \"SubgroupDispatch\": 58,\n  671:                     \"NamedBarrier\": 59,\n  672                      \"PipeStorage\": 60,\n  673                      \"SubgroupBallotKHR\": 4423,\n  ...\n  912                      \"OpEmitStreamVertex\": 220,\n  913                      \"OpEndStreamPrimitive\": 221,\n  914:                     \"OpControlBarrier\": 224,\n  915:                     \"OpMemoryBarrier\": 225,\n  916                      \"OpAtomicLoad\": 227,\n  917                      \"OpAtomicStore\": 228,\n  ...\n 1007                      \"OpGetKernelLocalSizeForSubgroupCount\": 325,\n 1008                      \"OpGetKernelMaxNumSubgroups\": 326,\n 1009:                     \"OpTypeNamedBarrier\": 327,\n 1010:                     \"OpNamedBarrierInitialize\": 328,\n 1011:                     \"OpMemoryNamedBarrier\": 329,\n 1012                      \"OpModuleProcessed\": 330,\n 1013                      \"OpExecutionModeId\": 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.lua:\n  606          MultiViewport = 57,\n  607          SubgroupDispatch = 58,\n  608:         NamedBarrier = 59,\n  609          PipeStorage = 60,\n  610          SubgroupBallotKHR = 4423,\n  ...\n  845          OpEmitStreamVertex = 220,\n  846          OpEndStreamPrimitive = 221,\n  847:         OpControlBarrier = 224,\n  848:         OpMemoryBarrier = 225,\n  849          OpAtomicLoad = 227,\n  850          OpAtomicStore = 228,\n  ...\n  940          OpGetKernelLocalSizeForSubgroupCount = 325,\n  941          OpGetKernelMaxNumSubgroups = 326,\n  942:         OpTypeNamedBarrier = 327,\n  943:         OpNamedBarrierInitialize = 328,\n  944:         OpMemoryNamedBarrier = 329,\n  945          OpModuleProcessed = 330,\n  946          OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/1.2/spirv.py:\n  606          'MultiViewport' : 57,\n  607          'SubgroupDispatch' : 58,\n  608:         'NamedBarrier' : 59,\n  609          'PipeStorage' : 60,\n  610          'SubgroupBallotKHR' : 4423,\n  ...\n  845          'OpEmitStreamVertex' : 220,\n  846          'OpEndStreamPrimitive' : 221,\n  847:         'OpControlBarrier' : 224,\n  848:         'OpMemoryBarrier' : 225,\n  849          'OpAtomicLoad' : 227,\n  850          'OpAtomicStore' : 228,\n  ...\n  940          'OpGetKernelLocalSizeForSubgroupCount' : 325,\n  941          'OpGetKernelMaxNumSubgroups' : 326,\n  942:         'OpTypeNamedBarrier' : 327,\n  943:         'OpNamedBarrierInitialize' : 328,\n  944:         'OpMemoryNamedBarrier' : 329,\n  945          'OpModuleProcessed' : 330,\n  946          'OpExecutionModeId' : 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.core.grammar.json:\n  110      },\n  111      {\n  112:       \"tag\"     : \"Barrier\",\n  113:       \"heading\" : \"Barrier Instructions\"\n  114      },\n  115      {\n  ...\n 2337      },\n 2338      {\n 2339:       \"opname\" : \"OpControlBarrier\",\n 2340:       \"class\"  : \"Barrier\",\n 2341        \"opcode\" : 224,\n 2342        \"operands\" : [\n ....\n 2347      },\n 2348      {\n 2349:       \"opname\" : \"OpMemoryBarrier\",\n 2350:       \"class\"  : \"Barrier\",\n 2351        \"opcode\" : 225,\n 2352        \"operands\" : [\n ....\n 3509      },\n 3510      {\n 3511:       \"opname\" : \"OpTypeNamedBarrier\",\n 3512        \"class\"  : \"Type-Declaration\",\n 3513        \"opcode\" : 327,\n ....\n 3515          { \"kind\" : \"IdResult\" }\n 3516        ],\n 3517:       \"capabilities\" : [ \"NamedBarrier\" ],\n 3518        \"version\" : \"1.1\"\n 3519      },\n 3520      {\n 3521:       \"opname\" : \"OpNamedBarrierInitialize\",\n 3522:       \"class\"  : \"Barrier\",\n 3523        \"opcode\" : 328,\n 3524        \"operands\" : [\n ....\n 3527          { \"kind\" : \"IdRef\", \"name\" : \"'Subgroup Count'\" }\n 3528        ],\n 3529:       \"capabilities\" : [ \"NamedBarrier\" ],\n 3530        \"version\" : \"1.1\"\n 3531      },\n 3532      {\n 3533:       \"opname\" : \"OpMemoryNamedBarrier\",\n 3534:       \"class\"  : \"Barrier\",\n 3535        \"opcode\" : 329,\n 3536        \"operands\" : [\n 3537:         { \"kind\" : \"IdRef\", \"name\" : \"'Named Barrier'\" },\n 3538          { \"kind\" : \"IdScope\", \"name\" : \"'Memory'\" },\n 3539          { \"kind\" : \"IdMemorySemantics\", \"name\" : \"'Semantics'\" }\n 3540        ],\n 3541:       \"capabilities\" : [ \"NamedBarrier\" ],\n 3542        \"version\" : \"1.1\"\n 3543      },\n ....\n 10834          },\n 10835          {\n 10836:           \"enumerant\" : \"NamedBarrier\",\n 10837            \"value\" : 59,\n 10838            \"capabilities\" : [ \"Kernel\" ],\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.cs:\n  863              MultiViewport = 57,\n  864              SubgroupDispatch = 58,\n  865:             NamedBarrier = 59,\n  866              PipeStorage = 60,\n  867              GroupNonUniform = 61,\n  ...\n 1236              OpEmitStreamVertex = 220,\n 1237              OpEndStreamPrimitive = 221,\n 1238:             OpControlBarrier = 224,\n 1239:             OpMemoryBarrier = 225,\n 1240              OpAtomicLoad = 227,\n 1241              OpAtomicStore = 228,\n ....\n 1331              OpGetKernelLocalSizeForSubgroupCount = 325,\n 1332              OpGetKernelMaxNumSubgroups = 326,\n 1333:             OpTypeNamedBarrier = 327,\n 1334:             OpNamedBarrierInitialize = 328,\n 1335:             OpMemoryNamedBarrier = 329,\n 1336              OpModuleProcessed = 330,\n 1337              OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.h:\n  863      SpvCapabilityMultiViewport = 57,\n  864      SpvCapabilitySubgroupDispatch = 58,\n  865:     SpvCapabilityNamedBarrier = 59,\n  866      SpvCapabilityPipeStorage = 60,\n  867      SpvCapabilityGroupNonUniform = 61,\n  ...\n 1235      SpvOpEmitStreamVertex = 220,\n 1236      SpvOpEndStreamPrimitive = 221,\n 1237:     SpvOpControlBarrier = 224,\n 1238:     SpvOpMemoryBarrier = 225,\n 1239      SpvOpAtomicLoad = 227,\n 1240      SpvOpAtomicStore = 228,\n ....\n 1330      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n 1331      SpvOpGetKernelMaxNumSubgroups = 326,\n 1332:     SpvOpTypeNamedBarrier = 327,\n 1333:     SpvOpNamedBarrierInitialize = 328,\n 1334:     SpvOpMemoryNamedBarrier = 329,\n 1335      SpvOpModuleProcessed = 330,\n 1336      SpvOpExecutionModeId = 331,\n ....\n 1806      case SpvOpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1807      case SpvOpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1808:     case SpvOpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1809:     case SpvOpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1810      case SpvOpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1811      case SpvOpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1901      case SpvOpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1902      case SpvOpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1903:     case SpvOpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1904:     case SpvOpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1905:     case SpvOpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1906      case SpvOpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1907      case SpvOpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.hpp:\n  859      CapabilityMultiViewport = 57,\n  860      CapabilitySubgroupDispatch = 58,\n  861:     CapabilityNamedBarrier = 59,\n  862      CapabilityPipeStorage = 60,\n  863      CapabilityGroupNonUniform = 61,\n  ...\n 1231      OpEmitStreamVertex = 220,\n 1232      OpEndStreamPrimitive = 221,\n 1233:     OpControlBarrier = 224,\n 1234:     OpMemoryBarrier = 225,\n 1235      OpAtomicLoad = 227,\n 1236      OpAtomicStore = 228,\n ....\n 1326      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1327      OpGetKernelMaxNumSubgroups = 326,\n 1328:     OpTypeNamedBarrier = 327,\n 1329:     OpNamedBarrierInitialize = 328,\n 1330:     OpMemoryNamedBarrier = 329,\n 1331      OpModuleProcessed = 330,\n 1332      OpExecutionModeId = 331,\n ....\n 1802      case OpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1803      case OpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1804:     case OpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1805:     case OpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1806      case OpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1807      case OpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1897      case OpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1898      case OpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1899:     case OpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1900:     case OpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1901:     case OpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1902      case OpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1903      case OpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.hpp11:\n  859      MultiViewport = 57,\n  860      SubgroupDispatch = 58,\n  861:     NamedBarrier = 59,\n  862      PipeStorage = 60,\n  863      GroupNonUniform = 61,\n  ...\n 1231      OpEmitStreamVertex = 220,\n 1232      OpEndStreamPrimitive = 221,\n 1233:     OpControlBarrier = 224,\n 1234:     OpMemoryBarrier = 225,\n 1235      OpAtomicLoad = 227,\n 1236      OpAtomicStore = 228,\n ....\n 1326      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1327      OpGetKernelMaxNumSubgroups = 326,\n 1328:     OpTypeNamedBarrier = 327,\n 1329:     OpNamedBarrierInitialize = 328,\n 1330:     OpMemoryNamedBarrier = 329,\n 1331      OpModuleProcessed = 330,\n 1332      OpExecutionModeId = 331,\n ....\n 1802      case Op::OpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;\n 1803      case Op::OpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;\n 1804:     case Op::OpControlBarrier: *hasResult = false; *hasResultType = false; break;\n 1805:     case Op::OpMemoryBarrier: *hasResult = false; *hasResultType = false; break;\n 1806      case Op::OpAtomicLoad: *hasResult = true; *hasResultType = true; break;\n 1807      case Op::OpAtomicStore: *hasResult = false; *hasResultType = false; break;\n ....\n 1897      case Op::OpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;\n 1898      case Op::OpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;\n 1899:     case Op::OpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;\n 1900:     case Op::OpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;\n 1901:     case Op::OpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;\n 1902      case Op::OpModuleProcessed: *hasResult = false; *hasResultType = false; break;\n 1903      case Op::OpExecutionModeId: *hasResult = false; *hasResultType = false; break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.json:\n  849                      \"MultiViewport\": 57,\n  850                      \"SubgroupDispatch\": 58,\n  851:                     \"NamedBarrier\": 59,\n  852                      \"PipeStorage\": 60,\n  853                      \"GroupNonUniform\": 61,\n  ...\n 1222                      \"OpEmitStreamVertex\": 220,\n 1223                      \"OpEndStreamPrimitive\": 221,\n 1224:                     \"OpControlBarrier\": 224,\n 1225:                     \"OpMemoryBarrier\": 225,\n 1226                      \"OpAtomicLoad\": 227,\n 1227                      \"OpAtomicStore\": 228,\n ....\n 1317                      \"OpGetKernelLocalSizeForSubgroupCount\": 325,\n 1318                      \"OpGetKernelMaxNumSubgroups\": 326,\n 1319:                     \"OpTypeNamedBarrier\": 327,\n 1320:                     \"OpNamedBarrierInitialize\": 328,\n 1321:                     \"OpMemoryNamedBarrier\": 329,\n 1322                      \"OpModuleProcessed\": 330,\n 1323                      \"OpExecutionModeId\": 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.lua:\n  821          MultiViewport = 57,\n  822          SubgroupDispatch = 58,\n  823:         NamedBarrier = 59,\n  824          PipeStorage = 60,\n  825          GroupNonUniform = 61,\n  ...\n 1188          OpEmitStreamVertex = 220,\n 1189          OpEndStreamPrimitive = 221,\n 1190:         OpControlBarrier = 224,\n 1191:         OpMemoryBarrier = 225,\n 1192          OpAtomicLoad = 227,\n 1193          OpAtomicStore = 228,\n ....\n 1283          OpGetKernelLocalSizeForSubgroupCount = 325,\n 1284          OpGetKernelMaxNumSubgroups = 326,\n 1285:         OpTypeNamedBarrier = 327,\n 1286:         OpNamedBarrierInitialize = 328,\n 1287:         OpMemoryNamedBarrier = 329,\n 1288          OpModuleProcessed = 330,\n 1289          OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spirv.py:\n  821          'MultiViewport' : 57,\n  822          'SubgroupDispatch' : 58,\n  823:         'NamedBarrier' : 59,\n  824          'PipeStorage' : 60,\n  825          'GroupNonUniform' : 61,\n  ...\n 1188          'OpEmitStreamVertex' : 220,\n 1189          'OpEndStreamPrimitive' : 221,\n 1190:         'OpControlBarrier' : 224,\n 1191:         'OpMemoryBarrier' : 225,\n 1192          'OpAtomicLoad' : 227,\n 1193          'OpAtomicStore' : 228,\n ....\n 1283          'OpGetKernelLocalSizeForSubgroupCount' : 325,\n 1284          'OpGetKernelMaxNumSubgroups' : 326,\n 1285:         'OpTypeNamedBarrier' : 327,\n 1286:         'OpNamedBarrierInitialize' : 328,\n 1287:         'OpMemoryNamedBarrier' : 329,\n 1288          'OpModuleProcessed' : 330,\n 1289          'OpExecutionModeId' : 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-headers/include/spirv/unified1/spv.d:\n  866      MultiViewport = 57,\n  867      SubgroupDispatch = 58,\n  868:     NamedBarrier = 59,\n  869      PipeStorage = 60,\n  870      GroupNonUniform = 61,\n  ...\n 1239      OpEmitStreamVertex = 220,\n 1240      OpEndStreamPrimitive = 221,\n 1241:     OpControlBarrier = 224,\n 1242:     OpMemoryBarrier = 225,\n 1243      OpAtomicLoad = 227,\n 1244      OpAtomicStore = 228,\n ....\n 1334      OpGetKernelLocalSizeForSubgroupCount = 325,\n 1335      OpGetKernelMaxNumSubgroups = 326,\n 1336:     OpTypeNamedBarrier = 327,\n 1337:     OpNamedBarrierInitialize = 328,\n 1338:     OpMemoryNamedBarrier = 329,\n 1339      OpModuleProcessed = 330,\n 1340      OpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools-generated/core.insts-unified1.inc:\n   32  static const SpvCapability pygen_variable_caps_Matrix[] = {SpvCapabilityMatrix};\n   33  static const SpvCapability pygen_variable_caps_MeshShadingNV[] = {SpvCapabilityMeshShadingNV};\n   34: static const SpvCapability pygen_variable_caps_NamedBarrier[] = {SpvCapabilityNamedBarrier};\n   35  static const SpvCapability pygen_variable_caps_PipeStorage[] = {SpvCapabilityPipeStorage};\n   36  static const SpvCapability pygen_variable_caps_Pipes[] = {SpvCapabilityPipes};\n   ..\n  282    {\"EmitStreamVertex\", SpvOpEmitStreamVertex, 1, pygen_variable_caps_GeometryStreams, 1, {SPV_OPERAND_TYPE_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  283    {\"EndStreamPrimitive\", SpvOpEndStreamPrimitive, 1, pygen_variable_caps_GeometryStreams, 1, {SPV_OPERAND_TYPE_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  284:   {\"ControlBarrier\", SpvOpControlBarrier, 0, nullptr, 3, {SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  285:   {\"MemoryBarrier\", SpvOpMemoryBarrier, 0, nullptr, 2, {SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  286    {\"AtomicLoad\", SpvOpAtomicLoad, 0, nullptr, 5, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  287    {\"AtomicStore\", SpvOpAtomicStore, 0, nullptr, 4, {SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID, SPV_OPERAND_TYPE_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  ...\n  377    {\"GetKernelLocalSizeForSubgroupCount\", SpvOpGetKernelLocalSizeForSubgroupCount, 1, pygen_variable_caps_SubgroupDispatch, 7, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  378    {\"GetKernelMaxNumSubgroups\", SpvOpGetKernelMaxNumSubgroups, 1, pygen_variable_caps_SubgroupDispatch, 6, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  379:   {\"TypeNamedBarrier\", SpvOpTypeNamedBarrier, 1, pygen_variable_caps_NamedBarrier, 1, {SPV_OPERAND_TYPE_RESULT_ID}, 1, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  380:   {\"NamedBarrierInitialize\", SpvOpNamedBarrierInitialize, 1, pygen_variable_caps_NamedBarrier, 3, {SPV_OPERAND_TYPE_TYPE_ID, SPV_OPERAND_TYPE_RESULT_ID, SPV_OPERAND_TYPE_ID}, 1, 1, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  381:   {\"MemoryNamedBarrier\", SpvOpMemoryNamedBarrier, 1, pygen_variable_caps_NamedBarrier, 3, {SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_SCOPE_ID, SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  382    {\"ModuleProcessed\", SpvOpModuleProcessed, 0, nullptr, 1, {SPV_OPERAND_TYPE_LITERAL_STRING}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  383    {\"ExecutionModeId\", SpvOpExecutionModeId, 0, nullptr, 2, {SPV_OPERAND_TYPE_ID, SPV_OPERAND_TYPE_EXECUTION_MODE}, 0, 0, 0, nullptr, SPV_SPIRV_VERSION_WORD(1,2), 0xffffffffu},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools-generated/enum_string_mapping.inc:\n  275      case SpvCapabilitySubgroupDispatch:\n  276        return \"SubgroupDispatch\";\n  277:     case SpvCapabilityNamedBarrier:\n  278:       return \"NamedBarrier\";\n  279      case SpvCapabilityPipeStorage:\n  280        return \"PipeStorage\";\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools-generated/operand.kinds-unified1.inc:\n  851    {\"MultiViewport\", 57, 1, pygen_variable_caps_Geometry, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1, 0), 0xffffffffu},\n  852    {\"SubgroupDispatch\", 58, 1, pygen_variable_caps_DeviceEnqueue, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  853:   {\"NamedBarrier\", 59, 1, pygen_variable_caps_Kernel, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  854    {\"PipeStorage\", 60, 1, pygen_variable_caps_Pipes, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,1), 0xffffffffu},\n  855    {\"GroupNonUniform\", 61, 0, nullptr, 0, nullptr, {}, SPV_SPIRV_VERSION_WORD(1,3), 0xffffffffu},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/Android.mk:\n   42  \t\tsource/val/validate_arithmetics.cpp \\\n   43  \t\tsource/val/validate_atomics.cpp \\\n   44: \t\tsource/val/validate_barriers.cpp \\\n   45  \t\tsource/val/validate_bitwise.cpp \\\n   46  \t\tsource/val/validate_builtins.cpp \\\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/BUILD.gn:\n  445      \"source/val/validate_arithmetics.cpp\",\n  446      \"source/val/validate_atomics.cpp\",\n  447:     \"source/val/validate_barriers.cpp\",\n  448      \"source/val/validate_bitwise.cpp\",\n  449      \"source/val/validate_builtins.cpp\",\n  ...\n  876        \"test/text_start_new_inst_test.cpp\",\n  877        \"test/text_to_binary.annotation_test.cpp\",\n  878:       \"test/text_to_binary.barrier_test.cpp\",\n  879        \"test/text_to_binary.constant_test.cpp\",\n  880        \"test/text_to_binary.control_flow_test.cpp\",\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/CHANGES:\n  264     - For Vulkan, disallow structures containing opaque types (#2546)\n  265     - Validate storage class OpenCL environment rules for atomics (#2750)\n  266:    - Update OpControlBarriers rules for WebGPU (#2769)\n  267:    - Update OpMemoryBarriers rules for WebGPU (#2775)\n  268     - Update WebGPU validation rules of OpAtomic*s (#2777)\n  269     Fixes:\n  ...\n  643     - Check Vulkan built-in variables\n  644     - Check Vulkan-specific atomic result type rule.\n  645:    - Relax control barrier check for SPIR-V 1.3.  Fixes #1427\n  646     - Check OpPhi.\n  647     - Check OpMemoryModel.\n  ...\n  659       #1469: Vulkan: Permit Subgroup memory scope for Vulkan 1.1.\n  660       #1472: Per-vertex variable validation fixes.\n  661:      #1483: Valdiate barrier execution scopes for Vulkan 1.1.\n  662   - Fixes:\n  663     #898: Linker properly removes FuncParamAttr from imported symbols.\n  ...\n  706     - CCP can now fold floating point arithmetic. #1311\n  707   - Validator:\n  708:    - Validate barrier instructions.\n  709     - Check Vulkan-specific rules for atomics.\n  710     - Check Vulkan prohibition of Location or Component decorations on BuiltIn variables.\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/include/spirv-tools/optimizer.hpp:\n  803  // Create a pass to upgrade to the VulkanKHR memory model.\n  804  // This pass upgrades the Logical GLSL450 memory model to Logical VulkanKHR.\n  805: // Additionally, it modifies memory, image, atomic and barrier operations to\n  806  // conform to that model's requirements.\n  807  Optimizer::PassToken CreateUpgradeMemoryModelPass();\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/CMakeLists.txt:\n  286    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_arithmetics.cpp\n  287    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_atomics.cpp\n  288:   ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_barriers.cpp\n  289    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_bitwise.cpp\n  290    ${CMAKE_CURRENT_SOURCE_DIR}/val/validate_builtins.cpp\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/fuzzer_pass_replace_loads_stores_with_copy_memories.cpp:\n   39    // OpStore within the same block. Potential instructions OpLoad to be matched\n   40    // are stored in a hash map. If we encounter instructions that write to memory\n   41:   // or instructions of memory barriers that could operate on variables within\n   42    // unsafe storage classes we need to erase the hash map to avoid unsafe\n   43    // operations.\n   ..\n   69            current_op_loads.clear();\n   70          } else if (TransformationReplaceLoadStoreWithCopyMemory::\n   71:                        IsMemoryBarrierOpCode(instruction.opcode())) {\n   72            for (auto it = current_op_loads.begin();\n   73                 it != current_op_loads.end();) {\n   ..\n   80                      GetIRContext(), source_id->type_id());\n   81              if (!TransformationReplaceLoadStoreWithCopyMemory::\n   82:                     IsStorageClassSafeAcrossMemoryBarriers(storage_class)) {\n   83                it = current_op_loads.erase(it);\n   84              } else {\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/protobufs/spirvfuzz_protobufs.h:\n   16  #define SOURCE_FUZZ_SPIRVFUZZ_PROTOBUFS_H_\n   17  \n   18: // This header file serves to act as a barrier between the protobuf header\n   19  // files and files that include them.  It uses compiler pragmas to disable\n   20  // diagnostics, in order to ignore warnings generated during the processing\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/transformation_replace_load_store_with_copy_memory.cpp:\n   96      if (IsMemoryWritingOpCode(it->opcode())) {\n   97        return false;\n   98:     } else if (IsMemoryBarrierOpCode(it->opcode()) &&\n   99:                !IsStorageClassSafeAcrossMemoryBarriers(storage_class)) {\n  100        return false;\n  101      }\n  ...\n  157  }\n  158  \n  159: bool TransformationReplaceLoadStoreWithCopyMemory::IsMemoryBarrierOpCode(\n  160      SpvOp op_code) {\n  161    switch (op_code) {\n  162:     case SpvOpMemoryBarrier:\n  163:     case SpvOpMemoryNamedBarrier:\n  164        return true;\n  165      default:\n  ...\n  169  \n  170  bool TransformationReplaceLoadStoreWithCopyMemory::\n  171:     IsStorageClassSafeAcrossMemoryBarriers(SpvStorageClass storage_class) {\n  172    switch (storage_class) {\n  173      case SpvStorageClassUniformConstant:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/fuzz/transformation_replace_load_store_with_copy_memory.h:\n   39    // - The OpStore must write the intermediate value loaded by the OpLoad.\n   40    // - The OpLoad and the OpStore must not have certain instruction in between\n   41:   //   (checked by IsMemoryWritingOpCode(), IsMemoryBarrierOpCode(),\n   42:   //   IsStorageClassSafeAcrossMemoryBarriers()).\n   43    bool IsApplicable(\n   44        opt::IRContext* ir_context,\n   ..\n   55    static bool IsMemoryWritingOpCode(SpvOp op_code);\n   56  \n   57:   // Checks if the instruction that has an |op_code| is a memory barrier that\n   58    // could interfere with the source operand of the OpLoad instruction\n   59:   static bool IsMemoryBarrierOpCode(SpvOp op_code);\n   60  \n   61    // Checks if the |storage_class| of the source operand of the OpLoad\n   62    // instruction implies that this variable cannot change (due to other threads)\n   63:   // across memory barriers.\n   64:   static bool IsStorageClassSafeAcrossMemoryBarriers(\n   65        SpvStorageClass storage_class);\n   66  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/name_mapper.cpp:\n  282        SaveName(result_id, \"PipeStorage\");\n  283        break;\n  284:     case SpvOpTypeNamedBarrier:\n  285:       SaveName(result_id, \"NamedBarrier\");\n  286        break;\n  287      case SpvOpTypeStruct:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opcode.cpp:\n  333      case SpvOpTypePipe:\n  334      case SpvOpTypePipeStorage:\n  335:     case SpvOpTypeNamedBarrier:\n  336      case SpvOpTypeAccelerationStructureNV:\n  337      case SpvOpTypeCooperativeMatrixNV:\n  ...\n  467      case SpvOpTypeForwardPointer:\n  468      case SpvOpTypePipeStorage:\n  469:     case SpvOpTypeNamedBarrier:\n  470        return true;\n  471      default:\n  ...\n  690  std::vector<uint32_t> spvOpcodeMemorySemanticsOperandIndices(SpvOp opcode) {\n  691    switch (opcode) {\n  692:     case SpvOpMemoryBarrier:\n  693        return {1};\n  694      case SpvOpAtomicStore:\n  695:     case SpvOpControlBarrier:\n  696      case SpvOpAtomicFlagClear:\n  697:     case SpvOpMemoryNamedBarrier:\n  698        return {2};\n  699      case SpvOpAtomicLoad:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/code_sink.cpp:\n  201    get_module()->ForEachInst([this, &has_sync](Instruction* inst) {\n  202      switch (inst->opcode()) {\n  203:       case SpvOpMemoryBarrier: {\n  204          uint32_t mem_semantics_id = inst->GetSingleWordInOperand(1);\n  205          if (IsSyncOnUniform(mem_semantics_id)) {\n  ...\n  208          break;\n  209        }\n  210:       case SpvOpControlBarrier:\n  211        case SpvOpAtomicLoad:\n  212        case SpvOpAtomicStore:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_fission.cpp:\n  299      }\n  300  \n  301:     // If we find any instruction which we can't move (such as a barrier),\n  302      // return false.\n  303      if (!MovableInstruction(*inst)) return false;\n  ...\n  311    // original and vice versa.\n  312    for (Instruction* inst : original_loop_instructions_) {\n  313:     // If we find any instruction which we can't move (such as a barrier),\n  314      // return false.\n  315      if (!MovableInstruction(*inst)) return false;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_fusion.cpp:\n  231  }  // namespace opt\n  232  \n  233: bool LoopFusion::ContainsBarriersOrFunctionCalls(Loop* loop) {\n  234    for (const auto& block : loop->GetBlocks()) {\n  235      for (const auto& inst : *containing_function_->FindBlock(block)) {\n  236        auto opcode = inst.opcode();\n  237:       if (opcode == SpvOpFunctionCall || opcode == SpvOpControlBarrier ||\n  238:           opcode == SpvOpMemoryBarrier || opcode == SpvOpTypeNamedBarrier ||\n  239:           opcode == SpvOpNamedBarrierInitialize ||\n  240:           opcode == SpvOpMemoryNamedBarrier) {\n  241          return true;\n  242        }\n  ...\n  392  \n  393    // Bail out if there are function calls as they could have side-effects that\n  394:   // cause dependencies or if there are any barriers.\n  395:   if (ContainsBarriersOrFunctionCalls(loop_0_) ||\n  396:       ContainsBarriersOrFunctionCalls(loop_1_)) {\n  397      return false;\n  398    }\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_fusion.h:\n   82    bool IsUsedInLoop(Instruction* instruction, Loop* loop);\n   83  \n   84:   // Returns |true| if |loop| has at least one barrier or function call.\n   85:   bool ContainsBarriersOrFunctionCalls(Loop* loop);\n   86  \n   87    // Get all instructions in the |loop| (except in the latch block) that have\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/loop_unswitch_pass.cpp:\n   61    // Returns true if the loop can be unswitched.\n   62    // Can be unswitch if:\n   63:   //  - The loop has no instructions that prevents it (such as barrier);\n   64    //  - The loop has one conditional branch or switch that do not depends on the\n   65    //  loop;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/reflect.h:\n   45  inline bool IsTypeInst(SpvOp opcode) {\n   46    return (opcode >= SpvOpTypeVoid && opcode <= SpvOpTypeForwardPointer) ||\n   47:          opcode == SpvOpTypePipeStorage || opcode == SpvOpTypeNamedBarrier ||\n   48           opcode == SpvOpTypeAccelerationStructureNV ||\n   49           opcode == SpvOpTypeAccelerationStructureKHR ||\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/replace_invalid_opc.cpp:\n   88          if (model != SpvExecutionModelTessellationControl &&\n   89              model != SpvExecutionModelGLCompute) {\n   90:           if (inst->opcode() == SpvOpControlBarrier) {\n   91              assert(model != SpvExecutionModelKernel &&\n   92                     \"Expecting to be working on a shader module.\");\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/type_manager.cpp:\n  233      DefineParameterlessCase(Queue);\n  234      DefineParameterlessCase(PipeStorage);\n  235:     DefineParameterlessCase(NamedBarrier);\n  236      DefineParameterlessCase(AccelerationStructureNV);\n  237  #undef DefineParameterlessCase\n  ...\n  528      DefineNoSubtypeCase(Pipe);\n  529      DefineNoSubtypeCase(PipeStorage);\n  530:     DefineNoSubtypeCase(NamedBarrier);\n  531      DefineNoSubtypeCase(AccelerationStructureNV);\n  532  #undef DefineNoSubtypeCase\n  ...\n  851        type = new PipeStorage();\n  852        break;\n  853:     case SpvOpTypeNamedBarrier:\n  854:       type = new NamedBarrier();\n  855        break;\n  856      case SpvOpTypeAccelerationStructureNV:\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/types.cpp:\n  126      DeclareKindCase(ForwardPointer);\n  127      DeclareKindCase(PipeStorage);\n  128:     DeclareKindCase(NamedBarrier);\n  129      DeclareKindCase(AccelerationStructureNV);\n  130      DeclareKindCase(CooperativeMatrixNV);\n  ...\n  172      DeclareKindCase(ForwardPointer);\n  173      DeclareKindCase(PipeStorage);\n  174:     DeclareKindCase(NamedBarrier);\n  175      DeclareKindCase(AccelerationStructureNV);\n  176      DeclareKindCase(CooperativeMatrixNV);\n  ...\n  223      DeclareKindCase(ForwardPointer);\n  224      DeclareKindCase(PipeStorage);\n  225:     DeclareKindCase(NamedBarrier);\n  226      DeclareKindCase(AccelerationStructureNV);\n  227      DeclareKindCase(CooperativeMatrixNV);\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/types.h:\n   57  class ForwardPointer;\n   58  class PipeStorage;\n   59: class NamedBarrier;\n   60  class AccelerationStructureNV;\n   61  class CooperativeMatrixNV;\n   ..\n   94      kForwardPointer,\n   95      kPipeStorage,\n   96:     kNamedBarrier,\n   97      kAccelerationStructureNV,\n   98      kCooperativeMatrixNV,\n   ..\n  199    DeclareCastMethod(ForwardPointer)\n  200    DeclareCastMethod(PipeStorage)\n  201:   DeclareCastMethod(NamedBarrier)\n  202    DeclareCastMethod(AccelerationStructureNV)\n  203    DeclareCastMethod(CooperativeMatrixNV)\n  ...\n  661  DefineParameterlessType(Queue, queue);\n  662  DefineParameterlessType(PipeStorage, pipe_storage);\n  663: DefineParameterlessType(NamedBarrier, named_barrier);\n  664  DefineParameterlessType(AccelerationStructureNV, accelerationStructureNV);\n  665  DefineParameterlessType(RayQueryProvisionalKHR, rayQueryProvisionalKHR);\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/upgrade_memory_model.cpp:\n   42    UpgradeInstructions();\n   43    CleanupDecorations();\n   44:   UpgradeBarriers();\n   45    UpgradeMemoryScope();\n   46  \n   ..\n  610  }\n  611  \n  612: void UpgradeMemoryModel::UpgradeBarriers() {\n  613:   std::vector<Instruction*> barriers;\n  614:   // Collects all the control barriers in |function|. Returns true if the\n  615    // function operates on the Output storage class.\n  616:   ProcessFunction CollectBarriers = [this, &barriers](Function* function) {\n  617      bool operates_on_output = false;\n  618      for (auto& block : *function) {\n  619:       block.ForEachInst([this, &barriers,\n  620                           &operates_on_output](Instruction* inst) {\n  621:         if (inst->opcode() == SpvOpControlBarrier) {\n  622:           barriers.push_back(inst);\n  623          } else if (!operates_on_output) {\n  624            // This instruction operates on output storage class if it is a\n  ...\n  651      if (e.GetSingleWordInOperand(0u) == SpvExecutionModelTessellationControl) {\n  652        roots.push(e.GetSingleWordInOperand(1u));\n  653:       if (context()->ProcessCallTreeFromRoots(CollectBarriers, &roots)) {\n  654:         for (auto barrier : barriers) {\n  655:           // Add OutputMemoryKHR to the semantics of the barriers.\n  656:           uint32_t semantics_id = barrier->GetSingleWordInOperand(2u);\n  657            Instruction* semantics_inst =\n  658                context()->get_def_use_mgr()->GetDef(semantics_id);\n  ...\n  664                    semantics_type, {static_cast<uint32_t>(semantics_value) |\n  665                                     SpvMemorySemanticsOutputMemoryKHRMask});\n  666:           barrier->SetInOperand(2u, {context()\n  667                                           ->get_constant_mgr()\n  668                                           ->GetDefiningInstruction(constant)\n  ...\n  670          }\n  671        }\n  672:       barriers.clear();\n  673      }\n  674  }\n  ...\n  679      // * Group operations can only be subgroup\n  680      // * Non-uniform can only be workgroup or subgroup\n  681:     // * Named barriers are not supported by Vulkan\n  682      // * Workgroup ops (e.g. async_copy) have at most workgroup scope.\n  683      if (spvOpcodeIsAtomicOp(inst->opcode())) {\n  ...\n  685          inst->SetInOperand(1, {GetScopeConstant(SpvScopeQueueFamilyKHR)});\n  686        }\n  687:     } else if (inst->opcode() == SpvOpControlBarrier) {\n  688        if (IsDeviceScope(inst->GetSingleWordInOperand(1))) {\n  689          inst->SetInOperand(1, {GetScopeConstant(SpvScopeQueueFamilyKHR)});\n  690        }\n  691:     } else if (inst->opcode() == SpvOpMemoryBarrier) {\n  692        if (IsDeviceScope(inst->GetSingleWordInOperand(0))) {\n  693          inst->SetInOperand(0, {GetScopeConstant(SpvScopeQueueFamilyKHR)});\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/opt/upgrade_memory_model.h:\n   39  // This pass remove deprecated decorations (Volatile and Coherent) and replaces\n   40  // them with new flags on individual instructions. It adds the Output storage\n   41: // class semantic to control barriers in tessellation control shaders that have\n   42  // an access to Output memory.\n   43  class UpgradeMemoryModel : public Pass {\n   ..\n  119  \n  120    // For all tessellation control entry points, if there is an operation on\n  121:   // Output storage class, then all barriers are modified to include the\n  122    // OutputMemoryKHR semantic.\n  123:   void UpgradeBarriers();\n  124  \n  125    // If the Vulkan memory model is specified, device scope actually means\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate.cpp:\n  411      if (auto error = AtomicsPass(*vstate, &instruction)) return error;\n  412      if (auto error = PrimitivesPass(*vstate, &instruction)) return error;\n  413:     if (auto error = BarriersPass(*vstate, &instruction)) return error;\n  414      // Group\n  415      // Device-Side Enqueue\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate.h:\n  164  spv_result_t AtomicsPass(ValidationState_t& _, const Instruction* inst);\n  165  \n  166: /// Validates correctness of barrier instructions.\n  167: spv_result_t BarriersPass(ValidationState_t& _, const Instruction* inst);\n  168  \n  169  /// Validates correctness of literal numbers.\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_barriers.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Validates correctness of barrier SPIR-V instructions.\n   16  \n   17  #include <string>\n   ..\n   31  namespace val {\n   32  \n   33: // Validates correctness of barrier instructions.\n   34: spv_result_t BarriersPass(ValidationState_t& _, const Instruction* inst) {\n   35    const SpvOp opcode = inst->opcode();\n   36    const uint32_t result_type = inst->type_id();\n   37  \n   38    switch (opcode) {\n   39:     case SpvOpControlBarrier: {\n   40        if (_.version() < SPV_SPIRV_VERSION_WORD(1, 3)) {\n   41          _.function(inst->function()->id())\n   ..\n   49                      if (message) {\n   50                        *message =\n   51:                           \"OpControlBarrier requires one of the following \"\n   52                            \"Execution \"\n   53                            \"Models: TessellationControl, GLCompute or Kernel\";\n   ..\n   76      }\n   77  \n   78:     case SpvOpMemoryBarrier: {\n   79        const uint32_t memory_scope = inst->word(1);\n   80  \n   ..\n   89      }\n   90  \n   91:     case SpvOpNamedBarrierInitialize: {\n   92:       if (_.GetIdOpcode(result_type) != SpvOpTypeNamedBarrier) {\n   93          return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   94                 << spvOpcodeString(opcode)\n   95:                << \": expected Result Type to be OpTypeNamedBarrier\";\n   96        }\n   97  \n   ..\n  106      }\n  107  \n  108:     case SpvOpMemoryNamedBarrier: {\n  109:       const uint32_t named_barrier_type = _.GetOperandTypeId(inst, 0);\n  110:       if (_.GetIdOpcode(named_barrier_type) != SpvOpTypeNamedBarrier) {\n  111          return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  112                 << spvOpcodeString(opcode)\n  113:                << \": expected Named Barrier to be of type OpTypeNamedBarrier\";\n  114        }\n  115  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_memory_semantics.cpp:\n   60      uint32_t valid_bits;\n   61      switch (inst->opcode()) {\n   62:       case SpvOpControlBarrier:\n   63          if (!(value & SpvMemorySemanticsAcquireReleaseMask)) {\n   64            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   65                   << \"For WebGPU, AcquireRelease must be set for Memory \"\n   66:                     \"Semantics of OpControlBarrier.\";\n   67          }\n   68  \n   ..\n   70            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   71                   << \"For WebGPU, WorkgroupMemory must be set for Memory \"\n   72:                     \"Semantics of OpControlBarrier.\";\n   73          }\n   74  \n   ..\n   78            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   79                   << \"For WebGPU only WorkgroupMemory and AcquireRelease may be \"\n   80:                     \"set for Memory Semantics of OpControlBarrier.\";\n   81          }\n   82          break;\n   83:       case SpvOpMemoryBarrier:\n   84          if (!(value & SpvMemorySemanticsImageMemoryMask)) {\n   85            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   86                   << \"For WebGPU, ImageMemory must be set for Memory Semantics \"\n   87:                     \"of OpMemoryBarrier.\";\n   88          }\n   89          valid_bits = SpvMemorySemanticsImageMemoryMask;\n   ..\n   91            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n   92                   << \"For WebGPU only ImageMemory may be set for Memory \"\n   93:                     \"Semantics of OpMemoryBarrier.\";\n   94          }\n   95          break;\n   ..\n  220                   SpvMemorySemanticsOutputMemoryKHRMask);\n  221  \n  222:     if (opcode == SpvOpMemoryBarrier && !num_memory_order_set_bits) {\n  223        return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  224               << spvOpcodeString(opcode)\n  ...\n  230      }\n  231  \n  232:     if (opcode == SpvOpMemoryBarrier && !includes_storage_class) {\n  233        return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  234               << spvOpcodeString(opcode)\n  ...\n  239  #if 0\n  240      // TODO(atgoo@github.com): this check fails Vulkan CTS, reenable once fixed.\n  241:     if (opcode == SpvOpControlBarrier && value && !includes_storage_class) {\n  242        return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  243               << spvOpcodeString(opcode)\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_non_uniform.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Validates correctness of barrier SPIR-V instructions.\n   16  \n   17  #include \"source/val/validate.h\"\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/val/validate_scopes.cpp:\n  106      }\n  107  \n  108:     // If OpControlBarrier is used in fragment, vertex, tessellation evaluation,\n  109      // or geometry stages, the execution Scope must be Subgroup.\n  110:     if (opcode == SpvOpControlBarrier && value != SpvScopeSubgroup) {\n  111        _.function(inst->function()->id())\n  112            ->RegisterExecutionModelLimitation([](SpvExecutionModel model,\n  ...\n  118                if (message) {\n  119                  *message =\n  120:                     \"in Vulkan evironment, OpControlBarrier execution scope \"\n  121                      \"must be Subgroup for Fragment, Vertex, Geometry and \"\n  122                      \"TessellationEvaluation execution models\";\n  ...\n  264    if (spvIsWebGPUEnv(_.context()->target_env)) {\n  265      switch (inst->opcode()) {\n  266:       case SpvOpControlBarrier:\n  267          if (value != SpvScopeWorkgroup) {\n  268            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  269                   << spvOpcodeString(opcode)\n  270                   << \": in WebGPU environment Memory Scope is limited to \"\n  271:                  << \"Workgroup for OpControlBarrier\";\n  272          }\n  273          break;\n  274:       case SpvOpMemoryBarrier:\n  275          if (value != SpvScopeWorkgroup) {\n  276            return _.diag(SPV_ERROR_INVALID_DATA, inst)\n  277                   << spvOpcodeString(opcode)\n  278                   << \": in WebGPU environment Memory Scope is limited to \"\n  279:                  << \"Workgroup for OpMemoryBarrier\";\n  280          }\n  281          break;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/binary_parse_test.cpp:\n  847          // initializer.\n  848          {\"%2 = OpVariable %1 CrossWorkgroup !0\", \"Id is 0\"},\n  849:         {\"OpControlBarrier !0 %1 %2\", \"scope ID is 0\"},\n  850:         {\"OpControlBarrier %1 !0 %2\", \"scope ID is 0\"},\n  851:         {\"OpControlBarrier %1 %2 !0\", \"memory semantics ID is 0\"},\n  852          {\"%import = OpExtInstImport \\\"GLSL.std.450\\\" \"\n  853           \"%result = OpExtInst %type %import !999999 %x\",\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/CMakeLists.txt:\n  131    text_start_new_inst_test.cpp\n  132    text_to_binary.annotation_test.cpp\n  133:   text_to_binary.barrier_test.cpp\n  134    text_to_binary.composite_test.cpp\n  135    text_to_binary.constant_test.cpp\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/enum_string_mapping_test.cpp:\n  163           {SpvCapabilityMultiViewport, \"MultiViewport\"},\n  164           {SpvCapabilitySubgroupDispatch, \"SubgroupDispatch\"},\n  165:          {SpvCapabilityNamedBarrier, \"NamedBarrier\"},\n  166           {SpvCapabilityPipeStorage, \"PipeStorage\"},\n  167           {SpvCapabilitySubgroupBallotKHR, \"SubgroupBallotKHR\"},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/link/type_match_test.cpp:\n   32  #define PartPipe(D, N) D(N) \" = OpTypePipe ReadWrite\"\n   33  #define PartPipeStorage(D, N) D(N) \" = OpTypePipeStorage\"\n   34: #define PartNamedBarrier(D, N) D(N) \" = OpTypeNamedBarrier\"\n   35  \n   36  // Compound types\n   ..\n   60      const std::string base =                                    \\\n   61          \"OpCapability Linkage\\n\"                                \\\n   62:         \"OpCapability NamedBarrier\\n\"                           \\\n   63          \"OpCapability PipeStorage\\n\"                            \\\n   64          \"OpCapability Pipes\\n\"                                  \\\n   ..\n   97  Match1(Pipe)\n   98  Match1(PipeStorage)\n   99: Match1(NamedBarrier)\n  100  \n  101  // Simpler (restricted) compound types\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/name_mapper_test.cpp:\n  204                               {\"%1 = OpTypePipe ReadWrite\", 1, \"PipeReadWrite\"},\n  205                               {\"%1 = OpTypePipeStorage\", 1, \"PipeStorage\"},\n  206:                              {\"%1 = OpTypeNamedBarrier\", 1, \"NamedBarrier\"},\n  207                           }));\n  208  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opcode_require_capabilities_test.cpp:\n   69          ExpectedOpCodeCapabilities{SpvOpEmitStreamVertex,\n   70                                     CapabilitySet{SpvCapabilityGeometryStreams}},\n   71:         ExpectedOpCodeCapabilities{SpvOpTypeNamedBarrier,\n   72:                                    CapabilitySet{SpvCapabilityNamedBarrier}},\n   73          ExpectedOpCodeCapabilities{\n   74              SpvOpGetKernelMaxNumSubgroups,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/operand-class-test-coverage.csv:\n   35  \"    OperandLoop,\",LoopMerge,,CombinedLoopControlMask,\"TEST_F(OpLoopMergeTest, WrongLoopControl)\"\n   36  \"    OperandFunction,\",Function,,AnySingleFunctionControlMask,\"TEST_F(OpFunctionControlTest, WrongFunctionControl)\"\n   37: \"    OperandMemorySemantics,\",OpMemoryBarrier,\"it's an ID, not in grammar\",OpMemoryBarrier*,not enum\n   38  \"    OperandMemoryAccess,\",UNUSED,\"should be on opstore, but hacked in opcode.cpp\",,not enum\n   39: \"    OperandScope,\",MemoryBarrier,\"it's an ID, not in grammar\",OpMemoryBarrier*,not enum\n   40  \"    OperandGroupOperation,\",GroupIAdd,,GroupOperationTest,\"TEST_F(GroupOperationTest, WrongGroupOperation)\"\n   41  \"    OperandKernelEnqueueFlags,\",OpEnqueueKernel,\"it's an ID, not in grammar\",should not have one,not enum\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/operand_capabilities_test.cpp:\n  744              ValuesIn(std::vector<EnumCapabilityCase>{\n  745                  CASE1(CAPABILITY, CapabilitySubgroupDispatch, DeviceEnqueue),\n  746:                 CASE1(CAPABILITY, CapabilityNamedBarrier, Kernel),\n  747                  CASE1(CAPABILITY, CapabilityPipeStorage, Pipes),\n  748              })));\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/aggressive_dead_code_elim_test.cpp:\n 6860  ; CHECK:      [[merge]] = OpLabel\n 6861  \n 6862:                OpControlBarrier %uint_2 %uint_2 %uint_264\n 6863           %85 = OpIEqual %bool %65 %uint_0\n 6864                 OpSelectionMerge %89 None\n ....\n 6869                 OpBranch %89\n 6870           %89 = OpLabel\n 6871:                OpControlBarrier %uint_2 %uint_2 %uint_264\n 6872           %91 = OpAccessChain %_ptr_Workgroup_uint %sharedHistogram %65\n 6873           %92 = OpLoad %uint %91\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/code_sink_test.cpp:\n  389           %14 = OpAccessChain %_ptr_Uniform_uint %11 %uint_0\n  390           %15 = OpLoad %uint %14\n  391:                OpMemoryBarrier %uint_4 %mem_semantics\n  392                 OpSelectionMerge %16 None\n  393                 OpBranchConditional %true %17 %20\n  ...\n  430           %14 = OpAccessChain %_ptr_Uniform_uint %11 %uint_0\n  431           %15 = OpLoad %uint %14\n  432:                OpMemoryBarrier %uint_4 %mem_semantics\n  433                 OpSelectionMerge %16 None\n  434                 OpBranchConditional %true %17 %20\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/instruction_test.cpp:\n  132      6};\n  133  \n  134: // The words for an OpControlBarrier instruction.\n  135: uint32_t kSampleControlBarrierInstructionWords[] = {\n  136:     (4 << 16) | uint32_t(SpvOpControlBarrier), 100, 101, 102};\n  137  \n  138: // The operands that would be parsed from kSampleControlBarrierInstructionWords.\n  139: spv_parsed_operand_t kSampleControlBarrierOperands[] = {\n  140      {1, 1, SPV_OPERAND_TYPE_SCOPE_ID, SPV_NUMBER_NONE, 0},  // Execution\n  141      {2, 1, SPV_OPERAND_TYPE_SCOPE_ID, SPV_NUMBER_NONE, 0},  // Memory\n  ...\n  144  };\n  145  \n  146: // A valid parse of kSampleControlBarrierInstructionWords\n  147: spv_parsed_instruction_t kSampleControlBarrierInstruction = {\n  148:     kSampleControlBarrierInstructionWords,\n  149      uint16_t(4),\n  150:     uint16_t(SpvOpControlBarrier),\n  151      SPV_EXT_INST_TYPE_NONE,\n  152      0,  // type id\n  153      0,  // result id\n  154:     kSampleControlBarrierOperands,\n  155      3};\n  156  \n  ...\n  254  TEST(InstructionTest, ForInIdNonstandardIdTypes) {\n  255    IRContext context(SPV_ENV_UNIVERSAL_1_2, nullptr);\n  256:   Instruction inst(&context, kSampleControlBarrierInstruction);\n  257  \n  258    std::vector<uint32_t> ids;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/loop_optimizations/fusion_illegal.cpp:\n 1187    int[10] b;\n 1188  \n 1189:   // Illegal, barrier.\n 1190    for (int i = 0; i < 10; i++) {\n 1191      a[i] = a[i] * 2;\n 1192:     memoryBarrier();\n 1193    }\n 1194    for (int j = 0; j < 10; j++) {\n ....\n 1198  \n 1199  */\n 1200: TEST_F(FusionIllegalTest, Barrier) {\n 1201    std::string text = R\"(\n 1202                 OpCapability Shader\n ....\n 1247           %30 = OpAccessChain %7 %23 %53\n 1248                 OpStore %30 %29\n 1249:                OpMemoryBarrier %31 %32\n 1250                 OpBranch %13\n 1251           %13 = OpLabel\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/loop_optimizations/loop_fission.cpp:\n 1886      for (int i = 0; i < 10; i++) {\n 1887        B[i] = A[i];\n 1888:       memoryBarrier();\n 1889        A[i] = B[i];\n 1890      }\n 1891  }\n 1892  \n 1893: This should not be split due to the memory barrier.\n 1894  */\n 1895: TEST_F(FissionClassTest, FissionBarrier) {\n 1896    // clang-format off\n 1897    // With LocalMultiStoreElimPass\n ....\n 1946  %35 = OpAccessChain %19 %5 %26\n 1947  OpStore %35 %34\n 1948: OpMemoryBarrier %20 %21\n 1949  %36 = OpAccessChain %19 %5 %26\n 1950  %37 = OpLoad %14 %36\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/module_test.cpp:\n   66    EXPECT_EQ(3000u,\n   67              BuildModule(\"%f = OpFunction %void None %fntype %a = OpLabel \"\n   68:                         \"OpMemoryBarrier !2999 %b\\n\")\n   69                  ->module()\n   70                  ->ComputeIdBound());\n   ..\n   72    EXPECT_EQ(4000u,\n   73              BuildModule(\"%f = OpFunction %void None %fntype %a = OpLabel \"\n   74:                         \"OpMemoryBarrier %b !3999\\n\")\n   75                  ->module()\n   76                  ->ComputeIdBound());\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/replace_invalid_opc_test.cpp:\n  383  }\n  384  \n  385: TEST_F(ReplaceInvalidOpcodeTest, BarrierDontReplace) {\n  386    const std::string text = R\"(\n  387              OpCapability Shader\n  ...\n  401      %main = OpFunction %void None %3\n  402         %5 = OpLabel\n  403:             OpControlBarrier %uint_2 %uint_2 %uint_264\n  404              OpReturn\n  405              OpFunctionEnd)\";\n  ...\n  410  }\n  411  \n  412: TEST_F(ReplaceInvalidOpcodeTest, BarrierReplace) {\n  413    const std::string text = R\"(\n  414: ; CHECK-NOT: OpControlBarrier\n  415              OpCapability Shader\n  416         %1 = OpExtInstImport \"GLSL.std.450\"\n  ...\n  429      %main = OpFunction %void None %3\n  430         %5 = OpLabel\n  431:             OpControlBarrier %uint_2 %uint_2 %uint_264\n  432              OpReturn\n  433              OpFunctionEnd)\";\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/strip_atomic_counter_memory_test.cpp:\n  111  }\n  112  \n  113: std::string GetOpControlBarrierInst(std::string val) {\n  114:   return \"OpControlBarrier %uint_1 %uint_1 %uint_\" + val;\n  115  }\n  116  \n  117: TEST_P(MemorySemanticsModified, OpControlBarrier) {\n  118    std::string input, expected;\n  119    std::tie(input, expected) =\n  120:       GetInputAndExpected(GetOpControlBarrierInst, GetParam());\n  121    SinglePassRunAndCheck<StripAtomicCounterMemoryPass>(input, expected,\n  122                                                        /* skip_nop = */ false);\n  123  }\n  124  \n  125: std::string GetOpMemoryBarrierInst(std::string val) {\n  126:   return \"OpMemoryBarrier %uint_1 %uint_\" + val;\n  127  }\n  128  \n  129: TEST_P(MemorySemanticsModified, OpMemoryBarrier) {\n  130    std::string input, expected;\n  131    std::tie(input, expected) =\n  132:       GetInputAndExpected(GetOpMemoryBarrierInst, GetParam());\n  133    SinglePassRunAndCheck<StripAtomicCounterMemoryPass>(input, expected,\n  134                                                        /* skip_nop = */ false);\n  ...\n  353  }\n  354  \n  355: std::string GetOpMemoryNamedBarrierInst(std::string val) {\n  356:   return \"OpMemoryNamedBarrier %4 %uint_1 %uint_\" + val;\n  357  }\n  358  \n  359: TEST_P(MemorySemanticsModified, OpMemoryNamedBarrier) {\n  360    std::string input, expected;\n  361    std::tie(input, expected) =\n  362:       GetInputAndExpected(GetOpMemoryNamedBarrierInst, GetParam());\n  363    SinglePassRunAndCheck<StripAtomicCounterMemoryPass>(input, expected,\n  364                                                        /* skip_nop = */ false);\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/type_manager_test.cpp:\n  157    types.emplace_back(new Queue());\n  158  \n  159:   // Pipe, Forward Pointer, PipeStorage, NamedBarrier, AccelerationStructureNV,\n  160    // CooperativeMatrixNV\n  161    types.emplace_back(new Pipe(SpvAccessQualifierReadWrite));\n  ...\n  165    types.emplace_back(new ForwardPointer(2, SpvStorageClassUniform));\n  166    types.emplace_back(new PipeStorage());\n  167:   types.emplace_back(new NamedBarrier());\n  168    types.emplace_back(new AccelerationStructureNV());\n  169    types.emplace_back(new CooperativeMatrixNV(f32, 24, 24, 24));\n  ...\n  203      %pipe    = OpTypePipe ReadOnly\n  204      %ps      = OpTypePipeStorage\n  205:     %nb      = OpTypeNamedBarrier\n  206      %rtacc   = OpTypeAccelerationStructureNV\n  207      ; Set up other kinds of OpTypeArray\n  ...\n  248        {27, \"pipe(0)\"},\n  249        {28, \"pipe_storage\"},\n  250:       {29, \"named_barrier\"},\n  251        {30, \"accelerationStructureNV\"},\n  252        {31, \"sint64\"},\n  ...\n 1063  ; CHECK: OpTypeForwardPointer [[uniform_ptr]] Uniform\n 1064  ; CHECK: OpTypePipeStorage\n 1065: ; CHECK: OpTypeNamedBarrier\n 1066  ; CHECK: OpTypeAccelerationStructureKHR\n 1067  ; CHECK: OpTypeCooperativeMatrixNV [[f32]] [[uint24]] [[uint24]] [[uint24]]\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/types_test.cpp:\n  109  TestMultipleInstancesOfTheSameType(ForwardPointer, 10, SpvStorageClassUniform)\n  110  TestMultipleInstancesOfTheSameType(PipeStorage)\n  111: TestMultipleInstancesOfTheSameType(NamedBarrier)\n  112  TestMultipleInstancesOfTheSameType(AccelerationStructureNV)\n  113  #undef TestMultipleInstanceOfTheSameType\n  ...\n  236    types.emplace_back(new Queue());\n  237  \n  238:   // Pipe, Forward Pointer, PipeStorage, NamedBarrier\n  239    types.emplace_back(new Pipe(SpvAccessQualifierReadWrite));\n  240    types.emplace_back(new Pipe(SpvAccessQualifierReadOnly));\n  ...\n  243    types.emplace_back(new ForwardPointer(2, SpvStorageClassUniform));\n  244    types.emplace_back(new PipeStorage());\n  245:   types.emplace_back(new NamedBarrier());\n  246  \n  247    return types;\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/opt/upgrade_memory_model_test.cpp:\n 1174  }\n 1175  \n 1176: TEST_F(UpgradeMemoryModelTest, TessellationControlBarrierNoChange) {\n 1177    const std::string text = R\"(\n 1178  ; CHECK: [[none:%\\w+]] = OpConstant {{%\\w+}} 0\n 1179  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1180: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[none]]\n 1181  OpCapability Tessellation\n 1182  OpMemoryModel Logical GLSL450\n ....\n 1189  %func = OpFunction %void None %func_ty\n 1190  %1 = OpLabel\n 1191: OpControlBarrier %workgroup %workgroup %none\n 1192  OpReturn\n 1193  OpFunctionEnd\n ....\n 1197  }\n 1198  \n 1199: TEST_F(UpgradeMemoryModelTest, TessellationControlBarrierAddOutput) {\n 1200    const std::string text = R\"(\n 1201  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1202  ; CHECK: [[output:%\\w+]] = OpConstant {{%\\w+}} 4096\n 1203: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[output]]\n 1204  OpCapability Tessellation\n 1205  OpMemoryModel Logical GLSL450\n ....\n 1215  %1 = OpLabel\n 1216  %ld = OpLoad %int %var\n 1217: OpControlBarrier %workgroup %workgroup %none\n 1218  OpStore %var %ld\n 1219  OpReturn\n ....\n 1224  }\n 1225  \n 1226: TEST_F(UpgradeMemoryModelTest, TessellationMemoryBarrierNoChange) {\n 1227    const std::string text = R\"(\n 1228  ; CHECK: [[none:%\\w+]] = OpConstant {{%\\w+}} 0\n 1229  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1230: ; CHECK: OpMemoryBarrier [[workgroup]] [[none]]\n 1231  OpCapability Tessellation\n 1232  OpMemoryModel Logical GLSL450\n ....\n 1242  %1 = OpLabel\n 1243  %ld = OpLoad %int %var\n 1244: OpMemoryBarrier %workgroup %none\n 1245  OpStore %var %ld\n 1246  OpReturn\n ....\n 1251  }\n 1252  \n 1253: TEST_F(UpgradeMemoryModelTest, TessellationControlBarrierAddOutputSubFunction) {\n 1254    const std::string text = R\"(\n 1255  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1256  ; CHECK: [[output:%\\w+]] = OpConstant {{%\\w+}} 4096\n 1257: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[output]]\n 1258  OpCapability Tessellation\n 1259  OpMemoryModel Logical GLSL450\n ....\n 1274  %2 = OpLabel\n 1275  %ld = OpLoad %int %var\n 1276: OpControlBarrier %workgroup %workgroup %none\n 1277  OpStore %var %ld\n 1278  OpReturn\n ....\n 1284  \n 1285  TEST_F(UpgradeMemoryModelTest,\n 1286:        TessellationControlBarrierAddOutputDifferentFunctions) {\n 1287    const std::string text = R\"(\n 1288  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1289  ; CHECK: [[output:%\\w+]] = OpConstant {{%\\w+}} 4096\n 1290: ; CHECK: OpControlBarrier [[workgroup]] [[workgroup]] [[output]]\n 1291  OpCapability Tessellation\n 1292  OpMemoryModel Logical GLSL450\n ....\n 1304  %1 = OpLabel\n 1305  %call_ld = OpFunctionCall %int %ld_func\n 1306: %call_barrier = OpFunctionCall %void %barrier_func\n 1307  %call_st = OpFunctionCall %void %st_func %call_ld\n 1308  OpReturn\n ....\n 1313  OpReturnValue %ld\n 1314  OpFunctionEnd\n 1315: %barrier_func = OpFunction %void None %func_ty\n 1316  %3 = OpLabel\n 1317: OpControlBarrier %workgroup %workgroup %none\n 1318  OpReturn\n 1319  OpFunctionEnd\n ....\n 1329  }\n 1330  \n 1331: TEST_F(UpgradeMemoryModelTest, ChangeControlBarrierMemoryScope) {\n 1332    std::string text = R\"(\n 1333  ; CHECK: [[workgroup:%\\w+]] = OpConstant {{%\\w+}} 2\n 1334  ; CHECK: [[queuefamily:%\\w+]] = OpConstant {{%\\w+}} 5\n 1335: ; CHECK: OpControlBarrier [[workgroup]] [[queuefamily]]\n 1336  OpCapability Shader\n 1337  OpMemoryModel Logical GLSL450\n ....\n 1345  %func = OpFunction %void None %func_ty\n 1346  %1 = OpLabel\n 1347: OpControlBarrier %workgroup %device %none\n 1348  OpReturn\n 1349  OpFunctionEnd\n ....\n 1353  }\n 1354  \n 1355: TEST_F(UpgradeMemoryModelTest, ChangeMemoryBarrierMemoryScope) {\n 1356    std::string text = R\"(\n 1357  ; CHECK: [[queuefamily:%\\w+]] = OpConstant {{%\\w+}} 5\n 1358: ; CHECK: OpMemoryBarrier [[queuefamily]]\n 1359  OpCapability Shader\n 1360  OpMemoryModel Logical GLSL450\n ....\n 1367  %func = OpFunction %void None %func_ty\n 1368  %1 = OpLabel\n 1369: OpMemoryBarrier %device %none\n 1370  OpReturn\n 1371  OpFunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/text_to_binary.barrier_test.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Assembler tests for instructions in the \"Barrier Instructions\" section\n   16  // of the SPIR-V spec.\n   17  \n   ..\n   31  using ::testing::Eq;\n   32  \n   33: // Test OpMemoryBarrier\n   34  \n   35: using OpMemoryBarrier = spvtest::TextToBinaryTest;\n   36  \n   37: TEST_F(OpMemoryBarrier, Good) {\n   38:   const std::string input = \"OpMemoryBarrier %1 %2\\n\";\n   39    EXPECT_THAT(CompiledInstructions(input),\n   40:               Eq(MakeInstruction(SpvOpMemoryBarrier, {1, 2})));\n   41    EXPECT_THAT(EncodeAndDecodeSuccessfully(input), Eq(input));\n   42  }\n   43  \n   44: TEST_F(OpMemoryBarrier, BadMissingScopeId) {\n   45:   const std::string input = \"OpMemoryBarrier\\n\";\n   46    EXPECT_THAT(CompileFailure(input),\n   47                Eq(\"Expected operand, found end of stream.\"));\n   48  }\n   49  \n   50: TEST_F(OpMemoryBarrier, BadInvalidScopeId) {\n   51:   const std::string input = \"OpMemoryBarrier 99\\n\";\n   52    EXPECT_THAT(CompileFailure(input), Eq(\"Expected id to start with %.\"));\n   53  }\n   54  \n   55: TEST_F(OpMemoryBarrier, BadMissingMemorySemanticsId) {\n   56:   const std::string input = \"OpMemoryBarrier %scope\\n\";\n   57    EXPECT_THAT(CompileFailure(input),\n   58                Eq(\"Expected operand, found end of stream.\"));\n   59  }\n   60  \n   61: TEST_F(OpMemoryBarrier, BadInvalidMemorySemanticsId) {\n   62:   const std::string input = \"OpMemoryBarrier %scope 14\\n\";\n   63    EXPECT_THAT(CompileFailure(input), Eq(\"Expected id to start with %.\"));\n   64  }\n   65  \n   66: // TODO(dneto): OpControlBarrier\n   67  // TODO(dneto): OpGroupAsyncCopy\n   68  // TODO(dneto): OpGroupWaitEvents\n   ..\n   79  // TODO(dneto): OpGroupSMax\n   80  \n   81: using NamedMemoryBarrierTest = spvtest::TextToBinaryTest;\n   82  \n   83: // OpMemoryNamedBarrier is not in 1.0, but it is enabled by a capability.\n   84  // We should be able to assemble it.  Validation checks are in another test\n   85  // file.\n   86: TEST_F(NamedMemoryBarrierTest, OpcodeAssemblesInV10) {\n   87    EXPECT_THAT(\n   88:       CompiledInstructions(\"OpMemoryNamedBarrier %bar %scope %semantics\",\n   89                             SPV_ENV_UNIVERSAL_1_0),\n   90:       ElementsAre(spvOpcodeMake(4, SpvOpMemoryNamedBarrier), _, _, _));\n   91  }\n   92  \n   93: TEST_F(NamedMemoryBarrierTest, ArgumentCount) {\n   94:   EXPECT_THAT(CompileFailure(\"OpMemoryNamedBarrier\", SPV_ENV_UNIVERSAL_1_1),\n   95                Eq(\"Expected operand, found end of stream.\"));\n   96    EXPECT_THAT(\n   97:       CompileFailure(\"OpMemoryNamedBarrier %bar\", SPV_ENV_UNIVERSAL_1_1),\n   98        Eq(\"Expected operand, found end of stream.\"));\n   99    EXPECT_THAT(\n  100:       CompileFailure(\"OpMemoryNamedBarrier %bar %scope\", SPV_ENV_UNIVERSAL_1_1),\n  101        Eq(\"Expected operand, found end of stream.\"));\n  102    EXPECT_THAT(\n  103:       CompiledInstructions(\"OpMemoryNamedBarrier %bar %scope %semantics\",\n  104                             SPV_ENV_UNIVERSAL_1_1),\n  105:       ElementsAre(spvOpcodeMake(4, SpvOpMemoryNamedBarrier), _, _, _));\n  106    EXPECT_THAT(\n  107:       CompileFailure(\"OpMemoryNamedBarrier %bar %scope %semantics %extra\",\n  108                       SPV_ENV_UNIVERSAL_1_1),\n  109        Eq(\"Expected '=', found end of stream.\"));\n  110  }\n  111  \n  112: TEST_F(NamedMemoryBarrierTest, ArgumentTypes) {\n  113:   EXPECT_THAT(CompileFailure(\"OpMemoryNamedBarrier 123 %scope %semantics\",\n  114                               SPV_ENV_UNIVERSAL_1_1),\n  115                Eq(\"Expected id to start with %.\"));\n  116:   EXPECT_THAT(CompileFailure(\"OpMemoryNamedBarrier %bar %scope \\\"semantics\\\"\",\n  117                               SPV_ENV_UNIVERSAL_1_1),\n  118                Eq(\"Expected id to start with %.\"));\n  119  }\n  120  \n  121: using TypeNamedBarrierTest = spvtest::TextToBinaryTest;\n  122  \n  123: TEST_F(TypeNamedBarrierTest, OpcodeAssemblesInV10) {\n  124    EXPECT_THAT(\n  125:       CompiledInstructions(\"%t = OpTypeNamedBarrier\", SPV_ENV_UNIVERSAL_1_0),\n  126:       ElementsAre(spvOpcodeMake(2, SpvOpTypeNamedBarrier), _));\n  127  }\n  128  \n  129: TEST_F(TypeNamedBarrierTest, ArgumentCount) {\n  130:   EXPECT_THAT(CompileFailure(\"OpTypeNamedBarrier\", SPV_ENV_UNIVERSAL_1_1),\n  131                Eq(\"Expected <result-id> at the beginning of an instruction, \"\n  132:                  \"found 'OpTypeNamedBarrier'.\"));\n  133    EXPECT_THAT(\n  134:       CompiledInstructions(\"%t = OpTypeNamedBarrier\", SPV_ENV_UNIVERSAL_1_1),\n  135:       ElementsAre(spvOpcodeMake(2, SpvOpTypeNamedBarrier), _));\n  136    EXPECT_THAT(\n  137:       CompileFailure(\"%t = OpTypeNamedBarrier 1 2 3\", SPV_ENV_UNIVERSAL_1_1),\n  138        Eq(\"Expected <opcode> or <result-id> at the beginning of an instruction, \"\n  139           \"found '1'.\"));\n  140  }\n  141  \n  142: using NamedBarrierInitializeTest = spvtest::TextToBinaryTest;\n  143  \n  144: TEST_F(NamedBarrierInitializeTest, OpcodeAssemblesInV10) {\n  145    EXPECT_THAT(\n  146:       CompiledInstructions(\"%bar = OpNamedBarrierInitialize %type %count\",\n  147                             SPV_ENV_UNIVERSAL_1_0),\n  148:       ElementsAre(spvOpcodeMake(4, SpvOpNamedBarrierInitialize), _, _, _));\n  149  }\n  150  \n  151: TEST_F(NamedBarrierInitializeTest, ArgumentCount) {\n  152    EXPECT_THAT(\n  153:       CompileFailure(\"%bar = OpNamedBarrierInitialize\", SPV_ENV_UNIVERSAL_1_1),\n  154        Eq(\"Expected operand, found end of stream.\"));\n  155:   EXPECT_THAT(CompileFailure(\"%bar = OpNamedBarrierInitialize %ype\",\n  156                               SPV_ENV_UNIVERSAL_1_1),\n  157                Eq(\"Expected operand, found end of stream.\"));\n  158    EXPECT_THAT(\n  159:       CompiledInstructions(\"%bar = OpNamedBarrierInitialize %type %count\",\n  160                             SPV_ENV_UNIVERSAL_1_1),\n  161:       ElementsAre(spvOpcodeMake(4, SpvOpNamedBarrierInitialize), _, _, _));\n  162    EXPECT_THAT(\n  163:       CompileFailure(\"%bar = OpNamedBarrierInitialize %type %count \\\"extra\\\"\",\n  164                       SPV_ENV_UNIVERSAL_1_1),\n  165        Eq(\"Expected <opcode> or <result-id> at the beginning of an instruction, \"\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/text_to_binary.subgroup_dispatch_test.cpp:\n   13  // limitations under the License.\n   14  \n   15: // Assembler tests for instructions in the \"Barrier Instructions\" section\n   16  // of the SPIR-V spec.\n   17  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/CMakeLists.txt:\n   26         val_arithmetics_test.cpp\n   27         val_atomics_test.cpp\n   28:        val_barriers_test.cpp\n   29         val_bitwise_test.cpp\n   30         val_builtins_test.cpp\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_barriers_test.cpp:\n   27  using ::testing::Not;\n   28  \n   29: using ValidateBarriers = spvtest::ValidateBase<bool>;\n   30  \n   31  std::string GenerateShaderCodeImpl(\n   ..\n  167  OpCapability Linkage\n  168  OpCapability Int64\n  169: OpCapability NamedBarrier\n  170  )\";\n  171  \n  ...\n  204  %acquire_release_workgroup = OpConstant %u32 264\n  205  \n  206: %named_barrier = OpTypeNamedBarrier\n  207  \n  208  %main = OpFunction %void None %func\n  ...\n  219  }\n  220  \n  221: TEST_F(ValidateBarriers, OpControlBarrierGLComputeSuccess) {\n  222    const std::string body = R\"(\n  223: OpControlBarrier %device %device %none\n  224: OpControlBarrier %workgroup %workgroup %acquire\n  225: OpControlBarrier %workgroup %device %release\n  226: OpControlBarrier %cross_device %cross_device %acquire_release\n  227: OpControlBarrier %cross_device %cross_device %sequentially_consistent\n  228: OpControlBarrier %cross_device %cross_device %acquire_release_uniform_workgroup\n  229  )\";\n  230  \n  ...\n  233  }\n  234  \n  235: TEST_F(ValidateBarriers, OpControlBarrierKernelSuccess) {\n  236    const std::string body = R\"(\n  237: OpControlBarrier %device %device %none\n  238: OpControlBarrier %workgroup %workgroup %acquire\n  239: OpControlBarrier %workgroup %device %release\n  240: OpControlBarrier %cross_device %cross_device %acquire_release\n  241: OpControlBarrier %cross_device %cross_device %sequentially_consistent\n  242: OpControlBarrier %cross_device %cross_device %acquire_release_workgroup\n  243  )\";\n  244  \n  ...\n  247  }\n  248  \n  249: TEST_F(ValidateBarriers, OpControlBarrierTesselationControlSuccess) {\n  250    const std::string body = R\"(\n  251: OpControlBarrier %device %device %none\n  252: OpControlBarrier %workgroup %workgroup %acquire\n  253: OpControlBarrier %workgroup %device %release\n  254: OpControlBarrier %cross_device %cross_device %acquire_release\n  255: OpControlBarrier %cross_device %cross_device %sequentially_consistent\n  256: OpControlBarrier %cross_device %cross_device %acquire_release_uniform_workgroup\n  257  )\";\n  258  \n  ...\n  262  }\n  263  \n  264: TEST_F(ValidateBarriers, OpControlBarrierVulkanSuccess) {\n  265    const std::string body = R\"(\n  266: OpControlBarrier %workgroup %device %none\n  267: OpControlBarrier %workgroup %workgroup %acquire_release_uniform_workgroup\n  268  )\";\n  269  \n  ...\n  272  }\n  273  \n  274: TEST_F(ValidateBarriers, OpControlBarrierWebGPUAcquireReleaseSuccess) {\n  275    const std::string body = R\"(\n  276: OpControlBarrier %workgroup %workgroup %acquire_release_workgroup\n  277  )\";\n  278  \n  ...\n  281  }\n  282  \n  283: TEST_F(ValidateBarriers, OpControlBarrierWebGPURelaxedFailure) {\n  284    const std::string body = R\"(\n  285: OpControlBarrier %workgroup %workgroup %workgroup\n  286  )\";\n  287  \n  ...\n  290    EXPECT_THAT(getDiagnosticString(),\n  291                HasSubstr(\"For WebGPU, AcquireRelease must be set for Memory \"\n  292:                         \"Semantics of OpControlBarrier\"));\n  293  }\n  294  \n  295: TEST_F(ValidateBarriers, OpControlBarrierWebGPUMissingWorkgroupFailure) {\n  296    const std::string body = R\"(\n  297: OpControlBarrier %workgroup %workgroup %acquire_release\n  298  )\";\n  299  \n  ...\n  305  }\n  306  \n  307: TEST_F(ValidateBarriers, OpControlBarrierWebGPUUniformFailure) {\n  308    const std::string body = R\"(\n  309: OpControlBarrier %workgroup %workgroup %acquire_release_uniform_workgroup\n  310  )\";\n  311  \n  ...\n  315        getDiagnosticString(),\n  316        HasSubstr(\"For WebGPU only WorkgroupMemory and AcquireRelease may be set \"\n  317:                 \"for Memory Semantics of OpControlBarrier.\"));\n  318  }\n  319  \n  320: TEST_F(ValidateBarriers, OpControlBarrierWebGPUReleaseFailure) {\n  321    const std::string body = R\"(\n  322: OpControlBarrier %workgroup %workgroup %release_uniform_workgroup\n  323  )\";\n  324  \n  ...\n  327    EXPECT_THAT(getDiagnosticString(),\n  328                HasSubstr(\"For WebGPU, AcquireRelease must be set for Memory \"\n  329:                         \"Semantics of OpControlBarrier\"));\n  330  }\n  331  \n  332: TEST_F(ValidateBarriers, OpControlBarrierExecutionModelFragmentSpirv12) {\n  333    const std::string body = R\"(\n  334: OpControlBarrier %device %device %none\n  335  )\";\n  336  \n  ...\n  340    EXPECT_THAT(\n  341        getDiagnosticString(),\n  342:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  343                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  344  }\n  345  \n  346: TEST_F(ValidateBarriers, OpControlBarrierExecutionModelFragmentSpirv13) {\n  347    const std::string body = R\"(\n  348: OpControlBarrier %device %device %none\n  349  )\";\n  350  \n  ...\n  354  }\n  355  \n  356: TEST_F(ValidateBarriers, OpControlBarrierFloatExecutionScope) {\n  357    const std::string body = R\"(\n  358: OpControlBarrier %f32_1 %device %none\n  359  )\";\n  360  \n  ...\n  362    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  363    EXPECT_THAT(getDiagnosticString(),\n  364:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  365  }\n  366  \n  367: TEST_F(ValidateBarriers, OpControlBarrierU64ExecutionScope) {\n  368    const std::string body = R\"(\n  369: OpControlBarrier %u64_1 %device %none\n  370  )\";\n  371  \n  ...\n  373    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  374    EXPECT_THAT(getDiagnosticString(),\n  375:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  376  }\n  377  \n  378: TEST_F(ValidateBarriers, OpControlBarrierFloatMemoryScope) {\n  379    const std::string body = R\"(\n  380: OpControlBarrier %device %f32_1 %none\n  381  )\";\n  382  \n  ...\n  384    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  385    EXPECT_THAT(getDiagnosticString(),\n  386:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  387  }\n  388  \n  389: TEST_F(ValidateBarriers, OpControlBarrierU64MemoryScope) {\n  390    const std::string body = R\"(\n  391: OpControlBarrier %device %u64_1 %none\n  392  )\";\n  393  \n  ...\n  395    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  396    EXPECT_THAT(getDiagnosticString(),\n  397:               HasSubstr(\"ControlBarrier: expected scope to be a 32-bit int\"));\n  398  }\n  399  \n  400: TEST_F(ValidateBarriers, OpControlBarrierFloatMemorySemantics) {\n  401    const std::string body = R\"(\n  402: OpControlBarrier %device %device %f32_0\n  403  )\";\n  404  \n  ...\n  408        getDiagnosticString(),\n  409        HasSubstr(\n  410:           \"ControlBarrier: expected Memory Semantics to be a 32-bit int\"));\n  411  }\n  412  \n  413: TEST_F(ValidateBarriers, OpControlBarrierU64MemorySemantics) {\n  414    const std::string body = R\"(\n  415: OpControlBarrier %device %device %u64_0\n  416  )\";\n  417  \n  ...\n  421        getDiagnosticString(),\n  422        HasSubstr(\n  423:           \"ControlBarrier: expected Memory Semantics to be a 32-bit int\"));\n  424  }\n  425  \n  426: TEST_F(ValidateBarriers, OpControlBarrierVulkanExecutionScopeDevice) {\n  427    const std::string body = R\"(\n  428: OpControlBarrier %device %workgroup %none\n  429  )\";\n  430  \n  ...\n  432    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_0));\n  433    EXPECT_THAT(getDiagnosticString(),\n  434:               HasSubstr(\"ControlBarrier: in Vulkan environment Execution Scope \"\n  435                          \"is limited to Workgroup and Subgroup\"));\n  436  }\n  437  \n  438: TEST_F(ValidateBarriers, OpControlBarrierWebGPUExecutionScopeDeviceBad) {\n  439    const std::string body = R\"(\n  440: OpControlBarrier %device %workgroup %none\n  441  )\";\n  442  \n  ...\n  444    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_WEBGPU_0));\n  445    EXPECT_THAT(getDiagnosticString(),\n  446:               HasSubstr(\"ControlBarrier: in WebGPU environment Execution Scope \"\n  447                          \"is limited to Workgroup\"));\n  448  }\n  449  \n  450: TEST_F(ValidateBarriers, OpControlBarrierWebGPUExecutionScopeSubgroupBad) {\n  451    const std::string body = R\"(\n  452: OpControlBarrier %subgroup %workgroup %none\n  453  )\";\n  454  \n  ...\n  456    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_WEBGPU_0));\n  457    EXPECT_THAT(getDiagnosticString(),\n  458:               HasSubstr(\"ControlBarrier: in WebGPU environment Execution Scope \"\n  459                          \"is limited to Workgroup\"));\n  460  }\n  461  \n  462: TEST_F(ValidateBarriers,\n  463:        OpControlBarrierWebGPUExecutionScopeWorkgroupNonComputeBad) {\n  464    const std::string body = R\"(\n  465: OpControlBarrier %workgroup %workgroup %acquire_release_workgroup\n  466  )\";\n  467  \n  ...\n  474  }\n  475  \n  476: TEST_F(ValidateBarriers, OpControlBarrierVulkanMemoryScopeSubgroup) {\n  477    const std::string body = R\"(\n  478: OpControlBarrier %subgroup %subgroup %none\n  479  )\";\n  480  \n  ...\n  483    EXPECT_THAT(\n  484        getDiagnosticString(),\n  485:       HasSubstr(\"ControlBarrier: in Vulkan 1.0 environment Memory Scope is \"\n  486                  \"limited to Device, Workgroup and Invocation\"));\n  487  }\n  488  \n  489: TEST_F(ValidateBarriers, OpControlBarrierVulkan1p1MemoryScopeSubgroup) {\n  490    const std::string body = R\"(\n  491: OpControlBarrier %subgroup %subgroup %none\n  492  )\";\n  493  \n  ...\n  496  }\n  497  \n  498: TEST_F(ValidateBarriers, OpControlBarrierVulkan1p1MemoryScopeCrossDevice) {\n  499    const std::string body = R\"(\n  500: OpControlBarrier %subgroup %cross_device %none\n  501  )\";\n  502  \n  ...\n  504    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  505    EXPECT_THAT(getDiagnosticString(),\n  506:               HasSubstr(\"ControlBarrier: in Vulkan environment, Memory Scope \"\n  507                          \"cannot be CrossDevice\"));\n  508  }\n  509  \n  510: TEST_F(ValidateBarriers, OpControlBarrierWebGPUMemoryScopeNonWorkgroup) {\n  511    const std::string body = R\"(\n  512: OpControlBarrier %workgroup %subgroup %acquire_release_workgroup\n  513  )\";\n  514  \n  ...\n  516    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_WEBGPU_0));\n  517    EXPECT_THAT(getDiagnosticString(),\n  518:               HasSubstr(\"ControlBarrier: in WebGPU environment Memory Scope is \"\n  519:                         \"limited to Workgroup for OpControlBarrier\"));\n  520  }\n  521  \n  522: TEST_F(ValidateBarriers, OpControlBarrierAcquireAndRelease) {\n  523    const std::string body = R\"(\n  524: OpControlBarrier %device %device %acquire_and_release_uniform\n  525  )\";\n  526  \n  ...\n  528    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  529    EXPECT_THAT(getDiagnosticString(),\n  530:               HasSubstr(\"ControlBarrier: Memory Semantics can have at most one \"\n  531                          \"of the following bits set: Acquire, Release, \"\n  532                          \"AcquireRelease or SequentiallyConsistent\"));\n  ...\n  535  // TODO(atgoo@github.com): the corresponding check fails Vulkan CTS,\n  536  // reenable once fixed.\n  537: TEST_F(ValidateBarriers, DISABLED_OpControlBarrierVulkanSubgroupStorageClass) {\n  538    const std::string body = R\"(\n  539: OpControlBarrier %workgroup %device %acquire_release_subgroup\n  540  )\";\n  541  \n  ...\n  545        getDiagnosticString(),\n  546        HasSubstr(\n  547:           \"ControlBarrier: expected Memory Semantics to include a \"\n  548            \"Vulkan-supported storage class if Memory Semantics is not None\"));\n  549  }\n  550  \n  551: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionFragment1p1) {\n  552    const std::string body = R\"(\n  553: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  554  )\";\n  555  \n  ...\n  559  }\n  560  \n  561: TEST_F(ValidateBarriers, OpControlBarrierWorkgroupExecutionFragment1p1) {\n  562    const std::string body = R\"(\n  563: OpControlBarrier %workgroup %workgroup %acquire_release\n  564  )\";\n  565  \n  ...\n  568    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  569    EXPECT_THAT(getDiagnosticString(),\n  570:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  571                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  572                          \"execution models\"));\n  573  }\n  574  \n  575: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionFragment1p0) {\n  576    const std::string body = R\"(\n  577: OpControlBarrier %subgroup %workgroup %acquire_release\n  578  )\";\n  579  \n  ...\n  583    EXPECT_THAT(\n  584        getDiagnosticString(),\n  585:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  586                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  587  }\n  588  \n  589: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionVertex1p1) {\n  590    const std::string body = R\"(\n  591: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  592  )\";\n  593  \n  ...\n  597  }\n  598  \n  599: TEST_F(ValidateBarriers, OpControlBarrierWorkgroupExecutionVertex1p1) {\n  600    const std::string body = R\"(\n  601: OpControlBarrier %workgroup %workgroup %acquire_release\n  602  )\";\n  603  \n  ...\n  606    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  607    EXPECT_THAT(getDiagnosticString(),\n  608:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  609                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  610                          \"execution models\"));\n  611  }\n  612  \n  613: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionVertex1p0) {\n  614    const std::string body = R\"(\n  615: OpControlBarrier %subgroup %workgroup %acquire_release\n  616  )\";\n  617  \n  ...\n  621    EXPECT_THAT(\n  622        getDiagnosticString(),\n  623:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  624                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  625  }\n  626  \n  627: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionGeometry1p1) {\n  628    const std::string body = R\"(\n  629: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  630  )\";\n  631  \n  ...\n  636  }\n  637  \n  638: TEST_F(ValidateBarriers, OpControlBarrierWorkgroupExecutionGeometry1p1) {\n  639    const std::string body = R\"(\n  640: OpControlBarrier %workgroup %workgroup %acquire_release\n  641  )\";\n  642  \n  ...\n  646    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  647    EXPECT_THAT(getDiagnosticString(),\n  648:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  649                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  650                          \"execution models\"));\n  651  }\n  652  \n  653: TEST_F(ValidateBarriers, OpControlBarrierSubgroupExecutionGeometry1p0) {\n  654    const std::string body = R\"(\n  655: OpControlBarrier %subgroup %workgroup %acquire_release\n  656  )\";\n  657  \n  ...\n  662    EXPECT_THAT(\n  663        getDiagnosticString(),\n  664:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  665                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  666  }\n  667  \n  668: TEST_F(ValidateBarriers,\n  669:        OpControlBarrierSubgroupExecutionTessellationEvaluation1p1) {\n  670    const std::string body = R\"(\n  671: OpControlBarrier %subgroup %subgroup %acquire_release_subgroup\n  672  )\";\n  673  \n  ...\n  678  }\n  679  \n  680: TEST_F(ValidateBarriers,\n  681:        OpControlBarrierWorkgroupExecutionTessellationEvaluation1p1) {\n  682    const std::string body = R\"(\n  683: OpControlBarrier %workgroup %workgroup %acquire_release\n  684  )\";\n  685  \n  ...\n  689    ASSERT_EQ(SPV_ERROR_INVALID_ID, ValidateInstructions(SPV_ENV_VULKAN_1_1));\n  690    EXPECT_THAT(getDiagnosticString(),\n  691:               HasSubstr(\"OpControlBarrier execution scope must be Subgroup for \"\n  692                          \"Fragment, Vertex, Geometry and TessellationEvaluation \"\n  693                          \"execution models\"));\n  694  }\n  695  \n  696: TEST_F(ValidateBarriers,\n  697:        OpControlBarrierSubgroupExecutionTessellationEvaluation1p0) {\n  698    const std::string body = R\"(\n  699: OpControlBarrier %subgroup %workgroup %acquire_release\n  700  )\";\n  701  \n  ...\n  706    EXPECT_THAT(\n  707        getDiagnosticString(),\n  708:       HasSubstr(\"OpControlBarrier requires one of the following Execution \"\n  709                  \"Models: TessellationControl, GLCompute or Kernel\"));\n  710  }\n  711  \n  712: TEST_F(ValidateBarriers, OpMemoryBarrierSuccess) {\n  713    const std::string body = R\"(\n  714: OpMemoryBarrier %cross_device %acquire_release_uniform_workgroup\n  715: OpMemoryBarrier %device %uniform\n  716  )\";\n  717  \n  ...\n  720  }\n  721  \n  722: TEST_F(ValidateBarriers, OpMemoryBarrierKernelSuccess) {\n  723    const std::string body = R\"(\n  724: OpMemoryBarrier %cross_device %acquire_release_workgroup\n  725: OpMemoryBarrier %device %none\n  726  )\";\n  727  \n  ...\n  730  }\n  731  \n  732: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanSuccess) {\n  733    const std::string body = R\"(\n  734: OpMemoryBarrier %workgroup %acquire_release_uniform_workgroup\n  735  )\";\n  736  \n  ...\n  739  }\n  740  \n  741: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUImageMemorySuccess) {\n  742    const std::string body = R\"(\n  743: OpMemoryBarrier %workgroup %image_memory\n  744  )\";\n  745  \n  ...\n  748  }\n  749  \n  750: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUDeviceFailure) {\n  751    const std::string body = R\"(\n  752: OpMemoryBarrier %subgroup %image_memory\n  753  )\";\n  754  \n  ...\n  757    EXPECT_THAT(getDiagnosticString(),\n  758                HasSubstr(\"in WebGPU environment Memory Scope is limited to \"\n  759:                         \"Workgroup for OpMemoryBarrier\"));\n  760  }\n  761  \n  762: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUAcquireReleaseFailure) {\n  763    const std::string body = R\"(\n  764: OpMemoryBarrier %workgroup %acquire_release_uniform_workgroup\n  765  )\";\n  766  \n  ...\n  769    EXPECT_THAT(getDiagnosticString(),\n  770                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  771:                         \"OpMemoryBarrier\"));\n  772  }\n  773  \n  774: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPURelaxedFailure) {\n  775    const std::string body = R\"(\n  776: OpMemoryBarrier %workgroup %uniform_workgroup\n  777  )\";\n  778  \n  ...\n  781    EXPECT_THAT(getDiagnosticString(),\n  782                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  783:                         \"OpMemoryBarrier\"));\n  784  }\n  785  \n  786: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUAcquireFailure) {\n  787    const std::string body = R\"(\n  788: OpMemoryBarrier %workgroup %acquire_uniform_workgroup\n  789  )\";\n  790  \n  ...\n  793    EXPECT_THAT(getDiagnosticString(),\n  794                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  795:                         \"OpMemoryBarrier\"));\n  796  }\n  797  \n  798: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUReleaseFailure) {\n  799    const std::string body = R\"(\n  800: OpMemoryBarrier %workgroup %release_uniform_workgroup\n  801  )\";\n  802  \n  ...\n  805    EXPECT_THAT(getDiagnosticString(),\n  806                HasSubstr(\"ImageMemory must be set for Memory Semantics of \"\n  807:                         \"OpMemoryBarrier\"));\n  808  }\n  809  \n  810: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUUniformFailure) {\n  811    const std::string body = R\"(\n  812: OpMemoryBarrier %workgroup %uniform_image_memory\n  813  )\";\n  814  \n  ...\n  817    EXPECT_THAT(getDiagnosticString(),\n  818                HasSubstr(\"only ImageMemory may be set for Memory Semantics of \"\n  819:                         \"OpMemoryBarrier\"));\n  820  }\n  821  \n  822: TEST_F(ValidateBarriers, OpMemoryBarrierWebGPUWorkgroupNonComputeFailure) {\n  823    const std::string body = R\"(\n  824: OpMemoryBarrier %workgroup %image_memory\n  825  )\";\n  826  \n  ...\n  833  }\n  834  \n  835: TEST_F(ValidateBarriers, OpMemoryBarrierFloatMemoryScope) {\n  836    const std::string body = R\"(\n  837: OpMemoryBarrier %f32_1 %acquire_release_uniform_workgroup\n  838  )\";\n  839  \n  ...\n  841    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  842    EXPECT_THAT(getDiagnosticString(),\n  843:               HasSubstr(\"MemoryBarrier: expected scope to be a 32-bit int\"));\n  844  }\n  845  \n  846: TEST_F(ValidateBarriers, OpMemoryBarrierU64MemoryScope) {\n  847    const std::string body = R\"(\n  848: OpMemoryBarrier %u64_1 %acquire_release_uniform_workgroup\n  849  )\";\n  850  \n  ...\n  852    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  853    EXPECT_THAT(getDiagnosticString(),\n  854:               HasSubstr(\"MemoryBarrier: expected scope to be a 32-bit int\"));\n  855  }\n  856  \n  857: TEST_F(ValidateBarriers, OpMemoryBarrierFloatMemorySemantics) {\n  858    const std::string body = R\"(\n  859: OpMemoryBarrier %device %f32_0\n  860  )\";\n  861  \n  ...\n  864    EXPECT_THAT(\n  865        getDiagnosticString(),\n  866:       HasSubstr(\"MemoryBarrier: expected Memory Semantics to be a 32-bit int\"));\n  867  }\n  868  \n  869: TEST_F(ValidateBarriers, OpMemoryBarrierU64MemorySemantics) {\n  870    const std::string body = R\"(\n  871: OpMemoryBarrier %device %u64_0\n  872  )\";\n  873  \n  ...\n  876    EXPECT_THAT(\n  877        getDiagnosticString(),\n  878:       HasSubstr(\"MemoryBarrier: expected Memory Semantics to be a 32-bit int\"));\n  879  }\n  880  \n  881: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanMemoryScopeSubgroup) {\n  882    const std::string body = R\"(\n  883: OpMemoryBarrier %subgroup %acquire_release_uniform_workgroup\n  884  )\";\n  885  \n  ...\n  888    EXPECT_THAT(\n  889        getDiagnosticString(),\n  890:       HasSubstr(\"MemoryBarrier: in Vulkan 1.0 environment Memory Scope is \"\n  891                  \"limited to Device, Workgroup and Invocation\"));\n  892  }\n  893  \n  894: TEST_F(ValidateBarriers, OpMemoryBarrierVulkan1p1MemoryScopeSubgroup) {\n  895    const std::string body = R\"(\n  896: OpMemoryBarrier %subgroup %acquire_release_uniform_workgroup\n  897  )\";\n  898  \n  ...\n  901  }\n  902  \n  903: TEST_F(ValidateBarriers, OpMemoryBarrierAcquireAndRelease) {\n  904    const std::string body = R\"(\n  905: OpMemoryBarrier %device %acquire_and_release_uniform\n  906  )\";\n  907  \n  ...\n  909    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n  910    EXPECT_THAT(getDiagnosticString(),\n  911:               HasSubstr(\"MemoryBarrier: Memory Semantics can have at most one \"\n  912                          \"of the following bits set: Acquire, Release, \"\n  913                          \"AcquireRelease or SequentiallyConsistent\"));\n  914  }\n  915  \n  916: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanMemorySemanticsNone) {\n  917    const std::string body = R\"(\n  918: OpMemoryBarrier %device %none\n  919  )\";\n  920  \n  ...\n  923    EXPECT_THAT(\n  924        getDiagnosticString(),\n  925:       HasSubstr(\"MemoryBarrier: Vulkan specification requires Memory Semantics \"\n  926                  \"to have one of the following bits set: Acquire, Release, \"\n  927                  \"AcquireRelease or SequentiallyConsistent\"));\n  928  }\n  929  \n  930: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanMemorySemanticsAcquire) {\n  931    const std::string body = R\"(\n  932: OpMemoryBarrier %device %acquire\n  933  )\";\n  934  \n  ...\n  936    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_0));\n  937    EXPECT_THAT(getDiagnosticString(),\n  938:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n  939                          \"Vulkan-supported storage class\"));\n  940  }\n  941  \n  942: TEST_F(ValidateBarriers, OpMemoryBarrierVulkanSubgroupStorageClass) {\n  943    const std::string body = R\"(\n  944: OpMemoryBarrier %device %acquire_release_subgroup\n  945  )\";\n  946  \n  ...\n  948    ASSERT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions(SPV_ENV_VULKAN_1_0));\n  949    EXPECT_THAT(getDiagnosticString(),\n  950:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n  951                          \"Vulkan-supported storage class\"));\n  952  }\n  953  \n  954: TEST_F(ValidateBarriers, OpNamedBarrierInitializeSuccess) {\n  955    const std::string body = R\"(\n  956: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n  957  )\";\n  958  \n  ...\n  961  }\n  962  \n  963: TEST_F(ValidateBarriers, OpNamedBarrierInitializeWrongResultType) {\n  964    const std::string body = R\"(\n  965: %barrier = OpNamedBarrierInitialize %u32 %u32_4\n  966  )\";\n  967  \n  ...\n  970              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  971    EXPECT_THAT(getDiagnosticString(),\n  972:               HasSubstr(\"NamedBarrierInitialize: expected Result Type to be \"\n  973:                         \"OpTypeNamedBarrier\"));\n  974  }\n  975  \n  976: TEST_F(ValidateBarriers, OpNamedBarrierInitializeFloatSubgroupCount) {\n  977    const std::string body = R\"(\n  978: %barrier = OpNamedBarrierInitialize %named_barrier %f32_4\n  979  )\";\n  980  \n  ...\n  983              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  984    EXPECT_THAT(getDiagnosticString(),\n  985:               HasSubstr(\"NamedBarrierInitialize: expected Subgroup Count to be \"\n  986                          \"a 32-bit int\"));\n  987  }\n  988  \n  989: TEST_F(ValidateBarriers, OpNamedBarrierInitializeU64SubgroupCount) {\n  990    const std::string body = R\"(\n  991: %barrier = OpNamedBarrierInitialize %named_barrier %u64_4\n  992  )\";\n  993  \n  ...\n  996              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  997    EXPECT_THAT(getDiagnosticString(),\n  998:               HasSubstr(\"NamedBarrierInitialize: expected Subgroup Count to be \"\n  999                          \"a 32-bit int\"));\n 1000  }\n 1001  \n 1002: TEST_F(ValidateBarriers, OpMemoryNamedBarrierSuccess) {\n 1003    const std::string body = R\"(\n 1004: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1005: OpMemoryNamedBarrier %barrier %workgroup %acquire_release_workgroup\n 1006  )\";\n 1007  \n ....\n 1010  }\n 1011  \n 1012: TEST_F(ValidateBarriers, OpMemoryNamedBarrierNotNamedBarrier) {\n 1013    const std::string body = R\"(\n 1014: OpMemoryNamedBarrier %u32_1 %workgroup %acquire_release_workgroup\n 1015  )\";\n 1016  \n ....\n 1019              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n 1020    EXPECT_THAT(getDiagnosticString(),\n 1021:               HasSubstr(\"MemoryNamedBarrier: expected Named Barrier to be of \"\n 1022:                         \"type OpTypeNamedBarrier\"));\n 1023  }\n 1024  \n 1025: TEST_F(ValidateBarriers, OpMemoryNamedBarrierFloatMemoryScope) {\n 1026    const std::string body = R\"(\n 1027: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1028: OpMemoryNamedBarrier %barrier %f32_1 %acquire_release_workgroup\n 1029  )\";\n 1030  \n ....\n 1034    EXPECT_THAT(\n 1035        getDiagnosticString(),\n 1036:       HasSubstr(\"MemoryNamedBarrier: expected scope to be a 32-bit int\"));\n 1037  }\n 1038  \n 1039: TEST_F(ValidateBarriers, OpMemoryNamedBarrierFloatMemorySemantics) {\n 1040    const std::string body = R\"(\n 1041: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1042: OpMemoryNamedBarrier %barrier %workgroup %f32_0\n 1043  )\";\n 1044  \n ....\n 1049        getDiagnosticString(),\n 1050        HasSubstr(\n 1051:           \"MemoryNamedBarrier: expected Memory Semantics to be a 32-bit int\"));\n 1052  }\n 1053  \n 1054: TEST_F(ValidateBarriers, OpMemoryNamedBarrierAcquireAndRelease) {\n 1055    const std::string body = R\"(\n 1056: %barrier = OpNamedBarrierInitialize %named_barrier %u32_4\n 1057: OpMemoryNamedBarrier %barrier %workgroup %acquire_and_release\n 1058  )\";\n 1059  \n ....\n 1062              ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n 1063    EXPECT_THAT(getDiagnosticString(),\n 1064:               HasSubstr(\"MemoryNamedBarrier: Memory Semantics can have at most \"\n 1065                          \"one of the following bits set: Acquire, Release, \"\n 1066                          \"AcquireRelease or SequentiallyConsistent\"));\n 1067  }\n 1068  \n 1069: TEST_F(ValidateBarriers, TypeAsMemoryScope) {\n 1070    const std::string body = R\"(\n 1071: OpMemoryBarrier %u32 %u32_0\n 1072  )\";\n 1073  \n ....\n 1078  }\n 1079  \n 1080: TEST_F(ValidateBarriers,\n 1081:        OpControlBarrierVulkanMemoryModelBanSequentiallyConsistent) {\n 1082    const std::string text = R\"(\n 1083  OpCapability Shader\n ....\n 1094  %1 = OpFunction %2 None %5\n 1095  %7 = OpLabel\n 1096: OpControlBarrier %6 %6 %4\n 1097  OpReturn\n 1098  OpFunctionEnd\n ....\n 1107  }\n 1108  \n 1109: TEST_F(ValidateBarriers,\n 1110:        OpMemoryBarrierVulkanMemoryModelBanSequentiallyConsistent) {\n 1111    const std::string text = R\"(\n 1112  OpCapability Shader\n ....\n 1123  %1 = OpFunction %2 None %5\n 1124  %7 = OpLabel\n 1125: OpMemoryBarrier %6 %4\n 1126  OpReturn\n 1127  OpFunctionEnd\n ....\n 1136  }\n 1137  \n 1138: TEST_F(ValidateBarriers, OutputMemoryKHRRequireVulkanMemoryModelKHR) {\n 1139    const std::string text = R\"(\n 1140  OpCapability Shader\n ....\n 1149  %1 = OpFunction %2 None %5\n 1150  %7 = OpLabel\n 1151: OpControlBarrier %device %device %semantics\n 1152  OpReturn\n 1153  OpFunctionEnd\n ....\n 1157    EXPECT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n 1158    EXPECT_THAT(getDiagnosticString(),\n 1159:               HasSubstr(\"ControlBarrier: Memory Semantics OutputMemoryKHR \"\n 1160                          \"requires capability VulkanMemoryModelKHR\"));\n 1161  }\n 1162  \n 1163: TEST_F(ValidateBarriers, MakeAvailableKHRRequireVulkanMemoryModelKHR) {\n 1164    const std::string text = R\"(\n 1165  OpCapability Shader\n ....\n 1174  %1 = OpFunction %2 None %5\n 1175  %7 = OpLabel\n 1176: OpControlBarrier %device %device %semantics\n 1177  OpReturn\n 1178  OpFunctionEnd\n ....\n 1182    EXPECT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n 1183    EXPECT_THAT(getDiagnosticString(),\n 1184:               HasSubstr(\"ControlBarrier: Memory Semantics MakeAvailableKHR \"\n 1185                          \"requires capability VulkanMemoryModelKHR\"));\n 1186  }\n 1187  \n 1188: TEST_F(ValidateBarriers, MakeVisibleKHRRequireVulkanMemoryModelKHR) {\n 1189    const std::string text = R\"(\n 1190  OpCapability Shader\n ....\n 1199  %1 = OpFunction %2 None %5\n 1200  %7 = OpLabel\n 1201: OpControlBarrier %device %device %semantics\n 1202  OpReturn\n 1203  OpFunctionEnd\n ....\n 1207    EXPECT_EQ(SPV_ERROR_INVALID_DATA, ValidateInstructions());\n 1208    EXPECT_THAT(getDiagnosticString(),\n 1209:               HasSubstr(\"ControlBarrier: Memory Semantics MakeVisibleKHR \"\n 1210                          \"requires capability VulkanMemoryModelKHR\"));\n 1211  }\n 1212  \n 1213: TEST_F(ValidateBarriers, MakeAvailableKHRRequiresReleaseSemantics) {\n 1214    const std::string text = R\"(\n 1215  OpCapability Shader\n ....\n 1226  %func = OpFunction %void None %functy\n 1227  %1 = OpLabel\n 1228: OpControlBarrier %workgroup %workgroup %semantics\n 1229  OpReturn\n 1230  OpFunctionEnd\n ....\n 1236    EXPECT_THAT(\n 1237        getDiagnosticString(),\n 1238:       HasSubstr(\"ControlBarrier: MakeAvailableKHR Memory Semantics also \"\n 1239                  \"requires either Release or AcquireRelease Memory Semantics\"));\n 1240  }\n 1241  \n 1242: TEST_F(ValidateBarriers, MakeVisibleKHRRequiresAcquireSemantics) {\n 1243    const std::string text = R\"(\n 1244  OpCapability Shader\n ....\n 1255  %func = OpFunction %void None %functy\n 1256  %1 = OpLabel\n 1257: OpControlBarrier %workgroup %workgroup %semantics\n 1258  OpReturn\n 1259  OpFunctionEnd\n ....\n 1265    EXPECT_THAT(\n 1266        getDiagnosticString(),\n 1267:       HasSubstr(\"ControlBarrier: MakeVisibleKHR Memory Semantics also requires \"\n 1268                  \"either Acquire or AcquireRelease Memory Semantics\"));\n 1269  }\n 1270  \n 1271: TEST_F(ValidateBarriers, MakeAvailableKHRRequiresStorageSemantics) {\n 1272    const std::string text = R\"(\n 1273  OpCapability Shader\n ....\n 1284  %func = OpFunction %void None %functy\n 1285  %1 = OpLabel\n 1286: OpMemoryBarrier %workgroup %semantics\n 1287  OpReturn\n 1288  OpFunctionEnd\n ....\n 1293              ValidateInstructions(SPV_ENV_UNIVERSAL_1_3));\n 1294    EXPECT_THAT(getDiagnosticString(),\n 1295:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n 1296                          \"storage class\"));\n 1297  }\n 1298  \n 1299: TEST_F(ValidateBarriers, MakeVisibleKHRRequiresStorageSemantics) {\n 1300    const std::string text = R\"(\n 1301  OpCapability Shader\n ....\n 1312  %func = OpFunction %void None %functy\n 1313  %1 = OpLabel\n 1314: OpMemoryBarrier %workgroup %semantics\n 1315  OpReturn\n 1316  OpFunctionEnd\n ....\n 1321              ValidateInstructions(SPV_ENV_UNIVERSAL_1_3));\n 1322    EXPECT_THAT(getDiagnosticString(),\n 1323:               HasSubstr(\"MemoryBarrier: expected Memory Semantics to include a \"\n 1324                          \"storage class\"));\n 1325  }\n 1326  \n 1327: TEST_F(ValidateBarriers, SemanticsSpecConstantShader) {\n 1328    const std::string spirv = R\"(\n 1329  OpCapability Shader\n ....\n 1340  %func = OpFunction %void None %voidfn\n 1341  %entry = OpLabel\n 1342: OpMemoryBarrier %workgroup %spec_const\n 1343  OpReturn\n 1344  OpFunctionEnd\n ....\n 1352  }\n 1353  \n 1354: TEST_F(ValidateBarriers, SemanticsSpecConstantKernel) {\n 1355    const std::string spirv = R\"(\n 1356  OpCapability Kernel\n ....\n 1366  %func = OpFunction %void None %voidfn\n 1367  %entry = OpLabel\n 1368: OpMemoryBarrier %workgroup %spec_const\n 1369  OpReturn\n 1370  OpFunctionEnd\n ....\n 1375  }\n 1376  \n 1377: TEST_F(ValidateBarriers, ScopeSpecConstantShader) {\n 1378    const std::string spirv = R\"(\n 1379  OpCapability Shader\n ....\n 1390  %func = OpFunction %void None %voidfn\n 1391  %entry = OpLabel\n 1392: OpMemoryBarrier %spec_const %relaxed\n 1393  OpReturn\n 1394  OpFunctionEnd\n ....\n 1402  }\n 1403  \n 1404: TEST_F(ValidateBarriers, ScopeSpecConstantKernel) {\n 1405    const std::string spirv = R\"(\n 1406  OpCapability Kernel\n ....\n 1416  %func = OpFunction %void None %voidfn\n 1417  %entry = OpLabel\n 1418: OpMemoryBarrier %spec_const %relaxed\n 1419  OpReturn\n 1420  OpFunctionEnd\n ....\n 1425  }\n 1426  \n 1427: TEST_F(ValidateBarriers, VulkanMemoryModelDeviceScopeBad) {\n 1428    const std::string text = R\"(\n 1429  OpCapability Shader\n ....\n 1440  %func = OpFunction %void None %functy\n 1441  %1 = OpLabel\n 1442: OpMemoryBarrier %device %semantics\n 1443  OpReturn\n 1444  OpFunctionEnd\n ....\n 1454  }\n 1455  \n 1456: TEST_F(ValidateBarriers, VulkanMemoryModelDeviceScopeGood) {\n 1457    const std::string text = R\"(\n 1458  OpCapability Shader\n ....\n 1470  %func = OpFunction %void None %functy\n 1471  %1 = OpLabel\n 1472: OpMemoryBarrier %device %semantics\n 1473  OpReturn\n 1474  OpFunctionEnd\n ....\n 1479  }\n 1480  \n 1481: TEST_F(ValidateBarriers, VolatileMemoryBarrier) {\n 1482    const std::string text = R\"(\n 1483  OpCapability Shader\n ....\n 1494  %func = OpFunction %void None %functy\n 1495  %1 = OpLabel\n 1496: OpMemoryBarrier %device %semantics\n 1497  OpReturn\n 1498  OpFunctionEnd\n ....\n 1506  }\n 1507  \n 1508: TEST_F(ValidateBarriers, VolatileControlBarrier) {\n 1509    const std::string text = R\"(\n 1510  OpCapability Shader\n ....\n 1521  %func = OpFunction %void None %functy\n 1522  %1 = OpLabel\n 1523: OpControlBarrier %device %device %semantics\n 1524  OpReturn\n 1525  OpFunctionEnd\n ....\n 1533  }\n 1534  \n 1535: TEST_F(ValidateBarriers, CooperativeMatrixSpecConstantVolatile) {\n 1536    const std::string text = R\"(\n 1537  OpCapability Shader\n ....\n 1550  %func = OpFunction %void None %functy\n 1551  %1 = OpLabel\n 1552: OpControlBarrier %device %device %semantics\n 1553  OpReturn\n 1554  OpFunctionEnd\n ....\n 1559  }\n 1560  \n 1561: TEST_F(ValidateBarriers, CooperativeMatrixNonConstantSemantics) {\n 1562    const std::string text = R\"(\n 1563  OpCapability Shader\n ....\n 1576  %func = OpFunction %void None %functy\n 1577  %1 = OpLabel\n 1578: OpControlBarrier %device %device %semantics\n 1579  OpReturn\n 1580  OpFunctionEnd\n ....\n 1588  }\n 1589  \n 1590: TEST_F(ValidateBarriers, OpMemoryBarrierShaderCallRayGenSuccess) {\n 1591    const std::string body =\n 1592:       \"OpMemoryBarrier %shadercall %release_uniform_workgroup\";\n 1593  \n 1594    CompileSuccessfully(GenerateShaderCodeImpl(body,\n ....\n 1611  }\n 1612  \n 1613: TEST_F(ValidateBarriers, OpMemoryBarrierShaderCallComputeFailure) {\n 1614    const std::string body =\n 1615:       \"OpMemoryBarrier %shadercall %release_uniform_workgroup\";\n 1616  \n 1617    CompileSuccessfully(GenerateShaderCodeImpl(body,\n ....\n 1636  }\n 1637  \n 1638: TEST_F(ValidateBarriers, OpControlBarrierShaderCallRayGenFailure) {\n 1639:   const std::string body = \"OpControlBarrier %shadercall %shadercall %none\";\n 1640  \n 1641    CompileSuccessfully(GenerateShaderCodeImpl(body,\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_capability_test.cpp:\n   58  //\n   59  // OpCapability Kernel\n   60: // %1 = OpTypeNamedBarrier ; requires NamedBarrier\n   61  //\n   62  // So how does the test parameter capture which capabilities should cause\n   ..\n  196      \"MultiViewport\",\n  197      \"SubgroupDispatch\",\n  198:     \"NamedBarrier\",\n  199      \"PipeStorage\",\n  200      \"GroupNonUniform\",\n  ...\n  280      \"MultiViewport\",\n  281      \"SubgroupDispatch\",\n  282:     \"NamedBarrier\",\n  283      \"PipeStorage\",\n  284      \"GroupNonUniform\",\n  ...\n  725    \"LiteralSampler\",\n  726    \"SubgroupDispatch\",\n  727:   \"NamedBarrier\",\n  728    \"PipeStorage\"};\n  729    return *r;\n  ...\n  742    \"LiteralSampler\",\n  743    \"SubgroupDispatch\",\n  744:   \"NamedBarrier\",\n  745    \"PipeStorage\",\n  746    \"GroupNonUniform\",\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_id_test.cpp:\n 5290  %f      = OpFunction %void None %void_f\n 5291  %l      = OpLabel\n 5292:           OpMemoryBarrier %undef %memsem\n 5293            OpReturn\n 5294            OpFunctionEnd\n ....\n 5308  %f      = OpFunction %void None %void_f\n 5309  %l      = OpLabel\n 5310:           OpMemoryBarrier %scope %undef\n 5311            OpReturn\n 5312            OpFunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/test/val/val_type_unique_test.cpp:\n  185  }\n  186  \n  187: TEST_F(ValidateTypeUnique, duplicate_named_barrier) {\n  188    std::string str = R\"(\n  189  OpCapability Addresses\n  190  OpCapability Kernel\n  191  OpCapability Linkage\n  192: OpCapability NamedBarrier\n  193  OpMemoryModel Physical32 OpenCL\n  194: %nb = OpTypeNamedBarrier\n  195: %nb2 = OpTypeNamedBarrier\n  196  )\";\n  197    CompileSuccessfully(str.c_str(), SPV_ENV_UNIVERSAL_1_1);\n  198    ASSERT_EQ(kDuplicateTypeError, ValidateInstructions(SPV_ENV_UNIVERSAL_1_1));\n  199    EXPECT_THAT(getDiagnosticString(),\n  200:               HasSubstr(GetErrorString(SpvOpTypeNamedBarrier)));\n  201  }\n  202  \n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/tools/opt/opt.cpp:\n  506    --upgrade-memory-model\n  507                 Upgrades the Logical GLSL450 memory model to Logical VulkanKHR.\n  508:                Transforms memory, image, atomic and barrier operations to conform\n  509                 to that model's requirements.)\");\n  510    printf(R\"(\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/tools/sva/src/spirv.data.js:\n 2763        ]\n 2764      },\n 2765:     \"OpControlBarrier\": {\n 2766        \"opcode\": 224,\n 2767        \"operands\": [\n ....\n 2777        ]\n 2778      },\n 2779:     \"OpMemoryBarrier\": {\n 2780        \"opcode\": 225,\n 2781        \"operands\": [\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/utils/vscode/spirv.json:\n  166  \t\t},\n  167  \t\t\"ValueEnum_Capability\": {\n  168: \t\t\t\"match\": \"\\\\b(Matrix|Shader|Geometry|Tessellation|Addresses|Linkage|Kernel|Vector16|Float16Buffer|Float16|Float64|Int64|Int64Atomics|ImageBasic|ImageReadWrite|ImageMipmap|Pipes|Groups|DeviceEnqueue|LiteralSampler|AtomicStorage|Int16|TessellationPointSize|GeometryPointSize|ImageGatherExtended|StorageImageMultisample|UniformBufferArrayDynamicIndexing|SampledImageArrayDynamicIndexing|StorageBufferArrayDynamicIndexing|StorageImageArrayDynamicIndexing|ClipDistance|CullDistance|ImageCubeArray|SampleRateShading|ImageRect|SampledRect|GenericPointer|Int8|InputAttachment|SparseResidency|MinLod|Sampled1D|Image1D|SampledCubeArray|SampledBuffer|ImageBuffer|ImageMSArray|StorageImageExtendedFormats|ImageQuery|DerivativeControl|InterpolationFunction|TransformFeedback|GeometryStreams|StorageImageReadWithoutFormat|StorageImageWriteWithoutFormat|MultiViewport|SubgroupDispatch|NamedBarrier|PipeStorage|GroupNonUniform|GroupNonUniformVote|GroupNonUniformArithmetic|GroupNonUniformBallot|GroupNonUniformShuffle|GroupNonUniformShuffleRelative|GroupNonUniformClustered|GroupNonUniformQuad|ShaderLayer|ShaderViewportIndex|SubgroupBallotKHR|DrawParameters|SubgroupVoteKHR|StorageBuffer16BitAccess|StorageUniformBufferBlock16|UniformAndStorageBuffer16BitAccess|StorageUniform16|StoragePushConstant16|StorageInputOutput16|DeviceGroup|MultiView|VariablePointersStorageBuffer|VariablePointers|AtomicStorageOps|SampleMaskPostDepthCoverage|StorageBuffer8BitAccess|UniformAndStorageBuffer8BitAccess|StoragePushConstant8|DenormPreserve|DenormFlushToZero|SignedZeroInfNanPreserve|RoundingModeRTE|RoundingModeRTZ|Float16ImageAMD|ImageGatherBiasLodAMD|FragmentMaskAMD|StencilExportEXT|ImageReadWriteLodAMD|ShaderClockKHR|SampleMaskOverrideCoverageNV|GeometryShaderPassthroughNV|ShaderViewportIndexLayerEXT|ShaderViewportIndexLayerNV|ShaderViewportMaskNV|ShaderStereoViewNV|PerViewAttributesNV|FragmentFullyCoveredEXT|MeshShadingNV|ImageFootprintNV|FragmentBarycentricNV|ComputeDerivativeGroupQuadsNV|FragmentDensityEXT|ShadingRateNV|GroupNonUniformPartitionedNV|ShaderNonUniform|ShaderNonUniformEXT|RuntimeDescriptorArray|RuntimeDescriptorArrayEXT|InputAttachmentArrayDynamicIndexing|InputAttachmentArrayDynamicIndexingEXT|UniformTexelBufferArrayDynamicIndexing|UniformTexelBufferArrayDynamicIndexingEXT|StorageTexelBufferArrayDynamicIndexing|StorageTexelBufferArrayDynamicIndexingEXT|UniformBufferArrayNonUniformIndexing|UniformBufferArrayNonUniformIndexingEXT|SampledImageArrayNonUniformIndexing|SampledImageArrayNonUniformIndexingEXT|StorageBufferArrayNonUniformIndexing|StorageBufferArrayNonUniformIndexingEXT|StorageImageArrayNonUniformIndexing|StorageImageArrayNonUniformIndexingEXT|InputAttachmentArrayNonUniformIndexing|InputAttachmentArrayNonUniformIndexingEXT|UniformTexelBufferArrayNonUniformIndexing|UniformTexelBufferArrayNonUniformIndexingEXT|StorageTexelBufferArrayNonUniformIndexing|StorageTexelBufferArrayNonUniformIndexingEXT|RayTracingNV|VulkanMemoryModel|VulkanMemoryModelKHR|VulkanMemoryModelDeviceScope|VulkanMemoryModelDeviceScopeKHR|PhysicalStorageBufferAddresses|PhysicalStorageBufferAddressesEXT|ComputeDerivativeGroupLinearNV|CooperativeMatrixNV|FragmentShaderSampleInterlockEXT|FragmentShaderShadingRateInterlockEXT|ShaderSMBuiltinsNV|FragmentShaderPixelInterlockEXT|DemoteToHelperInvocationEXT|SubgroupShuffleINTEL|SubgroupBufferBlockIOINTEL|SubgroupImageBlockIOINTEL|SubgroupImageMediaBlockIOINTEL|IntegerFunctions2INTEL|SubgroupAvcMotionEstimationINTEL|SubgroupAvcMotionEstimationIntraINTEL|SubgroupAvcMotionEstimationChromaINTEL)\\\\b\",\n  169  \t\t\t\"name\": \"keyword.spirv\"\n  170  \t\t},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv-tools/utils/vscode/src/schema/schema.go:\n  309  \t\t\"OpEmitStreamVertex\": OpEmitStreamVertex,\n  310  \t\t\"OpEndStreamPrimitive\": OpEndStreamPrimitive,\n  311: \t\t\"OpControlBarrier\": OpControlBarrier,\n  312: \t\t\"OpMemoryBarrier\": OpMemoryBarrier,\n  313  \t\t\"OpAtomicLoad\": OpAtomicLoad,\n  314  \t\t\"OpAtomicStore\": OpAtomicStore,\n  ...\n  404  \t\t\"OpGetKernelLocalSizeForSubgroupCount\": OpGetKernelLocalSizeForSubgroupCount,\n  405  \t\t\"OpGetKernelMaxNumSubgroups\": OpGetKernelMaxNumSubgroups,\n  406: \t\t\"OpTypeNamedBarrier\": OpTypeNamedBarrier,\n  407: \t\t\"OpNamedBarrierInitialize\": OpNamedBarrierInitialize,\n  408: \t\t\"OpMemoryNamedBarrier\": OpMemoryNamedBarrier,\n  409  \t\t\"OpModuleProcessed\": OpModuleProcessed,\n  410  \t\t\"OpExecutionModeId\": OpExecutionModeId,\n  ...\n 5850  \t\t},\n 5851  \t}\n 5852: \tOpControlBarrier = &Opcode {\n 5853: \t\tOpname:   \"OpControlBarrier\",\n 5854: \t\tClass:    \"Barrier\",\n 5855  \t\tOpcode:   224,\n 5856  \t\tOperands: []Operand {\n ....\n 5872  \t\t},\n 5873  \t}\n 5874: \tOpMemoryBarrier = &Opcode {\n 5875: \t\tOpname:   \"OpMemoryBarrier\",\n 5876: \t\tClass:    \"Barrier\",\n 5877  \t\tOpcode:   225,\n 5878  \t\tOperands: []Operand {\n ....\n 8700  \t\t},\n 8701  \t}\n 8702: \tOpTypeNamedBarrier = &Opcode {\n 8703: \t\tOpname:   \"OpTypeNamedBarrier\",\n 8704  \t\tClass:    \"Type-Declaration\",\n 8705  \t\tOpcode:   327,\n ....\n 8712  \t\t},\n 8713  \t}\n 8714: \tOpNamedBarrierInitialize = &Opcode {\n 8715: \t\tOpname:   \"OpNamedBarrierInitialize\",\n 8716: \t\tClass:    \"Barrier\",\n 8717  \t\tOpcode:   328,\n 8718  \t\tOperands: []Operand {\n ....\n 8734  \t\t},\n 8735  \t}\n 8736: \tOpMemoryNamedBarrier = &Opcode {\n 8737: \t\tOpname:   \"OpMemoryNamedBarrier\",\n 8738: \t\tClass:    \"Barrier\",\n 8739  \t\tOpcode:   329,\n 8740  \t\tOperands: []Operand {\n 8741  \t\t\tOperand {\n 8742  \t\t\t\tKind:       OperandKindIdRef,\n 8743: \t\t\t\tName:       \"'Named Barrier'\",\n 8744  \t\t\t\tQuantifier: \"\",\n 8745  \t\t\t}, \n ....\n 23836  \t\t\t},\n 23837  \t\t\tEnumerant{\n 23838: \t\t\t\tEnumerant:    \"NamedBarrier\",\n 23839  \t\t\t\tValue:        59,\n 23840  \t\t\t\tCapabilities: []string{\"Kernel\",},\n\n/home/max/dev/Falcor/third_party/slang/external/spirv/spirv.h:\n  659      SpvCapabilityMultiViewport = 57,\n  660      SpvCapabilitySubgroupDispatch = 58,\n  661:     SpvCapabilityNamedBarrier = 59,\n  662      SpvCapabilityPipeStorage = 60,\n  663      SpvCapabilityGroupNonUniform = 61,\n  ...\n  925      SpvOpEmitStreamVertex = 220,\n  926      SpvOpEndStreamPrimitive = 221,\n  927:     SpvOpControlBarrier = 224,\n  928:     SpvOpMemoryBarrier = 225,\n  929      SpvOpAtomicLoad = 227,\n  930      SpvOpAtomicStore = 228,\n  ...\n 1020      SpvOpGetKernelLocalSizeForSubgroupCount = 325,\n 1021      SpvOpGetKernelMaxNumSubgroups = 326,\n 1022:     SpvOpTypeNamedBarrier = 327,\n 1023:     SpvOpNamedBarrierInitialize = 328,\n 1024:     SpvOpMemoryNamedBarrier = 329,\n 1025      SpvOpModuleProcessed = 330,\n 1026      SpvOpExecutionModeId = 331,\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/include/vulkan/vulkan.hpp:\n  110  #endif\n  111  \n  112: // Windows defines MemoryBarrier which is deprecated and collides\n  113: // with the VULKAN_HPP_NAMESPACE::MemoryBarrier struct.\n  114: #if defined(MemoryBarrier)\n  115:   #undef MemoryBarrier\n  116  #endif\n  117  \n  ...\n 1580      }\n 1581  \n 1582:     void vkCmdPipelineBarrier( VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers ) const VULKAN_HPP_NOEXCEPT\n 1583      {\n 1584:       return ::vkCmdPipelineBarrier( commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers );\n 1585      }\n 1586  \n ....\n 1814      }\n 1815  \n 1816:     void vkCmdWaitEvents( VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers ) const VULKAN_HPP_NOEXCEPT\n 1817      {\n 1818:       return ::vkCmdWaitEvents( commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers );\n 1819      }\n 1820  \n ....\n 7980      eCommandBufferBeginInfo = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,\n 7981      eRenderPassBeginInfo = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,\n 7982:     eBufferMemoryBarrier = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER,\n 7983:     eImageMemoryBarrier = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,\n 7984:     eMemoryBarrier = VK_STRUCTURE_TYPE_MEMORY_BARRIER,\n 7985      eLoaderInstanceCreateInfo = VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO,\n 7986      eLoaderDeviceCreateInfo = VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO,\n ....\n 8544        case StructureType::eCommandBufferBeginInfo : return \"CommandBufferBeginInfo\";\n 8545        case StructureType::eRenderPassBeginInfo : return \"RenderPassBeginInfo\";\n 8546:       case StructureType::eBufferMemoryBarrier : return \"BufferMemoryBarrier\";\n 8547:       case StructureType::eImageMemoryBarrier : return \"ImageMemoryBarrier\";\n 8548:       case StructureType::eMemoryBarrier : return \"MemoryBarrier\";\n 8549        case StructureType::eLoaderInstanceCreateInfo : return \"LoaderInstanceCreateInfo\";\n 8550        case StructureType::eLoaderDeviceCreateInfo : return \"LoaderDeviceCreateInfo\";\n ....\n 21775    static_assert( std::is_standard_layout<BufferImageCopy>::value, \"struct wrapper is not a standard layout!\" );\n 21776  \n 21777:   struct BufferMemoryBarrier\n 21778    {\n 21779      static const bool allowDuplicate = false;\n 21780:     static VULKAN_HPP_CONST_OR_CONSTEXPR StructureType structureType = StructureType::eBufferMemoryBarrier;\n 21781  \n 21782  #if !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 21783:     VULKAN_HPP_CONSTEXPR BufferMemoryBarrier(VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ = {}, VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ = {}, uint32_t srcQueueFamilyIndex_ = {}, uint32_t dstQueueFamilyIndex_ = {}, VULKAN_HPP_NAMESPACE::Buffer buffer_ = {}, VULKAN_HPP_NAMESPACE::DeviceSize offset_ = {}, VULKAN_HPP_NAMESPACE::DeviceSize size_ = {}) VULKAN_HPP_NOEXCEPT\n 21784      : srcAccessMask( srcAccessMask_ ), dstAccessMask( dstAccessMask_ ), srcQueueFamilyIndex( srcQueueFamilyIndex_ ), dstQueueFamilyIndex( dstQueueFamilyIndex_ ), buffer( buffer_ ), offset( offset_ ), size( size_ )\n 21785      {}\n 21786  \n 21787:     BufferMemoryBarrier( VkBufferMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 21788      {\n 21789        *this = rhs;\n .....\n 21791  #endif // !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 21792  \n 21793:     BufferMemoryBarrier & operator=( VkBufferMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 21794      {\n 21795:       *this = *reinterpret_cast<VULKAN_HPP_NAMESPACE::BufferMemoryBarrier const *>( &rhs );\n 21796        return *this;\n 21797      }\n 21798  \n 21799:     BufferMemoryBarrier & operator=( BufferMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 21800      {\n 21801      pNext = rhs.pNext;\n .....\n 21811      }\n 21812  \n 21813:     BufferMemoryBarrier & setPNext( const void* pNext_ ) VULKAN_HPP_NOEXCEPT\n 21814      {\n 21815        pNext = pNext_;\n .....\n 21817      }\n 21818  \n 21819:     BufferMemoryBarrier & setSrcAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 21820      {\n 21821        srcAccessMask = srcAccessMask_;\n .....\n 21823      }\n 21824  \n 21825:     BufferMemoryBarrier & setDstAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 21826      {\n 21827        dstAccessMask = dstAccessMask_;\n .....\n 21829      }\n 21830  \n 21831:     BufferMemoryBarrier & setSrcQueueFamilyIndex( uint32_t srcQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 21832      {\n 21833        srcQueueFamilyIndex = srcQueueFamilyIndex_;\n .....\n 21835      }\n 21836  \n 21837:     BufferMemoryBarrier & setDstQueueFamilyIndex( uint32_t dstQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 21838      {\n 21839        dstQueueFamilyIndex = dstQueueFamilyIndex_;\n .....\n 21841      }\n 21842  \n 21843:     BufferMemoryBarrier & setBuffer( VULKAN_HPP_NAMESPACE::Buffer buffer_ ) VULKAN_HPP_NOEXCEPT\n 21844      {\n 21845        buffer = buffer_;\n .....\n 21847      }\n 21848  \n 21849:     BufferMemoryBarrier & setOffset( VULKAN_HPP_NAMESPACE::DeviceSize offset_ ) VULKAN_HPP_NOEXCEPT\n 21850      {\n 21851        offset = offset_;\n .....\n 21853      }\n 21854  \n 21855:     BufferMemoryBarrier & setSize( VULKAN_HPP_NAMESPACE::DeviceSize size_ ) VULKAN_HPP_NOEXCEPT\n 21856      {\n 21857        size = size_;\n .....\n 21860  \n 21861  \n 21862:     operator VkBufferMemoryBarrier const&() const VULKAN_HPP_NOEXCEPT\n 21863      {\n 21864:       return *reinterpret_cast<const VkBufferMemoryBarrier*>( this );\n 21865      }\n 21866  \n 21867:     operator VkBufferMemoryBarrier &() VULKAN_HPP_NOEXCEPT\n 21868      {\n 21869:       return *reinterpret_cast<VkBufferMemoryBarrier*>( this );\n 21870      }\n 21871  \n 21872  \n 21873  #if defined(VULKAN_HPP_HAS_SPACESHIP_OPERATOR)\n 21874:     auto operator<=>( BufferMemoryBarrier const& ) const = default;\n 21875  #else\n 21876:     bool operator==( BufferMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 21877      {\n 21878        return ( sType == rhs.sType )\n .....\n 21887      }\n 21888  \n 21889:     bool operator!=( BufferMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 21890      {\n 21891        return !operator==( rhs );\n .....\n 21896  \n 21897    public:\n 21898:     const VULKAN_HPP_NAMESPACE::StructureType sType = StructureType::eBufferMemoryBarrier;\n 21899      const void* pNext = {};\n 21900      VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask = {};\n .....\n 21907  \n 21908    };\n 21909:   static_assert( sizeof( BufferMemoryBarrier ) == sizeof( VkBufferMemoryBarrier ), \"struct and wrapper have different size!\" );\n 21910:   static_assert( std::is_standard_layout<BufferMemoryBarrier>::value, \"struct wrapper is not a standard layout!\" );\n 21911  \n 21912    template <>\n 21913:   struct CppType<StructureType, StructureType::eBufferMemoryBarrier>\n 21914    {\n 21915:     using Type = BufferMemoryBarrier;\n 21916    };\n 21917  \n .....\n 31214    };\n 31215  \n 31216:   struct MemoryBarrier\n 31217    {\n 31218      static const bool allowDuplicate = false;\n 31219:     static VULKAN_HPP_CONST_OR_CONSTEXPR StructureType structureType = StructureType::eMemoryBarrier;\n 31220  \n 31221  #if !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31222:     VULKAN_HPP_CONSTEXPR MemoryBarrier(VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ = {}, VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ = {}) VULKAN_HPP_NOEXCEPT\n 31223      : srcAccessMask( srcAccessMask_ ), dstAccessMask( dstAccessMask_ )\n 31224      {}\n 31225  \n 31226:     MemoryBarrier( VkMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31227      {\n 31228        *this = rhs;\n .....\n 31230  #endif // !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31231  \n 31232:     MemoryBarrier & operator=( VkMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31233      {\n 31234:       *this = *reinterpret_cast<VULKAN_HPP_NAMESPACE::MemoryBarrier const *>( &rhs );\n 31235        return *this;\n 31236      }\n 31237  \n 31238:     MemoryBarrier & operator=( MemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31239      {\n 31240      pNext = rhs.pNext;\n .....\n 31245      }\n 31246  \n 31247:     MemoryBarrier & setPNext( const void* pNext_ ) VULKAN_HPP_NOEXCEPT\n 31248      {\n 31249        pNext = pNext_;\n .....\n 31251      }\n 31252  \n 31253:     MemoryBarrier & setSrcAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31254      {\n 31255        srcAccessMask = srcAccessMask_;\n .....\n 31257      }\n 31258  \n 31259:     MemoryBarrier & setDstAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31260      {\n 31261        dstAccessMask = dstAccessMask_;\n .....\n 31264  \n 31265  \n 31266:     operator VkMemoryBarrier const&() const VULKAN_HPP_NOEXCEPT\n 31267      {\n 31268:       return *reinterpret_cast<const VkMemoryBarrier*>( this );\n 31269      }\n 31270  \n 31271:     operator VkMemoryBarrier &() VULKAN_HPP_NOEXCEPT\n 31272      {\n 31273:       return *reinterpret_cast<VkMemoryBarrier*>( this );\n 31274      }\n 31275  \n 31276  \n 31277  #if defined(VULKAN_HPP_HAS_SPACESHIP_OPERATOR)\n 31278:     auto operator<=>( MemoryBarrier const& ) const = default;\n 31279  #else\n 31280:     bool operator==( MemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31281      {\n 31282        return ( sType == rhs.sType )\n .....\n 31286      }\n 31287  \n 31288:     bool operator!=( MemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31289      {\n 31290        return !operator==( rhs );\n .....\n 31295  \n 31296    public:\n 31297:     const VULKAN_HPP_NAMESPACE::StructureType sType = StructureType::eMemoryBarrier;\n 31298      const void* pNext = {};\n 31299      VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask = {};\n .....\n 31301  \n 31302    };\n 31303:   static_assert( sizeof( MemoryBarrier ) == sizeof( VkMemoryBarrier ), \"struct and wrapper have different size!\" );\n 31304:   static_assert( std::is_standard_layout<MemoryBarrier>::value, \"struct wrapper is not a standard layout!\" );\n 31305  \n 31306    template <>\n 31307:   struct CppType<StructureType, StructureType::eMemoryBarrier>\n 31308    {\n 31309:     using Type = MemoryBarrier;\n 31310    };\n 31311  \n 31312:   struct ImageMemoryBarrier\n 31313    {\n 31314      static const bool allowDuplicate = false;\n 31315:     static VULKAN_HPP_CONST_OR_CONSTEXPR StructureType structureType = StructureType::eImageMemoryBarrier;\n 31316  \n 31317  #if !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31318:     VULKAN_HPP_CONSTEXPR ImageMemoryBarrier(VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ = {}, VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ = {}, VULKAN_HPP_NAMESPACE::ImageLayout oldLayout_ = VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined, VULKAN_HPP_NAMESPACE::ImageLayout newLayout_ = VULKAN_HPP_NAMESPACE::ImageLayout::eUndefined, uint32_t srcQueueFamilyIndex_ = {}, uint32_t dstQueueFamilyIndex_ = {}, VULKAN_HPP_NAMESPACE::Image image_ = {}, VULKAN_HPP_NAMESPACE::ImageSubresourceRange subresourceRange_ = {}) VULKAN_HPP_NOEXCEPT\n 31319      : srcAccessMask( srcAccessMask_ ), dstAccessMask( dstAccessMask_ ), oldLayout( oldLayout_ ), newLayout( newLayout_ ), srcQueueFamilyIndex( srcQueueFamilyIndex_ ), dstQueueFamilyIndex( dstQueueFamilyIndex_ ), image( image_ ), subresourceRange( subresourceRange_ )\n 31320      {}\n 31321  \n 31322:     ImageMemoryBarrier( VkImageMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31323      {\n 31324        *this = rhs;\n .....\n 31326  #endif // !defined( VULKAN_HPP_NO_STRUCT_CONSTRUCTORS )\n 31327  \n 31328:     ImageMemoryBarrier & operator=( VkImageMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31329      {\n 31330:       *this = *reinterpret_cast<VULKAN_HPP_NAMESPACE::ImageMemoryBarrier const *>( &rhs );\n 31331        return *this;\n 31332      }\n 31333  \n 31334:     ImageMemoryBarrier & operator=( ImageMemoryBarrier const & rhs ) VULKAN_HPP_NOEXCEPT\n 31335      {\n 31336      pNext = rhs.pNext;\n .....\n 31347      }\n 31348  \n 31349:     ImageMemoryBarrier & setPNext( const void* pNext_ ) VULKAN_HPP_NOEXCEPT\n 31350      {\n 31351        pNext = pNext_;\n .....\n 31353      }\n 31354  \n 31355:     ImageMemoryBarrier & setSrcAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31356      {\n 31357        srcAccessMask = srcAccessMask_;\n .....\n 31359      }\n 31360  \n 31361:     ImageMemoryBarrier & setDstAccessMask( VULKAN_HPP_NAMESPACE::AccessFlags dstAccessMask_ ) VULKAN_HPP_NOEXCEPT\n 31362      {\n 31363        dstAccessMask = dstAccessMask_;\n .....\n 31365      }\n 31366  \n 31367:     ImageMemoryBarrier & setOldLayout( VULKAN_HPP_NAMESPACE::ImageLayout oldLayout_ ) VULKAN_HPP_NOEXCEPT\n 31368      {\n 31369        oldLayout = oldLayout_;\n .....\n 31371      }\n 31372  \n 31373:     ImageMemoryBarrier & setNewLayout( VULKAN_HPP_NAMESPACE::ImageLayout newLayout_ ) VULKAN_HPP_NOEXCEPT\n 31374      {\n 31375        newLayout = newLayout_;\n .....\n 31377      }\n 31378  \n 31379:     ImageMemoryBarrier & setSrcQueueFamilyIndex( uint32_t srcQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 31380      {\n 31381        srcQueueFamilyIndex = srcQueueFamilyIndex_;\n .....\n 31383      }\n 31384  \n 31385:     ImageMemoryBarrier & setDstQueueFamilyIndex( uint32_t dstQueueFamilyIndex_ ) VULKAN_HPP_NOEXCEPT\n 31386      {\n 31387        dstQueueFamilyIndex = dstQueueFamilyIndex_;\n .....\n 31389      }\n 31390  \n 31391:     ImageMemoryBarrier & setImage( VULKAN_HPP_NAMESPACE::Image image_ ) VULKAN_HPP_NOEXCEPT\n 31392      {\n 31393        image = image_;\n .....\n 31395      }\n 31396  \n 31397:     ImageMemoryBarrier & setSubresourceRange( VULKAN_HPP_NAMESPACE::ImageSubresourceRange const & subresourceRange_ ) VULKAN_HPP_NOEXCEPT\n 31398      {\n 31399        subresourceRange = subresourceRange_;\n .....\n 31402  \n 31403  \n 31404:     operator VkImageMemoryBarrier const&() const VULKAN_HPP_NOEXCEPT\n 31405      {\n 31406:       return *reinterpret_cast<const VkImageMemoryBarrier*>( this );\n 31407      }\n 31408  \n 31409:     operator VkImageMemoryBarrier &() VULKAN_HPP_NOEXCEPT\n 31410      {\n 31411:       return *reinterpret_cast<VkImageMemoryBarrier*>( this );\n 31412      }\n 31413  \n 31414  \n 31415  #if defined(VULKAN_HPP_HAS_SPACESHIP_OPERATOR)\n 31416:     auto operator<=>( ImageMemoryBarrier const& ) const = default;\n 31417  #else\n 31418:     bool operator==( ImageMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31419      {\n 31420        return ( sType == rhs.sType )\n .....\n 31430      }\n 31431  \n 31432:     bool operator!=( ImageMemoryBarrier const& rhs ) const VULKAN_HPP_NOEXCEPT\n 31433      {\n 31434        return !operator==( rhs );\n .....\n 31439  \n 31440    public:\n 31441:     const VULKAN_HPP_NAMESPACE::StructureType sType = StructureType::eImageMemoryBarrier;\n 31442      const void* pNext = {};\n 31443      VULKAN_HPP_NAMESPACE::AccessFlags srcAccessMask = {};\n .....\n 31451  \n 31452    };\n 31453:   static_assert( sizeof( ImageMemoryBarrier ) == sizeof( VkImageMemoryBarrier ), \"struct and wrapper have different size!\" );\n 31454:   static_assert( std::is_standard_layout<ImageMemoryBarrier>::value, \"struct wrapper is not a standard layout!\" );\n 31455  \n 31456    template <>\n 31457:   struct CppType<StructureType, StructureType::eImageMemoryBarrier>\n 31458    {\n 31459:     using Type = ImageMemoryBarrier;\n 31460    };\n 31461  \n .....\n 33044  \n 33045      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33046:     void pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33047  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 33048      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33049:     void pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33050  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n 33051  \n .....\n 33270  \n 33271      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33272:     void waitEvents( uint32_t eventCount, const VULKAN_HPP_NAMESPACE::Event* pEvents, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33273  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 33274      template<typename Dispatch = VULKAN_HPP_DEFAULT_DISPATCHER_TYPE>\n 33275:     void waitEvents( ArrayProxy<const VULKAN_HPP_NAMESPACE::Event> const &events, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d = VULKAN_HPP_DEFAULT_DISPATCHER ) const VULKAN_HPP_NOEXCEPT;\n 33276  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n 33277  \n .....\n 78767  \n 78768    template<typename Dispatch>\n 78769:   VULKAN_HPP_INLINE void CommandBuffer::pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d) const VULKAN_HPP_NOEXCEPT\n 78770    {\n 78771:     d.vkCmdPipelineBarrier( m_commandBuffer, static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), static_cast<VkDependencyFlags>( dependencyFlags ), memoryBarrierCount, reinterpret_cast<const VkMemoryBarrier*>( pMemoryBarriers ), bufferMemoryBarrierCount, reinterpret_cast<const VkBufferMemoryBarrier*>( pBufferMemoryBarriers ), imageMemoryBarrierCount, reinterpret_cast<const VkImageMemoryBarrier*>( pImageMemoryBarriers ) );\n 78772    }\n 78773  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 78774    template<typename Dispatch>\n 78775:   VULKAN_HPP_INLINE void CommandBuffer::pipelineBarrier( VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, VULKAN_HPP_NAMESPACE::DependencyFlags dependencyFlags, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d ) const VULKAN_HPP_NOEXCEPT\n 78776    {\n 78777:     d.vkCmdPipelineBarrier( m_commandBuffer, static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), static_cast<VkDependencyFlags>( dependencyFlags ), memoryBarriers.size() , reinterpret_cast<const VkMemoryBarrier*>( memoryBarriers.data() ), bufferMemoryBarriers.size() , reinterpret_cast<const VkBufferMemoryBarrier*>( bufferMemoryBarriers.data() ), imageMemoryBarriers.size() , reinterpret_cast<const VkImageMemoryBarrier*>( imageMemoryBarriers.data() ) );\n 78778    }\n 78779  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n .....\n 79443  \n 79444    template<typename Dispatch>\n 79445:   VULKAN_HPP_INLINE void CommandBuffer::waitEvents( uint32_t eventCount, const VULKAN_HPP_NAMESPACE::Event* pEvents, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VULKAN_HPP_NAMESPACE::MemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier* pImageMemoryBarriers, Dispatch const &d) const VULKAN_HPP_NOEXCEPT\n 79446    {\n 79447:     d.vkCmdWaitEvents( m_commandBuffer, eventCount, reinterpret_cast<const VkEvent*>( pEvents ), static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), memoryBarrierCount, reinterpret_cast<const VkMemoryBarrier*>( pMemoryBarriers ), bufferMemoryBarrierCount, reinterpret_cast<const VkBufferMemoryBarrier*>( pBufferMemoryBarriers ), imageMemoryBarrierCount, reinterpret_cast<const VkImageMemoryBarrier*>( pImageMemoryBarriers ) );\n 79448    }\n 79449  #ifndef VULKAN_HPP_DISABLE_ENHANCED_MODE\n 79450    template<typename Dispatch>\n 79451:   VULKAN_HPP_INLINE void CommandBuffer::waitEvents( ArrayProxy<const VULKAN_HPP_NAMESPACE::Event> const &events, VULKAN_HPP_NAMESPACE::PipelineStageFlags srcStageMask, VULKAN_HPP_NAMESPACE::PipelineStageFlags dstStageMask, ArrayProxy<const VULKAN_HPP_NAMESPACE::MemoryBarrier> const &memoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::BufferMemoryBarrier> const &bufferMemoryBarriers, ArrayProxy<const VULKAN_HPP_NAMESPACE::ImageMemoryBarrier> const &imageMemoryBarriers, Dispatch const &d ) const VULKAN_HPP_NOEXCEPT\n 79452    {\n 79453:     d.vkCmdWaitEvents( m_commandBuffer, events.size() , reinterpret_cast<const VkEvent*>( events.data() ), static_cast<VkPipelineStageFlags>( srcStageMask ), static_cast<VkPipelineStageFlags>( dstStageMask ), memoryBarriers.size() , reinterpret_cast<const VkMemoryBarrier*>( memoryBarriers.data() ), bufferMemoryBarriers.size() , reinterpret_cast<const VkBufferMemoryBarrier*>( bufferMemoryBarriers.data() ), imageMemoryBarriers.size() , reinterpret_cast<const VkImageMemoryBarrier*>( imageMemoryBarriers.data() ) );\n 79454    }\n 79455  #endif /*VULKAN_HPP_DISABLE_ENHANCED_MODE*/\n .....\n 87599    template <> struct StructExtends<RenderPassSampleLocationsBeginInfoEXT, RenderPassBeginInfo>{ enum { value = true }; };\n 87600    template <> struct StructExtends<RenderPassTransformBeginInfoQCOM, RenderPassBeginInfo>{ enum { value = true }; };\n 87601:   template <> struct StructExtends<SampleLocationsInfoEXT, ImageMemoryBarrier>{ enum { value = true }; };\n 87602    template <> struct StructExtends<SamplerCustomBorderColorCreateInfoEXT, SamplerCreateInfo>{ enum { value = true }; };\n 87603    template <> struct StructExtends<SamplerReductionModeCreateInfo, SamplerCreateInfo>{ enum { value = true }; };\n .....\n 87830      PFN_vkCmdNextSubpass2 vkCmdNextSubpass2 = 0;\n 87831      PFN_vkCmdNextSubpass2KHR vkCmdNextSubpass2KHR = 0;\n 87832:     PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier = 0;\n 87833      PFN_vkCmdPreprocessGeneratedCommandsNV vkCmdPreprocessGeneratedCommandsNV = 0;\n 87834      PFN_vkCmdPushConstants vkCmdPushConstants = 0;\n .....\n 88571        vkCmdNextSubpass2 = PFN_vkCmdNextSubpass2( vkGetInstanceProcAddr( instance, \"vkCmdNextSubpass2\" ) );\n 88572        vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2KHR( vkGetInstanceProcAddr( instance, \"vkCmdNextSubpass2KHR\" ) );\n 88573:       vkCmdPipelineBarrier = PFN_vkCmdPipelineBarrier( vkGetInstanceProcAddr( instance, \"vkCmdPipelineBarrier\" ) );\n 88574        vkCmdPreprocessGeneratedCommandsNV = PFN_vkCmdPreprocessGeneratedCommandsNV( vkGetInstanceProcAddr( instance, \"vkCmdPreprocessGeneratedCommandsNV\" ) );\n 88575        vkCmdPushConstants = PFN_vkCmdPushConstants( vkGetInstanceProcAddr( instance, \"vkCmdPushConstants\" ) );\n .....\n 88993        vkCmdNextSubpass2 = PFN_vkCmdNextSubpass2( vkGetDeviceProcAddr( device, \"vkCmdNextSubpass2\" ) );\n 88994        vkCmdNextSubpass2KHR = PFN_vkCmdNextSubpass2KHR( vkGetDeviceProcAddr( device, \"vkCmdNextSubpass2KHR\" ) );\n 88995:       vkCmdPipelineBarrier = PFN_vkCmdPipelineBarrier( vkGetDeviceProcAddr( device, \"vkCmdPipelineBarrier\" ) );\n 88996        vkCmdPreprocessGeneratedCommandsNV = PFN_vkCmdPreprocessGeneratedCommandsNV( vkGetDeviceProcAddr( device, \"vkCmdPreprocessGeneratedCommandsNV\" ) );\n 88997        vkCmdPushConstants = PFN_vkCmdPushConstants( vkGetDeviceProcAddr( device, \"vkCmdPushConstants\" ) );\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/include/vulkan/vulkan_core.h:\n  195      VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,\n  196      VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,\n  197:     VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,\n  198:     VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,\n  199:     VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,\n  200      VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,\n  201      VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,\n  ...\n 2000  } VkBaseOutStructure;\n 2001  \n 2002: typedef struct VkBufferMemoryBarrier {\n 2003      VkStructureType    sType;\n 2004      const void*        pNext;\n ....\n 2010      VkDeviceSize       offset;\n 2011      VkDeviceSize       size;\n 2012: } VkBufferMemoryBarrier;\n 2013  \n 2014  typedef struct VkDispatchIndirectCommand {\n ....\n 2041  } VkImageSubresourceRange;\n 2042  \n 2043: typedef struct VkImageMemoryBarrier {\n 2044      VkStructureType            sType;\n 2045      const void*                pNext;\n ....\n 2052      VkImage                    image;\n 2053      VkImageSubresourceRange    subresourceRange;\n 2054: } VkImageMemoryBarrier;\n 2055  \n 2056: typedef struct VkMemoryBarrier {\n 2057      VkStructureType    sType;\n 2058      const void*        pNext;\n 2059      VkAccessFlags      srcAccessMask;\n 2060      VkAccessFlags      dstAccessMask;\n 2061: } VkMemoryBarrier;\n 2062  \n 2063  typedef void* (VKAPI_PTR *PFN_vkAllocationFunction)(\n ....\n 3203  typedef void (VKAPI_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);\n 3204  typedef void (VKAPI_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);\n 3205: typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);\n 3206: typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);\n 3207  typedef void (VKAPI_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);\n 3208  typedef void (VKAPI_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);\n ....\n 3937      VkPipelineStageFlags                        srcStageMask,\n 3938      VkPipelineStageFlags                        dstStageMask,\n 3939:     uint32_t                                    memoryBarrierCount,\n 3940:     const VkMemoryBarrier*                      pMemoryBarriers,\n 3941:     uint32_t                                    bufferMemoryBarrierCount,\n 3942:     const VkBufferMemoryBarrier*                pBufferMemoryBarriers,\n 3943:     uint32_t                                    imageMemoryBarrierCount,\n 3944:     const VkImageMemoryBarrier*                 pImageMemoryBarriers);\n 3945  \n 3946: VKAPI_ATTR void VKAPI_CALL vkCmdPipelineBarrier(\n 3947      VkCommandBuffer                             commandBuffer,\n 3948      VkPipelineStageFlags                        srcStageMask,\n 3949      VkPipelineStageFlags                        dstStageMask,\n 3950      VkDependencyFlags                           dependencyFlags,\n 3951:     uint32_t                                    memoryBarrierCount,\n 3952:     const VkMemoryBarrier*                      pMemoryBarriers,\n 3953:     uint32_t                                    bufferMemoryBarrierCount,\n 3954:     const VkBufferMemoryBarrier*                pBufferMemoryBarriers,\n 3955:     uint32_t                                    imageMemoryBarrierCount,\n 3956:     const VkImageMemoryBarrier*                 pImageMemoryBarriers);\n 3957  \n 3958  VKAPI_ATTR void VKAPI_CALL vkCmdBeginQuery(\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/registry/validusage.json:\n 2973          {\n 2974            \"vuid\": \"VUID-vkCmdWaitEvents-srcAccessMask-02815\",\n 2975:           \"text\": \" The <code>srcAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2976          },\n 2977          {\n 2978            \"vuid\": \"VUID-vkCmdWaitEvents-dstAccessMask-02816\",\n 2979:           \"text\": \" The <code>dstAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2980          },\n 2981          {\n 2982:           \"vuid\": \"VUID-vkCmdWaitEvents-pBufferMemoryBarriers-02817\",\n 2983:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2984          },\n 2985          {\n 2986:           \"vuid\": \"VUID-vkCmdWaitEvents-pBufferMemoryBarriers-02818\",\n 2987:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2988          },\n 2989          {\n 2990:           \"vuid\": \"VUID-vkCmdWaitEvents-pImageMemoryBarriers-02819\",\n 2991:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2992          },\n 2993          {\n 2994:           \"vuid\": \"VUID-vkCmdWaitEvents-pImageMemoryBarriers-02820\",\n 2995:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 2996          },\n 2997          {\n ....\n 3005          {\n 3006            \"vuid\": \"VUID-vkCmdWaitEvents-srcQueueFamilyIndex-02803\",\n 3007:           \"text\": \" The <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members of any element of <code>pBufferMemoryBarriers</code> or <code>pImageMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be equal\"\n 3008          },\n 3009          {\n ....\n 3032          },\n 3033          {\n 3034:           \"vuid\": \"VUID-vkCmdWaitEvents-pMemoryBarriers-parameter\",\n 3035:           \"text\": \" If <code>memoryBarrierCount</code> is not <code>0</code>, <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>memoryBarrierCount</code> valid <a href=\\\"#VkMemoryBarrier\\\">VkMemoryBarrier</a> structures\"\n 3036          },\n 3037          {\n 3038:           \"vuid\": \"VUID-vkCmdWaitEvents-pBufferMemoryBarriers-parameter\",\n 3039:           \"text\": \" If <code>bufferMemoryBarrierCount</code> is not <code>0</code>, <code>pBufferMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>bufferMemoryBarrierCount</code> valid <a href=\\\"#VkBufferMemoryBarrier\\\">VkBufferMemoryBarrier</a> structures\"\n 3040          },\n 3041          {\n 3042:           \"vuid\": \"VUID-vkCmdWaitEvents-pImageMemoryBarriers-parameter\",\n 3043:           \"text\": \" If <code>imageMemoryBarrierCount</code> is not <code>0</code>, <code>pImageMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>imageMemoryBarrierCount</code> valid <a href=\\\"#VkImageMemoryBarrier\\\">VkImageMemoryBarrier</a> structures\"\n 3044          },\n 3045          {\n ....\n 3125        ]\n 3126      },\n 3127:     \"vkCmdPipelineBarrier\": {\n 3128        \"core\": [\n 3129          {\n 3130:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04090\",\n 3131            \"text\": \" If the <a href=\\\"#features-geometryShader\\\">geometry shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code>\"\n 3132          },\n 3133          {\n 3134:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04091\",\n 3135            \"text\": \" If the <a href=\\\"#features-tessellationShader\\\">tessellation shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or <code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>\"\n 3136          },\n 3137          {\n 3138:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-4098\",\n 3139            \"text\": \" Any pipeline stage included in pname:srcStageMask <strong class=\\\"purple\\\">must</strong> be supported by the capabilities of the queue family specified by the <code>queueFamilyIndex</code> member of the <a href=\\\"#VkCommandPoolCreateInfo\\\">VkCommandPoolCreateInfo</a> structure that was used to create the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from, as specified in the <a href=\\\"#synchronization-pipeline-stages-supported\\\">table of supported pipeline stages</a>\"\n 3140          },\n 3141          {\n 3142:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04090\",\n 3143            \"text\": \" If the <a href=\\\"#features-geometryShader\\\">geometry shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT</code>\"\n 3144          },\n 3145          {\n 3146:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04091\",\n 3147            \"text\": \" If the <a href=\\\"#features-tessellationShader\\\">tessellation shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT</code> or <code>VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT</code>\"\n 3148          },\n 3149          {\n 3150:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-4098\",\n 3151            \"text\": \" Any pipeline stage included in pname:dstStageMask <strong class=\\\"purple\\\">must</strong> be supported by the capabilities of the queue family specified by the <code>queueFamilyIndex</code> member of the <a href=\\\"#VkCommandPoolCreateInfo\\\">VkCommandPoolCreateInfo</a> structure that was used to create the <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from, as specified in the <a href=\\\"#synchronization-pipeline-stages-supported\\\">table of supported pipeline stages</a>\"\n 3152          },\n 3153          {\n 3154:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcAccessMask-02815\",\n 3155:           \"text\": \" The <code>srcAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3156          },\n 3157          {\n 3158:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstAccessMask-02816\",\n 3159:           \"text\": \" The <code>dstAccessMask</code> member of each element of <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> only include access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3160          },\n 3161          {\n 3162:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-02817\",\n 3163:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3164          },\n 3165          {\n 3166:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-02818\",\n 3167:           \"text\": \" For any element of <code>pBufferMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3168          },\n 3169          {\n 3170:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-02819\",\n 3171:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>srcQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>srcAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>srcStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3172          },\n 3173          {\n 3174:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-02820\",\n 3175:           \"text\": \" For any element of <code>pImageMemoryBarriers</code>, if its <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members are equal, or if its <code>dstQueueFamilyIndex</code> is the queue family index that was used to create the command pool that <code>commandBuffer</code> was allocated from, then its <code>dstAccessMask</code> member <strong class=\\\"purple\\\">must</strong> only contain access flags that are supported by one or more of the pipeline stages in <code>dstStageMask</code>, as specified in the <a href=\\\"#synchronization-access-types-supported\\\">table of supported access types</a>\"\n 3176          },\n 3177          {\n 3178:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pDependencies-02285\",\n 3179:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the render pass <strong class=\\\"purple\\\">must</strong> have been created with at least one <a href=\\\"#VkSubpassDependency\\\">VkSubpassDependency</a> instance in <code>VkRenderPassCreateInfo</code>::<code>pDependencies</code> that expresses a dependency from the current subpass to itself, with <a href=\\\"#synchronization-dependencies-scopes\\\">synchronization scopes</a> and <a href=\\\"#synchronization-dependencies-access-scopes\\\">access scopes</a> that are all supersets of the scopes defined in this command\"\n 3180          },\n 3181          {\n 3182:           \"vuid\": \"VUID-vkCmdPipelineBarrier-bufferMemoryBarrierCount-01178\",\n 3183:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, it <strong class=\\\"purple\\\">must</strong> not include any buffer memory barriers\"\n 3184          },\n 3185          {\n 3186:           \"vuid\": \"VUID-vkCmdPipelineBarrier-image-04073\",\n 3187:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the <code>image</code> member of any image memory barrier included in this command <strong class=\\\"purple\\\">must</strong> be an attachment used in the current subpass both as an input attachment, and as either a color or depth/stencil attachment\"\n 3188          },\n 3189          {\n 3190:           \"vuid\": \"VUID-vkCmdPipelineBarrier-oldLayout-01181\",\n 3191:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the <code>oldLayout</code> and <code>newLayout</code> members of any image memory barrier included in this command <strong class=\\\"purple\\\">must</strong> be equal\"\n 3192          },\n 3193          {\n 3194:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcQueueFamilyIndex-01182\",\n 3195:           \"text\": \" If fname:vkCmdPipelineBarrier is called within a render pass instance, the <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> members of any image memory barrier included in this command <strong class=\\\"purple\\\">must</strong> be equal\"\n 3196          },\n 3197          {\n 3198:           \"vuid\": \"VUID-vkCmdPipelineBarrier-commandBuffer-parameter\",\n 3199            \"text\": \" <code>commandBuffer</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkCommandBuffer\\\">VkCommandBuffer</a> handle\"\n 3200          },\n 3201          {\n 3202:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-parameter\",\n 3203            \"text\": \" <code>srcStageMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkPipelineStageFlagBits\\\">VkPipelineStageFlagBits</a> values\"\n 3204          },\n 3205          {\n 3206:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-requiredbitmask\",\n 3207            \"text\": \" <code>srcStageMask</code> <strong class=\\\"purple\\\">must</strong> not be <code>0</code>\"\n 3208          },\n 3209          {\n 3210:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-parameter\",\n 3211            \"text\": \" <code>dstStageMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkPipelineStageFlagBits\\\">VkPipelineStageFlagBits</a> values\"\n 3212          },\n 3213          {\n 3214:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-requiredbitmask\",\n 3215            \"text\": \" <code>dstStageMask</code> <strong class=\\\"purple\\\">must</strong> not be <code>0</code>\"\n 3216          },\n 3217          {\n 3218:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dependencyFlags-parameter\",\n 3219            \"text\": \" <code>dependencyFlags</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkDependencyFlagBits\\\">VkDependencyFlagBits</a> values\"\n 3220          },\n 3221          {\n 3222:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pMemoryBarriers-parameter\",\n 3223:           \"text\": \" If <code>memoryBarrierCount</code> is not <code>0</code>, <code>pMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>memoryBarrierCount</code> valid <a href=\\\"#VkMemoryBarrier\\\">VkMemoryBarrier</a> structures\"\n 3224          },\n 3225          {\n 3226:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pBufferMemoryBarriers-parameter\",\n 3227:           \"text\": \" If <code>bufferMemoryBarrierCount</code> is not <code>0</code>, <code>pBufferMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>bufferMemoryBarrierCount</code> valid <a href=\\\"#VkBufferMemoryBarrier\\\">VkBufferMemoryBarrier</a> structures\"\n 3228          },\n 3229          {\n 3230:           \"vuid\": \"VUID-vkCmdPipelineBarrier-pImageMemoryBarriers-parameter\",\n 3231:           \"text\": \" If <code>imageMemoryBarrierCount</code> is not <code>0</code>, <code>pImageMemoryBarriers</code> <strong class=\\\"purple\\\">must</strong> be a valid pointer to an array of <code>imageMemoryBarrierCount</code> valid <a href=\\\"#VkImageMemoryBarrier\\\">VkImageMemoryBarrier</a> structures\"\n 3232          },\n 3233          {\n 3234:           \"vuid\": \"VUID-vkCmdPipelineBarrier-commandBuffer-recording\",\n 3235            \"text\": \" <code>commandBuffer</code> <strong class=\\\"purple\\\">must</strong> be in the <a href=\\\"#commandbuffers-lifecycle\\\">recording state</a>\"\n 3236          },\n 3237          {\n 3238:           \"vuid\": \"VUID-vkCmdPipelineBarrier-commandBuffer-cmdpool\",\n 3239            \"text\": \" The <code>VkCommandPool</code> that <code>commandBuffer</code> was allocated from <strong class=\\\"purple\\\">must</strong> support transfer, graphics, or compute operations\"\n 3240          }\n ....\n 3242        \"(VK_EXT_conditional_rendering)\": [\n 3243          {\n 3244:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04092\",\n 3245            \"text\": \" If the <a href=\\\"#features-conditionalRendering\\\">conditional rendering</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT</code>\"\n 3246          },\n 3247          {\n 3248:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04092\",\n 3249            \"text\": \" If the <a href=\\\"#features-conditionalRendering\\\">conditional rendering</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT</code>\"\n 3250          }\n ....\n 3252        \"(VK_EXT_fragment_density_map)\": [\n 3253          {\n 3254:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04093\",\n 3255            \"text\": \" If the <a href=\\\"#features-fragmentDensityMap\\\">fragment density map</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code>\"\n 3256          },\n 3257          {\n 3258:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04093\",\n 3259            \"text\": \" If the <a href=\\\"#features-fragmentDensityMap\\\">fragment density map</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT</code>\"\n 3260          }\n ....\n 3262        \"(VK_EXT_transform_feedback)\": [\n 3263          {\n 3264:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04094\",\n 3265            \"text\": \" If the <a href=\\\"#features-transformFeedback\\\">transform feedback</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code>\"\n 3266          },\n 3267          {\n 3268:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04094\",\n 3269            \"text\": \" If the <a href=\\\"#features-transformFeedback\\\">transform feedback</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT</code>\"\n 3270          }\n ....\n 3272        \"(VK_NV_mesh_shader)\": [\n 3273          {\n 3274:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04095\",\n 3275            \"text\": \" If the <a href=\\\"#features-meshShader\\\">mesh shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code>\"\n 3276          },\n 3277          {\n 3278:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04096\",\n 3279            \"text\": \" If the <a href=\\\"#features-taskShader\\\">task shaders</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code>\"\n 3280          },\n 3281          {\n 3282:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04095\",\n 3283            \"text\": \" If the <a href=\\\"#features-meshShader\\\">mesh shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV</code>\"\n 3284          },\n 3285          {\n 3286:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04096\",\n 3287            \"text\": \" If the <a href=\\\"#features-taskShader\\\">task shaders</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV</code>\"\n 3288          }\n ....\n 3290        \"(VK_NV_shading_rate_image)\": [\n 3291          {\n 3292:           \"vuid\": \"VUID-vkCmdPipelineBarrier-srcStageMask-04097\",\n 3293            \"text\": \" If the <a href=\\\"#features-shadingRateImage\\\">shading rate image</a> feature is not enabled, pname:srcStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV</code>\"\n 3294          },\n 3295          {\n 3296:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dstStageMask-04097\",\n 3297            \"text\": \" If the <a href=\\\"#features-shadingRateImage\\\">shading rate image</a> feature is not enabled, pname:dstStageMask <strong class=\\\"purple\\\">must</strong> not contain <code>VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV</code>\"\n 3298          }\n ....\n 3300        \"(VK_VERSION_1_1,VK_KHR_multiview)\": [\n 3301          {\n 3302:           \"vuid\": \"VUID-vkCmdPipelineBarrier-dependencyFlags-01186\",\n 3303:           \"text\": \" If fname:vkCmdPipelineBarrier is called outside of a render pass instance, <code>VK_DEPENDENCY_VIEW_LOCAL_BIT</code> <strong class=\\\"purple\\\">must</strong> not be included in the dependency flags\"\n 3304          }\n 3305        ]\n 3306      },\n 3307:     \"VkMemoryBarrier\": {\n 3308        \"core\": [\n 3309          {\n 3310:           \"vuid\": \"VUID-VkMemoryBarrier-sType-sType\",\n 3311:           \"text\": \" <code>sType</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_STRUCTURE_TYPE_MEMORY_BARRIER</code>\"\n 3312          },\n 3313          {\n 3314:           \"vuid\": \"VUID-VkMemoryBarrier-pNext-pNext\",\n 3315            \"text\": \" <code>pNext</code> <strong class=\\\"purple\\\">must</strong> be <code>NULL</code>\"\n 3316          },\n 3317          {\n 3318:           \"vuid\": \"VUID-VkMemoryBarrier-srcAccessMask-parameter\",\n 3319            \"text\": \" <code>srcAccessMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkAccessFlagBits\\\">VkAccessFlagBits</a> values\"\n 3320          },\n 3321          {\n 3322:           \"vuid\": \"VUID-VkMemoryBarrier-dstAccessMask-parameter\",\n 3323            \"text\": \" <code>dstAccessMask</code> <strong class=\\\"purple\\\">must</strong> be a valid combination of <a href=\\\"#VkAccessFlagBits\\\">VkAccessFlagBits</a> values\"\n 3324          }\n 3325        ]\n 3326      },\n 3327:     \"VkBufferMemoryBarrier\": {\n 3328        \"core\": [\n 3329          {\n 3330:           \"vuid\": \"VUID-VkBufferMemoryBarrier-offset-01187\",\n 3331            \"text\": \" <code>offset</code> <strong class=\\\"purple\\\">must</strong> be less than the size of <code>buffer</code>\"\n 3332          },\n 3333          {\n 3334:           \"vuid\": \"VUID-VkBufferMemoryBarrier-size-01188\",\n 3335            \"text\": \" If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class=\\\"purple\\\">must</strong> be greater than <code>0</code>\"\n 3336          },\n 3337          {\n 3338:           \"vuid\": \"VUID-VkBufferMemoryBarrier-size-01189\",\n 3339            \"text\": \" If <code>size</code> is not equal to <code>VK_WHOLE_SIZE</code>, <code>size</code> <strong class=\\\"purple\\\">must</strong> be less than or equal to than the size of <code>buffer</code> minus <code>offset</code>\"\n 3340          },\n 3341          {\n 3342:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-01931\",\n 3343            \"text\": \" If <code>buffer</code> is non-sparse then it <strong class=\\\"purple\\\">must</strong> be bound completely and contiguously to a single <code>VkDeviceMemory</code> object\"\n 3344          },\n 3345          {\n 3346:           \"vuid\": \"VUID-VkBufferMemoryBarrier-sType-sType\",\n 3347:           \"text\": \" <code>sType</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER</code>\"\n 3348          },\n 3349          {\n 3350:           \"vuid\": \"VUID-VkBufferMemoryBarrier-pNext-pNext\",\n 3351            \"text\": \" <code>pNext</code> <strong class=\\\"purple\\\">must</strong> be <code>NULL</code>\"\n 3352          },\n 3353          {\n 3354:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-parameter\",\n 3355            \"text\": \" <code>buffer</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkBuffer\\\">VkBuffer</a> handle\"\n 3356          }\n ....\n 3358        \"!(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3359          {\n 3360:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-04086\",\n 3361            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be valid queue families\"\n 3362          },\n 3363          {\n 3364:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-01190\",\n 3365            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3366          }\n ....\n 3368        \"(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3369          {\n 3370:           \"vuid\": \"VUID-VkBufferMemoryBarrier-srcQueueFamilyIndex-04087\",\n 3371            \"text\": \" If <code>srcQueueFamilyIndex</code> is not equal to <code>dstQueueFamilyIndex</code>, at least one <strong class=\\\"purple\\\">must</strong> not be a special queue family reserved for external memory ownership transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3372          },\n 3373          {\n 3374:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-04088\",\n 3375            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, and one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> is a special queue family values reserved for external memory transfers, the other <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3376          },\n 3377          {\n 3378:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-04089\",\n 3379            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be valid queue families, or one of the special queue family values reserved for external memory transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3380          },\n 3381          {\n 3382:           \"vuid\": \"VUID-VkBufferMemoryBarrier-buffer-01191\",\n 3383            \"text\": \" If <code>buffer</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, at least one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3384          }\n 3385        ]\n 3386      },\n 3387:     \"VkImageMemoryBarrier\": {\n 3388        \"core\": [\n 3389          {\n 3390:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01486\",\n 3391            \"text\": \" <code>subresourceRange.baseMipLevel</code> <strong class=\\\"purple\\\">must</strong> be less than the <code>mipLevels</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3392          },\n 3393          {\n 3394:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01724\",\n 3395            \"text\": \" If <code>subresourceRange.levelCount</code> is not <code>VK_REMAINING_MIP_LEVELS</code>, <span class=\\\"eq\\\"><code>subresourceRange.baseMipLevel</code> &#43; <code>subresourceRange.levelCount</code></span> <strong class=\\\"purple\\\">must</strong> be less than or equal to the <code>mipLevels</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3396          },\n 3397          {\n 3398:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01488\",\n 3399            \"text\": \" <code>subresourceRange.baseArrayLayer</code> <strong class=\\\"purple\\\">must</strong> be less than the <code>arrayLayers</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3400          },\n 3401          {\n 3402:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-01725\",\n 3403            \"text\": \" If <code>subresourceRange.layerCount</code> is not <code>VK_REMAINING_ARRAY_LAYERS</code>, <span class=\\\"eq\\\"><code>subresourceRange.baseArrayLayer</code> &#43; <code>subresourceRange.layerCount</code></span> <strong class=\\\"purple\\\">must</strong> be less than or equal to the <code>arrayLayers</code> specified in <a href=\\\"#VkImageCreateInfo\\\">VkImageCreateInfo</a> when <code>image</code> was created\"\n 3404          },\n 3405          {\n 3406:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01932\",\n 3407            \"text\": \" If <code>image</code> is non-sparse then it <strong class=\\\"purple\\\">must</strong> be bound completely and contiguously to a single <code>VkDeviceMemory</code> object\"\n 3408          },\n 3409          {\n 3410:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01208\",\n 3411            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT</code> set\"\n 3412          },\n 3413          {\n 3414:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01209\",\n 3415            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3416          },\n 3417          {\n 3418:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01210\",\n 3419            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3420          },\n 3421          {\n 3422:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01211\",\n 3423            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_SAMPLED_BIT</code> or <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set\"\n 3424          },\n 3425          {\n 3426:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01212\",\n 3427            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_TRANSFER_SRC_BIT</code> set\"\n 3428          },\n 3429          {\n 3430:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01213\",\n 3431            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_TRANSFER_DST_BIT</code> set\"\n 3432          },\n 3433          {\n 3434:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01197\",\n 3435:           \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, <code>oldLayout</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or the current layout of the image subresources affected by the barrier\"\n 3436          },\n 3437          {\n 3438:           \"vuid\": \"VUID-VkImageMemoryBarrier-newLayout-01198\",\n 3439            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, <code>newLayout</code> <strong class=\\\"purple\\\">must</strong> not be <code>VK_IMAGE_LAYOUT_UNDEFINED</code> or <code>VK_IMAGE_LAYOUT_PREINITIALIZED</code>\"\n 3440          },\n 3441          {\n 3442:           \"vuid\": \"VUID-VkImageMemoryBarrier-sType-sType\",\n 3443:           \"text\": \" <code>sType</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER</code>\"\n 3444          },\n 3445          {\n 3446:           \"vuid\": \"VUID-VkImageMemoryBarrier-pNext-pNext\",\n 3447            \"text\": \" <code>pNext</code> <strong class=\\\"purple\\\">must</strong> be <code>NULL</code> or a pointer to a valid instance of <a href=\\\"#VkSampleLocationsInfoEXT\\\">VkSampleLocationsInfoEXT</a>\"\n 3448          },\n 3449          {\n 3450:           \"vuid\": \"VUID-VkImageMemoryBarrier-sType-unique\",\n 3451            \"text\": \" The <code>sType</code> value of each struct in the <code>pNext</code> chain <strong class=\\\"purple\\\">must</strong> be unique\"\n 3452          },\n 3453          {\n 3454:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-parameter\",\n 3455            \"text\": \" <code>oldLayout</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImageLayout\\\">VkImageLayout</a> value\"\n 3456          },\n 3457          {\n 3458:           \"vuid\": \"VUID-VkImageMemoryBarrier-newLayout-parameter\",\n 3459            \"text\": \" <code>newLayout</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImageLayout\\\">VkImageLayout</a> value\"\n 3460          },\n 3461          {\n 3462:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-parameter\",\n 3463            \"text\": \" <code>image</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImage\\\">VkImage</a> handle\"\n 3464          },\n 3465          {\n 3466:           \"vuid\": \"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n 3467            \"text\": \" <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> be a valid <a href=\\\"#VkImageSubresourceRange\\\">VkImageSubresourceRange</a> structure\"\n 3468          }\n ....\n 3470        \"(VK_VERSION_1_1,VK_KHR_maintenance2)\": [\n 3471          {\n 3472:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01658\",\n 3473            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3474          },\n 3475          {\n 3476:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-01659\",\n 3477            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3478          }\n ....\n 3480        \"(VK_VERSION_1_2,VK_EXT_separate_depth_stencil_layouts)\": [\n 3481          {\n 3482:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04065\",\n 3483            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with at least one of <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, or <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set\"\n 3484          },\n 3485          {\n 3486:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04066\",\n 3487            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3488          },\n 3489          {\n 3490:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04067\",\n 3491            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with at least one of <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code>, <code>VK_IMAGE_USAGE_SAMPLED_BIT</code>, or <code>VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT</code> set\"\n 3492          },\n 3493          {\n 3494:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04068\",\n 3495            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT</code> set\"\n 3496          }\n ....\n 3498        \"(VK_NV_shading_rate_image)\": [\n 3499          {\n 3500:           \"vuid\": \"VUID-VkImageMemoryBarrier-oldLayout-02088\",\n 3501            \"text\": \" If <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> define a <a href=\\\"#synchronization-queue-transfers\\\">queue family ownership transfer</a> or <code>oldLayout</code> and <code>newLayout</code> define a <a href=\\\"#synchronization-image-layout-transitions\\\">image layout transition</a>, and <code>oldLayout</code> or <code>newLayout</code> is <code>VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV</code> then <code>image</code> <strong class=\\\"purple\\\">must</strong> have been created with <code>VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV</code> set\"\n 3502          }\n ....\n 3504        \"!(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)\": [\n 3505          {\n 3506:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-02902\",\n 3507            \"text\": \" If <code>image</code> has a color format, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_IMAGE_ASPECT_COLOR_BIT</code>\"\n 3508          }\n ....\n 3510        \"(VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion)\": [\n 3511          {\n 3512:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01671\",\n 3513            \"text\": \" If <code>image</code> has a single-plane color format or is not <em>disjoint</em>, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_IMAGE_ASPECT_COLOR_BIT</code>\"\n 3514          },\n 3515          {\n 3516:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01672\",\n 3517            \"text\": \" If <code>image</code> has a multi-planar format and the image is <em>disjoint</em>, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include either at least one of <code>VK_IMAGE_ASPECT_PLANE_0_BIT</code>, <code>VK_IMAGE_ASPECT_PLANE_1_BIT</code>, and <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>; or <strong class=\\\"purple\\\">must</strong> include <code>VK_IMAGE_ASPECT_COLOR_BIT</code>\"\n 3518          },\n 3519          {\n 3520:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01673\",\n 3521            \"text\": \" If <code>image</code> has a multi-planar format with only two planes, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> not include <code>VK_IMAGE_ASPECT_PLANE_2_BIT</code>\"\n 3522          }\n ....\n 3524        \"!(VK_VERSION_1_2,VK_KHR_separate_depth_stencil_layouts)\": [\n 3525          {\n 3526:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01207\",\n 3527            \"text\": \" If <code>image</code> has a depth/stencil format with both depth and stencil components, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>\"\n 3528          }\n ....\n 3530        \"(VK_VERSION_1_2,VK_KHR_separate_depth_stencil_layouts)\": [\n 3531          {\n 3532:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-03319\",\n 3533            \"text\": \" If <code>image</code> has a depth/stencil format with both depth and stencil and the <a href=\\\"#features-separateDepthStencilLayouts\\\">separateDepthStencilLayouts</a> feature is enabled, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include either or both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>\"\n 3534          },\n 3535          {\n 3536:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-03320\",\n 3537            \"text\": \" If <code>image</code> has a depth/stencil format with both depth and stencil and the <a href=\\\"#features-separateDepthStencilLayouts\\\">separateDepthStencilLayouts</a> feature is not enabled, then the <code>aspectMask</code> member of <code>subresourceRange</code> <strong class=\\\"purple\\\">must</strong> include both <code>VK_IMAGE_ASPECT_DEPTH_BIT</code> and <code>VK_IMAGE_ASPECT_STENCIL_BIT</code>\"\n 3538          }\n ....\n 3540        \"!(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3541          {\n 3542:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-04069\",\n 3543            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be valid queue families\"\n 3544          },\n 3545          {\n 3546:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01199\",\n 3547            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3548          }\n ....\n 3550        \"(VK_VERSION_1_1,VK_KHR_external_memory)\": [\n 3551          {\n 3552:           \"vuid\": \"VUID-VkImageMemoryBarrier-srcQueueFamilyIndex-04070\",\n 3553            \"text\": \" If <code>srcQueueFamilyIndex</code> is not equal to <code>dstQueueFamilyIndex</code>, at least one <strong class=\\\"purple\\\">must</strong> not be a special queue family reserved for external memory ownership transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3554          },\n 3555          {\n 3556:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-04071\",\n 3557            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, and one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> is a special queue family values reserved for external memory transfers, the other <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3558          },\n 3559          {\n 3560:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-04072\",\n 3561            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_EXCLUSIVE</code>, and <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> are not equal, <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> both be valid queue families, or one of the special queue family values reserved for external memory transfers, as described in <a href=\\\"#synchronization-queue-transfers\\\">Queue Family Ownership Transfer</a>\"\n 3562          },\n 3563          {\n 3564:           \"vuid\": \"VUID-VkImageMemoryBarrier-image-01381\",\n 3565            \"text\": \" If <code>image</code> was created with a sharing mode of <code>VK_SHARING_MODE_CONCURRENT</code>, at least one of <code>srcQueueFamilyIndex</code> and <code>dstQueueFamilyIndex</code> <strong class=\\\"purple\\\">must</strong> be <code>VK_QUEUE_FAMILY_IGNORED</code>\"\n 3566          }\n\n/home/max/dev/Falcor/third_party/slang/external/vulkan/registry/vk.xml:\n  888              <member><type>uint32_t</type>               <name>layerCount</name></member>\n  889          </type>\n  890:         <type category=\"struct\" name=\"VkMemoryBarrier\">\n  891:             <member values=\"VK_STRUCTURE_TYPE_MEMORY_BARRIER\"><type>VkStructureType</type> <name>sType</name></member>\n  892              <member>const <type>void</type>*            <name>pNext</name></member>\n  893              <member optional=\"true\"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>\n  894              <member optional=\"true\"><type>VkAccessFlags</type>          <name>dstAccessMask</name><comment>Memory accesses from the destination of the dependency to synchronize</comment></member>\n  895          </type>\n  896:         <type category=\"struct\" name=\"VkBufferMemoryBarrier\">\n  897:             <member values=\"VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER\"><type>VkStructureType</type> <name>sType</name></member>\n  898              <member>const <type>void</type>*            <name>pNext</name></member>\n  899              <member noautovalidity=\"true\"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>\n  ...\n  905              <member><type>VkDeviceSize</type>           <name>size</name><comment>Amount of bytes to sync</comment></member>\n  906          </type>\n  907:         <type category=\"struct\" name=\"VkImageMemoryBarrier\">\n  908:             <member values=\"VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER\"><type>VkStructureType</type> <name>sType</name></member>\n  909              <member>const <type>void</type>*            <name>pNext</name></member>\n  910              <member noautovalidity=\"true\"><type>VkAccessFlags</type>          <name>srcAccessMask</name><comment>Memory accesses from the source of the dependency to synchronize</comment></member>\n  ...\n 2906              <member><type>float</type>                            <name>y</name></member>\n 2907          </type>\n 2908:         <type category=\"struct\" name=\"VkSampleLocationsInfoEXT\" structextends=\"VkImageMemoryBarrier\">\n 2909              <member values=\"VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT\"><type>VkStructureType</type> <name>sType</name></member>\n 2910              <member>const <type>void</type>*                            <name>pNext</name></member>\n ....\n 5365          <enum value=\"42\"    name=\"VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO\"/>\n 5366          <enum value=\"43\"    name=\"VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO\"/>\n 5367:         <enum value=\"44\"    name=\"VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER\"/>\n 5368:         <enum value=\"45\"    name=\"VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER\"/>\n 5369:         <enum value=\"46\"    name=\"VK_STRUCTURE_TYPE_MEMORY_BARRIER\"/>\n 5370          <enum value=\"47\"    name=\"VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO\" comment=\"Reserved for internal use by the loader, layers, and ICDs\"/>\n 5371          <enum value=\"48\"    name=\"VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO\" comment=\"Reserved for internal use by the loader, layers, and ICDs\"/>\n ....\n 7097              <param><type>VkPipelineStageFlags</type> <name>srcStageMask</name></param>\n 7098              <param><type>VkPipelineStageFlags</type> <name>dstStageMask</name></param>\n 7099:             <param optional=\"true\"><type>uint32_t</type> <name>memoryBarrierCount</name></param>\n 7100:             <param len=\"memoryBarrierCount\">const <type>VkMemoryBarrier</type>* <name>pMemoryBarriers</name></param>\n 7101:             <param optional=\"true\"><type>uint32_t</type> <name>bufferMemoryBarrierCount</name></param>\n 7102:             <param len=\"bufferMemoryBarrierCount\">const <type>VkBufferMemoryBarrier</type>* <name>pBufferMemoryBarriers</name></param>\n 7103:             <param optional=\"true\"><type>uint32_t</type> <name>imageMemoryBarrierCount</name></param>\n 7104:             <param len=\"imageMemoryBarrierCount\">const <type>VkImageMemoryBarrier</type>* <name>pImageMemoryBarriers</name></param>\n 7105          </command>\n 7106          <command queues=\"transfer,graphics,compute\" renderpass=\"both\" cmdbufferlevel=\"primary,secondary\">\n 7107:             <proto><type>void</type> <name>vkCmdPipelineBarrier</name></proto>\n 7108              <param externsync=\"true\"><type>VkCommandBuffer</type> <name>commandBuffer</name></param>\n 7109              <param><type>VkPipelineStageFlags</type> <name>srcStageMask</name></param>\n 7110              <param><type>VkPipelineStageFlags</type> <name>dstStageMask</name></param>\n 7111              <param optional=\"true\"><type>VkDependencyFlags</type> <name>dependencyFlags</name></param>\n 7112:             <param optional=\"true\"><type>uint32_t</type> <name>memoryBarrierCount</name></param>\n 7113:             <param len=\"memoryBarrierCount\">const <type>VkMemoryBarrier</type>* <name>pMemoryBarriers</name></param>\n 7114:             <param optional=\"true\"><type>uint32_t</type> <name>bufferMemoryBarrierCount</name></param>\n 7115:             <param len=\"bufferMemoryBarrierCount\">const <type>VkBufferMemoryBarrier</type>* <name>pBufferMemoryBarriers</name></param>\n 7116:             <param optional=\"true\"><type>uint32_t</type> <name>imageMemoryBarrierCount</name></param>\n 7117:             <param len=\"imageMemoryBarrierCount\">const <type>VkImageMemoryBarrier</type>* <name>pImageMemoryBarriers</name></param>\n 7118          </command>\n 7119          <command queues=\"graphics,compute\" renderpass=\"both\" cmdbufferlevel=\"primary,secondary\">\n ....\n 8899              <type name=\"VkBaseInStructure\"/>\n 8900              <type name=\"VkBaseOutStructure\"/>\n 8901:             <type name=\"VkBufferMemoryBarrier\"/>\n 8902              <type name=\"VkDispatchIndirectCommand\"/>\n 8903              <type name=\"VkDrawIndexedIndirectCommand\"/>\n 8904              <type name=\"VkDrawIndirectCommand\"/>\n 8905:             <type name=\"VkImageMemoryBarrier\"/>\n 8906:             <type name=\"VkMemoryBarrier\"/>\n 8907              <type name=\"VkObjectType\"/>\n 8908              <type name=\"VkVendorId\"/>\n ....\n 9367              <command name=\"vkCmdResetEvent\"/>\n 9368              <command name=\"vkCmdWaitEvents\"/>\n 9369:             <command name=\"vkCmdPipelineBarrier\"/>\n 9370              <command name=\"vkCmdBeginQuery\"/>\n 9371              <command name=\"vkCmdEndQuery\"/>\n\n/home/max/dev/Falcor/third_party/slang/source/slang-glslang/slang-glslang.vcxproj:\n  397      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_arithmetics.cpp\" />\n  398      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_atomics.cpp\" />\n  399:     <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_barriers.cpp\" />\n  400      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_bitwise.cpp\" />\n  401      <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_builtins.cpp\" />\n\n/home/max/dev/Falcor/third_party/slang/source/slang-glslang/slang-glslang.vcxproj.filters:\n  561        <Filter>Source Files\\spirv-tools\\val</Filter>\n  562      </ClCompile>\n  563:     <ClCompile Include=\"..\\..\\external\\spirv-tools\\source\\val\\validate_barriers.cpp\">\n  564        <Filter>Source Files\\spirv-tools\\val</Filter>\n  565      </ClCompile>\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang:\n  746  */\n  747  \n  748: // Barrier for writes to all memory spaces (HLSL SM 5.0)\n  749: __target_intrinsic(glsl, \"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\")\n  750  __target_intrinsic(cuda, \"__threadfence()\")\n  751: void AllMemoryBarrier();\n  752  \n  753: // Thread-group sync and barrier for writes to all memory spaces (HLSL SM 5.0)\n  754: __target_intrinsic(glsl, \"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\")\n  755  __target_intrinsic(cuda, \"__syncthreads()\")\n  756: void AllMemoryBarrierWithGroupSync();\n  757  \n  758  // Test if any components is non-zero (HLSL SM 1.0)\n  ...\n 1405  __generic<T : __BuiltinFloatingPointType, let N : int> T determinant(matrix<T,N,N> m);\n 1406  \n 1407: // Barrier for device memory\n 1408: __target_intrinsic(glsl, \"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\")\n 1409  __target_intrinsic(cuda, \"__threadfence()\")\n 1410: void DeviceMemoryBarrier();\n 1411  \n 1412: __target_intrinsic(glsl, \"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\")\n 1413  __target_intrinsic(glsl, \"__syncthreads()\")\n 1414: void DeviceMemoryBarrierWithGroupSync();\n 1415  \n 1416  // Vector distance\n ....\n 1772  float2 GetRenderTargetSamplePosition(int Index);\n 1773  \n 1774: // Group memory barrier\n 1775: __target_intrinsic(glsl, \"groupMemoryBarrier\")\n 1776  __target_intrinsic(cuda, \"__threadfence_block\")\n 1777: void GroupMemoryBarrier();\n 1778  \n 1779  \n 1780: __target_intrinsic(glsl, \"groupMemoryBarrier(), barrier()\")\n 1781  __target_intrinsic(cuda, \"__syncthreads()\")\n 1782: void GroupMemoryBarrierWithGroupSync();\n 1783  \n 1784  // Atomics\n ....\n 2936  // Waits until all warp lanes named in mask have executed a WaveMaskSharedSync (with the same mask)\n 2937  // before resuming execution. Guarantees memory ordering in shared memory among threads participating\n 2938: // in the barrier.\n 2939  //\n 2940: // The CUDA intrinsic says it orders *all* memory accesses, which appears to match most closely subgroupBarrier.\n 2941  //\n 2942  // TODO(JS):\n ....\n 2947  // \n 2948  // It seems this can only mean the active threads are the \"threads the program flow would lead to\". This implies a lockstep\n 2949: // \"straight SIMD\" style interpretation. That being the case this op on HLSL is just a memory barrier without any Sync.\n 2950  \n 2951  __target_intrinsic(cuda, \"__syncwarp($0)\")\n 2952  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2953  __spirv_version(1.3)\n 2954: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2955: __target_intrinsic(hlsl, \"AllMemoryBarrier()\")\n 2956: void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\n 2957  \n 2958: // On GLSL, it appears we can't use subgroupMemoryBarrierShared, because it only implies a memory ordering, it does not\n 2959: // imply convergence. For subgroupBarrier we have from the docs..\n 2960: // \"The function subgroupBarrier() enforces that all active invocations within a subgroup must execute this function before any\n 2961  // are allowed to continue their execution\"\n 2962  // TODO(JS):\n 2963  // It's not entirely clear what to do here on HLSL. \n 2964  // Reading the dxc wiki (https://github.com/Microsoft/DirectXShaderCompiler/wiki/Wave-Intrinsics), we have statements like:\n 2965: //    ... these intrinsics enable the elimination of barrier constructs when the scope of synchronization is within the width of the SIMD processor.\n 2966: //    Wave: A set of lanes executed simultaneously in the processor. No explicit barriers are required to guarantee that they execute in parallel.\n 2967: // Which seems to imply at least some memory barriers like Shared might not be needed.\n 2968  //\n 2969: // The barrier is left here though, because not only is the barrier make writes before the barrier across the wave appear to others afterwards, it's\n 2970  // also there to inform the compiler on what order reads and writes can take place. This might seem to be silly because of the 'Active' lanes\n 2971  // aspect of HLSL seems to make everything in lock step - but that's not quite so, it only has to apparently be that way as far as the programmers\n ....\n 2974  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2975  __spirv_version(1.3)\n 2976: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2977: __target_intrinsic(hlsl, \"GroupMemoryBarrier()\")\n 2978: void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\n 2979  \n 2980  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2981  __spirv_version(1.3)\n 2982: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2983: __target_intrinsic(hlsl, \"AllMemoryBarrier()\")\n 2984: void AllMemoryBarrierWithWaveSync();\n 2985  \n 2986  __glsl_extension(GL_KHR_shader_subgroup_basic)\n 2987  __spirv_version(1.3)\n 2988: __target_intrinsic(glsl, \"subgroupBarrier()\")\n 2989: __target_intrinsic(hlsl, \"GroupMemoryBarrier()\")\n 2990: void GroupMemoryBarrierWithWaveSync();\n 2991  \n 2992  // NOTE! WaveMaskBroadcastLaneAt is *NOT* standard HLSL\n\n/home/max/dev/Falcor/third_party/slang/source/slang/hlsl.meta.slang.h:\n  812  SLANG_RAW(\"*/\\n\")\n  813  SLANG_RAW(\"\\n\")\n  814: SLANG_RAW(\"// Barrier for writes to all memory spaces (HLSL SM 5.0)\\n\")\n  815: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\\\")\\n\")\n  816  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__threadfence()\\\")\\n\")\n  817: SLANG_RAW(\"void AllMemoryBarrier();\\n\")\n  818  SLANG_RAW(\"\\n\")\n  819: SLANG_RAW(\"// Thread-group sync and barrier for writes to all memory spaces (HLSL SM 5.0)\\n\")\n  820: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\\\")\\n\")\n  821  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__syncthreads()\\\")\\n\")\n  822: SLANG_RAW(\"void AllMemoryBarrierWithGroupSync();\\n\")\n  823  SLANG_RAW(\"\\n\")\n  824  SLANG_RAW(\"// Test if any components is non-zero (HLSL SM 1.0)\\n\")\n  ...\n 1471  SLANG_RAW(\"__generic<T : __BuiltinFloatingPointType, let N : int> T determinant(matrix<T,N,N> m);\\n\")\n 1472  SLANG_RAW(\"\\n\")\n 1473: SLANG_RAW(\"// Barrier for device memory\\n\")\n 1474: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer()\\\")\\n\")\n 1475  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__threadfence()\\\")\\n\")\n 1476: SLANG_RAW(\"void DeviceMemoryBarrier();\\n\")\n 1477  SLANG_RAW(\"\\n\")\n 1478: SLANG_RAW(\"__target_intrinsic(glsl, \\\"memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier()\\\")\\n\")\n 1479  SLANG_RAW(\"__target_intrinsic(glsl, \\\"__syncthreads()\\\")\\n\")\n 1480: SLANG_RAW(\"void DeviceMemoryBarrierWithGroupSync();\\n\")\n 1481  SLANG_RAW(\"\\n\")\n 1482  SLANG_RAW(\"// Vector distance\\n\")\n ....\n 1841  SLANG_RAW(\"float2 GetRenderTargetSamplePosition(int Index);\\n\")\n 1842  SLANG_RAW(\"\\n\")\n 1843: SLANG_RAW(\"// Group memory barrier\\n\")\n 1844: SLANG_RAW(\"__target_intrinsic(glsl, \\\"groupMemoryBarrier\\\")\\n\")\n 1845  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__threadfence_block\\\")\\n\")\n 1846: SLANG_RAW(\"void GroupMemoryBarrier();\\n\")\n 1847  SLANG_RAW(\"\\n\")\n 1848  SLANG_RAW(\"\\n\")\n 1849: SLANG_RAW(\"__target_intrinsic(glsl, \\\"groupMemoryBarrier(), barrier()\\\")\\n\")\n 1850  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__syncthreads()\\\")\\n\")\n 1851: SLANG_RAW(\"void GroupMemoryBarrierWithGroupSync();\\n\")\n 1852  SLANG_RAW(\"\\n\")\n 1853  SLANG_RAW(\"// Atomics\\n\")\n ....\n 3023  SLANG_RAW(\"// Waits until all warp lanes named in mask have executed a WaveMaskSharedSync (with the same mask)\\n\")\n 3024  SLANG_RAW(\"// before resuming execution. Guarantees memory ordering in shared memory among threads participating\\n\")\n 3025: SLANG_RAW(\"// in the barrier.\\n\")\n 3026  SLANG_RAW(\"//\\n\")\n 3027: SLANG_RAW(\"// The CUDA intrinsic says it orders *all* memory accesses, which appears to match most closely subgroupBarrier.\\n\")\n 3028  SLANG_RAW(\"//\\n\")\n 3029  SLANG_RAW(\"// TODO(JS):\\n\")\n ....\n 3034  SLANG_RAW(\"// \\n\")\n 3035  SLANG_RAW(\"// It seems this can only mean the active threads are the \\\"threads the program flow would lead to\\\". This implies a lockstep\\n\")\n 3036: SLANG_RAW(\"// \\\"straight SIMD\\\" style interpretation. That being the case this op on HLSL is just a memory barrier without any Sync.\\n\")\n 3037  SLANG_RAW(\"\\n\")\n 3038  SLANG_RAW(\"__target_intrinsic(cuda, \\\"__syncwarp($0)\\\")\\n\")\n 3039  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3040  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3041: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3042: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"AllMemoryBarrier()\\\")\\n\")\n 3043: SLANG_RAW(\"void AllMemoryBarrierWithWaveMaskSync(WaveMask mask);\\n\")\n 3044  SLANG_RAW(\"\\n\")\n 3045: SLANG_RAW(\"// On GLSL, it appears we can't use subgroupMemoryBarrierShared, because it only implies a memory ordering, it does not\\n\")\n 3046: SLANG_RAW(\"// imply convergence. For subgroupBarrier we have from the docs..\\n\")\n 3047: SLANG_RAW(\"// \\\"The function subgroupBarrier() enforces that all active invocations within a subgroup must execute this function before any\\n\")\n 3048  SLANG_RAW(\"// are allowed to continue their execution\\\"\\n\")\n 3049  SLANG_RAW(\"// TODO(JS):\\n\")\n 3050  SLANG_RAW(\"// It's not entirely clear what to do here on HLSL. \\n\")\n 3051  SLANG_RAW(\"// Reading the dxc wiki (https://github.com/Microsoft/DirectXShaderCompiler/wiki/Wave-Intrinsics), we have statements like:\\n\")\n 3052: SLANG_RAW(\"//    ... these intrinsics enable the elimination of barrier constructs when the scope of synchronization is within the width of the SIMD processor.\\n\")\n 3053: SLANG_RAW(\"//    Wave: A set of lanes executed simultaneously in the processor. No explicit barriers are required to guarantee that they execute in parallel.\\n\")\n 3054: SLANG_RAW(\"// Which seems to imply at least some memory barriers like Shared might not be needed.\\n\")\n 3055  SLANG_RAW(\"//\\n\")\n 3056: SLANG_RAW(\"// The barrier is left here though, because not only is the barrier make writes before the barrier across the wave appear to others afterwards, it's\\n\")\n 3057  SLANG_RAW(\"// also there to inform the compiler on what order reads and writes can take place. This might seem to be silly because of the 'Active' lanes\\n\")\n 3058  SLANG_RAW(\"// aspect of HLSL seems to make everything in lock step - but that's not quite so, it only has to apparently be that way as far as the programmers\\n\")\n ....\n 3061  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3062  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3063: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3064: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"GroupMemoryBarrier()\\\")\\n\")\n 3065: SLANG_RAW(\"void GroupMemoryBarrierWithWaveMaskSync(WaveMask mask);\\n\")\n 3066  SLANG_RAW(\"\\n\")\n 3067  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3068  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3069: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3070: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"AllMemoryBarrier()\\\")\\n\")\n 3071: SLANG_RAW(\"void AllMemoryBarrierWithWaveSync();\\n\")\n 3072  SLANG_RAW(\"\\n\")\n 3073  SLANG_RAW(\"__glsl_extension(GL_KHR_shader_subgroup_basic)\\n\")\n 3074  SLANG_RAW(\"__spirv_version(1.3)\\n\")\n 3075: SLANG_RAW(\"__target_intrinsic(glsl, \\\"subgroupBarrier()\\\")\\n\")\n 3076: SLANG_RAW(\"__target_intrinsic(hlsl, \\\"GroupMemoryBarrier()\\\")\\n\")\n 3077: SLANG_RAW(\"void GroupMemoryBarrierWithWaveSync();\\n\")\n 3078  SLANG_RAW(\"\\n\")\n 3079  SLANG_RAW(\"// NOTE! WaveMaskBroadcastLaneAt is *NOT* standard HLSL\\n\")\n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-emit-c-like.cpp:\n 2275          break;\n 2276  \n 2277:     case kIROp_GroupMemoryBarrierWithGroupSync:\n 2278:         m_writer->emit(\"GroupMemoryBarrierWithGroupSync()\");\n 2279          break;\n 2280  \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-emit-cpp.cpp:\n   30  If we can invoke a bunch of threads as a single invocation we could effectively have the ThreadShared not part of the ABI, but something\n   31  that is say allocated on the stack before the threads are kicked off. If we kick of threads individually then we would need to pass this\n   32: in as part of ABI. NOTE that it isn't right in so far as memory barriers etc couldn't work, as each thread would run to completion, but\n   33: we aren't going to worry about barriers for now. \n   34  \n   35  On 1 - there could be potentially input and outputs (perhaps in out?). On CPU I guess that's fine. \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ir-inst-defs.h:\n  468  INST(SampleGrad, sampleGrad, 4, 0)\n  469  \n  470: INST(GroupMemoryBarrierWithGroupSync, GroupMemoryBarrierWithGroupSync, 0, 0)\n  471  \n  472  // GPU_FOREACH loop of the form \n\n/home/max/dev/Falcor/third_party/slang/source/slang/slang-ir-restructure.cpp:\n  367                      // but it could lead to Bad Things if somebody were to call\n  368                      // a function in their continue clause, and that function does\n  369:                     // a compute shader barrier operation.\n  370                      //\n  371                      // A better long-term fix is to take a high-level loop like:\n  ...\n  395                      // Unlike the current code-duplication solution, `C` appears only once\n  396                      // in the output, and seems to clearly be at a \"joint point\" for control\n  397:                     // flow so that it is clear that a barrier there is valid in GLSL.\n  398                      //\n  399                      // Anyway, back our regularly scheduled programming.\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/atomics-groupshared.slang:\n   18      shared[val] = 0;\n   19  \n   20:     GroupMemoryBarrierWithGroupSync();\n   21  \n   22      uint originalSum = 0;\n   ..\n   31      originalSum += originalValue;\n   32      \n   33:     GroupMemoryBarrierWithGroupSync();\n   34  \n   35      return shared[val] ^ originalSum;\n\n/home/max/dev/Falcor/third_party/slang/tests/compute/groupshared.slang:\n   15  {\n   16  \tgA[val] = val;\n   17: \tGroupMemoryBarrierWithGroupSync();\n   18  \tval = gA[val ^ 1];\n   19  \n   ..\n   22  \n   23  \tgB[val] = val;\n   24: \tGroupMemoryBarrierWithGroupSync();\n   25  \tval = gB[val ^ 2];\n   26  */\n\n/home/max/dev/Falcor/third_party/slang/tests/cross-compile/barriers.slang:\n    1  //TEST:CROSS_COMPILE:-target spirv-assembly -entry main -stage compute\n    2  \n    3: // Confirm that all HLSL barrier operations can be used when cross-compiling.\n    4  \n    5  [numthreads(1,1,1)]\n    6  void main()\n    7  {\n    8: \tAllMemoryBarrier();\n    9: \tAllMemoryBarrierWithGroupSync();\n   10: \tDeviceMemoryBarrier();\n   11: \tDeviceMemoryBarrierWithGroupSync();\n   12: \tGroupMemoryBarrier();\n   13: \tGroupMemoryBarrierWithGroupSync();\n   14  }\n   15  \n\n/home/max/dev/Falcor/third_party/slang/tests/cross-compile/barriers.slang.expected:\n   26           4(main):           2 Function None 3\n   27                 5:             Label\n   28:                               MemoryBarrier 7 8\n   29:                               MemoryBarrier 9 8\n   30:                               MemoryBarrier 7 10\n   31:                               MemoryBarrier 7 11\n   32:                               MemoryBarrier 7 8\n   33:                               MemoryBarrier 9 8\n   34:                               MemoryBarrier 7 10\n   35:                               MemoryBarrier 7 11\n   36:                               ControlBarrier 9 9 12\n   37:                               MemoryBarrier 7 8\n   38:                               MemoryBarrier 7 10\n   39:                               MemoryBarrier 7 11\n   40:                               MemoryBarrier 7 8\n   41:                               MemoryBarrier 7 10\n   42:                               MemoryBarrier 7 11\n   43:                               ControlBarrier 9 9 12\n   44:                               MemoryBarrier 9 8\n   45:                               MemoryBarrier 9 8\n   46:                               ControlBarrier 9 9 12\n   47                                Return\n   48                                FunctionEnd\n\n/home/max/dev/Falcor/third_party/slang/tests/cross-compile/barriers.slang.glsl:\n    4  void main()\n    5  {\n    6:     (memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer());\n    7:     (memoryBarrier(), groupMemoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier());\n    8:     (memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer());\n    9:     (memoryBarrier(), memoryBarrierImage(), memoryBarrierBuffer(), barrier());\n   10:     groupMemoryBarrier();\n   11:     (groupMemoryBarrier(), barrier());\n   12  \n   13      return;\n\n/home/max/dev/Falcor/third_party/slang/tests/ir/loop.slang:\n   32      for(uint stride = 1; stride < GROUP_THREAD_COUNT; stride <<= 1)\n   33      {\n   34:         GroupMemoryBarrierWithGroupSync();\n   35  \n   36          s[groupThreadID] += s[groupThreadID - stride];\n   37      }\n   38  \n   39:     GroupMemoryBarrierWithGroupSync();\n   40  \n   41      output[dispatchThreadID] = s[0];\n\n/home/max/dev/Falcor/third_party/slang/tests/ir/loop.slang.expected:\n    8  let  %2\t: int\t= integer_constant(64)\n    9  \n   10: ir_func @_S031GroupMemoryBarrierWithGroupSyncp0pV\t: () -> void;\n   11  \n   12  ir_global_var @_SV06output\t: Ptr<RWStructuredBuffer<vector<float,4>>>;\n   ..\n   33  \n   34  block %18:\n   35: \tcall @_S031GroupMemoryBarrierWithGroupSyncp0pV()\n   36  \tlet  %19\t: Ptr<vector<float,4>>\t= getElementPtr(@_SV01s, %6)\n   37  \tlet  %20\t: vector<float,4>\t= load(%19)\n   ..\n   49  \n   50  block %13:\n   51: \tcall @_S031GroupMemoryBarrierWithGroupSyncp0pV()\n   52  \tlet  %27\t: RWStructuredBuffer<vector<float,4>>\t= load(@_SV06output)\n   53  \tlet  %28\t: Ptr<vector<float,4>>\t= bufferElementRef(%27, %5)\n\n/home/max/dev/Falcor/third_party/slang/tests/slang-extension/atomic-float-byte-address-buffer.slang:\n   38      //workBuffer.InterlockedAddF32(anotherIdx << 2, delta);\n   39      \n   40:     GroupMemoryBarrierWithGroupSync();\n   41      \n   42      if (tid < 4)\n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/render-d3d12.cpp:\n  887          // Make sure it's in the right state\n  888          {\n  889:             D3D12BarrierSubmitter submitter(m_commandList);\n  890              resourceOut.transition(finalState, submitter);\n  891          }\n  ...\n  929      // Indicate that the render target needs to be writable\n  930      {\n  931:         D3D12BarrierSubmitter submitter(m_commandList);\n  932          m_renderTargets[m_renderTargetIndex]->transition(D3D12_RESOURCE_STATE_RENDER_TARGET, submitter);\n  933      }\n  ...\n  951          D3D12Resource& renderTarget = *m_renderTargets[m_renderTargetIndex];\n  952          assert(&renderTarget != &backBuffer);\n  953:         // Barriers to wait for the render target, and the backbuffer to be in correct state\n  954          {\n  955:             D3D12BarrierSubmitter submitter(m_commandList);\n  956              renderTarget.transition(D3D12_RESOURCE_STATE_RESOLVE_SOURCE, submitter);\n  957              backBuffer.transition(D3D12_RESOURCE_STATE_RESOLVE_DEST, submitter);\n  ...\n  964      // Make the back buffer presentable\n  965      {\n  966:         D3D12BarrierSubmitter submitter(m_commandList);\n  967          backBuffer.transition(D3D12_RESOURCE_STATE_PRESENT, submitter);\n  968      }\n  ...\n 1036  \n 1037      {\n 1038:         D3D12BarrierSubmitter submitter(m_commandList);\n 1039          resource.transition(D3D12_RESOURCE_STATE_COPY_SOURCE, submitter);\n 1040      }\n ....\n 1061  \n 1062      {\n 1063:         D3D12BarrierSubmitter submitter(m_commandList);\n 1064          resource.transition(initialState, submitter);\n 1065      }\n ....\n 2245      {\n 2246          const D3D12_RESOURCE_STATES finalState = _calcResourceState(initialUsage);\n 2247:         D3D12BarrierSubmitter submitter(m_commandList);\n 2248          texture->m_resource.transition(finalState, submitter);\n 2249  \n ....\n 2644                  case MapFlavor::WriteDiscard:\n 2645                  {\n 2646:                     D3D12BarrierSubmitter submitter(m_commandList);\n 2647                      buffer->m_uploadResource.transition(D3D12_RESOURCE_STATE_GENERIC_READ, submitter);\n 2648                      buffer->m_resource.transition(D3D12_RESOURCE_STATE_COPY_DEST, submitter);\n ....\n 2680                      // Make it a source\n 2681                      {\n 2682:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2683                          resource.transition(D3D12_RESOURCE_STATE_COPY_SOURCE, submitter);\n 2684                      }\n ....\n 2687                      // Switch it back\n 2688                      {\n 2689:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2690                          resource.transition(initialState, submitter);\n 2691                      }\n ....\n 2752  \n 2753                      {\n 2754:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2755                          buffer->m_uploadResource.transition(D3D12_RESOURCE_STATE_GENERIC_READ, submitter);\n 2756                          buffer->m_resource.transition(D3D12_RESOURCE_STATE_COPY_DEST, submitter);\n ....\n 2760  \n 2761                      {\n 2762:                         D3D12BarrierSubmitter submitter(m_commandList);\n 2763                          buffer->m_resource.transition(initialState, submitter);\n 2764                      }\n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/resource-d3d12.cpp:\n    5  using namespace Slang;\n    6  \n    7: /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! D3D12BarrierSubmitter !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */\n    8  \n    9: void D3D12BarrierSubmitter::_flush()\n   10  {\n   11: \tassert(m_numBarriers > 0);\n   12  \n   13  \tif (m_commandList)\n   14  \t{\n   15: \t\tm_commandList->ResourceBarrier(UINT(m_numBarriers), m_barriers);\n   16  \t}\n   17: \tm_numBarriers = 0;\n   18  }\n   19  \n   20: D3D12_RESOURCE_BARRIER& D3D12BarrierSubmitter::_expandOne()\n   21  {\n   22  \t_flush();\n   23: \treturn m_barriers[m_numBarriers++];\n   24  }\n   25  \n   26: void D3D12BarrierSubmitter::transition(ID3D12Resource* resource, D3D12_RESOURCE_STATES prevState, D3D12_RESOURCE_STATES nextState)\n   27  {\n   28      if (nextState != prevState)\n   29      {\n   30:         D3D12_RESOURCE_BARRIER& barrier = expandOne();\n   31  \n   32:         const UINT subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;\n   33:         const D3D12_RESOURCE_BARRIER_FLAGS flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n   34  \n   35:         ::memset(&barrier, 0, sizeof(barrier));\n   36:         barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n   37:         barrier.Flags = flags;\n   38:         barrier.Transition.pResource = resource;\n   39:         barrier.Transition.StateBefore = prevState;\n   40:         barrier.Transition.StateAfter = nextState;\n   41:         barrier.Transition.Subresource = subresource;\n   42      }\n   43      else\n   ..\n   45          if (nextState == D3D12_RESOURCE_STATE_UNORDERED_ACCESS)\n   46          {\n   47:             D3D12_RESOURCE_BARRIER& barrier = expandOne();\n   48  \n   49:             ::memset(&barrier, 0, sizeof(barrier));\n   50:             barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_UAV;\n   51:             barrier.UAV.pResource = resource;\n   52          }\n   53      }\n   ..\n   61  }\n   62  \n   63: void D3D12ResourceBase::transition(D3D12_RESOURCE_STATES nextState, D3D12BarrierSubmitter& submitter)\n   64  {\n   65  \t// Transition only if there is a resource\n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/resource-d3d12.h:\n   16  namespace gfx {\n   17  \n   18: // Enables more conservative barriers - restoring the state of resources after they are used.\n   19: // Should not need to be enabled in normal builds, as the barriers should correctly sync resources\n   20: // If enabling fixes an issue it implies regular barriers are not correctly used.\n   21: #define SLANG_ENABLE_CONSERVATIVE_RESOURCE_BARRIERS 0\n   22  \n   23: struct D3D12BarrierSubmitter\n   24  {\n   25: \tenum { MAX_BARRIERS = 8 };\n   26  \n   27: \t/// Expand one space to hold a barrier\n   28: \tSLANG_FORCE_INLINE D3D12_RESOURCE_BARRIER& expandOne() { return (m_numBarriers < MAX_BARRIERS) ? m_barriers[m_numBarriers++] : _expandOne(); }\n   29: \t/// Flush barriers to command list\n   30: \tSLANG_FORCE_INLINE void flush() { if (m_numBarriers > 0) _flush(); }\n   31  \n   32          /// Transition resource from prevState to nextState\n   ..\n   34  \n   35  \t/// Ctor\n   36: \tSLANG_FORCE_INLINE D3D12BarrierSubmitter(ID3D12GraphicsCommandList* commandList) : m_numBarriers(0), m_commandList(commandList) { }\n   37  \t/// Dtor\n   38: \tSLANG_FORCE_INLINE ~D3D12BarrierSubmitter() { flush(); }\n   39  \n   40  protected:\n   41: \tD3D12_RESOURCE_BARRIER& _expandOne();\n   42  \tvoid _flush();\n   43  \n   44  \tID3D12GraphicsCommandList* m_commandList;\n   45: \tint m_numBarriers;\n   46: \tD3D12_RESOURCE_BARRIER m_barriers[MAX_BARRIERS];\n   47  };\n   48  \n   ..\n   99  {\n  100  \t\t/// Add a transition if necessary to the list\n  101: \tvoid transition(D3D12_RESOURCE_STATES nextState, D3D12BarrierSubmitter& submitter);\n  102  \t\t/// Get the current state\n  103  \tSLANG_FORCE_INLINE D3D12_RESOURCE_STATES getState() const { return m_state; }\n  ...\n  113  \n  114  \t\t/// restore previous state\n  115: #if SLANG_ENABLE_CONSERVATIVE_RESOURCE_BARRIERS\n  116: \tSLANG_FORCE_INLINE Void restore(D3D12BarrierSubmitter& submitter) { transition(m_prevState, submitter); }\n  117  #else\n  118: \tSLANG_FORCE_INLINE void restore(D3D12BarrierSubmitter& submitter) { SLANG_UNUSED(submitter) }\n  119  #endif\n  120  \n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/vulkan/render-vk.cpp:\n 1375  void VKRenderer::_transitionImageLayout(VkImage image, VkFormat format, const TextureResource::Desc& desc, VkImageLayout oldLayout, VkImageLayout newLayout)\n 1376  {\n 1377:     VkImageMemoryBarrier barrier = {};\n 1378:     barrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n 1379:     barrier.oldLayout = oldLayout;\n 1380:     barrier.newLayout = newLayout;\n 1381:     barrier.srcQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n 1382:     barrier.dstQueueFamilyIndex = VK_QUEUE_FAMILY_IGNORED;\n 1383:     barrier.image = image;\n 1384:     barrier.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n 1385:     barrier.subresourceRange.baseMipLevel = 0;\n 1386:     barrier.subresourceRange.levelCount = desc.numMipLevels;\n 1387:     barrier.subresourceRange.baseArrayLayer = 0;\n 1388:     barrier.subresourceRange.layerCount = 1;\n 1389  \n 1390      VkPipelineStageFlags sourceStage;\n ....\n 1393      if (oldLayout == VK_IMAGE_LAYOUT_UNDEFINED && newLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL)\n 1394      {\n 1395:         barrier.srcAccessMask = 0;\n 1396:         barrier.dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n 1397  \n 1398          sourceStage = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;\n ....\n 1401      else if (oldLayout == VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL && newLayout == VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL)\n 1402      {\n 1403:         barrier.srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT;\n 1404:         barrier.dstAccessMask = VK_ACCESS_SHADER_READ_BIT;\n 1405  \n 1406          sourceStage = VK_PIPELINE_STAGE_TRANSFER_BIT;\n ....\n 1415      VkCommandBuffer commandBuffer = m_deviceQueue.getCommandBuffer();\n 1416  \n 1417:     m_api.vkCmdPipelineBarrier(commandBuffer, sourceStage, destinationStage, 0, 0, nullptr, 0, nullptr, 1, &barrier);\n 1418  }\n 1419  \n\n/home/max/dev/Falcor/third_party/slang/tools/gfx/vulkan/vk-api.h:\n   83      x(vkCmdBeginRenderPass) \\\n   84      x(vkCmdEndRenderPass) \\\n   85:     x(vkCmdPipelineBarrier) \\\n   86      x(vkCmdCopyBufferToImage)\\\n   87      x(vkCmdPushConstants) \\\n\n2999 matches across 257 files\n\n\nSearching 484 files for \"mutable\"\n\n/home/max/dev/Falcor/src/Falcor/Core/API/FBO.h:\n  282      Attachment mDepthStencil;\n  283  \n  284:     mutable Desc mTempDesc;\n  285:     mutable const Desc* mpDesc = nullptr;\n  286:     mutable uint32_t mWidth  = (uint32_t)-1;\n  287:     mutable uint32_t mHeight = (uint32_t)-1;\n  288:     mutable uint32_t mDepth = (uint32_t)-1;\n  289:     mutable bool mHasDepthAttachment = false;\n  290:     mutable bool mIsLayered = false;\n  291:     mutable bool mIsZeroAttachment = false;\n  292  \n  293:     mutable ApiHandle mApiHandle = {};\n  294      void* mpPrivateData = nullptr;\n  295  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n  192          State global = State::Undefined;\n  193          std::vector<State> perSubresource;\n  194:     } mutable mState;\n  195  \n  196      void setSubresourceState(uint32_t arraySlice, uint32_t mipLevel, State newState) const;\n  ...\n  206      size_t mID;\n  207  \n  208:     mutable std::unordered_map<ResourceViewInfo, ShaderResourceView::SharedPtr, ViewInfoHashFunc> mSrvs;\n  209:     mutable std::unordered_map<ResourceViewInfo, RenderTargetView::SharedPtr, ViewInfoHashFunc> mRtvs;\n  210:     mutable std::unordered_map<ResourceViewInfo, DepthStencilView::SharedPtr, ViewInfoHashFunc> mDsvs;\n  211:     mutable std::unordered_map<ResourceViewInfo, UnorderedAccessView::SharedPtr, ViewInfoHashFunc> mUavs;\n  212  };\n  213  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRootSignature.cpp:\n   81              b.descriptorCount = range.descCount;\n   82              b.descriptorType = falcorToVkDescType(range.type);\n   83:             b.pImmutableSamplers = nullptr;\n   84              b.stageFlags = getShaderVisibility(layout.getVisibility());\n   85          \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  349      std::shared_ptr<const ProgramVersion> mpProgramVersion;\n  350      ParameterBlockReflection::SharedConstPtr mpReflector;\n  351:     mutable ParameterBlockReflection::SharedConstPtr mpSpecializedReflector;\n  352      std::vector<uint8_t> mData;\n  353  \n  ...\n  403      struct AssignedParameterBlock {\n  404          ParameterBlock::SharedPtr   pBlock;\n  405:         mutable ChangeEpoch epochOfLastObservedChange = 0;\n  406      };\n  407  \n  ...\n  427      Resource::SharedPtr getResourceSrvUavCommon(const BindLocation& bindLoc, const char* funcName) const;\n  428  \n  429:     mutable ChangeEpoch mEpochOfLastUniformDataChange = 1;\n  430:     mutable ChangeEpoch mEpochOfLastChange = 1;\n  431  \n  432      static ChangeEpoch getEpochOfLastChange(ParameterBlock* pBlock) { return pBlock->mEpochOfLastChange; }\n  ...\n  435      void checkForIndirectChanges(ParameterBlockReflection const* pReflector) const;\n  436  \n  437:     mutable uint32_t mDescriptorSetResourceDataVersion = 0;\n  438  \n  439      uint32_t getDescriptorSetIndex(const BindLocation& bindLocation);\n  ...\n  445          ConstantBufferView::SharedPtr pCBV;\n  446  \n  447:         mutable ChangeEpoch epochOfLastObservedChange = 0;\n  448      };\n  449  \n  450:     mutable UnderlyingConstantBuffer mUnderlyingConstantBuffer;\n  451  \n  452      struct DescriptorSetInfo {\n  ...\n  455      };\n  456      \n  457:     mutable std::vector<DescriptorSetInfo> mSets;\n  458  };\n  459  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.h:\n  275      DefineList mDefineList;\n  276  \n  277:     // We are doing lazy compilation, so these are mutable\n  278:     mutable bool mLinkRequired = true;\n  279:     mutable std::map<DefineList, ProgramVersion::SharedConstPtr> mProgramVersions;\n  280:     mutable ProgramVersion::SharedConstPtr mpActiveVersion;\n  281      void markDirty() { mLinkRequired = true; }\n  282  \n  ...\n  285  \n  286      using string_time_map = std::unordered_map<std::string, time_t>;\n  287:     mutable string_time_map mFileTimeMap;\n  288  \n  289      std::shared_ptr<Device> mpDevice;\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n 1509  \n 1510      slang::ShaderReflection* mpSlangReflector = nullptr;\n 1511:     mutable std::map<std::string, ReflectionType::SharedPtr> mMapNameToType;\n 1512  \n 1513      std::vector<EntryPointGroupReflection::SharedPtr> mEntryPointGroups;\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVersion.h:\n  262  \n  263          // Cached version of compiled kernels for this program version\n  264:         mutable std::unordered_map<std::string, ProgramKernels::SharedPtr> mpKernels;\n  265      };\n  266  \n\n/home/max/dev/Falcor/src/Falcor/Core/State/ComputeState.h:\n   39  \n   40  /** Compute state.\n   41:     This class contains the entire state required by a single dispatch call. It's not an immutable object - you can change it dynamically during rendering.\n   42      The recommended way to use it is to create multiple ComputeState objects (ideally, a single object per program)\n   43  */\n\n/home/max/dev/Falcor/src/Falcor/Core/State/GraphicsState.h:\n   46  \n   47  /** Pipeline state.\n   48:     This class contains the entire state required by a single draw-call. It's not an immutable object - you can change it dynamically during rendering.\n   49      The recommended way to use it is to create multiple PipelineState objects (ideally, a single object per render-pass)\n   50  */\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.h:\n  159  \n  160      // CPU resources\n  161:     mutable std::vector<PackedNode>       mNodes;                   ///< CPU-side copy of packed BVH nodes.\n  162      std::vector<uint32_t>                 mNodeIndices;             ///< Array of all node indices sorted by tree depth.\n  163      std::vector<RefitEntryInfo>           mPerDepthRefitEntryInfo;  ///< Array containing for each level the number of internal nodes as well as the corresponding offset into 'mpNodeIndicesBuffer'; the very last entry contains the same data, but for all leaf nodes instead.\n  ...\n  165      BVHStats                              mBVHStats;\n  166      bool                                  mIsValid = false;         ///< True when the BVH has been built.\n  167:     mutable bool                          mIsCpuDataValid = false;  ///< Indicates whether the CPU-side data matches the GPU buffers.\n  168  \n  169      // GPU resources\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.h:\n  205      uint32_t                                mTriangleCount = 0;     ///< Total number of triangles in all mesh lights (= mMeshLightTriangles.size()). This may include culled triangles.\n  206  \n  207:     mutable std::vector<MeshLightTriangle>  mMeshLightTriangles;    ///< List of all pre-processed mesh light triangles.\n  208:     mutable std::vector<uint32_t>           mActiveTriangleList;    ///< List of active (non-culled) emissive triangles.\n  209:     mutable MeshLightStats                  mMeshLightStats;        ///< Stats before/after pre-processing of mesh lights. Do not access this directly, use getStats() which ensures the stats are up-to-date.\n  210:     mutable bool                            mStatsValid = false;    ///< True when stats are valid.\n  211  \n  212      // GPU resources for the mesh lights and emissive triangles.\n  ...\n  217      Buffer::SharedPtr                       mpPerMeshInstanceOffset; ///< Per-mesh instance offset into emissive triangles array (Scene::getMeshInstanceCount() elements).\n  218  \n  219:     mutable Buffer::SharedPtr               mpStagingBuffer;        ///< Staging buffer used for retrieving the vertex positions, texture coordinates and light IDs from the GPU.\n  220      GpuFence::SharedPtr                     mpStagingFence;         ///< Fence used for waiting on the staging buffer being filled in.\n  221  \n  ...\n  236      ComputePass::SharedPtr                  mpFinalizeIntegration;\n  237  \n  238:     mutable CPUOutOfDateFlags               mCPUInvalidData = CPUOutOfDateFlags::None;  ///< Flags indicating which CPU data is valid.\n  239:     mutable bool                            mStagingBufferValid = true;                 ///< Flag to indicate if the contents of the staging buffer is up-to-date.\n  240  };\n  241  \n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVars.h:\n   85          Scene::SharedPtr mpScene;\n   86          uint32_t mDescHitGroupCount = 0;\n   87:         mutable ShaderTable::SharedPtr mpShaderTable;\n   88  \n   89          VarsVector mRayGenVars;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/Animation.h:\n  118          bool enableWarping;\n  119          std::vector<Keyframe> keyframes;\n  120:         mutable size_t lastKeyframeUsed = 0;\n  121:         mutable double lastUpdateTime = 0;\n  122      };\n  123  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.h:\n  273      Changes mChanges = Changes::None;\n  274  \n  275:     mutable bool mDirty = true;\n  276:     mutable bool mEnablePersistentProjMat = false;\n  277:     mutable bool mEnablePersistentViewMat = false;\n  278:     mutable glm::mat4 mPersistentProjMat;\n  279:     mutable glm::mat4 mPersistentViewMat;\n  280  \n  281      std::string mName;\n  ...\n  283  \n  284      void calculateCameraParameters() const;\n  285:     mutable CameraData mData;\n  286      CameraData mPrevData;\n  287  \n  ...\n  291          float negW;     ///< Camera frustum plane, sign of the coordinates\n  292          float3 sign;    ///< Camera frustum plane position\n  293:     } mutable mFrustumPlanes[6];\n  294  \n  295      struct\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/Material.h:\n  369      MaterialResources mResources;\n  370      bool mOcclusionMapEnabled = false;\n  371:     mutable UpdateFlags mUpdates = UpdateFlags::None;\n  372      static UpdateFlags sGlobalUpdates;\n  373  \n\n52 matches across 15 files\n\n\nSearching 484 files for \"mutating\"\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollectionShared.slang:\n   97  \n   98  #ifndef HOST_CODE\n   99:     [mutating] void pack(const EmissiveTriangle tri)\n  100      {\n  101          posAndTexCoords[0].xyz = tri.posW[0];\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n  527          \\param[in] sd Shading data.\n  528      */\n  529:     [mutating] void setup(const ShadingData sd)\n  530      {\n  531          // Setup lobes.\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/InteriorList.slang:\n  146          \\param[in] entering True if material is entered, false if material is left.\n  147      */\n  148:     [mutating] void handleIntersection(uint materialID, uint nestedPriority, bool entering)\n  149      {\n  150          for (uint slotIndex = 0; slotIndex < INTERIOR_LIST_SLOT_COUNT; ++slotIndex)\n  ...\n  172      /** Sort the interior list by priority.\n  173      */\n  174:     [mutating] void sortSlots()\n  175      {\n  176  #define CSWAP(_a, _b)               \\\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/InteriorListHelpers.slang:\n   42          \\param[in] maxT Max ray distance.\n   43      */\n   44:     [mutating]\n   45      void init(InteriorList interiorList, float maxT)\n   46      {\n   ..\n   57          \\return Returns true if this is a false intersection.\n   58      */\n   59:     [mutating]\n   60      bool handleAnyHit(uint materialID, float3 faceNormalW)\n   61      {\n   ..\n   78          false intersection that are further away than the closest hit.\n   79      */\n   80:     [mutating]\n   81      void handleClosestHit()\n   82      {\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathData.slang:\n   91      bool isShadowRayOccluded(uint i) { return (flags & ((uint)PathFlags::shadowRay << i)) == 0; }\n   92  \n   93:     [mutating] void clearTransmission() { flags &= ~(uint(PathFlags::transmission)); }\n   94:     [mutating] void clearScatterRay() { flags &= ~(uint(PathFlags::scatterRay) | uint(PathFlags::scatterHit)); }\n   95:     [mutating] void clearShadowRay(uint i) { flags &= ~(uint(PathFlags::shadowRay) << i); }\n   96:     [mutating] void clearShadowRays() { flags &= ~(uint(PathFlags::anyShadowRays)); }\n   97  \n   98:     [mutating] void setTransmission() { flags |= uint(PathFlags::transmission); }\n   99  };\n  100  \n\n/home/max/dev/Falcor/src/Falcor/Scene/HitInfo.slang:\n   75          \\return True if the hit information is valid.\n   76      */\n   77:     [mutating] bool decode(uint2 packed)\n   78      {\n   79          meshInstanceID = packed.x >> (HIT_TRIANGLE_INDEX_BITS);\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneTypes.slang:\n  148  \n  149  #else // !HOST_CODE\n  150:     [mutating] void pack(const StaticVertexData v)\n  151      {\n  152          position = v.position;\n\n/home/max/dev/Falcor/src/Falcor/Scene/ShadingData.slang:\n   72      float   eta;                    ///< Relative index of refraction (incident IoR / transmissive IoR).\n   73  \n   74:     [mutating] void setActiveLobes(uint lobes) { activeLobes = lobes; }\n   75  \n   76      // Utility functions\n\n/home/max/dev/Falcor/src/Falcor/Utils/HostDeviceShared.slangh:\n   89  *******************************************************************/\n   90  #define inline\n   91: #define SETTER_DECL [mutating]\n   92  #define BEGIN_NAMESPACE_FALCOR\n   93  #define END_NAMESPACE_FALCOR\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/AABB.slang:\n   37      /** Set box to single point.\n   38      */\n   39:     [mutating] void set(float3 p)\n   40      {\n   41          minPoint = p;\n   ..\n   46          Note if min > max in any component the box is invalid.\n   47      */\n   48:     [mutating] void set(float3 _min, float3 _max)\n   49      {\n   50          minPoint = _min;\n   ..\n   54      /** Invalidates the box.\n   55      */\n   56:     [mutating] void invalidate()\n   57      {\n   58          minPoint = FLT_MAX;\n   ..\n   69      /** Grows the box to include the point p.\n   70      */\n   71:     [mutating] void include(float3 p)\n   72      {\n   73          minPoint = min(minPoint, p);\n   ..\n   77      /** Grows the box to include another box.\n   78      */\n   79:     [mutating] void include(AABB b)\n   80      {\n   81          minPoint = min(minPoint, b.minPoint);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Sampling/SampleGeneratorInterface.slang:\n   33      /** Returns the next sample value. This function updates the state.\n   34      */\n   35:     [mutating] uint next();\n   36  };\n   37  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Sampling/TinyUniformSampleGenerator.slang:\n   54      /** Returns the next sample value. This function updates the state.\n   55      */\n   56:     [mutating] uint next()\n   57      {\n   58          return nextRandom(rng);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Sampling/UniformSampleGenerator.slang:\n   65      /** Returns the next sample value. This function updates the state.\n   66      */\n   67:     [mutating] uint next()\n   68      {\n   69          return nextRandom(rng);\n\n24 matches across 13 files\n\n\nSearching 164 files for \"SV_TARGET1\"\n\n/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang:\n   52  {\n   53      float4 color : SV_TARGET0;\n   54:     float4 normal : SV_TARGET1;\n   55  #ifdef _OUTPUT_MOTION_VECTORS\n   56      float2 motion : SV_TARGET2;\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang:\n   50  {\n   51      float4 posW             : SV_TARGET0;\n   52:     float4 normW            : SV_TARGET1;\n   53      float4 tangentW         : SV_TARGET2;\n   54      float4 texC             : SV_TARGET3;\n\n/home/max/dev/Falcor/src/RenderPasses/SVGFPass/SVGFReproject.ps.slang:\n  196  {\n  197      float4 OutIllumination  : SV_TARGET0;\n  198:     float2 OutMoments       : SV_TARGET1;\n  199      float  OutHistoryLength : SV_TARGET2;\n  200  };\n\n/home/max/dev/Falcor/src/RenderPasses/TexturesResolvePass/TexturesResolvePass.ps.slang:\n   32  \n   33  struct PsOut {\n   34:     float4 debugColor   : SV_TARGET1;\n   35  };\n   36  \n\n4 matches across 4 files\n\n\nSearching 164 files for \"RWStructuredBuffer\"\n\n/home/max/dev/Falcor/src/RenderPasses/BSDFViewer/BSDFViewer.cs.slang:\n   47  \n   48  RWTexture2D<float4> gOutput;\n   49: RWStructuredBuffer<PixelData> gPixelData;\n   50  \n   51  static const float3 kGroundPlaneColor = float3(0.05f);\n\n/home/max/dev/Falcor/src/RenderPasses/PixelInspectorPass/PixelInspector.cs.slang:\n   65  Texture2D<uint4>  gVisBuffer;\n   66  \n   67: RWStructuredBuffer<PixelData> gPixelDataBuffer;\n   68  \n   69  /** Load material parameters.\n\n/home/max/dev/Falcor/src/RenderPasses/TexturesResolvePass/TexturesResolvePass.ps.slang:\n   14  \n   15  RWByteAddressBuffer resolvedPagesBuff; // all virtual pages needed buffer, 0 means unused page\n   16: RWStructuredBuffer<uint> gTestData;\n   17  //RWByteAddressBuffer resolvedPagesBitsetBuff; // all virtual pages needed buffer, unset bits means unused page\n   18  \n\n3 matches across 3 files\n\n\nSearching 484 files for \"prepareForDispatch\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/ComputeContext.h:\n   82   protected:\n   83      ComputeContext(std::shared_ptr<Device> pDevice, LowLevelContextData::CommandQueueType type, CommandQueueHandle queue);\n   84:     bool prepareForDispatch(ComputeState* pState, ComputeVars* pVars);\n   85      bool applyComputeVars(ComputeVars* pVars, RootSignature* pRootSignature);\n   86  \n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12ComputeContext.cpp:\n   80      }\n   81  \n   82:     bool ComputeContext::prepareForDispatch(ComputeState* pState, ComputeVars* pVars)\n   83      {\n   84          assert(pState);\n   ..\n  110          }\n  111  \n  112:         if (prepareForDispatch(pState, pVars) == false) return;\n  113          mpLowLevelData->getCommandList()->Dispatch(dispatchSize.x, dispatchSize.y, dispatchSize.z);\n  114      }\n  ...\n  156      void ComputeContext::dispatchIndirect(ComputeState* pState, ComputeVars* pVars, const Buffer* pArgBuffer, uint64_t argBufferOffset)\n  157      {\n  158:         if (prepareForDispatch(pState, pVars) == false) return;\n  159          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  160          mpLowLevelData->getCommandList()->ExecuteIndirect(sApiData.pDispatchCommandSig, 1, pArgBuffer->getApiHandle(), argBufferOffset, nullptr, 0);\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n   45      ComputeContext::~ComputeContext() = default;\n   46  \n   47:     bool ComputeContext::prepareForDispatch(ComputeState* pState, ComputeVars* pVars) {\n   48          assert(pState);\n   49          assert(pVars);\n   ..\n  139          }\n  140  \n  141:         if (prepareForDispatch(pState, pVars) == false) {\n  142:             logError(\"ComputeContext::dispatch(...) - prepareForDispatch(...) call failed !!! Skipping.\");\n  143              return;\n  144          }\n  ...\n  151          assert(pArgBuffer);\n  152  \n  153:         if (prepareForDispatch(pState, pVars) == false) {\n  154:             logError(\"ComputeContext::dispatch(...) - prepareForDispatch(...) call failed !!! Skipping.\");\n  155              return;\n  156          }\n\n9 matches across 3 files\n\n\nSearching 484 files for \"setResourceSrvUavCommon resource id\"\n\n/home/max/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  549  \n  550  bool ParameterBlock::setResourceSrvUavCommon(const BindLocation& bindLoc, const Resource::SharedPtr& pResource, const char* funcName) {\n  551:     if(pResource) LOG_DBG(\"setResourceSrvUavCommon resource id: %zu\", pResource->id());\n  552  \n  553      size_t flatIndex = getFlatIndex(bindLoc);\n\n1 match in 1 file\n\n\nSearching 484 files for \"Invalidating resource views\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/Resource.cpp:\n   85  \n   86  void Resource::invalidateViews() const {\n   87:     logInfo(\"Invalidating resource views\");\n   88      mSrvs.clear();\n   89      mUavs.clear();\n\n1 match in 1 file\n\n\nSearching 484 files for \"createSparseTextureFromFile\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/SparseResourceManager.cpp:\n  194  }\n  195  \n  196: Texture::SharedPtr SparseResourceManager::createSparseTextureFromFile(std::shared_ptr<Device> pDevice, const std::string& filename, bool generateMipLevels, bool loadAsSrgb, Texture::BindFlags bindFlags, bool compress) {\n  197      assert(mInitialized);\n  198      assert(mpDevice == pDevice);\n\n/home/max/dev/Lava/src/Falcor/Core/API/SparseResourceManager.h:\n   44   public:\n   45      Texture::SharedPtr createTextureFromFile(std::shared_ptr<Device> pDevice, const std::string& filename, bool generateMipLevels, bool loadAsSrgb, Texture::BindFlags bindFlags = Texture::BindFlags::ShaderResource, bool compress = true);\n   46:     Texture::SharedPtr createSparseTextureFromFile(std::shared_ptr<Device> pDevice, const std::string& filename, bool generateMipLevels, bool loadAsSrgb, Texture::BindFlags bindFlags = Texture::BindFlags::ShaderResource, bool compress = true);\n   47  \n   48      const VirtualTexturePage::SharedPtr addTexturePage(const Texture::SharedPtr pTexture, uint32_t index, int3 offset, uint3 extent, const uint64_t size, const uint32_t mipLevel, uint32_t layer);\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/Material.cpp:\n  271      std::string fullpath;\n  272      if (findFileInDataDirectories(filename, fullpath)) {\n  273:         auto pTexture = SparseResourceManager::instance().createSparseTextureFromFile(mpDevice, fullpath, true, useSrgb && isSrgbTextureRequired(slot));\n  274          if (pTexture) {\n  275              setTexture(slot, pTexture);\n\n3 matches across 3 files\n\n\nSearching 484 files for \"getCSO done\"\n\n/home/max/dev/Lava/src/Falcor/Core/State/ComputeState.cpp:\n   61  \n   62          _StateGraph::CompareFunc cmpFunc = [&desc = mDesc](ComputeStateObject::SharedPtr pCso) -> bool {\n   63:             LOG_DBG(\"getCSO done 1\");\n   64              return pCso && (desc == pCso->getDesc());\n   65          };\n   ..\n   72          }\n   73      }\n   74:     LOG_DBG(\"getCSO done 2\");\n   75      return pCso;\n   76  }\n\n2 matches in 1 file\n\n\nSearching 484 files for \"specialization key\"\n\n/home/max/dev/Lava/src/Falcor/Core/Program/ProgramVersion.cpp:\n  173          }\n  174  \n  175:         LOG_DBG(\"ProgramVersion::getKernels specialization key: %s\", specializationKey.c_str());\n  176          auto start = std::chrono::high_resolution_clock::now();\n  177  \n\n1 match in 1 file\n\n\nSearching 484 files for \"is missing the element texture\"\n\n0 matches\n\nSearching 484 files for \"Can't generate tangent space\"\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.cpp:\n   52          if (!mesh.normals.pData || !mesh.positions.pData || !mesh.texCrds.pData || !mesh.pIndices)\n   53          {\n   54:             logWarning(\"Can't generate tangent space. The mesh '\" + mesh.name + \"' doesn't have positions/normals/texCrd/indices.\");\n   55              return {};\n   56          }\n\n1 match in 1 file\n\n\nSearching 484 files for \"createViewCommon image id\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  172      switch (pResource->getApiHandle().getType()) {\n  173          case VkResourceType::Image: {\n  174:             LOG_WARN(\"createViewCommon image id %zu\", pSharedPtr->id());\n  175              VkImageViewCreateInfo info = initializeImageViewInfo((const Texture*)pResource, mostDetailedMip, mipCount, firstArraySlice, arraySize);\n  176              VkImageView imageView;\n\n1 match in 1 file\n\n\nSearching 484 files for \"Tile level\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  381                                  mPages.push_back(pPage);\n  382  \n  383:                                 LOG_WARN(\"Tile level %u size %u %u\", mipLevel, extent.width, extent.height);\n  384  \n  385                                  pageIndex++;\n\n1 match in 1 file\n\n\nSearching 484 files for \"Create texture\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/FBO.cpp:\n  116          Texture::SharedPtr createTexture2D(std::shared_ptr<Device> pDevice, uint32_t w, uint32_t h, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize, uint32_t mipLevels, Texture::BindFlags flags) {\n  117              if (format == ResourceFormat::Unknown) {\n  118:                 logError(\"Can't create Texture2D with an unknown resource format\");\n  119                  return nullptr;\n  120              }\n\n/home/max/dev/Lava/src/Falcor/Core/API/SparseResourceManager.cpp:\n   66                  mInitialized = true;\n   67              } else {\n   68:                 LOG_ERR(\"Unable to create texture cache directory %s\", initDesc.cacheDir.c_str());\n   69                  return false;\n   70              }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Texture.cpp:\n  124      : Resource(device, type, bindFlags, 0), mWidth(width), mHeight(height), mDepth(depth), mMipLevels(mipLevels), mSampleCount(sampleCount), mArraySize(arraySize), mFormat(format) {\n  125      \n  126:     LOG_DBG(\"Create texture %zu width %u height %u format %s bindFlags %s\", id(), width, height, to_string(format).c_str(),to_string(bindFlags).c_str());\n  127  \n  128      assert(width > 0 && height > 0 && depth > 0);\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  243          if (VK_FAILED(result)) {\n  244              mImage = VK_NULL_HANDLE;\n  245:             throw std::runtime_error(\"Failed to create texture.\");\n  246          }\n  247  \n\n4 matches across 4 files\n\n\nSearching 470 files for \"Adding mesh\"\n\n/home/max/dev/Lava/src/lava_lib/scene_builder.cpp:\n   98  \n   99  uint32_t SceneBuilder::addMesh(const ika::bgeo::Bgeo& bgeo, const std::string& name) {\n  100:     LLOG_DBG << \"adding mesh from bgeo\";\n  101  \n  102      Mesh mesh;\n\n1 match in 1 file\n\n\nSearching 484 files for \"Adding mesh\"\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.cpp:\n  229  \n  230  uint32_t SceneBuilder::addMesh(const Mesh& meshDesc) {\n  231:     logInfo(\"Adding mesh '\" + meshDesc.name + \"'\");\n  232  \n  233      // Copy the mesh desc so we can update it. The caller retains the ownership of the data.\n\n1 match in 1 file\n\n\nSearching 484 files for \"Tile level\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  379                                  mPages.push_back(pPage);\n  380  \n  381:                                 LOG_DBG(\"Tile level %u size %u %u\", mipLevel, extent.width, extent.height);\n  382  \n  383                                  pageIndex++;\n\n1 match in 1 file\n\n\nSearching 484 files for \"tangentW\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightHelpers.slang:\n  104      // Setup world space normal.\n  105      // TODO: Should use light.dirW.\n  106:     float3 tangentW = mul(float4(1.f, 0.f, 0.f, 0.f), light.transMat).xyz;\n  107:     float3 bitangentW = mul(float4(0.f, 1.f, 0.f, 0.f), light.transMat).xyz;\n  108      // TODO: normalW is not correctly oriented for mesh instances that have flipped triangle winding.\n  109:     ls.normalW = normalize(cross(tangentW, bitangentW));\n  110  \n  111      return finalizeAreaLightSample(shadingPosW, light, ls);\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.cpp:\n   42              { \"posW\",           \"gWorldPosition\",             \"World-space position (xyz) and foreground flag (w)\"       },\n   43              { \"normalW\",        \"gWorldShadingNormal\",        \"World-space shading normal (xyz)\"                         },\n   44:             { \"bitangentW\",     \"gWorldShadingBitangent\",     \"World-space shading bitangent (xyz)\", true /* optional */ },\n   45              { \"faceNormalW\",    \"gWorldFaceNormal\",           \"Face normal in world space (xyz)\",                        },\n   46              { kViewDirInput,    \"gWorldView\",                 \"World-space view direction (xyz)\", true /* optional */    },\n\n/home/max/dev/Lava/src/Falcor/Scene/Raster.slang:\n   58  {\n   59      INTERPOLATION_MODE float3 normalW    : NORMAL;\n   60:     INTERPOLATION_MODE float4 tangentW   : TANGENT;\n   61      INTERPOLATION_MODE float2 texC       : TEXCRD;\n   62      INTERPOLATION_MODE float3 posW       : POSW;\n   ..\n   85      vOut.normalW = mul(vIn.unpack().normal, gScene.getInverseTransposeWorldMatrix(vIn.meshInstanceID));\n   86      float4 tangent = vIn.unpack().tangent;\n   87:     vOut.tangentW = float4(mul(tangent.xyz, (float3x3)gScene.getWorldMatrix(vIn.meshInstanceID)), tangent.w);\n   88  \n   89      float4 prevPosW = mul(float4(vIn.prevPos, 1.f), gScene.getPrevWorldMatrix(vIn.meshInstanceID));\n   ..\n  106      v.faceNormalW = faceNormalW;\n  107      // Handle invalid tangents gracefully (avoid NaN from normalization).\n  108:     v.tangentW.xyz = vsOut.tangentW.w != 0.f ? normalize(vsOut.tangentW.xyz) : float3(0, 0, 0);\n  109:     v.tangentW.w = sign(vsOut.tangentW.w); // Preserve zero to indicate invalid tangent.\n  110      return v;\n  111  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.slang:\n  304          v.normalW += vertices[2].normal * barycentrics[2];\n  305  \n  306:         v.tangentW += vertices[0].tangent * barycentrics[0];\n  307:         v.tangentW += vertices[1].tangent * barycentrics[1];\n  308:         v.tangentW += vertices[2].tangent * barycentrics[2];\n  309:         v.tangentW.w = sign(v.tangentW.w); // Preserve zero to indicate invalid tangent.\n  310  \n  311          v.texC += vertices[0].texCrd * barycentrics[0];\n  ...\n  321          v.normalW = mul(v.normalW, worldInvTransposeMat);\n  322          v.faceNormalW = mul(v.faceNormalW, worldInvTransposeMat);\n  323:         v.tangentW.xyz = mul(v.tangentW.xyz, (float3x3)worldMat);\n  324  \n  325          v.normalW = normalize(v.normalW);\n  326          v.faceNormalW = normalize(v.faceNormalW);\n  327          // Handle invalid tangents gracefully (avoid NaN from normalization).\n  328:         v.tangentW.xyz = v.tangentW.w != 0.f ? normalize(v.tangentW.xyz) : float3(0, 0, 0);\n  329          return v;\n  330      }\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneTypes.slang:\n  202      float3 posW;            ///< Position in world space.\n  203      float3 normalW;         ///< Shading normal in world space (normalized).\n  204:     float4 tangentW;        ///< Shading tangent in world space (normalized). The last component is guaranteed to be +-1.0 or zero if tangents are missing.\n  205      float2 texC;            ///< Texture coordinate.\n  206      float3 faceNormalW;     ///< Face normal in world space (normalized).\n\n/home/max/dev/Lava/src/Falcor/Scene/Shading.slang:\n   60      texture level of detail, and must implement the `ITextureSampler` interface.\n   61  */\n   62: void applyNormalMap<L:ITextureSampler>(MaterialData md, MaterialResources mr, inout ShadingData sd, float4 tangentW, L lod)\n   63  {\n   64      uint mapType = EXTRACT_NORMAL_MAP_TYPE(md.flags);\n   ..\n   80      // Apply the transformation.\n   81      sd.N = normalize(sd.T * mapN.x + sd.B * mapN.y + sd.N * mapN.z);\n   82:     sd.T = normalize(tangentW.xyz - sd.N * dot(tangentW.xyz, sd.N));\n   83:     sd.B = cross(sd.N, sd.T) * tangentW.w;\n   84  }\n   85  \n   ..\n  164  \n  165      // Check that tangent exists, otherwise leave the vectors at zero to avoid NaNs.\n  166:     const bool validTangentSpace = v.tangentW.w != 0.f;\n  167      if (validTangentSpace)\n  168      {\n  169:         sd.T = normalize(v.tangentW.xyz - sd.N * dot(v.tangentW.xyz, sd.N));\n  170:         sd.B = cross(sd.N, sd.T) * v.tangentW.w;\n  171      }\n  172  \n  ...\n  222      }\n  223  \n  224:     if (useNormalMap && validTangentSpace) applyNormalMap(md, mr, sd, v.tangentW, lod);\n  225      sd.NdotV = dot(sd.N, sd.V);\n  226  \n\n32 matches across 6 files\n\n\nSearching 484 files for \"PYBIND_MODULE\"\n\n0 matches\n\nSearching 484 files for \"StaticVertexData\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang:\n  172      \\return Triangle LOD value for ray cone.\n  173  */\n  174: float computeRayConeTriangleLODValue(StaticVertexData triangleVertices[3], uint meshInstanceID, float3x3 worldMat)\n  175  {\n  176      float2 txcoords[3];\n  ...\n  520      \\param[out] txcoords Texture coordinates.\n  521  */\n  522: void prepareVerticesForRayDiffs(float3 rayDir, StaticVertexData vertices[3], float4x4 worldMat, float3x3 worldInvTransposeMat, float3 barycentrics,\n  523      out float3 edge01, out float3 edge02, out float3 normals[3], out float3 unnormalizedN, out float2 txcoords[3])\n  524  {\n  ...\n  549  /** Computes ray differentials parameters at surface hit point.\n  550  */\n  551: void prepareRayDiffAtHitPoint(VertexData v, StaticVertexData triangleVertices[3], float3 barycentrics, float3 rayDir, float hitT, float4x4 worldMat, float3x3 worldInvTransposeMat,\n  552      RayDiff rayDiff, out float2 dUVdx, out float2 dUVdy)\n  553  {\n  ...\n  576      \\param[out] dUVdy The differential of the texture coordinates in pixel coordinate y.\n  577  */\n  578: void reflectRayDiffUsingVertexData(VertexData v, StaticVertexData triangleVertices[3], float3 barycentrics, float3 rayDir, float4x4 worldMat, float3x3 worldInvTransposeMat,\n  579      inout RayDiff rayDiff, out float2 dUVdx, out float2 dUVdy)\n  580  {\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/AnimationController.cpp:\n   38  }  // namespace\n   39  \n   40: AnimationController::AnimationController(Scene* pScene, const StaticVertexVector& staticVertexData, const DynamicVertexVector& dynamicVertexData)\n   41      : mpScene(pScene)\n   42      , mLocalMatrices(pScene->mSceneGraph.size())\n   ..\n   55      mpInvTransposeWorldMatricesBuffer = Buffer::createStructured(mpDevice, sizeof(float4), float4Count, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n   56      mpInvTransposeWorldMatricesBuffer->setName(\"AnimationController::mpInvTransposeWorldMatricesBuffer\");\n   57:     createSkinningPass(staticVertexData, dynamicVertexData);\n   58  }\n   59  \n   60: AnimationController::UniquePtr AnimationController::create(Scene* pScene, const StaticVertexVector& staticVertexData, const DynamicVertexVector& dynamicVertexData) {\n   61:     return UniquePtr(new AnimationController(pScene, staticVertexData, dynamicVertexData));\n   62  }\n   63  \n   ..\n  145  }\n  146  \n  147: void AnimationController::createSkinningPass(const std::vector<PackedStaticVertexData>& staticVertexData, const std::vector<DynamicVertexData>& dynamicVertexData) {\n  148      // We always copy the static data, to initialize the non-skinned vertices\n  149      const Buffer::SharedPtr& pVB = mpScene->mpVao->getVertexBuffer(Scene::kStaticDataBufferIndex);\n  150:     assert(pVB->getSize() == staticVertexData.size() * sizeof(staticVertexData[0]));\n  151:     pVB->setBlob(staticVertexData.data(), 0, pVB->getSize());\n  152  \n  153      // Initialize the previous positions for non-skinned vertices.\n  154:     std::vector<PrevVertexData> prevVertexData(staticVertexData.size());\n  155:     for (size_t i = 0; i < staticVertexData.size(); i++) {\n  156:         prevVertexData[i].position = staticVertexData[i].position;\n  157      }\n  158      const Buffer::SharedPtr& pPrevVB = mpScene->mpVao->getVertexBuffer(Scene::kPrevVertexBufferIndex);\n  ...\n  177          };\n  178  \n  179:         createBuffer(\"staticData\", staticVertexData);\n  180          createBuffer(\"dynamicData\", dynamicVertexData);\n  181  \n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/AnimationController.h:\n   61      ~AnimationController() = default;\n   62  \n   63:     using StaticVertexVector = std::vector<PackedStaticVertexData>;\n   64      using DynamicVertexVector = std::vector<DynamicVertexData>;\n   65  \n   66      /** Create a new object\n   67      */\n   68:     static UniquePtr create(Scene* pScene, const StaticVertexVector& staticVertexData, const DynamicVertexVector& dynamicVertexData);\n   69  \n   70      /** Add an animation\n   ..\n   99   private:\n  100      friend class SceneBuilder;\n  101:     AnimationController(Scene* pScene, const StaticVertexVector& staticVertexData, const DynamicVertexVector& dynamicVertexData);\n  102  \n  103      void bindBuffers();\n  ...\n  126      std::vector<glm::mat4> mInvTransposeSkinningMatrices;\n  127      uint32_t mSkinningDispatchSize = 0;\n  128:     void createSkinningPass(const std::vector<PackedStaticVertexData>& staticVertexData, const std::vector<DynamicVertexData>& dynamicVertexData);\n  129      void executeSkinningPass(RenderContext* pContext);\n  130  \n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/Skinning.slang:\n   30  struct SkinningData\n   31  {\n   32:     StructuredBuffer<PackedStaticVertexData> staticData;\n   33      StructuredBuffer<DynamicVertexData> dynamicData;\n   34:     RWStructuredBuffer<PackedStaticVertexData> skinnedVertices;\n   35      RWStructuredBuffer<PrevVertexData> prevSkinnedVertices;\n   36      StructuredBuffer<float4> boneMatrices;\n   ..\n  106      }\n  107  \n  108:     StaticVertexData getStaticVertexData(uint vertexId)\n  109      {\n  110          return staticData[getStaticVertexID(vertexId)].unpack();\n  111      }\n  112  \n  113:     void storeSkinnedVertexData(uint vertexId, StaticVertexData data, PrevVertexData prevData)\n  114      {\n  115          gData.skinnedVertices[getStaticVertexID(vertexId)].pack(data);\n  ...\n  139  \n  140      // Blend the vertices\n  141:     StaticVertexData s = gData.getStaticVertexData(vertexId);\n  142      float4x4 boneMat = gData.getBlendedMatrix(vertexId);\n  143      float4x4 invTransposeMat = gData.getInverseTransposeBlendedMatrix(vertexId);\n\n/home/max/dev/Lava/src/Falcor/Scene/Raster.slang:\n   32  struct VSIn\n   33  {\n   34:     // Packed vertex attributes, see PackedStaticVertexData\n   35      float3 pos                      : POSITION;\n   36      float3 packedNormalTangent      : PACKED_NORMAL_TANGENT;\n   ..\n   41      float3 prevPos                  : PREV_POSITION;\n   42  \n   43:     StaticVertexData unpack()\n   44      {\n   45:         PackedStaticVertexData v;\n   46          v.position = pos;\n   47          v.packedNormalTangent = packedNormalTangent;\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.cpp:\n   60  #endif\n   61  \n   62:     static_assert(sizeof(PackedStaticVertexData) % 16 == 0, \"PackedStaticVertexData size should be a multiple of 16\");\n   63      static_assert(sizeof(PackedMeshInstanceData) % 16 == 0, \"PackedMeshInstanceData size should be a multiple of 16\");\n   64      static_assert(PackedMeshInstanceData::kMatrixBits + PackedMeshInstanceData::kMeshBits + PackedMeshInstanceData::kFlagsBits <= 32);\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.slang:\n   59      StructuredBuffer<float4> previousFrameWorldMatrices;\n   60  \n   61:     [root] StructuredBuffer<PackedStaticVertexData> vertices;       ///< Vertex data for this frame.\n   62      StructuredBuffer<PrevVertexData> prevVertices;                  ///< Vertex data for the previous frame, to handle skinned meshes.\n   63  #if INDEXED_VERTICES\n   ..\n  191          \\return Vertex data.\n  192      */\n  193:     StaticVertexData getVertex(uint index)\n  194      {\n  195          return vertices[index].unpack();\n  ...\n  289          \\return Interpolated vertex attributes.\n  290      */\n  291:     VertexData getVertexData(uint meshInstanceID, uint triangleIndex, float3 barycentrics, out StaticVertexData vertices[3])\n  292      {\n  293          const uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  ...\n  338      VertexData getVertexData(uint meshInstanceID, uint triangleIndex, float3 barycentrics)\n  339      {\n  340:         StaticVertexData vertices[3];\n  341          return getVertexData(meshInstanceID, triangleIndex, barycentrics, vertices);\n  342      }\n  ...\n  356          \\return Interpolated vertex attributes.\n  357      */\n  358:     VertexData getVertexData(HitInfo hit, out StaticVertexData vertices[3])\n  359      {\n  360          return getVertexData(hit.meshInstanceID, hit.primitiveIndex, hit.getBarycentricWeights(), vertices);\n  ...\n  369      VertexData getVertexDataRayCones(uint meshInstanceID, uint triangleIndex, float3 barycentrics)\n  370      {\n  371:         StaticVertexData triangleVertices[3];\n  372          VertexData v = getVertexData(meshInstanceID, triangleIndex, barycentrics, triangleVertices);\n  373          v.coneTexLODValue = computeRayConeTriangleLODValue(triangleVertices, meshInstanceID, float3x3(getWorldMatrix(meshInstanceID)));\n  ...\n  465      {\n  466          const uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  467:         StaticVertexData vertices[3] = { getVertex(vtxIndices[0]), getVertex(vtxIndices[1]), getVertex(vtxIndices[2]) };\n  468          float3 normals[3];\n  469          float3 pos[3];\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.cpp:\n  419          const Mesh::Vertex& v = vertices[index].first;\n  420  \n  421:         StaticVertexData s;\n  422          s.position = v.position;\n  423          s.normal = v.normal;\n  424          s.texCrd = v.texCrd;\n  425          //s.tangent = v.tangent;\n  426:         mBuffersData.staticData.push_back(PackedStaticVertexData(s));\n  427  \n  428          if (mesh.hasBones()) {\n  ...\n  515      const size_t vertexCount = (uint32_t)mBuffersData.staticData.size();\n  516      size_t ibSize = sizeof(uint32_t) * mBuffersData.indices.size();\n  517:     size_t staticVbSize = sizeof(PackedStaticVertexData) * vertexCount;\n  518      size_t prevVbSize = sizeof(PrevVertexData) * vertexCount;\n  519      assert(ibSize <= std::numeric_limits<uint32_t>::max() && staticVbSize <= std::numeric_limits<uint32_t>::max() && prevVbSize <= std::numeric_limits<uint32_t>::max());\n  ...\n  529      // Create the vertex data as structured buffers\n  530      ResourceBindFlags vbBindFlags = ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess | ResourceBindFlags::Vertex;\n  531:     Buffer::SharedPtr pStaticBuffer = Buffer::createStructured(mpDevice, sizeof(PackedStaticVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n  532      Buffer::SharedPtr pPrevBuffer = Buffer::createStructured(mpDevice, sizeof(PrevVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n  533  \n  ...\n  544      // Add the packed static vertex data layout\n  545      VertexBufferLayout::SharedPtr pStaticLayout = VertexBufferLayout::create();\n  546:     pStaticLayout->addElement(VERTEX_POSITION_NAME, offsetof(PackedStaticVertexData, position), ResourceFormat::RGB32Float, 1, VERTEX_POSITION_LOC);\n  547:     pStaticLayout->addElement(VERTEX_PACKED_NORMAL_TANGENT_NAME, offsetof(PackedStaticVertexData, packedNormalTangent), ResourceFormat::RGB32Float, 1, VERTEX_PACKED_NORMAL_TANGENT_LOC);\n  548:     pStaticLayout->addElement(VERTEX_TEXCOORD_NAME, offsetof(PackedStaticVertexData, texCrd), ResourceFormat::RG32Float, 1, VERTEX_TEXCOORD_LOC);\n  549      pLayout->addBufferLayout(Scene::kStaticDataBufferIndex, pStaticLayout);\n  550  \n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.h:\n  291      struct BuffersData {\n  292          std::vector<uint32_t> indices;\n  293:         std::vector<PackedStaticVertexData> staticData;\n  294          std::vector<DynamicVertexData> dynamicData;\n  295      } mBuffersData;\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneTypes.slang:\n  119  };\n  120  \n  121: struct StaticVertexData\n  122  {\n  123      float3 position;    ///< Position.\n  ...\n  129  /** Vertex data packed into 32B for aligned access.\n  130  */\n  131: struct PackedStaticVertexData\n  132  {\n  133      float3 position;\n  ...\n  136  \n  137  #ifdef HOST_CODE\n  138:     PackedStaticVertexData(const StaticVertexData& v) { pack(v); }\n  139:     void pack(const StaticVertexData& v)\n  140      {\n  141          position = v.position;\n  ...\n  148  \n  149  #else // !HOST_CODE\n  150:     [mutating] void pack(const StaticVertexData v)\n  151      {\n  152          position = v.position;\n  ...\n  161      }\n  162  \n  163:     StaticVertexData unpack()\n  164      {\n  165:         StaticVertexData v;\n  166          v.position = position;\n  167          v.texCrd = texCrd;\n\n57 matches across 10 files\n\n\nSearching 484 files for \"Execute graph:\"\n\n0 matches\n\nSearching 470 files for \"Execute graph:\"\n\n/home/max/dev/Lava/src/lava_lib/renderer.cpp:\n  236  \n  237      auto& pGraph = mGraphs[mActiveGraph].pGraph;\n  238:     LLOG_DBG << \"Execute graph: \" << pGraph->getName() << \" output name: \" << mGraphs[mActiveGraph].mainOutput;\n  239  \n  240      // Execute graph.\n\n1 match in 1 file\n\n\nSearching 484 files for \"vkCreateImage\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKDevice.cpp:\n  144      imageInfo.tiling = VK_IMAGE_TILING_OPTIMAL;\n  145  \n  146:     auto result = vkCreateImage(mApiHandle, &imageInfo, nullptr, &image);\n  147      if (VK_FAILED(result)) {\n  148          throw std::runtime_error(\"Failed to create FBO texture.\");\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  175              VkImageViewCreateInfo info = initializeImageViewInfo((const Texture*)pResource, mostDetailedMip, mipCount, firstArraySlice, arraySize);\n  176              VkImageView imageView;\n  177:             vk_call(vkCreateImageView(pResource->device()->getApiHandle(), &info, nullptr, &imageView));\n  178              return VkResource<VkImageView, VkBufferView>::SharedPtr::create(pResource->device(), imageView, nullptr);\n  179          }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  240          mState.global = (pData && !mIsSparse ) ? Resource::State::PreInitialized : Resource::State::Undefined;\n  241  \n  242:         auto result = vkCreateImage(mpDevice->getApiHandle(), &imageCreateInfo, nullptr, &mImage);\n  243          if (VK_FAILED(result)) {\n  244              mImage = VK_NULL_HANDLE;\n\n3 matches across 3 files\n\n\nSearching 470 files for \"basecolor_texture\"\n\n/home/max/dev/Lava/src/lava_lib/reader_lsd/scope.cpp:\n  166  \tpSubContainer->declareProperty(Style::OBJECT, Type::VECTOR3, \"basecolor\", lsd::Vector3{1.0, 1.0, 1.0}, Property::Owner::SYS);\n  167  \tpSubContainer->declareProperty(Style::OBJECT, Type::BOOL, \t \"basecolor_useTexture\", bool(false), Property::Owner::SYS);\n  168: \tpSubContainer->declareProperty(Style::OBJECT, Type::STRING,  \"basecolor_texture\", std::string(), Property::Owner::SYS);\n  169  \n  170  \tpSubContainer->declareProperty(Style::OBJECT, Type::BOOL, \t \"rough_useTexture\", bool(false), Property::Owner::SYS);\n\n/home/max/dev/Lava/src/lava_lib/reader_lsd/session.cpp:\n  440      \tauto pShaderProps = pShaderProp->subContainer();\n  441      \tsurface_base_color = to_float3(pShaderProps->getPropertyValue(ast::Style::OBJECT, \"basecolor\", lsd::Vector3{1.0, 1.0, 1.0}));\n  442:     \tsurface_base_color_texture = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"basecolor_texture\", std::string());\n  443  \n  444      \tsurface_ior = pShaderProps->getPropertyValue(ast::Style::OBJECT, \"ior\", 1.5);\n\n2 matches across 2 files\n\n\nSearching 484 files for \"RenderContext::create\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/Device.cpp:\n  126      mpCpuDescPool = DescriptorPool::create(shared_from_this(), poolDesc, mpFrameFence);\n  127      mpUploadHeap = GpuMemoryHeap::create(shared_from_this(), GpuMemoryHeap::Type::Upload, 1024 * 1024 * 2, mpFrameFence);\n  128:     mpRenderContext = RenderContext::create(shared_from_this(), mCmdQueues[(uint32_t)LowLevelContextData::CommandQueueType::Direct][0]);\n  129  \n  130:     //mpRenderContext = RenderContext::create(shared_from_this(), mCmdQueues[(uint32_t)LowLevelContextData::CommandQueueType::Direct][0]);\n  131      \n  132      assert(mpRenderContext);\n  ...\n  137      \n  138      mpRenderContext->flush();  // This will bind the descriptor heaps.\n  139:     // TODO: Do we need to flush here or should RenderContext::create() bind the descriptor heaps automatically without flush? See #749.\n  140  \n  141      // Update the FBOs or offscreen buffer\n\n/home/max/dev/Lava/src/Falcor/Core/API/RenderContext.cpp:\n   36  \n   37  \n   38: RenderContext::SharedPtr RenderContext::create(std::shared_ptr<Device> pDevice, CommandQueueHandle queue) {\n   39      return SharedPtr(new RenderContext(pDevice, queue));\n   40  }\n\n4 matches across 2 files\n\n\nSearching 484 files for \"vkAllocateCommandBuffers\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp:\n   48          cmdBufAllocateInfo.commandBufferCount = 1;\n   49          VkCommandBuffer cmdBuf;\n   50:         vk_call(vkAllocateCommandBuffers(device->getApiHandle(), &cmdBufAllocateInfo, &cmdBuf));\n   51          return cmdBuf;\n   52      }\n\n1 match in 1 file\n\n\nSearching 484 files for \"vkCreateCommandPool\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp:\n   79          commandPoolCreateInfo.queueFamilyIndex = device->getApiCommandQueueType(type);\n   80          VkCommandPool pool;\n   81:         if (VK_FAILED(vkCreateCommandPool(device->getApiHandle(), &commandPoolCreateInfo, nullptr, &pool)))\n   82          {\n   83              logError(\"Could not create command pool\");\n\n1 match in 1 file\n\n\nSearching 484 files for \"Texture require\"\n\n/home/max/dev/Lava/src/Falcor/Core/API/SparseResourceManager.cpp:\n  270  \n  271      uint32_t deviceMemRequiredSize = pTex->getTextureSizeInBytes();\n  272:     LOG_DBG(\"Texture require %u bytes of device memory\", deviceMemRequiredSize);\n  273      if(deviceMemRequiredSize <= deviceCacheMemSizeLeft) {\n  274          deviceCacheMemSizeLeft = deviceCacheMemSize - deviceMemRequiredSize;\n\n1 match in 1 file\n\n\nSearching 2123 files for \"BOOST\"\n\n/home/max/dev/Lava/third_party/OpenImageIO/.clang-format:\n   65    - foreach\n   66    - Q_FOREACH\n   67:   - BOOST_FOREACH\n   68  IncludeBlocks:   Preserve\n   69  IncludeCategories: \n\n/home/max/dev/Lava/third_party/OpenImageIO/.github/workflows/ci.yml:\n   22  jobs:\n   23    linux-gcc48:\n   24:     name: \"Linux 2017-ish: gcc4.8/C++11 py2.7 boost-1.66 exr-2.3\"\n   25      runs-on: ubuntu-latest\n   26      container:\n   ..\n   45  \n   46    vfxplatform-2019:\n   47:     name: \"Linux VFX Platform 2019: gcc6/C++14 py2.7 boost-1.66 exr-2.3\"\n   48      runs-on: ubuntu-latest\n   49      container:\n   ..\n   69  \n   70    vfxplatform-2020:\n   71:     name: \"Linux VFX Platform 2020: gcc6/C++14 py3.7 boost-1.70 exr-2.4\"\n   72      runs-on: ubuntu-latest\n   73      container:\n   ..\n   96      # gcc9 and C++17. This test currently uses the latest OpenEXR release\n   97      # 2.5, though eventually 2021 will feature OpenEXR 3.0 when complete.\n   98:     name: \"Linux VFX Platform 2021: gcc9/C++17 py3.7 boost-1.70 exr-2.5\"\n   99      runs-on: ubuntu-18.04\n  100      container:\n  ...\n  123      # Test what's anticipated to be VFX Platform 2021 -- mainly, that means\n  124      # gcc9 and C++17, and also the in-progress openexr/imath 3.0.\n  125:     name: \"Linux VFX Platform 2021: gcc9/C++17 py3.7 boost-1.70 exr-3.0\"\n  126      runs-on: ubuntu-18.04\n  127      container:\n  ...\n  252      # Oldest versions of the dependencies that we can muster, and various\n  253      # things disabled (no SSE, OCIO, or OpenCV, don't embed plugins).\n  254:     name: \"Linux oldest/hobbled: gcc4.8/C++11 py2.7 boost-1.66 exr-2.2 no-sse no-ocio\"\n  255      runs-on: ubuntu-latest\n  256      container:\n\n/home/max/dev/Lava/third_party/OpenImageIO/.travis.yml:\n   12  # Add-ons: specify apt packages for Linux\n   13  # We actually specify packages per-matrix-entry, so these don't do anything\n   14: # except to tag them (&add-sources, &common-packages, &common-boost-packages)\n   15  # so they can be referened later ('*') to save repetition.\n   16  addons:\n   ..\n   37        # - liblcms2-dev\n   38        # - libyaml-cpp-dev\n   39:    packages: &common-boost-packages\n   40:       - libboost1.58-dev\n   41:       - libboost-filesystem1.58\n   42:       - libboost-regex1.58\n   43:       - libboost-system1.58\n   44:       - libboost-thread1.58\n   45:    packages: &old-boost-packages\n   46:       - libboost1.55-dev\n   47:       - libboost-filesystem1.55\n   48:       - libboost-regex1.55\n   49:       - libboost-system1.55\n   50:       - libboost-thread1.55\n   51  \n   52  cache:\n   ..\n  102        #       packages:\n  103        #         - *common-packages\n  104:       #         - *old-boost-packages\n  105        #         - g++-4.8\n  106  \n  ...\n  125      # or if the branch name includes \"simd\". Other ordinary work branch\n  126      # pushes don't need to run this.\n  127:       # - name: \"Oldest everything: gcc4.8, boost 1.55, no simd, no jpegturbo, no OCIO, dso plugins, exr2.2\"\n  128        #   os: linux\n  129        #   dist: trusty\n  ...\n  136        #       packages:\n  137        #         - *common-packages\n  138:       #         - *old-boost-packages\n  139        #         - g++-4.8\n  140  \n  ...\n  153                - rhash\n  154                - libstdc++6\n  155:               - libboost-all-dev\n  156                - libtiff-dev\n  157                - libilmbase-dev\n\n/home/max/dev/Lava/third_party/OpenImageIO/appveyor.yml:\n   41    - mkdir include\n   42  \n   43:   # Boost\n   44    # 1.63 is already installed on appveyor, just use it\n   45:   - set BOOST_ROOT=C:\\Libraries\\boost_1_66_0\n   46:   - set CMAKE_PREFIX_PATH=%CMAKE_PREFIX_PATH%;%BOOST_ROOT%\n   47  \n   48    # Install a bunch of vcpkg dependencies. We rely on the run-to-run caching\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/bin/oiiotool:\n    <binary>\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/CMakeCache.txt:\n   64  BZRCOMMAND:FILEPATH=BZRCOMMAND-NOTFOUND\n   65  \n   66: //Boost atomic library (debug)\n   67: Boost_ATOMIC_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_atomic.so\n   68  \n   69: //Boost atomic library (release)\n   70: Boost_ATOMIC_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_atomic.so\n   71  \n   72: //Boost chrono library (debug)\n   73: Boost_CHRONO_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_chrono.so\n   74  \n   75: //Boost chrono library (release)\n   76: Boost_CHRONO_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_chrono.so\n   77  \n   78: //Boost date_time library (debug)\n   79: Boost_DATE_TIME_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_date_time.so\n   80  \n   81: //Boost date_time library (release)\n   82: Boost_DATE_TIME_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_date_time.so\n   83  \n   84: //Boost filesystem library (debug)\n   85: Boost_FILESYSTEM_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_filesystem.so\n   86  \n   87: //Boost filesystem library (release)\n   88: Boost_FILESYSTEM_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_filesystem.so\n   89  \n   90  //Path to a file.\n   91: Boost_INCLUDE_DIR:PATH=/usr/include\n   92  \n   93: //Boost library directory DEBUG\n   94: Boost_LIBRARY_DIR_DEBUG:PATH=/usr/lib/x86_64-linux-gnu\n   95  \n   96: //Boost library directory RELEASE\n   97: Boost_LIBRARY_DIR_RELEASE:PATH=/usr/lib/x86_64-linux-gnu\n   98  \n   99: //Boost system library (debug)\n  100: Boost_SYSTEM_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_system.so\n  101  \n  102: //Boost system library (release)\n  103: Boost_SYSTEM_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_system.so\n  104  \n  105: //Boost thread library (debug)\n  106: Boost_THREAD_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_thread.so\n  107  \n  108: //Boost thread library (release)\n  109: Boost_THREAD_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libboost_thread.so\n  110  \n  111  //Path to a program.\n  ...\n  885  //ADVANCED property for variable: BZRCOMMAND\n  886  BZRCOMMAND-ADVANCED:INTERNAL=1\n  887: //ADVANCED property for variable: Boost_ATOMIC_LIBRARY_DEBUG\n  888: Boost_ATOMIC_LIBRARY_DEBUG-ADVANCED:INTERNAL=1\n  889: //ADVANCED property for variable: Boost_ATOMIC_LIBRARY_RELEASE\n  890: Boost_ATOMIC_LIBRARY_RELEASE-ADVANCED:INTERNAL=1\n  891: //ADVANCED property for variable: Boost_CHRONO_LIBRARY_DEBUG\n  892: Boost_CHRONO_LIBRARY_DEBUG-ADVANCED:INTERNAL=1\n  893: //ADVANCED property for variable: Boost_CHRONO_LIBRARY_RELEASE\n  894: Boost_CHRONO_LIBRARY_RELEASE-ADVANCED:INTERNAL=1\n  895: //ADVANCED property for variable: Boost_DATE_TIME_LIBRARY_DEBUG\n  896: Boost_DATE_TIME_LIBRARY_DEBUG-ADVANCED:INTERNAL=1\n  897: //ADVANCED property for variable: Boost_DATE_TIME_LIBRARY_RELEASE\n  898: Boost_DATE_TIME_LIBRARY_RELEASE-ADVANCED:INTERNAL=1\n  899: //ADVANCED property for variable: Boost_FILESYSTEM_LIBRARY_DEBUG\n  900: Boost_FILESYSTEM_LIBRARY_DEBUG-ADVANCED:INTERNAL=1\n  901: //ADVANCED property for variable: Boost_FILESYSTEM_LIBRARY_RELEASE\n  902: Boost_FILESYSTEM_LIBRARY_RELEASE-ADVANCED:INTERNAL=1\n  903: //ADVANCED property for variable: Boost_INCLUDE_DIR\n  904: Boost_INCLUDE_DIR-ADVANCED:INTERNAL=1\n  905: //ADVANCED property for variable: Boost_LIBRARY_DIR_DEBUG\n  906: Boost_LIBRARY_DIR_DEBUG-ADVANCED:INTERNAL=1\n  907: //ADVANCED property for variable: Boost_LIBRARY_DIR_RELEASE\n  908: Boost_LIBRARY_DIR_RELEASE-ADVANCED:INTERNAL=1\n  909: //ADVANCED property for variable: Boost_SYSTEM_LIBRARY_DEBUG\n  910: Boost_SYSTEM_LIBRARY_DEBUG-ADVANCED:INTERNAL=1\n  911: //ADVANCED property for variable: Boost_SYSTEM_LIBRARY_RELEASE\n  912: Boost_SYSTEM_LIBRARY_RELEASE-ADVANCED:INTERNAL=1\n  913: //ADVANCED property for variable: Boost_THREAD_LIBRARY_DEBUG\n  914: Boost_THREAD_LIBRARY_DEBUG-ADVANCED:INTERNAL=1\n  915: //ADVANCED property for variable: Boost_THREAD_LIBRARY_RELEASE\n  916: Boost_THREAD_LIBRARY_RELEASE-ADVANCED:INTERNAL=1\n  917  //ADVANCED property for variable: CMAKE_ADDR2LINE\n  918  CMAKE_ADDR2LINE-ADVANCED:INTERNAL=1\n  ...\n 1278  ZLIB_LIBRARY_RELEASE-ADVANCED:INTERNAL=1\n 1279  //Components requested for this build tree.\n 1280: _Boost_COMPONENTS_SEARCHED:INTERNAL=atomic;chrono;date_time;filesystem;system;thread\n 1281: //Last used Boost_INCLUDE_DIR value.\n 1282: _Boost_INCLUDE_DIR_LAST:INTERNAL=/usr/include\n 1283: //Last used Boost_LIBRARY_DIR_DEBUG value.\n 1284: _Boost_LIBRARY_DIR_DEBUG_LAST:INTERNAL=/usr/lib/x86_64-linux-gnu\n 1285: //Last used Boost_LIBRARY_DIR_RELEASE value.\n 1286: _Boost_LIBRARY_DIR_RELEASE_LAST:INTERNAL=/usr/lib/x86_64-linux-gnu\n 1287: //Last used Boost_NAMESPACE value.\n 1288: _Boost_NAMESPACE_LAST:INTERNAL=boost\n 1289: //Last used Boost_USE_MULTITHREADED value.\n 1290: _Boost_USE_MULTITHREADED_LAST:INTERNAL=TRUE\n 1291  _FFMPEG_AVCODEC_CFLAGS:INTERNAL=-I/usr/include/x86_64-linux-gnu\n 1292  _FFMPEG_AVCODEC_CFLAGS_I:INTERNAL=\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/CMakeFiles/Makefile.cmake:\n  139    \"/usr/local/share/cmake-3.17/Modules/ExternalProject.cmake\"\n  140    \"/usr/local/share/cmake-3.17/Modules/FindBZip2.cmake\"\n  141:   \"/usr/local/share/cmake-3.17/Modules/FindBoost.cmake\"\n  142    \"/usr/local/share/cmake-3.17/Modules/FindFreetype.cmake\"\n  143    \"/usr/local/share/cmake-3.17/Modules/FindGIF.cmake\"\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/include/OpenImageIO/detail/pugixml/pugixml.hpp:\n 1311  \t\ttypedef const xpath_node* const_iterator;\n 1312  \n 1313: \t\t// We define non-constant iterator to be the same as constant iterator so that various generic algorithms (i.e. boost foreach) work\n 1314  \t\ttypedef const xpath_node* iterator;\n 1315  \n\n/home/max/dev/Lava/third_party/OpenImageIO/build/lib/libOpenImageIO.so.2.3.1:\n    <binary>\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/lib/libOpenImageIO_Util.so.2.3.1:\n    <binary>\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/igrep/CMakeFiles/igrep.dir/build.make:\n   98  bin/igrep: src/igrep/CMakeFiles/igrep.dir/build.make\n   99  bin/igrep: lib/libOpenImageIO.so.2.3.1\n  100: bin/igrep: /usr/lib/x86_64-linux-gnu/libboost_filesystem.so\n  101: bin/igrep: /usr/lib/x86_64-linux-gnu/libboost_system.so\n  102: bin/igrep: /usr/lib/x86_64-linux-gnu/libboost_thread.so\n  103: bin/igrep: /usr/lib/x86_64-linux-gnu/libboost_chrono.so\n  104: bin/igrep: /usr/lib/x86_64-linux-gnu/libboost_date_time.so\n  105: bin/igrep: /usr/lib/x86_64-linux-gnu/libboost_atomic.so\n  106  bin/igrep: /usr/local/lib/libOpenEXR-2_5_d.so.26.0.1\n  107  bin/igrep: /usr/local/lib/libImath-3_0.so.26.0.0\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/igrep/CMakeFiles/igrep.dir/CXX.includecache:\n  472  OpenImageIO/sysutil.h\n  473  -\n  474: boost/regex.hpp\n  475  -\n  476  regex\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/igrep/CMakeFiles/igrep.dir/link.txt:\n    1: /usr/bin/c++  -O3 -DNDEBUG   CMakeFiles/igrep.dir/igrep.cpp.o  -o ../../bin/igrep  -Wl,-rpath,/home/max/dev/Lava/third_party/OpenImageIO/build/lib:/usr/local/lib: ../../lib/libOpenImageIO.so.2.3.1 /usr/lib/x86_64-linux-gnu/libboost_filesystem.so /usr/lib/x86_64-linux-gnu/libboost_system.so /usr/lib/x86_64-linux-gnu/libboost_thread.so -lpthread /usr/lib/x86_64-linux-gnu/libboost_chrono.so /usr/lib/x86_64-linux-gnu/libboost_date_time.so /usr/lib/x86_64-linux-gnu/libboost_atomic.so -lrt /usr/local/lib/libOpenEXR-2_5_d.so.26.0.1 /usr/local/lib/libImath-3_0.so.26.0.0 /usr/local/lib/libIlmThread-2_5_d.so.26.0.1 /usr/local/lib/libIex-2_5_d.so.26.0.1 /usr/lib/x86_64-linux-gnu/libz.so /usr/local/lib/libopencv_core.so /usr/local/lib/libopencv_imgproc.so /usr/local/lib/libopencv_videoio.so -lpthread \n    2  \n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/iinfo/CMakeFiles/iinfo.dir/build.make:\n   98  bin/iinfo: src/iinfo/CMakeFiles/iinfo.dir/build.make\n   99  bin/iinfo: lib/libOpenImageIO.so.2.3.1\n  100: bin/iinfo: /usr/lib/x86_64-linux-gnu/libboost_filesystem.so\n  101: bin/iinfo: /usr/lib/x86_64-linux-gnu/libboost_system.so\n  102: bin/iinfo: /usr/lib/x86_64-linux-gnu/libboost_thread.so\n  103: bin/iinfo: /usr/lib/x86_64-linux-gnu/libboost_chrono.so\n  104: bin/iinfo: /usr/lib/x86_64-linux-gnu/libboost_date_time.so\n  105: bin/iinfo: /usr/lib/x86_64-linux-gnu/libboost_atomic.so\n  106  bin/iinfo: /usr/local/lib/libOpenEXR-2_5_d.so.26.0.1\n  107  bin/iinfo: /usr/local/lib/libImath-3_0.so.26.0.0\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/iinfo/CMakeFiles/iinfo.dir/CXX.includecache:\n  544  OpenImageIO/sysutil.h\n  545  -\n  546: boost/regex.hpp\n  547  -\n  548  regex\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/iinfo/CMakeFiles/iinfo.dir/link.txt:\n    1: /usr/bin/c++  -O3 -DNDEBUG   CMakeFiles/iinfo.dir/iinfo.cpp.o  -o ../../bin/iinfo  -Wl,-rpath,/home/max/dev/Lava/third_party/OpenImageIO/build/lib:/usr/local/lib: ../../lib/libOpenImageIO.so.2.3.1 /usr/lib/x86_64-linux-gnu/libboost_filesystem.so /usr/lib/x86_64-linux-gnu/libboost_system.so /usr/lib/x86_64-linux-gnu/libboost_thread.so -lpthread /usr/lib/x86_64-linux-gnu/libboost_chrono.so /usr/lib/x86_64-linux-gnu/libboost_date_time.so /usr/lib/x86_64-linux-gnu/libboost_atomic.so -lrt /usr/local/lib/libOpenEXR-2_5_d.so.26.0.1 /usr/local/lib/libImath-3_0.so.26.0.0 /usr/local/lib/libIlmThread-2_5_d.so.26.0.1 /usr/local/lib/libIex-2_5_d.so.26.0.1 /usr/lib/x86_64-linux-gnu/libz.so /usr/local/lib/libopencv_core.so /usr/local/lib/libopencv_imgproc.so /usr/local/lib/libopencv_videoio.so -lpthread \n    2  \n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/libOpenImageIO/CMakeFiles/imagebufalgo_test.dir/CXX.includecache:\n 1180  \n 1181  /usr/local/include/opencv4/opencv2/flann/dynamic_bitset.h\n 1182: boost/dynamic_bitset.hpp\n 1183  -\n 1184  limits.h\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/libOpenImageIO/CMakeFiles/OpenImageIO.dir/build.make:\n 1917  lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libbz2.so\n 1918  lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libz.so\n 1919: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_filesystem.so\n 1920: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_system.so\n 1921: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_thread.so\n 1922: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_chrono.so\n 1923: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_date_time.so\n 1924: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_atomic.so\n 1925  lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libfreetype.so\n 1926  lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libgif.so\n ....\n 1929  lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libraw_r.so\n 1930  lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libtiff.so\n 1931: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_filesystem.so\n 1932: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_system.so\n 1933: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_thread.so\n 1934: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_chrono.so\n 1935: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_date_time.so\n 1936: lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_atomic.so\n 1937  lib/libOpenImageIO.so.2.3.1: /usr/lib/x86_64-linux-gnu/libfreetype.so\n 1938  lib/libOpenImageIO.so.2.3.1: src/libOpenImageIO/CMakeFiles/OpenImageIO.dir/link.txt\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/libOpenImageIO/CMakeFiles/OpenImageIO.dir/DependInfo.cmake:\n  132    \"EMBED_PLUGINS=1\"\n  133    \"OpenImageIO_EXPORTS\"\n  134:   \"USE_BOOST_ASIO=1\"\n  135    \"USE_FFMPEG\"\n  136    \"USE_FREETYPE=1\"\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/libOpenImageIO/CMakeFiles/OpenImageIO.dir/flags.make:\n    5  CXX_FLAGS = -O3 -DNDEBUG -fPIC   -Wall -Werror -Wno-unused-local-typedefs -Wno-unused-result -Wno-aligned-new -Wno-noexcept-type -fno-math-errno -std=c++14\n    6  \n    7: CXX_DEFINES = -DEMBED_PLUGINS=1 -DOpenImageIO_EXPORTS -DUSE_BOOST_ASIO=1 -DUSE_FFMPEG -DUSE_FREETYPE=1 -DUSE_GIF -DUSE_JPEG_TURBO=1 -DUSE_LIBRAW=1 -DUSE_OCIO=1 -DUSE_OPENCOLORIO=1 -DUSE_OPENCV=1 -DUSE_OPENJPEG -DUSE_STD_REGEX -DUSE_TBB=1 -DUSE_WEBP=1 -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS\n    8  \n    9  CXX_INCLUDES = -I/home/max/dev/Lava/third_party/OpenImageIO/build/include/OpenImageIO -I/home/max/dev/Lava/third_party/OpenImageIO/build/include -I/home/max/dev/Lava/third_party/OpenImageIO/build/src/include -I/home/max/dev/Lava/third_party/OpenImageIO/src/include -I/home/max/dev/Lava/third_party/OpenImageIO/ext/fmt/include -I/usr/include/openjpeg-2.3 -I/OpenEXR -I/opt/lava/3rdparty/include -I/usr/local/include/opencv4 -I/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/include -I/usr/include/freetype2 -isystem /usr/local/include/Imath \n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/libOpenImageIO/CMakeFiles/OpenImageIO.dir/link.txt:\n    1: /usr/bin/c++ -fPIC -O3 -DNDEBUG -Wl,--version-script=/home/max/dev/Lava/third_party/OpenImageIO/src/build-scripts/hidesymbols.map -shared -Wl,-soname,libOpenImageIO.so.2.3.1 -o ../../lib/libOpenImageIO.so.2.3.1 CMakeFiles/OpenImageIO.dir/imagebufalgo.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_pixelmath.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_channels.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_compare.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_copy.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_deep.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_draw.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_addsub.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_muldiv.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_mad.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_orient.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_xform.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_yee.cpp.o CMakeFiles/OpenImageIO.dir/imagebufalgo_opencv.cpp.o CMakeFiles/OpenImageIO.dir/deepdata.cpp.o CMakeFiles/OpenImageIO.dir/exif.cpp.o CMakeFiles/OpenImageIO.dir/exif-canon.cpp.o CMakeFiles/OpenImageIO.dir/formatspec.cpp.o CMakeFiles/OpenImageIO.dir/imagebuf.cpp.o CMakeFiles/OpenImageIO.dir/imageinput.cpp.o CMakeFiles/OpenImageIO.dir/imageio.cpp.o CMakeFiles/OpenImageIO.dir/imageioplugin.cpp.o CMakeFiles/OpenImageIO.dir/imageoutput.cpp.o CMakeFiles/OpenImageIO.dir/iptc.cpp.o CMakeFiles/OpenImageIO.dir/xmp.cpp.o CMakeFiles/OpenImageIO.dir/color_ocio.cpp.o CMakeFiles/OpenImageIO.dir/maketexture.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/argparse.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/benchmark.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/errorhandler.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/filesystem.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/farmhash.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/filter.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/hashes.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/paramlist.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/plugin.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/SHA1.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/strutil.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/sysutil.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/thread.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/timer.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/typedesc.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/ustring.cpp.o CMakeFiles/OpenImageIO.dir/__/libutil/xxhash.cpp.o CMakeFiles/OpenImageIO.dir/__/libtexture/texturesys.cpp.o CMakeFiles/OpenImageIO.dir/__/libtexture/texture3d.cpp.o CMakeFiles/OpenImageIO.dir/__/libtexture/environment.cpp.o CMakeFiles/OpenImageIO.dir/__/libtexture/texoptions.cpp.o CMakeFiles/OpenImageIO.dir/__/libtexture/imagecache.cpp.o CMakeFiles/OpenImageIO.dir/__/bmp.imageio/bmpinput.cpp.o CMakeFiles/OpenImageIO.dir/__/bmp.imageio/bmpoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/bmp.imageio/bmp_pvt.cpp.o CMakeFiles/OpenImageIO.dir/__/cineon.imageio/cineoninput.cpp.o CMakeFiles/OpenImageIO.dir/__/cineon.imageio/libcineon/Cineon.cpp.o CMakeFiles/OpenImageIO.dir/__/cineon.imageio/libcineon/OutStream.cpp.o CMakeFiles/OpenImageIO.dir/__/cineon.imageio/libcineon/Codec.cpp.o CMakeFiles/OpenImageIO.dir/__/cineon.imageio/libcineon/Reader.cpp.o CMakeFiles/OpenImageIO.dir/__/cineon.imageio/libcineon/Writer.cpp.o CMakeFiles/OpenImageIO.dir/__/cineon.imageio/libcineon/CineonHeader.cpp.o CMakeFiles/OpenImageIO.dir/__/cineon.imageio/libcineon/ElementReadStream.cpp.o CMakeFiles/OpenImageIO.dir/__/cineon.imageio/libcineon/InStream.cpp.o CMakeFiles/OpenImageIO.dir/__/dds.imageio/ddsinput.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/dpxinput.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/dpxoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/DPX.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/OutStream.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/RunLengthEncoding.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/Codec.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/Reader.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/Writer.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/DPXHeader.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/ElementReadStream.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/InStream.cpp.o CMakeFiles/OpenImageIO.dir/__/dpx.imageio/libdpx/DPXColorConverter.cpp.o CMakeFiles/OpenImageIO.dir/__/ffmpeg.imageio/ffmpeginput.cpp.o CMakeFiles/OpenImageIO.dir/__/fits.imageio/fitsinput.cpp.o CMakeFiles/OpenImageIO.dir/__/fits.imageio/fitsoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/fits.imageio/fits_pvt.cpp.o CMakeFiles/OpenImageIO.dir/__/gif.imageio/gifinput.cpp.o CMakeFiles/OpenImageIO.dir/__/gif.imageio/gifoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/hdr.imageio/rgbe.cpp.o CMakeFiles/OpenImageIO.dir/__/hdr.imageio/hdrinput.cpp.o CMakeFiles/OpenImageIO.dir/__/hdr.imageio/hdroutput.cpp.o CMakeFiles/OpenImageIO.dir/__/ico.imageio/icoinput.cpp.o CMakeFiles/OpenImageIO.dir/__/ico.imageio/icooutput.cpp.o CMakeFiles/OpenImageIO.dir/__/iff.imageio/iffinput.cpp.o CMakeFiles/OpenImageIO.dir/__/iff.imageio/iffoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/iff.imageio/iff_pvt.cpp.o CMakeFiles/OpenImageIO.dir/__/jpeg.imageio/jpeginput.cpp.o CMakeFiles/OpenImageIO.dir/__/jpeg.imageio/jpegoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/jpeg2000.imageio/jpeg2000input.cpp.o CMakeFiles/OpenImageIO.dir/__/jpeg2000.imageio/jpeg2000output.cpp.o CMakeFiles/OpenImageIO.dir/__/null.imageio/nullimageio.cpp.o CMakeFiles/OpenImageIO.dir/__/openexr.imageio/exrinput.cpp.o CMakeFiles/OpenImageIO.dir/__/openexr.imageio/exroutput.cpp.o CMakeFiles/OpenImageIO.dir/__/png.imageio/pnginput.cpp.o CMakeFiles/OpenImageIO.dir/__/png.imageio/pngoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/pnm.imageio/pnminput.cpp.o CMakeFiles/OpenImageIO.dir/__/pnm.imageio/pnmoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/psd.imageio/psdinput.cpp.o CMakeFiles/OpenImageIO.dir/__/psd.imageio/jpeg_memory_src.cpp.o CMakeFiles/OpenImageIO.dir/__/raw.imageio/rawinput.cpp.o CMakeFiles/OpenImageIO.dir/__/rla.imageio/rlainput.cpp.o CMakeFiles/OpenImageIO.dir/__/rla.imageio/rlaoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/sgi.imageio/sgiinput.cpp.o CMakeFiles/OpenImageIO.dir/__/sgi.imageio/sgioutput.cpp.o CMakeFiles/OpenImageIO.dir/__/socket.imageio/socketinput.cpp.o CMakeFiles/OpenImageIO.dir/__/socket.imageio/socketoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/socket.imageio/socket_pvt.cpp.o CMakeFiles/OpenImageIO.dir/__/softimage.imageio/softimageinput.cpp.o CMakeFiles/OpenImageIO.dir/__/softimage.imageio/softimage_pvt.cpp.o CMakeFiles/OpenImageIO.dir/__/targa.imageio/targainput.cpp.o CMakeFiles/OpenImageIO.dir/__/targa.imageio/targaoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/term.imageio/termoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/tiff.imageio/tiffinput.cpp.o CMakeFiles/OpenImageIO.dir/__/tiff.imageio/tiffoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/webp.imageio/webpinput.cpp.o CMakeFiles/OpenImageIO.dir/__/webp.imageio/webpoutput.cpp.o CMakeFiles/OpenImageIO.dir/__/zfile.imageio/zfile.cpp.o CMakeFiles/OpenImageIO.dir/__/include/OpenImageIO/detail/pugixml/pugixml.cpp.o  -Wl,-rpath,/usr/local/lib::::::::::::::::::::::: /usr/local/lib/libOpenEXR-2_5_d.so.26.0.1 /usr/lib/x86_64-linux-gnu/libz.so -lpthread /usr/local/lib/libopencv_core.so /usr/local/lib/libopencv_imgproc.so /usr/local/lib/libopencv_videoio.so /usr/lib/x86_64-linux-gnu/libsquish.so /usr/lib/x86_64-linux-gnu/libavcodec.so /usr/lib/x86_64-linux-gnu/libavformat.so /usr/lib/x86_64-linux-gnu/libavutil.so /usr/lib/x86_64-linux-gnu/libswscale.so /usr/lib/x86_64-linux-gnu/libbz2.so /usr/lib/x86_64-linux-gnu/libgif.so /usr/lib/x86_64-linux-gnu/libpng.so /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib/x86_64-linux-gnu/libopenjp2.so /usr/local/lib/libIlmThread-2_5_d.so.26.0.1 /usr/local/lib/libImath-3_0.so.26.0.0 /usr/lib/x86_64-linux-gnu/libz.so /usr/local/lib/libIex-2_5_d.so.26.0.1 /usr/lib/x86_64-linux-gnu/libpng.so /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib/x86_64-linux-gnu/libraw_r.so /usr/lib/x86_64-linux-gnu/libtiff.so /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/x86_64-linux-gnu/libwebp.so /usr/lib/x86_64-linux-gnu/libwebpdemux.so /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/libOpenColorIO.so /usr/lib/x86_64-linux-gnu/libbz2.so /usr/lib/x86_64-linux-gnu/libz.so /usr/lib/x86_64-linux-gnu/libboost_filesystem.so /usr/lib/x86_64-linux-gnu/libboost_system.so /usr/lib/x86_64-linux-gnu/libboost_thread.so -lpthread /usr/lib/x86_64-linux-gnu/libboost_chrono.so /usr/lib/x86_64-linux-gnu/libboost_date_time.so /usr/lib/x86_64-linux-gnu/libboost_atomic.so -lrt -ldl /usr/lib/x86_64-linux-gnu/libfreetype.so /usr/lib/x86_64-linux-gnu/libgif.so /usr/lib/x86_64-linux-gnu/libpng.so /usr/lib/x86_64-linux-gnu/libopenjp2.so /usr/lib/x86_64-linux-gnu/libraw_r.so /usr/lib/x86_64-linux-gnu/libtiff.so /usr/lib/x86_64-linux-gnu/libboost_filesystem.so /usr/lib/x86_64-linux-gnu/libboost_system.so /usr/lib/x86_64-linux-gnu/libboost_thread.so -lpthread /usr/lib/x86_64-linux-gnu/libboost_chrono.so /usr/lib/x86_64-linux-gnu/libboost_date_time.so /usr/lib/x86_64-linux-gnu/libboost_atomic.so -lrt -ldl /usr/lib/x86_64-linux-gnu/libfreetype.so \n    2  \n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/libutil/CMakeFiles/OpenImageIO_Util.dir/build.make:\n  338  lib/libOpenImageIO_Util.so.2.3.1: src/libutil/CMakeFiles/OpenImageIO_Util.dir/build.make\n  339  lib/libOpenImageIO_Util.so.2.3.1: /usr/local/lib/libImath-3_0.so.26.0.0\n  340: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_filesystem.so\n  341: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_system.so\n  342: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_thread.so\n  343: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_chrono.so\n  344: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_date_time.so\n  345: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_atomic.so\n  346: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_filesystem.so\n  347: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_system.so\n  348: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_thread.so\n  349: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_chrono.so\n  350: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_date_time.so\n  351: lib/libOpenImageIO_Util.so.2.3.1: /usr/lib/x86_64-linux-gnu/libboost_atomic.so\n  352  lib/libOpenImageIO_Util.so.2.3.1: src/libutil/CMakeFiles/OpenImageIO_Util.dir/link.txt\n  353  \t@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --bold --progress-dir=/home/max/dev/Lava/third_party/OpenImageIO/build/CMakeFiles --progress-num=$(CMAKE_PROGRESS_18) \"Linking CXX shared library ../../lib/libOpenImageIO_Util.so\"\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/libutil/CMakeFiles/OpenImageIO_Util.dir/CXX.includecache:\n  660  string\n  661  -\n  662: boost/tokenizer.hpp\n  663  -\n  664  OpenImageIO/dassert.h\n  ...\n  682  unistd.h\n  683  -\n  684: boost/regex.hpp\n  685  -\n  686  regex\n  687  -\n  688: boost/filesystem.hpp\n  689  -\n  690  \n  ...\n  784  xlocale.h\n  785  -\n  786: boost/algorithm/string.hpp\n  787  -\n  788  OpenImageIO/dassert.h\n  ...\n  872  OpenImageIO/sysutil.h\n  873  -\n  874: boost/version.hpp\n  875  -\n  876: boost/stacktrace.hpp\n  877  -\n  878: boost/thread.hpp\n  879  -\n  880  \n  ...\n  896  OpenImageIO/thread.h\n  897  -\n  898: boost/container/flat_map.hpp\n  899  -\n  900: boost/lockfree/queue.hpp\n  901  -\n  902  queue\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/libutil/CMakeFiles/OpenImageIO_Util.dir/link.txt:\n    1: /usr/bin/c++ -fPIC -O3 -DNDEBUG  -shared -Wl,-soname,libOpenImageIO_Util.so.2.3.1 -o ../../lib/libOpenImageIO_Util.so.2.3.1 CMakeFiles/OpenImageIO_Util.dir/argparse.cpp.o CMakeFiles/OpenImageIO_Util.dir/benchmark.cpp.o CMakeFiles/OpenImageIO_Util.dir/errorhandler.cpp.o CMakeFiles/OpenImageIO_Util.dir/filesystem.cpp.o CMakeFiles/OpenImageIO_Util.dir/farmhash.cpp.o CMakeFiles/OpenImageIO_Util.dir/filter.cpp.o CMakeFiles/OpenImageIO_Util.dir/hashes.cpp.o CMakeFiles/OpenImageIO_Util.dir/paramlist.cpp.o CMakeFiles/OpenImageIO_Util.dir/plugin.cpp.o CMakeFiles/OpenImageIO_Util.dir/SHA1.cpp.o CMakeFiles/OpenImageIO_Util.dir/strutil.cpp.o CMakeFiles/OpenImageIO_Util.dir/sysutil.cpp.o CMakeFiles/OpenImageIO_Util.dir/thread.cpp.o CMakeFiles/OpenImageIO_Util.dir/timer.cpp.o CMakeFiles/OpenImageIO_Util.dir/typedesc.cpp.o CMakeFiles/OpenImageIO_Util.dir/ustring.cpp.o CMakeFiles/OpenImageIO_Util.dir/xxhash.cpp.o  -Wl,-rpath,/usr/local/lib::::::::::::::::::::::: /usr/local/lib/libImath-3_0.so.26.0.0 -lpthread /usr/lib/x86_64-linux-gnu/libboost_filesystem.so /usr/lib/x86_64-linux-gnu/libboost_system.so /usr/lib/x86_64-linux-gnu/libboost_thread.so -lpthread /usr/lib/x86_64-linux-gnu/libboost_chrono.so /usr/lib/x86_64-linux-gnu/libboost_date_time.so /usr/lib/x86_64-linux-gnu/libboost_atomic.so -lrt -ldl /usr/lib/x86_64-linux-gnu/libboost_filesystem.so /usr/lib/x86_64-linux-gnu/libboost_system.so /usr/lib/x86_64-linux-gnu/libboost_thread.so /usr/lib/x86_64-linux-gnu/libboost_chrono.so /usr/lib/x86_64-linux-gnu/libboost_date_time.so /usr/lib/x86_64-linux-gnu/libboost_atomic.so -lrt -ldl \n    2  \n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/oiiotool/CMakeFiles/oiiotool.dir/build.make:\n  143  bin/oiiotool: src/oiiotool/CMakeFiles/oiiotool.dir/build.make\n  144  bin/oiiotool: lib/libOpenImageIO.so.2.3.1\n  145: bin/oiiotool: /usr/lib/x86_64-linux-gnu/libboost_filesystem.so\n  146: bin/oiiotool: /usr/lib/x86_64-linux-gnu/libboost_system.so\n  147: bin/oiiotool: /usr/lib/x86_64-linux-gnu/libboost_thread.so\n  148: bin/oiiotool: /usr/lib/x86_64-linux-gnu/libboost_chrono.so\n  149: bin/oiiotool: /usr/lib/x86_64-linux-gnu/libboost_date_time.so\n  150: bin/oiiotool: /usr/lib/x86_64-linux-gnu/libboost_atomic.so\n  151  bin/oiiotool: /usr/local/lib/libOpenEXR-2_5_d.so.26.0.1\n  152  bin/oiiotool: /usr/local/lib/libImath-3_0.so.26.0.0\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/oiiotool/CMakeFiles/oiiotool.dir/CXX.includecache:\n  704  oiiotool.h\n  705  /home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/oiiotool.h\n  706: boost/regex.hpp\n  707  -\n  708  regex\n  ...\n  714  memory\n  715  -\n  716: boost/container/flat_set.hpp\n  717  -\n  718  OpenImageIO/color.h\n  ...\n  762  oiiotool.h\n  763  /home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/oiiotool.h\n  764: boost/regex.hpp\n  765  -\n  766  regex\n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/oiiotool/CMakeFiles/oiiotool.dir/link.txt:\n    1: /usr/bin/c++  -O3 -DNDEBUG   CMakeFiles/oiiotool.dir/diff.cpp.o CMakeFiles/oiiotool.dir/imagerec.cpp.o CMakeFiles/oiiotool.dir/oiiotool.cpp.o CMakeFiles/oiiotool.dir/printinfo.cpp.o  -o ../../bin/oiiotool  -Wl,-rpath,/home/max/dev/Lava/third_party/OpenImageIO/build/lib:/usr/local/lib: ../../lib/libOpenImageIO.so.2.3.1 /usr/lib/x86_64-linux-gnu/libboost_filesystem.so /usr/lib/x86_64-linux-gnu/libboost_system.so /usr/lib/x86_64-linux-gnu/libboost_thread.so -lpthread /usr/lib/x86_64-linux-gnu/libboost_chrono.so /usr/lib/x86_64-linux-gnu/libboost_date_time.so /usr/lib/x86_64-linux-gnu/libboost_atomic.so -lrt /usr/local/lib/libOpenEXR-2_5_d.so.26.0.1 /usr/local/lib/libImath-3_0.so.26.0.0 /usr/local/lib/libIlmThread-2_5_d.so.26.0.1 /usr/local/lib/libIex-2_5_d.so.26.0.1 /usr/lib/x86_64-linux-gnu/libz.so /usr/local/lib/libopencv_core.so /usr/local/lib/libopencv_imgproc.so /usr/local/lib/libopencv_videoio.so -lpthread \n    2  \n\n/home/max/dev/Lava/third_party/OpenImageIO/build/src/testtex/CMakeFiles/testtex.dir/CXX.includecache:\n  664  tsl/robin_map.h\n  665  -\n  666: boost/container/flat_map.hpp\n  667  -\n  668: boost/thread/tss.hpp\n  669  -\n  670  OpenImageIO/export.h\n\n/home/max/dev/Lava/third_party/OpenImageIO/CHANGES.md:\n  134      - Windows fix: correct OIIO_API declaration on aligned_malloc,\n  135        aligned_free of platform.h. #2701 (2.3.0.0)\n  136:     - Fix boost linkage problem on Windows. #2727 (2.3.0.1/2.2.8)\n  137  \n  138  Notable documentation changes:\n  ...\n  151  * Fix stack overflow crash in IBA::colorconvert of unusually wide images.\n  152    #2716\n  153: * Fix boost linkage problem on Windows. #2727\n  154  * Fix broken reads of 16 bit iff files. #2736\n  155  * Fix make_texture incorrectly setting tile sizes. #2737\n  ...\n  475    and changed a lot that happen in release builds to only print the error\n  476    but not force a termination. #2435 (2.1.11/2.2.0)\n  477: * Internals: Replaced most uses of `boost::thread_specific_ptr` with C++11\n  478    `thread_local`. #2431 (2.2.0)\n  479  * oiiotool: Big overhaul and simplification of internals. #2586 #2589 (2.2.3)\n  ...\n  516      - Build properly against OpenColorIO's current master (which is the\n  517        in-progress work on OCIO v2). #2530 (2.2.2)\n  518:     - Fix static boost to not overlink on Windows. #2537 (2.2.2)\n  519      - Fix build breaks against TOT libtiff master, which had `#define`\n  520        clashes with our GPSTag enum values. #2539 (2.2.2)\n  ...\n  685  * Build: fix problems when compiling against current libtiff master (symbol\n  686    clash on GPSTAG values). #2539\n  687: * Build: Fix static boost to not overlink. #2537.\n  688  * Fix some problems with the docs. #2541\n  689  * `AttrDelegate::as_vec<>` returns the whole attribute as a std::vector.\n  ...\n 1209  * Fix compiler warnings on Windows. #2209 #2213 #2214 #2392\n 1210  * Crashes in the command line utilities now attempt to print a stack trace\n 1211:   to aid in debugging (but only if OIIO is built with Boost >= 1.65, because\n 1212:   it relies on the Boost stacktrace library). #2229 (2.0.8/2.1.1)\n 1213  * Add gcc9 to Travis tet matrix and fix gcc9 related warnings. #2235 (2.1.2)\n 1214  * VDB reader pulled in the TBB libraries using the wrong CMake variable.\n ....\n 1216  * The embedded `fmt` implementation has been updated to fix windows\n 1217    warnings. #2280 (2.1.3)\n 1218: * Improvements for finding certain new Boost versions. #2293 (2.0.10/2.1.3)\n 1219  * Build fixes for MinGW. #2304, #2308 (2.0.10/2.1.3)\n 1220  * libraw: Fixes to make it build properly against some changes in the\n ....\n 1308  * sysutil.h:\n 1309      - Added `stacktrace()` and `setup_crash_stacktrace()`. (Only functional\n 1310:       if OIIO is built with Boost >= 1.65, because it relies on the Boost\n 1311        stacktrace library). #2229 (2.0.8/2.1.1)\n 1312  * unittest.h:\n ....\n 1397    \"rawcolor\" hints from the original open. #2285\n 1398  * Nuke txWriter updates that expose additional make_texture controls. #2290\n 1399: * Build system: Improvements for finding certain new Boost versions. #2293\n 1400  * Build system: Improvements finding OpenEXR installation.\n 1401  * Fix bugs when reading TIFF \"cmyk\" files. #2292.\n ....\n 1453    directory not being writable, etc. #2181\n 1454  * Crashes in the command line utilities now attempt to print a stack trace\n 1455:   to aid in debugging (but only if OIIO is built with Boost >= 1.65, because\n 1456:   it relies on the Boost stacktrace library). #2229\n 1457  * Dev goodies: fmath.h's powwroundup/pow2rounddown have been renamed\n 1458    ceil2/floor2 to reflect future C++ standard. The old names still work, so\n ....\n 1619  * **Python binding overhaul**\n 1620    The Python bindings have been reimplemented with\n 1621:   [`pybind11`](https://github.com/pybind/pybind11), no longer with Boost.Python.\n 1622    #1801 (1.9.1)\n 1623    In the process (partly due to what's easy or hard in pybind11, but partly\n ....\n 1941    the right default origin. #1997 (1.8.14/1.9.4)\n 1942  * ImageSpec::erase_attribute() fix bug where it got case-sensitivity of the\n 1943:   search backwards when built using std::regex rather than boost::regex.\n 1944    #2003 (1.8.14/1.9.4)\n 1945  * DPX:\n ....\n 2010  * Build: Fix broken build when Freetype was not found or disabled. #1800\n 2011    (1.8.6/1.9.1)\n 2012: * Build: Boost.Python is no longer a dependency, but `pybind11` is. If\n 2013    not found on the system, it will be automatically downloaded. #1801, #2031\n 2014    (1.9.1)\n\n/home/max/dev/Lava/third_party/OpenImageIO/conanfile.txt:\n    4  libpng/1.6.37\n    5  openexr/2.4.0\n    6: boost/1.70.0\n    7  libjpeg/9c\n    8  libjpeg-turbo/2.0.2\n\n/home/max/dev/Lava/third_party/OpenImageIO/CONTRIBUTING.md:\n  185  \n  186  If your class is extremely similar to, or modeled after, something in the\n  187: standard library, Boost, or something else we interoperate with, it's ok to\n  188  use their naming conventions. For example, very general utility classes and\n  189: templates (the kind of thing you would normally find in std or boost) should\n  190  be lower case with underscores separating words, as they would be if they\n  191  were standards.\n  ...\n  220  #### Third-party libraries\n  221  \n  222: Prefer C++11 `std` rather than Boost, where both can do the same task.\n  223: Feel free to use Boost classes you already see in the code base, but don't\n  224: use any Boost you don't see us already using, without first checking with\n  225  the project leader.\n  226  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/fmt/ChangeLog.rst:\n  943  \n  944  * Optimized format string parsing and argument processing which resulted in up\n  945:   to 5x speed up on long format strings and significant performance boost on\n  946    various benchmarks. For example, version 5.2 is 2.22x faster than 5.1 on\n  947    decimal integer formatting with ``format_to`` (macOS, clang-902.0.39.2):\n  ...\n 2509    <https://github.com/fmtlib/fmt#compile-time-and-code-bloat>`_,\n 2510    cppformat is close to ``printf`` and by the order of magnitude better than\n 2511:   Boost Format in terms of compiled code size.\n 2512  \n 2513  * Improved appearance of the documentation on mobile by using the `Sphinx\n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/fmt/doc/index.rst:\n   11       <div class=\"panel-body\">\n   12         Thanks for creating this library. It’s been a hole in C++ for\n   13:        aa long time. I’ve used both <code>boost::format</code> and\n   14         <code>loki::SPrintf</code>, and neither felt like the right answer.\n   15         This does.\n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/fmt/README.rst:\n  168  libc++            std::ostream    3.05\n  169  {fmt} 6.1.1       fmt::print      0.75\n  170: Boost Format 1.67 boost::format   7.24\n  171  Folly Format      folly::format   2.23\n  172  ================= ============= ===========\n  ...\n  209  iostreams                31.1                   59                 55\n  210  {fmt}                    19.0                   37                 34\n  211: Boost Format             91.9                  226                203\n  212  Folly Format            115.7                  101                 88\n  213  ============= =============== ==================== ==================\n  214  \n  215  As you can see, {fmt} has 60% less overhead in terms of resulting binary code\n  216: size compared to iostreams and comes pretty close to ``printf``. Boost Format\n  217  and Folly Format have the largest overheads.\n  218  \n  ...\n  229  iostreams                28.3                   56                 52\n  230  {fmt}                    18.2                   59                 50\n  231: Boost Format             54.1                  365                303\n  232  Folly Format             79.9                  445                430\n  233  ============= =============== ==================== ==================\n  234  \n  235  ``libc``, ``lib(std)c++`` and ``libfmt`` are all linked as shared libraries to\n  236: compare formatting function overhead only. Boost Format is a\n  237  header-only library so it doesn't provide any linkage options.\n  238  \n  ...\n  357  \n  358  There are plenty of methods for doing this task, from standard ones like\n  359: the printf family of function and iostreams to Boost Format and FastFormat\n  360  libraries. The reason for creating a new library is that every existing\n  361  solution that I found either had serious issues or didn't provide\n  ...\n  396  error handling is awkward.\n  397  \n  398: Boost Format\n  399  ~~~~~~~~~~~~\n  400  \n  401  This is a very powerful library which supports both ``printf``-like format\n  402  strings and positional arguments. Its main drawback is performance. According to\n  403: various benchmarks it is much slower than other methods considered here. Boost\n  404  Format also has excessive build times and severe code bloat issues (see\n  405  `Benchmarks`_).\n  ...\n  421  too restrictive for using it in some projects.\n  422  \n  423: Boost Spirit.Karma\n  424  ~~~~~~~~~~~~~~~~~~\n  425  \n  ...\n  483  The benchmark section of this readme file and the performance tests are taken\n  484  from the excellent `tinyformat <https://github.com/c42f/tinyformat>`_ library\n  485: written by Chris Foster.  Boost Format library is acknowledged transitively\n  486  since it had some influence on tinyformat.\n  487  Some ideas used in the implementation are borrowed from `Loki\n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/fmt/test/gmock/gmock.h:\n  947  };\n  948  \n  949: // Mapping from booleans to types. Similar to boost::bool_<kValue> and\n  950  // std::integral_constant<bool, kValue>.\n  951  template <bool kValue>\n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/fmt/test/gtest/gtest.h:\n 1670  # elif GTEST_OS_SYMBIAN\n 1671  \n 1672: // On Symbian, BOOST_HAS_TR1_TUPLE causes Boost's TR1 tuple library to\n 1673  // use STLport's tuple implementation, which unfortunately doesn't\n 1674  // work as the copy of STLport distributed with Symbian is incomplete.\n 1675: // By making sure BOOST_HAS_TR1_TUPLE is undefined, we force Boost to\n 1676  // use its own tuple implementation.\n 1677: #  ifdef BOOST_HAS_TR1_TUPLE\n 1678: #   undef BOOST_HAS_TR1_TUPLE\n 1679: #  endif  // BOOST_HAS_TR1_TUPLE\n 1680  \n 1681: // This prevents <boost/tr1/detail/config.hpp>, which defines\n 1682: // BOOST_HAS_TR1_TUPLE, from being #included by Boost's <tuple>.\n 1683: #  define BOOST_TR1_DETAIL_CONFIG_HPP_INCLUDED\n 1684  #  include <tuple>\n 1685  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/.travis.yml:\n   47    apt:\n   48      packages:\n   49:       - libboost-test-dev\n   50        - lcov\n   51  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/appveyor.yml:\n    1  environment:\n    2:     BOOST_ROOT: C:\\Libraries\\boost_1_67_0\n    3      matrix:\n    4          - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n    5            ARCH: Win32\n    6:           BOOST_LIBRARYDIR: C:\\Libraries\\boost_1_67_0\\lib32-msvc-14.0\n    7            CMAKE_GENERATOR: Visual Studio 14 2015\n    8  \n    9          - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015\n   10            ARCH: x64\n   11:           BOOST_LIBRARYDIR: C:\\Libraries\\boost_1_67_0\\lib64-msvc-14.0\n   12            CMAKE_GENERATOR: Visual Studio 14 2015 Win64\n   13  \n   14          - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n   15            ARCH: Win32\n   16:           BOOST_LIBRARYDIR: C:\\Libraries\\boost_1_67_0\\lib32-msvc-14.1\n   17            CMAKE_GENERATOR: Visual Studio 15 2017\n   18            CXXFLAGS: /permissive-\n   ..\n   20          - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\n   21            ARCH: x64\n   22:           BOOST_LIBRARYDIR: C:\\Libraries\\boost_1_67_0\\lib64-msvc-14.1\n   23            CMAKE_GENERATOR: Visual Studio 15 2017 Win64\n   24            CXXFLAGS: /permissive-\n   ..\n   36  \n   37  test_script: \n   38:     - set PATH=%PATH%;%BOOST_LIBRARYDIR%\n   39      - .\\%CONFIGURATION%\\tsl_robin_map_tests.exe\n   40  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/CMakeLists.txt:\n    6  \n    7  add_library(robin_map INTERFACE)\n    8: # Use tsl::robin_map as target, more consistent with other libraries conventions (Boost, Qt, ...)\n    9  add_library(tsl::robin_map ALIAS robin_map)\n   10  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/README.md:\n   94  The code should work with any C++11 standard-compliant compiler and has been tested with GCC 4.8.4, Clang 3.5.0 and Visual Studio 2015.\n   95  \n   96: To run the tests you will need the Boost Test library and CMake.\n   97  \n   98  ```bash\n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/tests/CMakeLists.txt:\n   17  endif()\n   18  \n   19: # Boost::unit_test_framework\n   20: find_package(Boost 1.54.0 REQUIRED COMPONENTS unit_test_framework)\n   21: target_link_libraries(tsl_robin_map_tests PRIVATE Boost::unit_test_framework)   \n   22  \n   23  # tsl::robin_map\n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/tests/custom_allocator_tests.cpp:\n   22   * SOFTWARE.\n   23   */\n   24: #define BOOST_TEST_DYN_LINK\n   25  \n   26  \n   27: #include <boost/test/unit_test.hpp>\n   28  #include <cstddef>\n   29  #include <cstdlib>\n   ..\n  130  // }\n  131  \n  132: BOOST_AUTO_TEST_SUITE(test_custom_allocator)\n  133  \n  134: BOOST_AUTO_TEST_CASE(test_custom_allocator_1) {\n  135  //    nb_global_new = 0;\n  136      nb_custom_allocs = 0;\n  ...\n  144      }\n  145      \n  146:     BOOST_CHECK_NE(nb_custom_allocs, 0);\n  147: //    BOOST_CHECK_EQUAL(nb_global_new, 0);\n  148  }\n  149  \n  150: BOOST_AUTO_TEST_SUITE_END()\n  151  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/tests/main.cpp:\n   22   * SOFTWARE.\n   23   */\n   24: #define BOOST_TEST_MODULE robin_map_tests\n   25: #define BOOST_TEST_DYN_LINK\n   26  \n   27  \n   28: #include <boost/test/unit_test.hpp>\n   29  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/tests/policy_tests.cpp:\n   22   * SOFTWARE.\n   23   */\n   24: #define BOOST_TEST_DYN_LINK\n   25  \n   26: #include <boost/test/unit_test.hpp>\n   27: #include <boost/mpl/list.hpp> \n   28  #include <cstddef>\n   29  #include <limits>\n   ..\n   35  \n   36  \n   37: BOOST_AUTO_TEST_SUITE(test_policy)\n   38  \n   39: using test_types = boost::mpl::list<tsl::rh::power_of_two_growth_policy<2>,\n   40                                      tsl::rh::power_of_two_growth_policy<4>,\n   41                                      tsl::rh::prime_growth_policy,\n   ..\n   44  \n   45  \n   46: BOOST_AUTO_TEST_CASE_TEMPLATE(test_policy, Policy, test_types) {\n   47      // Call next_bucket_count() on the policy until we reach its max_bucket_count()\n   48      std::size_t bucket_count = 0;\n   49      Policy policy(bucket_count);\n   50      \n   51:     BOOST_CHECK_EQUAL(policy.bucket_for_hash(0), 0);\n   52:     BOOST_CHECK_EQUAL(bucket_count, 0);\n   53      \n   54  #ifndef TSL_RH_NO_EXCEPTIONS\n   ..\n   61              policy = Policy(bucket_count);\n   62              \n   63:             BOOST_CHECK_EQUAL(policy.bucket_for_hash(0), 0);\n   64:             BOOST_CHECK(bucket_count > previous_bucket_count);\n   65          }\n   66      }\n   ..\n   69      }\n   70      \n   71:     BOOST_CHECK(exception_thrown);\n   72  #endif\n   73  }\n   74  \n   75: BOOST_AUTO_TEST_CASE_TEMPLATE(test_policy_min_bucket_count, Policy, test_types) {\n   76      // Check polcy when a bucket_count of 0 is asked.\n   77      std::size_t bucket_count = 0;\n   78      Policy policy(bucket_count);\n   79      \n   80:     BOOST_CHECK_EQUAL(policy.bucket_for_hash(0), 0);\n   81  }\n   82  \n   83: BOOST_AUTO_TEST_CASE_TEMPLATE(test_policy_max_bucket_count, Policy, test_types) {\n   84      // Test a bucket_count equals to the max_bucket_count limit and above\n   85      std::size_t bucket_count = 0;\n   ..\n  100  \n  101  \n  102: BOOST_AUTO_TEST_SUITE_END()\n  103  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/tests/robin_map_tests.cpp:\n   22   * SOFTWARE.\n   23   */\n   24: #define BOOST_TEST_DYN_LINK\n   25  \n   26  \n   27: #include <boost/test/unit_test.hpp>\n   28: #include <boost/mpl/list.hpp>\n   29  #include <cstddef>\n   30  #include <cstdint>\n   ..\n   43  \n   44  \n   45: BOOST_AUTO_TEST_SUITE(test_robin_map)\n   46  \n   47  \n   48  \n   49: using test_types = boost::mpl::list<\n   50                          tsl::robin_map<std::int64_t, std::int64_t>,\n   51                          tsl::robin_map<std::string, std::string>,\n   ..\n   79   * insert\n   80   */                                      \n   81: BOOST_AUTO_TEST_CASE_TEMPLATE(test_insert, HMap, test_types) {\n   82      // insert x values, insert them again, check values\n   83      using key_t = typename HMap::key_type; using value_t = typename HMap:: mapped_type;\n   ..\n   85      const std::size_t nb_values = 1000;\n   86      HMap map(0);\n   87:     BOOST_CHECK_EQUAL(map.bucket_count(), 0);\n   88      \n   89      typename HMap::iterator it;\n   ..\n   93          std::tie(it, inserted) = map.insert({utils::get_key<key_t>(i), utils::get_value<value_t>(i)});\n   94          \n   95:         BOOST_CHECK_EQUAL(it->first, utils::get_key<key_t>(i));\n   96:         BOOST_CHECK_EQUAL(it->second, utils::get_value<value_t>(i));\n   97:         BOOST_CHECK(inserted);\n   98      }\n   99:     BOOST_CHECK_EQUAL(map.size(), nb_values);\n  100      \n  101      for(std::size_t i = 0; i < nb_values; i++) {\n  102          std::tie(it, inserted) = map.insert({utils::get_key<key_t>(i), utils::get_value<value_t>(i + 1)});\n  103          \n  104:         BOOST_CHECK_EQUAL(it->first, utils::get_key<key_t>(i));\n  105:         BOOST_CHECK_EQUAL(it->second, utils::get_value<value_t>(i));\n  106:         BOOST_CHECK(!inserted);\n  107      }\n  108      \n  ...\n  110          it = map.find(utils::get_key<key_t>(i));\n  111          \n  112:         BOOST_CHECK_EQUAL(it->first, utils::get_key<key_t>(i));\n  113:         BOOST_CHECK_EQUAL(it->second, utils::get_value<value_t>(i));\n  114      }\n  115  }\n  116  \n  117: BOOST_AUTO_TEST_CASE(test_range_insert) {\n  118      // create a vector<std::pair> of values to insert, insert part of them in the map, check values\n  119      const int nb_values = 1000;\n  ...\n  128      \n  129      \n  130:     BOOST_CHECK_EQUAL(map.size(), 987);\n  131      \n  132:     BOOST_CHECK_EQUAL(map.at(-1), 1);\n  133:     BOOST_CHECK_EQUAL(map.at(-2), 2);\n  134      \n  135      for(int i = 10; i < nb_values - 5; i++) {\n  136:         BOOST_CHECK_EQUAL(map.at(i), i+1);\n  137      }\n  138  }\n  139  \n  140  \n  141: BOOST_AUTO_TEST_CASE(test_insert_with_hint) {\n  142      tsl::robin_map<int, int> map{{1, 0}, {2, 1}, {3, 2}};\n  143      \n  144      // Wrong hint\n  145:     BOOST_CHECK(map.insert(map.find(2), std::make_pair(3, 4)) == map.find(3));\n  146      \n  147      // Good hint\n  148:     BOOST_CHECK(map.insert(map.find(2), std::make_pair(2, 4)) == map.find(2));\n  149      \n  150      // end() hint\n  151:     BOOST_CHECK(map.insert(map.find(10), std::make_pair(2, 4)) == map.find(2));\n  152      \n  153:     BOOST_CHECK_EQUAL(map.size(), 3);\n  154      \n  155      \n  156      // end() hint, new value\n  157:     BOOST_CHECK_EQUAL(map.insert(map.find(10), std::make_pair(4, 3))->first, 4);\n  158      \n  159      // Wrong hint, new value\n  160:     BOOST_CHECK_EQUAL(map.insert(map.find(2), std::make_pair(5, 4))->first, 5);\n  161      \n  162:     BOOST_CHECK_EQUAL(map.size(), 5);\n  163  }\n  164  \n  ...\n  166   * emplace_hint\n  167   */\n  168: BOOST_AUTO_TEST_CASE(test_emplace_hint) {\n  169      tsl::robin_map<int, int> map{{1, 0}, {2, 1}, {3, 2}};\n  170      \n  171      // Wrong hint\n  172:     BOOST_CHECK(map.emplace_hint(map.find(2), std::piecewise_construct, \n  173                                                std::forward_as_tuple(3), std::forward_as_tuple(4)) == map.find(3));\n  174      \n  175      // Good hint\n  176:     BOOST_CHECK(map.emplace_hint(map.find(2), std::piecewise_construct, \n  177                                                std::forward_as_tuple(2), std::forward_as_tuple(4)) == map.find(2));\n  178      \n  179      // end() hint\n  180:     BOOST_CHECK(map.emplace_hint(map.find(10), std::piecewise_construct, \n  181                                                 std::forward_as_tuple(2), std::forward_as_tuple(4)) == map.find(2));\n  182      \n  183:     BOOST_CHECK_EQUAL(map.size(), 3);\n  184      \n  185      \n  186      // end() hint, new value\n  187:     BOOST_CHECK_EQUAL(map.emplace_hint(map.find(10), std::piecewise_construct, \n  188                                                      std::forward_as_tuple(4), std::forward_as_tuple(3))->first, 4);\n  189      \n  190      // Wrong hint, new value\n  191:     BOOST_CHECK_EQUAL(map.emplace_hint(map.find(2), std::piecewise_construct, \n  192                                                      std::forward_as_tuple(5), std::forward_as_tuple(4))->first, 5);\n  193      \n  194:     BOOST_CHECK_EQUAL(map.size(), 5);\n  195  }\n  196  \n  ...\n  198   * emplace\n  199   */\n  200: BOOST_AUTO_TEST_CASE(test_emplace) {\n  201      tsl::robin_map<std::int64_t, move_only_test> map;\n  202      tsl::robin_map<std::int64_t, move_only_test>::iterator it;\n  ...\n  207                                           std::forward_as_tuple(10),\n  208                                           std::forward_as_tuple(1));\n  209:     BOOST_CHECK_EQUAL(it->first, 10);\n  210:     BOOST_CHECK_EQUAL(it->second, move_only_test(1));\n  211:     BOOST_CHECK(inserted);\n  212      \n  213      \n  ...\n  215                                           std::forward_as_tuple(10),\n  216                                           std::forward_as_tuple(3));\n  217:     BOOST_CHECK_EQUAL(it->first, 10);\n  218:     BOOST_CHECK_EQUAL(it->second, move_only_test(1));\n  219:     BOOST_CHECK(!inserted);\n  220  }\n  221  \n  ...\n  224   * try_emplace\n  225   */\n  226: BOOST_AUTO_TEST_CASE(test_try_emplace) {\n  227      tsl::robin_map<std::int64_t, move_only_test> map;\n  228      tsl::robin_map<std::int64_t, move_only_test>::iterator it;\n  ...\n  231      \n  232      std::tie(it, inserted) = map.try_emplace(10, 1);\n  233:     BOOST_CHECK_EQUAL(it->first, 10);\n  234:     BOOST_CHECK_EQUAL(it->second, move_only_test(1));\n  235:     BOOST_CHECK(inserted);\n  236      \n  237      \n  238      std::tie(it, inserted) = map.try_emplace(10, 3);\n  239:     BOOST_CHECK_EQUAL(it->first, 10);\n  240:     BOOST_CHECK_EQUAL(it->second, move_only_test(1));\n  241:     BOOST_CHECK(!inserted);\n  242  }\n  243  \n  244: BOOST_AUTO_TEST_CASE(test_try_emplace_2) {\n  245      // Insert x values with try_emplace, insert them again, check with find.\n  246      tsl::robin_map<std::string, move_only_test> map;\n  ...\n  252          std::tie(it, inserted) = map.try_emplace(utils::get_key<std::string>(i), i);\n  253          \n  254:         BOOST_CHECK_EQUAL(it->first, utils::get_key<std::string>(i));\n  255:         BOOST_CHECK_EQUAL(it->second, move_only_test(i));\n  256:         BOOST_CHECK(inserted);\n  257      }\n  258:     BOOST_CHECK_EQUAL(map.size(), nb_values);\n  259      \n  260      for(std::size_t i = 0; i < nb_values; i++) {\n  261          std::tie(it, inserted) = map.try_emplace(utils::get_key<std::string>(i), i + 1);\n  262          \n  263:         BOOST_CHECK_EQUAL(it->first, utils::get_key<std::string>(i));\n  264:         BOOST_CHECK_EQUAL(it->second, move_only_test(i));\n  265:         BOOST_CHECK(!inserted);\n  266      }\n  267      \n  ...\n  269          it = map.find(utils::get_key<std::string>(i));\n  270          \n  271:         BOOST_CHECK_EQUAL(it->first, utils::get_key<std::string>(i));\n  272:         BOOST_CHECK_EQUAL(it->second, move_only_test(i));\n  273      }\n  274  }\n  275  \n  276: BOOST_AUTO_TEST_CASE(test_try_emplace_hint) {\n  277      tsl::robin_map<std::int64_t, move_only_test> map(0);\n  278      \n  279      // end() hint, new value\n  280      auto it = map.try_emplace(map.find(10), 10, 1);\n  281:     BOOST_CHECK_EQUAL(it->first, 10);\n  282:     BOOST_CHECK_EQUAL(it->second, move_only_test(1));\n  283      \n  284      // Good hint\n  285      it = map.try_emplace(map.find(10), 10, 3);\n  286:     BOOST_CHECK_EQUAL(it->first, 10);\n  287:     BOOST_CHECK_EQUAL(it->second, move_only_test(1));\n  288      \n  289      // Wrong hint, new value\n  290      it = map.try_emplace(map.find(10), 1, 3);\n  291:     BOOST_CHECK_EQUAL(it->first, 1);\n  292:     BOOST_CHECK_EQUAL(it->second, move_only_test(3));\n  293  }\n  294  \n  ...\n  297   * insert_or_assign\n  298   */\n  299: BOOST_AUTO_TEST_CASE(test_insert_or_assign) {\n  300      tsl::robin_map<std::int64_t, move_only_test> map;\n  301      tsl::robin_map<std::int64_t, move_only_test>::iterator it;    \n  ...\n  304      \n  305      std::tie(it, inserted) = map.insert_or_assign(10, move_only_test(1));\n  306:     BOOST_CHECK_EQUAL(it->first, 10);\n  307:     BOOST_CHECK_EQUAL(it->second, move_only_test(1));\n  308:     BOOST_CHECK(inserted);\n  309      \n  310      \n  311      std::tie(it, inserted) = map.insert_or_assign(10, move_only_test(3));\n  312:     BOOST_CHECK_EQUAL(it->first, 10);\n  313:     BOOST_CHECK_EQUAL(it->second, move_only_test(3));\n  314:     BOOST_CHECK(!inserted);\n  315  }\n  316  \n  317  \n  318: BOOST_AUTO_TEST_CASE(test_insert_or_assign_hint) {\n  319      tsl::robin_map<std::int64_t, move_only_test> map(0);\n  320      \n  321      // end() hint, new value\n  322      auto it = map.insert_or_assign(map.find(10), 10, move_only_test(1));\n  323:     BOOST_CHECK_EQUAL(it->first, 10);\n  324:     BOOST_CHECK_EQUAL(it->second, move_only_test(1));\n  325      \n  326      // Good hint\n  327      it = map.insert_or_assign(map.find(10), 10, move_only_test(3));\n  328:     BOOST_CHECK_EQUAL(it->first, 10);\n  329:     BOOST_CHECK_EQUAL(it->second, move_only_test(3));\n  330      \n  331      // Bad hint, new value\n  332      it = map.insert_or_assign(map.find(10), 1, move_only_test(3));\n  333:     BOOST_CHECK_EQUAL(it->first, 1);\n  334:     BOOST_CHECK_EQUAL(it->second, move_only_test(3));\n  335  }\n  336  \n  ...\n  340   * erase\n  341   */\n  342: BOOST_AUTO_TEST_CASE(test_range_erase_all) {\n  343      // insert x values, delete all with iterators\n  344      using HMap = tsl::robin_map<std::string, std::int64_t>;\n  ...\n  348      \n  349      auto it = map.erase(map.begin(), map.end());\n  350:     BOOST_CHECK(it == map.end());\n  351:     BOOST_CHECK(map.empty());\n  352  }\n  353  \n  354: BOOST_AUTO_TEST_CASE(test_range_erase) {\n  355      // insert x values, delete all with iterators except 10 first and 780 last values\n  356      using HMap = tsl::robin_map<std::string, std::int64_t>;\n  ...\n  363      \n  364      auto it = map.erase(it_first, it_last);\n  365:     BOOST_CHECK_EQUAL(std::distance(it, map.end()), 780);\n  366:     BOOST_CHECK_EQUAL(map.size(), 790);\n  367:     BOOST_CHECK_EQUAL(std::distance(map.begin(), map.end()), 790);\n  368      \n  369      for(auto& val: map) {\n  370:         BOOST_CHECK_EQUAL(map.count(val.first), 1);\n  371      }\n  372  }\n  373  \n  374: BOOST_AUTO_TEST_CASE_TEMPLATE(test_erase_loop, HMap, test_types) {\n  375      // insert x values, delete all one by one with iterator\n  376      std::size_t nb_values = 1000;\n  ...\n  386          --nb_values;\n  387          \n  388:         BOOST_CHECK_EQUAL(map.count(it2->first), 0);\n  389:         BOOST_CHECK_EQUAL(map.size(), nb_values);\n  390          ++it2;\n  391      }\n  392      \n  393:     BOOST_CHECK(map.empty());\n  394  }\n  395  \n  396: BOOST_AUTO_TEST_CASE_TEMPLATE(test_erase_loop_range, HMap, test_types) {\n  397      // insert x values, delete all five by five with iterators\n  398      const std::size_t hop = 5;\n  399      std::size_t nb_values = 1000;\n  400      \n  401:     BOOST_REQUIRE_EQUAL(nb_values % hop, 0);\n  402      \n  403      HMap map = utils::get_filled_hash_map<HMap>(nb_values);\n  ...\n  408          nb_values -= hop;\n  409          \n  410:         BOOST_CHECK_EQUAL(map.size(), nb_values);\n  411      }\n  412      \n  413:     BOOST_CHECK(map.empty());\n  414  }\n  415  \n  416: BOOST_AUTO_TEST_CASE_TEMPLATE(test_insert_erase_insert, HMap, test_types) {\n  417      // insert x/2 values, delete x/4 values, insert x/2 values, find each value\n  418      using key_t = typename HMap::key_type; using value_t = typename HMap:: mapped_type;\n  ...\n  427          std::tie(it, inserted) = map.insert({utils::get_key<key_t>(i), utils::get_value<value_t>(i)});\n  428          \n  429:         BOOST_CHECK_EQUAL(it->first, utils::get_key<key_t>(i));\n  430:         BOOST_CHECK_EQUAL(it->second, utils::get_value<value_t>(i));\n  431:         BOOST_CHECK(inserted);\n  432      }\n  433:     BOOST_CHECK_EQUAL(map.size(), nb_values/2);\n  434      \n  435      \n  ...\n  437      for(std::size_t i = 0; i < nb_values/2; i++) {\n  438          if(i%2 == 0) {\n  439:             BOOST_CHECK_EQUAL(map.erase(utils::get_key<key_t>(i)), 1);\n  440          }\n  441      }\n  442:     BOOST_CHECK_EQUAL(map.size(), nb_values/4);\n  443      \n  444      \n  ...\n  447          std::tie(it, inserted) = map.insert({utils::get_key<key_t>(i), utils::get_value<value_t>(i)});\n  448          \n  449:         BOOST_CHECK_EQUAL(it->first, utils::get_key<key_t>(i));\n  450:         BOOST_CHECK_EQUAL(it->second, utils::get_value<value_t>(i));\n  451:         BOOST_CHECK(inserted);\n  452      }\n  453:     BOOST_CHECK_EQUAL(map.size(), nb_values-nb_values/4);\n  454      \n  455      \n  ...\n  459              it = map.find(utils::get_key<key_t>(i));\n  460              \n  461:             BOOST_CHECK(it == map.end());\n  462          }\n  463          else {\n  464              it = map.find(utils::get_key<key_t>(i));\n  465              \n  466:             BOOST_REQUIRE(it != map.end());\n  467:             BOOST_CHECK_EQUAL(it->first, utils::get_key<key_t>(i));\n  468:             BOOST_CHECK_EQUAL(it->second, utils::get_value<value_t>(i));\n  469          }\n  470      }\n  471  }\n  472  \n  473: BOOST_AUTO_TEST_CASE(test_range_erase_same_iterators) {\n  474      // insert x values, test erase with same iterator as each parameter, check if returned mutable iterator is valid.\n  475      const std::size_t nb_values = 100;\n  ...\n  480      \n  481      tsl::robin_map<std::int64_t, std::int64_t>::iterator it_mutable = map.erase(it_const, it_const);\n  482:     BOOST_CHECK(it_const == it_mutable);\n  483:     BOOST_CHECK(map.mutable_iterator(it_const) == it_mutable);\n  484:     BOOST_CHECK_EQUAL(map.size(), 100);\n  485      \n  486      it_mutable.value() = -100;\n  487:     BOOST_CHECK_EQUAL(it_const.value(), -100);\n  488  }\n  489  \n  ...\n  491   * max_load_factor\n  492   */\n  493: BOOST_AUTO_TEST_CASE(test_max_load_factor_extreme_factors) {\n  494      tsl::robin_map<std::int64_t, std::int64_t> map;\n  495      \n  496      map.max_load_factor(0.0f);\n  497:     BOOST_CHECK_GT(map.max_load_factor(), 0.0f);\n  498      \n  499      map.max_load_factor(10.0f);\n  500:     BOOST_CHECK_LT(map.max_load_factor(), 1.0f);\n  501  }\n  502  \n  ...\n  504   * min_load_factor\n  505   */\n  506: BOOST_AUTO_TEST_CASE(test_min_load_factor_extreme_factors) {\n  507      tsl::robin_map<std::int64_t, std::int64_t> map;\n  508      \n  509:     BOOST_CHECK_EQUAL(map.min_load_factor(), 0.0f);\n  510:     BOOST_CHECK_LT(map.min_load_factor(), map.max_load_factor());\n  511      \n  512      map.min_load_factor(-10.0f);\n  513:     BOOST_CHECK_EQUAL(map.min_load_factor(), 0.0f);\n  514      \n  515      map.min_load_factor(0.9f);\n  ...\n  518      // max_load_factor should always be > min_load_factor. \n  519      // Factors should have been clamped.\n  520:     BOOST_CHECK_LT(map.min_load_factor(), map.max_load_factor());\n  521  }\n  522  \n  523: BOOST_AUTO_TEST_CASE(test_min_load_factor) {\n  524      tsl::robin_map<std::int64_t, std::int64_t> map;\n  525      \n  526      map.min_load_factor(0.15f);\n  527:     BOOST_CHECK_EQUAL(map.min_load_factor(), 0.15f);\n  528      \n  529      map.max_load_factor(0.5f);\n  530:     BOOST_CHECK_EQUAL(map.max_load_factor(), 0.5f);\n  531      \n  532      \n  ...\n  537      }\n  538      \n  539:     BOOST_CHECK_GT(map.load_factor(), map.min_load_factor());\n  540:     // Can't use BOOST_CHECK_CLOSE with -fno-exceptions\n  541:     BOOST_CHECK(std::abs(map.load_factor() - 0.5f) < 0.005f);\n  542      \n  543      \n  ...\n  549      map.insert({utils::get_key<std::int64_t>(map.bucket_count()), \n  550                  utils::get_value<std::int64_t>(map.bucket_count())});\n  551:     BOOST_CHECK_GT(map.load_factor(), map.min_load_factor());\n  552  }\n  553  \n  ...\n  555   * rehash\n  556   */\n  557: BOOST_AUTO_TEST_CASE(test_rehash_empty) {\n  558      // test rehash(0), test find/erase/insert on map.\n  559      const std::size_t nb_values = 100;\n  ...\n  561      \n  562      const std::size_t bucket_count = map.bucket_count();\n  563:     BOOST_CHECK(bucket_count >= nb_values);\n  564      \n  565      map.clear();\n  566:     BOOST_CHECK_EQUAL(map.bucket_count(), bucket_count);\n  567:     BOOST_CHECK(map.empty());\n  568      \n  569      map.rehash(0);\n  570:     BOOST_CHECK_EQUAL(map.bucket_count(), 0);\n  571:     BOOST_CHECK(map.empty());\n  572      \n  573      \n  574:     BOOST_CHECK(map.find(1) == map.end());\n  575:     BOOST_CHECK_EQUAL(map.erase(1), 0);\n  576:     BOOST_CHECK(map.insert({1, 10}).second);\n  577:     BOOST_CHECK_EQUAL(map.at(1), 10);\n  578  }\n  579  \n  ...\n  582   * operator== and operator!=\n  583   */\n  584: BOOST_AUTO_TEST_CASE(test_compare) {\n  585      const tsl::robin_map<std::string, std::int64_t> map1 = {{\"a\", 1}, {\"e\", 5}, {\"d\", 4}, {\"c\", 3}, {\"b\", 2}};\n  586      const tsl::robin_map<std::string, std::int64_t> map1_copy = {{\"e\", 5}, {\"c\", 3}, {\"b\", 2}, {\"a\", 1}, {\"d\", 4}};\n  ...\n  590      const tsl::robin_map<std::string, std::int64_t> map5 = {{\"a\", 1}, {\"e\", 5}, {\"d\", 4}, {\"c\", 3}, {\"z\", 2}};\n  591      \n  592:     BOOST_CHECK(map1 == map1_copy);\n  593:     BOOST_CHECK(map1_copy == map1);\n  594      \n  595:     BOOST_CHECK(map1 != map2);\n  596:     BOOST_CHECK(map2 != map1);\n  597      \n  598:     BOOST_CHECK(map1 != map3);\n  599:     BOOST_CHECK(map3 != map1);\n  600      \n  601:     BOOST_CHECK(map1 != map4);\n  602:     BOOST_CHECK(map4 != map1);\n  603      \n  604:     BOOST_CHECK(map1 != map5);\n  605:     BOOST_CHECK(map5 != map1);\n  606      \n  607:     BOOST_CHECK(map2 != map3);\n  608:     BOOST_CHECK(map3 != map2);\n  609      \n  610:     BOOST_CHECK(map2 != map4);\n  611:     BOOST_CHECK(map4 != map2);\n  612      \n  613:     BOOST_CHECK(map2 != map5);\n  614:     BOOST_CHECK(map5 != map2);\n  615      \n  616:     BOOST_CHECK(map3 != map4);\n  617:     BOOST_CHECK(map4 != map3);\n  618      \n  619:     BOOST_CHECK(map3 != map5);\n  620:     BOOST_CHECK(map5 != map3);\n  621      \n  622:     BOOST_CHECK(map4 != map5);\n  623:     BOOST_CHECK(map5 != map4);\n  624  }\n  625  \n  ...\n  630   * clear\n  631   */\n  632: BOOST_AUTO_TEST_CASE(test_clear) {\n  633      // insert x values, clear map, test insert\n  634      using HMap = tsl::robin_map<std::int64_t, std::int64_t>;\n  ...\n  638      \n  639      map.clear();\n  640:     BOOST_CHECK_EQUAL(map.size(), 0);\n  641:     BOOST_CHECK_EQUAL(std::distance(map.begin(), map.end()), 0);\n  642      \n  643      map.insert({5, -5});\n  644      map.insert({{1, -1}, {2, -1}, {4, -4}, {3, -3}});\n  645      \n  646:     BOOST_CHECK(map == (HMap({{5, -5}, {1, -1}, {2, -1}, {4, -4}, {3, -3}})));\n  647  }\n  648  \n  ...\n  651   * iterator.value()\n  652   */\n  653: BOOST_AUTO_TEST_CASE(test_modify_value_through_iterator) {\n  654      // insert x values, modify value of even keys with iterators, check values\n  655      const std::size_t nb_values = 100;\n  ...\n  664      for(auto& val : map) {\n  665          if(val.first % 2 == 0) {\n  666:             BOOST_CHECK_EQUAL(val.second, -1);\n  667          }\n  668          else {\n  669:             BOOST_CHECK_NE(val.second, -1);\n  670          }\n  671      }\n  ...\n  675   * constructor\n  676   */\n  677: BOOST_AUTO_TEST_CASE(test_extreme_bucket_count_value_construction) {\n  678      TSL_RH_CHECK_THROW((tsl::robin_map<int, int, std::hash<int>, std::equal_to<int>, \n  679                                        std::allocator<std::pair<int, int>>, false,\n  ...\n  706  }\n  707  \n  708: BOOST_AUTO_TEST_CASE(test_range_construct) {\n  709      tsl::robin_map<int, int> map = {{2, 1}, {1, 0}, {3, 2}};\n  710      \n  ...\n  717   * operator=(std::initializer_list)\n  718   */\n  719: BOOST_AUTO_TEST_CASE(test_assign_operator) {\n  720      tsl::robin_map<std::int64_t, std::int64_t> map = {{0, 10}, {-2, 20}};\n  721:     BOOST_CHECK_EQUAL(map.size(), 2);\n  722      \n  723      map = {{1, 3}, {2, 4}};\n  724:     BOOST_CHECK_EQUAL(map.size(), 2);\n  725:     BOOST_CHECK_EQUAL(map.at(1), 3);\n  726:     BOOST_CHECK_EQUAL(map.at(2), 4);\n  727:     BOOST_CHECK(map.find(0) == map.end());\n  728      \n  729      map = {};\n  730:     BOOST_CHECK(map.empty());\n  731  }\n  732  \n  ...\n  735   * move/copy constructor/operator\n  736   */\n  737: BOOST_AUTO_TEST_CASE(test_move_constructor) {\n  738      // insert x values in map, move map into map_move with move constructor, check map and map_move, \n  739      // insert additional values in map_move, check map_move\n  ...\n  744      HMap map_move(std::move(map));\n  745      \n  746:     BOOST_CHECK(map_move == utils::get_filled_hash_map<HMap>(nb_values));\n  747:     BOOST_CHECK(map == (HMap()));\n  748  \n  749      \n  ...\n  753      }\n  754      \n  755:     BOOST_CHECK_EQUAL(map_move.size(), nb_values*2);\n  756:     BOOST_CHECK(map_move == utils::get_filled_hash_map<HMap>(nb_values*2));\n  757  }\n  758  \n  759: BOOST_AUTO_TEST_CASE(test_move_constructor_empty) {\n  760      tsl::robin_map<std::string, move_only_test> map(0);\n  761      tsl::robin_map<std::string, move_only_test> map_move(std::move(map));\n  762      \n  763:     BOOST_CHECK(map.empty());\n  764:     BOOST_CHECK(map_move.empty());\n  765      \n  766:     BOOST_CHECK(map.find(\"\") == map.end());\n  767:     BOOST_CHECK(map_move.find(\"\") == map_move.end());\n  768  }\n  769  \n  770: BOOST_AUTO_TEST_CASE(test_move_operator) {\n  771      // insert x values in map, move map into map_move with move operator, check map and map_move, \n  772      // insert additional values in map_move, check map_move\n  ...\n  778      map_move = std::move(map);\n  779      \n  780:     BOOST_CHECK(map_move == utils::get_filled_hash_map<HMap>(nb_values));\n  781:     BOOST_CHECK(map == (HMap()));\n  782  \n  783      \n  ...\n  787      }\n  788      \n  789:     BOOST_CHECK_EQUAL(map_move.size(), nb_values*2);\n  790:     BOOST_CHECK(map_move == utils::get_filled_hash_map<HMap>(nb_values*2));\n  791  }\n  792  \n  793: BOOST_AUTO_TEST_CASE(test_move_operator_empty) {\n  794      tsl::robin_map<std::string, move_only_test> map(0);\n  795      tsl::robin_map<std::string, move_only_test> map_move;\n  796      map_move = (std::move(map));\n  797      \n  798:     BOOST_CHECK(map.empty());\n  799:     BOOST_CHECK(map_move.empty());\n  800      \n  801:     BOOST_CHECK(map.find(\"\") == map.end());\n  802:     BOOST_CHECK(map_move.find(\"\") == map_move.end());\n  803  }\n  804  \n  805: BOOST_AUTO_TEST_CASE(test_reassign_moved_object_move_constructor) {\n  806      using HMap = tsl::robin_map<std::string, std::string>;\n  807      \n  ...\n  809      HMap map_move(std::move(map));\n  810      \n  811:     BOOST_CHECK_EQUAL(map_move.size(), 3);\n  812:     BOOST_CHECK_EQUAL(map.size(), 0);\n  813      \n  814      map = {{\"Key4\", \"Value4\"}, {\"Key5\", \"Value5\"}};\n  815:     BOOST_CHECK(map == (HMap({{\"Key4\", \"Value4\"}, {\"Key5\", \"Value5\"}})));\n  816  }\n  817  \n  818: BOOST_AUTO_TEST_CASE(test_reassign_moved_object_move_operator) {\n  819      using HMap = tsl::robin_map<std::string, std::string>;\n  820      \n  ...\n  822      HMap map_move = std::move(map);\n  823      \n  824:     BOOST_CHECK_EQUAL(map_move.size(), 3);\n  825:     BOOST_CHECK_EQUAL(map.size(), 0);\n  826      \n  827      map = {{\"Key4\", \"Value4\"}, {\"Key5\", \"Value5\"}};\n  828:     BOOST_CHECK(map == (HMap({{\"Key4\", \"Value4\"}, {\"Key5\", \"Value5\"}})));\n  829  }\n  830  \n  831: BOOST_AUTO_TEST_CASE(test_use_after_move_constructor) {\n  832      using HMap = tsl::robin_map<std::string, move_only_test>;\n  833      \n  ...\n  837      \n  838      \n  839:     BOOST_CHECK(map == (HMap()));\n  840:     BOOST_CHECK_EQUAL(map.size(), 0);\n  841:     BOOST_CHECK_EQUAL(map.bucket_count(), 0);\n  842:     BOOST_CHECK_EQUAL(map.erase(\"a\"), 0);\n  843:     BOOST_CHECK(map.find(\"a\") == map.end());\n  844      \n  845      for(std::size_t i = 0; i < nb_values; i++) {\n  ...\n  847      }\n  848      \n  849:     BOOST_CHECK_EQUAL(map.size(), nb_values);\n  850:     BOOST_CHECK(map == map_move);\n  851  }\n  852  \n  853: BOOST_AUTO_TEST_CASE(test_use_after_move_operator) {\n  854      using HMap = tsl::robin_map<std::string, move_only_test>;\n  855      \n  ...\n  860      \n  861      \n  862:     BOOST_CHECK(map == (HMap()));\n  863:     BOOST_CHECK_EQUAL(map.size(), 0);\n  864:     BOOST_CHECK_EQUAL(map.bucket_count(), 0);\n  865:     BOOST_CHECK_EQUAL(map.erase(\"a\"), 0);\n  866:     BOOST_CHECK(map.find(\"a\") == map.end());\n  867      \n  868      for(std::size_t i = 0; i < nb_values; i++) {\n  ...\n  870      }\n  871      \n  872:     BOOST_CHECK_EQUAL(map.size(), nb_values);\n  873:     BOOST_CHECK(map == map_move);\n  874  }\n  875  \n  876: BOOST_AUTO_TEST_CASE(test_copy_constructor_and_operator) {\n  877      using HMap = tsl::robin_map<std::string, std::string, mod_hash<9>>;\n  878      \n  ...\n  886      map_copy3 = map;\n  887      \n  888:     BOOST_CHECK(map == map_copy);\n  889      map.clear();\n  890      \n  891:     BOOST_CHECK(map_copy == map_copy2);\n  892:     BOOST_CHECK(map_copy == map_copy3);\n  893  }\n  894  \n  895: BOOST_AUTO_TEST_CASE(test_copy_constructor_empty) {\n  896      tsl::robin_map<std::string, int> map(0);\n  897      tsl::robin_map<std::string, int> map_copy(map);\n  898      \n  899:     BOOST_CHECK(map.empty());\n  900:     BOOST_CHECK(map_copy.empty());\n  901      \n  902:     BOOST_CHECK(map.find(\"\") == map.end());\n  903:     BOOST_CHECK(map_copy.find(\"\") == map_copy.end());\n  904  }\n  905  \n  906: BOOST_AUTO_TEST_CASE(test_copy_operator_empty) {\n  907      tsl::robin_map<std::string, int> map(0);\n  908      tsl::robin_map<std::string, int> map_copy(16);\n  909      map_copy = map;\n  910      \n  911:     BOOST_CHECK(map.empty());\n  912:     BOOST_CHECK(map_copy.empty());\n  913      \n  914:     BOOST_CHECK(map.find(\"\") == map.end());\n  915:     BOOST_CHECK(map_copy.find(\"\") == map_copy.end());\n  916  }\n  917  \n  ...\n  920   * at\n  921   */\n  922: BOOST_AUTO_TEST_CASE(test_at) {\n  923      // insert x values, use at for known and unknown values.\n  924      const tsl::robin_map<std::int64_t, std::int64_t> map = {{0, 10}, {-2, 20}};\n  925      \n  926:     BOOST_CHECK_EQUAL(map.at(0), 10);\n  927:     BOOST_CHECK_EQUAL(map.at(-2), 20);\n  928      TSL_RH_CHECK_THROW(map.at(1), std::out_of_range);\n  929  }\n  ...\n  932   * contains\n  933   */\n  934: BOOST_AUTO_TEST_CASE(test_contains) {\n  935      tsl::robin_map<std::int64_t, std::int64_t> map = {{0, 10}, {-2, 20}};\n  936      \n  937:     BOOST_CHECK(map.contains(0));\n  938:     BOOST_CHECK(map.contains(-2));\n  939:     BOOST_CHECK(!map.contains(-3));\n  940  }\n  941  \n  ...\n  943   * equal_range\n  944   */\n  945: BOOST_AUTO_TEST_CASE(test_equal_range) {\n  946      const tsl::robin_map<std::int64_t, std::int64_t> map = {{0, 10}, {-2, 20}};\n  947      \n  948      auto it_pair = map.equal_range(0);\n  949:     BOOST_REQUIRE_EQUAL(std::distance(it_pair.first, it_pair.second), 1);\n  950:     BOOST_CHECK_EQUAL(it_pair.first->second, 10);\n  951      \n  952      it_pair = map.equal_range(1);\n  953:     BOOST_CHECK(it_pair.first == it_pair.second);\n  954:     BOOST_CHECK(it_pair.first == map.end());\n  955  }\n  956  \n  ...\n  959   * operator[]\n  960   */\n  961: BOOST_AUTO_TEST_CASE(test_access_operator) {\n  962      // insert x values, use at for known and unknown values.\n  963      tsl::robin_map<std::int64_t, std::int64_t> map = {{0, 10}, {-2, 20}};\n  964      \n  965:     BOOST_CHECK_EQUAL(map[0], 10);\n  966:     BOOST_CHECK_EQUAL(map[-2], 20);\n  967:     BOOST_CHECK_EQUAL(map[2], std::int64_t());\n  968      \n  969:     BOOST_CHECK_EQUAL(map.size(), 3);\n  970  }\n  971  \n  ...\n  975   * swap\n  976   */\n  977: BOOST_AUTO_TEST_CASE(test_swap) {\n  978      tsl::robin_map<std::int64_t, std::int64_t> map = {{1, 10}, {8, 80}, {3, 30}};\n  979      tsl::robin_map<std::int64_t, std::int64_t> map2 = {{4, 40}, {5, 50}};\n  ...\n  982      swap(map, map2);\n  983      \n  984:     BOOST_CHECK(map == (tsl::robin_map<std::int64_t, std::int64_t>{{4, 40}, {5, 50}}));\n  985:     BOOST_CHECK(map2 == (tsl::robin_map<std::int64_t, std::int64_t>{{1, 10}, {8, 80}, {3, 30}}));\n  986      \n  987      map.insert({6, 60});\n  988      map2.insert({4, 40});\n  989      \n  990:     BOOST_CHECK(map == (tsl::robin_map<std::int64_t, std::int64_t>{{4, 40}, {5, 50}, {6, 60}}));\n  991:     BOOST_CHECK(map2 == (tsl::robin_map<std::int64_t, std::int64_t>{{1, 10}, {8, 80}, {3, 30}, {4, 40}}));\n  992  }\n  993  \n  994: BOOST_AUTO_TEST_CASE(test_swap_empty) {\n  995      tsl::robin_map<std::int64_t, std::int64_t> map = {{1, 10}, {8, 80}, {3, 30}};\n  996      tsl::robin_map<std::int64_t, std::int64_t> map2;\n  ...\n  999      swap(map, map2);\n 1000      \n 1001:     BOOST_CHECK(map == (tsl::robin_map<std::int64_t, std::int64_t>{}));\n 1002:     BOOST_CHECK(map2 == (tsl::robin_map<std::int64_t, std::int64_t>{{1, 10}, {8, 80}, {3, 30}}));\n 1003      \n 1004      map.insert({6, 60});\n 1005      map2.insert({4, 40});\n 1006      \n 1007:     BOOST_CHECK(map == (tsl::robin_map<std::int64_t, std::int64_t>{{6, 60}}));\n 1008:     BOOST_CHECK(map2 == (tsl::robin_map<std::int64_t, std::int64_t>{{1, 10}, {8, 80}, {3, 30}, {4, 40}}));\n 1009  }\n 1010  \n ....\n 1012   * KeyEqual\n 1013   */\n 1014: BOOST_AUTO_TEST_CASE(test_key_equal) {\n 1015      // Use a KeyEqual and Hash where any odd unsigned number 'x' is equal to 'x-1'.\n 1016      // Make sure that KeyEqual is called (and not ==).\n ....\n 1041      \n 1042      tsl::robin_map<std::uint64_t, std::uint64_t, hash, key_equal> map;\n 1043:     BOOST_CHECK(map.insert({2, 10}).second);\n 1044:     BOOST_CHECK_EQUAL(map.at(2), 10);\n 1045:     BOOST_CHECK_EQUAL(map.at(3), 10);\n 1046:     BOOST_CHECK(!map.insert({3, 10}).second);\n 1047      \n 1048:     BOOST_CHECK_EQUAL(map.size(), 1);\n 1049  }\n 1050  \n ....\n 1054   * other\n 1055   */\n 1056: BOOST_AUTO_TEST_CASE(test_heterogeneous_lookups) {\n 1057      struct hash_ptr {\n 1058          std::size_t operator()(const std::unique_ptr<int>& p) const {\n ....\n 1107      map.insert({std::move(ptr3), 6});\n 1108      \n 1109:     BOOST_CHECK_EQUAL(map.size(), 3);\n 1110      \n 1111      \n 1112:     BOOST_CHECK_EQUAL(map.at(addr1), 4);\n 1113:     BOOST_CHECK_EQUAL(map.at(addr2), 5);\n 1114      TSL_RH_CHECK_THROW(map.at(addr_unknown), std::out_of_range);\n 1115      \n 1116      \n 1117:     BOOST_REQUIRE(map.find(addr1) != map.end());\n 1118:     BOOST_CHECK_EQUAL(*map.find(addr1)->first, 1);\n 1119      \n 1120:     BOOST_REQUIRE(map.find(addr2) != map.end());\n 1121:     BOOST_CHECK_EQUAL(*map.find(addr2)->first, 2);\n 1122      \n 1123:     BOOST_CHECK(map.find(addr_unknown) == map.end());\n 1124      \n 1125      \n 1126:     BOOST_CHECK_EQUAL(map.count(addr1), 1);\n 1127:     BOOST_CHECK_EQUAL(map.count(addr2), 1);\n 1128:     BOOST_CHECK_EQUAL(map.count(addr_unknown), 0);\n 1129      \n 1130      \n 1131:     BOOST_CHECK_EQUAL(map.erase(addr1), 1);\n 1132:     BOOST_CHECK_EQUAL(map.erase(addr2), 1);\n 1133:     BOOST_CHECK_EQUAL(map.erase(addr_unknown), 0);\n 1134      \n 1135      \n 1136:     BOOST_CHECK_EQUAL(map.size(), 1);\n 1137  }\n 1138  \n ....\n 1142   * Various operations on empty map\n 1143   */\n 1144: BOOST_AUTO_TEST_CASE(test_empty_map) {\n 1145      tsl::robin_map<std::string, int> map(0);\n 1146      \n 1147:     BOOST_CHECK_EQUAL(map.bucket_count(), 0);\n 1148:     BOOST_CHECK_EQUAL(map.size(), 0);\n 1149:     BOOST_CHECK_EQUAL(map.load_factor(), 0);\n 1150:     BOOST_CHECK(map.empty());\n 1151      \n 1152:     BOOST_CHECK(map.begin() == map.end());\n 1153:     BOOST_CHECK(map.begin() == map.cend());\n 1154:     BOOST_CHECK(map.cbegin() == map.cend());\n 1155      \n 1156:     BOOST_CHECK(map.find(\"\") == map.end());\n 1157:     BOOST_CHECK(map.find(\"test\") == map.end());\n 1158      \n 1159:     BOOST_CHECK_EQUAL(map.count(\"\"), 0);\n 1160:     BOOST_CHECK_EQUAL(map.count(\"test\"), 0);\n 1161      \n 1162:     BOOST_CHECK(!map.contains(\"\"));\n 1163:     BOOST_CHECK(!map.contains(\"test\"));\n 1164      \n 1165      TSL_RH_CHECK_THROW(map.at(\"\"), std::out_of_range);\n ....\n 1167      \n 1168      auto range = map.equal_range(\"test\");\n 1169:     BOOST_CHECK(range.first == range.second);\n 1170      \n 1171:     BOOST_CHECK_EQUAL(map.erase(\"test\"), 0);\n 1172:     BOOST_CHECK(map.erase(map.begin(), map.end()) == map.end());\n 1173      \n 1174:     BOOST_CHECK_EQUAL(map[\"new value\"], int{});\n 1175  }\n 1176  \n ....\n 1178   * Test precalculated hash\n 1179   */\n 1180: BOOST_AUTO_TEST_CASE(test_precalculated_hash) {\n 1181      tsl::robin_map<int, int, identity_hash<int>> map = {{1, -1}, {2, -2}, {3, -3}, {4, -4}, {5, -5}, {6, -6}};\n 1182      const tsl::robin_map<int, int, identity_hash<int>> map_const = map;\n ....\n 1185       * find\n 1186       */\n 1187:     BOOST_REQUIRE(map.find(3, map.hash_function()(3)) != map.end());\n 1188:     BOOST_CHECK_EQUAL(map.find(3, map.hash_function()(3))->second, -3);\n 1189      \n 1190:     BOOST_REQUIRE(map_const.find(3, map_const.hash_function()(3)) != map_const.end());\n 1191:     BOOST_CHECK_EQUAL(map_const.find(3, map_const.hash_function()(3))->second, -3);\n 1192      \n 1193:     BOOST_REQUIRE_NE(map.hash_function()(2), map.hash_function()(3));\n 1194:     BOOST_CHECK(map.find(3, map.hash_function()(2)) == map.end());\n 1195      \n 1196      /**\n 1197       * at\n 1198       */\n 1199:     BOOST_CHECK_EQUAL(map.at(3, map.hash_function()(3)), -3);\n 1200:     BOOST_CHECK_EQUAL(map_const.at(3, map_const.hash_function()(3)), -3);\n 1201      \n 1202:     BOOST_REQUIRE_NE(map.hash_function()(2), map.hash_function()(3));\n 1203      TSL_RH_CHECK_THROW(map.at(3, map.hash_function()(2)), std::out_of_range);\n 1204      \n ....\n 1206       * contains\n 1207       */\n 1208:     BOOST_CHECK(map.contains(3, map.hash_function()(3)));\n 1209:     BOOST_CHECK(map_const.contains(3, map_const.hash_function()(3)));\n 1210      \n 1211:     BOOST_REQUIRE_NE(map.hash_function()(2), map.hash_function()(3));\n 1212:     BOOST_CHECK(!map.contains(3, map.hash_function()(2)));\n 1213      \n 1214      /**\n 1215       * count\n 1216       */\n 1217:     BOOST_CHECK_EQUAL(map.count(3, map.hash_function()(3)), 1);\n 1218:     BOOST_CHECK_EQUAL(map_const.count(3, map_const.hash_function()(3)), 1);\n 1219      \n 1220:     BOOST_REQUIRE_NE(map.hash_function()(2), map.hash_function()(3));\n 1221:     BOOST_CHECK_EQUAL(map.count(3, map.hash_function()(2)), 0);\n 1222      \n 1223      /**\n ....\n 1225       */\n 1226      auto it_range = map.equal_range(3, map.hash_function()(3));\n 1227:     BOOST_REQUIRE_EQUAL(std::distance(it_range.first, it_range.second), 1);\n 1228:     BOOST_CHECK_EQUAL(it_range.first->second, -3);\n 1229      \n 1230      auto it_range_const = map_const.equal_range(3, map_const.hash_function()(3));\n 1231:     BOOST_REQUIRE_EQUAL(std::distance(it_range_const.first, it_range_const.second), 1);\n 1232:     BOOST_CHECK_EQUAL(it_range_const.first->second, -3);\n 1233      \n 1234      it_range = map.equal_range(3, map.hash_function()(2));\n 1235:     BOOST_REQUIRE_NE(map.hash_function()(2), map.hash_function()(3));\n 1236:     BOOST_CHECK_EQUAL(std::distance(it_range.first, it_range.second), 0);\n 1237      \n 1238      /**\n 1239       * erase\n 1240       */\n 1241:     BOOST_CHECK_EQUAL(map.erase(3, map.hash_function()(3)), 1);\n 1242      \n 1243:     BOOST_REQUIRE_NE(map.hash_function()(2), map.hash_function()(4));\n 1244:     BOOST_CHECK_EQUAL(map.erase(4, map.hash_function()(2)), 0);\n 1245  }\n 1246  \n 1247  \n 1248: BOOST_AUTO_TEST_SUITE_END()\n 1249  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/tests/robin_set_tests.cpp:\n   22   * SOFTWARE.\n   23   */\n   24: #define BOOST_TEST_DYN_LINK\n   25  \n   26  \n   27: #include <boost/test/unit_test.hpp>\n   28: #include <boost/mpl/list.hpp>\n   29  #include <cstddef>\n   30  #include <cstdint>\n   ..\n   39  \n   40  \n   41: BOOST_AUTO_TEST_SUITE(test_robin_set)\n   42  \n   43: using test_types = boost::mpl::list<tsl::robin_set<std::int64_t>,\n   44                                      tsl::robin_set<std::string>,\n   45                                      tsl::robin_set<self_reference_member_test>,\n   ..\n   68                                      \n   69                                      \n   70: BOOST_AUTO_TEST_CASE_TEMPLATE(test_insert, HSet, test_types) {\n   71      // insert x values, insert them again, check values\n   72      using key_t = typename HSet::key_type;\n   ..\n   80          std::tie(it, inserted) = set.insert(utils::get_key<key_t>(i));\n   81          \n   82:         BOOST_CHECK_EQUAL(*it, utils::get_key<key_t>(i));\n   83:         BOOST_CHECK(inserted);\n   84      }\n   85:     BOOST_CHECK_EQUAL(set.size(), nb_values);\n   86      \n   87      for(std::size_t i = 0; i < nb_values; i++) {\n   88          std::tie(it, inserted) = set.insert(utils::get_key<key_t>(i));\n   89          \n   90:         BOOST_CHECK_EQUAL(*it, utils::get_key<key_t>(i));\n   91:         BOOST_CHECK(!inserted);\n   92      }\n   93      \n   ..\n   95          it = set.find(utils::get_key<key_t>(i));\n   96          \n   97:         BOOST_CHECK_EQUAL(*it, utils::get_key<key_t>(i));\n   98      }\n   99  }\n  100  \n  101: BOOST_AUTO_TEST_CASE(test_compare) {\n  102      const tsl::robin_set<std::string> set1 = {\"a\", \"e\", \"d\", \"c\", \"b\"};\n  103      const tsl::robin_set<std::string> set1_copy = {\"e\", \"c\", \"b\", \"a\", \"d\"};\n  ...\n  106      const tsl::robin_set<std::string> set4 = {\"a\", \"e\", \"d\", \"c\", \"z\"};\n  107      \n  108:     BOOST_CHECK(set1 == set1_copy);\n  109:     BOOST_CHECK(set1_copy == set1);\n  110      \n  111:     BOOST_CHECK(set1 != set2);\n  112:     BOOST_CHECK(set2 != set1);\n  113      \n  114:     BOOST_CHECK(set1 != set3);\n  115:     BOOST_CHECK(set3 != set1);\n  116      \n  117:     BOOST_CHECK(set1 != set4);\n  118:     BOOST_CHECK(set4 != set1);\n  119      \n  120:     BOOST_CHECK(set2 != set3);\n  121:     BOOST_CHECK(set3 != set2);\n  122      \n  123:     BOOST_CHECK(set2 != set4);\n  124:     BOOST_CHECK(set4 != set2);\n  125      \n  126:     BOOST_CHECK(set3 != set4);\n  127:     BOOST_CHECK(set4 != set3);\n  128  }\n  129  \n  130: BOOST_AUTO_TEST_CASE(test_insert_pointer) {\n  131      // Test added mainly to be sure that the code compiles with MSVC due to a bug in the compiler.\n  132      // See robin_hash::insert_value_impl for details.\n  ...\n  138      set.emplace(value_ptr);\n  139  \n  140:     BOOST_CHECK_EQUAL(set.size(), 1);\n  141:     BOOST_CHECK_EQUAL(**set.begin(), value);\n  142  }\n  143  \n  144: BOOST_AUTO_TEST_SUITE_END()\n  145  \n\n/home/max/dev/Lava/third_party/OpenImageIO/ext/robin-map/tests/utils.h:\n   39  #define TSL_RH_CHECK_THROW(S, E)\n   40  #else\n   41: #define TSL_RH_CHECK_THROW(S, E) BOOST_CHECK_THROW(S, E)\n   42  #endif\n   43  \n\n/home/max/dev/Lava/third_party/OpenImageIO/INSTALL.md:\n  157  The following dependencies must be installed to build the core of\n  158  OpenImageIO:\n  159: * Boost\n  160  * libjpeg\n  161  * libtiff\n\n/home/max/dev/Lava/third_party/OpenImageIO/Makefile:\n  397  \t@echo \"          PTex  R3DSDK  TBB  TIFF  Webp\"\n  398  \t@echo \"  Finding and Using Dependencies:\"\n  399: \t@echo \"      BOOST_ROOT=path          Custom Boost installation\"\n  400  \t@echo \"      OPENEXR_ROOT=path        Custom OpenEXR installation\"\n  401  \t@echo \"      ILMBASE_ROOT=path        Custom IlmBase installation\"\n\n/home/max/dev/Lava/third_party/OpenImageIO/site/spi/Makefile-bits:\n  155  \n  156      #\n  157:     # Boost\n  158      #\n  159:     BOOSTVERS ?= 1.70\n  160:     BOOSTSPSUFFIX ?=\n  161:     BOOSTVERSSP=${BOOSTVERS}${BOOSTSPSUFFIX}\n  162:     MY_CMAKE_FLAGS += -DBOOST_VERS_SP=${BOOSTVERSSP}\n  163:     # $(info BOOSTVERSSP ${BOOSTVERSSP})\n  164:     ifeq (${BOOSTVERS},1.55)\n  165:         SPBOOST_INC_DIR ?= /usr/include/boost_${BOOSTVERSSP}\n  166:         SPBOOST_LIB_DIR ?= /usr/lib64/boost_${BOOSTVERSSP}\n  167:         ifeq (${BOOSTSPSUFFIX}, sp)\n  168:             SPBOOST_LIBNAMESTART ?= lib${BOOSTSPSUFFIX}boost_${shell echo ${BOOSTVERS} | sed \"s/\\\\./_/\"}_0\n  169          else\n  170:             SPBOOST_LIBNAMESTART ?= lib${BOOSTSPSUFFIX}boost\n  171          endif\n  172:         SPBOOST_LIBNAMEEND ?= -gcc48-mt-${shell echo ${BOOSTVERS} | sed \"s/\\\\./_/\"}\n  173          MY_CMAKE_FLAGS += \\\n  174:             -DBOOST_CUSTOM=1 \\\n  175:             -DBoost_VERSION=${BOOSTVERS} \\\n  176:             -DBoost_INCLUDE_DIRS=${SPBOOST_INC_DIR} \\\n  177:             -DBoost_LIBRARY_DIRS=${SPBOOST_LIB_DIR} \\\n  178:             -DBoost_LIBRARIES:STRING=\"${SPBOOST_LIB_DIR}/${SPBOOST_LIBNAMESTART}_filesystem${SPBOOST_LIBNAMEEND}.so;${SPBOOST_LIB_DIR}/${SPBOOST_LIBNAMESTART}_regex${SPBOOST_LIBNAMEEND}.so;${SPBOOST_LIB_DIR}/${SPBOOST_LIBNAMESTART}_system${SPBOOST_LIBNAMEEND}.so;${SPBOOST_LIB_DIR}/${SPBOOST_LIBNAMESTART}_thread${SPBOOST_LIBNAMEEND}.so\"\n  179      else\n  180:         # Our Boost >= 1.61 setup is MUCH simpler and more standard\n  181: \tSPBOOST_INC_DIR := /usr/include/boostroot/boost${BOOSTVERSSP}.0\n  182: \tSPBOOST_LIB_DIR := /usr/lib64/boostroot/boost${BOOSTVERSSP}.0\n  183          MY_CMAKE_FLAGS += \\\n  184:             -DBOOST_INCLUDEDIR=${SPBOOST_INC_DIR} \\\n  185:             -DBOOST_LIBRARYDIR=${SPBOOST_LIB_DIR}\n  186      endif\n  187  \n  ...\n  241      #\n  242      NUKE_VERSION ?= 11.2v3\n  243:     SPCOMP2_FULLBOOST_SUFFIX = ${SP_OS}-${SPCOMP2_COMPILER}-boost${shell echo ${BOOSTVERSSP} | sed \"s/\\\\.//\"}\n  244:     # $(info SPCOMP2_FULLBOOST_SUFFIX ${SPCOMP2_FULLBOOST_SUFFIX})\n  245      ifeq (${OIIO_SPCOMP2},1)\n  246          OCIO_SPCOMP_VERSION ?= 2\n  247          OpenColorIO_ROOT ?= ${SPCOMP2_ROOT}/OpenColorIO/${SP_OS}-${SPCOMP2_COMPILER}/v${OCIO_SPCOMP_VERSION}\n  248          # OPENVDB_SPCOMP2_VERSION ?= v6020001\n  249:         # OpenVDB_ROOT ?= ${SPCOMP2_ROOT}/openvdb/${SPCOMP2_FULLBOOST_SUFFIX}/${OPENVDB_SPCOMP2_VERSION}\n  250          OPENVDB_VERSION ?= 6.2.2-3\n  251:         OpenVDB_ROOT ?= ${REZ_PACKAGE_ROOT}/OpenVDB/${OPENVDB_VERSION}/${SPI_COMPILER_PLATFORM}/python-${PYTHON_VERSION}/boost-${BOOSTVERS}\n  252      else\n  253          OPENCOLORIO_VERSION ?= 1.1.1-1\n  ...\n  255          MY_CMAKE_FLAGS += -DOPENCOLORIO_LIBRARY=${OpenColorIO_ROOT}/lib/libOpenColorIO_SPI.so\n  256          # Anybody remember why we needed Field3d disabled for SpComp2?\n  257:         Field3D_ROOT ?= ${SPCOMP2_ROOT}/Field3D/${SPCOMP2_FULLBOOST_SUFFIX}/v412\n  258          OPENVDB_VERSION ?= 6.2.2-3\n  259:         OpenVDB_ROOT ?= ${REZ_PACKAGE_ROOT}/OpenVDB/${OPENVDB_VERSION}/${SPI_COMPILER_PLATFORM}/python-${PYTHON_VERSION}/boost-${BOOSTVERS}\n  260  \tendif\n  261      TBB_ROOT ?= /net/apps/rhel7/intel/tbb\n  ...\n  365      # NOTE: This MUST match the order and naming of the Rez variants\n  366      # set in rez/package.py.in\n  367:     REZ_INSTALL_PATH := ${REZ_PACKAGE_ROOT}/${OIIO_REZ_NAME}/${OIIO_VERS}/${SPI_COMPILER_PLATFORM}/python-${PYTHON_VERSION}/boost-${BOOSTVERSSP}\n  368      MY_CMAKE_FLAGS += -DOIIO_REZ_INSTALL_PATH=${REZ_INSTALL_PATH}\n  369      MY_CMAKE_FLAGS += -DCMAKE_INSTALL_RPATH=${REZ_INSTALL_PATH}/lib\n  ...\n  385  CPPSTDSUFFIX=\n  386  SPCOMP2_INSTALL_ROOT ?= $(SPCOMP2_ROOT)\n  387: BOOSTVERSSP?=${BOOSTVERS}${BOOSTSPSUFFIX}\n  388: SPARCH=${SP_OS}-$(SPCOMP2_COMPILER)$(CPPSTDSUFFIX)-boost$(subst .,,$(BOOSTVERSSP))\n  389  OIIO_SPCOMP2_PATH := ${SPCOMP2_INSTALL_ROOT}/OpenImageIO/${SPARCH}/v${OPENIMAGEIO_SPCOMP2_VERSION}\n  390  # $(info New rhel7 OIIO_SPCOMP2_PATH is ${OIIO_SPCOMP2_PATH})\n  ...\n  418  spcomp2_install_local: spcomp2_install\n  419  \n  420: SPCOMP2_RPATH_OPT ?= ${OpenEXR_ROOT}/lib:${OpenColorIO_ROOT}/lib:${Field3D_ROOT}/lib:${LIBRAW_LIBDIR}:${OpenVDB_ROOT}/lib:${Libheif_ROOT}/lib:shots/spi/home/lib/arnold/rhel7/libde265-1.0.3/lib:${TBB_ROOT}/lib/intel64/gcc4.7:${SPBOOST_LIB_DIR}\n  421: SPCOMP2_RPATH_DEBUG ?= ${OpenEXR_ROOT}/lib:${OpenColorIO_ROOT}/lib:${Field3D_ROOT}/lib/debug:${LIBRAW_LIBDIR}:${OpenVDB_ROOT}/lib/debug:${Libheif_ROOT}/lib:shots/spi/home/lib/arnold/rhel7/libde265-1.0.3/lib:${TBB_ROOT}/lib/intel64/gcc4.7:${SPBOOST_LIB_DIR}\n  422  PYSPCOMP2_RPATH_OPT ?= ${SPCOMP2_RPATH_OPT}:${OIIO_SPCOMP2_PATH}/lib:${PYTHON_LIBRARY_DIR}\n  423  PYSPCOMP2_RPATH_DEBUG ?= ${SPCOMP2_RPATH_DEBUG}:${OIIO_SPCOMP2_PATH}/lib/debug:${PYTHON_LIBRARY_DIR}\n  ...\n  462  \t  --arch=$(SPARCH) \\\n  463  \t  --headers=$(subst $(space),$(comma),$(wildcard ${dist_dir}/include/OpenImageIO/*)) \\\n  464: \t  --cflags= --static_lflags=\"$(LINK_BOOST) $(LINK_OPENEXR) -lpthread\" \\\n  465  \t  --namespace=${NAMESPACE} \\\n  466  \t  --srcdir=${dist_dir}/lib \\\n  ...\n  473  \t  --arch=$(SPARCH) \\\n  474  \t  --headers=$(subst $(space),$(comma),$(wildcard ${dist_dir}/include/OpenImageIO/*)) \\\n  475: \t  --cflags= --static_lflags=\"$(LINK_BOOST) $(LINK_OPENEXR) -lpthread\" \\\n  476  \t  --namespace=${NAMESPACE} \\\n  477  \t  --srcdir=${dist_dir}/lib \\\n  ...\n  483  \t  --root=$(SPCOMP2_INSTALL_ROOT) \\\n  484  \t  --arch=$(SPPYARCH) \\\n  485: \t  --cflags= --static_lflags=\"$(LINK_BOOST) $(LINK_OPENEXR) -lpthread\"\\\n  486  \t  --namespace=${NAMESPACE} \\\n  487  \t  --srcdir=${dist_dir}/python \\\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/build-scripts/gh-installdeps.bash:\n   15      g++ \\\n   16      ccache \\\n   17:     libboost-dev libboost-thread-dev \\\n   18:     libboost-filesystem-dev libboost-regex-dev \\\n   19      libtiff-dev \\\n   20      libilmbase-dev libopenexr-dev \\\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/build-scripts/gh-win-installdeps.bash:\n   21  export CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH:=.}\n   22  export CMAKE_PREFIX_PATH=\"$CMAKE_PREFIX_PATH;$DEP_DIR\"\n   23: export BOOST_ROOT=${BOOST_ROOT_1_72_0}\n   24: export CMAKE_PREFIX_PATH=\"$CMAKE_PREFIX_PATH;$BOOST_ROOT\"\n   25  export CMAKE_PREFIX_PATH=\"$CMAKE_PREFIX_PATH;$VCPKG_INSTALLATION_ROOT/installed/x64-windows\"\n   26  export PATH=\"$PATH:$DEP_DIR/bin:$DEP_DIR/lib:$VCPKG_INSTALLATION_ROOT/installed/x64-windows/bin:/bin\"\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/build-scripts/install_homebrew_deps.bash:\n   24  \n   25  # All cases except for clang-format target, we need the dependencies.\n   26: brew install --display-times gcc ccache cmake ninja boost || true\n   27  brew link --overwrite gcc\n   28  brew unlink python@2.7 || true\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/build-scripts/nosanitize.txt:\n    3  leak:libIlmImf\n    4  leak:libgomp\n    5: leak:boost::detail::make_external_thread_data\n    6: leak:boost::detail::add_new_tss_node\n    7  leak:g_malloc0\n    8  leak:ArgParse::options\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/cmake/compiler.cmake:\n  282  \n  283  ###########################################################################\n  284: # Find out if it's safe for us to use std::regex or if we need boost.regex.\n  285  # This is primarily about gcc 4.8 having a broken regex implementation.\n  286  # This will be obsolete once our minimum supported gcc is >= 4.9.\n  ...\n  298      add_definitions (-DUSE_STD_REGEX)\n  299  else ()\n  300:     add_definitions (-DUSE_BOOST_REGEX)\n  301  endif ()\n  302  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/cmake/externalpackages.cmake:\n    8  \n    9  if (NOT VERBOSE)\n   10:     set (Boost_FIND_QUIETLY true)\n   11      set (PkgConfig_FIND_QUIETLY true)\n   12      set (Threads_FIND_QUIETLY true)\n   ..\n   32  \n   33  ###########################################################################\n   34: # Boost setup\n   35  if (MSVC)\n   36:     # Disable automatic linking using pragma comment(lib,...) of boost libraries upon including of a header\n   37:     add_definitions (-DBOOST_ALL_NO_LIB=1)\n   38  endif ()\n   39  if (LINKSTATIC)\n   40:     set (Boost_USE_STATIC_LIBS ON)    \n   41  else ()\n   42      if (MSVC)\n   43:         add_definitions (-DBOOST_ALL_DYN_LINK=1)\n   44      endif ()\n   45  endif ()\n   46: if (BOOST_CUSTOM)\n   47:     set (Boost_FOUND true)\n   48      # N.B. For a custom version, the caller had better set up the variables\n   49:     # Boost_VERSION, Boost_INCLUDE_DIRS, Boost_LIBRARY_DIRS, Boost_LIBRARIES.\n   50  else ()\n   51:     set (Boost_COMPONENTS filesystem system thread)\n   52      if (NOT USE_STD_REGEX)\n   53:         list (APPEND Boost_COMPONENTS regex)\n   54      endif ()\n   55:     # The FindBoost.cmake interface is broken if it uses boost's installed\n   56:     # cmake output (e.g. boost 1.70.0, cmake <= 3.14). Specifically it fails\n   57      # to set the expected variables printed below. So until that's fixed\n   58:     # force FindBoost.cmake to use the original brute force path.\n   59:     set (Boost_NO_BOOST_CMAKE ON)\n   60:     checked_find_package (Boost REQUIRED\n   61                            VERSION_MIN 1.53\n   62:                           COMPONENTS ${Boost_COMPONENTS}\n   63                            RECOMMEND_MIN 1.66\n   64:                           RECOMMEND_MIN_REASON \"Boost 1.66 is the oldest version our CI tests against\"\n   65:                           PRINT Boost_INCLUDE_DIRS Boost_LIBRARIES )\n   66  endif ()\n   67  \n   68: # On Linux, Boost 1.55 and higher seems to need to link against -lrt\n   69  if (CMAKE_SYSTEM_NAME MATCHES \"Linux\"\n   70:       AND ${Boost_VERSION} VERSION_GREATER_EQUAL 105500)\n   71:     list (APPEND Boost_LIBRARIES \"rt\")\n   72  endif ()\n   73  \n   74: include_directories (SYSTEM \"${Boost_INCLUDE_DIRS}\")\n   75: link_directories (\"${Boost_LIBRARY_DIRS}\")\n   76  \n   77: # end Boost setup\n   78  ###########################################################################\n   79  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/doc/CHANGES-0.x.md:\n   61  * Add static methods to Filter classes allowing queries about the names\n   62    and vital info about all available filters.\n   63: * New Filesystem::is_regular() wraps the boost is_regular and catches\n   64    exceptions.\n   65  * iv: raise the maximum ImageCache settable in the UI from 2GB to 8GB.\n   ..\n  143  * Fix subtle bug in convert_type utility function that was causing a slight\n  144    incorrect rounding when converting float to a signed integer type. (0.9.3)\n  145: * Fix to compile properly against Boost 1.46. (0.9.3)\n  146  * Update pugixml from 0.5 to 1.0.\n  147: * Remove boost::test and gtest as dependencies, use our own macros.\n  148  * Fixes to allow use of libtiff 4.0.\n  149  * make USE_JASPER=0 USE_FIELD3D=0 make it easy to disable Jasper and\n  ...\n  249  * In-progress socket I/O plugin is in the code base, but not yet fully\n  250    supported.\n  251: * Disable python support if boost_python is not found. (r1701)\n  252  \n  253  \n  ...\n  582  * Build enhancements: 'make USE_OPENGL=0' (r512), better handling of\n  583    certain system OpenGL headers (r512), more robust with Qt location\n  584:   (r542), handle older Boost 1.35 (r574).\n  585  * Tests: test_libOpenImageIO (r581), ico (r621), \n  586  * More work towards clean windows compilation (r659,672).\n  ...\n  657  * Preliminary work on Windows port (r398,399)\n  658  * Include all the needed .h files in the dist area (r251)\n  659: * Handle older gcc (r273), older boost (r301,431), older OpenEXR\n  660    (r301), older libtiff (r432).\n  661  * 'make EMBEDPLUGINS=1' compiles the bundled plugins right into main\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/doc/CHANGES-1.x.md:\n   43    values larger than JPEG's 16 bit integer field will accommodate. #2002\n   44  * ImageSpec::erase_attribute() fix bug where it got case-sensitivity of the\n   45:   search backwards when built using std::regex rather than boost::regex.\n   46    #2003\n   47  \n   ..\n  160   * **C++11** (should also build with C++14 and C++17)\n  161   * **Compilers**: gcc 4.8.2 - gcc 7, clang 3.3 - 5.0, or MSVS 2013 - 2017\n  162:  * **Boost >= 1.53** (tested up through 1.65)\n  163   * **CMake >= 3.2.2** (tested up through 3.9)\n  164   * **OpenEXR >= 2.0** (recommended: 2.2)\n  ...\n  551  * Fix compile warnings for Clang 3.9. #1529 (1.8.0/1.7.8)\n  552  * Minimum C++ standard of C++11 is expected and enforced. #1513 (1.8.0)\n  553: * Minimum Boost is now 1.53. #1526 (1.8.0)\n  554  * Fix compiler warning on Fedora aarch64. #1592 (1.8.1)\n  555  * Tweak OpenJPEG include file search rules to prefer newer versions when\n  ...\n  558  * Big refactoring of the cmake build files. #1604 (1.8.2)\n  559  * When using a recent enough C++ compiler and standard library, OIIO will\n  560:   now use C++11 std::regex rather than boost regex. #1620,#1644 (1.8.3)\n  561  * Support for clang-tidy using build time flags CLANG_TIDY=1,\n  562    CLANG_TIDY_ARGS=..., and optionally CLANG_TIDY_FIX=1. #1649 (1.8.4)\n  ...\n  572  * `iv` has been upgraded to use Qt 5.x. Support for Qt 4.x is hereby\n  573    deprecated. #1711 (1.8.5)\n  574: * Make the search for boost_python3 more reliable. #1727 (1.8.5)\n  575  * Fix python site-packages path for installation. #1722 (1.8.5)\n  576  * Fixes for building with gcc 7. (1.8.5)\n  577  * Support and fixes for building with clang 5.0. #1746 (1.8.5)\n  578: * Support/fixes for Boost 1.65. #1553 (1.8.5)\n  579  * Simplify CMake scripts by using GNUInstallDirs to set standard installation\n  580    paths. #1747 (1.8.5)\n  ...\n  584    functional for Windows 10 or above). (1.8.0/1.7.8) #1527\n  585  * C++11 idioms:\n  586:    * We now eschew BOOST_FOREACH, in favor of C++11 \"range for\". #1535\n  587:    * We now use std::unique_ptr, no longer use boost::scoped_ptr or\n  588:      boost::scoped_array. #1543 (1.8.0) #1586 (1.8.1)\n  589:    * Instead of the various boost components, we now use `std::` versions of\n  590       unordered_map, unordered_set, shared_ptr, hash, bind. #1586 (1.8.1)\n  591     * Change deprecated C headers (such as `<ctype.h>`) to C++ (`<cctype>`).\n  ...\n  715  Release 1.7.17 (1 Sep 2017) -- compared to 1.7.16\n  716  -------------------------------------------------\n  717: * Repair build breaks against Boost 1.65. #1753\n  718  * Fix a subtle static initialization order problem. #1757\n  719  * Build: Improved finding LibRaw. #1749\n  ...\n 1178     for C++03 using 'make USE_CPP11=0' or 'cmake -DOIIO_BUID_CPP11=0', but\n 1179     some time soon we will be C++11 minimum.\n 1180:  * Fix build break against Boost 1.60. #1299,#1300 (1.7.0/1.6.9/1.5.23)\n 1181   * filesystem_test now much more comprehensively tests the contents of\n 1182     Filesystem. #1302 (1.7.0)\n ....\n 1428    were noticed to not be properly declared 'const'. This was fixed.\n 1429    #1300 (1.6.9)\n 1430: * Fix build break against Boost 1.60. #1299,#1300 (1.6.9/1.5.23)\n 1431  * The Python bindings for ImageCache was overhauled after several\n 1432    of the methods were found to be horribly broken. #1300 (1.6.9)\n ....\n 1887   * When compiling in C++11 mode, std::unordered_map, mutex,\n 1888     recursive_mutex, lock_guard, bind, ref, cref, thread, shared_ptr will\n 1889:    be used rather than boost equivalents, and our own thread_group and\n 1890:    intrusive_ptr are now used rather than the boost equivalents. We\n 1891:    believe that this completely removes all Boost headers and types from\n 1892     the OIIO public APIs when in C++11 mode. (Though internals still use\n 1893:    Boost in some cases.) #1262 #1266 (1.6.6)\n 1894   * We are now set up to use Travis-CI (https://travis-ci.org) for continuous\n 1895     integration / automatic builds of all merges and pull requests.\n ....\n 1965  Release 1.5.23 (28 Dec 2015) -- compared to 1.5.22)\n 1966  ---------------------------------------------------\n 1967: * Fix build break against Boost 1.60. #1299,#1300\n 1968  \n 1969  Release 1.5.22 (16 Dec 2015) -- compared to 1.5.21)\n ....\n 2421  * Make 3.0 compatibility fixes on OSX. (1.5.1/1.4.10)\n 2422  * Fix segfaults on 32 bit systems with gcc 4.2. #889 (1.5.1/1.4.11)\n 2423: * Fixes to Filesystem internals to work with older Boost releases older\n 2424    than 1.45. #891 (1.5.1/1.4.11)\n 2425  * Fixes to find libraw properly with Visual Studio 2010. #895 (1.5.1/1.4.11)\n ....\n 2430    we'd always needed to define for Windows only are finally supported\n 2431    in MSVC 2013). #912 (1.4.12/1.5.2) #927 (1.4.13/1.5.3)\n 2432: * Fix for Linux + Boost >= 1.55 combination: need to link with -lrt.\n 2433    #914 (1.4.12/1.5.2)\n 2434  * Fix Ptex + static linkage. (1.4.12/1.5.2)\n ....\n 2437    building with USE_LIBCPLUSPLUS=1 tries to link with libc++ if you are\n 2438    using clang. (1.5.2)\n 2439: * Fixes for Boost Filesystem 1.46-1.49. (1.5.2/1.4.12)\n 2440  * testtex new options: --nchannels (forces num channels to look up, rather\n 2441    than always doing what's in the file), --derivs (force the kind of texture\n ....\n 2538    we'd always needed to define for Windows only are finally supported\n 2539    in MSVC 2013). #912 (1.4.12/1.5.2)\n 2540: * Fix for Linux + Boost >= 1.55 combination: need to link with -lrt.\n 2541    #914 (1.4.12/1.5.2)\n 2542  * Fix Ptex + static linkage. (1.4.12/1.5.2)\n ....\n 2558    un-premultiplied values. #906\n 2559  * Fix segfaults on 32 bit systems with gcc 4.2. #889\n 2560: * Fixes to Filesystem internals to work with older Boost releases < 1.45. #891\n 2561  * Fixes to find libraw properly with Visual Studio 2010. #895\n 2562  * Fix bad casts in thread.h that broke some platforms. #896\n ....\n 2880    file.\n 2881  * Fix build breaks when building against OpenEXR 1.x.\n 2882: * Fix warnings with Boost Python + gcc 4.8.\n 2883  \n 2884  Release 1.3.10 (2 Jan 2014 -- compared to 1.3.9)\n ....\n 3088    OPENEXR_CUSTOM_INCLUDE_DIR, and OPENEXR_CUSTOM_LIB_DIR to make it\n 3089    easier to have site-specific hints for these packages' locations. (1.3.4)\n 3090: * Add BOOST_HOME and OCIO_HOME controls from the top-level Makefile wrapper.\n 3091    (1.3.4/1.2.3)\n 3092  * Accommodate new cmake release that slightly changes the HDF5 library\n ....\n 3129  * Fixed bug that caused incorrect ImageBuf::copy_pixels() when the two\n 3130    IB's had different data types.\n 3131: * Add BOOST_HOME and OCIO_HOME controls from the top-level Makefile wrapper.\n 3132  * Several OpenEXR 2.0 deep file fixes: only some compression types\n 3133    supported, write_tiles passed wrong parameters, must suppress some\n ....\n 3368    more standard idiom \"#ifndef NDEBUG\".\n 3369  * Compatibility fixes for Python3.\n 3370: * MSVC 2008: Prevent a redefinition error when using boost::shared_ptr.\n 3371  * Fixes for compatibility with libtiff 4.0.\n 3372  * Fixes for MSVC debug mode having out-of-bound exceptions.\n ....\n 3788  * Add FIELD3D_HOME build variable to allow explicit path to Field3D\n 3789    implementation.\n 3790: * Remove support for Boost < 1.40.\n 3791  * Improved unit tests for atomics, spin locks, and rw locks.\n 3792  * Avoid generating iv man pages when USE_QT=0\n ....\n 4018  Build system improvements:\n 4019   * Support compilation on FreeBSD.\n 4020:  * Improved custom detection of boost-python on Windows.\n 4021   * Easier to compile OIIO without using TBB.\n 4022  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/doc/oiiointro.rst:\n  253  * zlib © 1995-2005 Jean-loup Gailly and Mark Adler. http://www.zlib.net\n  254  * libpng © 1998-2008 Glenn Randers-Pehrson, et al. http://www.libpng.org\n  255: * Boost © various authors. http://www.boost.org\n  256  * GLEW © 2002-2007 Milan Ikits, et al. http://glew.sourceforge.net\n  257  * Jasper © 2001-2006 Michael David Adams, et al. http://www.ece.uvic.ca/~mdadams/jasper/\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/field3d.imageio/field3dinput.cpp:\n  259      lay.spec.attribute(\"field3d:mapping\", mapping->className());\n  260      MatrixFieldMapping::Ptr matrixMapping\n  261:         = boost::dynamic_pointer_cast<MatrixFieldMapping>(mapping);\n  262      if (matrixMapping) {\n  263          Imath::M44d md = matrixMapping->localToWorld();\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/igrep/CMakeLists.txt:\n    4  \n    5  fancy_add_executable (LINK_LIBRARIES OpenImageIO\n    6:                                      ${Boost_LIBRARIES} # because regex\n    7                        )\n    8  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/igrep/igrep.cpp:\n   18  #include <OpenImageIO/sysutil.h>\n   19  \n   20: #ifdef USE_BOOST_REGEX\n   21: #    include <boost/regex.hpp>\n   22: using boost::regex;\n   23: using boost::regex_search;\n   24: using namespace boost::regex_constants;\n   25  #else\n   26  #    include <regex>\n   ..\n  174      }\n  175  \n  176: #if USE_BOOST_REGEX\n  177:     boost::regex_constants::syntax_option_type flag\n  178:         = boost::regex_constants::grep;\n  179      if (ap[\"E\"].get<int>())\n  180:         flag = boost::regex::extended;\n  181      if (ap[\"i\"].get<int>())\n  182:         flag |= boost::regex_constants::icase;\n  183  #else\n  184      auto flag = std::regex_constants::grep;\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/iinfo/CMakeLists.txt:\n    4  \n    5  fancy_add_executable (LINK_LIBRARIES OpenImageIO\n    6:                                      ${Boost_LIBRARIES} # because regex\n    7                        )\n    8  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/iinfo/iinfo.cpp:\n   22  #include <OpenImageIO/sysutil.h>\n   23  \n   24: #ifdef USE_BOOST_REGEX\n   25: #    include <boost/regex.hpp>\n   26: using boost::regex;\n   27: using boost::regex_search;\n   28  #else\n   29  #    include <regex>\n   ..\n  662  \n  663      if (!metamatch.empty()) {\n  664: #if USE_BOOST_REGEX\n  665          field_re.assign(metamatch,\n  666:                         boost::regex::extended | boost::regex_constants::icase);\n  667  #else\n  668          field_re.assign(metamatch, std::regex_constants::extended\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/include/OpenImageIO/detail/pugixml/pugixml.hpp:\n 1311  \t\ttypedef const xpath_node* const_iterator;\n 1312  \n 1313: \t\t// We define non-constant iterator to be the same as constant iterator so that various generic algorithms (i.e. boost foreach) work\n 1314  \t\ttypedef const xpath_node* iterator;\n 1315  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/CMakeLists.txt:\n  157              ${BZIP2_LIBRARIES}\n  158              ${ZLIB_LIBRARIES}\n  159:             ${Boost_LIBRARIES}\n  160              ${CMAKE_DL_LIBS}\n  161          )\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/color_ocio.cpp:\n    8  #include <vector>\n    9  \n   10: #include <boost/container/flat_map.hpp>\n   11  \n   12  #include <OpenImageIO/color.h>\n   ..\n  123  \n  124  \n  125: typedef boost::container::flat_map<ColorProcCacheKey, ColorProcessorHandle>\n  126      ColorProcessorMap;\n  127  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/exif.cpp:\n   12  #include <vector>\n   13  \n   14: #include <boost/container/flat_map.hpp>\n   15  \n   16  #include <OpenImageIO/fmath.h>\n   ..\n   28  class TagMap::Impl {\n   29  public:\n   30:     typedef boost::container::flat_map<int, const TagInfo*> tagmap_t;\n   31:     typedef boost::container::flat_map<std::string, const TagInfo*> namemap_t;\n   32      // Name map is lower case so it's effectively case-insensitive\n   33  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/formatspec.cpp:\n   23  #endif\n   24  \n   25: #ifdef USE_BOOST_REGEX\n   26: #    include <boost/regex.hpp>\n   27: using boost::regex;\n   28: using boost::regex_match;\n   29: using namespace boost::regex_constants;\n   30  #else\n   31  #    include <regex>\n   ..\n  360          return;  // Don't mess with regexp if there isn't any metadata\n  361      try {\n  362: #if USE_BOOST_REGEX\n  363:         boost::regex_constants::syntax_option_type flag\n  364:             = boost::regex_constants::basic;\n  365          if (!casesensitive)\n  366:             flag |= boost::regex_constants::icase;\n  367  #else\n  368          std::regex_constants::syntax_option_type flag\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/imageinput.cpp:\n   20  #include \"imageio_pvt.h\"\n   21  \n   22: #include <boost/thread/tss.hpp>\n   23: using boost::thread_specific_ptr;\n   24  \n   25  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/imageioplugin.cpp:\n  372      DECLAREPLUG (sgi);\n  373  #endif\n  374: #ifdef USE_BOOST_ASIO\n  375  #if !defined(DISABLE_SOCKET)\n  376      DECLAREPLUG (socket);\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/imageoutput.cpp:\n   22  #include \"imageio_pvt.h\"\n   23  \n   24: #include <boost/thread/tss.hpp>\n   25: using boost::thread_specific_ptr;\n   26  \n   27  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/xmp.cpp:\n    6  #include <iostream>\n    7  \n    8: #include <boost/container/flat_map.hpp>\n    9  \n   10  #include <OpenImageIO/fmath.h>\n   ..\n  222  \n  223  class XMPtagMap {\n  224:     typedef boost::container::flat_map<std::string, const XMPtag*> tagmap_t;\n  225      // Key is lower case so it's effectively case-insensitive\n  226  public:\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libtexture/imagecache_pvt.h:\n   13  #include <tsl/robin_map.h>\n   14  \n   15: #include <boost/container/flat_map.hpp>\n   16: #include <boost/thread/tss.hpp>\n   17  \n   18  #include <OpenImageIO/export.h>\n   ..\n   42  #define TILE_CACHE_SHARDS 128\n   43  \n   44: using boost::thread_specific_ptr;\n   45  \n   46  class ImageCacheImpl;\n   ..\n   52  texture_type_name(TexFormat f);\n   53  \n   54: #ifdef BOOST_CONTAINER_FLAT_MAP_HPP\n   55: typedef boost::container::flat_map<uint64_t, ImageCacheFile*> UdimLookupMap;\n   56  #else\n   57  typedef unordered_map<uint64_t, ImageCacheFile*> UdimLookupMap;\n   ..\n  919      /// Try to avoid looking to the big cache (and locking) most of the\n  920      /// time for fairly coherent tile access patterns, by using the\n  921:     /// per-thread microcache to boost our hit rate over the big cache.\n  922      /// Inlined for speed.  The tile is marked as 'used' if it wasn't the\n  923      /// very last one used, or if it was the same as the last used and\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libtexture/texturesys.cpp:\n   10  #include <string>\n   11  \n   12: #include <boost/random.hpp>\n   13  \n   14  #include <OpenImageIO/dassert.h>\n   ..\n 2924      visualize_ellipse(\"6.tif\", dsdx, dtdx, dsdy, dtdy, 0.0, 0.5);\n 2925  \n 2926:     boost::mt19937 rndgen;\n 2927:     boost::uniform_01<boost::mt19937, float> rnd(rndgen);\n 2928      for (int i = 0; i < 100; ++i) {\n 2929          dsdx = 1.5f * (rnd() - 0.5f);\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/CMakeLists.txt:\n   27          PRIVATE\n   28              ${SANITIZE_LIBRARIES}\n   29:             ${Boost_LIBRARIES}\n   30              ${CMAKE_DL_LIBS}\n   31          )\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/filesystem.cpp:\n    9  #include <string>\n   10  \n   11: #include <boost/tokenizer.hpp>\n   12  \n   13  #include <OpenImageIO/dassert.h>\n   ..\n   27  #endif\n   28  \n   29: #ifdef USE_BOOST_REGEX\n   30: #    include <boost/regex.hpp>\n   31: using boost::match_results;\n   32: using boost::regex;\n   33: using boost::regex_search;\n   34  #else\n   35  #    include <regex>\n   ..\n   39  #endif\n   40  \n   41: #include <boost/filesystem.hpp>\n   42: namespace filesystem = boost::filesystem;\n   43: using error_code     = boost::system::error_code;\n   44  // FIXME: use std::filesystem when available\n   45  \n   ..\n   49  \n   50  \n   51: // boost internally doesn't use MultiByteToWideChar (CP_UTF8,...\n   52  // to convert char* to wchar_t* because they do not know the encoding\n   53: // See boost/filesystem/path.hpp\n   54  // The only correct way to do this is to do the conversion ourselves.\n   55  \n   ..\n   87  \n   88  #ifdef _MSC_VER\n   89: // fix for https://svn.boost.org/trac/boost/ticket/6320\n   90  const std::string dummy_path = \"../dummy_path.txt\";\n   91  const std::string dummy_extension\n   ..\n   97  {\n   98      // To simplify dealing with platform-specific separators and whatnot,\n   99:     // just use the Boost routines:\n  100      return pathstr(u8path(filepath).filename());\n  101  }\n  ...\n  139      std::string path_copy = searchpath;\n  140      std::string last_token;\n  141:     typedef boost::tokenizer<boost::char_separator<char>> tokenizer;\n  142:     boost::char_separator<char> sep(\":;\");\n  143      tokenizer tokens(searchpath, sep);\n  144      for (tokenizer::iterator tok_iter         = tokens.begin();\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/strutil.cpp:\n   19  #endif\n   20  \n   21: #include <boost/algorithm/string.hpp>\n   22  \n   23  #include <OpenImageIO/dassert.h>\n   ..\n  406  Strutil::iequals(string_view a, string_view b)\n  407  {\n  408:     return boost::algorithm::iequals(a, b, std::locale::classic());\n  409  }\n  410  \n  ...\n  413  Strutil::iless(string_view a, string_view b)\n  414  {\n  415:     return boost::algorithm::ilexicographical_compare(a, b,\n  416                                                        std::locale::classic());\n  417  }\n  ...\n  421  Strutil::starts_with(string_view a, string_view b)\n  422  {\n  423:     return boost::algorithm::starts_with(a, b);\n  424  }\n  425  \n  ...\n  428  Strutil::istarts_with(string_view a, string_view b)\n  429  {\n  430:     return boost::algorithm::istarts_with(a, b, std::locale::classic());\n  431  }\n  432  \n  ...\n  435  Strutil::ends_with(string_view a, string_view b)\n  436  {\n  437:     return boost::algorithm::ends_with(a, b);\n  438  }\n  439  \n  ...\n  442  Strutil::iends_with(string_view a, string_view b)\n  443  {\n  444:     return boost::algorithm::iends_with(a, b, std::locale::classic());\n  445  }\n  446  \n  ...\n  449  Strutil::contains(string_view a, string_view b)\n  450  {\n  451:     return boost::algorithm::contains(a, b);\n  452  }\n  453  \n  ...\n  456  Strutil::icontains(string_view a, string_view b)\n  457  {\n  458:     return boost::algorithm::icontains(a, b, std::locale::classic());\n  459  }\n  460  \n  ...\n  463  Strutil::to_lower(std::string& a)\n  464  {\n  465:     boost::algorithm::to_lower(a, std::locale::classic());\n  466  }\n  467  \n  ...\n  470  Strutil::to_upper(std::string& a)\n  471  {\n  472:     boost::algorithm::to_upper(a, std::locale::classic());\n  473  }\n  474  \n  ...\n  478  Strutil::StringIEqual::operator()(const char* a, const char* b) const noexcept\n  479  {\n  480:     return boost::algorithm::iequals(a, b, std::locale::classic());\n  481  }\n  482  \n  ...\n  485  Strutil::StringILess::operator()(const char* a, const char* b) const noexcept\n  486  {\n  487:     return boost::algorithm::ilexicographical_compare(a, b,\n  488                                                        std::locale::classic());\n  489  }\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/sysutil.cpp:\n   63  #include <OpenImageIO/sysutil.h>\n   64  \n   65: #include <boost/version.hpp>\n   66: #if BOOST_VERSION >= 106500\n   67  #    ifndef _GNU_SOURCE\n   68  #        define _GNU_SOURCE\n   69  #    endif\n   70: #    include <boost/stacktrace.hpp>\n   71  #endif\n   72  \n   73: // clang 7.0 (rc2) has errors when including boost thread!\n   74: // The only thin we're using there is boost::physical_concurrency.\n   75  #if !(OIIO_CLANG_VERSION >= 7)\n   76: #    include <boost/thread.hpp>\n   77  #endif\n   78  \n   ..\n  549  Sysutil::physical_concurrency()\n  550  {\n  551:     // clang 7.0.0rc2 has trouble compiling boost thread\n  552: #if BOOST_VERSION >= 105600 && !(OIIO_CLANG_VERSION >= 7)\n  553:     return boost::thread::physical_concurrency();\n  554  #else\n  555      return std::thread::hardware_concurrency();\n  ...\n  602  Sysutil::stacktrace()\n  603  {\n  604: #if BOOST_VERSION >= 106500\n  605      std::stringstream out;\n  606:     out << boost::stacktrace::stacktrace();\n  607      return out.str();\n  608  #else\n  ...\n  613  \n  614  \n  615: #if BOOST_VERSION >= 106500\n  616  \n  617  static std::string stacktrace_filename;\n  ...\n  628              std::cerr << Sysutil::stacktrace();\n  629          else {\n  630: #    if BOOST_VERSION >= 106500\n  631:             boost::stacktrace::safe_dump_to(stacktrace_filename.c_str());\n  632  #    endif\n  633          }\n  ...\n  643  Sysutil::setup_crash_stacktrace(string_view filename)\n  644  {\n  645: #if BOOST_VERSION >= 106500\n  646      std::lock_guard<std::mutex> lock(stacktrace_filename_mutex);\n  647      stacktrace_filename = filename;\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/thread.cpp:\n   29  #include <OpenImageIO/thread.h>\n   30  \n   31: #include <boost/container/flat_map.hpp>\n   32  \n   33  #if 0\n   34  \n   35: // Use boost::lockfree::queue for the task queue\n   36: #    include <boost/lockfree/queue.hpp>\n   37: template<typename T> using Queue = boost::lockfree::queue<T>;\n   38  \n   39  #else\n   ..\n  346      std::mutex mutex;\n  347      std::condition_variable cv;\n  348:     mutable boost::container::flat_map<std::thread::id, int> m_worker_threadids;\n  349      mutable spin_mutex m_worker_threadids_mutex;\n  350  };\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/CMakeLists.txt:\n    4  \n    5  fancy_add_executable (LINK_LIBRARIES OpenImageIO\n    6:                                      ${Boost_LIBRARIES} # because regex\n    7                        )\n    8  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/oiiotool.cpp:\n   34  #include \"oiiotool.h\"\n   35  \n   36: #ifdef USE_BOOST_REGEX\n   37: #    include <boost/regex.hpp>\n   38: using boost::match_results;\n   39: using boost::regex;\n   40: using boost::regex_search;\n   41  #else\n   42  #    include <regex>\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/oiiotool.h:\n    9  #include <memory>\n   10  \n   11: #include <boost/container/flat_set.hpp>\n   12  \n   13  #include <OpenImageIO/color.h>\n   ..\n  951      std::vector<string_view> m_args;\n  952      ParamValueList m_options;\n  953:     typedef boost::container::flat_set<int> FastIntSet;\n  954      FastIntSet subimage_includes;  // Subimages to operate on (empty == all)\n  955      FastIntSet subimage_excludes;  // Subimages to skip for the op\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/printinfo.cpp:\n   27  #include \"oiiotool.h\"\n   28  \n   29: #ifdef USE_BOOST_REGEX\n   30: #    include <boost/regex.hpp>\n   31: using boost::regex;\n   32: using boost::regex_search;\n   33  #else\n   34  #    include <regex>\n   ..\n  747      if (!opt.metamatch.empty()) {\n  748          try {\n  749: #if USE_BOOST_REGEX\n  750:             field_re.assign(opt.metamatch, boost::regex::extended\n  751:                                                | boost::regex_constants::icase);\n  752  #else\n  753              field_re.assign(opt.metamatch, std::regex_constants::extended\n  ...\n  763      if (!opt.nometamatch.empty()) {\n  764          try {\n  765: #if USE_BOOST_REGEX\n  766              field_exclude_re.assign(opt.nometamatch,\n  767:                                     boost::regex::extended\n  768:                                         | boost::regex_constants::icase);\n  769  #else\n  770              field_exclude_re.assign(opt.nometamatch,\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/openexr.imageio/exrinput.cpp:\n   12  #include <numeric>\n   13  \n   14: #include <boost/version.hpp>\n   15: #if BOOST_VERSION >= 106900\n   16: #    include <boost/integer/common_factor_rt.hpp>\n   17: using boost::integer::gcd;\n   18  #else\n   19: #    include <boost/math/common_factor_rt.hpp>\n   20: using boost::math::gcd;\n   21  #endif\n   22  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/openvdb.imageio/CMakeLists.txt:\n    6      add_oiio_plugin (openvdbinput.cpp\n    7                       INCLUDE_DIRS ${TBB_INCLUDE_DIRS}\n    8:                      LINK_LIBRARIES OpenVDB::OpenVDB ${TBB_tbb_LIBRARY} ${BOOST_LIBRARIES})\n    9  endif()\n   10  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/python/py_imagebufalgo.cpp:\n 2380          .def_readonly(\"error\", &ImageBufAlgo::CompareResults::error);\n 2381  \n 2382:     // Use a boost::python::scope to put this all inside \"ImageBufAlgo\"\n 2383      py::class_<IBA_dummy>(m, \"ImageBufAlgo\")\n 2384          .def_static(\"zero\", &IBA_zero, \"dst\"_a, \"roi\"_a = ROI::All(),\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/python/py_oiio.h:\n   80  namespace PyOpenImageIO {\n   81  \n   82: //using namespace boost::python;\n   83  \n   84  using namespace OIIO;\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/CMakeLists.txt:\n    4  \n    5  add_oiio_plugin (socketinput.cpp socketoutput.cpp socket_pvt.cpp\n    6:                  DEFINITIONS \"-DUSE_BOOST_ASIO=1\")\n    7  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/socket_pvt.cpp:\n   14  OIIO_PLUGIN_NAMESPACE_BEGIN\n   15  \n   16: using namespace boost;\n   17: using namespace boost::asio;\n   18  \n   19  namespace socket_pvt {\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/socket_pvt.h:\n   17  \n   18  \n   19: // The boost::asio library uses functionality only available since Windows XP,\n   20  // thus _WIN32_WINNT must be set to _WIN32_WINNT_WINXP (0x0501) or greater.\n   21  // If _WIN32_WINNT is not defined before including the asio headers, they issue\n   ..\n   25  #endif\n   26  \n   27: #include <boost/asio.hpp>\n   28  \n   29  \n   30  OIIO_PLUGIN_NAMESPACE_BEGIN\n   31  \n   32: using namespace boost::asio;\n   33  \n   34  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/socketinput.cpp:\n   96          return false;\n   97      try {\n   98:         boost::asio::read(socket, buffer(reinterpret_cast<char*>(data),\n   99                                           m_spec.scanline_bytes()));\n  100:     } catch (boost::system::system_error& err) {\n  101          errorf(\"Error while reading: %s\", err.what());\n  102          return false;\n  ...\n  119          return false;\n  120      try {\n  121:         boost::asio::read(socket, buffer(reinterpret_cast<char*>(data),\n  122                                           m_spec.tile_bytes()));\n  123:     } catch (boost::system::system_error& err) {\n  124          errorf(\"Error while reading: %s\", err.what());\n  125          return false;\n  ...\n  162              new ip::tcp::acceptor(io, ip::tcp::endpoint(ip::tcp::v4(), port)));\n  163          acceptor->accept(socket);\n  164:     } catch (boost::system::system_error& err) {\n  165          errorf(\"Error while accepting: %s\", err.what());\n  166          return false;\n  ...\n  181          int spec_length;\n  182  \n  183:         boost::asio::read(socket, buffer(reinterpret_cast<char*>(&spec_length),\n  184:                                          sizeof(boost::uint32_t)));\n  185  \n  186          char* spec_xml = new char[spec_length + 1];\n  187:         boost::asio::read(socket, buffer(spec_xml, spec_length));\n  188  \n  189          spec.from_xml(spec_xml);\n  190          delete[] spec_xml;\n  191:     } catch (boost::system::system_error& err) {\n  192          errorf(\"Error while get_spec_from_client: %s\", err.what());\n  193          return false;\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/socketoutput.cpp:\n   66      try {\n   67          socket_pvt::socket_write(socket, format, data, m_spec.scanline_bytes());\n   68:     } catch (boost::system::system_error& err) {\n   69          errorf(\"Error while writing: %s\", err.what());\n   70          return false;\n   ..\n   90      try {\n   91          socket_pvt::socket_write(socket, format, data, m_spec.tile_bytes());\n   92:     } catch (boost::system::system_error& err) {\n   93          errorf(\"Error while writing: %s\", err.what());\n   94          return false;\n   ..\n  127  \n  128      try {\n  129:         boost::asio::write(socket,\n  130                             buffer(reinterpret_cast<const char*>(&xml_length),\n  131:                                   sizeof(boost::uint32_t)));\n  132:         boost::asio::write(socket, buffer(spec_xml.c_str(), spec_xml.length()));\n  133:     } catch (boost::system::system_error& err) {\n  134          errorf(\"Error while send_spec_to_server: %s\", err.what());\n  135          return false;\n  ...\n  164          ip::tcp::resolver::iterator end;\n  165  \n  166:         boost::system::error_code err = error::host_not_found;\n  167          while (err && endpoint_iterator != end) {\n  168              socket.close();\n  ...\n  173              return false;\n  174          }\n  175:     } catch (boost::system::system_error& err) {\n  176          errorf(\"Error while connecting: %s\", err.what());\n  177          return false;\n\n/home/max/dev/Lava/third_party/OpenImageIO/THIRD-PARTY.md:\n  175  -------------------------------------------------------------------------\n  176  \n  177: Boost Software License - Version 1.0\n  178  SPDX-License-Identifier: BSL-1.0\n  179  \n  ...\n  184    https://github.com/shibatch/sleef/blob/master/LICENSE.txt\n  185  \n  186: Boost Software License - Version 1.0 - August 17th, 2003\n  187  \n  188  Permission is hereby granted, free of charge, to any person or organization\n\n2240 matches across 94 files\n\n\nSearching 47 files for \"BOOST\"\n\n0 matches\n\nSearching 528 files for \"BOOST\"\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/build-scripts/gh-installdeps.bash:\n   15      g++ \\\n   16      ccache \\\n   17:     libboost-dev libboost-thread-dev \\\n   18:     libboost-filesystem-dev libboost-regex-dev \\\n   19      libtiff-dev \\\n   20      libilmbase-dev libopenexr-dev \\\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/build-scripts/gh-win-installdeps.bash:\n   21  export CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH:=.}\n   22  export CMAKE_PREFIX_PATH=\"$CMAKE_PREFIX_PATH;$DEP_DIR\"\n   23: export BOOST_ROOT=${BOOST_ROOT_1_72_0}\n   24: export CMAKE_PREFIX_PATH=\"$CMAKE_PREFIX_PATH;$BOOST_ROOT\"\n   25  export CMAKE_PREFIX_PATH=\"$CMAKE_PREFIX_PATH;$VCPKG_INSTALLATION_ROOT/installed/x64-windows\"\n   26  export PATH=\"$PATH:$DEP_DIR/bin:$DEP_DIR/lib:$VCPKG_INSTALLATION_ROOT/installed/x64-windows/bin:/bin\"\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/build-scripts/install_homebrew_deps.bash:\n   24  \n   25  # All cases except for clang-format target, we need the dependencies.\n   26: brew install --display-times gcc ccache cmake ninja boost || true\n   27  brew link --overwrite gcc\n   28  brew unlink python@2.7 || true\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/build-scripts/nosanitize.txt:\n    3  leak:libIlmImf\n    4  leak:libgomp\n    5: leak:boost::detail::make_external_thread_data\n    6: leak:boost::detail::add_new_tss_node\n    7  leak:g_malloc0\n    8  leak:ArgParse::options\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/cmake/compiler.cmake:\n  282  \n  283  ###########################################################################\n  284: # Find out if it's safe for us to use std::regex or if we need boost.regex.\n  285  # This is primarily about gcc 4.8 having a broken regex implementation.\n  286  # This will be obsolete once our minimum supported gcc is >= 4.9.\n  ...\n  298      add_definitions (-DUSE_STD_REGEX)\n  299  else ()\n  300:     add_definitions (-DUSE_BOOST_REGEX)\n  301  endif ()\n  302  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/cmake/externalpackages.cmake:\n    8  \n    9  if (NOT VERBOSE)\n   10:     set (Boost_FIND_QUIETLY true)\n   11      set (PkgConfig_FIND_QUIETLY true)\n   12      set (Threads_FIND_QUIETLY true)\n   ..\n   32  \n   33  ###########################################################################\n   34: # Boost setup\n   35  if (MSVC)\n   36:     # Disable automatic linking using pragma comment(lib,...) of boost libraries upon including of a header\n   37:     add_definitions (-DBOOST_ALL_NO_LIB=1)\n   38  endif ()\n   39  if (LINKSTATIC)\n   40:     set (Boost_USE_STATIC_LIBS ON)    \n   41  else ()\n   42      if (MSVC)\n   43:         add_definitions (-DBOOST_ALL_DYN_LINK=1)\n   44      endif ()\n   45  endif ()\n   46: if (BOOST_CUSTOM)\n   47:     set (Boost_FOUND true)\n   48      # N.B. For a custom version, the caller had better set up the variables\n   49:     # Boost_VERSION, Boost_INCLUDE_DIRS, Boost_LIBRARY_DIRS, Boost_LIBRARIES.\n   50  else ()\n   51:     set (Boost_COMPONENTS filesystem system thread)\n   52      if (NOT USE_STD_REGEX)\n   53:         list (APPEND Boost_COMPONENTS regex)\n   54      endif ()\n   55:     # The FindBoost.cmake interface is broken if it uses boost's installed\n   56:     # cmake output (e.g. boost 1.70.0, cmake <= 3.14). Specifically it fails\n   57      # to set the expected variables printed below. So until that's fixed\n   58:     # force FindBoost.cmake to use the original brute force path.\n   59:     set (Boost_NO_BOOST_CMAKE ON)\n   60:     checked_find_package (Boost REQUIRED\n   61                            VERSION_MIN 1.53\n   62:                           COMPONENTS ${Boost_COMPONENTS}\n   63                            RECOMMEND_MIN 1.66\n   64:                           RECOMMEND_MIN_REASON \"Boost 1.66 is the oldest version our CI tests against\"\n   65:                           PRINT Boost_INCLUDE_DIRS Boost_LIBRARIES )\n   66  endif ()\n   67  \n   68: # On Linux, Boost 1.55 and higher seems to need to link against -lrt\n   69  if (CMAKE_SYSTEM_NAME MATCHES \"Linux\"\n   70:       AND ${Boost_VERSION} VERSION_GREATER_EQUAL 105500)\n   71:     list (APPEND Boost_LIBRARIES \"rt\")\n   72  endif ()\n   73  \n   74: include_directories (SYSTEM \"${Boost_INCLUDE_DIRS}\")\n   75: link_directories (\"${Boost_LIBRARY_DIRS}\")\n   76  \n   77: # end Boost setup\n   78  ###########################################################################\n   79  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/doc/CHANGES-0.x.md:\n   61  * Add static methods to Filter classes allowing queries about the names\n   62    and vital info about all available filters.\n   63: * New Filesystem::is_regular() wraps the boost is_regular and catches\n   64    exceptions.\n   65  * iv: raise the maximum ImageCache settable in the UI from 2GB to 8GB.\n   ..\n  143  * Fix subtle bug in convert_type utility function that was causing a slight\n  144    incorrect rounding when converting float to a signed integer type. (0.9.3)\n  145: * Fix to compile properly against Boost 1.46. (0.9.3)\n  146  * Update pugixml from 0.5 to 1.0.\n  147: * Remove boost::test and gtest as dependencies, use our own macros.\n  148  * Fixes to allow use of libtiff 4.0.\n  149  * make USE_JASPER=0 USE_FIELD3D=0 make it easy to disable Jasper and\n  ...\n  249  * In-progress socket I/O plugin is in the code base, but not yet fully\n  250    supported.\n  251: * Disable python support if boost_python is not found. (r1701)\n  252  \n  253  \n  ...\n  582  * Build enhancements: 'make USE_OPENGL=0' (r512), better handling of\n  583    certain system OpenGL headers (r512), more robust with Qt location\n  584:   (r542), handle older Boost 1.35 (r574).\n  585  * Tests: test_libOpenImageIO (r581), ico (r621), \n  586  * More work towards clean windows compilation (r659,672).\n  ...\n  657  * Preliminary work on Windows port (r398,399)\n  658  * Include all the needed .h files in the dist area (r251)\n  659: * Handle older gcc (r273), older boost (r301,431), older OpenEXR\n  660    (r301), older libtiff (r432).\n  661  * 'make EMBEDPLUGINS=1' compiles the bundled plugins right into main\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/doc/CHANGES-1.x.md:\n   43    values larger than JPEG's 16 bit integer field will accommodate. #2002\n   44  * ImageSpec::erase_attribute() fix bug where it got case-sensitivity of the\n   45:   search backwards when built using std::regex rather than boost::regex.\n   46    #2003\n   47  \n   ..\n  160   * **C++11** (should also build with C++14 and C++17)\n  161   * **Compilers**: gcc 4.8.2 - gcc 7, clang 3.3 - 5.0, or MSVS 2013 - 2017\n  162:  * **Boost >= 1.53** (tested up through 1.65)\n  163   * **CMake >= 3.2.2** (tested up through 3.9)\n  164   * **OpenEXR >= 2.0** (recommended: 2.2)\n  ...\n  551  * Fix compile warnings for Clang 3.9. #1529 (1.8.0/1.7.8)\n  552  * Minimum C++ standard of C++11 is expected and enforced. #1513 (1.8.0)\n  553: * Minimum Boost is now 1.53. #1526 (1.8.0)\n  554  * Fix compiler warning on Fedora aarch64. #1592 (1.8.1)\n  555  * Tweak OpenJPEG include file search rules to prefer newer versions when\n  ...\n  558  * Big refactoring of the cmake build files. #1604 (1.8.2)\n  559  * When using a recent enough C++ compiler and standard library, OIIO will\n  560:   now use C++11 std::regex rather than boost regex. #1620,#1644 (1.8.3)\n  561  * Support for clang-tidy using build time flags CLANG_TIDY=1,\n  562    CLANG_TIDY_ARGS=..., and optionally CLANG_TIDY_FIX=1. #1649 (1.8.4)\n  ...\n  572  * `iv` has been upgraded to use Qt 5.x. Support for Qt 4.x is hereby\n  573    deprecated. #1711 (1.8.5)\n  574: * Make the search for boost_python3 more reliable. #1727 (1.8.5)\n  575  * Fix python site-packages path for installation. #1722 (1.8.5)\n  576  * Fixes for building with gcc 7. (1.8.5)\n  577  * Support and fixes for building with clang 5.0. #1746 (1.8.5)\n  578: * Support/fixes for Boost 1.65. #1553 (1.8.5)\n  579  * Simplify CMake scripts by using GNUInstallDirs to set standard installation\n  580    paths. #1747 (1.8.5)\n  ...\n  584    functional for Windows 10 or above). (1.8.0/1.7.8) #1527\n  585  * C++11 idioms:\n  586:    * We now eschew BOOST_FOREACH, in favor of C++11 \"range for\". #1535\n  587:    * We now use std::unique_ptr, no longer use boost::scoped_ptr or\n  588:      boost::scoped_array. #1543 (1.8.0) #1586 (1.8.1)\n  589:    * Instead of the various boost components, we now use `std::` versions of\n  590       unordered_map, unordered_set, shared_ptr, hash, bind. #1586 (1.8.1)\n  591     * Change deprecated C headers (such as `<ctype.h>`) to C++ (`<cctype>`).\n  ...\n  715  Release 1.7.17 (1 Sep 2017) -- compared to 1.7.16\n  716  -------------------------------------------------\n  717: * Repair build breaks against Boost 1.65. #1753\n  718  * Fix a subtle static initialization order problem. #1757\n  719  * Build: Improved finding LibRaw. #1749\n  ...\n 1178     for C++03 using 'make USE_CPP11=0' or 'cmake -DOIIO_BUID_CPP11=0', but\n 1179     some time soon we will be C++11 minimum.\n 1180:  * Fix build break against Boost 1.60. #1299,#1300 (1.7.0/1.6.9/1.5.23)\n 1181   * filesystem_test now much more comprehensively tests the contents of\n 1182     Filesystem. #1302 (1.7.0)\n ....\n 1428    were noticed to not be properly declared 'const'. This was fixed.\n 1429    #1300 (1.6.9)\n 1430: * Fix build break against Boost 1.60. #1299,#1300 (1.6.9/1.5.23)\n 1431  * The Python bindings for ImageCache was overhauled after several\n 1432    of the methods were found to be horribly broken. #1300 (1.6.9)\n ....\n 1887   * When compiling in C++11 mode, std::unordered_map, mutex,\n 1888     recursive_mutex, lock_guard, bind, ref, cref, thread, shared_ptr will\n 1889:    be used rather than boost equivalents, and our own thread_group and\n 1890:    intrusive_ptr are now used rather than the boost equivalents. We\n 1891:    believe that this completely removes all Boost headers and types from\n 1892     the OIIO public APIs when in C++11 mode. (Though internals still use\n 1893:    Boost in some cases.) #1262 #1266 (1.6.6)\n 1894   * We are now set up to use Travis-CI (https://travis-ci.org) for continuous\n 1895     integration / automatic builds of all merges and pull requests.\n ....\n 1965  Release 1.5.23 (28 Dec 2015) -- compared to 1.5.22)\n 1966  ---------------------------------------------------\n 1967: * Fix build break against Boost 1.60. #1299,#1300\n 1968  \n 1969  Release 1.5.22 (16 Dec 2015) -- compared to 1.5.21)\n ....\n 2421  * Make 3.0 compatibility fixes on OSX. (1.5.1/1.4.10)\n 2422  * Fix segfaults on 32 bit systems with gcc 4.2. #889 (1.5.1/1.4.11)\n 2423: * Fixes to Filesystem internals to work with older Boost releases older\n 2424    than 1.45. #891 (1.5.1/1.4.11)\n 2425  * Fixes to find libraw properly with Visual Studio 2010. #895 (1.5.1/1.4.11)\n ....\n 2430    we'd always needed to define for Windows only are finally supported\n 2431    in MSVC 2013). #912 (1.4.12/1.5.2) #927 (1.4.13/1.5.3)\n 2432: * Fix for Linux + Boost >= 1.55 combination: need to link with -lrt.\n 2433    #914 (1.4.12/1.5.2)\n 2434  * Fix Ptex + static linkage. (1.4.12/1.5.2)\n ....\n 2437    building with USE_LIBCPLUSPLUS=1 tries to link with libc++ if you are\n 2438    using clang. (1.5.2)\n 2439: * Fixes for Boost Filesystem 1.46-1.49. (1.5.2/1.4.12)\n 2440  * testtex new options: --nchannels (forces num channels to look up, rather\n 2441    than always doing what's in the file), --derivs (force the kind of texture\n ....\n 2538    we'd always needed to define for Windows only are finally supported\n 2539    in MSVC 2013). #912 (1.4.12/1.5.2)\n 2540: * Fix for Linux + Boost >= 1.55 combination: need to link with -lrt.\n 2541    #914 (1.4.12/1.5.2)\n 2542  * Fix Ptex + static linkage. (1.4.12/1.5.2)\n ....\n 2558    un-premultiplied values. #906\n 2559  * Fix segfaults on 32 bit systems with gcc 4.2. #889\n 2560: * Fixes to Filesystem internals to work with older Boost releases < 1.45. #891\n 2561  * Fixes to find libraw properly with Visual Studio 2010. #895\n 2562  * Fix bad casts in thread.h that broke some platforms. #896\n ....\n 2880    file.\n 2881  * Fix build breaks when building against OpenEXR 1.x.\n 2882: * Fix warnings with Boost Python + gcc 4.8.\n 2883  \n 2884  Release 1.3.10 (2 Jan 2014 -- compared to 1.3.9)\n ....\n 3088    OPENEXR_CUSTOM_INCLUDE_DIR, and OPENEXR_CUSTOM_LIB_DIR to make it\n 3089    easier to have site-specific hints for these packages' locations. (1.3.4)\n 3090: * Add BOOST_HOME and OCIO_HOME controls from the top-level Makefile wrapper.\n 3091    (1.3.4/1.2.3)\n 3092  * Accommodate new cmake release that slightly changes the HDF5 library\n ....\n 3129  * Fixed bug that caused incorrect ImageBuf::copy_pixels() when the two\n 3130    IB's had different data types.\n 3131: * Add BOOST_HOME and OCIO_HOME controls from the top-level Makefile wrapper.\n 3132  * Several OpenEXR 2.0 deep file fixes: only some compression types\n 3133    supported, write_tiles passed wrong parameters, must suppress some\n ....\n 3368    more standard idiom \"#ifndef NDEBUG\".\n 3369  * Compatibility fixes for Python3.\n 3370: * MSVC 2008: Prevent a redefinition error when using boost::shared_ptr.\n 3371  * Fixes for compatibility with libtiff 4.0.\n 3372  * Fixes for MSVC debug mode having out-of-bound exceptions.\n ....\n 3788  * Add FIELD3D_HOME build variable to allow explicit path to Field3D\n 3789    implementation.\n 3790: * Remove support for Boost < 1.40.\n 3791  * Improved unit tests for atomics, spin locks, and rw locks.\n 3792  * Avoid generating iv man pages when USE_QT=0\n ....\n 4018  Build system improvements:\n 4019   * Support compilation on FreeBSD.\n 4020:  * Improved custom detection of boost-python on Windows.\n 4021   * Easier to compile OIIO without using TBB.\n 4022  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/doc/oiiointro.rst:\n  253  * zlib © 1995-2005 Jean-loup Gailly and Mark Adler. http://www.zlib.net\n  254  * libpng © 1998-2008 Glenn Randers-Pehrson, et al. http://www.libpng.org\n  255: * Boost © various authors. http://www.boost.org\n  256  * GLEW © 2002-2007 Milan Ikits, et al. http://glew.sourceforge.net\n  257  * Jasper © 2001-2006 Michael David Adams, et al. http://www.ece.uvic.ca/~mdadams/jasper/\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/field3d.imageio/field3dinput.cpp:\n  259      lay.spec.attribute(\"field3d:mapping\", mapping->className());\n  260      MatrixFieldMapping::Ptr matrixMapping\n  261:         = boost::dynamic_pointer_cast<MatrixFieldMapping>(mapping);\n  262      if (matrixMapping) {\n  263          Imath::M44d md = matrixMapping->localToWorld();\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/igrep/CMakeLists.txt:\n    4  \n    5  fancy_add_executable (LINK_LIBRARIES OpenImageIO\n    6:                                      ${Boost_LIBRARIES} # because regex\n    7                        )\n    8  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/igrep/igrep.cpp:\n   18  #include <OpenImageIO/sysutil.h>\n   19  \n   20: #ifdef USE_BOOST_REGEX\n   21: #    include <boost/regex.hpp>\n   22: using boost::regex;\n   23: using boost::regex_search;\n   24: using namespace boost::regex_constants;\n   25  #else\n   26  #    include <regex>\n   ..\n  174      }\n  175  \n  176: #if USE_BOOST_REGEX\n  177:     boost::regex_constants::syntax_option_type flag\n  178:         = boost::regex_constants::grep;\n  179      if (ap[\"E\"].get<int>())\n  180:         flag = boost::regex::extended;\n  181      if (ap[\"i\"].get<int>())\n  182:         flag |= boost::regex_constants::icase;\n  183  #else\n  184      auto flag = std::regex_constants::grep;\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/iinfo/CMakeLists.txt:\n    4  \n    5  fancy_add_executable (LINK_LIBRARIES OpenImageIO\n    6:                                      ${Boost_LIBRARIES} # because regex\n    7                        )\n    8  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/iinfo/iinfo.cpp:\n   22  #include <OpenImageIO/sysutil.h>\n   23  \n   24: #ifdef USE_BOOST_REGEX\n   25: #    include <boost/regex.hpp>\n   26: using boost::regex;\n   27: using boost::regex_search;\n   28  #else\n   29  #    include <regex>\n   ..\n  662  \n  663      if (!metamatch.empty()) {\n  664: #if USE_BOOST_REGEX\n  665          field_re.assign(metamatch,\n  666:                         boost::regex::extended | boost::regex_constants::icase);\n  667  #else\n  668          field_re.assign(metamatch, std::regex_constants::extended\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/include/OpenImageIO/detail/pugixml/pugixml.hpp:\n 1311  \t\ttypedef const xpath_node* const_iterator;\n 1312  \n 1313: \t\t// We define non-constant iterator to be the same as constant iterator so that various generic algorithms (i.e. boost foreach) work\n 1314  \t\ttypedef const xpath_node* iterator;\n 1315  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/CMakeLists.txt:\n  157              ${BZIP2_LIBRARIES}\n  158              ${ZLIB_LIBRARIES}\n  159:             ${Boost_LIBRARIES}\n  160              ${CMAKE_DL_LIBS}\n  161          )\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/color_ocio.cpp:\n    8  #include <vector>\n    9  \n   10: #include <boost/container/flat_map.hpp>\n   11  \n   12  #include <OpenImageIO/color.h>\n   ..\n  123  \n  124  \n  125: typedef boost::container::flat_map<ColorProcCacheKey, ColorProcessorHandle>\n  126      ColorProcessorMap;\n  127  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/exif.cpp:\n   12  #include <vector>\n   13  \n   14: #include <boost/container/flat_map.hpp>\n   15  \n   16  #include <OpenImageIO/fmath.h>\n   ..\n   28  class TagMap::Impl {\n   29  public:\n   30:     typedef boost::container::flat_map<int, const TagInfo*> tagmap_t;\n   31:     typedef boost::container::flat_map<std::string, const TagInfo*> namemap_t;\n   32      // Name map is lower case so it's effectively case-insensitive\n   33  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/formatspec.cpp:\n   23  #endif\n   24  \n   25: #ifdef USE_BOOST_REGEX\n   26: #    include <boost/regex.hpp>\n   27: using boost::regex;\n   28: using boost::regex_match;\n   29: using namespace boost::regex_constants;\n   30  #else\n   31  #    include <regex>\n   ..\n  360          return;  // Don't mess with regexp if there isn't any metadata\n  361      try {\n  362: #if USE_BOOST_REGEX\n  363:         boost::regex_constants::syntax_option_type flag\n  364:             = boost::regex_constants::basic;\n  365          if (!casesensitive)\n  366:             flag |= boost::regex_constants::icase;\n  367  #else\n  368          std::regex_constants::syntax_option_type flag\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/imageinput.cpp:\n   20  #include \"imageio_pvt.h\"\n   21  \n   22: #include <boost/thread/tss.hpp>\n   23: using boost::thread_specific_ptr;\n   24  \n   25  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/imageioplugin.cpp:\n  372      DECLAREPLUG (sgi);\n  373  #endif\n  374: #ifdef USE_BOOST_ASIO\n  375  #if !defined(DISABLE_SOCKET)\n  376      DECLAREPLUG (socket);\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/imageoutput.cpp:\n   22  #include \"imageio_pvt.h\"\n   23  \n   24: #include <boost/thread/tss.hpp>\n   25: using boost::thread_specific_ptr;\n   26  \n   27  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libOpenImageIO/xmp.cpp:\n    6  #include <iostream>\n    7  \n    8: #include <boost/container/flat_map.hpp>\n    9  \n   10  #include <OpenImageIO/fmath.h>\n   ..\n  222  \n  223  class XMPtagMap {\n  224:     typedef boost::container::flat_map<std::string, const XMPtag*> tagmap_t;\n  225      // Key is lower case so it's effectively case-insensitive\n  226  public:\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libtexture/imagecache_pvt.h:\n   13  #include <tsl/robin_map.h>\n   14  \n   15: #include <boost/container/flat_map.hpp>\n   16: #include <boost/thread/tss.hpp>\n   17  \n   18  #include <OpenImageIO/export.h>\n   ..\n   42  #define TILE_CACHE_SHARDS 128\n   43  \n   44: using boost::thread_specific_ptr;\n   45  \n   46  class ImageCacheImpl;\n   ..\n   52  texture_type_name(TexFormat f);\n   53  \n   54: #ifdef BOOST_CONTAINER_FLAT_MAP_HPP\n   55: typedef boost::container::flat_map<uint64_t, ImageCacheFile*> UdimLookupMap;\n   56  #else\n   57  typedef unordered_map<uint64_t, ImageCacheFile*> UdimLookupMap;\n   ..\n  919      /// Try to avoid looking to the big cache (and locking) most of the\n  920      /// time for fairly coherent tile access patterns, by using the\n  921:     /// per-thread microcache to boost our hit rate over the big cache.\n  922      /// Inlined for speed.  The tile is marked as 'used' if it wasn't the\n  923      /// very last one used, or if it was the same as the last used and\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libtexture/texturesys.cpp:\n   10  #include <string>\n   11  \n   12: #include <boost/random.hpp>\n   13  \n   14  #include <OpenImageIO/dassert.h>\n   ..\n 2924      visualize_ellipse(\"6.tif\", dsdx, dtdx, dsdy, dtdy, 0.0, 0.5);\n 2925  \n 2926:     boost::mt19937 rndgen;\n 2927:     boost::uniform_01<boost::mt19937, float> rnd(rndgen);\n 2928      for (int i = 0; i < 100; ++i) {\n 2929          dsdx = 1.5f * (rnd() - 0.5f);\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/CMakeLists.txt:\n   27          PRIVATE\n   28              ${SANITIZE_LIBRARIES}\n   29:             ${Boost_LIBRARIES}\n   30              ${CMAKE_DL_LIBS}\n   31          )\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/filesystem.cpp:\n    9  #include <string>\n   10  \n   11: #include <boost/tokenizer.hpp>\n   12  \n   13  #include <OpenImageIO/dassert.h>\n   ..\n   27  #endif\n   28  \n   29: #ifdef USE_BOOST_REGEX\n   30: #    include <boost/regex.hpp>\n   31: using boost::match_results;\n   32: using boost::regex;\n   33: using boost::regex_search;\n   34  #else\n   35  #    include <regex>\n   ..\n   39  #endif\n   40  \n   41: #include <boost/filesystem.hpp>\n   42: namespace filesystem = boost::filesystem;\n   43: using error_code     = boost::system::error_code;\n   44  // FIXME: use std::filesystem when available\n   45  \n   ..\n   49  \n   50  \n   51: // boost internally doesn't use MultiByteToWideChar (CP_UTF8,...\n   52  // to convert char* to wchar_t* because they do not know the encoding\n   53: // See boost/filesystem/path.hpp\n   54  // The only correct way to do this is to do the conversion ourselves.\n   55  \n   ..\n   87  \n   88  #ifdef _MSC_VER\n   89: // fix for https://svn.boost.org/trac/boost/ticket/6320\n   90  const std::string dummy_path = \"../dummy_path.txt\";\n   91  const std::string dummy_extension\n   ..\n   97  {\n   98      // To simplify dealing with platform-specific separators and whatnot,\n   99:     // just use the Boost routines:\n  100      return pathstr(u8path(filepath).filename());\n  101  }\n  ...\n  139      std::string path_copy = searchpath;\n  140      std::string last_token;\n  141:     typedef boost::tokenizer<boost::char_separator<char>> tokenizer;\n  142:     boost::char_separator<char> sep(\":;\");\n  143      tokenizer tokens(searchpath, sep);\n  144      for (tokenizer::iterator tok_iter         = tokens.begin();\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/strutil.cpp:\n   19  #endif\n   20  \n   21: #include <boost/algorithm/string.hpp>\n   22  \n   23  #include <OpenImageIO/dassert.h>\n   ..\n  406  Strutil::iequals(string_view a, string_view b)\n  407  {\n  408:     return boost::algorithm::iequals(a, b, std::locale::classic());\n  409  }\n  410  \n  ...\n  413  Strutil::iless(string_view a, string_view b)\n  414  {\n  415:     return boost::algorithm::ilexicographical_compare(a, b,\n  416                                                        std::locale::classic());\n  417  }\n  ...\n  421  Strutil::starts_with(string_view a, string_view b)\n  422  {\n  423:     return boost::algorithm::starts_with(a, b);\n  424  }\n  425  \n  ...\n  428  Strutil::istarts_with(string_view a, string_view b)\n  429  {\n  430:     return boost::algorithm::istarts_with(a, b, std::locale::classic());\n  431  }\n  432  \n  ...\n  435  Strutil::ends_with(string_view a, string_view b)\n  436  {\n  437:     return boost::algorithm::ends_with(a, b);\n  438  }\n  439  \n  ...\n  442  Strutil::iends_with(string_view a, string_view b)\n  443  {\n  444:     return boost::algorithm::iends_with(a, b, std::locale::classic());\n  445  }\n  446  \n  ...\n  449  Strutil::contains(string_view a, string_view b)\n  450  {\n  451:     return boost::algorithm::contains(a, b);\n  452  }\n  453  \n  ...\n  456  Strutil::icontains(string_view a, string_view b)\n  457  {\n  458:     return boost::algorithm::icontains(a, b, std::locale::classic());\n  459  }\n  460  \n  ...\n  463  Strutil::to_lower(std::string& a)\n  464  {\n  465:     boost::algorithm::to_lower(a, std::locale::classic());\n  466  }\n  467  \n  ...\n  470  Strutil::to_upper(std::string& a)\n  471  {\n  472:     boost::algorithm::to_upper(a, std::locale::classic());\n  473  }\n  474  \n  ...\n  478  Strutil::StringIEqual::operator()(const char* a, const char* b) const noexcept\n  479  {\n  480:     return boost::algorithm::iequals(a, b, std::locale::classic());\n  481  }\n  482  \n  ...\n  485  Strutil::StringILess::operator()(const char* a, const char* b) const noexcept\n  486  {\n  487:     return boost::algorithm::ilexicographical_compare(a, b,\n  488                                                        std::locale::classic());\n  489  }\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/sysutil.cpp:\n   63  #include <OpenImageIO/sysutil.h>\n   64  \n   65: #include <boost/version.hpp>\n   66: #if BOOST_VERSION >= 106500\n   67  #    ifndef _GNU_SOURCE\n   68  #        define _GNU_SOURCE\n   69  #    endif\n   70: #    include <boost/stacktrace.hpp>\n   71  #endif\n   72  \n   73: // clang 7.0 (rc2) has errors when including boost thread!\n   74: // The only thin we're using there is boost::physical_concurrency.\n   75  #if !(OIIO_CLANG_VERSION >= 7)\n   76: #    include <boost/thread.hpp>\n   77  #endif\n   78  \n   ..\n  549  Sysutil::physical_concurrency()\n  550  {\n  551:     // clang 7.0.0rc2 has trouble compiling boost thread\n  552: #if BOOST_VERSION >= 105600 && !(OIIO_CLANG_VERSION >= 7)\n  553:     return boost::thread::physical_concurrency();\n  554  #else\n  555      return std::thread::hardware_concurrency();\n  ...\n  602  Sysutil::stacktrace()\n  603  {\n  604: #if BOOST_VERSION >= 106500\n  605      std::stringstream out;\n  606:     out << boost::stacktrace::stacktrace();\n  607      return out.str();\n  608  #else\n  ...\n  613  \n  614  \n  615: #if BOOST_VERSION >= 106500\n  616  \n  617  static std::string stacktrace_filename;\n  ...\n  628              std::cerr << Sysutil::stacktrace();\n  629          else {\n  630: #    if BOOST_VERSION >= 106500\n  631:             boost::stacktrace::safe_dump_to(stacktrace_filename.c_str());\n  632  #    endif\n  633          }\n  ...\n  643  Sysutil::setup_crash_stacktrace(string_view filename)\n  644  {\n  645: #if BOOST_VERSION >= 106500\n  646      std::lock_guard<std::mutex> lock(stacktrace_filename_mutex);\n  647      stacktrace_filename = filename;\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/libutil/thread.cpp:\n   29  #include <OpenImageIO/thread.h>\n   30  \n   31: #include <boost/container/flat_map.hpp>\n   32  \n   33  #if 0\n   34  \n   35: // Use boost::lockfree::queue for the task queue\n   36: #    include <boost/lockfree/queue.hpp>\n   37: template<typename T> using Queue = boost::lockfree::queue<T>;\n   38  \n   39  #else\n   ..\n  346      std::mutex mutex;\n  347      std::condition_variable cv;\n  348:     mutable boost::container::flat_map<std::thread::id, int> m_worker_threadids;\n  349      mutable spin_mutex m_worker_threadids_mutex;\n  350  };\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/CMakeLists.txt:\n    4  \n    5  fancy_add_executable (LINK_LIBRARIES OpenImageIO\n    6:                                      ${Boost_LIBRARIES} # because regex\n    7                        )\n    8  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/oiiotool.cpp:\n   34  #include \"oiiotool.h\"\n   35  \n   36: #ifdef USE_BOOST_REGEX\n   37: #    include <boost/regex.hpp>\n   38: using boost::match_results;\n   39: using boost::regex;\n   40: using boost::regex_search;\n   41  #else\n   42  #    include <regex>\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/oiiotool.h:\n    9  #include <memory>\n   10  \n   11: #include <boost/container/flat_set.hpp>\n   12  \n   13  #include <OpenImageIO/color.h>\n   ..\n  951      std::vector<string_view> m_args;\n  952      ParamValueList m_options;\n  953:     typedef boost::container::flat_set<int> FastIntSet;\n  954      FastIntSet subimage_includes;  // Subimages to operate on (empty == all)\n  955      FastIntSet subimage_excludes;  // Subimages to skip for the op\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/oiiotool/printinfo.cpp:\n   27  #include \"oiiotool.h\"\n   28  \n   29: #ifdef USE_BOOST_REGEX\n   30: #    include <boost/regex.hpp>\n   31: using boost::regex;\n   32: using boost::regex_search;\n   33  #else\n   34  #    include <regex>\n   ..\n  747      if (!opt.metamatch.empty()) {\n  748          try {\n  749: #if USE_BOOST_REGEX\n  750:             field_re.assign(opt.metamatch, boost::regex::extended\n  751:                                                | boost::regex_constants::icase);\n  752  #else\n  753              field_re.assign(opt.metamatch, std::regex_constants::extended\n  ...\n  763      if (!opt.nometamatch.empty()) {\n  764          try {\n  765: #if USE_BOOST_REGEX\n  766              field_exclude_re.assign(opt.nometamatch,\n  767:                                     boost::regex::extended\n  768:                                         | boost::regex_constants::icase);\n  769  #else\n  770              field_exclude_re.assign(opt.nometamatch,\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/openexr.imageio/exrinput.cpp:\n   12  #include <numeric>\n   13  \n   14: #include <boost/version.hpp>\n   15: #if BOOST_VERSION >= 106900\n   16: #    include <boost/integer/common_factor_rt.hpp>\n   17: using boost::integer::gcd;\n   18  #else\n   19: #    include <boost/math/common_factor_rt.hpp>\n   20: using boost::math::gcd;\n   21  #endif\n   22  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/openvdb.imageio/CMakeLists.txt:\n    6      add_oiio_plugin (openvdbinput.cpp\n    7                       INCLUDE_DIRS ${TBB_INCLUDE_DIRS}\n    8:                      LINK_LIBRARIES OpenVDB::OpenVDB ${TBB_tbb_LIBRARY} ${BOOST_LIBRARIES})\n    9  endif()\n   10  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/python/py_imagebufalgo.cpp:\n 2380          .def_readonly(\"error\", &ImageBufAlgo::CompareResults::error);\n 2381  \n 2382:     // Use a boost::python::scope to put this all inside \"ImageBufAlgo\"\n 2383      py::class_<IBA_dummy>(m, \"ImageBufAlgo\")\n 2384          .def_static(\"zero\", &IBA_zero, \"dst\"_a, \"roi\"_a = ROI::All(),\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/python/py_oiio.h:\n   80  namespace PyOpenImageIO {\n   81  \n   82: //using namespace boost::python;\n   83  \n   84  using namespace OIIO;\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/CMakeLists.txt:\n    4  \n    5  add_oiio_plugin (socketinput.cpp socketoutput.cpp socket_pvt.cpp\n    6:                  DEFINITIONS \"-DUSE_BOOST_ASIO=1\")\n    7  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/socket_pvt.cpp:\n   14  OIIO_PLUGIN_NAMESPACE_BEGIN\n   15  \n   16: using namespace boost;\n   17: using namespace boost::asio;\n   18  \n   19  namespace socket_pvt {\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/socket_pvt.h:\n   17  \n   18  \n   19: // The boost::asio library uses functionality only available since Windows XP,\n   20  // thus _WIN32_WINNT must be set to _WIN32_WINNT_WINXP (0x0501) or greater.\n   21  // If _WIN32_WINNT is not defined before including the asio headers, they issue\n   ..\n   25  #endif\n   26  \n   27: #include <boost/asio.hpp>\n   28  \n   29  \n   30  OIIO_PLUGIN_NAMESPACE_BEGIN\n   31  \n   32: using namespace boost::asio;\n   33  \n   34  \n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/socketinput.cpp:\n   96          return false;\n   97      try {\n   98:         boost::asio::read(socket, buffer(reinterpret_cast<char*>(data),\n   99                                           m_spec.scanline_bytes()));\n  100:     } catch (boost::system::system_error& err) {\n  101          errorf(\"Error while reading: %s\", err.what());\n  102          return false;\n  ...\n  119          return false;\n  120      try {\n  121:         boost::asio::read(socket, buffer(reinterpret_cast<char*>(data),\n  122                                           m_spec.tile_bytes()));\n  123:     } catch (boost::system::system_error& err) {\n  124          errorf(\"Error while reading: %s\", err.what());\n  125          return false;\n  ...\n  162              new ip::tcp::acceptor(io, ip::tcp::endpoint(ip::tcp::v4(), port)));\n  163          acceptor->accept(socket);\n  164:     } catch (boost::system::system_error& err) {\n  165          errorf(\"Error while accepting: %s\", err.what());\n  166          return false;\n  ...\n  181          int spec_length;\n  182  \n  183:         boost::asio::read(socket, buffer(reinterpret_cast<char*>(&spec_length),\n  184:                                          sizeof(boost::uint32_t)));\n  185  \n  186          char* spec_xml = new char[spec_length + 1];\n  187:         boost::asio::read(socket, buffer(spec_xml, spec_length));\n  188  \n  189          spec.from_xml(spec_xml);\n  190          delete[] spec_xml;\n  191:     } catch (boost::system::system_error& err) {\n  192          errorf(\"Error while get_spec_from_client: %s\", err.what());\n  193          return false;\n\n/home/max/dev/Lava/third_party/OpenImageIO/src/socket.imageio/socketoutput.cpp:\n   66      try {\n   67          socket_pvt::socket_write(socket, format, data, m_spec.scanline_bytes());\n   68:     } catch (boost::system::system_error& err) {\n   69          errorf(\"Error while writing: %s\", err.what());\n   70          return false;\n   ..\n   90      try {\n   91          socket_pvt::socket_write(socket, format, data, m_spec.tile_bytes());\n   92:     } catch (boost::system::system_error& err) {\n   93          errorf(\"Error while writing: %s\", err.what());\n   94          return false;\n   ..\n  127  \n  128      try {\n  129:         boost::asio::write(socket,\n  130                             buffer(reinterpret_cast<const char*>(&xml_length),\n  131:                                   sizeof(boost::uint32_t)));\n  132:         boost::asio::write(socket, buffer(spec_xml.c_str(), spec_xml.length()));\n  133:     } catch (boost::system::system_error& err) {\n  134          errorf(\"Error while send_spec_to_server: %s\", err.what());\n  135          return false;\n  ...\n  164          ip::tcp::resolver::iterator end;\n  165  \n  166:         boost::system::error_code err = error::host_not_found;\n  167          while (err && endpoint_iterator != end) {\n  168              socket.close();\n  ...\n  173              return false;\n  174          }\n  175:     } catch (boost::system::system_error& err) {\n  176          errorf(\"Error while connecting: %s\", err.what());\n  177          return false;\n\n234 matches across 43 files\n\n\nSearching 60 files for \"PackedStaticVertexData\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/AnimationController.cpp:\n  145  }\n  146  \n  147: void AnimationController::createSkinningPass(const std::vector<PackedStaticVertexData>& staticVertexData, const std::vector<DynamicVertexData>& dynamicVertexData) {\n  148      // We always copy the static data, to initialize the non-skinned vertices\n  149      const Buffer::SharedPtr& pVB = mpScene->mpVao->getVertexBuffer(Scene::kStaticDataBufferIndex);\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/AnimationController.h:\n   61      ~AnimationController() = default;\n   62  \n   63:     using StaticVertexVector = std::vector<PackedStaticVertexData>;\n   64      using DynamicVertexVector = std::vector<DynamicVertexData>;\n   65  \n   ..\n  126      std::vector<glm::mat4> mInvTransposeSkinningMatrices;\n  127      uint32_t mSkinningDispatchSize = 0;\n  128:     void createSkinningPass(const std::vector<PackedStaticVertexData>& staticVertexData, const std::vector<DynamicVertexData>& dynamicVertexData);\n  129      void executeSkinningPass(RenderContext* pContext);\n  130  \n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/Skinning.slang:\n   30  struct SkinningData\n   31  {\n   32:     StructuredBuffer<PackedStaticVertexData> staticData;\n   33      StructuredBuffer<DynamicVertexData> dynamicData;\n   34:     RWStructuredBuffer<PackedStaticVertexData> skinnedVertices;\n   35      RWStructuredBuffer<PrevVertexData> prevSkinnedVertices;\n   36      StructuredBuffer<float4> boneMatrices;\n\n/home/max/dev/Lava/src/Falcor/Scene/Raster.slang:\n   32  struct VSIn\n   33  {\n   34:     // Packed vertex attributes, see PackedStaticVertexData\n   35      float3 pos                      : POSITION;\n   36      float3 packedNormalTangent      : PACKED_NORMAL_TANGENT;\n   ..\n   43      StaticVertexData unpack()\n   44      {\n   45:         PackedStaticVertexData v;\n   46          v.position = pos;\n   47          v.packedNormalTangent = packedNormalTangent;\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.cpp:\n   60  #endif\n   61  \n   62:     static_assert(sizeof(PackedStaticVertexData) % 16 == 0, \"PackedStaticVertexData size should be a multiple of 16\");\n   63      static_assert(sizeof(PackedMeshInstanceData) % 16 == 0, \"PackedMeshInstanceData size should be a multiple of 16\");\n   64      static_assert(PackedMeshInstanceData::kMatrixBits + PackedMeshInstanceData::kMeshBits + PackedMeshInstanceData::kFlagsBits <= 32);\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.slang:\n   59      StructuredBuffer<float4> previousFrameWorldMatrices;\n   60  \n   61:     [root] StructuredBuffer<PackedStaticVertexData> vertices;       ///< Vertex data for this frame.\n   62      StructuredBuffer<PrevVertexData> prevVertices;                  ///< Vertex data for the previous frame, to handle skinned meshes.\n   63  #if INDEXED_VERTICES\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.cpp:\n  424          s.texCrd = v.texCrd;\n  425          //s.tangent = v.tangent;\n  426:         mBuffersData.staticData.push_back(PackedStaticVertexData(s));\n  427  \n  428          if (mesh.hasBones()) {\n  ...\n  515      const size_t vertexCount = (uint32_t)mBuffersData.staticData.size();\n  516      size_t ibSize = sizeof(uint32_t) * mBuffersData.indices.size();\n  517:     size_t staticVbSize = sizeof(PackedStaticVertexData) * vertexCount;\n  518      size_t prevVbSize = sizeof(PrevVertexData) * vertexCount;\n  519      assert(ibSize <= std::numeric_limits<uint32_t>::max() && staticVbSize <= std::numeric_limits<uint32_t>::max() && prevVbSize <= std::numeric_limits<uint32_t>::max());\n  ...\n  529      // Create the vertex data as structured buffers\n  530      ResourceBindFlags vbBindFlags = ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess | ResourceBindFlags::Vertex;\n  531:     Buffer::SharedPtr pStaticBuffer = Buffer::createStructured(mpDevice, sizeof(PackedStaticVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n  532      Buffer::SharedPtr pPrevBuffer = Buffer::createStructured(mpDevice, sizeof(PrevVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n  533  \n  ...\n  544      // Add the packed static vertex data layout\n  545      VertexBufferLayout::SharedPtr pStaticLayout = VertexBufferLayout::create();\n  546:     pStaticLayout->addElement(VERTEX_POSITION_NAME, offsetof(PackedStaticVertexData, position), ResourceFormat::RGB32Float, 1, VERTEX_POSITION_LOC);\n  547:     pStaticLayout->addElement(VERTEX_PACKED_NORMAL_TANGENT_NAME, offsetof(PackedStaticVertexData, packedNormalTangent), ResourceFormat::RGB32Float, 1, VERTEX_PACKED_NORMAL_TANGENT_LOC);\n  548:     pStaticLayout->addElement(VERTEX_TEXCOORD_NAME, offsetof(PackedStaticVertexData, texCrd), ResourceFormat::RG32Float, 1, VERTEX_TEXCOORD_LOC);\n  549      pLayout->addBufferLayout(Scene::kStaticDataBufferIndex, pStaticLayout);\n  550  \n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.h:\n  291      struct BuffersData {\n  292          std::vector<uint32_t> indices;\n  293:         std::vector<PackedStaticVertexData> staticData;\n  294          std::vector<DynamicVertexData> dynamicData;\n  295      } mBuffersData;\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneTypes.slang:\n  129  /** Vertex data packed into 32B for aligned access.\n  130  */\n  131: struct PackedStaticVertexData\n  132  {\n  133      float3 position;\n  ...\n  136  \n  137  #ifdef HOST_CODE\n  138:     PackedStaticVertexData(const StaticVertexData& v) { pack(v); }\n  139      void pack(const StaticVertexData& v)\n  140      {\n\n19 matches across 9 files\n\n\nSearching 60 files for \"evalSpecularBrdf\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n  107  }\n  108  \n  109: float3 evalSpecularBrdf(ShadingData sd, LightSample ls)\n  110  {\n  111      float ggxAlpha = sd.ggxAlpha;\n\n/home/max/dev/Lava/src/Falcor/Scene/Shading.slang:\n  335  \n  336      // Calculate the specular term\n  337:     sr.specularBrdf = evalSpecularBrdf(sd, ls);\n  338      sr.specular = ls.specular * sr.specularBrdf * ls.NdotL;\n  339      sr.color += sr.specular;\n\n2 matches across 2 files\n\n\nSearching 60 files for \"disneyDiffuseFresnel\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang:\n  112              float LdotH = saturate(dot(L, normalize(V + L)));\n  113              float NdotV = saturate(dot(N, V));\n  114:             float brdf = disneyDiffuseFresnel(NdotV, NdotL, LdotH, 0);\n  115              accumulation += gInputTex.Sample(gSampler, uv).rgb * brdf;\n  116              accBrdf += brdf;\n  ...\n  202              LdotH = saturate(dot(L, normalize(V + L)));\n  203              NdotV = saturate(dot(N, V));\n  204:             accumulation.b += disneyDiffuseFresnel(NdotV, NdotL, LdotH, sqrt(roughness));\n  205          }\n  206      }\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   43  /** Disney's diffuse term. Based on https://disney-animation.s3.amazonaws.com/library/s2012_pbs_disney_brdf_notes_v2.pdf\n   44  */\n   45: float disneyDiffuseFresnel(float NdotV, float NdotL, float LdotH, float linearRoughness)\n   46  {\n   47      float fd90 = 0.5 + 2 * LdotH * LdotH * linearRoughness;\n   ..\n   54  float3 evalDiffuseDisneyBrdf(ShadingData sd, LightSample ls)\n   55  {\n   56:     return disneyDiffuseFresnel(sd.NdotV, ls.NdotL, ls.LdotH, sd.linearRoughness) * M_1_PI * sd.diffuse.rgb;\n   57  }\n   58  \n\n4 matches across 2 files\n\n\nSearching 60 files for \"abs\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/Animatable.h:\n   39      {\n   40      public:\n   41:         // While this is an abstract base class, we still need a holder type (shared_ptr)\n   42          // for pybind11 bindings to work on inherited types.\n   43          using SharedPtr = std::shared_ptr<Animatable>;\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang:\n   45  void generateBasis(float3 N, out float3 up, out float3 right, out float3 forward)\n   46  {\n   47:     up = abs(N.z) < 0.999999f ? float3(0, 0, 1) : float3(1, 0, 0);\n   48      right = normalize(cross(up, N));\n   49      forward = cross(N, right);\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   59      } else { \n   60          float cost = sqrt(max(0.0, 1.0 - sint * sint)); \n   61:         cosi = fabsf(cosi); \n   62          float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost)); \n   63          float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost)); \n\n/home/max/dev/Lava/src/Falcor/Scene/Material/Material.cpp:\n  403  }\n  404  \n  405: void Material::setVolumeAbsorption(const float3& volumeAbsorption) {\n  406:     if (mData.volumeAbsorption != volumeAbsorption) {\n  407:         mData.volumeAbsorption = volumeAbsorption;\n  408          markUpdates(UpdateFlags::DataChanged);\n  409      }\n  ...\n  469      compare_field(specularTransmission);\n  470      compare_field(flags);\n  471:     compare_field(volumeAbsorption);\n  472  #undef compare_field\n  473  \n  ...\n  569      material.def_property(\"metallic\", &Material::getMetallic, &Material::setMetallic);\n  570      material.def_property(\"specularTransmission\", &Material::getSpecularTransmission, &Material::setSpecularTransmission);\n  571:     material.def_property(\"volumeAbsorption\", &Material::getVolumeAbsorption, &Material::setVolumeAbsorption);\n  572      material.def_property(\"indexOfRefraction\", &Material::getIndexOfRefraction, &Material::setIndexOfRefraction);\n  573      material.def_property(\"emissiveColor\", &Material::getEmissiveColor, &Material::setEmissiveColor);\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/Material.h:\n  268      float getSpecularTransmission() const { return mData.specularTransmission; }\n  269  \n  270:     /** Set the volume absorption (absorption coefficient).\n  271      */\n  272:     void setVolumeAbsorption(const float3& volumeAbsorption);\n  273  \n  274:     /** Get the volume absorption (absorption coefficient).\n  275      */\n  276:     const float3& getVolumeAbsorption() const { return mData.volumeAbsorption; }\n  277  \n  278      /** Set the emissive color\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/MaterialData.slang:\n   74      float    specularTransmission   = 0.f;              ///< Specular transmission.\n   75  \n   76:     float3   volumeAbsorption       = float3(0, 0, 0);  ///< Volume absorption coefficient.\n   77      uint32_t flags                  = 0;                ///< See flags in MaterialDefines.slangh\n   78  \n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.cpp:\n  121      if (lhs.tangent.w != rhs.tangent.w) return false;\n  122      if (lhs.boneIDs != rhs.boneIDs) return false;\n  123:     if (any(greaterThan(abs(lhs.normal - rhs.normal), float3(threshold)))) return false;\n  124:     if (any(greaterThan(abs(lhs.tangent.xyz - rhs.tangent.xyz), float3(threshold)))) return false;\n  125:     if (any(greaterThan(abs(lhs.texCrd - rhs.texCrd), float2(threshold)))) return false;\n  126:     if (any(greaterThan(abs(lhs.boneWeights - rhs.boneWeights), float4(threshold)))) return false;\n  127      return true;\n  128  }\n  ...\n  358              maxTexCrd = max(maxTexCrd, texCrd);\n  359              v.first.texCrd = f16tof32(f32tof16(texCrd));\n  360:             maxError = max(maxError, abs(v.first.texCrd - texCrd));\n  361          }\n  362  \n  363          // Issue warning if quantization errors are too large.\n  364:         float2 maxAbsCrd = max(abs(minTexCrd), abs(maxTexCrd));\n  365:         if (maxAbsCrd.x > HLF_MAX || maxAbsCrd.y > HLF_MAX) {\n  366              logWarning(\"Texture coordinates for emissive textured mesh '\" + mesh.name + \"' are outside the representable range, expect rendering errors.\");\n  367          } else {\n\n/home/max/dev/Lava/src/Falcor/Scene/TextureSampler.slang:\n  101          else // RayDiffsLODComputationMode::PBRTStyle\n  102          {\n  103:             float filterWidth = 2.0 * max(txw * max(abs(dUVdx.x), abs(dUVdy.x)), txh * max(abs(dUVdx.y), abs(dUVdy.y)));    // PBRT style (much blurrier, but never (?) aliases)\n  104              lambda = log2(filterWidth);\n  105          }\n\n37 matches across 8 files\n\n\nSearching 60 files for \"PI\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/Animation.cpp:\n  125      Keyframe interpolated;\n  126  \n  127:     // Compute index of adjacent frame including optional warping.\n  128      auto adjacentFrame = [] (const Channel& c, size_t frame, int32_t offset = 1)\n  129      {\n  130          size_t count = c.keyframes.size();\n  131          if ((int64_t)frame + offset < 0) frame += count;\n  132:         return c.enableWarping ? (frame + offset) % count : std::min(frame + offset, count - 1);\n  133      };\n  134  \n  ...\n  142  \n  143          double segmentDuration = k1.time - k0.time;\n  144:         if (c.enableWarping && segmentDuration < 0.0) segmentDuration += mDurationInSeconds;\n  145          float t = (float)clamp(segmentDuration > 0.0 ? (time - k0.time) / segmentDuration : 1.0, 0.0, 1.0);\n  146  \n  ...\n  160  \n  161          double segmentDuration = k2.time - k1.time;\n  162:         if (c.enableWarping && segmentDuration < 0.0) segmentDuration += mDurationInSeconds;\n  163          float t = (float)clamp(segmentDuration > 0.0 ? (time - k1.time) / segmentDuration : 1.0, 0.0, 1.0);\n  164  \n  ...\n  261  }\n  262  \n  263: void Animation::setInterpolationMode(uint32_t channelID, InterpolationMode mode, bool enableWarping)\n  264  {\n  265      assert(channelID < mChannels.size());\n  266      mChannels[channelID].interpolationMode = mode;\n  267:     mChannels[channelID].enableWarping = enableWarping;\n  268  }\n  269  \n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/Animation.h:\n   89      bool doesKeyframeExists(uint32_t channelID, double time) const;\n   90  \n   91:     /** Set the interpolation mode and enable/disable warping for a given channel.\n   92      */\n   93:     void setInterpolationMode(uint32_t channelID, InterpolationMode mode, bool enableWarping);\n   94  \n   95      /** Run the animation\n   ..\n  108      struct Channel\n  109      {\n  110:         Channel(uint32_t matrixID, InterpolationMode interpolationMode = InterpolationMode::Linear, bool enableWarping = true)\n  111              : matrixID(matrixID)\n  112              , interpolationMode(interpolationMode)\n  113:             , enableWarping(enableWarping)\n  114          {};\n  115  \n  116          uint32_t matrixID;\n  117          InterpolationMode interpolationMode;\n  118:         bool enableWarping;\n  119          std::vector<Keyframe> keyframes;\n  120          mutable size_t lastKeyframeUsed = 0;\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/AnimationController.cpp:\n   53      mpPrevWorldMatricesBuffer = Buffer::createStructured(mpDevice, sizeof(float4), float4Count, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n   54      mpPrevWorldMatricesBuffer->setName(\"AnimationController::mpPrevWorldMatricesBuffer\");\n   55:     mpInvTransposeWorldMatricesBuffer = Buffer::createStructured(mpDevice, sizeof(float4), float4Count, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n   56:     mpInvTransposeWorldMatricesBuffer->setName(\"AnimationController::mpInvTransposeWorldMatricesBuffer\");\n   57      createSkinningPass(staticVertexData, dynamicVertexData);\n   58  }\n   ..\n  134      }\n  135      mpWorldMatricesBuffer->setBlob(mGlobalMatrices.data(), 0, mpWorldMatricesBuffer->getSize());\n  136:     mpInvTransposeWorldMatricesBuffer->setBlob(mInvTransposeGlobalMatrices.data(), 0, mpInvTransposeWorldMatricesBuffer->getSize());\n  137  }\n  138  \n  ...\n  142      bool usePrev = mEnabled && hasAnimations();\n  143      pBlock->setBuffer(kPreviousFrameWorldMatrices, usePrev ? mpPrevWorldMatricesBuffer : mpWorldMatricesBuffer);\n  144:     pBlock->setBuffer(kInverseTransposeWorldMatrices, mpInvTransposeWorldMatricesBuffer);\n  145  }\n  146  \n  ...\n  184          mpSkinningMatricesBuffer = Buffer::createStructured(pDevice, sizeof(float4), float4Count, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  185          mpSkinningMatricesBuffer->setName(\"AnimationController::mpSkinningMatricesBuffer\");\n  186:         mpInvTransposeSkinningMatricesBuffer = Buffer::createStructured(pDevice, sizeof(float4), float4Count, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  187:         mpInvTransposeSkinningMatricesBuffer->setName(\"AnimationController::mpInvTransposeSkinningMatricesBuffer\");\n  188          block[\"boneMatrices\"].setBuffer(mpSkinningMatricesBuffer);\n  189:         block[\"inverseTransposeBoneMatrices\"].setBuffer(mpInvTransposeSkinningMatricesBuffer);\n  190:         block[\"inverseTransposeWorldMatrices\"].setBuffer(mpInvTransposeWorldMatricesBuffer);\n  191          block[\"worldMatrices\"].setBuffer(mpWorldMatricesBuffer);\n  192  \n  ...\n  198      if (!mpSkinningPass) return;\n  199      mpSkinningMatricesBuffer->setBlob(mSkinningMatrices.data(), 0, mpSkinningMatricesBuffer->getSize());\n  200:     mpInvTransposeSkinningMatricesBuffer->setBlob(mInvTransposeSkinningMatrices.data(), 0, mpInvTransposeSkinningMatricesBuffer->getSize());\n  201      mpSkinningPass->execute(pContext, mSkinningDispatchSize, 1, 1);\n  202  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/AnimationController.h:\n  119      Buffer::SharedPtr mpWorldMatricesBuffer;\n  120      Buffer::SharedPtr mpPrevWorldMatricesBuffer;\n  121:     Buffer::SharedPtr mpInvTransposeWorldMatricesBuffer;\n  122  \n  123      // Skinning\n  ...\n  130  \n  131      Buffer::SharedPtr mpSkinningMatricesBuffer;\n  132:     Buffer::SharedPtr mpInvTransposeSkinningMatricesBuffer;\n  133      void initLocalMatrices();\n  134  };\n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/Camera.cpp:\n   73      if (firstFrame) mPrevData = mData;\n   74  \n   75:     // Keep copies of the transforms used for the previous frame. We need these for computing motion vectors etc.\n   76      mData.prevViewProjMatNoJitter = mPrevData.viewProjMatNoJitter;\n   77  \n   ..\n  154  \n  155          // Build jitter matrix\n  156:         // (jitterX and jitterY are expressed as subpixel quantities divided by the screen resolution\n  157:         //  for instance to apply an offset of half pixel along the X axis we set jitterX = 0.5f / Width)\n  158          glm::mat4 jitterMat(1.0f, 0.0f, 0.0f, 0.0f,\n  159              0.0f, 1.0f, 0.0f, 0.0f,\n  ...\n  294  }\n  295  \n  296: float Camera::computeScreenSpacePixelSpreadAngle(const uint32_t winHeightPixels) const\n  297  {\n  298      const float FOVrad = focalLengthToFovY(getFocalLength(), Camera::kDefaultFrameHeight);\n  299:     const float angle = std::atan(2.0f * std::tan(FOVrad * 0.5f) / winHeightPixels);\n  300      return angle;\n  301  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/Camera.cpp.bak:\n   68      if (firstFrame) mPrevData = mData;\n   69  \n   70:     // Keep copies of the transforms used for the previous frame. We need these for computing motion vectors etc.\n   71      mData.prevViewProjMatNoJitter = mPrevData.viewProjMatNoJitter;\n   72  \n   ..\n  128  \n  129          // Build jitter matrix\n  130:         // (jitterX and jitterY are expressed as subpixel quantities divided by the screen resolution\n  131:         //  for instance to apply an offset of half pixel along the X axis we set jitterX = 0.5f / Width)\n  132          glm::mat4 jitterMat(1.0f, 0.0f, 0.0f, 0.0f,\n  133              0.0f, 1.0f, 0.0f, 0.0f,\n  ...\n  251  }\n  252  \n  253: float Camera::computeScreenSpacePixelSpreadAngle(const uint32_t winHeightPixels) const {\n  254      const float FOVrad = focalLengthToFovY(getFocalLength(), Camera::kDefaultFrameHeight);\n  255:     const float angle = atanf(2.0f * tanf(FOVrad * 0.5f) / winHeightPixels);\n  256      return angle;\n  257  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/Camera.h:\n  183  \n  184      /** Set the camera's jitter.\n  185:         \\param[in] jitterX Subpixel offset along X axis divided by screen width (positive value shifts the image right).\n  186:         \\param[in] jitterY Subpixel offset along Y axis divided by screen height (positive value shifts the image up).\n  187      */\n  188      void setJitter(float jitterX, float jitterY);\n  ...\n  190      float getJitterY() const { return mData.jitterY; }\n  191  \n  192:     /** Compute pixel spread in screen space -- to be used with RayCones for texture level-of-detail.\n  193:         \\param[in] winHeightPixels Window height in pixels\n  194:         \\return the pixel spread angle in screen space\n  195      */\n  196:     float computeScreenSpacePixelSpreadAngle(const uint32_t winHeightPixels) const;\n  197  \n  198      /** Get the view matrix.\n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/Camera.slang:\n   49      float4x4 getViewProj() { return data.viewProjMat; }\n   50  \n   51:     /** Computes a camera ray for a given pixel assuming a pinhole camera model.\n   52          The camera jitter is taken into account to compute the sample position on the image plane.\n   53:         \\param[in] pixel Pixel coordinates with origin in top-left.\n   54:         \\param[in] frameDim Image plane dimensions in pixels.\n   55          \\return Returns the camera ray.\n   56      */\n   57:     CameraRay computeRayPinhole(uint2 pixel, uint2 frameDim)\n   58      {\n   59          CameraRay ray;\n   60  \n   61:         // Compute the normalized ray direction assuming a pinhole camera.\n   62          ray.origin = data.posW;\n   63:         ray.dir = normalize(computeNonNormalizedRayDirPinhole(pixel, frameDim));\n   64  \n   65          float invCos = 1.f / dot(normalize(data.cameraW), ray.dir);\n   ..\n   70      }\n   71  \n   72:     /** Computes the primary ray's direction, non-normalized assuming pinhole camera model.\n   73          The camera jitter is taken into account to compute the sample position on the image plane.\n   74:         \\param[in] pixel Pixel coordinates with origin in top-left.\n   75:         \\param[in] frameDim Image plane dimensions in pixels.\n   76          \\return Returns the non-normalized ray direction\n   77      */\n   78:     float3 computeNonNormalizedRayDirPinhole(uint2 pixel, uint2 frameDim)\n   79      {\n   80          // Compute sample position in screen space in [0,1] with origin at the top-left corner.\n   81:         // The camera jitter offsets the sample by +-0.5 pixels from the pixel center.\n   82:         float2 p = (pixel + float2(0.5f, 0.5f)) / frameDim + float2(-data.jitterX, data.jitterY);\n   83          float2 ndc = float2(2, -2) * p + float2(-1, 1);\n   84  \n   85:         // Compute the non-normalized ray direction assuming a pinhole camera.\n   86          return ndc.x * data.cameraU + ndc.y * data.cameraV + data.cameraW;\n   87      }\n   88  \n   89  \n   90:     /** Computes a camera ray for a given pixel assuming a thin-lens camera model.\n   91          The camera jitter is taken into account to compute the sample position on the image plane.\n   92:         \\param[in] pixel Pixel coordinates with origin in top-left.\n   93:         \\param[in] frameDim Image plane dimensions in pixels.\n   94          \\param[in] u Uniform 2D sample.\n   95          \\return Returns the camera ray.\n   96      */\n   97:     CameraRay computeRayThinlens(uint2 pixel, uint2 frameDim, float2 u)\n   98      {\n   99          CameraRay ray;\n  100  \n  101          // Sample position in screen space in [0,1] with origin at the top-left corner.\n  102:         // The camera jitter offsets the sample by +-0.5 pixels from the pixel center.\n  103:         float2 p = (pixel + float2(0.5f, 0.5f)) / frameDim + float2(-data.jitterX, data.jitterY);\n  104          float2 ndc = float2(2, -2) * p + float2(-1, 1);\n  105  \n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/CameraData.slang:\n   51      float    farZ                   = 1000.0f;                  ///< Camera far plane.\n   52      float3   cameraV                = float3(0, 1, 0);          ///< Camera base vector V. Normalized it indicates the up image plane vector. The length is dependent on the FOV.\n   53:     float    jitterX                = 0.0f;                     ///< Eventual camera jitter along the x axis expressed as a subpixel offset divided by screen width (positive value shifts the image right).\n   54      float3   cameraW                = float3(1, 0, 0);          ///< Camera base vector W. Normalized it indicates the forward direction. The length is the camera focal distance.\n   55:     float    jitterY                = 0.0f;                     ///< Eventual camera jitter along the y axis expressed as a subpixel offset divided by screen height (positive value shifts the image up).\n   56  \n   57      float    frameHeight            = 24.0f;                    ///< Camera film frame height in mm. 24 is the height of a 35mm film\n\n/home/max/dev/Lava/src/Falcor/Scene/Importers/AssimpImporter.cpp:\n   31  #include \"assimp/scene.h\"\n   32  #include \"assimp/pbrmaterial.h\"\n   33: #include \"AssimpImporter.h\"\n   34  #include \"Falcor/Utils/StringUtils.h\"\n   35  #include \"Falcor/Utils/Timing/TimeReport.h\"\n   36: #include \"Falcor/Core/API/Device.h\"\n   37  #include \"Falcor/Scene/SceneBuilder.h\"\n   38  #include \"Falcor/Scene/Importer.h\"\n   ..\n   43  namespace\n   44  {\n   45:     // Global camera animation interpolation and warping configuration.\n   46      // Assimp does not provide enough information to determine this from data.\n   47      static const Animation::InterpolationMode kCameraInterpolationMode = Animation::InterpolationMode::Linear;\n   48:     static const bool kCameraEnableWarping = true;\n   49  \n   50      using BoneMeshMap = std::map<std::string, std::vector<uint32_t>>;\n   ..\n   92      }\n   93  \n   94:     /** Mapping from ASSIMP to Falcor texture type.\n   95      */\n   96:     struct TextureMapping\n   97      {\n   98          aiTextureType aiType;\n   ..\n  101      };\n  102  \n  103:     /** Mapping tables for different import modes.\n  104      */\n  105:     static const std::vector<TextureMapping> kTextureMappings[3] =\n  106      {\n  107:         // Default mappings\n  108          {\n  109              { aiTextureType_DIFFUSE, 0, Material::TextureSlot::BaseColor },\n  ...\n  113              { aiTextureType_AMBIENT, 0, Material::TextureSlot::Occlusion },\n  114          },\n  115:         // OBJ mappings\n  116          {\n  117              { aiTextureType_DIFFUSE, 0, Material::TextureSlot::BaseColor },\n  ...\n  123              { aiTextureType_DISPLACEMENT, 0, Material::TextureSlot::Normal },\n  124          },\n  125:         // GLTF2 mappings\n  126          {\n  127              { aiTextureType_DIFFUSE, 0, Material::TextureSlot::BaseColor },\n  ...\n  308                      pCamera->setNodeID(nodeID);\n  309                      pCamera->setHasAnimation(true);\n  310:                     data.builder.setNodeInterpolationMode(nodeID, kCameraInterpolationMode, kCameraEnableWarping);\n  311                  }\n  312              }\n  ...\n  536              assert(indexList.size() <= std::numeric_limits<uint32_t>::max());\n  537              mesh.indexCount = (uint32_t)indexList.size();\n  538:             mesh.pIndices = indexList.data();\n  539  \n  540              // Vertices\n  ...\n  731          assert(pDevice);\n  732  \n  733:         const auto& textureMappings = kTextureMappings[int(importMode)];\n  734  \n  735:         for (const auto& source : textureMappings)\n  736          {\n  737              // Skip if texture of requested type is not available\n  ...\n 1022  }  // namespace anon\n 1023  \n 1024: bool AssimpImporter::import(const std::string& filename, SceneBuilder& builder, const SceneBuilder::InstanceMatrices& instances, const Dictionary& dict)\n 1025  {\n 1026      auto pDevice = builder.device();\n ....\n 1127  \n 1128  REGISTER_IMPORTER(\n 1129:     AssimpImporter,\n 1130      Importer::ExtensionList({\n 1131          \"fbx\",\n\n/home/max/dev/Lava/src/Falcor/Scene/Importers/AssimpImporter.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FACLOR_SCENE_IMPORTERS_ASSIMPIMPORTER_H_\n   29: #define SRC_FACLOR_SCENE_IMPORTERS_ASSIMPIMPORTER_H_\n   30  \n   31  #include \"Falcor/Scene/SceneBuilder.h\"\n   ..\n   36  class Device;\n   37  \n   38: class dlldecl AssimpImporter\n   39  {\n   40  public:\n   41      static bool import(const std::string& filename, SceneBuilder& builder, const SceneBuilder::InstanceMatrices& instances, const Dictionary& dict);\n   42  private:\n   43:     AssimpImporter() = default;\n   44:     AssimpImporter(const AssimpImporter&) = delete;\n   45:     void operator=(const AssimpImporter&) = delete;\n   46  \n   47      std::shared_ptr<Device>\t\tmpDeivce;\n   ..\n   50  }  // namespace Falcor\n   51  \n   52: #endif  // SRC_FACLOR_SCENE_IMPORTERS_ASSIMPIMPORTER_H_\n   53  \n\n/home/max/dev/Lava/src/Falcor/Scene/Importers/PythonImporter.cpp:\n   35  \n   36  #include \"Falcor/stdafx.h\"\n   37: #include \"Falcor/Core/API/Device.h\"\n   38  #include \"Falcor/Scene/Importer.h\"\n   39  #include \"PythonImporter.h\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Importers/SceneImporter.cpp:\n   36  #include \"Falcor/stdafx.h\"\n   37  #include \"SceneImporter.h\"\n   38: #include \"rapidjson/document.h\"\n   39: #include \"rapidjson/error/en.h\"\n   40: #include \"Falcor/Core/API/Device.h\"\n   41  #include \"Falcor/Scene/Importer.h\"\n   42  #include \"glm/gtx/euler_angles.hpp\"\n   ..\n  123  \n  124  private:\n  125:     bool parseVersion(const rapidjson::Value& jsonVal);\n  126:     bool parseSceneUnit(const rapidjson::Value& jsonVal);\n  127:     bool parseModels(const rapidjson::Value& jsonVal);\n  128:     bool parseLights(const rapidjson::Value& jsonVal);\n  129:     bool parseLightProbes(const rapidjson::Value& jsonVal);\n  130:     bool parseCameras(const rapidjson::Value& jsonVal);\n  131:     bool parseCamera(const rapidjson::Value& jsonVal);\n  132:     bool parseAmbientIntensity(const rapidjson::Value& jsonVal);\n  133:     bool parseActiveCamera(const rapidjson::Value& jsonVal);\n  134:     bool parseCameraSpeed(const rapidjson::Value& jsonVal);\n  135:     bool parseLightingScale(const rapidjson::Value& jsonVal);\n  136:     bool parsePaths(const rapidjson::Value& jsonVal);\n  137:     bool parseUserDefinedSection(const rapidjson::Value& jsonVal);\n  138:     bool parseActivePath(const rapidjson::Value& jsonVal);\n  139:     bool parseIncludes(const rapidjson::Value& jsonVal);\n  140:     bool parseEnvMap(const rapidjson::Value& jsonVal);\n  141  \n  142      bool topLevelLoop();\n  ...\n  144      bool loadIncludeFile(const std::string& Include);\n  145  \n  146:     std::vector<glm::mat4> parseModelInstances(const rapidjson::Value& jsonVal);\n  147:     bool createModel(const rapidjson::Value& jsonModel);\n  148:     bool createPointLight(const rapidjson::Value& jsonLight);\n  149:     bool createDirLight(const rapidjson::Value& jsonLight);\n  150:     bool createDistantLight(const rapidjson::Value& jsonLight);\n  151:     bool createAnalyticAreaLight(const rapidjson::Value& jsonLight);\n  152  \n  153      bool error(const std::string& msg);\n  154  \n  155      template<uint32_t VecSize>\n  156:     bool getFloatVec(const rapidjson::Value& jsonVal, const std::string& desc, float vec[VecSize]);\n  157:     bool getFloatVecAnySize(const rapidjson::Value& jsonVal, const std::string& desc, std::vector<float>& vec);\n  158:     rapidjson::Document mJDoc;\n  159      SceneBuilder& mBuilder;\n  160      std::string mFilename;\n  ...\n  190  \n  191  template<uint32_t VecSize>\n  192: bool SceneImporterImpl::getFloatVec(const rapidjson::Value& jsonVal, const std::string& desc, float vec[VecSize])\n  193  {\n  194      if (jsonVal.IsArray() == false)\n  ...\n  215  }\n  216  \n  217: bool SceneImporterImpl::getFloatVecAnySize(const rapidjson::Value& jsonVal, const std::string& desc, std::vector<float>& vec)\n  218  {\n  219      if (jsonVal.IsArray() == false)\n  ...\n  235  }\n  236  \n  237: std::vector<glm::mat4> SceneImporterImpl::parseModelInstances(const rapidjson::Value& jsonVal)\n  238  {\n  239      struct ModelInstance\n  ...\n  282          T[3] = float4(instances[i].position, 1);\n  283          glm::mat4 S = glm::scale(instances[i].scaling);\n  284:         glm::mat4 R = glm::yawPitchRoll(instances[i].rotation[0], instances[i].rotation[1], instances[i].rotation[2]);\n  285          matrices[i] = T * R * S;\n  286      }\n  ...\n  289  }\n  290  \n  291: bool SceneImporterImpl::createModel(const rapidjson::Value& jsonModel)\n  292  {\n  293      // Model must have at least a filename\n  ...\n  386  }\n  387  \n  388: bool SceneImporterImpl::parseModels(const rapidjson::Value& jsonVal)\n  389  {\n  390      if (jsonVal.IsArray() == false)\n  ...\n  404  }\n  405  \n  406: bool SceneImporterImpl::createDirLight(const rapidjson::Value& jsonLight)\n  407  {\n  408      auto pDirLight = DirectionalLight::create();\n  ...\n  457  }\n  458  \n  459: bool SceneImporterImpl::createDistantLight(const rapidjson::Value& jsonLight)\n  460  {\n  461      auto pDistLight = DistantLight::create();\n  ...\n  510  }\n  511  \n  512: bool SceneImporterImpl::createPointLight(const rapidjson::Value& jsonLight)\n  513  {\n  514      auto pPointLight = PointLight::create();\n  ...\n  596  \n  597  // Support for analytic area lights\n  598: bool SceneImporterImpl::createAnalyticAreaLight(const rapidjson::Value& jsonLight)\n  599  {\n  600      // Get the type of area light.\n  ...\n  677      pAreaLight->setScaling(scaling);\n  678      glm::mat4 translationMtx = glm::translate(glm::mat4(), translation);\n  679:     glm::mat4 rotationMtx = glm::yawPitchRoll(rotation[0], rotation[1], rotation[2]);\n  680      //glm::mat4 scalingMtx = glm::scale(glm::mat4(), scaling);\n  681      glm::mat4 composite = translationMtx * rotationMtx;\n  ...\n  686  }\n  687  \n  688: bool SceneImporterImpl::parseLights(const rapidjson::Value& jsonVal)\n  689  {\n  690      if (jsonVal.IsArray() == false)\n  ...\n  740  }\n  741  \n  742: bool SceneImporterImpl::parseLightProbes(const rapidjson::Value& jsonVal)\n  743  {\n  744      if (jsonVal.IsArray() == false)\n  ...\n  826  }\n  827  \n  828: bool SceneImporterImpl::parsePaths(const rapidjson::Value& jsonVal)\n  829  {\n  830      if (jsonVal.IsArray() == false)\n  ...\n  837  }\n  838  \n  839: bool SceneImporterImpl::parseActivePath(const rapidjson::Value& jsonVal)\n  840  {\n  841      logWarning(\"fscene paths are deprecated, please use Maya or other DCC tools to create a path directly in the model file\");\n  ...\n  843  }\n  844  \n  845: bool SceneImporterImpl::parseCamera(const rapidjson::Value& jsonCamera)\n  846  {\n  847      auto pCamera = Camera::create();\n  ...\n  951  }\n  952  \n  953: bool SceneImporterImpl::parseCameras(const rapidjson::Value& jsonVal)\n  954  {\n  955      if (jsonVal.IsArray() == false)\n  ...\n  975          // Load the file\n  976          std::string jsonData = readFile(fullpath);\n  977:         rapidjson::StringStream JStream(jsonData.c_str());\n  978  \n  979          // Get the file directory\n  ...\n  988              size_t line;\n  989              line = std::count(jsonData.begin(), jsonData.begin() + mJDoc.GetErrorOffset(), '\\n');\n  990:             return error(std::string(\"JSON Parse error in line \") + std::to_string(line) + \". \" + rapidjson::GetParseError_En(mJDoc.GetParseError()));\n  991          }\n  992  \n  ...\n 1004  }\n 1005  \n 1006: bool SceneImporterImpl::parseAmbientIntensity(const rapidjson::Value& jsonVal)\n 1007  {\n 1008      logWarning(\"SceneImporterImpl: Global ambient term is no longer supported. Ignoring value.\");\n ....\n 1010  }\n 1011  \n 1012: bool SceneImporterImpl::parseLightingScale(const rapidjson::Value& jsonVal)\n 1013  {\n 1014      if (jsonVal.IsNumber() == false)\n ....\n 1021  }\n 1022  \n 1023: bool SceneImporterImpl::parseCameraSpeed(const rapidjson::Value& jsonVal)\n 1024  {\n 1025      if (jsonVal.IsNumber() == false)\n ....\n 1033  }\n 1034  \n 1035: bool SceneImporterImpl::parseActiveCamera(const rapidjson::Value& jsonVal)\n 1036  {\n 1037      if (jsonVal.IsString() == false)\n ....\n 1045  }\n 1046  \n 1047: bool SceneImporterImpl::parseVersion(const rapidjson::Value& jsonVal)\n 1048  {\n 1049      // Ignore this\n ....\n 1051  }\n 1052  \n 1053: bool SceneImporterImpl::parseSceneUnit(const rapidjson::Value& jsonVal)\n 1054  {\n 1055      if (jsonVal.IsNumber() == false)\n ....\n 1062  }\n 1063  \n 1064: bool SceneImporterImpl::parseEnvMap(const rapidjson::Value& jsonVal)\n 1065  {\n 1066      if (jsonVal.IsString() == false)\n ....\n 1082  }\n 1083  \n 1084: bool SceneImporterImpl::parseUserDefinedSection(const rapidjson::Value& jsonVal)\n 1085  {\n 1086      if (jsonVal.IsObject() == false)\n ....\n 1108  }\n 1109  \n 1110: bool SceneImporterImpl::parseIncludes(const rapidjson::Value& jsonVal)\n 1111  {\n 1112      if (jsonVal.IsArray() == false)\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/Light.cpp:\n  239  float PointLight::getPower() const\n  240  {\n  241:     return luminance(mData.intensity) * 4.f * (float)M_PI;\n  242  }\n  243  \n  ...\n  249      widget.direction(\"Direction\", mData.dirW);\n  250  \n  251:     if (widget.var(\"Opening Angle\", mData.openingAngle, 0.f, (float)M_PI))\n  252      {\n  253          setOpeningAngle(mData.openingAngle);\n  254      }\n  255:     if (widget.var(\"Penumbra Width\", mData.penumbraAngle, 0.f, (float)M_PI))\n  256      {\n  257          setPenumbraAngle(mData.penumbraAngle);\n  ...\n  261  void PointLight::setOpeningAngle(float openingAngle)\n  262  {\n  263:     openingAngle = glm::clamp(openingAngle, 0.f, (float)M_PI);\n  264      if (openingAngle == mData.openingAngle) return;\n  265  \n  ...\n  294  {\n  295      mData.dirW = float3(0.f, -1.f, 0.f);\n  296:     setAngle(0.5f * 0.53f * (float)M_PI / 180.f);   // Approximate sun half-angle\n  297      update();\n  298  }\n  ...\n  309      }\n  310  \n  311:     if (widget.var(\"Half-angle\", mAngle, 0.f, (float)M_PI_2))\n  312      {\n  313          setAngle(mAngle);\n  ...\n  318  void DistantLight::setAngle(float angle)\n  319  {\n  320:     mAngle = glm::clamp(angle, 0.f, (float)M_PI_2);\n  321  \n  322      mData.cosSubtendedAngle = std::cos(mAngle);\n  ...\n  375  float AnalyticAreaLight::getPower() const\n  376  {\n  377:     return luminance(mData.intensity) * (float)M_PI * mData.surfaceArea;\n  378  }\n  379  \n  ...\n  401          float rz = glm::length(mData.transMat * float4(0.0f, 0.0f, 1.0f, 0.0f));\n  402  \n  403:         mData.surfaceArea = 4.0f * (float)M_PI * std::pow(std::pow(rx * ry, 1.6f) + std::pow(ry * rz, 1.6f) + std::pow(rx * rz, 1.6f) / 3.0f, 1.0f / 1.6f);\n  404      }\n  405      break;\n  ...\n  410          float ry = glm::length(mData.transMat * float4(0.0f, 1.0f, 0.0f, 0.0f));\n  411  \n  412:         mData.surfaceArea = (float)M_PI * rx * ry;\n  413      }\n  414      break;\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/Light.h:\n  132      static const size_t kDataSize = sizeof(LightData);\n  133  \n  134:     /* UI callbacks for keeping the intensity in-sync */\n  135      float3 getColorForUI();\n  136      void setColorFromUI(const float3& uiColor);\n  ...\n  177      const float3& getWorldDirection() const { return mData.dirW; }\n  178  \n  179:     /** Get total light power (needed for light picking)\n  180      */\n  181      float getPower() const override { return 0.f; }\n  ...\n  202      void renderUI(Gui::Widgets& widget) override;\n  203  \n  204:     /** Get total light power (needed for light picking)\n  205      */\n  206      float getPower() const override;\n  ...\n  276      float3 getScaling() const { return mScaling; }\n  277  \n  278:     /** Get total light power (needed for light picking)\n  279      */\n  280      float getPower() const override;\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightData.slang:\n   40  #endif\n   41  {\n   42:     Point,          ///< Point light source, can be a spot light if its opening angle is < 2pi\n   43      Directional,    ///< Directional light source\n   44      Rect,           ///< Quad shaped area light source\n   ..\n   62      float    pad3;\n   63  \n   64:     float    openingAngle       = float(M_PI);      ///< For point (spot) light: Opening half-angle of a spot light cut-off, pi by default (full sphere).\n   65:     float    cosOpeningAngle    = -1.f;             ///< For point (spot) light: cos(openingAngle), -1 by default because openingAngle is pi by default\n   66      float    cosSubtendedAngle  = 0.9999893f;       ///< For distant light; cosine of the half-angle subtended by the light. Default corresponds to the sun as viewed from earth\n   67      float    penumbraAngle      = 0.f;              ///< For point (spot) light: Opening half-angle of penumbra region in radians, usually does not exceed openingAngle. 0.f by default, meaning a spot light with hard cut-off\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbe.cpp:\n   30  #include \"RenderGraph/BasePasses/FullScreenPass.h\"\n   31  #include \"Utils/UI/Gui.h\"\n   32: #include \"Core/API/RenderContext.h\"\n   33: #include \"Core/API/Device.h\"\n   34  \n   35  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbe.h:\n   30  \n   31  #include \"LightProbeData.slang\"\n   32: #include \"Falcor/Core/API/Texture.h\"\n   33: #include \"Falcor/Core/API/Sampler.h\"\n   34  \n   35  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang:\n   59  \n   60      float r = sqrt(u1);\n   61:     float phi = u2 * M_2PI;\n   62  \n   63      float3 L = float3(r * cos(phi),\n   ..\n   72      float a = roughness * roughness;\n   73  \n   74:     float phi = M_2PI * u.x;\n   75      float cosTheta = sqrt((1 - u.y) / (1 + (a * a - 1) * u.y));\n   76      float sinTheta = sqrt(1 - cosTheta * cosTheta);\n   ..\n  147  \n  148              // D term GGX\n  149:             float pdf = (evalGGX(roughness, NdotH) * M_1_PI) * NdotH / (4 * LdotH);\n  150  \n  151              float omegaS = 1 / (gSampleCount * pdf);\n  152:             float omegaP = 4.0 * M_PI / (6 * cubeWidth * cubeWidth);\n  153              float mipLevel = clamp(0.5 * log2(omegaS / omegaP), 0, mipCount);\n  154  \n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   33  #include \"Experimental/Scene/Material/BxDFConfig.slangh\"\n   34  \n   35: #define _PI 3.14159265359\n   36  \n   37  import Scene.ShadingData;\n   ..\n   66      float ss = 1.25 * (Fss * (1. / (NdotL + NdotV) - .5) + .5);\n   67      \n   68:     return (1./PI) * ss * material.baseColor;\n   69  }\n   70  \n   71  \n   72  float3 evalDiffuseDisneyBrdf(ShadingData sd, LightSample ls) {\n   73:     return disneyDiffuseFresnel(sd.NdotV, ls.NdotL, ls.LdotH, sd.linearRoughness) * M_1_PI * sd.diffuse.rgb;\n   74  }\n   75  \n   ..\n   77  */\n   78  float3 evalDiffuseLambertBrdf(ShadingData sd, LightSample ls) {\n   79:     return sd.diffuse.rgb * (1 / M_PI);\n   80  }\n   81  \n   ..\n   91      float lightScatter = fresnelSchlick(fd0, fd90, ls.NdotL).r;\n   92      float viewScatter = fresnelSchlick(fd0, fd90, sd.NdotV).r;\n   93:     return (viewScatter * lightScatter * energyFactor * M_1_PI) * sd.diffuse.rgb;\n   94  }\n   95  \n   ..\n  132      float G = evalSmithGGX(ls.NdotL, sd.NdotV, ggxAlpha);\n  133      float3 F = fresnelSchlick(sd.specular, 1, saturate(ls.LdotH));\n  134:     return D * G * F * M_1_PI;\n  135  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/Material.cpp:\n   29  #include \"Material.h\"\n   30  \n   31: #include \"Falcor/Core/API/SparseResourceManager.h\"\n   32  #include \"Core/Program/GraphicsProgram.h\"\n   33  #include \"Core/Program/ProgramVars.h\"\n   ..\n  193      if (priority > maxPriority)\n  194      {\n  195:         logWarning(\"Requested nested priority \" + std::to_string(priority) + \" for material '\" + mName + \"' is out of range. Clamping to \" + std::to_string(maxPriority) + \".\");\n  196          priority = maxPriority;\n  197      }\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/Material.h:\n   30  \n   31  #include \"Falcor/Core/Framework.h\"\n   32: #include \"Falcor/Core/API/Texture.h\"\n   33: #include \"Falcor/Core/API/Sampler.h\"\n   34  \n   35  #include \"MaterialData.slang\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/MaterialData.slang:\n   65      \n   66      float    metalness              = 0.0;\n   67:     float    anisotropic;\n   68      float    sheen;\n   69      float    subsurface;\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleData.slang:\n   90  \n   91  #ifndef HOST_CODE\n   92: uint getParticleIndex(uint groupIDx, uint threadsPerGroup, uint groupIndex)\n   93  {\n   94:     return groupIDx * threadsPerGroup + groupIndex;\n   95  }\n   96  #endif\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleEmit.cs.slang:\n   39  \n   40  [numthreads(kParticleEmitThreads, 1, 1)]\n   41: void main(int3 groupID : SV_GroupID, int3 threadID : SV_GroupThreadID)\n   42  {\n   43:     uint index = kParticleEmitThreads * groupID.y + threadID.x;\n   44      uint numAliveParticles = (uint)(numAlive.Load(0));\n   45      //make sure this corresponds to an emitted particle, and isnt a redundant thread\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleSimulate.cs.slang:\n   75  \n   76  [numthreads(numThreads, 1, 1)]\n   77: void main(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)\n   78  {\n   79:     uint index = getParticleIndex(groupID.x, numThreads, groupIndex);\n   80      //check if the particle is alive\n   81      if (particlePool[index].life > 0)\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleSort.cs.slang:\n   40  \n   41  [numthreads(kParticleSortThreads, 1, 1)]\n   42: void main(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)\n   43  {\n   44:     int threadIndex = (int)getParticleIndex(groupID.x, kParticleSortThreads, groupIndex);\n   45      //set size used to determine whether a subset of the data should be ascending or descending\n   46      for (uint setSize = 2; setSize <= iterationCounter[0]; setSize *= 2)\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp:\n   28  #include \"Falcor/stdafx.h\"\n   29  #include \"ParticleSystem.h\"\n   30: #include \"Falcor/Core/API/RenderContext.h\"\n   31  #include \"Falcor/Utils/UI/Gui.h\"\n   32  #include \"glm/gtc/random.hpp\"\n   ..\n   37      const char* ParticleSystem::kSortShader = \"Scene/ParticleSystem/ParticleSort.cs.slang\";\n   38      const char* ParticleSystem::kEmitShader = \"Scene/ParticleSystem/ParticleEmit.cs.slang\";\n   39:     const char* ParticleSystem::kDefaultPixelShader = \"Scene/ParticleSystem/ParticleTexture.ps.slang\";\n   40      const char* ParticleSystem::kDefaultSimulateShader = \"Scene/ParticleSystem/ParticleSimulate.cs.slang\";\n   41  \n   42      ParticleSystem::SharedPtr ParticleSystem::create(RenderContext* pCtx, uint32_t maxParticles, uint32_t maxEmitPerFrame,\n   43:         std::string drawPixelShader, std::string simulateComputeShader, bool sorted)\n   44      {\n   45          return ParticleSystem::SharedPtr(\n   46:             new ParticleSystem(pCtx, maxParticles, maxEmitPerFrame, drawPixelShader, simulateComputeShader, sorted));\n   47      }\n   48  \n   49      ParticleSystem::ParticleSystem(RenderContext* pCtx, uint32_t maxParticles, uint32_t maxEmitPerFrame,\n   50:         std::string drawPixelShader, std::string simulateComputeShader, bool sorted)\n   51      {\n   52  \n   ..\n   81          //draw shader\n   82          GraphicsProgram::Desc d(kVertexShader);\n   83:         d.vsEntry(\"main\").addShaderLibrary(drawPixelShader).psEntry(\"main\");\n   84          GraphicsProgram::SharedPtr pDrawProgram = GraphicsProgram::create(device, d, defineList);\n   85  \n   ..\n  106          // Indirect args\n  107          Resource::BindFlags indirectBindFlags = Resource::BindFlags::IndirectArg | Resource::BindFlags::UnorderedAccess;\n  108:         mpIndirectArgs = Buffer::createStructured(device, pSimulateCs.get(), \"drawArgs\", 1, indirectBindFlags);\n  109  \n  110          //initialize the first member of the args, vert count per instance, to be 4 for particle billboards\n  111          uint32_t vertexCountPerInstance = 4;\n  112:         mpIndirectArgs->setBlob(&vertexCountPerInstance, 0, sizeof(uint32_t));\n  113  \n  114          //Vars\n  ...\n  123          mSimulateResources.pVars->setBuffer(\"deadList\", mpDeadList);\n  124          mSimulateResources.pVars->setBuffer(\"particlePool\", mpParticlePool);\n  125:         mSimulateResources.pVars->setBuffer(\"drawArgs\", mpIndirectArgs);\n  126          mSimulateResources.pVars->setBuffer(\"aliveList\", mpAliveList);\n  127          mSimulateResources.pVars->setBuffer(\"numDead\", mpDeadList->getUAVCounter());\n  ...\n  229          //particle draw uses many of render context's existing state's properties\n  230          mDrawResources.pState->setFbo(pDst);\n  231:         pCtx->drawIndirect(mDrawResources.pState.get(), mDrawResources.pVars.get(), 1, mpIndirectArgs.get(), 0, nullptr, 0);\n  232      }\n  233  \n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleSystem.h:\n   44          static const char* kSortShader;             ///< Filename for the sorting compute shader\n   45          static const char* kEmitShader;             ///< Filename for the emit compute shader\n   46:         static const char* kDefaultPixelShader;     ///< Filename for the default pixel shader\n   47          static const char* kDefaultSimulateShader;  ///< Filename for the particle update/simulation compute shader\n   48  \n   ..\n   52              \\params[in] pCtx The render context\n   53              \\params[in] maxParticles The max number of particles allowed at once, emits will be blocked if the system is maxxed out\n   54:             \\params[in] drawPixelShader The pixel shader used to draw the particles\n   55              \\params[in] simulateComputeShader The compute shader used to update the particles\n   56              \\params[in] sorted Whether or not the particles should be sorted by depth before render\n   57          */\n   58          static SharedPtr create(RenderContext* pCtx, uint32_t maxParticles, uint32_t maxEmitPerFrame,\n   59:             std::string drawPixelShader = kDefaultPixelShader,\n   60              std::string simulateComputeShader = kDefaultSimulateShader,\n   61              bool sorted = true);\n   ..\n  148          ParticleSystem() = delete;\n  149          ParticleSystem(RenderContext* pCtx, uint32_t maxParticles, uint32_t maxEmitPerFrame,\n  150:             std::string drawPixelShader, std::string simulateComputeShader, bool sorted);\n  151          void emit(RenderContext* pCtx, uint32_t num);\n  152  \n  ...\n  217          //for draw (0 - Verts Per Instance, 1 - Instance Count,\n  218          //2 - start vertex offset, 3 - start instance offset)\n  219:         Buffer::SharedPtr mpIndirectArgs;\n  220  \n  221          //Data for sorted systems\n\n/home/max/dev/Lava/src/Falcor/Scene/Raytracing.slang:\n   83      \\param[in] hitT Distance to hit point.\n   84      \\param[in,out] rayDiff The ray differential used as input and output.\n   85:     \\param[out] dUVdx The differential of the texture coordinates in pixel coordinate x.\n   86:     \\param[out] dUVdy The differential of the texture coordinates in pixel coordinate y.\n   87      \\return Interpolated vertex attributes.\n   88  */\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.cpp:\n  977      {\n  978          auto pMatricesBuffer = mpSceneBlock->getBuffer(\"worldMatrices\");\n  979:         const glm::mat4* matrices = (glm::mat4*)pMatricesBuffer->map(Buffer::MapType::Read); // #SCENEV2 This will cause the pipeline to flush and sync, but it's probably not too bad as this only happens once\n  980  \n  981          auto createBuffers = [&](const auto& drawClockwiseMeshes, const auto& drawCounterClockwiseMeshes)\n  ...\n 1087          }\n 1088  \n 1089:         // Calculate mapping from new mesh instance ID to existing instance index.\n 1090          // Here, just append existing instance ID's in order they appear in the mesh groups.\n 1091:         std::vector<size_t> instanceMapping;\n 1092          for (const auto& meshGroup : mMeshGroups)\n 1093          {\n ....\n 1097                  for (size_t idx : instanceList)\n 1098                  {\n 1099:                     instanceMapping.push_back(idx);\n 1100                  }\n 1101              }\n 1102          }\n 1103:         assert(instanceMapping.size() == mMeshInstanceData.size());\n 1104          {\n 1105              // Check that all indices exist\n 1106:             std::set<size_t> instanceIndices(instanceMapping.begin(), instanceMapping.end());\n 1107              assert(instanceIndices.size() == mMeshInstanceData.size());\n 1108          }\n 1109  \n 1110:         // Now reorder mMeshInstanceData based on the new mapping.\n 1111          // We'll make a copy of the existing data first, and the populate the array.\n 1112          std::vector<MeshInstanceData> prevInstanceData = mMeshInstanceData;\n 1113          for (size_t i = 0; i < mMeshInstanceData.size(); i++)\n 1114          {\n 1115:             assert(instanceMapping[i] < prevInstanceData.size());\n 1116:             mMeshInstanceData[i] = prevInstanceData[instanceMapping[i]];\n 1117          }\n 1118  \n 1119:         // Create mapping of meshes to their instances.\n 1120          mMeshIdToInstanceIds.clear();\n 1121          mMeshIdToInstanceIds.resize(mMeshDesc.size());\n ....\n 1133          const VertexBufferLayout::SharedConstPtr& pVbLayout = mpVao->getVertexLayout()->getBufferLayout(kStaticDataBufferIndex);\n 1134          const Buffer::SharedPtr& pVb = mpVao->getVertexBuffer(kStaticDataBufferIndex);\n 1135:         const Buffer::SharedPtr& pIb = mpVao->getIndexBuffer();\n 1136  \n 1137          assert(mMeshGroups.size() > 0);\n ....\n 1168  \n 1169                  // Set index data\n 1170:                 if (pIb)\n 1171                  {\n 1172:                     desc.Triangles.IndexBuffer = pIb->getGpuAddress() + (mesh.ibOffset * getFormatBytesPerBlock(mpVao->getIndexBufferFormat()));\n 1173                      desc.Triangles.IndexCount = mesh.indexCount;\n 1174                      desc.Triangles.IndexFormat = getDxgiFormat(mpVao->getIndexBufferFormat());\n ....\n 1195          // Add barriers for the VB and IB which will be accessed by the build.\n 1196          const Buffer::SharedPtr& pVb = mpVao->getVertexBuffer(kStaticDataBufferIndex);\n 1197:         const Buffer::SharedPtr& pIb = mpVao->getIndexBuffer();\n 1198:         pContext->resourceBarrier(pVb.get(), Resource::State::NonPixelShader);\n 1199:         if (pIb) pContext->resourceBarrier(pIb.get(), Resource::State::NonPixelShader);\n 1200  \n 1201          // On the first time, or if a full rebuild is necessary we will:\n ....\n 1246  \n 1247                  // Get prebuild info.\n 1248:                 GET_COM_INTERFACE(gpDevice->getApiHandle(), ID3D12Device5, pDevice5);\n 1249                  pDevice5->GetRaytracingAccelerationStructurePrebuildInfo(&inputs, &blas.prebuildInfo);\n 1250  \n ....\n 1412          assert(mpBlas);\n 1413          instanceDescs.clear();\n 1414:         uint32_t instanceContributionToHitGroupIndex = 0;\n 1415          uint32_t instanceId = 0;\n 1416  \n ....\n 1422              desc.AccelerationStructure = mpBlas->getGpuAddress() + mBlasData[i].blasByteOffset;\n 1423              desc.InstanceMask = 0xFF;\n 1424:             desc.InstanceContributionToHitGroupIndex = perMeshHitEntry ? instanceContributionToHitGroupIndex : 0;\n 1425:             instanceContributionToHitGroupIndex += rayCount * (uint32_t)meshList.size();\n 1426  \n 1427              // If multiple meshes are in a BLAS:\n ....\n 1435                  instanceId += (uint32_t)meshList.size();\n 1436  \n 1437:                 // Any instances of the mesh will get you the correct matrix, so just pick the first mesh then the first instance.\n 1438                  uint32_t matrixId = mMeshInstanceData[desc.InstanceID].globalMatrixID;\n 1439                  glm::mat4 transform4x4 = transpose(mpAnimationController->getGlobalMatrices()[matrixId]);\n ....\n 1496          {\n 1497              // Prebuild\n 1498:             GET_COM_INTERFACE(gpDevice->getApiHandle(), ID3D12Device5, pDevice5);\n 1499              pDevice5->GetRaytracingAccelerationStructurePrebuildInfo(&inputs, &mTlasPrebuildInfo);\n 1500              mpTlasScratch = Buffer::create(mpDevice, mTlasPrebuildInfo.ScratchDataSizeInBytes, Buffer::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n ....\n 1512          if (tlas.pTlas == nullptr)\n 1513          {\n 1514:             assert(tlas.pInstanceDescs == nullptr); // Instance desc should also be null if no TLAS\n 1515              tlas.pTlas = Buffer::create(mTlasPrebuildInfo.ResultDataMaxSizeInBytes, Buffer::BindFlags::AccelerationStructure, Buffer::CpuAccess::None);\n 1516:             tlas.pInstanceDescs = Buffer::create(mpDevice, (uint32_t)mInstanceDescs.size() * sizeof(D3D12_RAYTRACING_INSTANCE_DESC), Buffer::BindFlags::None, Buffer::CpuAccess::Write, mInstanceDescs.data());\n 1517          }\n 1518          // Else update instance descs and barrier TLAS buffers\n ....\n 1522              pContext->uavBarrier(tlas.pTlas.get());\n 1523              pContext->uavBarrier(mpTlasScratch.get());\n 1524:             tlas.pInstanceDescs->setBlob(mInstanceDescs.data(), 0, inputs.NumDescs * sizeof(D3D12_RAYTRACING_INSTANCE_DESC));\n 1525              asDesc.SourceAccelerationStructureData = tlas.pTlas->getGpuAddress(); // Perform the update in-place\n 1526          }\n 1527  \n 1528:         assert((inputs.NumDescs != 0) && tlas.pInstanceDescs->getApiHandle() && tlas.pTlas->getApiHandle() && mpTlasScratch->getApiHandle());\n 1529  \n 1530:         asDesc.Inputs.InstanceDescs = tlas.pInstanceDescs->getGpuAddress();\n 1531          asDesc.ScratchAccelerationStructureData = mpTlasScratch->getGpuAddress();\n 1532          asDesc.DestAccelerationStructureData = tlas.pTlas->getGpuAddress();\n ....\n 1537          // Create TLAS\n 1538          GET_COM_INTERFACE(pContext->getLowLevelData()->getCommandList(), ID3D12GraphicsCommandList4, pList4);\n 1539:         pContext->resourceBarrier(tlas.pInstanceDescs.get(), Resource::State::NonPixelShader);\n 1540          pList4->BuildRaytracingAccelerationStructure(&asDesc, 0, nullptr);\n 1541          pContext->uavBarrier(tlas.pTlas.get());\n ....\n 1546              D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc = {};\n 1547              srvDesc.ViewDimension = D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE;\n 1548:             srvDesc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;\n 1549              srvDesc.RaytracingAccelerationStructure.Location = tlas.pTlas->getGpuAddress();\n 1550  \n ....\n 1552              layout.addRange(DescriptorSet::Type::TextureSrv, 0, 1);\n 1553              DescriptorSet::SharedPtr pSet = DescriptorSet::create(mpDevice->getCpuDescriptorPool(), layout);\n 1554:             gpDevice->getApiHandle()->CreateShaderResourceView(nullptr, &srvDesc, pSet->getCpuHandle(0));\n 1555  \n 1556              ResourceWeakPtr pWeak = tlas.pTlas;\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.h:\n   32  \n   33  #include \"Falcor/Core/Framework.h\"\n   34: #include \"Falcor/Core/API/VAO.h\"\n   35  #include \"Falcor/Scene/Animation/Animatable.h\"\n   36  #include \"Falcor/Scene/Animation/Animation.h\"\n   ..\n  253      void gotoViewpoint(uint32_t index) { selectViewpoint(index); }\n  254  \n  255:     /** Returns true if there are saved viewpoints (used for dumping to config)\n  256      */\n  257      bool hasSavedViewpoints() { return mViewpoints.size() > 1; }\n  ...\n  603      // Scene Metadata (CPU Only)\n  604      std::vector<BoundingBox> mMeshBBs;                          ///< Bounding boxes for meshes (not instances)\n  605:     std::vector<std::vector<uint32_t>> mMeshIdToInstanceIds;    ///< Mapping of what instances belong to which mesh\n  606      BoundingBox mSceneBB;                                       ///< Bounding boxes of the entire scene\n  607      std::vector<bool> mMeshHasDynamicData;                      ///< Whether a Mesh has dynamic data, meaning it is skinned\n  ...\n  647          Buffer::SharedPtr pTlas;\n  648          ShaderResourceView::SharedPtr pSrv;             ///< Shader Resource View for binding the TLAS\n  649:         Buffer::SharedPtr pInstanceDescs;               ///< Buffer holding instance descs for the TLAS\n  650          UpdateMode updateMode = UpdateMode::Rebuild;    ///< Update mode this TLAS was created with.\n  651      };\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.slang:\n  484      }\n  485  \n  486:     /** Returns the estimated isoctropic curvature from vertex attributes for ray tracing.\n  487          \\param[in] meshInstanceID The mesh instance ID.\n  488          \\param[in] triangleIndex Index of the triangle in the given mesh.\n  489          \\return Estimated curvature.\n  490      */\n  491:     float computeCurvatureIsotropic(uint meshInstanceID, uint triangleIndex)\n  492      {\n  493          TriangleCurvature_Average tce = { };\n  ...\n  507      }\n  508  \n  509:     /** Returns the estimated isoctropic curvature from vertex attributes for ray tracing at the first hit point.\n  510          \\param[in] meshInstanceID The mesh instance ID.\n  511          \\param[in] triangleIndex Index of the triangle in the given mesh.\n  ...\n  513          \\return Estimated curvature.\n  514      */\n  515:     float computeCurvatureIsotropicFirstHit(uint meshInstanceID, uint triangleIndex, float3 rayDir)\n  516      {\n  517          TriangleCurvature_DirClosestDP tce = { rayDir };\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.cpp:\n   50      static std::vector<float4> generateTangents(const SceneBuilder::Mesh& mesh)\n   51      {\n   52:         if (!mesh.normals.pData || !mesh.positions.pData || !mesh.texCrds.pData || !mesh.pIndices)\n   53          {\n   54              logWarning(\"Can't generate tangent space. The mesh '\" + std::string(mesh.name) + \"' doesn't have positions/normals/texCrd/indices.\");\n   ..\n   67          MikkTSpaceWrapper wrapper(mesh);\n   68          SMikkTSpaceContext context = {};\n   69:         context.m_pInterface = &mikktspace;\n   70          context.m_pUserData = &wrapper;\n   71  \n   ..\n  178  }\n  179  \n  180: void SceneBuilder::setNodeInterpolationMode(uint32_t nodeID, Animation::InterpolationMode interpolationMode, bool enableWarping)\n  181  {\n  182      assert(nodeID < mSceneGraph.size());\n  ...\n  188              if (uint32_t channelID = animation->getChannel(nodeID); channelID != Animation::kInvalidChannel)\n  189              {\n  190:                 animation->setInterpolationMode(channelID, interpolationMode, enableWarping);\n  191              }\n  192          }\n  ...\n  249      if (mesh.faceCount == 0) throw_on_missing_element(\"faces\");\n  250      if (mesh.vertexCount == 0) throw_on_missing_element(\"vertices\");\n  251:     if (mesh.indexCount == 0 || !mesh.pIndices) throw_on_missing_element(\"indices\");\n  252      if (mesh.indexCount != mesh.faceCount * 3) throw std::runtime_error(\"Error when adding the mesh '\" + mesh.name + \"' to the scene.\\nUnexpected face/vertex count.\");\n  253  \n  ...\n  299          for (uint32_t vert = 0; vert < 3; vert++) {\n  300              const Mesh::Vertex v = mesh.getVertex(face, vert);\n  301:             const uint32_t origIndex = mesh.pIndices[face * 3 + vert];\n  302  \n  303              // Iterate over vertex list to check if it already exists.\n  ...\n  463          const auto& equalMaterial = *it;\n  464  \n  465:         // ASSIMP sometimes creates internal copies of a material: Always de-duplicate if name and properties are equal.\n  466          if (removeDuplicate || pMaterial->getName() == equalMaterial->getName())\n  467          {\n  ...\n  520  \n  521      // Create the index buffer\n  522:     Buffer::SharedPtr pIB = nullptr;\n  523      if (ibSize > 0)\n  524      {\n  525          ResourceBindFlags ibBindFlags = Resource::BindFlags::Index | ResourceBindFlags::ShaderResource;\n  526:         pIB = Buffer::create(mpDevice, (uint32_t)ibSize, ibBindFlags, Buffer::CpuAccess::None, mBuffersData.indices.data());\n  527      }\n  528  \n  ...\n  555  \n  556      // Add the draw ID layout\n  557:     VertexBufferLayout::SharedPtr pInstLayout = VertexBufferLayout::create();\n  558:     pInstLayout->addElement(INSTANCE_DRAW_ID_NAME, 0, ResourceFormat::R16Uint, 1, INSTANCE_DRAW_ID_LOC);\n  559:     pInstLayout->setInputClass(VertexBufferLayout::InputClass::PerInstanceData, 1);\n  560:     pLayout->addBufferLayout(Scene::kDrawIdBufferIndex, pInstLayout);\n  561  \n  562:     Vao::SharedPtr pVao = Vao::create(mMeshes[0].topology, pLayout, pVBs, pIB, ResourceFormat::R32Uint);\n  563      return pVao;\n  564  }\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.h:\n   80          uint32_t vertexCount = 0;                   ///< The number of vertices the mesh has.\n   81          uint32_t indexCount = 0;                    ///< The number of indices the mesh has.\n   82:         const uint32_t* pIndices = nullptr;         ///< Array of indices. The element count must match `indexCount`. This field is required.\n   83          Vao::Topology topology = Vao::Topology::Undefined; ///< The primitive topology of the mesh\n   84          Material::SharedPtr pMaterial;              ///< The mesh's material. Can't be nullptr.\n   ..\n  103                      return attribute.pData[face];\n  104                  case AttributeFrequency::Vertex:\n  105:                     return attribute.pData[pIndices[face * 3 + vert]];\n  106                  case AttributeFrequency::FaceVarying:\n  107                      return attribute.pData[face * 3 + vert];\n  ...\n  194      /** Set the animation interpolation mode for a given scene node. This sets the mode recursively for all parent nodes.\n  195      */\n  196:     void setNodeInterpolationMode(uint32_t nodeID, Animation::InterpolationMode interpolationMode, bool enableWarping);\n  197  \n  198      /** Add a mesh instance to a node\n  ...\n  221  \n  222      /** Set a light-probe\n  223:         \\param pProbe The environment map. You can set it to null to disable environment mapping\n  224      */\n  225      void setLightProbe(const LightProbe::SharedPtr& pProbe) { mpLightProbe = pProbe; }\n\n/home/max/dev/Lava/src/Falcor/Scene/Shading.slang:\n   98  \n   99  /** Apply alpha test and return the result.\n  100:     This version samples alpha using implicit gradients and only works in pixel shaders.\n  101      \\return True if hit should be ignored/discarded.\n  102  */\n\n/home/max/dev/Lava/src/Falcor/Scene/ShadingData.slang:\n   49      uint    activeLobes;            ///< BSDF lobes to include for sampling and evaluation. See LobeType in BxDFTypes.slang.\n   50  \n   51:     float2  uv;                     ///< Texture mapping coordinates\n   52      float   _pad0;\n   53      float   _pad1;\n   ..\n   60      \n   61      float3  specular;               ///< Specular albedo.\n   62:     float   linearRoughness;        ///< This is the original roughness, before re-mapping.\n   63      \n   64      float3  emissive;\n\n306 matches across 37 files\n\n\nSearching 484 files for \"PI\"\n\n/home/max/dev/Lava/src/Falcor/CMakeLists.txt:\n    2      ./*.cpp\n    3      ./Core/*.cpp\n    4:     ./Core/API/*.cpp\n    5:     ./Core/API/Vulkan/*.cpp\n    6      ./Core/Platform/*.cpp\n    7      ./Core/Platform/Linux/*.cpp\n    .\n  114  PKG_CHECK_MODULES(GTK3 REQUIRED gtk+-3.0)\n  115  \n  116: # Setup CMake to use GTK+, tell the compiler where to look for headers\n  117  # and to the linker where to look for libraries\n  118  include_directories( ${GTK3_INCLUDE_DIRS} )\n  119  link_directories( ${GTK3_LIBRARY_DIRS} )\n  120  \n  121: # Add other flags to the compiler\n  122  add_definitions(${GTK3_CFLAGS_OTHER})\n  123  \n\n/home/max/dev/Lava/src/Falcor/Core/API/BlendState.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_BLENDSTATE_H_\n   29: #define SRC_FALCOR_CORE_API_BLENDSTATE_H_\n   30  \n   31  #include \"Falcor/Core/Framework.h\"\n   ..\n   53      };\n   54  \n   55:     /** Defines how to modulate the fragment-shader and render-target pixel values\n   56      */\n   57      enum class BlendFunc {\n   ..\n   68          BlendFactor,            ///< Constant color, set using Desc#SetBlendFactor()\n   69          OneMinusBlendFactor,    ///< One minus constant color, set using Desc#SetBlendFactor()\n   70:         SrcAlphaSaturate,       ///< (f, f, f, 1), where f = min(fragment shader output alpha, 1 - render-target pixel alpha)\n   71          Src1Color,              ///< Fragment-shader output color 1\n   72          OneMinusSrc1Color,      ///< One minus fragment-shader output color 1\n   ..\n  198      uint32_t getRtCount() const { return (uint32_t)mDesc.mRtDesc.size(); }\n  199  \n  200:     /** Get the API handle\n  201      */\n  202:     const BlendStateHandle& getApiHandle() const;\n  203  \n  204   private:\n  205      BlendState(const Desc& Desc) : mDesc(Desc) {}\n  206      const Desc mDesc;\n  207:     BlendStateHandle mApiHandle;\n  208  };\n  209  \n  210  }  // namespace Falcor\n  211  \n  212: #endif  // SRC_FALCOR_CORE_API_BLENDSTATE_H_\n  213  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Buffer.cpp:\n   43      ResourceBindFlags bindFlags,\n   44      Buffer::CpuAccess cpuAccess,\n   45:     const void* pInitData,\n   46      bool createCounter)\n   47  {\n   ..\n   52  \n   53      assert(pResourceType->getSize() <= UINT32_MAX);\n   54:     return Buffer::createStructured(pDevice, (uint32_t)pResourceType->getSize(), elementCount, bindFlags, cpuAccess, pInitData, createCounter);\n   55  }\n   56  \n   ..\n   58  \n   59  size_t getBufferDataAlignment(const Buffer* pBuffer);\n   60: void* mapBufferApi(std::shared_ptr<Device> pDevice, const Buffer::ApiHandle& apiHandle, size_t size);\n   61  \n   62  Buffer::Buffer(std::shared_ptr<Device> pDevice, size_t size, BindFlags bindFlags, CpuAccess cpuAccess): Resource(pDevice, Type::Buffer, bindFlags, size), mCpuAccess(cpuAccess) {\n   ..\n   64  }\n   65  \n   66: Buffer::SharedPtr Buffer::create(std::shared_ptr<Device> pDevice, size_t size, BindFlags bindFlags, CpuAccess cpuAccess, const void* pInitData) {\n   67      Buffer::SharedPtr pBuffer = SharedPtr(new Buffer(pDevice, size, bindFlags, cpuAccess));\n   68:     pBuffer->apiInit(pInitData != nullptr);\n   69:     if (pInitData) pBuffer->setBlob(pInitData, 0, size);\n   70      return pBuffer;\n   71  }\n   72  \n   73: Buffer::SharedPtr Buffer::createTyped(std::shared_ptr<Device> pDevice, ResourceFormat format, uint32_t elementCount, BindFlags bindFlags, CpuAccess cpuAccess, const void* pInitData) {\n   74      size_t size = elementCount * getFormatBytesPerBlock(format);\n   75:     SharedPtr pBuffer = create(pDevice, size, bindFlags, cpuAccess, pInitData);\n   76      assert(pBuffer);\n   77  \n   ..\n   87      ResourceBindFlags bindFlags,\n   88      CpuAccess cpuAccess,\n   89:     const void* pInitData,\n   90      bool createCounter)\n   91  {\n   92      size_t size = structSize * elementCount;\n   93:     Buffer::SharedPtr pBuffer = create(pDevice, size, bindFlags, cpuAccess, pInitData);\n   94      assert(pBuffer);\n   95  \n   ..\n  110      ResourceBindFlags bindFlags,\n  111      CpuAccess cpuAccess,\n  112:     const void* pInitData,\n  113      bool createCounter)\n  114  {\n  115:     return createStructuredFromType(pDevice, shaderVar.getType().get(), \"<Unknown ShaderVar>\", elementCount, bindFlags, cpuAccess, pInitData, createCounter);\n  116  }\n  117  \n  ...\n  123      ResourceBindFlags bindFlags,\n  124      CpuAccess cpuAccess,\n  125:     const void* pInitData,\n  126      bool createCounter)\n  127  {\n  ...\n  131          throw std::runtime_error(\"Can't find a structured buffer named `\" + name + \"` in the program\");\n  132      }\n  133:     return createStructuredFromType(pDevice, pVar->getType().get(), name, elementCount, bindFlags, cpuAccess, pInitData, createCounter);\n  134  }\n  135  \n  ...\n  155      SharedPtr pBuffer = SharedPtr(new Buffer(pDevice, size, bindFlags, CpuAccess::None));\n  156      pBuffer->mpAliasedResource = pBaseResource;\n  157:     pBuffer->mApiHandle = pBaseResource->getApiHandle();\n  158      pBuffer->mGpuVaOffset = offset;\n  159      return pBuffer;\n  160  }\n  161  \n  162: Buffer::SharedPtr Buffer::createFromApiHandle(std::shared_ptr<Device> pDevice, ApiHandle handle, size_t size, Resource::BindFlags bindFlags, CpuAccess cpuAccess)\n  163  {\n  164      assert(handle);\n  165      Buffer::SharedPtr pBuffer = SharedPtr(new Buffer(pDevice, size, bindFlags, cpuAccess));\n  166:     pBuffer->mApiHandle = handle;\n  167      return pBuffer;\n  168  }\n  ...\n  174          mpDevice->getUploadHeap()->release(mDynamicData);\n  175      } else {\n  176:         mpDevice->releaseResource(mApiHandle);\n  177      }\n  178  }\n  ...\n  251          mpCBV = nullptr;\n  252          mDynamicData = mpDevice->getUploadHeap()->allocate(mSize, getBufferDataAlignment(this));\n  253:         mApiHandle = mDynamicData.pResourceHandle;\n  254          mGpuVaOffset = mDynamicData.offset;\n  255          invalidateViews();\n  ...\n  265          } else if (mCpuAccess == CpuAccess::Read) {\n  266              assert(mBindFlags == BindFlags::None);\n  267:             return mapBufferApi(mpDevice, mApiHandle, mSize);\n  268          } else {\n  269              // For buffers without CPU access we must copy the contents to a staging buffer.\n  270:             logWarning(\"Buffer::map() performance warning - using staging resource which require us to flush the pipeline and wait for the GPU to finish its work\");\n  271              if (mpStagingResource == nullptr) {\n  272                  mpStagingResource = Buffer::create(mpDevice, mSize, Buffer::BindFlags::None, Buffer::CpuAccess::Read, nullptr);\n  273              }\n  274  \n  275:             // Copy the buffer and flush the pipeline\n  276              RenderContext* pContext = mpDevice->getRenderContext();\n  277              assert(mGpuVaOffset == 0);\n\n/home/max/dev/Lava/src/Falcor/Core/API/Buffer.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_BUFFER_H_\n   29: #define SRC_FALCOR_CORE_API_BUFFER_H_\n   30  \n   31  #include <string>\n   ..\n   42  \n   43  /** Low-level buffer object\n   44:     This class abstracts the API's buffer creation and management\n   45  */\n   46  class dlldecl Buffer : public Resource, public inherit_shared_from_this<Resource, Buffer> {\n   ..\n   80          \\param[in] bindFlags Buffer bind flags.\n   81          \\param[in] cpuAccess Flags indicating how the buffer can be updated.\n   82:         \\param[in] pInitData Optional parameter. Initial buffer data. Pointed buffer size should be at least 'size' bytes.\n   83          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n   84      */\n   ..\n   88          Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n   89          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n   90:         const void* pInitData = nullptr);\n   91  \n   92      /** Create a new typed buffer.\n   ..\n   95          \\param[in] bindFlags Buffer bind flags.\n   96          \\param[in] cpuAccess Flags indicating how the buffer can be updated.\n   97:         \\param[in] pInitData Optional parameter. Initial buffer data. Pointed buffer should hold at least 'elementCount' elements.\n   98          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n   99      */\n  ...\n  104          Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  105          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  106:         const void* pInitData = nullptr);\n  107  \n  108      /** Create a new typed buffer. The format is deduced from the template parameter.\n  ...\n  110          \\param[in] bindFlags Buffer bind flags.\n  111          \\param[in] cpuAccess Flags indicating how the buffer can be updated.\n  112:         \\param[in] pInitData Optional parameter. Initial buffer data. Pointed buffer should hold at least 'elementCount' elements.\n  113          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n  114      */\n  ...\n  119          Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  120          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  121:         const T* pInitData = nullptr)\n  122      {\n  123:         return createTyped(pDevice, FormatForElementType<T>::kFormat, elementCount, bindFlags, cpuAccess, pInitData);\n  124      }\n  125  \n  ...\n  129          \\param[in] bindFlags Buffer bind flags.\n  130          \\param[in] cpuAccess Flags indicating how the buffer can be updated.\n  131:         \\param[in] pInitData Optional parameter. Initial buffer data. Pointed buffer should hold at least 'elementCount' elements.\n  132          \\param[in] createCounter True if the associated UAV counter should be created.\n  133          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n  ...\n  139          ResourceBindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  140          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  141:         const void* pInitData = nullptr,\n  142          bool createCounter = true);\n  143  \n  ...\n  148          \\param[in] bindFlags Buffer bind flags.\n  149          \\param[in] cpuAccess Flags indicating how the buffer can be updated.\n  150:         \\param[in] pInitData Optional parameter. Initial buffer data. Pointed buffer should hold at least 'elementCount' elements.\n  151          \\param[in] createCounter True if the associated UAV counter should be created.\n  152          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n  ...\n  159          ResourceBindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  160          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  161:         const void* pInitData = nullptr,\n  162          bool createCounter = true);\n  163  \n  ...\n  167          \\param[in] bindFlags Buffer bind flags.\n  168          \\param[in] cpuAccess Flags indicating how the buffer can be updated.\n  169:         \\param[in] pInitData Optional parameter. Initial buffer data. Pointed buffer should hold at least 'elementCount' elements.\n  170          \\param[in] createCounter True if the associated UAV counter should be created.\n  171          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n  ...\n  177          ResourceBindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  178          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  179:         const void* pInitData = nullptr,\n  180          bool createCounter = true);\n  181  \n  182      static SharedPtr aliasResource(std::shared_ptr<Device> pDevice, Resource::SharedPtr pBaseResource, GpuAddress offset, size_t size, Resource::BindFlags bindFlags);\n  183  \n  184:     /** Create a new buffer from an existing API handle.\n  185          \\param[in] handle Handle of already allocated resource.\n  186          \\param[in] size The size of the buffer in bytes.\n  ...\n  189          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n  190      */\n  191:     static SharedPtr createFromApiHandle(std::shared_ptr<Device> pDevice, ApiHandle handle, size_t size, Resource::BindFlags bindFlags, CpuAccess cpuAccess);\n  192  \n  193      /** Get a shader-resource view.\n  ...\n  256          - For CPU accessible buffers, the caller should ensure CPU/GPU memory accesses do not conflict.\n  257          - For GPU-only buffers, map for read will create an internal staging buffer that is safe to read.\n  258:         - Mapping a CPU write buffer for WriteDiscard will cause the buffer to be internally re-allocated,\n  259            causing its address range to change and invalidating all previous views to the buffer.\n  260      */\n  ...\n  274  \n  275          if (offset + size > mSize) {\n  276:             logWarning(\"Buffer::adjustSizeOffsetParams() - offset + size will cause an OOB access. Clamping size\");\n  277              size = mSize - offset;\n  278          }\n  ...\n  299  protected:\n  300      Buffer(std::shared_ptr<Device> pDevice, size_t size, BindFlags bindFlags, CpuAccess cpuAccess);\n  301:     void apiInit(bool hasInitData);\n  302  \n  303      CpuAccess mCpuAccess;\n  ...\n  476  }  // namespace Falcor\n  477  \n  478: #endif  // SRC_FALCOR_CORE_API_BUFFER_H_\n  479  \n\n/home/max/dev/Lava/src/Falcor/Core/API/ComputeContext.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_COMPUTECONTEXT_H_\n   29: #define SRC_FALCOR_CORE_API_COMPUTECONTEXT_H_\n   30  \n   31  #include \"CopyContext.h\"\n   ..\n   90  }  // namespace Falcor\n   91  \n   92: #endif  // SRC_FALCOR_CORE_API_COMPUTECONTEXT_H_\n   93  \n\n/home/max/dev/Lava/src/Falcor/Core/API/ComputeStateObject.cpp:\n   40  \n   41  ComputeStateObject::~ComputeStateObject() {\n   42:     mpDevice->releaseResource(mApiHandle);\n   43  }\n   44  \n   45  ComputeStateObject::ComputeStateObject(std::shared_ptr<Device> pDevice, const Desc& desc) : mpDevice(pDevice), mDesc(desc) {\n   46:     apiInit();\n   47  }\n   48  \n\n/home/max/dev/Lava/src/Falcor/Core/API/ComputeStateObject.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_COMPUTESTATEOBJECT_H_\n   29: #define SRC_FALCOR_CORE_API_COMPUTESTATEOBJECT_H_\n   30  \n   31  #include \"Falcor/Core/Program/ProgramVersion.h\"\n   32: #include \"Falcor/Core/API/RootSignature.h\"\n   33  \n   34  namespace Falcor {\n   ..\n   40      using SharedPtr = std::shared_ptr<ComputeStateObject>;\n   41      using SharedConstPtr = std::shared_ptr<const ComputeStateObject>;\n   42:     using ApiHandle = ComputeStateHandle;\n   43  \n   44      class dlldecl Desc {\n   ..\n   63      static SharedPtr create(std::shared_ptr<Device> pDevice, const Desc& desc);\n   64  \n   65:     const ApiHandle& getApiHandle() { return mApiHandle; }\n   66      const Desc& getDesc() const { return mDesc; }\n   67  \n   68   private:\n   69      ComputeStateObject(std::shared_ptr<Device> pDevice, const Desc& desc);\n   70:     void apiInit();\n   71  \n   72      Desc mDesc;\n   73:     ApiHandle mApiHandle;\n   74  \n   75      std::shared_ptr<Device> mpDevice;\n   ..\n   78  }  // namespace Falcor\n   79  \n   80: #endif  // SRC_FALCOR_CORE_API_COMPUTESTATEOBJECT_H_\n   81  \n\n/home/max/dev/Lava/src/Falcor/Core/API/CopyContext.cpp:\n  113              Resource::State oldState = pTexture->getSubresourceState(a, m);\n  114              if (oldState != newState) {\n  115:                 apiSubresourceBarrier(pTexture, newState, oldState, a, m);\n  116                  if (setGlobal == false) pTexture->setSubresourceState(a, m, newState);\n  117                  mCommandsPending = true;\n\n/home/max/dev/Lava/src/Falcor/Core/API/CopyContext.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_COPYCONTEXT_H_\n   29: #define SRC_FALCOR_CORE_API_COPYCONTEXT_H_\n   30  \n   31  #include <memory>\n   ..\n   89      bool hasPendingCommands() const { return mCommandsPending; }\n   90  \n   91:     /** Signal the context that we have pending commands. Useful in case you make raw API calls\n   92      */\n   93      void setPendingCommands(bool commandsPending) { mCommandsPending = commandsPending; }\n   ..\n  142      void updateBuffer(const Buffer* pBuffer, const void* pData, size_t offset = 0, size_t numBytes = 0);\n  143  \n  144:     /** Read texture data synchronously. Calling this command will flush the pipeline and wait for the GPU to finish execution\n  145      */\n  146      std::vector<uint8_t> readTextureSubresource(const Texture* pTexture, uint32_t subresourceIndex);\n  ...\n  168      bool bufferBarrier(const Buffer* pBuffer, Resource::State newState);\n  169      bool subresourceBarriers(const Texture* pTexture, Resource::State newState, const ResourceViewInfo* pViewInfo);\n  170:     void apiSubresourceBarrier(const Texture* pTexture, Resource::State newState, Resource::State oldState, uint32_t arraySlice, uint32_t mipLevel);\n  171      void updateTextureSubresources(const Texture* pTexture, uint32_t firstSubresource, uint32_t subresourceCount, const void* pData, const uint3& offset = uint3(0), const uint3& size = uint3(-1));\n  172  \n  ...\n  183  }  // namespace Falcor\n  184  \n  185: #endif  // SRC_FALCOR_CORE_API_COPYCONTEXT_H_\n  186  \n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12ApiData.h:\n   27   **************************************************************************/\n   28  #pragma once\n   29: #include \"Core/API/FencedPool.h\"\n   30  \n   31  namespace Falcor\n   32  {\n   33:     struct LowLevelContextApiData\n   34      {\n   35          FencedPool<CommandAllocatorHandle>::SharedPtr pAllocatorPool;\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Buffer.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/Buffer.h\"\n   30: #include \"Core/API/Device.h\"\n   31  #include \"D3D12Resource.h\"\n   32  \n   ..\n   36      {\n   37          assert(gpDevice);\n   38:         ID3D12Device* pDevice = gpDevice->getApiHandle();\n   39  \n   40          // Create the buffer\n   ..\n   53  \n   54          D3D12_RESOURCE_STATES d3dState = getD3D12ResourceState(initState);\n   55:         ID3D12ResourcePtr pApiHandle;\n   56          D3D12_HEAP_FLAGS heapFlags = is_set(bindFlags, ResourceBindFlags::Shared) ? D3D12_HEAP_FLAG_SHARED : D3D12_HEAP_FLAG_NONE;\n   57:         d3d_call(pDevice->CreateCommittedResource(&heapProps, heapFlags, &bufDesc, d3dState, nullptr, IID_PPV_ARGS(&pApiHandle)));\n   58          \n   59          // Map and upload data if needed\n   60:         return pApiHandle;\n   61      }\n   62  \n   ..\n   71      }\n   72  \n   73:     void* mapBufferApi(const Buffer::ApiHandle& apiHandle, size_t size)\n   74      {\n   75          D3D12_RANGE r{ 0, size };\n   76          void* pData;\n   77:         d3d_call(apiHandle->Map(0, &r, &pData));\n   78          return pData;\n   79      }\n   80  \n   81:     void Buffer::apiInit(bool hasInitData)\n   82      {\n   83          if (mCpuAccess != CpuAccess::None && is_set(mBindFlags, BindFlags::Shared))\n   ..\n   98                  assert(gpDevice);\n   99                  mDynamicData = gpDevice->getUploadHeap()->allocate(mSize, getBufferDataAlignment(this));\n  100:                 mApiHandle = mDynamicData.pResourceHandle;\n  101                  mGpuVaOffset = mDynamicData.offset;\n  102              }\n  ...\n  105          {\n  106              mState.global = Resource::State::CopyDest;\n  107:             mApiHandle = createBuffer(mState.global, mSize, kReadbackHeapProps, mBindFlags);\n  108          }\n  109          else\n  ...\n  111              mState.global = Resource::State::Common;\n  112              if (is_set(mBindFlags, BindFlags::AccelerationStructure)) mState.global = Resource::State::AccelerationStructure;\n  113:             mApiHandle = createBuffer(mState.global, mSize, kDefaultHeapProps, mBindFlags);\n  114          }\n  115      }\n  ...\n  117      uint64_t Buffer::getGpuAddress() const\n  118      {\n  119:         return mGpuVaOffset + mApiHandle->GetGPUVirtualAddress();\n  120      }\n  121  \n  ...\n  126          if (mpStagingResource)\n  127          {\n  128:             mpStagingResource->mApiHandle->Unmap(0, &r);\n  129          }\n  130          else if (mCpuAccess == CpuAccess::Read)\n  131          {\n  132:             mApiHandle->Unmap(0, &r);\n  133          }\n  134      }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12ComputeContext.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/ComputeContext.h\"\n   30  #include \"glm/gtc/type_ptr.hpp\"\n   31: #include \"Core/API/Device.h\"\n   32  \n   33  namespace Falcor\n   ..\n   35      namespace\n   36      {\n   37:         struct ComputeContextApiData\n   38          {\n   39              size_t refCount = 0;\n   ..\n   43          };\n   44  \n   45:         ComputeContextApiData sApiData;\n   46  \n   47:         void ComputeContextApiData::init()\n   48          {\n   49:             if (!sApiData.pDispatchCommandSig)\n   50              {\n   51                  D3D12_COMMAND_SIGNATURE_DESC sigDesc;\n   ..\n   56                  argDesc.Type = D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH;\n   57                  sigDesc.pArgumentDescs = &argDesc;\n   58:                 gpDevice->getApiHandle()->CreateCommandSignature(&sigDesc, nullptr, IID_PPV_ARGS(&sApiData.pDispatchCommandSig));\n   59              }\n   60:             sApiData.refCount++;\n   61          }\n   62  \n   63:         void ComputeContextApiData::release()\n   64          {\n   65:             sApiData.refCount--;\n   66:             if (sApiData.refCount == 0) sApiData = {};\n   67          }\n   68      }\n   ..\n   72      {\n   73          assert(queue);\n   74:         ComputeContextApiData::init();\n   75      }\n   76  \n   77      ComputeContext::~ComputeContext()\n   78      {\n   79:         ComputeContextApiData::release();\n   80      }\n   81  \n   ..\n   91              if (applyComputeVars(pVars, pCSO->getDesc().getProgramKernels()->getRootSignature().get()) == false) return false;\n   92          }\n   93:         else mpLowLevelData->getCommandList()->SetComputeRootSignature(RootSignature::getEmpty()->getApiHandle());\n   94  \n   95          mpLastBoundComputeVars = pVars;\n   96:         mpLowLevelData->getCommandList()->SetPipelineState(pCSO->getApiHandle());\n   97          mCommandsPending = true;\n   98          return true;\n   ..\n  106              dispatchSize.z > D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION)\n  107          {\n  108:             logError(\"ComputePass::execute() - Dispatch dimension exceeds maximum. Skipping.\");\n  109              return;\n  110          }\n  ...\n  119      {\n  120          pContext->resourceBarrier(pUav->getResource(), Resource::State::UnorderedAccess);\n  121:         UavHandle uav = pUav->getApiHandle();\n  122          if (typeid(ClearType) == typeid(float4))\n  123          {\n  124:             pList->ClearUnorderedAccessViewFloat(uav->getGpuHandle(0), uav->getCpuHandle(0), pUav->getResource()->getApiHandle(), (float*)value_ptr(clear), 0, nullptr);\n  125          }\n  126          else if (typeid(ClearType) == typeid(uint4))\n  127          {\n  128:             pList->ClearUnorderedAccessViewUint(uav->getGpuHandle(0), uav->getCpuHandle(0), pUav->getResource()->getApiHandle(), (uint32_t*)value_ptr(clear), 0, nullptr);\n  129          }\n  130          else\n  ...\n  158          if (prepareForDispatch(pState, pVars) == false) return;\n  159          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  160:         mpLowLevelData->getCommandList()->ExecuteIndirect(sApiData.pDispatchCommandSig, 1, pArgBuffer->getApiHandle(), argBufferOffset, nullptr, 0);\n  161      }\n  162  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12ComputeStateObject.cpp:\n   28  #pragma once\n   29  #include \"stdafx.h\"\n   30: #include \"Core/API/ComputeStateObject.h\"\n   31: #include \"D3D12NvApiExDesc.h\"\n   32: #include \"Core/API/Device.h\"\n   33  \n   34  namespace Falcor\n   35  {\n   36: #if _ENABLE_NVAPI\n   37:     bool getNvApiComputePsoDesc(const ComputeStateObject::Desc& desc, std::vector<NvApiPsoExDesc>& nvApiPsoExDescs)\n   38      {\n   39:         auto ret = NvAPI_Initialize();\n   40  \n   41:         if (ret != NVAPI_OK)\n   42          {\n   43:             logError(\"Failed to initialize NVAPI\");\n   44              return false;\n   45          }\n   46  \n   47:         if (auto optRegisterIndex = findNvApiShaderRegister(desc.getProgramKernels()))\n   48          {\n   49              auto registerIndex = *optRegisterIndex;\n   50:             nvApiPsoExDescs.push_back(NvApiPsoExDesc());\n   51:             createNvApiUavSlotExDesc(nvApiPsoExDescs.back(), registerIndex);\n   52          }\n   53          return true;\n   54      }\n   55  \n   56:     ComputeStateObject::ApiHandle getNvApiComputePsoHandle(const std::vector<NvApiPsoExDesc>& nvDescVec, const D3D12_COMPUTE_PIPELINE_STATE_DESC& desc)\n   57      {\n   58          assert(nvDescVec.size() <= 1);\n   59:         const NVAPI_D3D12_PSO_EXTENSION_DESC* ppPSOExtensionsDesc[1] = {};\n   60  \n   61          for (uint32_t ex = 0; ex < nvDescVec.size(); ex++)\n   ..\n   67              }\n   68          }\n   69:         ComputeStateObject::ApiHandle apiHandle;\n   70:         auto ret = NvAPI_D3D12_CreateComputePipelineState(gpDevice->getApiHandle(), &desc, (NvU32)nvDescVec.size(), ppPSOExtensionsDesc, &apiHandle);\n   71  \n   72:         if (ret != NVAPI_OK || apiHandle == nullptr)\n   73          {\n   74:             logError(\"Failed to create a compute pipeline state object with NVAPI extensions\");\n   75              return nullptr;\n   76          }\n   77  \n   78:         return apiHandle;\n   79      }\n   80  \n   81:     bool getIsNvApiComputePsoRequired(const ComputeStateObject::Desc& desc)\n   82      {\n   83:         return findNvApiShaderRegister(desc.getProgramKernels()).has_value();\n   84      }\n   85  \n   86  #else\n   87:     bool getNvApiComputePsoDesc(const ComputeStateObject::Desc& desc, std::vector<NvApiPsoExDesc>& nvApiPsoExDescs) { should_not_get_here(); return false; }\n   88:     ComputeStateObject::ApiHandle getNvApiComputePsoHandle(const std::vector<NvApiPsoExDesc>& psoDesc, const D3D12_COMPUTE_PIPELINE_STATE_DESC& desc) { should_not_get_here(); return nullptr; }\n   89:     bool getIsNvApiComputePsoRequired(const ComputeStateObject::Desc& desc) { return false; }\n   90  #endif\n   91  \n   92:     void ComputeStateObject::apiInit()\n   93      {\n   94          assert(mDesc.mpProgram);\n   ..\n   96          if (pComputeShader == nullptr) throw std::exception(\"Can't create compute state object without a compute shader\");\n   97  \n   98:         D3D12_COMPUTE_PIPELINE_STATE_DESC desc = {};\n   99:         desc.CS = pComputeShader->getApiHandle();\n  100:         desc.pRootSignature = mDesc.mpRootSignature ? mDesc.mpRootSignature->getApiHandle() : nullptr;\n  101  \n  102:         if (getIsNvApiComputePsoRequired(mDesc))\n  103          {\n  104:             std::vector<NvApiPsoExDesc> nvApiDesc;\n  105:             bool ret = getNvApiComputePsoDesc(mDesc, nvApiDesc);\n  106:             if (!ret) throw std::exception(\"Failed to create compute PSO desc with NVAPI extensions\");\n  107  \n  108:             mApiHandle = getNvApiComputePsoHandle(nvApiDesc, desc);\n  109:             if (mApiHandle == nullptr) throw std::exception(\"Failed to create compute PSO with NVAPI extensions\");\n  110          }\n  111          else\n  112          {\n  113:             d3d_call(gpDevice->getApiHandle()->CreateComputePipelineState(&desc, IID_PPV_ARGS(&mApiHandle)));\n  114          }\n  115      }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12CopyContext.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/CopyContext.h\"\n   30: #include \"Core/API/Device.h\"\n   31: #include \"Core/API/Texture.h\"\n   32  #include \"D3D12DescriptorData.h\"\n   33  #include \"D3D12Resource.h\"\n   ..\n   38      {\n   39          const DescriptorPool* pGpuPool = gpDevice->getGpuDescriptorPool().get();\n   40:         const DescriptorPool::ApiData* pData = pGpuPool->getApiData();\n   41          ID3D12DescriptorHeap* pHeaps[arraysize(pData->pHeaps)];\n   42          uint32_t heapCount = 0;\n   ..\n   45              if (pData->pHeaps[i])\n   46              {\n   47:                 pHeaps[heapCount] = pData->pHeaps[i]->getApiHandle();\n   48                  heapCount++;\n   49              }\n   ..\n   60          for (uint32_t z = 0; z < dstData.Depth; z++)\n   61          {\n   62:             uint8_t* pDstSlice = pDst + rowsToCopy * dstData.RowPitch * z;\n   63:             const uint8_t* pSrcSlice = pSrc + srcData.SlicePitch * z;\n   64  \n   65              for (uint32_t y = 0; y < rowsToCopy; y++)\n   66              {\n   67:                 const uint8_t* pSrcRow = pSrcSlice + srcData.RowPitch * y;\n   68:                 uint8_t* pDstRow = pDstSlice + dstData.RowPitch* y;\n   69                  memcpy(pDstRow, pSrcRow, rowSize);\n   70              }\n   ..\n   83  \n   84          // Get the footprint\n   85:         D3D12_RESOURCE_DESC texDesc = pTexture->getApiHandle()->GetDesc();\n   86          std::vector<D3D12_PLACED_SUBRESOURCE_FOOTPRINT> footprint(subresourceCount);\n   87          std::vector<uint32_t> rowCount(subresourceCount);\n   ..\n   97              footprint[0].Footprint.Height = (size.y == -1) ? pTexture->getHeight(mipLevel) - offset.y : size.y;\n   98              footprint[0].Footprint.Depth = (size.z == -1) ? pTexture->getDepth(mipLevel) - offset.z : size.z;\n   99:             footprint[0].Footprint.RowPitch = align_to(D3D12_TEXTURE_DATA_PITCH_ALIGNMENT, footprint[0].Footprint.Width * getFormatBytesPerBlock(pTexture->getFormat()));\n  100              rowCount[0] = footprint[0].Footprint.Height;\n  101:             rowSize[0] = footprint[0].Footprint.RowPitch;\n  102              bufferSize = rowSize[0] * rowCount[0] * footprint[0].Footprint.Depth;\n  103          }\n  104          else\n  105          {\n  106:             ID3D12Device* pDevice = gpDevice->getApiHandle();\n  107              pDevice->GetCopyableFootprints(&texDesc, firstSubresource, subresourceCount, 0, footprint.data(), rowCount.data(), rowSize.data(), &bufferSize);\n  108          }\n  ...\n  112          // Map the buffer\n  113          uint8_t* pDst = (uint8_t*)pBuffer->map(Buffer::MapType::WriteDiscard);\n  114:         ID3D12ResourcePtr pResource = pBuffer->getApiHandle();\n  115  \n  116          // Get the offset from the beginning of the resource\n  ...\n  126              D3D12_SUBRESOURCE_DATA src;\n  127              src.pData = pSrc;\n  128:             src.RowPitch = physicalWidth * getFormatBytesPerBlock(pTexture->getFormat());\n  129:             src.SlicePitch = src.RowPitch * physicalHeight;\n  130              copySubresourceData(src, footprint[s], pDst, rowSize[s], rowCount[s]);\n  131:             pSrc = (uint8_t*)pSrc + footprint[s].Footprint.Depth * src.SlicePitch;\n  132  \n  133              // Dispatch a command\n  134              footprint[s].Offset += vaOffset;\n  135              uint32_t subresource = s + firstSubresource;\n  136:             D3D12_TEXTURE_COPY_LOCATION dstLoc = { pTexture->getApiHandle(), D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX, subresource };\n  137              D3D12_TEXTURE_COPY_LOCATION srcLoc = { pResource, D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT, footprint[s] };\n  138  \n  ...\n  148          pThis->mpContext = pCtx;\n  149          //Get footprint\n  150:         D3D12_RESOURCE_DESC texDesc = pTexture->getApiHandle()->GetDesc();\n  151          D3D12_PLACED_SUBRESOURCE_FOOTPRINT& footprint = pThis->mFootprint;\n  152          uint64_t rowSize;\n  153          uint64_t size;\n  154:         ID3D12Device* pDevice = gpDevice->getApiHandle();\n  155          pDevice->GetCopyableFootprints(&texDesc, subresourceIndex, 1, 0, &footprint, &pThis->mRowCount, &rowSize, &size);\n  156  \n  ...\n  159  \n  160          //Copy from texture to buffer\n  161:         D3D12_TEXTURE_COPY_LOCATION srcLoc = { pTexture->getApiHandle(), D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX, subresourceIndex };\n  162:         D3D12_TEXTURE_COPY_LOCATION dstLoc = { pThis->mpBuffer->getApiHandle(), D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT, footprint };\n  163          pCtx->resourceBarrier(pTexture, Resource::State::CopySource);\n  164          pCtx->getLowLevelData()->getCommandList()->CopyTextureRegion(&dstLoc, 0, 0, 0, &srcLoc, nullptr);\n  ...\n  186          for (uint32_t z = 0; z < footprint.Footprint.Depth; z++)\n  187          {\n  188:             const uint8_t* pSrcZ = pData + z * footprint.Footprint.RowPitch * mRowCount;\n  189              uint8_t* pDstZ = result.data() + z * actualRowSize * mRowCount;\n  190              for (uint32_t y = 0; y < mRowCount; y++)\n  191              {\n  192:                 const uint8_t* pSrc = pSrcZ + y * footprint.Footprint.RowPitch;\n  193                  uint8_t* pDst = pDstZ + y * actualRowSize;\n  194                  memcpy(pDst, pSrc, actualRowSize);\n  ...\n  205          barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;\n  206          barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  207:         barrier.Transition.pResource = pResource->getApiHandle();\n  208          barrier.Transition.StateBefore = getD3D12ResourceState(pResource->getGlobalState());\n  209          barrier.Transition.StateAfter = getD3D12ResourceState(newState);\n  ...\n  217          }\n  218  \n  219:         if (beforeOrAfterState & (D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE))\n  220          {\n  221              assert(is_set(pResource->getBindFlags(), Resource::BindFlags::ShaderResource));\n  ...\n  257      }\n  258  \n  259:     void CopyContext::apiSubresourceBarrier(const Texture* pTexture, Resource::State newState, Resource::State oldState, uint32_t arraySlice, uint32_t mipLevel)\n  260      {\n  261          uint32_t subresourceIndex = pTexture->getSubresourceIndex(arraySlice, mipLevel);\n  ...\n  268          barrier.Type = D3D12_RESOURCE_BARRIER_TYPE_UAV;\n  269          barrier.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE;\n  270:         barrier.UAV.pResource = pResource->getApiHandle();\n  271  \n  272          // Check that resource has required bind flags for UAV barrier to be supported\n  ...\n  281          resourceBarrier(pDst, Resource::State::CopyDest);\n  282          resourceBarrier(pSrc, Resource::State::CopySource);\n  283:         mpLowLevelData->getCommandList()->CopyResource(pDst->getApiHandle(), pSrc->getApiHandle());\n  284          mCommandsPending = true;\n  285      }\n  ...\n  293          D3D12_TEXTURE_COPY_LOCATION pDstCopyLoc;\n  294  \n  295:         pDstCopyLoc.pResource = pDst->getApiHandle();\n  296          pDstCopyLoc.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;\n  297          pDstCopyLoc.SubresourceIndex = dstSubresourceIdx;\n  298  \n  299:         pSrcCopyLoc.pResource = pSrc->getApiHandle();\n  300          pSrcCopyLoc.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;\n  301          pSrcCopyLoc.SubresourceIndex = srcSubresourceIdx;\n  ...\n  309          resourceBarrier(pDst, Resource::State::CopyDest);\n  310          resourceBarrier(pSrc, Resource::State::CopySource);\n  311:         mpLowLevelData->getCommandList()->CopyBufferRegion(pDst->getApiHandle(), dstOffset, pSrc->getApiHandle(), pSrc->getGpuAddressOffset() + srcOffset, numBytes);\n  312          mCommandsPending = true;\n  313      }\n  ...\n  321          dstLoc.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;\n  322          dstLoc.SubresourceIndex = dstSubresource;\n  323:         dstLoc.pResource = pDst->getApiHandle();\n  324  \n  325          D3D12_TEXTURE_COPY_LOCATION srcLoc = {};\n  326          srcLoc.Type = D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX;\n  327          srcLoc.SubresourceIndex = srcSubresource;\n  328:         srcLoc.pResource = pSrc->getApiHandle();\n  329  \n  330          D3D12_BOX box;\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12DescriptorData.h:\n   31  namespace Falcor\n   32  {\n   33:     struct DescriptorPoolApiData\n   34      {\n   35          D3D12DescriptorHeap::SharedPtr pHeaps[D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES];\n   36      };\n   37  \n   38:     struct DescriptorSetApiData\n   39      {\n   40          D3D12DescriptorHeap::Allocation::SharedPtr pAllocation; // The heap-allocation. We always allocate a single contiguous block, even if there are multiple ranges.\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12DescriptorHeap.cpp:\n   28  #include \"stdafx.h\"\n   29  #include \"D3D12DescriptorHeap.h\"\n   30: #include \"Core/API/Device.h\"\n   31  \n   32  namespace Falcor\n   ..\n   34      D3D12DescriptorHeap::D3D12DescriptorHeap(D3D12_DESCRIPTOR_HEAP_TYPE type, uint32_t chunkCount) : mMaxChunkCount(chunkCount), mType(type)\n   35      {\n   36:         DeviceHandle pDevice = gpDevice->getApiHandle();\n   37          mDescriptorSize = pDevice->GetDescriptorHandleIncrementSize(type);\n   38      }\n   ..\n   43      {\n   44          assert(gpDevice);\n   45:         DeviceHandle pDevice = gpDevice->getApiHandle();\n   46  \n   47          uint32_t chunkCount = (descCount + kDescPerChunk - 1) / kDescPerChunk;\n   ..\n   52          desc.Type = type;\n   53          desc.NumDescriptors = chunkCount * kDescPerChunk;\n   54:         if (FAILED(pDevice->CreateDescriptorHeap(&desc, IID_PPV_ARGS(&pHeap->mApiHandle))))\n   55          {\n   56              throw std::exception(\"Failed to create descriptor heap\");\n   57          }\n   58  \n   59:         pHeap->mCpuHeapStart = pHeap->mApiHandle->GetCPUDescriptorHandleForHeapStart();\n   60:         pHeap->mGpuHeapStart = pHeap->mApiHandle->GetGPUDescriptorHandleForHeapStart();\n   61          return pHeap;\n   62      }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12DescriptorHeap.h:\n   36          using SharedPtr = std::shared_ptr<D3D12DescriptorHeap>;\n   37          using SharedConstPtr = std::shared_ptr<const D3D12DescriptorHeap>;\n   38:         using ApiHandle = DescriptorHeapHandle;\n   39          using CpuHandle = HeapCpuHandle;\n   40          using GpuHandle = HeapGpuHandle;\n   ..\n   79          \n   80          Allocation::SharedPtr allocateDescriptors(uint32_t count);\n   81:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n   82          D3D12_DESCRIPTOR_HEAP_TYPE getType() const { return mType; }\n   83  \n   ..\n   98          const uint32_t mMaxChunkCount = 0;\n   99          uint32_t mAllocatedChunks = 0;\n  100:         ApiHandle mApiHandle;\n  101          D3D12_DESCRIPTOR_HEAP_TYPE mType;\n  102  \n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12DescriptorPool.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/DescriptorPool.h\"\n   30  #include \"D3D12DescriptorData.h\"\n   31  \n   ..\n   58      }\n   59  \n   60:     void DescriptorPool::apiInit()\n   61      {\n   62          // Find out how many heaps we need\n   ..\n   71          descCount[D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV] += mDesc.mDescCount[(uint32_t)Type::TextureUav] + mDesc.mDescCount[(uint32_t)Type::RawBufferUav] + mDesc.mDescCount[(uint32_t)Type::TypedBufferUav] + mDesc.mDescCount[(uint32_t)Type::StructuredBufferUav];\n   72  \n   73:         mpApiData = std::make_shared<DescriptorPoolApiData>();\n   74:         for (uint32_t i = 0; i < arraysize(mpApiData->pHeaps); i++)\n   75          {\n   76              if (descCount[i])\n   77              {\n   78:                 mpApiData->pHeaps[i] = D3D12DescriptorHeap::create(D3D12_DESCRIPTOR_HEAP_TYPE(i), descCount[i], mDesc.mShaderVisible);\n   79              }\n   80          }\n   81      }\n   82  \n   83:     const DescriptorPool::ApiHandle& DescriptorPool::getApiHandle(uint32_t heapIndex) const\n   84      {\n   85:         assert(heapIndex < arraysize(mpApiData->pHeaps));\n   86:         return mpApiData->pHeaps[heapIndex]->getApiHandle();\n   87      }\n   88  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12DescriptorSet.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/DescriptorSet.h\"\n   30  #include \"D3D12DescriptorData.h\"\n   31: #include \"Core/API/Device.h\"\n   32: #include \"Core/API/CopyContext.h\"\n   33  \n   34  namespace Falcor\n   ..\n   39      {\n   40          auto dxType = falcorToDxDescType(type);\n   41:         D3D12DescriptorHeap* pHeap = pPool->getApiData()->pHeaps[dxType].get();\n   42          assert(pHeap);\n   43          assert(pHeap->getType() == dxType);\n   ..\n   45      }\n   46  \n   47:     void DescriptorSet::apiInit()\n   48      {\n   49:         mpApiData = std::make_shared<DescriptorSetApiData>();\n   50          uint32_t count = 0;\n   51          const auto falcorType = mLayout.getRange(0).type;\n   ..\n   53  \n   54          // For each range we need to allocate a table from a heap\n   55:         mpApiData->rangeBaseOffset.resize(mLayout.getRangeCount());\n   56  \n   57          for (size_t i = 0; i < mLayout.getRangeCount(); i++)\n   58          {\n   59              const auto& range = mLayout.getRange(i);\n   60:             mpApiData->rangeBaseOffset[i] = count;\n   61              assert(d3dType == falcorToDxDescType(range.type)); // We can only allocate from a single heap\n   62              count += range.descCount;\n   ..\n   64  \n   65          D3D12DescriptorHeap* pHeap = getHeap(mpPool.get(), falcorType);\n   66:         mpApiData->pAllocation = pHeap->allocateDescriptors(count);\n   67:         if (mpApiData->pAllocation == nullptr)\n   68          {\n   69              // Execute deferred releases and try again\n   70              mpPool->executeDeferredReleases();\n   71:             mpApiData->pAllocation = pHeap->allocateDescriptors(count);\n   72          }\n   73  \n   74          // Allocation failed again, there is nothing else we can do.\n   75:         if (mpApiData->pAllocation == nullptr) throw std::exception(\"Failed to create descriptor set\");\n   76      }\n   77  \n   78      DescriptorSet::CpuHandle DescriptorSet::getCpuHandle(uint32_t rangeIndex, uint32_t descInRange) const\n   79      {\n   80:         uint32_t index = mpApiData->rangeBaseOffset[rangeIndex] + descInRange;\n   81:         return mpApiData->pAllocation->getCpuHandle(index);\n   82      }\n   83  \n   84      DescriptorSet::GpuHandle DescriptorSet::getGpuHandle(uint32_t rangeIndex, uint32_t descInRange) const\n   85      {\n   86:         uint32_t index = mpApiData->rangeBaseOffset[rangeIndex] + descInRange;\n   87:         return mpApiData->pAllocation->getGpuHandle(index);\n   88      }\n   89  \n   ..\n   91      {\n   92          auto dstHandle = pSet->getCpuHandle(rangeIndex, descIndex);\n   93:         gpDevice->getApiHandle()->CopyDescriptorsSimple(1, dstHandle, handle, falcorToDxDescType(pSet->getRange(rangeIndex).type));\n   94      }\n   95  \n   96      void DescriptorSet::setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv)\n   97      {\n   98:         setCpuHandle(this, rangeIndex, descIndex, pSrv->getApiHandle()->getCpuHandle(0));\n   99      }\n  100  \n  101      void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav)\n  102      {\n  103:         setCpuHandle(this, rangeIndex, descIndex, pUav->getApiHandle()->getCpuHandle(0));\n  104      }\n  105  \n  106      void DescriptorSet::setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler)\n  107      {\n  108:         setCpuHandle(this, rangeIndex, descIndex, pSampler->getApiHandle()->getCpuHandle(0));\n  109      }\n  110  \n  ...\n  121      void DescriptorSet::setCbv(uint32_t rangeIndex, uint32_t descIndex, ConstantBufferView* pView)\n  122      {\n  123:         setCpuHandle(this, rangeIndex, descIndex, pView->getApiHandle()->getCpuHandle(0));\n  124      }\n  125  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Device.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/Device.h\"\n   30  \n   31  namespace Falcor\n   32  {\n   33:     struct DeviceApiData\n   34      {\n   35          IDXGIFactory4Ptr pDxgiFactory = nullptr;\n   ..\n  111          IDXGISwapChain1Ptr pSwapChain;\n  112  \n  113:         HRESULT hr = pFactory->CreateSwapChainForHwnd(pCommandQueue, pWindow->getApiHandle(), &swapChainDesc, nullptr, nullptr, &pSwapChain);\n  114          if (FAILED(hr))\n  115          {\n  ...\n  237      }\n  238  \n  239:     ApiCommandQueueType Device::getApiCommandQueueType(LowLevelContextData::CommandQueueType type) const\n  240      {\n  241          switch (type)\n  ...\n  252      }\n  253  \n  254:     bool Device::getApiFboData(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat, ResourceHandle apiHandles[kSwapChainBuffersCount], uint32_t& currentBackBufferIndex) {\n  255          for (uint32_t i = 0; i < kSwapChainBuffersCount; i++) {\n  256:             HRESULT hr = mpApiData->pSwapChain->GetBuffer(i, IID_PPV_ARGS(&apiHandles[i]));\n  257              if (FAILED(hr)) {\n  258                  d3dTraceHR(\"Failed to get back-buffer \" + std::to_string(i) + \" from the swap-chain\", hr);\n  ...\n  260              }\n  261          }\n  262:         currentBackBufferIndex = mpApiData->pSwapChain->GetCurrentBackBufferIndex();\n  263          return true;\n  264      }\n  265  \n  266      void Device::toggleFullScreen(bool fullscreen) {\n  267:         mpApiData->pSwapChain->SetFullscreenState(fullscreen, nullptr);\n  268      }\n  269  \n  270:     void Device::destroyApiObjects() {\n  271:         safe_delete(mpApiData);\n  272          mpWindow.reset();\n  273      }\n  274  \n  275:     void Device::apiPresent() {\n  276:         mpApiData->pSwapChain->Present(mDesc.enableVsync ? 1 : 0, 0);\n  277          mCurrentBackBufferIndex = (mCurrentBackBufferIndex + 1) % kSwapChainBuffersCount;\n  278      }\n  279  \n  280:     bool Device::apiInit() {\n  281:         DeviceApiData* pData = new DeviceApiData;\n  282:         mpApiData = pData;\n  283          UINT dxgiFlags = 0;\n  284  \n  ...\n  295  \n  296          // Create the DXGI factory\n  297:         d3d_call(CreateDXGIFactory2(dxgiFlags, IID_PPV_ARGS(&mpApiData->pDxgiFactory)));\n  298  \n  299          // Create the device\n  300:         mApiHandle = createDevice(mpApiData->pDxgiFactory, getD3DFeatureLevel(mDesc.apiMajorVersion, mDesc.apiMinorVersion), mDesc.experimentalFeatures);\n  301:         if (mApiHandle == nullptr) return false;\n  302  \n  303:         mSupportedFeatures = getSupportedFeatures(mApiHandle);\n  304  \n  305          if (mDesc.enableDebugLayer)\n  306          {\n  307              MAKE_SMART_COM_PTR(ID3D12InfoQueue);\n  308:             ID3D12InfoQueuePtr pInfoQueue;\n  309:             mApiHandle->QueryInterface(IID_PPV_ARGS(&pInfoQueue));\n  310              D3D12_MESSAGE_ID hideMessages[] =\n  311              {\n  ...\n  316              D3D12_INFO_QUEUE_FILTER f = {};\n  317              f.DenyList.NumIDs = arraysize(hideMessages);\n  318:             f.DenyList.pIDList = hideMessages;\n  319:             pInfoQueue->AddStorageFilterEntries(&f);\n  320  \n  321              // Break on DEVICE_REMOVAL_PROCESS_AT_FAULT\n  322:             pInfoQueue->SetBreakOnID(D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT, true);\n  323          }\n  324  \n  ...\n  330                  D3D12_COMMAND_QUEUE_DESC cqDesc = {};\n  331                  cqDesc.Flags = D3D12_COMMAND_QUEUE_FLAG_NONE;\n  332:                 cqDesc.Type = getApiCommandQueueType((LowLevelContextData::CommandQueueType)i);\n  333  \n  334                  ID3D12CommandQueuePtr pQueue;\n  335:                 if (FAILED(mApiHandle->CreateCommandQueue(&cqDesc, IID_PPV_ARGS(&pQueue))))\n  336                  {\n  337                      logError(\"Failed to create command queue\");\n  ...\n  351      bool Device::createSwapChain(ResourceFormat colorFormat)\n  352      {\n  353:         mpApiData->pSwapChain = createDxgiSwapChain(mpApiData->pDxgiFactory, mpWindow.get(), getCommandQueueHandle(LowLevelContextData::CommandQueueType::Direct, 0), colorFormat, kSwapChainBuffersCount);\n  354:         if (mpApiData->pSwapChain == nullptr) return false;\n  355          return true;\n  356      }\n  357  \n  358:     void Device::apiResizeSwapChain(uint32_t width, uint32_t height, ResourceFormat colorFormat)\n  359      {\n  360          DXGI_SWAP_CHAIN_DESC desc;\n  361:         d3d_call(mpApiData->pSwapChain->GetDesc(&desc));\n  362:         d3d_call(mpApiData->pSwapChain->ResizeBuffers(kSwapChainBuffersCount, width, height, desc.BufferDesc.Format, desc.Flags));\n  363      }\n  364  \n  365      bool Device::isWindowOccluded() const\n  366      {\n  367:         if (mpApiData->isWindowOccluded)\n  368          {\n  369:             mpApiData->isWindowOccluded = (mpApiData->pSwapChain->Present(0, DXGI_PRESENT_TEST) == DXGI_STATUS_OCCLUDED);\n  370          }\n  371:         return mpApiData->isWindowOccluded;\n  372      }\n  373  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Fbo.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/FBO.h\"\n   30  \n   31  namespace Falcor\n   ..\n   82      Fbo::~Fbo() = default;\n   83  \n   84:     const Fbo::ApiHandle& Fbo::getApiHandle() const\n   85      {\n   86:         UNSUPPORTED_IN_D3D12(\"Fbo::getApiHandle()\");\n   87:         return mApiHandle;\n   88      }\n   89      \n   ..\n  101      }\n  102  \n  103:     void Fbo::initApiHandle() const {}\n  104  \n  105      RenderTargetView::SharedPtr Fbo::getRenderTargetView(uint32_t rtIndex) const\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Formats.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/Device.h\"\n   30  \n   31  namespace Falcor\n   ..\n  118          D3D12_FEATURE_DATA_FORMAT_SUPPORT support;\n  119          support.Format = getDxgiFormat(format);\n  120:         d3d_call(gpDevice->getApiHandle()->CheckFeatureSupport(D3D12_FEATURE_FORMAT_SUPPORT, &support, sizeof(support)));\n  121  \n  122          ResourceBindFlags flags = ResourceBindFlags::None;\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12GpuFence.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/GpuFence.h\"\n   30: #include \"Core/API/Device.h\"\n   31  \n   32  namespace Falcor\n   33  {\n   34:     struct FenceApiData\n   35      {\n   36          HANDLE eventHandle = INVALID_HANDLE_VALUE;\n   ..\n   39      GpuFence::~GpuFence()\n   40      {\n   41:         CloseHandle(mpApiData->eventHandle);\n   42:         safe_delete(mpApiData);\n   43      }\n   44  \n   ..\n   46      {\n   47          SharedPtr pFence = SharedPtr(new GpuFence());\n   48:         pFence->mpApiData = new FenceApiData;\n   49:         pFence->mpApiData->eventHandle = CreateEvent(nullptr, FALSE, FALSE, nullptr);\n   50:         if (pFence->mpApiData->eventHandle == nullptr) throw std::exception(\"Failed to create an event object\");\n   51  \n   52          assert(gpDevice);\n   53:         ID3D12Device* pDevice = gpDevice->getApiHandle().GetInterfacePtr();\n   54:         HRESULT hr = pDevice->CreateFence(pFence->mCpuValue, D3D12_FENCE_FLAG_NONE, IID_PPV_ARGS(&pFence->mApiHandle));\n   55          if (FAILED(hr))\n   56          {\n   ..\n   66      {\n   67          assert(pQueue);\n   68:         d3d_call(pQueue->Signal(mApiHandle, mCpuValue));\n   69          mCpuValue++;\n   70          return mCpuValue - 1;\n   ..\n   73      void GpuFence::syncGpu(CommandQueueHandle pQueue)\n   74      {\n   75:         d3d_call(pQueue->Wait(mApiHandle, mCpuValue - 1));\n   76      }\n   77  \n   ..\n   84          if (gpuVal < syncVal)\n   85          {\n   86:             d3d_call(mApiHandle->SetEventOnCompletion(syncVal, mpApiData->eventHandle));\n   87:             WaitForSingleObject(mpApiData->eventHandle, INFINITE);\n   88          }\n   89      }\n   ..\n   91      uint64_t GpuFence::getGpuValue() const\n   92      {\n   93:         return mApiHandle->GetCompletedValue();\n   94      }\n   95  \n   96:     const ApiHandle& GpuFence::getApiHandle() const { \n   97:         return mApiHandle; \n   98      }\n   99  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12GpuMemoryHeap.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/GpuMemoryHeap.h\"\n   30  #include \"D3D12Resource.h\"\n   31  \n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12GpuTimer.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/GpuTimer.h\"\n   30  \n   31  namespace Falcor\n   32  {\n   33:     void GpuTimer::apiBegin()\n   34      {\n   35:         mpLowLevelData->getCommandList()->EndQuery(spHeap.lock()->getApiHandle(), D3D12_QUERY_TYPE_TIMESTAMP, mStart);\n   36      }\n   37  \n   38:     void GpuTimer::apiEnd()\n   39      {\n   40:         mpLowLevelData->getCommandList()->EndQuery(spHeap.lock()->getApiHandle(), D3D12_QUERY_TYPE_TIMESTAMP, mEnd);\n   41      }\n   42  \n   43:     void GpuTimer::apiResolve(uint64_t result[2])\n   44      {\n   45:         mpLowLevelData->getCommandList()->ResolveQueryData(spHeap.lock()->getApiHandle(), D3D12_QUERY_TYPE_TIMESTAMP, mStart, 2, mpResolveBuffer->getApiHandle(), 0);\n   46          uint64_t* pRes = (uint64_t*)mpResolveBuffer->map(Buffer::MapType::Read);\n   47          result[0] = pRes[0];\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12GraphicsStateObject.cpp:\n   28  #pragma once\n   29  #include \"stdafx.h\"\n   30: #include \"Core/API/GraphicsStateObject.h\"\n   31: #include \"D3D12NvApiExDesc.h\"\n   32: #include \"Core/API/Device.h\"\n   33  #include \"D3D12State.h\"\n   34  \n   35  namespace Falcor\n   36  {\n   37: #if _ENABLE_NVAPI\n   38:     bool getNvApiGraphicsPsoDesc(const GraphicsStateObject::Desc& desc, std::vector<NvApiPsoExDesc>& nvApiPsoExDescs)\n   39      {\n   40:         auto ret = NvAPI_Initialize();\n   41  \n   42:         if (ret != NVAPI_OK)\n   43          {\n   44:             logError(\"Failed to initialize NvApi\");\n   45              return false;\n   46          }\n   47  \n   48:         if (auto optRegisterIndex = findNvApiShaderRegister(desc.getProgramKernels()))\n   49          {\n   50              auto registerIndex = *optRegisterIndex;\n   51:             nvApiPsoExDescs.push_back(NvApiPsoExDesc());\n   52:             createNvApiUavSlotExDesc(nvApiPsoExDescs.back(), registerIndex);\n   53          }\n   54          return true;\n   55      }\n   56  \n   57:     GraphicsStateObject::ApiHandle getNvApiGraphicsPsoHandle(const std::vector<NvApiPsoExDesc>& nvDescVec, const D3D12_GRAPHICS_PIPELINE_STATE_DESC& desc)\n   58      {\n   59:         const NVAPI_D3D12_PSO_EXTENSION_DESC* ppPSOExtensionsDesc[5];\n   60  \n   61          for (uint32_t ex = 0; ex < nvDescVec.size(); ex++)\n   ..\n   71              }\n   72          }\n   73:         GraphicsStateObject::ApiHandle apiHandle;\n   74:         auto ret = NvAPI_D3D12_CreateGraphicsPipelineState(gpDevice->getApiHandle(), &desc, (NvU32)nvDescVec.size(), ppPSOExtensionsDesc, &apiHandle);\n   75  \n   76:         if (ret != NVAPI_OK || apiHandle == nullptr)\n   77          {\n   78:             logError(\"Failed to create a graphics pipeline state object with NVAPI extensions\");\n   79              return nullptr;\n   80          }\n   81  \n   82:         return apiHandle;\n   83      }\n   84  \n   85:     bool getIsNvApiGraphicsPsoRequired(const GraphicsStateObject::Desc& desc)\n   86      {\n   87:         return findNvApiShaderRegister(desc.getProgramKernels()).has_value();\n   88      }\n   89  #else\n   90:     bool getNvApiGraphicsPsoDesc(const GraphicsStateObject::Desc& desc, std::vector<NvApiPsoExDesc>& nvApiPsoExDescs) { should_not_get_here(); return false; }\n   91:     GraphicsStateObject::ApiHandle getNvApiGraphicsPsoHandle(const std::vector<NvApiPsoExDesc>& psoDesc, const D3D12_GRAPHICS_PIPELINE_STATE_DESC& desc) { should_not_get_here(); return nullptr; }\n   92:     bool getIsNvApiGraphicsPsoRequired(const GraphicsStateObject::Desc& desc) { return false; }\n   93  #endif\n   94  \n   95:     void GraphicsStateObject::apiInit()\n   96      {\n   97:         D3D12_GRAPHICS_PIPELINE_STATE_DESC d3dDesc;\n   98          InputLayoutDesc inputDesc;\n   99          initD3D12GraphicsStateDesc(mDesc, d3dDesc, inputDesc);\n  100  \n  101:         if (getIsNvApiGraphicsPsoRequired(mDesc))\n  102          {\n  103:             std::vector<NvApiPsoExDesc> nvApiDesc;\n  104:             bool ret = getNvApiGraphicsPsoDesc(mDesc, nvApiDesc);\n  105:             if (!ret) throw std::exception(\"Failed to create graphics PSO desc with NVAPI extensions\");\n  106  \n  107:             mApiHandle = getNvApiGraphicsPsoHandle(nvApiDesc, d3dDesc);\n  108:             if (mApiHandle == nullptr) throw std::exception(\"Failed to create graphics PSO with NVAPI extensions\");\n  109          }\n  110          else\n  111          {\n  112:             d3d_call(gpDevice->getApiHandle()->CreateGraphicsPipelineState(&d3dDesc, IID_PPV_ARGS(&mApiHandle)));\n  113          }\n  114      }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12LowLevelContextData.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/LowLevelContextData.h\"\n   30: #include \"Core/API/Device.h\"\n   31: #include \"D3D12ApiData.h\"\n   32  \n   33  namespace Falcor\n   ..\n   37      {\n   38          ID3D12CommandAllocatorPtr pAllocator;\n   39:         if (FAILED(gpDevice->getApiHandle()->CreateCommandAllocator(type, IID_PPV_ARGS(&pAllocator))))\n   40          {\n   41              logError(\"Failed to create command allocator\");\n   ..\n   45      }\n   46  \n   47:     template<typename ApiType>\n   48:     ApiType createCommandList(ID3D12Device* pDevice, D3D12_COMMAND_LIST_TYPE type, CommandAllocatorHandle allocator)\n   49      {\n   50:         ApiType pList;\n   51          HRESULT hr = pDevice->CreateCommandList(0, type, allocator, nullptr, IID_PPV_ARGS(&pList));\n   52          return (FAILED(hr)) ? nullptr : pList;\n   ..\n   63      {\n   64          mpFence = GpuFence::create();\n   65:         mpApiData = new LowLevelContextApiData;\n   66:         assert(mpFence && mpApiData);\n   67  \n   68          // Create a command allocator\n   69:         D3D12_COMMAND_LIST_TYPE cmdListType = gpDevice->getApiCommandQueueType(type);\n   70          switch (cmdListType)\n   71          {\n   72          case D3D12_COMMAND_LIST_TYPE_DIRECT:\n   73:             mpApiData->pAllocatorPool = FencedPool<CommandAllocatorHandle>::create(mpFence, newCommandAllocator<D3D12_COMMAND_LIST_TYPE_DIRECT>);\n   74              break;\n   75          case D3D12_COMMAND_LIST_TYPE_COMPUTE:\n   76:             mpApiData->pAllocatorPool = FencedPool<CommandAllocatorHandle>::create(mpFence, newCommandAllocator<D3D12_COMMAND_LIST_TYPE_COMPUTE>);\n   77              break;\n   78          case D3D12_COMMAND_LIST_TYPE_COPY:\n   79:             mpApiData->pAllocatorPool = FencedPool<CommandAllocatorHandle>::create(mpFence, newCommandAllocator<D3D12_COMMAND_LIST_TYPE_COPY>);\n   80              break;\n   81          default:\n   82              should_not_get_here();\n   83          }\n   84:         mpAllocator = mpApiData->pAllocatorPool->newObject();\n   85          assert(mpAllocator);\n   86  \n   87:         d3d_call(gpDevice->getApiHandle()->CreateCommandList(0, cmdListType, mpAllocator, nullptr, IID_PPV_ARGS(&mpList)));\n   88          assert(mpList);\n   89      }\n   ..\n   91      LowLevelContextData::~LowLevelContextData()\n   92      {\n   93:         safe_delete(mpApiData);\n   94      }\n   95  \n   ..\n  101          mpQueue->ExecuteCommandLists(1, &pList);\n  102          mpFence->gpuSignal(mpQueue);\n  103:         mpAllocator = mpApiData->pAllocatorPool->newObject();\n  104          d3d_call(mpAllocator->Reset());\n  105          d3d_call(mpList->Reset(mpAllocator, nullptr));\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12NvApiExDesc.h:\n   28  namespace Falcor\n   29  {\n   30: #if _ENABLE_NVAPI\n   31:     struct NvApiPsoExDesc\n   32      {\n   33          NV_PSO_EXTENSION psoExtension;\n   34:         NVAPI_D3D12_PSO_VERTEX_SHADER_DESC mVsExDesc;\n   35:         NVAPI_D3D12_PSO_HULL_SHADER_DESC   mHsExDesc;\n   36:         NVAPI_D3D12_PSO_DOMAIN_SHADER_DESC mDsExDesc;\n   37:         NVAPI_D3D12_PSO_GEOMETRY_SHADER_DESC mGsExDesc;\n   38:         NVAPI_D3D12_PSO_SET_SHADER_EXTENSION_SLOT_DESC mExtSlotDesc;\n   39          std::vector<NV_CUSTOM_SEMANTIC> mCustomSemantics;\n   40      };\n   41  \n   42      // TODO add these functions for Hs, Ds, Gs\n   43:     inline void createNvApiVsExDesc(NvApiPsoExDesc& ret)\n   44      {\n   45          ret.psoExtension = NV_PSO_VERTEX_SHADER_EXTENSION;\n   ..\n   60          ret.mCustomSemantics[0].version = NV_CUSTOM_SEMANTIC_VERSION;\n   61          ret.mCustomSemantics[0].NVCustomSemanticType = NV_X_RIGHT_SEMANTIC;\n   62:         strcpy_s(&(ret.mCustomSemantics[0].NVCustomSemanticNameString[0]), NVAPI_LONG_STRING_MAX, \"NV_X_RIGHT\");\n   63  \n   64          ret.mCustomSemantics[1].version = NV_CUSTOM_SEMANTIC_VERSION;\n   65          ret.mCustomSemantics[1].NVCustomSemanticType = NV_VIEWPORT_MASK_SEMANTIC;\n   66:         strcpy_s(&(ret.mCustomSemantics[1].NVCustomSemanticNameString[0]), NVAPI_LONG_STRING_MAX, \"NV_VIEWPORT_MASK\");\n   67  \n   68          desc.pCustomSemantics = ret.mCustomSemantics.data();\n   69      }\n   70  \n   71:     inline void createNvApiUavSlotExDesc(NvApiPsoExDesc& ret, uint32_t uavSlot)\n   72      {\n   73          ret.psoExtension = NV_PSO_SET_SHADER_EXTNENSION_SLOT_AND_SPACE;\n   ..\n   83      }\n   84  \n   85:     inline std::optional<uint32_t> findNvApiShaderRegister(ProgramKernels::SharedConstPtr const& pKernels)\n   86      {\n   87          auto pBlock = pKernels->getReflector()->getDefaultParameterBlock();\n   ..\n   94  \n   95  #else\n   96:     using NvApiPsoExDesc = uint32_t;\n   97:     inline void createNvApiVsExDesc(NvApiPsoExDesc& ret) { should_not_get_here(); }\n   98:     inline void createNvApiUavSlotExDesc(NvApiPsoExDesc& ret, uint32_t uavSlot) { should_not_get_here(); }\n   99:     inline std::optional<uint32_t> findNvApiShaderRegister(ProgramKernels::SharedConstPtr const& pKernels, uint32_t& outRegisterIndex) { return std::optional<uint32_t>(); }\n  100  #endif\n  101  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12QueryHeap.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/QueryHeap.h\"\n   30: #include \"Core/API/Device.h\"\n   31  \n   32  namespace Falcor\n   ..\n   40          case QueryHeap::Type::Occlusion:\n   41              return D3D12_QUERY_HEAP_TYPE_OCCLUSION;\n   42:         case QueryHeap::Type::PipelineStats:\n   43:             return D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS;\n   44          default:\n   45              should_not_get_here();\n   ..\n   51      {\n   52          assert(gpDevice);\n   53:         ID3D12Device* pDevice = gpDevice->getApiHandle().GetInterfacePtr();\n   54          D3D12_QUERY_HEAP_DESC desc;\n   55          desc.Count = count;\n   ..\n   57          desc.Type = getD3D12HeapType(type);\n   58  \n   59:         d3d_call(pDevice->CreateQueryHeap(&desc, IID_PPV_ARGS(&mApiHandle)));\n   60      }\n   61  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12RasterizerState.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/RasterizerState.h\"\n   30  \n   31  namespace Falcor\n   ..\n   33      RasterizerState::~RasterizerState() = default;\n   34  \n   35:     const RasterizerStateHandle& RasterizerState::getApiHandle() const\n   36      {\n   37:         UNSUPPORTED_IN_D3D12(\"RasterizerState::getApiHandle()\");\n   38:         return mApiHandle;\n   39      }\n   40  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/RenderContext.h\"\n   30: #include \"Core/API/Device.h\"\n   31  #include \"glm/gtc/type_ptr.hpp\"\n   32  #include \"D3D12State.h\"\n   ..\n   39      namespace\n   40      {\n   41:         struct RenderContextApiData\n   42          {\n   43              size_t refCount = 0;\n   ..\n   68          };\n   69  \n   70:         RenderContextApiData sApiData;\n   71  \n   72:         void RenderContextApiData::init()\n   73          {\n   74              assert(gpDevice);\n   75:             auto& blitData = sApiData.blitData;\n   76              if (blitData.pPass == nullptr)\n   77              {\n   78                  // Init the blit data\n   79                  Program::Desc d;\n   80:                 d.addShaderLibrary(\"Core/API/Blit.slang\").vsEntry(\"vs\").psEntry(\"ps\");\n   81                  blitData.pPass = FullScreenPass::create(d);\n   82                  blitData.pFbo = Fbo::create();\n   ..\n  108                  argDesc.Type = D3D12_INDIRECT_ARGUMENT_TYPE_DRAW;\n  109                  sigDesc.pArgumentDescs = &argDesc;\n  110:                 d3d_call(gpDevice->getApiHandle()->CreateCommandSignature(&sigDesc, nullptr, IID_PPV_ARGS(&sApiData.pDrawCommandSig)));\n  111  \n  112                  // Draw index\n  ...\n  114                  argDesc.Type = D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED;\n  115                  sigDesc.pArgumentDescs = &argDesc;\n  116:                 d3d_call(gpDevice->getApiHandle()->CreateCommandSignature(&sigDesc, nullptr, IID_PPV_ARGS(&sApiData.pDrawIndexCommandSig)));\n  117              }\n  118  \n  119:             sApiData.refCount++;\n  120          }\n  121  \n  122:         void RenderContextApiData::release()\n  123          {\n  124:             sApiData.refCount--;\n  125:             if (sApiData.refCount == 0) sApiData = {};\n  126          }\n  127      }\n  ...\n  130          : ComputeContext(LowLevelContextData::CommandQueueType::Direct, queue)\n  131      {\n  132:         RenderContextApiData::init();\n  133      }\n  134  \n  135      RenderContext::~RenderContext()\n  136      {\n  137:         RenderContextApiData::release();\n  138      }\n  139  \n  ...\n  141      {\n  142          resourceBarrier(pRtv->getResource(), Resource::State::RenderTarget);\n  143:         mpLowLevelData->getCommandList()->ClearRenderTargetView(pRtv->getApiHandle()->getCpuHandle(0), glm::value_ptr(color), 0, nullptr);\n  144          mCommandsPending = true;\n  145      }\n  ...\n  151  \n  152          resourceBarrier(pDsv->getResource(), Resource::State::DepthStencil);\n  153:         mpLowLevelData->getCommandList()->ClearDepthStencilView(pDsv->getApiHandle()->getCpuHandle(0), D3D12_CLEAR_FLAGS(flags), depth, stencil, 0, nullptr);\n  154          mCommandsPending = true;\n  155      }\n  ...\n  175              }\n  176  \n  177:             const Buffer* pIB = pVao->getIndexBuffer().get();\n  178:             if (pIB)\n  179              {\n  180:                 ib.BufferLocation = pIB->getGpuAddress();\n  181:                 ib.SizeInBytes = (uint32_t)pIB->getSize();\n  182                  ib.Format = getDxgiFormat(pVao->getIndexBufferFormat());\n  183:                 pCtx->resourceBarrier(pIB, Resource::State::IndexBuffer);\n  184              }\n  185          }\n  ...\n  194          uint32_t colorTargets = Fbo::getMaxColorTargetCount();\n  195          auto pNullRtv = RenderTargetView::getNullView();\n  196:         std::vector<HeapCpuHandle> pRTV(colorTargets, pNullRtv->getApiHandle()->getCpuHandle(0));\n  197:         HeapCpuHandle pDSV = DepthStencilView::getNullView()->getApiHandle()->getCpuHandle(0);\n  198  \n  199          if (pFbo)\n  ...\n  204                  if (pTexture)\n  205                  {\n  206:                     pRTV[i] = pFbo->getRenderTargetView(i)->getApiHandle()->getCpuHandle(0);\n  207                      pCtx->resourceBarrier(pTexture.get(), Resource::State::RenderTarget);\n  208                  }\n  ...\n  212              if(pTexture)\n  213              {\n  214:                 pDSV = pFbo->getDepthStencilView()->getApiHandle()->getCpuHandle(0);\n  215                  if (pTexture)\n  216                  {\n  ...\n  251              if (samplePos.size())\n  252              {\n  253:                 pList1->SetSamplePositions(pFbo->getSampleCount(), pFbo->getSamplePositionsPixelCount(), (D3D12_SAMPLE_POSITION*)samplePos.data());\n  254              }\n  255              else\n  ...\n  269          static_assert(offsetof(GraphicsState::Viewport, maxDepth) == offsetof(D3D12_VIEWPORT, MaxDepth), \"VP TopLeftX offset\");\n  270  \n  271:         pList->RSSetViewports(D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE, (D3D12_VIEWPORT*)vp);\n  272      }\n  273  \n  ...\n  279          static_assert(offsetof(GraphicsState::Scissor, bottom) == offsetof(D3D12_RECT, bottom), \"Scissor.bottom offset\");\n  280  \n  281:         pList->RSSetScissorRects(D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE, (D3D12_RECT*)sc);\n  282      }\n  283  \n  ...\n  301                  if (applyGraphicsVars(pVars, pGSO->getDesc().getRootSignature().get()) == false) return false;\n  302              }\n  303:             else mpLowLevelData->getCommandList()->SetGraphicsRootSignature(RootSignature::getEmpty()->getApiHandle());\n  304              mpLastBoundGraphicsVars = pVars;\n  305          }\n  ...\n  314          if (is_set(StateBindFlags::Viewports, mBindFlags))          D3D12SetViewports(pList, &pState->getViewport(0));\n  315          if (is_set(StateBindFlags::Scissors, mBindFlags))           D3D12SetScissors(pList, &pState->getScissors(0));\n  316:         if (is_set(StateBindFlags::PipelineState, mBindFlags))      pList->SetPipelineState(pGSO->getApiHandle());\n  317  \n  318          BlendState::SharedPtr blendState = pState->getBlendState();\n  ...\n  352          pContext->resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  353          if (pCountBuffer != nullptr && pCountBuffer != pArgBuffer) pContext->resourceBarrier(pCountBuffer, Resource::State::IndirectArg);\n  354:         pCommandList->ExecuteIndirect(pCommandSig, maxCommandCount, pArgBuffer->getApiHandle(), argBufferOffset, (pCountBuffer != nullptr ? pCountBuffer->getApiHandle() : nullptr), countBufferOffset);\n  355      }\n  356  \n  ...\n  358      {\n  359          if (prepareForDraw(pState, pVars) == false) return;\n  360:         drawIndirectCommon(this, mpLowLevelData->getCommandList(), sApiData.pDrawCommandSig, maxCommandCount, pArgBuffer, argBufferOffset, pCountBuffer, countBufferOffset);\n  361      }\n  362  \n  ...\n  364      {\n  365          if (prepareForDraw(pState, pVars) == false) return;\n  366:         drawIndirectCommon(this, mpLowLevelData->getCommandList(), sApiData.pDrawIndexCommandSig, maxCommandCount, pArgBuffer, argBufferOffset, pCountBuffer, countBufferOffset);\n  367      }\n  368  \n  ...\n  374  \n  375          const auto& pShaderTable = pVars->getShaderTable();\n  376:         resourceBarrier(pShaderTable->getBuffer().get(), Resource::State::NonPixelShader);\n  377  \n  378          D3D12_GPU_VIRTUAL_ADDRESS startAddress = pShaderTable->getBuffer()->getGpuAddress();\n  ...\n  408  \n  409          auto pCmdList = getLowLevelData()->getCommandList();\n  410:         pCmdList->SetComputeRootSignature(pRtso->getGlobalRootSignature()->getApiHandle().GetInterfacePtr());\n  411  \n  412          // Dispatch\n  413          GET_COM_INTERFACE(pCmdList, ID3D12GraphicsCommandList4, pList4);\n  414:         pList4->SetPipelineState1(pRtso->getApiHandle().GetInterfacePtr());\n  415          pList4->DispatchRays(&raytraceDesc);\n  416      }\n  ...\n  418      void RenderContext::blit(ShaderResourceView::SharedPtr pSrc, RenderTargetView::SharedPtr pDst, const uint4& srcRect, const uint4& dstRect, Sampler::Filter filter)\n  419      {\n  420:         auto& blitData = sApiData.blitData;\n  421          blitData.pPass->getVars()->setSampler(\"gSampler\", (filter == Sampler::Filter::Linear) ? blitData.pLinearSampler : blitData.pPointSampler);\n  422  \n  ...\n  483      {\n  484          DXGI_FORMAT format = getDxgiFormat(pDst->getFormat());\n  485:         mpLowLevelData->getCommandList()->ResolveSubresource(pDst->getApiHandle(), dstSubresource, pSrc->getApiHandle(), srcSubresource, format);\n  486          mCommandsPending = true;\n  487      }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Resource.cpp:\n  118              return D3D12_RESOURCE_STATE_RESOLVE_SOURCE;\n  119          case Resource::State::ShaderResource:\n  120:             return D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE; // TODO: Need the shader usage mask to set state more optimally\n  121          case Resource::State::StreamOut:\n  122              return D3D12_RESOURCE_STATE_STREAM_OUT;\n  ...\n  125          case Resource::State::GenericRead:\n  126              return D3D12_RESOURCE_STATE_GENERIC_READ;\n  127:         case Resource::State::PixelShader:\n  128:             return D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;\n  129:         case Resource::State::NonPixelShader:\n  130:             return D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE;\n  131          case Resource::State::AccelerationStructure:\n  132              return D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE;\n  ...\n  137      }\n  138  \n  139:     void Resource::apiSetName()\n  140      {\n  141          std::wstring ws = string_2_wstring(mName);\n  142:         mApiHandle->SetName(ws.c_str());\n  143      }\n  144  \n  145  \n  146:     SharedResourceApiHandle Resource::createSharedApiHandle()\n  147      {\n  148:         ID3D12DevicePtr pDevicePtr = gpDevice->getApiHandle();\n  149          auto s = string_2_wstring(mName);\n  150:         SharedResourceApiHandle pHandle;\n  151  \n  152:         HRESULT res = pDevicePtr->CreateSharedHandle(mApiHandle, 0, GENERIC_ALL, s.c_str(), &pHandle);\n  153          if (res == S_OK) return pHandle;\n  154          else return nullptr;\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Resource.h:\n   27   **************************************************************************/\n   28  #pragma once\n   29: #include \"Core/API/Resource.h\"\n   30  \n   31  namespace Falcor\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/ResourceViews.h\"\n   30: #include \"Core/API/Texture.h\"\n   31: #include \"Core/API/Buffer.h\"\n   32: #include \"Core/API/Device.h\"\n   33  \n   34  namespace Falcor\n   ..\n   74          desc.Buffer.NumElements = useDefaultCount ? (bufferElementCount - firstElement) : elementCount;\n   75  \n   76:         desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;\n   77          desc.ViewDimension = D3D12_SRV_DIMENSION_BUFFER;\n   78  \n   ..\n  152          }\n  153  \n  154:         desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;\n  155          return desc;\n  156      }\n  ...\n  271      }\n  272  \n  273:     ShaderResourceView::ApiHandle createSrvDescriptor(const D3D12_SHADER_RESOURCE_VIEW_DESC& desc, Resource::ApiHandle resHandle)\n  274      {\n  275          DescriptorSet::Layout layout;\n  276          layout.addRange(DescriptorSet::Type::TextureSrv, 0, 1);\n  277:         ShaderResourceView::ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  278:         gpDevice->getApiHandle()->CreateShaderResourceView(resHandle, &desc, handle->getCpuHandle(0));\n  279  \n  280          return handle;\n  ...\n  286  \n  287          D3D12_SHADER_RESOURCE_VIEW_DESC desc;\n  288:         Resource::ApiHandle resHandle = nullptr;\n  289          if(pTexture)\n  290          {\n  291              desc = createTextureSrvDesc(pTexture.get(), firstArraySlice, arraySize, mostDetailedMip, mipCount);\n  292:             resHandle = pTexture->getApiHandle();\n  293          }\n  294          else\n  ...\n  297              desc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;\n  298              desc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;\n  299:             desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;\n  300          }\n  301  \n  ...\n  309  \n  310          D3D12_SHADER_RESOURCE_VIEW_DESC desc;\n  311:         Resource::ApiHandle resHandle = nullptr;\n  312          if (pBuffer)\n  313          {\n  314              desc = createBufferSrvDesc(pBuffer.get(), firstElement, elementCount);\n  315:             resHandle = pBuffer->getApiHandle();\n  316          }\n  317          else\n  ...\n  320              desc.Format = DXGI_FORMAT_UNKNOWN;\n  321              desc.ViewDimension = D3D12_SRV_DIMENSION_BUFFER;\n  322:             desc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;\n  323          }\n  324  \n  ...\n  332  \n  333          D3D12_DEPTH_STENCIL_VIEW_DESC desc;\n  334:         Resource::ApiHandle resHandle = nullptr;\n  335          if(pTexture)\n  336          {\n  337              desc = createDsvDesc(pTexture.get(), mipLevel, firstArraySlice, arraySize);\n  338:             resHandle = pTexture->getApiHandle();\n  339          }\n  340          else\n  ...\n  347          DescriptorSet::Layout layout;\n  348          layout.addRange(DescriptorSet::Type::Dsv, 0, 1);\n  349:         ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  350:         gpDevice->getApiHandle()->CreateDepthStencilView(resHandle, &desc, handle->getCpuHandle(0));\n  351  \n  352          return SharedPtr(new DepthStencilView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  353      }\n  354  \n  355:     UnorderedAccessView::ApiHandle createUavDescriptor(const D3D12_UNORDERED_ACCESS_VIEW_DESC& desc, Resource::ApiHandle resHandle, Resource::ApiHandle counterHandle)\n  356      {\n  357          DescriptorSet::Layout layout;\n  358          layout.addRange(DescriptorSet::Type::TextureUav, 0, 1);\n  359:         UnorderedAccessView::ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  360:         gpDevice->getApiHandle()->CreateUnorderedAccessView(resHandle, counterHandle, &desc, handle->getCpuHandle(0));\n  361          return handle;\n  362      }\n  ...\n  367  \n  368          D3D12_UNORDERED_ACCESS_VIEW_DESC desc;\n  369:         Resource::ApiHandle resHandle = nullptr;\n  370  \n  371          if(pTexture != nullptr)\n  372          {\n  373              desc = createDsvRtvUavDescCommon<D3D12_UNORDERED_ACCESS_VIEW_DESC, true>(pTexture.get(), mipLevel, firstArraySlice, arraySize);\n  374:             resHandle = pTexture->getApiHandle();\n  375          }\n  376          else\n  ...\n  389  \n  390          D3D12_UNORDERED_ACCESS_VIEW_DESC desc;\n  391:         Resource::ApiHandle resHandle = nullptr;\n  392:         Resource::ApiHandle counterHandle = nullptr;\n  393  \n  394          if (pBuffer != nullptr)\n  395          {\n  396              desc = createBufferUavDesc(pBuffer.get(), firstElement, elementCount);\n  397:             resHandle = pBuffer->getApiHandle();\n  398  \n  399              if (pBuffer->getUAVCounter())\n  400              {\n  401:                 counterHandle = pBuffer->getUAVCounter()->getApiHandle();\n  402              }\n  403          }\n  ...\n  419  \n  420          D3D12_RENDER_TARGET_VIEW_DESC desc;\n  421:         Resource::ApiHandle resHandle = nullptr;\n  422          if(pTexture)\n  423          {\n  424              desc = createRtvDesc(pTexture.get(), mipLevel, firstArraySlice, arraySize);\n  425:             resHandle = pTexture->getApiHandle();\n  426          }\n  427          else\n  ...\n  434          DescriptorSet::Layout layout;\n  435          layout.addRange(DescriptorSet::Type::Rtv, 0, 1);\n  436:         ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  437:         gpDevice->getApiHandle()->CreateRenderTargetView(resHandle, &desc, handle->getCpuHandle(0));\n  438  \n  439          SharedPtr pObj = SharedPtr(new RenderTargetView(pTexture, handle, mipLevel, firstArraySlice, arraySize));\n  ...\n  446  \n  447          D3D12_CONSTANT_BUFFER_VIEW_DESC desc;\n  448:         Resource::ApiHandle resHandle = nullptr;\n  449          if (pBuffer)\n  450          {\n  451              desc.BufferLocation = pBuffer->getGpuAddress();\n  452              desc.SizeInBytes = (uint32_t)pBuffer->getSize();\n  453:             resHandle = pBuffer->getApiHandle();\n  454          }\n  455          else\n  ...\n  460          DescriptorSet::Layout layout;\n  461          layout.addRange(DescriptorSet::Type::Cbv, 0, 1);\n  462:         ApiHandle handle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  463:         gpDevice->getApiHandle()->CreateConstantBufferView(&desc, handle->getCpuHandle(0));\n  464  \n  465          SharedPtr pObj = SharedPtr(new ConstantBufferView(pBuffer, handle));\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12RootSignature.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/RootSignature.h\"\n   30  #include \"D3D12State.h\"\n   31: #include \"Core/API/Device.h\"\n   32  \n   33  namespace Falcor\n   34  {\n   35:     void RootSignature::apiInit()\n   36      {\n   37          // Get vector of root parameters\n   ..\n   69          }\n   70  \n   71:         createApiHandle(pSigBlob);\n   72      }\n   73  \n   74:     void RootSignature::createApiHandle(ID3DBlobPtr pSigBlob)\n   75      {\n   76:         Device::ApiHandle pDevice = gpDevice->getApiHandle();\n   77:         d3d_call(pDevice->CreateRootSignature(0, pSigBlob->GetBufferPointer(), pSigBlob->GetBufferSize(), IID_PPV_ARGS(&mApiHandle)));\n   78      }\n   79  \n   80      template<bool forGraphics>\n   81:     static void bindRootSigCommon(CopyContext* pCtx, const RootSignature::ApiHandle& rootSig)\n   82      {\n   83          if (forGraphics)\n   ..\n   93      void RootSignature::bindForCompute(CopyContext* pCtx)\n   94      {\n   95:         bindRootSigCommon<false>(pCtx, mApiHandle);\n   96      }\n   97  \n   98      void RootSignature::bindForGraphics(CopyContext* pCtx)\n   99      {\n  100:         bindRootSigCommon<true>(pCtx, mApiHandle);\n  101      }\n  102  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Sampler.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/Sampler.h\"\n   30  #include \"D3D12State.h\"\n   31: #include \"Core/API/Device.h\"\n   32  \n   33  namespace Falcor\n   34  {\n   35:     uint32_t Sampler::getApiMaxAnisotropy()\n   36      {\n   37          return D3D12_MAX_MAXANISOTROPY;\n   ..\n   45          DescriptorSet::Layout layout;\n   46          layout.addRange(DescriptorSet::Type::Sampler, 0, 1);\n   47:         pSampler->mApiHandle = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n   48:         gpDevice->getApiHandle()->CreateSampler(&d3dDesc, pSampler->mApiHandle->getCpuHandle(0));\n   49  \n   50          return pSampler;\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Shader.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/Shader.h\"\n   30  #include \"Slang/slang.h\"\n   31  \n   ..\n   43          case ShaderType::Vertex:\n   44              return \"vs_\" + shaderModel;\n   45:         case ShaderType::Pixel:\n   46              return \"ps_\" + shaderModel;\n   47          case ShaderType::Hull:\n   ..\n   70      }\n   71  \n   72:     bool Shader::init(const Blob& shaderBlob, const std::string& entryPointName, CompilerFlags flags, std::string& log)\n   73      {\n   74:         // Compile the shader\n   75          ShaderData* pData = (ShaderData*)mpPrivateData;\n   76          pData->pBlob = shaderBlob.get();\n   ..\n   81          }\n   82  \n   83:         mApiHandle = { pData->pBlob->GetBufferPointer(), pData->pBlob->GetBufferSize() };\n   84          return true;\n   85      }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12State.cpp:\n   28  #include \"stdafx.h\"\n   29  #include \"D3D12State.h\"\n   30: #include \"Core/API/Sampler.h\"\n   31  #include \"glm/gtc/type_ptr.hpp\"\n   32  \n   ..\n  311      }\n  312  \n  313:     D3D12_FILTER getD3D12Filter(Sampler::Filter minFilter, Sampler::Filter magFilter, Sampler::Filter mipFilter, bool isComparison, bool isAnisotropic)\n  314      {\n  315          D3D12_FILTER filter;\n  316          D3D12_FILTER_REDUCTION_TYPE reduction = isComparison ? D3D12_FILTER_REDUCTION_TYPE_COMPARISON : D3D12_FILTER_REDUCTION_TYPE_STANDARD;\n  317  \n  318:         if (isAnisotropic)\n  319          {\n  320:             filter = D3D12_ENCODE_ANISOTROPIC_FILTER(reduction);\n  321          }\n  322          else\n  ...\n  378              return D3D12_SHADER_VISIBILITY_VERTEX;\n  379          }\n  380:         else if ((visibility & ShaderVisibility::Pixel) != ShaderVisibility::None)\n  381          {\n  382:             return D3D12_SHADER_VISIBILITY_PIXEL;\n  383          }\n  384          else if ((visibility & ShaderVisibility::Geometry) != ShaderVisibility::None)\n  ...\n  479          desc.Descriptor.RegisterSpace = rootDesc.spaceIndex;\n  480          desc.Descriptor.ShaderRegister = rootDesc.regIndex;\n  481:         desc.Descriptor.Flags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE; // TODO: Add user api for specifying volatility\n  482          desc.ShaderVisibility = getShaderVisibility(rootDesc.visibility);\n  483      }\n  ...\n  529      }\n  530  \n  531:     void initD3D12GraphicsStateDesc(const GraphicsStateObject::Desc& gsoDesc, D3D12_GRAPHICS_PIPELINE_STATE_DESC& desc, InputLayoutDesc& layoutDesc)\n  532      {\n  533          desc = {};\n  534          assert(gsoDesc.getProgramKernels());\n  535: #define get_shader_handle(_type) gsoDesc.getProgramKernels()->getShader(_type) ? gsoDesc.getProgramKernels()->getShader(_type)->getApiHandle() : D3D12_SHADER_BYTECODE{}\n  536          desc.VS = get_shader_handle(ShaderType::Vertex);\n  537:         desc.PS = get_shader_handle(ShaderType::Pixel);\n  538          desc.GS = get_shader_handle(ShaderType::Geometry);\n  539          desc.HS = get_shader_handle(ShaderType::Hull);\n  ...\n  549              initD3D12VertexLayout(gsoDesc.getVertexLayout().get(), layoutDesc);\n  550              desc.InputLayout.NumElements = (uint32_t)layoutDesc.elements.size();\n  551:             desc.InputLayout.pInputElementDescs = layoutDesc.elements.data();\n  552          }\n  553          desc.SampleMask = gsoDesc.getSampleMask();\n  554:         desc.pRootSignature = gsoDesc.getRootSignature() ? gsoDesc.getRootSignature()->getApiHandle() : nullptr;\n  555  \n  556          uint32_t numRtvs = 0;\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12State.h:\n   28  #pragma  once\n   29  #include <vector>\n   30: #include \"Core/API/RootSignature.h\"\n   31: #include \"Core/API/VAO.h\"\n   32: #include \"Core/API/GraphicsStateObject.h\"\n   33  \n   34  namespace Falcor\n   ..\n   52      void initD3D12VertexLayout(const VertexLayout* pLayout, InputLayoutDesc& inputDesc);\n   53      void initD3D12SamplerDesc(const Sampler* pSampler, D3D12_SAMPLER_DESC& desc);\n   54:     void initD3D12GraphicsStateDesc(const GraphicsStateObject::Desc& gsoDesc, D3D12_GRAPHICS_PIPELINE_STATE_DESC& desc, InputLayoutDesc& layoutDesc);\n   55  \n   56      struct RootSignatureParams\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Texture.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/Texture.h\"\n   30: #include \"Core/API/Device.h\"\n   31  #include \"D3D12Resource.h\"\n   32  \n   ..\n   95      }\n   96  \n   97:     void Texture::apiInit(const void* pData, bool autoGenMips)\n   98      {\n   99          D3D12_RESOURCE_DESC desc = {};\n  ...\n  143  \n  144          D3D12_HEAP_FLAGS heapFlags = is_set(mBindFlags, ResourceBindFlags::Shared) ? D3D12_HEAP_FLAG_SHARED : D3D12_HEAP_FLAG_NONE;\n  145:         d3d_call(gpDevice->getApiHandle()->CreateCommittedResource(&kDefaultHeapProps, heapFlags, &desc, D3D12_RESOURCE_STATE_COMMON, pClearVal, IID_PPV_ARGS(&mApiHandle)));\n  146  \n  147          if (pData)\n  ...\n  153      Texture::~Texture()\n  154      {\n  155:         gpDevice->releaseResource(mApiHandle);\n  156      }\n  157  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/D3D12Vao.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/VAO.h\"\n   30  \n   31  namespace Falcor\n   32  {\n   33:     const VaoHandle& Vao::getApiHandle() const\n   34      {\n   35:         UNSUPPORTED_IN_D3D12(\"VAO doesn't have an API handle\");\n   36:         return mApiHandle;\n   37      }\n   38  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n   29  #define NOMINMAX\n   30  #include <d3d12.h>\n   31: #include \"Core/API/Formats.h\"\n   32  #include <comdef.h>\n   33  #include <dxgi1_4.h>\n   ..\n  189      MAKE_SMART_COM_PTR(ID3D12Resource);\n  190      MAKE_SMART_COM_PTR(ID3D12Fence);\n  191:     MAKE_SMART_COM_PTR(ID3D12PipelineState);\n  192      MAKE_SMART_COM_PTR(ID3D12RootSignature);\n  193      MAKE_SMART_COM_PTR(ID3D12QueryHeap);\n  ...\n  195      MAKE_SMART_COM_PTR(IUnknown);\n  196  \n  197:     using ApiObjectHandle = IUnknownPtr;\n  198  \n  199      using HeapCpuHandle = D3D12_CPU_DESCRIPTOR_HANDLE;\n  ...\n  206      using CommandListHandle = ID3D12GraphicsCommandListPtr;\n  207      using CommandQueueHandle = ID3D12CommandQueuePtr;\n  208:     using ApiCommandQueueType = D3D12_COMMAND_LIST_TYPE;\n  209      using CommandAllocatorHandle = ID3D12CommandAllocatorPtr;\n  210      using CommandSignatureHandle = ID3D12CommandSignaturePtr;\n  ...\n  220      using GpuAddress = D3D12_GPU_VIRTUAL_ADDRESS;\n  221      using QueryHeapHandle = ID3D12QueryHeapPtr;\n  222:     using SharedResourceApiHandle = HANDLE;\n  223  \n  224:     using GraphicsStateHandle = ID3D12PipelineStatePtr;\n  225:     using ComputeStateHandle = ID3D12PipelineStatePtr;\n  226      using ShaderHandle = D3D12_SHADER_BYTECODE;\n  227      using RootSignatureHandle = ID3D12RootSignaturePtr;\n  ...\n  239      using RasterizerStateHandle = void*;\n  240      using BlendStateHandle = void*;\n  241:     using DescriptorSetApiHandle = void*;\n  242  \n  243:     inline constexpr uint32_t getMaxViewportCount() { return D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE; }\n  244  \n  245      /*! @} */\n\n/home/max/dev/Lava/src/Falcor/Core/API/DepthStencilState.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Core/API/DepthStencilState.h\"\n   30  \n   31  namespace Falcor\n\n/home/max/dev/Lava/src/Falcor/Core/API/DepthStencilState.h:\n  176          uint8_t getStencilRef() const { return mDesc.mStencilRef; }\n  177  \n  178:         /** Get the API handle\n  179          */\n  180:         const DepthStencilStateHandle& getApiHandle() const;\n  181  \n  182      private:\n  183:         DepthStencilStateHandle mApiHandle;\n  184          DepthStencilState(const Desc& Desc) : mDesc(Desc) {}\n  185          Desc mDesc;\n\n/home/max/dev/Lava/src/Falcor/Core/API/DescriptorPool.cpp:\n   36  \n   37  DescriptorPool::DescriptorPool(std::shared_ptr<Device> pDevice, const Desc& desc, const GpuFence::SharedPtr& pFence): mDesc(desc), mpFence(pFence), mpDevice(pDevice) {\n   38:     apiInit();\n   39  }\n   40  \n   ..\n   48  }\n   49  \n   50: void DescriptorPool::releaseAllocation(std::shared_ptr<DescriptorSetApiData> pData) {\n   51      DeferredRelease d;\n   52      d.pData = pData;\n\n/home/max/dev/Lava/src/Falcor/Core/API/DescriptorPool.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_DESCRIPTORPOOL_H_\n   29: #define SRC_FALCOR_CORE_API_DESCRIPTORPOOL_H_\n   30  \n   31  #include <queue>\n   32  \n   33  #include \"Falcor/Core/Framework.h\"\n   34: #include \"Falcor/Core/API/GpuFence.h\"\n   35  \n   36  \n   ..\n   40  class DescriptorSet;\n   41  \n   42: struct DescriptorPoolApiData;\n   43: struct DescriptorSetApiData;\n   44  \n   45  class dlldecl DescriptorPool : public std::enable_shared_from_this<DescriptorPool> {\n   ..\n   47      using SharedPtr = std::shared_ptr<DescriptorPool>;\n   48      using SharedConstPtr = std::shared_ptr<const DescriptorPool>;\n   49:     using ApiHandle = DescriptorHeapHandle;\n   50      using CpuHandle = HeapCpuHandle;\n   51      using GpuHandle = HeapGpuHandle;\n   52:     using ApiData = DescriptorPoolApiData;\n   53  \n   54      ~DescriptorPool();\n   ..\n  103      uint32_t getTotalDescCount() const { return mDesc.mTotalDescCount; }\n  104      bool isShaderVisible() const { return mDesc.mShaderVisible; }\n  105:     const ApiHandle& getApiHandle(uint32_t heapIndex) const;\n  106:     const ApiData* getApiData() const { return mpApiData.get(); }\n  107      void executeDeferredReleases();\n  108  \n  ...\n  110      friend DescriptorSet;\n  111      DescriptorPool(std::shared_ptr<Device> pDevice, const Desc& desc, const GpuFence::SharedPtr & pFence);\n  112:     void apiInit();\n  113:     void releaseAllocation(std::shared_ptr<DescriptorSetApiData> pData);\n  114      Desc mDesc;\n  115:     std::shared_ptr<ApiData> mpApiData;\n  116      GpuFence::SharedPtr mpFence;\n  117      std::shared_ptr<Device> mpDevice;\n  118  \n  119      struct DeferredRelease {\n  120:         std::shared_ptr<DescriptorSetApiData> pData;\n  121          uint64_t fenceValue;\n  122          bool operator>(const DeferredRelease& other) const { return fenceValue > other.fenceValue; }\n  ...\n  153  }  // namespace Falcor\n  154  \n  155: #endif  // SRC_FALCOR_CORE_API_DESCRIPTORPOOL_H_\n  156  \n\n/home/max/dev/Lava/src/Falcor/Core/API/DescriptorSet.cpp:\n   38  \n   39  DescriptorSet::DescriptorSet(std::shared_ptr<Device> pDevice, DescriptorPool::SharedPtr pPool, const Layout& layout) : mpPool(pPool), mLayout(layout), mpDevice(pDevice) {\n   40:     apiInit();\n   41  }\n   42  \n   43  DescriptorSet::~DescriptorSet() {\n   44:     mpPool->releaseAllocation(mpApiData);\n   45  }\n   46  \n\n/home/max/dev/Lava/src/Falcor/Core/API/DescriptorSet.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_DESCRIPTORSET_H_\n   29: #define SRC_FALCOR_CORE_API_DESCRIPTORSET_H_\n   30  \n   31  #include <vector>\n   ..\n   48      None = 0,\n   49      Vertex = (1 << (uint32_t)ShaderType::Vertex),\n   50:     Pixel = (1 << (uint32_t)ShaderType::Pixel),\n   51      Hull = (1 << (uint32_t)ShaderType::Hull),\n   52      Domain = (1 << (uint32_t)ShaderType::Domain),\n   ..\n   65      using CpuHandle = DescriptorPool::CpuHandle;\n   66      using GpuHandle = DescriptorPool::GpuHandle;\n   67:     using ApiHandle = DescriptorSetApiHandle;\n   68:     using ApiData = DescriptorSetApiData;\n   69  \n   70      ~DescriptorSet();\n   ..\n  102      CpuHandle getCpuHandle(uint32_t rangeIndex, uint32_t descInRange = 0) const;\n  103      GpuHandle getGpuHandle(uint32_t rangeIndex, uint32_t descInRange = 0) const;\n  104:     const ApiHandle& getApiHandle() const { return mApiHandle; }\n  105:     const ApiData* getApiData() const { return mpApiData.get(); }\n  106  \n  107      void setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv);\n  ...\n  115   private:\n  116      DescriptorSet(std::shared_ptr<Device> pDevice, DescriptorPool::SharedPtr pPool, const Layout& layout);\n  117:     void apiInit();\n  118  \n  119      Layout mLayout;\n  120:     std::shared_ptr<ApiData> mpApiData;\n  121      DescriptorPool::SharedPtr mpPool;\n  122:     ApiHandle mApiHandle = {};\n  123  \n  124      std::shared_ptr<Device> mpDevice;\n  ...\n  130          type_2_string(None);\n  131          type_2_string(Vertex);\n  132:         type_2_string(Pixel);\n  133          type_2_string(Hull);\n  134          type_2_string(Domain);\n  ...\n  145  }  // namespace Falcor\n  146  \n  147: #endif  // SRC_FALCOR_CORE_API_DESCRIPTORSET_H_\n  148  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Device.cpp:\n  104      const uint32_t kDirectQueueIndex = (uint32_t)LowLevelContextData::CommandQueueType::Direct;\n  105      assert(mDesc.cmdQueues[kDirectQueueIndex] > 0);\n  106:     if (apiInit() == false) return false;\n  107  \n  108      // Create the descriptor pools\n  ...\n  182  \n  183  bool Device::updateOffscreenFBO(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat) {\n  184:     ResourceHandle apiHandle;\n  185:     getApiFboData(width, height, colorFormat, depthFormat, apiHandle);\n  186  \n  187      // Create a texture object\n  188      auto pColorTex = Texture::SharedPtr(new Texture(shared_from_this(), width, height, 1, 1, 1, 1, colorFormat, Texture::Type::Texture2D, Texture::BindFlags::RenderTarget));\n  189:     pColorTex->mApiHandle = apiHandle;\n  190      \n  191      // Create the FBO if it's required\n  ...\n  207      }\n  208  \n  209:     ResourceHandle apiHandles[kSwapChainBuffersCount] = {};\n  210:     getApiFboData(width, height, colorFormat, depthFormat, apiHandles, mCurrentBackBufferIndex);\n  211  \n  212      for (uint32_t i = 0; i < kSwapChainBuffersCount; i++) {\n  213          // Create a texture object\n  214          auto pColorTex = Texture::SharedPtr(new Texture(shared_from_this(), width, height, 1, 1, 1, 1, colorFormat, Texture::Type::Texture2D, Texture::BindFlags::RenderTarget));\n  215:         pColorTex->mApiHandle = apiHandles[i];\n  216          // Create the FBO if it's required\n  217          if (mpSwapChainFbos[i] == nullptr) mpSwapChainFbos[i] = Fbo::create(shared_from_this());\n  ...\n  247  }\n  248  \n  249: void Device::releaseResource(ApiObjectHandle pResource) {\n  250      if (pResource) {\n  251          // Some static objects get here when the application exits\n  ...\n  304      for (auto& heap : mTimestampQueryHeaps) heap.reset();\n  305  \n  306:     destroyApiObjects();\n  307      \n  308      if(!headless)\n  ...\n  314      mpRenderContext->resourceBarrier(mpSwapChainFbos[mCurrentBackBufferIndex]->getColorTexture(0).get(), Resource::State::Present);\n  315      mpRenderContext->flush();\n  316:     apiPresent();\n  317      mpFrameFence->gpuSignal(mpRenderContext->getLowLevelData()->getCommandQueue());\n  318      if (mpFrameFence->getCpuValue() >= kSwapChainBuffersCount) {\n  ...\n  346          // Delete all the FBOs\n  347          releaseFboData();\n  348:         apiResizeOffscreenFBO(width, height, colorFormat);\n  349          updateOffscreenFBO(width, height, colorFormat, depthFormat);\n  350  \n  ...\n  383      // Delete all the FBOs\n  384      releaseFboData();\n  385:     apiResizeSwapChain(width, height, colorFormat);\n  386      updateDefaultFBO(width, height, colorFormat, depthFormat);\n  387  \n  ...\n  400  \n  401  #if !defined(FALCOR_D3D12) && !defined(FALCOR_VK)\n  402: #error Verify state handling on swapchain resize for this API\n  403  #endif\n  404  \n  ...\n  411      deviceDesc.field(colorFormat);\n  412      deviceDesc.field(depthFormat);\n  413:     deviceDesc.field(apiMajorVersion);\n  414:     deviceDesc.field(apiMinorVersion);\n  415      deviceDesc.field(enableVsync);\n  416      deviceDesc.field(enableDebugLayer);\n\n/home/max/dev/Lava/src/Falcor/Core/API/Device.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_DEVICE_H_\n   29: #define SRC_FALCOR_CORE_API_DEVICE_H_\n   30  \n   31  #include <list>\n   ..\n   37  \n   38  #include \"Falcor/Core/Window.h\"\n   39: //#include \"Falcor/Core/API/Texture.h\"\n   40: //#include \"Falcor/Core/API/FBO.h\"\n   41: #include \"Falcor/Core/API/RenderContext.h\"\n   42: #include \"Falcor/Core/API/LowLevelContextData.h\"\n   43: #include \"Falcor/Core/API/DescriptorPool.h\"\n   44: #include \"Falcor/Core/API/GpuMemoryHeap.h\"\n   45: #include \"Falcor/Core/API/QueryHeap.h\"\n   46  \n   47  namespace Falcor {\n   ..\n   53  //#endif\n   54  \n   55: struct DeviceApiData;\n   56  \n   57  class DeviceManager;\n   ..\n   62      using SharedPtr = std::shared_ptr<Device>;\n   63      using SharedConstPtr = std::shared_ptr<const Device>;\n   64:     using ApiHandle = DeviceHandle;\n   65      using DeviceLocalUID = uint32_t;\n   66      \n   ..\n   74          ResourceFormat colorFormat = ResourceFormat::BGRA8UnormSrgb;    ///< The color buffer format\n   75          ResourceFormat depthFormat = ResourceFormat::D32Float;          ///< The depth buffer format\n   76:         uint32_t apiMajorVersion = 0;                                   ///< Requested API major version. If specified, device creation will fail if not supported. Otherwise, the highest supported version will be automatically selected.\n   77:         uint32_t apiMinorVersion = 0;                                   ///< Requested API minor version. If specified, device creation will fail if not supported. Otherwise, the highest supported version will be automatically selected.\n   78          bool enableVsync = false;                                       ///< Controls vertical-sync\n   79          bool enableDebugLayer = DEFAULT_ENABLE_DEBUG_LAYER;             ///< Enable the debug layer. The default for release build is false, for debug build it's true.\n   ..\n  129  \n  130      /** Get the FBO object associated with the swap-chain.\n  131:         This can change each frame, depending on the API used\n  132      */\n  133      Fbo::SharedPtr getSwapChainFbo() const;\n  134  \n  135      /** Get the FBO object used for headless rendering.\n  136:         This can change each frame, depending on the API used\n  137      */\n  138      Fbo::SharedPtr getOffscreenFbo() const;\n  ...\n  147      CommandQueueHandle getCommandQueueHandle(LowLevelContextData::CommandQueueType type, uint32_t index) const;\n  148  \n  149:     /** Get the API queue type.\n  150:         \\return API queue type, or throws an exception if type is unknown.\n  151      */\n  152:     ApiCommandQueueType getApiCommandQueueType(LowLevelContextData::CommandQueueType type) const;\n  153  \n  154:     /** Get the native API handle\n  155      */\n  156:     const DeviceHandle& getApiHandle() { return mApiHandle; }\n  157  \n  158      /** Present the back-buffer to the window\n  ...\n  160      void present();\n  161  \n  162:     /** Flushes pipeline, releases resources, and blocks until completion\n  163      */\n  164      void flushAndSync();\n  ...\n  191      const DescriptorPool::SharedPtr& getGpuDescriptorPool() const { return mpGpuDescPool; }\n  192      const GpuMemoryHeap::SharedPtr& getUploadHeap() const { return mpUploadHeap; }\n  193:     void releaseResource(ApiObjectHandle pResource);\n  194      double getGpuTimestampFrequency() const { return mGpuTimestampFrequency; }  // ms/tick\n  195  \n  ...\n  216  #endif\n  217  \n  218:     DeviceApiData* apiData() const { return mpApiData; };\n  219  \n  220   private:\n  ...\n  223      struct ResourceRelease {\n  224          size_t frameID;\n  225:         ApiObjectHandle pApiObject;\n  226      };\n  227  \n  ...\n  244  \n  245      Desc mDesc;\n  246:     ApiHandle mApiHandle;\n  247      GpuMemoryHeap::SharedPtr mpUploadHeap;\n  248      DescriptorPool::SharedPtr mpCpuDescPool;\n  ...\n  252  \n  253      Window::SharedPtr mpWindow;\n  254:     DeviceApiData* mpApiData;\n  255      RenderContext::SharedPtr mpRenderContext;\n  256      size_t mFrameID = 0;\n  ...\n  263      SupportedFeatures mSupportedFeatures = SupportedFeatures::None;\n  264  \n  265:     // API specific functions\n  266:     bool getApiFboData(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat, ResourceHandle &apiHandle);\n  267:     bool getApiFboData(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat, ResourceHandle apiHandles[kSwapChainBuffersCount], uint32_t& currentBackBufferIndex);\n  268:     void destroyApiObjects();\n  269:     void apiPresent();\n  270:     bool apiInit();\n  271  \n  272      bool createSwapChain(ResourceFormat colorFormat);\n  273      bool createOffscreenFBO(ResourceFormat colorFormat);\n  274  \n  275:     void apiResizeSwapChain(uint32_t width, uint32_t height, ResourceFormat colorFormat);\n  276:     void apiResizeOffscreenFBO(uint32_t width, uint32_t height, ResourceFormat colorFormat);\n  277  \n  278      void toggleFullScreen(bool fullscreen);\n  ...\n  316  }  // namespace Falcor\n  317  \n  318: #endif  // SRC_FALCOR_CORE_API_DEVICE_H_\n  319  \n\n/home/max/dev/Lava/src/Falcor/Core/API/DeviceManager.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_DEVICEMANAGER_H_\n   29: #define SRC_FALCOR_CORE_API_DEVICEMANAGER_H_\n   30  \n   31  #include <list>\n   ..\n   37  #include <unordered_map>\n   38  \n   39: #include \"Falcor/Core/API/Device.h\"\n   40  \n   41  namespace Falcor {\n   ..\n  101  }  // namespace Falcor\n  102  \n  103: #endif  // SRC_FALCOR_CORE_API_DEVICEMANAGER_H_\n  104  \n\n/home/max/dev/Lava/src/Falcor/Core/API/FBO.cpp:\n  303          // In case there are sample positions, make sure they are valid\n  304          if (mSamplePositions.size()) {\n  305:             uint32_t expectedCount = mSamplePositionsPixelCount * mTempDesc.getSampleCount();\n  306              if (expectedCount != mSamplePositions.size()) {\n  307                  logError(\"Error when validating FBO. The sample-positions array-size has the wrong size.\\n\");\n  ...\n  333                  throw std::runtime_error(\"Can't finalize FBO. Invalid frame buffer object.\");\n  334              }\n  335:             initApiHandle();\n  336          }\n  337      }\n  338  \n  339:     void Fbo::setSamplePositions(uint32_t samplesPerPixel, uint32_t pixelCount, const SamplePosition positions[]) {\n  340          if (positions) {\n  341:             mSamplePositions = std::vector<SamplePosition>(positions, positions + (samplesPerPixel * pixelCount));\n  342:             mSamplePositionsPixelCount = pixelCount;\n  343          } else {\n  344:             mSamplePositionsPixelCount = 0;\n  345              mSamplePositions.clear();\n  346          }\n\n/home/max/dev/Lava/src/Falcor/Core/API/FBO.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_FBO_H_\n   29: #define SRC_FALCOR_CORE_API_FBO_H_\n   30  \n   31  #include <unordered_set>\n   32  \n   33: #include \"Falcor/Core/API/Texture.h\"\n   34: #include \"Falcor/Core/API/ResourceViews.h\"\n   35  \n   36  namespace Falcor {\n   ..\n   39  \n   40  /** Low level framebuffer object.\n   41:     This class abstracts the API's framebuffer creation and management.\n   42  */\n   43  class dlldecl Fbo : public std::enable_shared_from_this<Fbo> {\n   ..\n   45      using SharedPtr = std::shared_ptr<Fbo>;\n   46      using SharedConstPtr = std::shared_ptr<const Fbo>;\n   47:     using ApiHandle = FboHandle;\n   48  \n   49      class dlldecl Desc {\n   ..\n  120      static const uint32_t kAttachEntireMipLevel = uint32_t(-1);\n  121  \n  122:     /** Destructor. Releases the API object\n  123      */\n  124      ~Fbo();\n  ...\n  188      void attachColorTarget(const Texture::SharedPtr& pColorTexture, uint32_t rtIndex, uint32_t mipLevel = 0, uint32_t firstArraySlice = 0, uint32_t arraySize = kAttachEntireMipLevel);\n  189  \n  190:     /** Get the object's API handle.      \n  191      */\n  192:     const ApiHandle& getApiHandle() const;\n  193  \n  194      /** Get the maximum number of color targets\n  ...\n  234  \n  235      /**  Configure the sample positions used by multi-sampled buffers.\n  236:         \\param[in] samplesPerPixel The number of samples-per-pixel. This value has to match the FBO's sample count\n  237:         \\param[in] pixelCount the number if pixels the sample pattern is specified for\n  238:         \\param[in] positions The sample positions. (0,0) is a pixel's center. The size of this array should be samplesPerPixel*pixelCount\n  239          To reset the positions to their original location pass `nullptr` for positions\n  240      */\n  241:     void setSamplePositions(uint32_t samplesPerPixel, uint32_t pixelCount, const SamplePosition positions[]);\n  242  \n  243      /** Get the sample positions\n  ...\n  245      const std::vector<SamplePosition> getSamplePositions() const { return mSamplePositions; }\n  246  \n  247:     /** Get the number of pixels the sample positions are configured for\n  248      */\n  249:     uint32_t getSamplePositionsPixelCount() const { return mSamplePositionsPixelCount; }\n  250  \n  251      struct Attachment {\n  ...\n  268      void applyColorAttachment(uint32_t rtIndex);\n  269      void applyDepthAttachment();\n  270:     void initApiHandle() const;\n  271  \n  272      /** Validates that the framebuffer attachments are OK. Throws an exception on error.\n  ...\n  278      std::vector<Attachment> mColorAttachments;\n  279      std::vector<SamplePosition> mSamplePositions;\n  280:     uint32_t mSamplePositionsPixelCount = 0;\n  281  \n  282      Attachment mDepthStencil;\n  ...\n  291      mutable bool mIsZeroAttachment = false;\n  292  \n  293:     mutable ApiHandle mApiHandle = {};\n  294      void* mpPrivateData = nullptr;\n  295  \n  ...\n  299  }  // namespace Falcor\n  300  \n  301: #endif  // SRC_FALCOR_CORE_API_FBO_H_\n  302  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Formats.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_FORMATS_H_\n   29: #define SRC_FALCOR_CORE_API_FORMATS_H_\n   30  \n   31  #include <cstdint>\n   ..\n   45      */\n   46  \n   47:     /** These flags are hints the driver to what pipeline stages the resource will be bound to.\n   48  */\n   49      enum class ResourceBindFlags : uint32_t {\n   50:         None = 0x0,             ///< The resource will not be bound the pipeline. Use this to create a staging resource\n   51          Vertex = 0x1,           ///< The resource will be bound as a vertex-buffer\n   52          Index = 0x2,            ///< The resource will be bound as a index-buffer\n   ..\n  209      }\n  210  \n  211:     inline uint32_t getFormatPixelsPerBlock(ResourceFormat format) {\n  212          assert(kFormatDesc[(uint32_t)format].format == format);\n  213          return kFormatDesc[(uint32_t)format].compressionRatio.width * kFormatDesc[(uint32_t)format].compressionRatio.height;\n  ...\n  420  }  // namespace Falcor\n  421  \n  422: #endif  // SRC_FALCOR_CORE_API_FORMATS_H_\n  423  \n\n/home/max/dev/Lava/src/Falcor/Core/API/GpuFence.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_GPUFENCE_H_\n   29: #define SRC_FALCOR_CORE_API_GPUFENCE_H_\n   30  \n   31  #include <optional>\n   ..\n   36  \n   37  \n   38: struct FenceApiData;\n   39  \n   40  class Device;\n   ..\n   47      using SharedPtr = std::shared_ptr<GpuFence>;\n   48      using SharedConstPtr = std::shared_ptr<const GpuFence>;\n   49:     using ApiHandle = FenceHandle;\n   50      ~GpuFence();\n   51  \n   ..\n   55      static SharedPtr create(std::shared_ptr<Device> device);\n   56  \n   57:     /** Get the internal API handle\n   58      */\n   59:     const ApiHandle& getApiHandle() const;// { return mApiHandle; }\n   60  \n   61      /** Get the last value the GPU has signaled\n   ..\n   82      uint64_t mCpuValue;\n   83  \n   84:     ApiHandle mApiHandle;\n   85:     FenceApiData* mpApiData = nullptr;\n   86      std::shared_ptr<Device> mpDevice;\n   87  };\n   ..\n   89  }  // namespace Falcor\n   90  \n   91: #endif  // SRC_FALCOR_CORE_API_GPUFENCE_H_\n   92  \n\n/home/max/dev/Lava/src/Falcor/Core/API/GpuMemoryHeap.cpp:\n  117                      }\n  118                  }\n  119:                 // else it's a mega-page. Popping it will release the resource\n  120              }\n  121              mDeferredReleases.pop();\n\n/home/max/dev/Lava/src/Falcor/Core/API/GpuMemoryHeap.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_GPUMEMORYHEAP_H_\n   29: #define SRC_FALCOR_CORE_API_GPUMEMORYHEAP_H_\n   30  \n   31  #include <queue>\n   ..\n   34  \n   35  #include \"Falcor/Core/Framework.h\"\n   36: #include \"Falcor/Core/API/GpuFence.h\"\n   37  \n   38  namespace Falcor {\n   ..\n  109  }  // namespace Falcor\n  110  \n  111: #endif  // SRC_FALCOR_CORE_API_GPUMEMORYHEAP_H_\n  112  \n\n/home/max/dev/Lava/src/Falcor/Core/API/GpuTimer.cpp:\n   51      // Create timestamp query heap upon first use.\n   52      // We're allocating pairs of adjacent queries, so need our own heap to meet this requirement.\n   53:     if (spHeap.expired()) {\n   54          spHeap = device->createQueryHeap(QueryHeap::Type::Timestamp, 16 * 1024);\n   55      }\n   ..\n   82      }\n   83      mStatus = Status::Begin;\n   84:     apiBegin();\n   85  }\n   86  \n   ..\n   91      }\n   92      mStatus = Status::End;\n   93:     apiEnd();\n   94  }\n   95  \n   ..\n  101      } else if (mStatus == Status::End) {\n  102          uint64_t result[2];\n  103:         apiResolve(result);\n  104  \n  105          double start = (double)result[0];\n\n/home/max/dev/Lava/src/Falcor/Core/API/GpuTimer.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_GPUTIMER_H_\n   29: #define SRC_FALCOR_CORE_API_GPUTIMER_H_\n   30  \n   31: #include \"Falcor/Core/API/LowLevelContextData.h\"\n   32: #include \"Falcor/Core/API/QueryHeap.h\"\n   33: #include \"Falcor/Core/API/Buffer.h\"\n   34  \n   35  \n   ..\n   86      std::shared_ptr<Device> mpDevice;\n   87  \n   88:     void apiBegin();\n   89:     void apiEnd();\n   90:     void apiResolve(uint64_t result[2]);\n   91  \n   92  #ifdef FALCOR_D3D12\n   93:     Buffer::SharedPtr mpResolveBuffer; // Yes, I know it's against my policy to put API specific code in common headers, but it's not worth the complications\n   94  #endif\n   95  };\n   ..\n   97  }  // namespace Falcor\n   98  \n   99: #endif  // SRC_FALCOR_CORE_API_GPUTIMER_H_\n  100  \n  101  \n\n/home/max/dev/Lava/src/Falcor/Core/API/GraphicsStateObject.cpp:\n   28  #include \"stdafx.h\"\n   29  #include \"GraphicsStateObject.h\"\n   30: #include \"Core/API/Device.h\"\n   31  \n   32  namespace Falcor {\n   ..\n   67  \n   68  GraphicsStateObject::~GraphicsStateObject() {\n   69:     mpDevice->releaseResource(mApiHandle);\n   70  }\n   71  \n   ..\n   84      if (!mDesc.mpDepthStencilState) mDesc.mpDepthStencilState = spDefaultDepthStencilState;\n   85  \n   86:     apiInit();\n   87  }\n   88  \n\n/home/max/dev/Lava/src/Falcor/Core/API/GraphicsStateObject.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_GRAPHICSSTATEOBJECT_H_\n   29: #define SRC_FALCOR_CORE_API_GRAPHICSSTATEOBJECT_H_\n   30  \n   31: #include \"Falcor/Core/API/VertexLayout.h\"\n   32: #include \"Falcor/Core/API/FBO.h\"\n   33  #include \"Falcor/Core/Program/ProgramVersion.h\"\n   34: #include \"Falcor/Core/API/RasterizerState.h\"\n   35: #include \"Falcor/Core/API/DepthStencilState.h\"\n   36: #include \"Falcor/Core/API/BlendState.h\"\n   37: #include \"Falcor/Core/API/RootSignature.h\"\n   38: #include \"Falcor/Core/API/VAO.h\"\n   39  \n   40  \n   ..\n   48      using SharedPtr = std::shared_ptr<GraphicsStateObject>;\n   49      using SharedConstPtr = std::shared_ptr<const GraphicsStateObject>;\n   50:     using ApiHandle = GraphicsStateHandle;\n   51  \n   52      static const uint32_t kSampleMaskAll = -1;\n   ..\n  123      static SharedPtr create(std::shared_ptr<Device> pDevice, const Desc& desc);\n  124  \n  125:     const ApiHandle& getApiHandle() { return mApiHandle; }\n  126  \n  127      const Desc& getDesc() const { return mDesc; }\n  ...\n  129   private:\n  130      GraphicsStateObject(std::shared_ptr<Device> pDevice, const Desc& desc);\n  131:     void apiInit();\n  132  \n  133      Desc mDesc;\n  134:     ApiHandle mApiHandle;\n  135  \n  136      std::shared_ptr<Device> mpDevice;\n  ...\n  144  }  // namespace Falcor\n  145  \n  146: #endif  // SRC_FALCOR_CORE_API_GRAPHICSSTATEOBJECT_H_\n  147  \n\n/home/max/dev/Lava/src/Falcor/Core/API/LowLevelContextData.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_LOWLEVELCONTEXTDATA_H_\n   29: #define SRC_FALCOR_CORE_API_LOWLEVELCONTEXTDATA_H_\n   30  \n   31  #include <memory>\n   ..\n   37  \n   38  class Device;    \n   39: struct LowLevelContextApiData;\n   40  \n   41  class dlldecl LowLevelContextData : public std::enable_shared_from_this<LowLevelContextData> {\n   ..\n   66      const CommandAllocatorHandle& getCommandAllocator() const { return mpAllocator; }\n   67      const GpuFence::SharedPtr& getFence() const { return mpFence; }\n   68:     LowLevelContextApiData* getApiData() const { return mpApiData; }\n   69  \n   70  #ifdef FALCOR_D3D12\n   ..\n   76      LowLevelContextData(std::shared_ptr<Device> device, CommandQueueType type, CommandQueueHandle queue);\n   77  \n   78:     LowLevelContextApiData* mpApiData = nullptr;\n   79      CommandQueueType mType;\n   80      CommandListHandle mpList;\n   ..\n  101  }  // namespace Falcor\n  102  \n  103: #endif  // SRC_FALCOR_CORE_API_LOWLEVELCONTEXTDATA_H_\n  104  \n\n/home/max/dev/Lava/src/Falcor/Core/API/QueryHeap.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_QUERYHEAP_H_\n   29: #define SRC_FALCOR_CORE_API_QUERYHEAP_H_\n   30  \n   31  #include <deque>\n   ..\n   42   public:\n   43      using SharedPtr = std::shared_ptr<QueryHeap>;\n   44:     using ApiHandle = QueryHeapHandle;\n   45  \n   46      enum class Type {\n   47          Timestamp,\n   48          Occlusion,\n   49:         PipelineStats\n   50      };\n   51  \n   ..\n   59      static SharedPtr create(std::shared_ptr<Device> pDevice, Type type, uint32_t count) { return SharedPtr(new QueryHeap(pDevice, type, count)); }\n   60  \n   61:     const ApiHandle& getApiHandle() const { return mApiHandle; }\n   62      uint32_t getQueryCount() const { return mCount; }\n   63      Type getType() const { return mType; }\n   ..\n   86   private:\n   87      QueryHeap(std::shared_ptr<Device> pDevice, Type type, uint32_t count);\n   88:     ApiHandle mApiHandle;\n   89      uint32_t mCount = 0;\n   90      uint32_t mCurrentObject = 0;\n   ..\n   95  }  // namespace Falcor\n   96  \n   97: #endif  // SRC_FALCOR_CORE_API_QUERYHEAP_H_\n   98  \n\n/home/max/dev/Lava/src/Falcor/Core/API/RasterizerState.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_RASTERIZERSTATE_H_\n   29: #define SRC_FALCOR_CORE_API_RASTERIZERSTATE_H_\n   30  \n   31  #include <string>\n   ..\n   80              bias = (float)depthBias * r + slopeScaledBias * maxDepthSlope\n   81              \\endcode\n   82:             where r is the minimum representable value in the depth buffer and maxDepthSlope is the maximum of the horizontal and vertical slopes of the depth value in the pixel.\\n\n   83              See <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/cc308048%28v=vs.85%29.aspx\">the DX documentation</a> for depth bias explanation.\n   84          */\n   ..\n  160      uint32_t getForcedSampleCount() const { return mDesc.mForcedSampleCount; }\n  161  \n  162:     /** Get the API handle\n  163      */\n  164:     const RasterizerStateHandle& getApiHandle() const;\n  165  \n  166   private:\n  167:     RasterizerStateHandle mApiHandle;\n  168      RasterizerState(const Desc& Desc) : mDesc(Desc) {}\n  169      Desc mDesc;\n  ...\n  186  }  // namespace Falcor\n  187  \n  188: #endif  // SRC_FALCOR_CORE_API_RASTERIZERSTATE_H_\n  189  \n\n/home/max/dev/Lava/src/Falcor/Core/API/RenderContext.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_RENDERCONTEXT_H_\n   29: #define SRC_FALCOR_CORE_API_RENDERCONTEXT_H_\n   30  \n   31  #include <stack>\n   ..\n   54  \n   55      /**\n   56:         This flag control which aspects of the GraphicState will be bound into the pipeline before drawing.\n   57:         It is useful in cases where the user wants to set a specific object using a raw-API call before calling one of the draw functions\n   58      */\n   59      enum class StateBindFlags : uint32_t {\n   ..\n   65          Viewports       = 0x10,             /// <Bind Viewport\n   66          Scissors        = 0x20,             /// <Bind scissors\n   67:         PipelineState   = 0x40,             /// <Bind Pipeline State Object\n   68          SamplePositions = 0x80,             /// <Set the programmable sample positions\n   69          All             = uint32_t(-1)\n   ..\n  103      void clearDsv(const DepthStencilView* pDsv, float depth, uint8_t stencil, bool clearDepth = true, bool clearStencil = true);\n  104  \n  105:     /** Clear a texture. The function will use the bind-flags to find the optimal API call to make\n  106          \\param[in] pTexture The texture to clear\n  107          \\param[in] clearColor The clear color\n  ...\n  206  }  // namespace Falcor\n  207  \n  208: #endif  // SRC_FALCOR_CORE_API_RENDERCONTEXT_H_\n  209  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Resource.cpp:\n   76      state_to_str(Present);\n   77      state_to_str(Predication);\n   78:     state_to_str(NonPixelShader);\n   79  #ifdef FALCOR_D3D12\n   80      state_to_str(AccelerationStructure);\n\n/home/max/dev/Lava/src/Falcor/Core/API/Resource.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_RESOURCE_H_\n   29: #define SRC_FALCOR_CORE_API_RESOURCE_H_\n   30  \n   31  #include <string>\n   ..\n   45  class dlldecl Resource : public std::enable_shared_from_this<Resource> {\n   46   public:\n   47:     using ApiHandle = ResourceHandle;\n   48      using BindFlags = ResourceBindFlags;\n   49  \n   ..\n   81          GenericRead,\n   82          Predication,\n   83:         PixelShader,\n   84:         NonPixelShader,\n   85  #ifdef FALCOR_D3D12\n   86          AccelerationStructure,\n   ..\n  123      Type getType() const { return mType; }\n  124  \n  125:     /** Get the API handle\n  126      */\n  127:     const ApiHandle& getApiHandle() const { return mApiHandle; }\n  128  \n  129:     /** Creates a shared resource API handle.\n  130      */\n  131  #ifdef FALCOR_D3D12\n  132:     SharedResourceApiHandle createSharedApiHandle();\n  133  #endif\n  134  \n  ...\n  153      /** Set the resource name\n  154      */\n  155:     void setName(const std::string& name) { mName = name; apiSetName(); }\n  156  \n  157      /** Get the resource name\n  ...\n  196      void setSubresourceState(uint32_t arraySlice, uint32_t mipLevel, State newState) const;\n  197      void setGlobalState(State newState) const;\n  198:     void apiSetName();\n  199  \n  200:     ApiHandle mApiHandle;\n  201      size_t mSize = 0;\n  202      GpuAddress mGpuVaOffset = 0;\n  ...\n  217  }  // namespace Falcor\n  218  \n  219: #endif  // SRC_FALCOR_CORE_API_RESOURCE_H_\n  220  \n\n/home/max/dev/Lava/src/Falcor/Core/API/ResourceViews.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_RESOURCEVIEWS_H_\n   29: #define SRC_FALCOR_CORE_API_RESOURCEVIEWS_H_\n   30  \n   31  #include <vector>\n   ..\n   75  };\n   76  \n   77: /** Abstracts API resource views.\n   78  */\n   79: template<typename ApiHandleType>\n   80  class dlldecl ResourceView {\n   81   public:\n   82:     using ApiHandle = ApiHandleType;\n   83      static const uint32_t kMaxPossible = -1;\n   84      virtual ~ResourceView();\n   85  \n   86:     ResourceView(std::shared_ptr<Device> pDevice, ResourceWeakPtr& pResource, ApiHandle handle, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n   87:         : mApiHandle(handle), mpDevice(pDevice), mpResource(pResource), mViewInfo(mostDetailedMip, mipCount, firstArraySlice, arraySize) {}\n   88  \n   89:     ResourceView(std::shared_ptr<Device> pDevice, ResourceWeakPtr& pResource, ApiHandle handle, uint32_t firstElement, uint32_t elementCount)\n   90:         : mApiHandle(handle), mpDevice(pDevice), mpResource(pResource), mViewInfo(firstElement, elementCount) {}\n   91  \n   92:     /** Get the raw API handle.\n   93      */\n   94:     const ApiHandle& getApiHandle() const { return mApiHandle; }\n   95  \n   96      /** Get information about the view.\n   ..\n  103  \n  104   protected:\n  105:     ApiHandle mApiHandle;\n  106      std::shared_ptr<Device> mpDevice;\n  107      ResourceWeakPtr mpResource;\n  ...\n  121  \n  122      // This is currently used by RtScene to create an SRV for the TLAS, since the create() functions above assume texture or buffer types.\n  123:     ShaderResourceView(std::shared_ptr<Device> pDevice, ResourceWeakPtr pResource, ApiHandle handle, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  124          : ResourceView(pDevice, pResource, handle, mostDetailedMip, mipCount, firstArraySlice, arraySize) {}\n  125  \n  126   private:\n  127:     ShaderResourceView(std::shared_ptr<Device> pDevice, ResourceWeakPtr pResource, ApiHandle handle, uint32_t firstElement, uint32_t elementCount)\n  128          : ResourceView(pDevice, pResource, handle, firstElement, elementCount) {}\n  129  };\n  ...\n  138  \n  139   private:\n  140:     DepthStencilView(std::shared_ptr<Device> pDevice,ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  141          ResourceView(pDevice, pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  142  };\n  ...\n  154  \n  155   private:\n  156:     UnorderedAccessView(std::shared_ptr<Device> pDevice, ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  157          ResourceView(pDevice, pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  158  \n  159:     UnorderedAccessView(std::shared_ptr<Device> pDevice, ResourceWeakPtr pResource, ApiHandle handle, uint32_t firstElement, uint32_t elementCount)\n  160          : ResourceView(pDevice, pResource, handle, firstElement, elementCount) {}\n  161  };\n  ...\n  170  \n  171   private:\n  172:     RenderTargetView(std::shared_ptr<Device> pDevice, ResourceWeakPtr pResource, ApiHandle handle, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) :\n  173          ResourceView(pDevice, pResource, handle, mipLevel, 1, firstArraySlice, arraySize) {}\n  174  };\n  ...\n  182  \n  183   private:\n  184:     ConstantBufferView(std::shared_ptr<Device> pDevice, ResourceWeakPtr pResource, ApiHandle handle) : ResourceView(pDevice, pResource, handle, 0, 1, 0, 1) {}\n  185  };\n  186  \n  ...\n  200  }  // namespace Falcor\n  201  \n  202: #endif  // SRC_FALCOR_CORE_API_RESOURCEVIEWS_H_\n  203  \n\n/home/max/dev/Lava/src/Falcor/Core/API/RootSignature.cpp:\n   65  RootSignature::RootSignature(std::shared_ptr<Device> device, const Desc& desc): mDesc(desc), mpDevice(device) {\n   66      sObjCount++;\n   67:     apiInit();\n   68  }\n   69  \n\n/home/max/dev/Lava/src/Falcor/Core/API/RootSignature.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_ROOTSIGNATURE_H_\n   29: #define SRC_FALCOR_CORE_API_ROOTSIGNATURE_H_\n   30  \n   31  #include <vector>\n   ..\n   41  class CopyContext;\n   42  \n   43: /** The root signature defines what resources are bound to the pipeline.\n   44  \n   45      The layout is defined by traversing the ParameterBlock hierarchy\n   ..\n   58      using SharedPtr = std::shared_ptr<RootSignature>;\n   59      using SharedConstPtr = std::shared_ptr<const RootSignature>;\n   60:     using ApiHandle = RootSignatureHandle;\n   61  \n   62      using DescType = Falcor::DescriptorSet::Type;\n   ..\n  132      static SharedPtr createLocal(std::shared_ptr<Device> device, const EntryPointGroupReflection* pReflector);\n  133  \n  134:     const ApiHandle& getApiHandle() const { return mApiHandle; }\n  135  \n  136      size_t getDescriptorSetCount() const { return mDesc.mSets.size(); }\n  ...\n  151   protected:\n  152      RootSignature(std::shared_ptr<Device> device, const Desc& desc);\n  153:     void apiInit();\n  154  \n  155  #ifdef FALCOR_D3D12\n  156:     virtual void createApiHandle(ID3DBlobPtr pSigBlob);\n  157  #endif\n  158  \n  159:     ApiHandle mApiHandle;\n  160      Desc mDesc;\n  161      static SharedPtr spEmptySig;\n  ...\n  170  }  // namespace Falcor\n  171  \n  172: #endif  // SRC_FALCOR_CORE_API_ROOTSIGNATURE_H_\n  173  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Sampler.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_SAMPLER_H_\n   29: #define SRC_FALCOR_CORE_API_SAMPLER_H_\n   30  \n   31  #include <string>\n   ..\n   39  class Device;\n   40  \n   41: /** Abstract the API sampler state object\n   42  */\n   43  class dlldecl Sampler : public std::enable_shared_from_this<Sampler> {\n   ..\n   46      using SharedConstPtr = std::shared_ptr<const Sampler>;\n   47      using ConstSharedPtrRef = const SharedPtr&;\n   48:     using ApiHandle = SamplerHandle;\n   49  \n   50      /** Filter mode\n   ..\n   82          Desc& setFilterMode(Filter minFilter, Filter magFilter, Filter mipFilter);\n   83  \n   84:         /** Set the maximum anisotropic filtering value. If MaxAnisotropy > 1, min/mag/mip filter modes are ignored\n   85          */\n   86          Desc& setMaxAnisotropy(uint32_t maxAnisotropy);\n   ..\n  131      static SharedPtr create(std::shared_ptr<Device> device, const Desc& desc);\n  132  \n  133:     /** Get the API handle\n  134      */\n  135:     const ApiHandle& getApiHandle() const { return mApiHandle; }\n  136  \n  137      /** Get the magnification filter\n  ...\n  194      Sampler(std::shared_ptr<Device> device, const Desc& desc);\n  195      Desc mDesc;\n  196:     ApiHandle mApiHandle = {};\n  197:     static uint32_t getApiMaxAnisotropy(std::shared_ptr<Device> device);\n  198  \n  199      std::shared_ptr<Device> mpDevice; \n  ...\n  225  }  // namespace Falcor\n  226  \n  227: #endif  // SRC_FALCOR_CORE_API_SAMPLER_H_\n  228  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Shader.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_SHADER_H_\n   29: #define SRC_FALCOR_CORE_API_SHADER_H_\n   30  \n   31  #include <map>\n   ..\n  135  \n  136  /** Low-level shader object\n  137:     This class abstracts the API's shader creation and management\n  138  */\n  139  class dlldecl Shader : public std::enable_shared_from_this<Shader> {\n  ...\n  141      using SharedPtr = std::shared_ptr<Shader>;\n  142      using SharedConstPtr = std::shared_ptr<const Shader>;\n  143:     using ApiHandle = ShaderHandle;\n  144  \n  145      typedef ComPtr<ISlangBlob> Blob;\n  146  \n  147:     enum class CompilerFlags {\n  148          None                        = 0x0,\n  149          TreatWarningsAsErrors       = 0x1,\n  150:         DumpIntermediates           = 0x2,\n  151          FloatingPointModeFast       = 0x4,\n  152          FloatingPointModePrecise    = 0x8,\n  ...\n  184          \\param[in] shaderBlog A blob containing the shader code\n  185          \\param[in] Type The Type of the shader\n  186:         \\param[out] log This string will contain the error log message in case shader compilation failed\n  187          \\return If success, a new shader object, otherwise nullptr\n  188      */\n  189:     static SharedPtr create(std::shared_ptr<Device> device, const Blob& shaderBlob, ShaderType type, std::string const&  entryPointName, CompilerFlags flags, std::string& log) {\n  190          SharedPtr pShader = SharedPtr(new Shader(device, type));\n  191          pShader->mEntryPointName = entryPointName;\n  ...\n  195      virtual ~Shader();\n  196  \n  197:     /** Get the API handle.\n  198      */\n  199:     const ApiHandle& getApiHandle() const { return mApiHandle; }\n  200  \n  201      /** Get the shader Type\n  ...\n  212  \n  213   protected:\n  214:     // API handle depends on the shader Type, so it stored be stored as part of the private data\n  215:     bool init(const Blob& shaderBlob, const std::string&  entryPointName, CompilerFlags flags, std::string& log);\n  216      Shader(std::shared_ptr<Device> device, ShaderType Type);\n  217      ShaderType mType;\n  218      std::string mEntryPointName;\n  219:     ApiHandle mApiHandle;\n  220      void* mpPrivateData = nullptr;\n  221  \n  ...\n  224  };\n  225  \n  226: enum_class_operators(Shader::CompilerFlags);\n  227  \n  228  }  // namespace Falcor\n  229  \n  230: #endif  // SRC_FALCOR_CORE_API_SHADER_H_\n  231  \n\n/home/max/dev/Lava/src/Falcor/Core/API/SparseResourceManager.cpp:\n  231  \n  232      try {\n  233:         pTex->apiInit(nullptr, generateMipLevels);\n  234      } catch (const std::runtime_error& e) {\n  235          LOG_ERR(\"Error initializing sparse texture %s !!!\\n %s\", ltxFilename.c_str(), e.what());\n\n/home/max/dev/Lava/src/Falcor/Core/API/SparseResourceManager.h:\n    1: #ifndef SRC_FALCOR_CORE_API_SparseResourceManager_H_\n    2: #define SRC_FALCOR_CORE_API_SparseResourceManager_H_\n    3  \n    4  #include <map>\n    .\n   10  #include <vulkan/vulkan.h>\n   11  \n   12: #include \"Falcor/Core/API/Device.h\"\n   13  #include \"Falcor/Utils/Image/LTX_Bitmap.h\"\n   14  //#include \"boost/asio/thread_pool.hpp\"\n   ..\n   99  }  // namespace Falcor\n  100  \n  101: #endif  // SRC_FALCOR_CORE_API_SparseResourceManager_H_\n  102  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Texture.cpp:\n   56  \n   57  \n   58: Texture::SharedPtr Texture::createFromApiHandle(std::shared_ptr<Device> device, ApiHandle handle, Type type, uint32_t width, uint32_t height, uint32_t depth, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize, uint32_t mipLevels, State initState, BindFlags bindFlags) {\n   59      assert(handle);\n   60      switch (type) {\n   ..\n   80  \n   81      Texture::SharedPtr pTexture = SharedPtr(new Texture(device, width, height, depth, arraySize, mipLevels, sampleCount, format, type, bindFlags));\n   82:     pTexture->mApiHandle = handle;\n   83      pTexture->mState.global = initState;\n   84      pTexture->mState.isGlobal = true;\n   ..\n   89      bindFlags = updateBindFlags(device, bindFlags, pData != nullptr, mipLevels, format, \"Texture1D\");\n   90      Texture::SharedPtr pTexture = SharedPtr(new Texture(device, width, 1, 1, arraySize, mipLevels, 1, format, Type::Texture1D, bindFlags));\n   91:     pTexture->apiInit(pData, (mipLevels == kMaxPossible));\n   92      return pTexture;\n   93  }\n   ..\n   96      bindFlags = updateBindFlags(device, bindFlags, pData != nullptr, mipLevels, format, \"Texture2D\");\n   97      Texture::SharedPtr pTexture = SharedPtr(new Texture(device, width, height, 1, arraySize, mipLevels, 1, format, Type::Texture2D, bindFlags));\n   98:     pTexture->apiInit(pData, (mipLevels == kMaxPossible));\n   99      return pTexture;\n  100  }\n  ...\n  103      bindFlags = updateBindFlags(device, bindFlags, pData != nullptr, mipLevels, format, \"Texture3D\");\n  104      Texture::SharedPtr pTexture = SharedPtr(new Texture(device, width, height, depth, 1, mipLevels, 1, format, Type::Texture3D, bindFlags));\n  105:     pTexture->apiInit(pData, (mipLevels == kMaxPossible));\n  106      return pTexture;\n  107  }\n  ...\n  110      bindFlags = updateBindFlags(device, bindFlags, pData != nullptr, mipLevels, format, \"TextureCube\");\n  111      Texture::SharedPtr pTexture = SharedPtr(new Texture(device, width, height, 1, arraySize, mipLevels, 1, format, Type::TextureCube, bindFlags));\n  112:     pTexture->apiInit(pData, (mipLevels == kMaxPossible));\n  113      return pTexture;\n  114  }\n  ...\n  117      bindFlags = updateBindFlags(device, bindFlags, false, 1, format, \"Texture2DMultisample\");\n  118      Texture::SharedPtr pTexture = SharedPtr(new Texture(device, width, height, 1, arraySize, 1, sampleCount, format, Type::Texture2DMultisample, bindFlags));\n  119:     pTexture->apiInit(nullptr, false);\n  120      return pTexture;\n  121  }\n  ...\n  149  \n  150      if (firstArraySlice >= resArraySize) {\n  151:         logWarning(\"First array slice is OOB when creating resource view. Clamping\");\n  152          firstArraySlice = resArraySize - 1;\n  153      }\n  154  \n  155      if (mostDetailedMip >= resMipCount) {\n  156:         logWarning(\"Most detailed mip is OOB when creating resource view. Clamping\");\n  157          mostDetailedMip = resMipCount - 1;\n  158      }\n  ...\n  161          mipCount = resMipCount - mostDetailedMip;\n  162      } else if (mipCount + mostDetailedMip > resMipCount) {\n  163:         logWarning(\"Mip count is OOB when creating resource view. Clamping\");\n  164          mipCount = resMipCount - mostDetailedMip;\n  165      }\n  ...\n  168          arraySize = resArraySize - firstArraySlice;\n  169      } else if (arraySize + firstArraySlice > resArraySize) {\n  170:         logWarning(\"Array size is OOB when creating resource view. Clamping\");\n  171          arraySize = resArraySize - firstArraySlice;\n  172      }\n  ...\n  343  #ifdef FLACOR_D3D12\n  344  uint32_t Texture::getTextureSizeInBytes() {\n  345:     ID3D12DevicePtr pDevicePtr = mpDevice->getApiHandle();\n  346:     ID3D12ResourcePtr pTexResource = this->getApiHandle();\n  347  \n  348      D3D12_RESOURCE_ALLOCATION_INFO d3d12ResourceAllocationInfo;\n\n/home/max/dev/Lava/src/Falcor/Core/API/Texture.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_TEXTURE_H_\n   29: #define SRC_FALCOR_CORE_API_TEXTURE_H_\n   30  \n   31  #include <map>\n   ..\n   49  class VirtualTexturePage;\n   50  \n   51: /** Abstracts the API texture objects\n   52  */\n   53  class dlldecl Texture : public Resource, public inherit_shared_from_this<Resource, Texture> {\n   ..\n  107      ResourceFormat getFormat() const { return mFormat; }\n  108  \n  109:     /** Create a new texture from an existing API handle.\n  110          \\param[in] handle Handle of already allocated resource.\n  111          \\param[in] type The type of texture.\n  ...\n  121          \\return A pointer to a new texture, or throws an exception if creation failed.\n  122      */\n  123:     static SharedPtr createFromApiHandle(std::shared_ptr<Device> device, ApiHandle handle, Type type, uint32_t width, uint32_t height, uint32_t depth, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize, uint32_t mipLevels, State initState, BindFlags bindFlags);\n  124  \n  125      /** Create a 1D texture.\n  ...\n  128          \\param[in] arraySize The array size of the texture.\n  129          \\param[in] mipLevels If equal to kMaxPossible then an entire mip chain will be generated from mip level 0. If any other value is given then the data for at least that number of miplevels must be provided.\n  130:         \\param[in] pInitData If different than nullptr, pointer to a buffer containing data to initialize the texture with.\n  131          \\param[in] bindFlags The requested bind flags for the resource.\n  132          \\return A pointer to a new texture, or throws an exception if creation failed.\n  133      */\n  134:     static SharedPtr create1D(std::shared_ptr<Device> device, uint32_t width, ResourceFormat format, uint32_t arraySize = 1, uint32_t mipLevels = kMaxPossible, const void* pInitData = nullptr, BindFlags bindFlags = BindFlags::ShaderResource);\n  135  \n  136      /** Create a 2D texture.\n  ...\n  140          \\param[in] arraySize The array size of the texture.\n  141          \\param[in] mipLevels If equal to kMaxPossible then an entire mip chain will be generated from mip level 0. If any other value is given then the data for at least that number of miplevels must be provided.\n  142:         \\param[in] pInitData If different than nullptr, pointer to a buffer containing data to initialize the texture with.\n  143          \\param[in] bindFlags The requested bind flags for the resource.\n  144          \\return A pointer to a new texture, or throws an exception if creation failed.\n  145      */\n  146:     static SharedPtr create2D(std::shared_ptr<Device> device, uint32_t width, uint32_t height, ResourceFormat format, uint32_t arraySize = 1, uint32_t mipLevels = kMaxPossible, const void* pInitData = nullptr, BindFlags bindFlags = BindFlags::ShaderResource);\n  147  \n  148      /** Create a 3D texture.\n  ...\n  152          \\param[in] format The format of the texture.\n  153          \\param[in] mipLevels If equal to kMaxPossible then an entire mip chain will be generated from mip level 0. If any other value is given then the data for at least that number of miplevels must be provided.\n  154:         \\param[in] pInitData If different than nullptr, pointer to a buffer containing data to initialize the texture with.\n  155          \\param[in] bindFlags The requested bind flags for the resource.\n  156:         \\param[in] isSparse If true, the texture is created using sparse texture options supported by the API.\n  157          \\return A pointer to a new texture, or throws an exception if creation failed.\n  158      */\n  159:     static SharedPtr create3D(std::shared_ptr<Device> device, uint32_t width, uint32_t height, uint32_t depth, ResourceFormat format, uint32_t mipLevels = kMaxPossible, const void* pInitData = nullptr, BindFlags bindFlags = BindFlags::ShaderResource, bool sparse = false);\n  160  \n  161      /** Create a cube texture.\n  ...\n  165          \\param[in] arraySize The array size of the texture.\n  166          \\param[in] mipLevels If equal to kMaxPossible then an entire mip chain will be generated from mip level 0. If any other value is given then the data for at least that number of miplevels must be provided.\n  167:         \\param[in] pInitData If different than nullptr, pointer to a buffer containing data to initialize the texture with.\n  168          \\param[in] bindFlags The requested bind flags for the resource.\n  169          \\return A pointer to a new texture, or throws an exception if creation failed.\n  170      */\n  171:     static SharedPtr createCube(std::shared_ptr<Device> device, uint32_t width, uint32_t height, ResourceFormat format, uint32_t arraySize = 1, uint32_t mipLevels = kMaxPossible, const void* pInitData = nullptr, BindFlags bindFlags = BindFlags::ShaderResource);\n  172  \n  173      /** Create a multi-sampled 2D texture.\n  ...\n  297      Texture(std::shared_ptr<Device> device, uint32_t width, uint32_t height, uint32_t depth, uint32_t arraySize, uint32_t mipLevels, uint32_t sampleCount, ResourceFormat format, Type Type, BindFlags bindFlags);\n  298      \n  299:     void apiInit(const void* pData, bool autoGenMips);\n  300      void uploadInitData(const void* pData, bool autoGenMips);\n  301  \n  ...\n  355  }  // namespace Falcor\n  356  \n  357: #endif  // SRC_FALCOR_CORE_API_TEXTURE_H_\n  358  \n\n/home/max/dev/Lava/src/Falcor/Core/API/TextureLoader.cpp:\n   29  \n   30  #include \"Falcor/stdafx.h\"\n   31: #include \"Falcor/Core/API/Texture.h\"\n   32  #include \"Falcor/Utils/Image/DDSHeader.h\"\n   33  #include \"Falcor/Utils/BinaryFileStream.h\"\n   ..\n   43  static const uint32_t kDdsMagicNumber = 0x20534444;\n   44  \n   45: bool checkDdsChannelMask(const DdsHeader::PixelFormat& format, uint32_t r, uint32_t g, uint32_t b, uint32_t a) {\n   46      return (format.rMask == r && format.gMask == g && format.bMask == b && format.aMask == a);\n   47  }\n   ..\n  248  }\n  249  \n  250: DXFormat getRgbDxgiFormat(const DdsHeader::PixelFormat& format) {\n  251      switch(format.bitcount) {\n  252          case 32:\n  ...\n  294  }\n  295  \n  296: DXFormat getLuminanceDxgiFormat(const DdsHeader::PixelFormat& format) {\n  297      switch(format.bitcount) {\n  298          case 16:\n  ...\n  314  }\n  315  \n  316: DXFormat getDxgiAlphaFormat(const DdsHeader::PixelFormat& format) {\n  317      switch(format.bitcount) {\n  318          case 8:\n  ...\n  324  }\n  325  \n  326: DXFormat getDxgiBumpFormat(const DdsHeader::PixelFormat& format) {\n  327      switch(format.bitcount) {\n  328          case 16:\n  ...\n  424  }\n  425  \n  426: DXFormat getDxgiFormatFromPixelFormat(const DdsHeader::PixelFormat& format) {\n  427:     if(format.flags & DdsHeader::PixelFormat::kRgbMask) {\n  428          return getRgbDxgiFormat(format);\n  429:     } else if (format.flags & DdsHeader::PixelFormat::kLuminanceMask) {\n  430          return getLuminanceDxgiFormat(format);\n  431:     } else if(format.flags & DdsHeader::PixelFormat::kAlphaMask) {\n  432          return getDxgiAlphaFormat(format);\n  433:     } else if (format.flags & DdsHeader::PixelFormat::kBumpMask) {\n  434          return getDxgiBumpFormat(format);\n  435:     } else if(format.flags & DdsHeader::PixelFormat::kFourCCFlag) {\n  436          return getDxgiFormatFrom4CC(format.fourCC);\n  437      }\n  ...\n  444          return falcorFormatFromDXGIFormat(data.dx10Header.dxgiFormat);\n  445      } else {\n  446:         return falcorFormatFromDXGIFormat(getDxgiFormatFromPixelFormat(data.header.pixelFormat));\n  447      }\n  448  }\n  ...\n  458  \n  459          for (uint32_t mipCounter = 0; mipCounter < mipDepth; ++mipCounter) {\n  460:             uint32_t heightPitch = std::max(width >> mipCounter, 1U) * getFormatBytesPerBlock(format);\n  461              uint32_t currentMipHeight = std::max(height >> mipCounter, 1U);\n  462:             uint32_t depthPitch = currentMipHeight * heightPitch;\n  463  \n  464              for (uint32_t depthCounter = 0; depthCounter < depth; ++depthCounter) {\n  465:                 currentTexture = currentDepth + depthPitch * depthCounter;\n  466  \n  467                  if (isCubemap) {\n  468                      if (depthCounter % 6 == 2) {\n  469:                         currentTexture += depthPitch;\n  470                      } else if (depthCounter % 6 == 3) {\n  471:                         currentTexture -= depthPitch;\n  472                      }\n  473                  }\n  474  \n  475                  for (uint32_t heightCounter = 1; heightCounter <= currentMipHeight; ++heightCounter) {\n  476:                     std::memcpy(currentPos, currentTexture + (currentMipHeight - heightCounter) * heightPitch, heightPitch);\n  477:                     currentPos += heightPitch;\n  478                  }\n  479              }\n  480  \n  481:             currentDepth += depthPitch * depth;\n  482          }\n  483      }\n  ...\n  497      stream >> ddsData.header;\n  498  \n  499:     if ((ddsData.header.pixelFormat.flags & DdsHeader::PixelFormat::kFourCCFlag) && (makeFourCC(\"DX10\") == ddsData.header.pixelFormat.fourCC)) {\n  500          ddsData.hasDX10Header = true;\n  501          stream >> ddsData.dx10Header;\n\n/home/max/dev/Lava/src/Falcor/Core/API/VAO.cpp:\n   31  namespace Falcor {\n   32  \n   33: bool checkVaoParams(const Vao::BufferVec& vbDesc, const VertexLayout* pLayout, Buffer* pIB, ResourceFormat ibFormat) {\n   34      // TODO: Check number of vertex buffers match with pLayout.\n   35:     if (pIB) {\n   36          if (ibFormat != ResourceFormat::R16Uint && ibFormat != ResourceFormat::R32Uint) {\n   37              logError(\"Invalid index buffer format (\" + to_string(ibFormat) + \")\");\n   ..\n   43  }\n   44  \n   45: Vao::Vao(const BufferVec& pVBs, const VertexLayout::SharedPtr& pLayout, const Buffer::SharedPtr& pIB, ResourceFormat ibFormat, Topology topology)\n   46      : mIbFormat(ibFormat)\n   47      , mpVBs(pVBs)\n   48:     , mpIB(pIB)\n   49      , mpVertexLayout(pLayout)\n   50      , mTopology(topology) {\n   51  }\n   52  \n   53: Vao::SharedPtr Vao::create(Topology topology, const VertexLayout::SharedPtr& pLayout, const BufferVec& pVBs, const Buffer::SharedPtr& pIB, ResourceFormat ibFormat) {\n   54      if (pLayout != nullptr) {\n   55:         if (checkVaoParams(pVBs, pLayout.get(), pIB.get(), ibFormat) == false) {\n   56              throw std::runtime_error(\"Failed to create VAO\");\n   57          }\n   58      }\n   59  \n   60:     SharedPtr pVao = SharedPtr(new Vao(pVBs, pLayout, pIB, ibFormat, topology));\n   61      return pVao;\n   62  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/VAO.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_VAO_H_\n   29: #define SRC_FALCOR_CORE_API_VAO_H_\n   30  \n   31  #include <vector>\n   ..\n   70          \\param pLayout The vertex layout description. Can be nullptr.\n   71          \\param pVBs Array of pointers to vertex buffers. Number of buffers must match with pLayout.\n   72:         \\param pIB Pointer to the index buffer. Can be nullptr, in which case no index buffer will be bound.\n   73          \\param ibFormat The resource format of the index buffer. Can be either R16Uint or R32Uint.\n   74          \\return New object, or throws an exception on error.\n   75      */\n   76:     static SharedPtr create(Topology primTopology, const VertexLayout::SharedPtr& pLayout = nullptr, const BufferVec& pVBs = BufferVec(), const Buffer::SharedPtr& pIB = nullptr, ResourceFormat ibFormat = ResourceFormat::Unknown);\n   77  \n   78:     /** Get the API handle\n   79      */\n   80:     const VaoHandle& getApiHandle() const;\n   81  \n   82      /** Get the vertex buffer count\n   ..\n   99      /** Get the index buffer\n  100      */\n  101:     const Buffer::SharedPtr& getIndexBuffer() const { return mpIB; }\n  102  \n  103      /** Get the index buffer format\n  ...\n  113  \n  114   private:\n  115:     Vao(const BufferVec& pVBs, const VertexLayout::SharedPtr& pLayout, const Buffer::SharedPtr& pIB, ResourceFormat ibFormat, Topology primTopology);\n  116  \n  117:     VaoHandle mApiHandle;\n  118      VertexLayout::SharedPtr mpVertexLayout;\n  119      BufferVec mpVBs;\n  120:     Buffer::SharedPtr mpIB;\n  121      void* mpPrivateData = nullptr;\n  122      ResourceFormat mIbFormat;\n  ...\n  126  }  // namespace Falcor\n  127  \n  128: #endif  // SRC_FALCOR_CORE_API_VAO_H_\n  129  \n\n/home/max/dev/Lava/src/Falcor/Core/API/VertexLayout.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_VERTEXLAYOUT_H_\n   29: #define SRC_FALCOR_CORE_API_VERTEXLAYOUT_H_\n   30  \n   31  #include <vector>\n   ..\n  191  }  // namespace Falcor\n  192  \n  193: #endif  // SRC_FALCOR_CORE_API_VERTEXLAYOUT_H_\n  194  \n\n/home/max/dev/Lava/src/Falcor/Core/API/VirtualTexturePage.cpp:\n   60      memAllocInfo.memoryTypeIndex = mpTexture->memoryTypeIndex();\n   61      \n   62:     if (VK_FAILED(vkAllocateMemory(mpDevice->getApiHandle(), &memAllocInfo, nullptr, &mImageMemoryBind.memory))) {\n   63          throw std::runtime_error(\"Error allocating memory for virtual texture page !!!\");\n   64      }\n   ..\n   74      }\n   75  \n   76:     vkFreeMemory(mpDevice->getApiHandle(), mImageMemoryBind.memory, nullptr);\n   77  \n   78      mpTexture->mSparseResidentMemSize -= mDevMemSize;\n\n/home/max/dev/Lava/src/Falcor/Core/API/VirtualTexturePage.h:\n    1: #ifndef SRC_FALCOR_CORE_API_VIRTUALTEXTUREPAGE_H_\n    2: #define SRC_FALCOR_CORE_API_VIRTUALTEXTUREPAGE_H_\n    3  \n    4  #include <vector>\n    .\n   71  }  // namespace Falcor\n   72  \n   73: #endif  // SRC_FALCOR_CORE_API_VIRTUALTEXTUREPAGE_H_\n   74  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_VULKAN_FALCORVK_H_\n   29: #define SRC_FALCOR_CORE_API_VULKAN_FALCORVK_H_\n   30  \n   31  #define NOMINMAX\n   32: #include \"Falcor/Core/API/Formats.h\"\n   33  \n   34  #ifdef _WIN32\n   ..\n   53  \n   54  #include \"Falcor/Utils/Debug/debug.h\"\n   55: #include \"Falcor/Core/API/Vulkan/VKSmartHandle.h\"\n   56  \n   57  namespace Falcor {\n   ..\n   87  using CommandListHandle = VkCommandBuffer;\n   88  using CommandQueueHandle = VkQueue;\n   89: using ApiCommandQueueType = uint32_t;\n   90  using CommandAllocatorHandle = VkHandle<VkCommandPool>::SharedPtr;\n   91  using CommandSignatureHandle = void*;\n   ..\n  100  using SamplerHandle = VkHandle<VkSampler>::SharedPtr;\n  101  using GpuAddress = size_t;\n  102: using DescriptorSetApiHandle = VkDescriptorSet;\n  103  using QueryHeapHandle = VkHandle<VkQueryPool>::SharedPtr;\n  104  \n  105: using GraphicsStateHandle = VkHandle<VkPipeline>::SharedPtr;\n  106: using ComputeStateHandle = VkHandle<VkPipeline>::SharedPtr;\n  107  using ShaderHandle = VkHandle<VkShaderModule>::SharedPtr;\n  108  using ShaderReflectionHandle = void*;\n  ...\n  124  static const uint32_t kDefaultSwapChainBuffers = 5;\n  125  \n  126: using ApiObjectHandle = VkBaseApiHandle::SharedPtr;\n  127  \n  128  class Device;\n  ...\n  149  #define UNSUPPORTED_IN_VULKAN(msg_) {logWarning(msg_ + std::string(\" is not supported in Vulkan. Ignoring call.\"));}\n  150  \n  151: #endif  // SRC_FALCOR_CORE_API_VULKAN_FALCORVK_H_\n  152  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKBuffer.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/Buffer.h\"\n   30: #include \"Falcor/Core/API/Device.h\"\n   31: //  #include \"Falcor/Core/API/LowLevel/ResourceAllocator.h\"\n   32: #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n   33: #include \"Falcor/Core/API/Device.h\"\n   34  #include \"Falcor/Utils/Debug/debug.h\"\n   35  \n   ..\n   43  \n   44      VkDeviceMemory deviceMem;\n   45:     vk_call(vkAllocateMemory(pDevice->getApiHandle(), &allocInfo, nullptr, &deviceMem));\n   46      return deviceMem;\n   47  }\n   48  \n   49: void* mapBufferApi(std::shared_ptr<Device> pDevice, const Buffer::ApiHandle& apiHandle, size_t size) {\n   50      void* pData;\n   51:     vk_call(vkMapMemory(pDevice->getApiHandle(), apiHandle, 0, size, 0, &pData));\n   52      return pData;\n   53  }\n   ..\n   77  size_t getBufferDataAlignment(const Buffer* pBuffer) {\n   78      VkMemoryRequirements reqs;\n   79:     vkGetBufferMemoryRequirements(pBuffer->device()->getApiHandle(), pBuffer->getApiHandle(), &reqs);\n   80      return reqs.alignment;\n   81  }\n   82  \n   83: Buffer::ApiHandle createBuffer(Device::SharedPtr pDevice, size_t size, Buffer::BindFlags bindFlags, GpuMemoryHeap::Type memType) {\n   84  \n   85      VkBufferCreateInfo bufferInfo = {};\n   ..\n   93      \n   94      VkBuffer buffer;\n   95:     vk_call(vkCreateBuffer(pDevice->getApiHandle(), &bufferInfo, nullptr, &buffer));\n   96  \n   97      // Get the required buffer size\n   98      VkMemoryRequirements reqs;\n   99:     vkGetBufferMemoryRequirements(pDevice->getApiHandle(), buffer, &reqs);\n  100  \n  101      VkDeviceMemory mem = allocateDeviceMemory(pDevice, memType, reqs.memoryTypeBits, reqs.size);\n  102:     vk_call(vkBindBufferMemory(pDevice->getApiHandle(), buffer, mem, 0));\n  103:     Buffer::ApiHandle apiHandle = Buffer::ApiHandle::create(pDevice, buffer, mem);\n  104  \n  105:     return apiHandle;\n  106  }\n  107  \n  108: void Buffer::apiInit(bool hasInitData) {\n  109      if (mCpuAccess == CpuAccess::Write) {\n  110          mDynamicData = mpDevice->getUploadHeap()->allocate(mSize);\n  111:         mApiHandle = mDynamicData.pResourceHandle;\n  112      } else {\n  113          if (mCpuAccess == CpuAccess::Read && mBindFlags == BindFlags::None) {\n  114:             mApiHandle = createBuffer(mpDevice, mSize, mBindFlags, Device::MemoryType::Readback);\n  115          } else {\n  116:             mApiHandle = createBuffer(mpDevice, mSize, mBindFlags, Device::MemoryType::Default);\n  117          }\n  118      }\n  ...\n  131          // We only unmap staging buffers\n  132          assert(mCpuAccess == CpuAccess::Read);\n  133:         vkUnmapMemory(mpDevice->getApiHandle(), mApiHandle);\n  134      }\n  135  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n   29  \n   30  #include \"stdafx.h\"\n   31: #include \"Falcor/Core/API/ComputeContext.h\"\n   32: #include \"Falcor/Core/API/Device.h\"\n   33: #include \"Falcor/Core/API/DescriptorSet.h\"\n   34  #include \"Falcor/Utils/Debug/debug.h\"\n   35  \n   ..\n   59  \n   60          auto cmd_list = mpLowLevelData->getCommandList();\n   61:         auto cso_api_handle = pCSO->getApiHandle();\n   62          \n   63:         //vkCmdBindPipeline(mpLowLevelData->getCommandList(), VK_PIPELINE_BIND_POINT_COMPUTE, pCSO->getApiHandle());\n   64:         vkCmdBindPipeline(cmd_list, VK_PIPELINE_BIND_POINT_COMPUTE, cso_api_handle);\n   65  \n   66          mpLastBoundComputeVars = pVars;\n   ..\n   71      template<typename ViewType, typename ClearType>\n   72      void clearColorImageCommon(CopyContext* pCtx, const ViewType* pView, const ClearType& clearVal) {\n   73:         if(pView->getApiHandle().getType() != VkResourceType::Image) {\n   74              logWarning(\"Looks like you are trying to clear a buffer. Vulkan only supports clearing Buffers with a single uint value. Please use the uint version of clearUav(). Call is ignored\");\n   75              should_not_get_here();\n   ..\n   88          range.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n   89  \n   90:         vkCmdClearColorImage(pCtx->getLowLevelData()->getCommandList(), pView->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &colVal, 1, &range);\n   91      }\n   92  \n   ..\n   99  \n  100      void ComputeContext::clearUAV(const UnorderedAccessView* pUav, const uint4& value) {\n  101:         if(pUav->getApiHandle().getType() == VkResourceType::Buffer) {\n  102              if ((value.x != value.y) || ((value.x != value.z) && (value.x != value.w))) {\n  103                  logWarning(\"Vulkan buffer clears only support a single element. A vector was supplied which has different elements per channel. only `x` will be used'\");\n  104              }\n  105              const Buffer* pBuffer = dynamic_cast<const Buffer*>(pUav->getResource());\n  106:             vkCmdFillBuffer(getLowLevelData()->getCommandList(), pBuffer->getApiHandle(), pBuffer->getGpuAddressOffset(), pBuffer->getSize(), value.x);\n  107          } else {\n  108              clearColorImageCommon(this, pUav, value);\n  ...\n  131              dispatchSize.y > VULKAN_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION ||\n  132              dispatchSize.z > VULKAN_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION) {\n  133:             logError(\"ComputeContext::dispatch(...) - Dispatch dimension exceeds maximum. Skipping.\");\n  134              return;\n  135          }\n  136  \n  137          if (prepareForDispatch(pState, pVars) == false) {\n  138:             logError(\"ComputeContext::dispatch(...) - prepareForDispatch(...) call failed !!! Skipping.\");\n  139              return;\n  140          }\n  ...\n  148  \n  149          if (prepareForDispatch(pState, pVars) == false) {\n  150:             logError(\"ComputeContext::dispatch(...) - prepareForDispatch(...) call failed !!! Skipping.\");\n  151              return;\n  152          }\n  153          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  154:         vkCmdDispatchIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), pArgBuffer->getGpuAddressOffset() + argBufferOffset);\n  155      }\n  156  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp:\n   30  #include \"Falcor/stdafx.h\"\n   31  \n   32: #include \"Falcor/Core/API/ComputeStateObject.h\"\n   33  #include \"VKState.h\"\n   34: #include \"Falcor/Core/API/Device.h\"\n   35  #include \"Falcor/Utils/Debug/debug.h\"\n   36  \n   37  namespace Falcor {\n   38  \n   39: void ComputeStateObject::apiInit() {\n   40:     std::vector<VkPipelineShaderStageCreateInfo> shaderStageInfos;\n   41      //initVkShaderStageInfo(mDesc.getProgramVersion().get(), shaderStageInfos);\n   42      initVkShaderStageInfo(mDesc.getProgramKernels(), shaderStageInfos);\n   43      assert(shaderStageInfos.size() == 1);\n   44  \n   45:     VkComputePipelineCreateInfo info = {};\n   46      info.pNext = nullptr;\n   47      info.flags = 0;\n   48:     info.basePipelineHandle = VK_NULL_HANDLE;\n   49:     info.sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;\n   50      info.stage = shaderStageInfos[0];\n   51:     info.layout = mDesc.mpRootSignature->getApiHandle();\n   52  \n   53  \n   54:     VkPipeline pipeline;\n   55:     if (VK_FAILED(vkCreateComputePipelines(mpDevice->getApiHandle(), VK_NULL_HANDLE, 1, &info, nullptr, &pipeline))) {\n   56:         throw std::runtime_error(\"Could not create compute pipeline.\");\n   57      }\n   58:     mApiHandle = ApiHandle::create(mpDevice, pipeline);\n   59  }\n   60  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n   29  \n   30  #include \"Falcor/stdafx.h\"\n   31: #include \"Falcor/Core/API/CopyContext.h\"\n   32: #include \"Falcor/Core/API/Buffer.h\"\n   33: #include \"Falcor/Core/API/Texture.h\"\n   34  \n   35  namespace Falcor {\n   ..\n  121      }\n  122  \n  123:     static VkPipelineStageFlags getShaderStageMask(Resource::State state, bool src) {\n  124          switch (state) {\n  125          case Resource::State::Undefined:\n  ...\n  127          case Resource::State::Common:\n  128              assert(src);\n  129:             return src ? VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT : (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT | VK_PIPELINE_STAGE_ALL_COMMANDS_BIT);\n  130          case Resource::State::VertexBuffer:\n  131          case Resource::State::IndexBuffer:\n  132:             return VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;\n  133          case Resource::State::UnorderedAccess:\n  134          case Resource::State::ConstantBuffer:\n  135          case Resource::State::ShaderResource:\n  136:             return VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT; // #OPTME Assume the worst\n  137          case Resource::State::RenderTarget:\n  138:             return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;\n  139          case Resource::State::DepthStencil:\n  140:             return src ? VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT : VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;\n  141          case Resource::State::IndirectArg:\n  142:             return VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT;\n  143          case Resource::State::CopyDest:\n  144          case Resource::State::CopySource:\n  145          case Resource::State::ResolveDest:\n  146          case Resource::State::ResolveSource:\n  147:             return VK_PIPELINE_STAGE_TRANSFER_BIT;\n  148          case Resource::State::Present:\n  149:             return src ? (VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT | VK_PIPELINE_STAGE_ALL_COMMANDS_BIT) : VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;\n  150          default:\n  151              should_not_get_here();\n  152:             return VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM;\n  153          }\n  154      }\n  ...\n  188          pCtx->resourceBarrier(pTexture, Resource::State::CopyDest);\n  189          pCtx->resourceBarrier(pStaging.get(), Resource::State::CopySource);\n  190:         vkCmdCopyBufferToImage(pCtx->getLowLevelData()->getCommandList(), pStaging->getApiHandle(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &vkCopy);\n  191      }\n  192  \n  ...\n  241          resourceBarrier(pTexture, Resource::State::CopyDest);\n  242          resourceBarrier(pStaging.get(), Resource::State::CopySource);\n  243:         vkCmdCopyBufferToImage(getLowLevelData()->getCommandList(), pStaging->getApiHandle(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &vkCopy);\n  244      }\n  245  \n  ...\n  274          resourceBarrier(pTexture, Resource::State::CopyDest);\n  275          resourceBarrier(pStagingBuffer.get(), Resource::State::CopySource);\n  276:         vkCmdCopyBufferToImage(getLowLevelData()->getCommandList(), pStagingBuffer->getApiHandle(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &vkCopy);\n  277      }\n  278  \n  ...\n  287          pCtx->resourceBarrier(pTexture, Resource::State::CopySource);\n  288          pCtx->resourceBarrier(pThis->mpBuffer.get(), Resource::State::CopyDest);\n  289:         vkCmdCopyImageToBuffer(pCtx->getLowLevelData()->getCommandList(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pThis->mpBuffer->getApiHandle(), 1, &vkCopy);\n  290  \n  291          // Create a fence and signal\n  ...\n  310      }\n  311  \n  312:     void CopyContext::apiSubresourceBarrier(const Texture* pTexture, Resource::State newState, Resource::State oldState, uint32_t arraySlice, uint32_t mipLevel) {\n  313          VkImageMemoryBarrier barrier = {};\n  314          barrier.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;\n  315          barrier.newLayout = getImageLayout(newState);\n  316          barrier.oldLayout = getImageLayout(oldState);\n  317:         barrier.image = pTexture->getApiHandle();\n  318          barrier.subresourceRange.aspectMask = getAspectFlagsFromFormat(pTexture->getFormat());\n  319          barrier.subresourceRange.baseArrayLayer = arraySlice;\n  ...\n  324          barrier.dstAccessMask = getAccessMask(newState);\n  325  \n  326:         vkCmdPipelineBarrier(mpLowLevelData->getCommandList(), getShaderStageMask(oldState, true), getShaderStageMask(newState, false), 0, 0, nullptr, 0, nullptr, 1, &barrier);\n  327      }\n  328  \n  329      bool CopyContext::textureBarrier(const Texture* pTexture, Resource::State newState) {\n  330:         assert(pTexture->getApiHandle().getType() == VkResourceType::Image);\n  331  \n  332          VkImageLayout srcLayout = getImageLayout(pTexture->getGlobalState());\n  ...\n  338              barrier.oldLayout = srcLayout;\n  339              barrier.newLayout = dstLayout;\n  340:             barrier.image = pTexture->getApiHandle();\n  341              barrier.subresourceRange.aspectMask = getAspectFlagsFromFormat(pTexture->getFormat());\n  342              barrier.subresourceRange.baseArrayLayer = 0;\n  ...\n  347              barrier.dstAccessMask = getAccessMask(newState);\n  348  \n  349:             VkPipelineStageFlags srcStageMask = getShaderStageMask(pTexture->getGlobalState(), true);\n  350:             VkPipelineStageFlags dstStageMask = getShaderStageMask(newState, false);\n  351:             vkCmdPipelineBarrier(mpLowLevelData->getCommandList(), srcStageMask, dstStageMask, 0, 0, nullptr, 0, nullptr, 1, &barrier);\n  352  \n  353              pTexture->setGlobalState(newState);\n  ...\n  360      bool CopyContext::bufferBarrier(const Buffer* pBuffer, Resource::State newState) {\n  361          assert(pBuffer);\n  362:         assert(pBuffer->getApiHandle().getType() == VkResourceType::Buffer);\n  363  \n  364:         VkPipelineStageFlags srcStageMask = getShaderStageMask(pBuffer->getGlobalState(), true);\n  365:         VkPipelineStageFlags dstStageMask = getShaderStageMask(newState, false);\n  366  \n  367          if (srcStageMask != dstStageMask) {\n  ...\n  370              barrier.srcAccessMask = getAccessMask(pBuffer->getGlobalState());\n  371              barrier.dstAccessMask = getAccessMask(newState);\n  372:             barrier.buffer = pBuffer->getApiHandle();\n  373              barrier.offset = pBuffer->getGpuAddressOffset();\n  374              barrier.size = pBuffer->getSize();\n  375  \n  376:             vkCmdPipelineBarrier(mpLowLevelData->getCommandList(), srcStageMask, dstStageMask, 0, 0, nullptr, 1, &barrier, 0, nullptr);\n  377  \n  378              pBuffer->setGlobalState(newState);\n  ...\n  417              resourceBarrier(pDst, Resource::State::CopyDest);\n  418              resourceBarrier(pSrc, Resource::State::CopySource);\n  419:             vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, mipCount, regions.data());\n  420          }\n  421          mCommandsPending = true;\n  ...\n  440          region.extent.height = pDst->getHeight(mipLevel);\n  441          region.extent.depth = pDst->getDepth(mipLevel);\n  442:         vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &region);\n  443  \n  444          mCommandsPending = true;\n  ...\n  453          region.size = numBytes;\n  454  \n  455:         vkCmdCopyBuffer(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), pDst->getApiHandle(), 1, &region);\n  456          mCommandsPending = true;\n  457      }\n  ...\n  483          region.extent.depth = (size.z == -1) ? pSrc->getDepth(mipLevel) - srcOffset.z : size.z;\n  484  \n  485:         vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), getImageLayout(Resource::State::CopySource), pDst->getApiHandle(), getImageLayout(Resource::State::CopyDest), 1, &region);\n  486  \n  487          mCommandsPending = true;\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKDescriptorData.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_VULKAN_VKDESCRIPTORDATA_H_\n   29: #define SRC_FALCOR_CORE_API_VULKAN_VKDESCRIPTORDATA_H_\n   30  \n   31: #include \"Falcor/Core/API/Device.h\"\n   32  \n   33  namespace Falcor {\n   34  \n   35: struct DescriptorPoolApiData {\n   36      DescriptorHeapHandle descriptorPool;\n   37  };\n   38  \n   39: struct DescriptorSetApiData {\n   40:     DescriptorSetApiData(Device::SharedPtr device, VkDescriptorSetLayout l, VkDescriptorPool p, VkDescriptorSet s) : layout(l), set(s), pool(p), mpDevice(device) {}\n   41      \n   42      VkDescriptorSetLayout layout;\n   ..\n   46      Device::SharedPtr mpDevice;\n   47  \n   48:     ~DescriptorSetApiData() {\n   49:         vkFreeDescriptorSets(mpDevice->getApiHandle(), pool, 1, &set);\n   50:         vkDestroyDescriptorSetLayout(mpDevice->getApiHandle(), layout, nullptr);\n   51      }\n   52  };\n   ..\n   54  }  // namespace Falcor\n   55  \n   56: #endif  // SRC_FALCOR_CORE_API_VULKAN_VKDESCRIPTORDATA_H_\n   57  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/DescriptorPool.h\"\n   30: #include \"Falcor/Core/API/Device.h\"\n   31: #include \"Falcor/Core/API/Vulkan/VKDescriptorData.h\"\n   32  #include \"Falcor/Utils/Debug/debug.h\"\n   33  \n   ..\n   87  }\n   88  \n   89: void DescriptorPool::apiInit() {\n   90:     //LOG_DBG(\"DescriptorPool apiInit\");\n   91:     mpApiData = std::make_shared<DescriptorPool::ApiData>();\n   92      uint32_t totalDescCount = 0;\n   93      VkDescriptorPoolSize poolSizeForType[kTypeCount];\n   ..\n  111  \n  112      VkDescriptorPool pool;\n  113:     if (VK_FAILED(vkCreateDescriptorPool(mpDevice->getApiHandle(), &info, nullptr, &pool))) {\n  114          throw std::runtime_error(\"Error creating descriptor pool!\");\n  115      }\n  116:     mpApiData->descriptorPool = ApiHandle::create(mpDevice, pool);\n  117:     //LOG_DBG(\"DescriptorPool apiInit done\");\n  118  }\n  119  \n  120: const DescriptorPool::ApiHandle& DescriptorPool::getApiHandle(uint32_t heapIndex) const {\n  121:     return mpApiData->descriptorPool;\n  122  }\n  123  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/DescriptorSet.h\"\n   30: #include \"Falcor/Core/API/Device.h\"\n   31: #include \"Falcor/Core/API/Buffer.h\"\n   32  #include \"Falcor/Utils/Debug/debug.h\"\n   33  \n   ..\n   40      VkDescriptorType falcorToVkDescType(DescriptorPool::Type type);\n   41  \n   42:     void DescriptorSet::apiInit() {\n   43          auto layout = createDescriptorSetLayout(mpDevice, mLayout);\n   44          VkDescriptorSetAllocateInfo allocInfo = {};\n   45          allocInfo.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;\n   46:         allocInfo.descriptorPool = mpPool->getApiHandle(0);\n   47          allocInfo.descriptorSetCount = 1;\n   48          allocInfo.pSetLayouts = &layout;\n   49:         vk_call(vkAllocateDescriptorSets(mpPool->device()->getApiHandle(), &allocInfo, &mApiHandle));\n   50:         mpApiData = std::make_shared<DescriptorSetApiData>(mpPool->device(), layout, mpPool->getApiHandle(0), mApiHandle);\n   51      }\n   52  \n   ..\n   67          VkDescriptorImageInfo image;\n   68          VkDescriptorBufferInfo buffer;\n   69:         typename ViewType::ApiHandle handle = pView->getApiHandle();\n   70          VkBufferView texelBufferView = {};\n   71  \n   ..\n   76  \n   77              if (pBuffer->isTyped()) {\n   78:                 texelBufferView = pBuffer->getUAV()->getApiHandle();\n   79                  write.pTexelBufferView = &texelBufferView;\n   80                  write.pBufferInfo = nullptr;\n   81              } else {\n   82:                 buffer.buffer = pBuffer->getApiHandle();\n   83                  buffer.offset = pBuffer->getGpuAddressOffset();\n   84                  buffer.range = pBuffer->getSize();\n   ..\n   86                  write.pTexelBufferView = nullptr;\n   87              }\n   88:             write.pImageInfo = nullptr;\n   89          } else {\n   90              assert(handle.getType() == VkResourceType::Image);\n   ..\n   92              image.imageView = handle;\n   93              image.sampler = nullptr;\n   94:             write.pImageInfo = &image;\n   95          }\n   96  \n   ..\n  103  \n  104          //LOG_DBG(\"vkUpdateDescriptorSets 1\");\n  105:         vkUpdateDescriptorSets(device->getApiHandle(), 1, &write, 0, nullptr);\n  106      }\n  107  \n  108      void DescriptorSet::setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv) {\n  109:         setSrvUavCommon<false>(mpPool->device(), mApiHandle, mLayout.getRange(rangeIndex).baseRegIndex, descIndex, pSrv, mLayout.getRange(rangeIndex).type);\n  110      }\n  111  \n  112      void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav) {\n  113:         setSrvUavCommon<true>(mpPool->device(), mApiHandle, mLayout.getRange(rangeIndex).baseRegIndex, descIndex, pUav, mLayout.getRange(rangeIndex).type);\n  114      }\n  115  \n  ...\n  118          info.imageLayout = VK_IMAGE_LAYOUT_GENERAL;\n  119          info.imageView = nullptr;\n  120:         info.sampler = pSampler->getApiHandle();\n  121  \n  122          VkWriteDescriptorSet write = {};\n  123          write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;\n  124:         write.dstSet = mApiHandle;\n  125          write.dstBinding = mLayout.getRange(rangeIndex).baseRegIndex;\n  126          write.dstArrayElement = descIndex;\n  127          write.descriptorType = VK_DESCRIPTOR_TYPE_SAMPLER;\n  128          write.descriptorCount = 1;\n  129:         write.pImageInfo = &info;\n  130  \n  131          //LOG_DBG(\"vkUpdateDescriptorSets 2\");\n  132:         vkUpdateDescriptorSets(mpPool->device()->getApiHandle(), 1, &write, 0, nullptr);\n  133          //LOG_DBG(\"vkUpdateDescriptorSets 2 done\");\n  134      }\n  ...\n  140          const auto& pBuffer = dynamic_cast<const Buffer*>(pView->getResource());\n  141          assert(pBuffer);\n  142:         info.buffer = pBuffer->getApiHandle();\n  143          info.offset = pBuffer->getGpuAddressOffset();\n  144          info.range = pBuffer->getSize();\n  ...\n  146          VkWriteDescriptorSet write = {};\n  147          write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;\n  148:         write.dstSet = mApiHandle;\n  149          write.dstBinding = mLayout.getRange(rangeIndex).baseRegIndex;\n  150          write.dstArrayElement = descIndex;\n  ...\n  155          //LOG_DBG(\"Buffer %zu update descriptor set bindFlags %s\", pBuffer->id(),to_string(pBuffer->getBindFlags()).c_str());\n  156          //LOG_DBG(\"vkUpdateDescriptorSets 3\");\n  157:         vkUpdateDescriptorSets(mpPool->device()->getApiHandle(), 1, &write, 0, nullptr);\n  158          //LOG_DBG(\"vkUpdateDescriptorSets 3 done\");\n  159      }\n  160  \n  161      template<bool forGraphics>\n  162:     static void bindCommon(DescriptorSet::ApiHandle set, CopyContext* pCtx, const RootSignature* pRootSig, uint32_t bindLocation) {\n  163:         VkPipelineBindPoint bindPoint = forGraphics ? VK_PIPELINE_BIND_POINT_GRAPHICS : VK_PIPELINE_BIND_POINT_COMPUTE;\n  164          VkDescriptorSet vkSet = set;\n  165:         vkCmdBindDescriptorSets(pCtx->getLowLevelData()->getCommandList(), bindPoint, pRootSig->getApiHandle(), bindLocation, 1, &vkSet, 0, nullptr);\n  166      }\n  167  \n  168      void DescriptorSet::bindForGraphics(CopyContext* pCtx, const RootSignature* pRootSig, uint32_t rootIndex) {\n  169:         bindCommon<true>(mApiHandle, pCtx, pRootSig, rootIndex);\n  170      }\n  171  \n  172      void DescriptorSet::bindForCompute(CopyContext* pCtx, const RootSignature* pRootSig, uint32_t rootIndex) {\n  173:         bindCommon<false>(mApiHandle, pCtx, pRootSig, rootIndex);\n  174      }\n  175  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKDevice.cpp:\n   29  \n   30  #include \"Falcor/stdafx.h\"\n   31: #include \"Falcor/Core/API/Device.h\"\n   32: #include \"Falcor/Core/API/DeviceManager.h\"\n   33: #include \"Falcor/Core/API/DescriptorPool.h\"\n   34: #include \"Falcor/Core/API/GpuFence.h\"\n   35: #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n   36  #include \"Falcor/Utils/Debug/debug.h\"\n   37  #include \"Falcor.h\"\n   ..\n   45  \n   46  #ifdef DEFAULT_ENABLE_DEBUG_LAYER\n   47: VKAPI_ATTR VkBool32 VKAPI_CALL debugReportCallback(\n   48      VkDebugReportFlagsEXT       flags,\n   49      VkDebugReportObjectTypeEXT  objectType,\n   ..\n   92  }\n   93  \n   94: static uint32_t getCurrentBackBufferIndex(VkDevice device, uint32_t backBufferCount, DeviceApiData* pApiData) {\n   95:     VkFence fence = pApiData->presentFences.f[pApiData->presentFences.cur];\n   96      vk_call(vkWaitForFences(device, 1, &fence, false, -1));\n   97  \n   98:     pApiData->presentFences.cur = (pApiData->presentFences.cur + 1) % backBufferCount;\n   99:     fence = pApiData->presentFences.f[pApiData->presentFences.cur];\n  100      vkResetFences(device, 1, &fence);\n  101      uint32_t newIndex;\n  102:     vk_call(vkAcquireNextImageKHR(device, pApiData->swapchain, std::numeric_limits<uint64_t>::max(), nullptr, fence, &newIndex));\n  103      return newIndex;\n  104  }\n  105  \n  106: static bool initMemoryTypes(VkPhysicalDevice physicalDevice, DeviceApiData* pApiData) {\n  107      VkMemoryPropertyFlagBits bits[(uint32_t)Device::MemoryType::Count];\n  108      bits[(uint32_t)Device::MemoryType::Default] = VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT;\n  ...\n  111  \n  112      for(uint32_t i = 0 ; i < arraysize(bits) ; i++) {\n  113:         pApiData->vkMemoryTypeBits[i] = getMemoryBits(physicalDevice, bits[i]);\n  114:         if (pApiData->vkMemoryTypeBits[i] == 0) {\n  115              logError(\"Missing memory type \" + std::to_string(i));\n  116              return false;\n  ...\n  120  }\n  121  \n  122: bool Device::getApiFboData(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat, ResourceHandle &apiHandle) {\n  123      // https://github.com/SaschaWillems/Vulkan/blob/master/examples/offscreen/offscreen.cpp\n  124  \n  ...\n  144      imageInfo.tiling = VK_IMAGE_TILING_OPTIMAL;\n  145  \n  146:     auto result = vkCreateImage(mApiHandle, &imageInfo, nullptr, &image);\n  147      if (VK_FAILED(result)) {\n  148          throw std::runtime_error(\"Failed to create FBO texture.\");\n  ...\n  151      // Allocate the GPU memory\n  152      VkMemoryRequirements memRequirements;\n  153:     vkGetImageMemoryRequirements(mApiHandle, image, &memRequirements);\n  154  \n  155      VkDeviceMemory deviceMem;\n  ...\n  159      allocInfo.memoryTypeIndex = getVkMemoryType(Device::MemoryType::Default, memRequirements.memoryTypeBits);\n  160  \n  161:     vk_call(vkAllocateMemory(mApiHandle, &allocInfo, nullptr, &deviceMem));\n  162  \n  163:     vkBindImageMemory(mApiHandle, image, deviceMem, 0);\n  164      \n  165:     apiHandle = ResourceHandle::create(shared_from_this(), image, nullptr);\n  166      return true;\n  167  }\n  168  \n  169: bool Device::getApiFboData(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat, ResourceHandle apiHandles[kSwapChainBuffersCount], uint32_t& currentBackBufferIndex) {\n  170      uint32_t imageCount = 0;\n  171:     vkGetSwapchainImagesKHR(mApiHandle, mpApiData->swapchain, &imageCount, nullptr);\n  172:     //assert(imageCount == apiHandles.size());\n  173      assert(imageCount == kSwapChainBuffersCount);\n  174  \n  175      std::vector<VkImage> swapchainImages(imageCount);\n  176:     vkGetSwapchainImagesKHR(mApiHandle, mpApiData->swapchain, &imageCount, swapchainImages.data());\n  177      for (size_t i = 0; i < swapchainImages.size(); i++) {\n  178:         apiHandles[i] = ResourceHandle::create(shared_from_this(), swapchainImages[i], nullptr);\n  179      }\n  180  \n  181      // Get the back-buffer\n  182:     mCurrentBackBufferIndex = getCurrentBackBufferIndex(mApiHandle, kSwapChainBuffersCount, mpApiData);\n  183      return true;\n  184  }\n  185  \n  186: void Device::destroyApiObjects() {\n  187      PFN_vkDestroyDebugReportCallbackEXT DestroyDebugReportCallback = VK_NULL_HANDLE;\n  188:     DestroyDebugReportCallback = (PFN_vkDestroyDebugReportCallbackEXT)vkGetInstanceProcAddr(mApiHandle, \"vkDestroyDebugReportCallbackEXT\");\n  189      if(DestroyDebugReportCallback) {\n  190:         DestroyDebugReportCallback(mApiHandle, mpApiData->debugReportCallbackHandle, nullptr);\n  191      }\n  192  \n  193      if(!headless) \n  194:         vkDestroySwapchainKHR(mApiHandle, mpApiData->swapchain, nullptr);\n  195  \n  196:     for (auto& f : mpApiData->presentFences.f) {\n  197:         vkDestroyFence(mApiHandle, f, nullptr);\n  198      }\n  199:     safe_delete(mpApiData);\n  200  }\n  201  \n  ...\n  273  }\n  274  \n  275: VkInstance createInstance(DeviceApiData* pData, bool enableDebugLayer) {\n  276      // Initialize the layers\n  277      const auto layerProperties = enumarateInstanceLayersProperties();\n  ...\n  355  }\n  356  \n  357: VkPhysicalDevice initPhysicalDevice(VkInstance instance, uint8_t gpuId, DeviceApiData* pData, const Device::Desc& desc) {\n  358:     // Pick a device\n  359      VkPhysicalDevice physicalDevice = DeviceManager::instance().physicalDevices()[gpuId];\n  360  \n  ...\n  366      vkGetPhysicalDeviceMemoryProperties(physicalDevice, &pData->memoryProperties);\n  367  \n  368:     // Check that the device/driver supports the requested API version\n  369:     uint32_t vkApiVersion = VK_MAKE_VERSION(desc.apiMajorVersion, desc.apiMinorVersion, 0);\n  370:     if (vkApiVersion != 0 && pData->properties.apiVersion < vkApiVersion) {\n  371:         std::string reqVerStr = std::to_string(desc.apiMajorVersion) + \".\" + std::to_string(desc.apiMinorVersion);\n  372:         std::string supportedStr = std::to_string(VK_VERSION_MAJOR(pData->properties.apiVersion)) + \".\" + std::to_string(VK_VERSION_MINOR(pData->properties.apiVersion));\n  373:         logError(\"Vulkan device does not support requested API version. Requested version: \" + reqVerStr + \", Highest supported: \" + supportedStr);\n  374          return nullptr;\n  375      }\n  ...\n  408  }\n  409  \n  410: static void initDeviceQueuesInfo(const Device::Desc& desc, const DeviceApiData *pData, std::vector<VkDeviceQueueCreateInfo>& queueInfos, std::vector<CommandQueueHandle> cmdQueues[Device::kQueueTypeCount], std::vector<std::vector<float>>& queuePriorities) {\n  411      queuePriorities.resize(arraysize(pData->falcorToVulkanQueueType));\n  412  \n  ...\n  429  }\n  430  \n  431: VkDevice createLogicalDevice(VkPhysicalDevice physicalDevice, DeviceApiData *pData, const Device::Desc& desc, std::vector<CommandQueueHandle> cmdQueues[Device::kQueueTypeCount], VkPhysicalDeviceFeatures &deviceFeatures) {\n  432      // Features\n  433      vkGetPhysicalDeviceFeatures(physicalDevice, &deviceFeatures);\n  ...\n  484  }\n  485  \n  486: VkSurfaceKHR createSurface(VkInstance instance, VkPhysicalDevice physicalDevice, DeviceApiData *pData, const Window* pWindow) {\n  487      VkSurfaceKHR surface;\n  488  \n  ...\n  490      VkWin32SurfaceCreateInfoKHR createInfo = {};\n  491      createInfo.sType = VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR;\n  492:     createInfo.hwnd = pWindow->getApiHandle();\n  493      createInfo.hinstance = GetModuleHandle(nullptr);\n  494  \n  ...\n  497      VkXlibSurfaceCreateInfoKHR createInfo = {};\n  498      createInfo.sType = VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;\n  499:     createInfo.dpy = pWindow->getApiHandle().pDisplay;\n  500:     createInfo.window = pWindow->getApiHandle().window;\n  501  \n  502      VkResult result = vkCreateXlibSurfaceKHR(instance, &createInfo, nullptr, &surface);\n  ...\n  523      // Surface size\n  524      VkSurfaceCapabilitiesKHR surfaceCapabilities;\n  525:     vkGetPhysicalDeviceSurfaceCapabilitiesKHR(mApiHandle, mApiHandle, &surfaceCapabilities);\n  526      assert(surfaceCapabilities.supportedUsageFlags & (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_TRANSFER_SRC_BIT));\n  527  \n  ...\n  545  \n  546      uint32_t formatCount = 0;\n  547:     vkGetPhysicalDeviceSurfaceFormatsKHR(mApiHandle, mApiHandle, &formatCount, nullptr);\n  548      std::vector<VkSurfaceFormatKHR> surfaceFormats(formatCount);\n  549:     vkGetPhysicalDeviceSurfaceFormatsKHR(mApiHandle, mApiHandle, &formatCount, surfaceFormats.data());\n  550  \n  551      bool formatValid = false;\n  ...\n  564      // Select present mode\n  565      uint32_t presentModeCount = 0;\n  566:     vkGetPhysicalDeviceSurfacePresentModesKHR(mApiHandle, mApiHandle, &presentModeCount, nullptr);\n  567      std::vector<VkPresentModeKHR> presentModes(presentModeCount);\n  568:     vkGetPhysicalDeviceSurfacePresentModesKHR(mApiHandle, mApiHandle, &presentModeCount, presentModes.data());\n  569  \n  570      // Select present mode, FIFO for VSync, otherwise preferring IMMEDIATE -> MAILBOX -> FIFO\n  ...\n  587      VkSwapchainCreateInfoKHR info = {};\n  588      info.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;\n  589:     info.surface = mApiHandle;\n  590      uint32_t maxImageCount = surfaceCapabilities.maxImageCount ? surfaceCapabilities.maxImageCount : UINT32_MAX; // 0 means no limit on the number of images\n  591      info.minImageCount = clamp(kSwapChainBuffersCount, surfaceCapabilities.minImageCount, maxImageCount);\n  ...\n  604      info.oldSwapchain = VK_NULL_HANDLE;\n  605  \n  606:     if (VK_FAILED(vkCreateSwapchainKHR(mApiHandle, &info, nullptr, &mpApiData->swapchain))) {\n  607          logError(\"Could not create swapchain.\");\n  608          return false;\n  ...\n  610  \n  611      uint32_t swapChainCount = 0;\n  612:     vkGetSwapchainImagesKHR(mApiHandle, mpApiData->swapchain, &swapChainCount, nullptr);\n  613      LOG_DBG(\"swapChainCount is %u\", swapChainCount);\n  614      assert(swapChainCount == kSwapChainBuffersCount);\n  ...\n  617  }\n  618  \n  619: void Device::apiPresent() {\n  620      assert(!headless);  // presenting makes no sense in headless mode\n  621      VkPresentInfoKHR info = { VK_STRUCTURE_TYPE_PRESENT_INFO_KHR };\n  622      info.swapchainCount = 1;\n  623:     info.pSwapchains = &mpApiData->swapchain;\n  624:     info.pImageIndices = &mCurrentBackBufferIndex;\n  625      auto pQueue = mpRenderContext->getLowLevelData()->getCommandQueue();\n  626      assert(pQueue);\n  627      vk_call(vkQueuePresentKHR(pQueue, &info));\n  628:     mCurrentBackBufferIndex = getCurrentBackBufferIndex(mApiHandle, kSwapChainBuffersCount, mpApiData);\n  629  }\n  630  \n  ...\n  632   * Initialize vulkan device\n  633   */\n  634: bool Device::apiInit() {\n  635      const Desc desc;\n  636  \n  637:     mpApiData = new DeviceApiData;\n  638:     VkInstance instance = createInstance(mpApiData, desc.enableDebugLayer);\n  639      if (!instance) return false;\n  640  \n  641:     VkPhysicalDevice physicalDevice = initPhysicalDevice(instance, mGpuId, mpApiData, desc);\n  642      if (!physicalDevice) return false;\n  643      \n  644      VkSurfaceKHR surface;\n  645      if(!headless) {\n  646:         surface = createSurface(instance, physicalDevice, mpApiData, mpWindow.get());\n  647          if (!surface) return false;\n  648      } else {\n  ...\n  650      }\n  651  \n  652:     VkDevice device = createLogicalDevice(physicalDevice, mpApiData, desc, mCmdQueues, deviceFeatures);\n  653      if (!device) return false;\n  654      \n  655:     if (initMemoryTypes(physicalDevice, mpApiData) == false) return false;\n  656  \n  657:     mApiHandle = DeviceHandle::create(shared_from_this(), instance, physicalDevice, device, surface);\n  658      mGpuTimestampFrequency = getPhysicalDeviceLimits().timestampPeriod / (1000 * 1000);\n  659:     mPhysicalDeviceName = std::string(mpApiData->properties.deviceName);\n  660  \n  661      if(!headless) {\n  ...\n  664          }\n  665      \n  666:         mpApiData->presentFences.f.resize(kSwapChainBuffersCount);\n  667:         for (auto& f : mpApiData->presentFences.f) {\n  668              VkFenceCreateInfo info = { VK_STRUCTURE_TYPE_FENCE_CREATE_INFO };\n  669              info.flags = VK_FENCE_CREATE_SIGNALED_BIT;\n  ...\n  679  }\n  680  \n  681: void Device::apiResizeSwapChain(uint32_t width, uint32_t height, ResourceFormat colorFormat) {\n  682      assert(!headless);  // swapchain resize makes no sense in headless mode\n  683:     vkDestroySwapchainKHR(mApiHandle, mpApiData->swapchain, nullptr);\n  684      createSwapChain(colorFormat);\n  685  }\n  686  \n  687: void Device::apiResizeOffscreenFBO(uint32_t width, uint32_t height, ResourceFormat colorFormat) {\n  688      assert(headless);\n  689      mpOffscreenFbo = nullptr;\n  ...\n  699  bool Device::isExtensionSupported(const std::string& name) const\n  700  {\n  701:     //return Falcor::isExtensionSupported(name, mpApiData->deviceExtensions);\n  702      return true;\n  703  }\n  ...\n  714  }\n  715  \n  716: ApiCommandQueueType Device::getApiCommandQueueType(LowLevelContextData::CommandQueueType type) const {\n  717:     return mpApiData->falcorToVulkanQueueType[(uint32_t)type];\n  718  }\n  719  \n  720  uint32_t Device::getVkMemoryType(GpuMemoryHeap::Type falcorType, uint32_t memoryTypeBits) const {\n  721:     uint32_t mask = mpApiData->vkMemoryTypeBits[(uint32_t)falcorType] & memoryTypeBits;\n  722      assert(mask != 0);\n  723      return bitScanForward(mask);\n  ...\n  726  \n  727  uint32_t Device::getVkMemoryTypeNative(uint32_t typeBits, VkMemoryPropertyFlags properties, VkBool32 *memTypeFound) const {\n  728:     auto& deviceMemoryProperties = apiData()->memoryProperties;\n  729  \n  730      for (uint32_t i = 0; i < deviceMemoryProperties.memoryTypeCount; i++) {\n  ...\n  749  \n  750  const VkPhysicalDeviceLimits& Device::getPhysicalDeviceLimits() const {\n  751:     return mpApiData->deviceLimits;\n  752  }\n  753  \n  754  uint32_t Device::getDeviceVendorID() const {\n  755:     return mpApiData->properties.vendorID;\n  756  }\n  757  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKDevice.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_VULKAN_VKDEVICE_H_\n   29: #define SRC_FALCOR_CORE_API_VULKAN_VKDEVICE_H_\n   30  \n   31: #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n   32: #include \"Falcor/Core/API/Device.h\"\n   33  \n   34  namespace Falcor {\n   35  \n   36  #ifdef DEFAULT_ENABLE_DEBUG_LAYER\n   37: VKAPI_ATTR VkBool32 VKAPI_CALL debugReportCallback(\n   38      VkDebugReportFlagsEXT       flags,\n   39      VkDebugReportObjectTypeEXT  objectType,\n   ..\n   46  #endif\n   47  \n   48: struct DeviceApiData {\n   49      VkSwapchainKHR swapchain;\n   50      VkPhysicalDeviceProperties properties;\n   ..\n   65  };\n   66  \n   67: VkInstance createInstance(DeviceApiData* pData, bool enableDebugLayer);\n   68  \n   69  }  // namespace Falcor\n   70  \n   71: #endif  // SRC_FALCOR_CORE_API_VULKAN_VKDEVICE_H_\n   72  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKDeviceManager.cpp:\n   29  \n   30  #include \"Falcor/stdafx.h\"\n   31: #include \"Falcor/Core/API/DeviceManager.h\"\n   32: #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n   33: #include \"Falcor/Core/API/Vulkan/VKDevice.h\"\n   34  #include \"Falcor.h\"\n   35  \n   ..\n   48      const Device::Desc desc;\n   49  \n   50:     auto pApiData = new DeviceApiData;\n   51:     gVulkanInstance = createInstance(pApiData, desc.enableDebugLayer);\n   52      \n   53      if (!gVulkanInstance)\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n   30  \n   31  #include \"Falcor/stdafx.h\"\n   32: #include \"Falcor/Core/API/FBO.h\"\n   33: #include \"Falcor/Core/API/Device.h\"\n   34  #include \"VKState.h\"\n   35  \n   ..\n   41  \n   42  Fbo::~Fbo() {\n   43:     mpDevice->releaseResource(std::static_pointer_cast<VkBaseApiHandle>(mApiHandle));\n   44  }\n   45  \n   46: const Fbo::ApiHandle& Fbo::getApiHandle() const {\n   47      finalize();\n   48:     return mApiHandle;\n   49  }\n   50  \n   ..\n   54  }\n   55  \n   56: void Fbo::initApiHandle() const {\n   57      // Bind the color buffers\n   58      uint32_t arraySize = -1;\n   ..\n   64              assert(arraySize == -1 || arraySize == getRenderTargetView(i)->getViewInfo().arraySize);\n   65              arraySize = getRenderTargetView(i)->getViewInfo().arraySize;\n   66:             attachments[rtCount] = getRenderTargetView(i)->getApiHandle();\n   67              rtCount++;\n   68          }\n   ..\n   75              arraySize = getDepthStencilView()->getViewInfo().arraySize;\n   76          }\n   77:         attachments[rtCount] = getDepthStencilView()->getApiHandle();\n   78          rtCount++;\n   79      }\n   ..\n   83      initVkRenderPassInfo(*mpDesc, renderPassInfo);\n   84      VkRenderPass pass;\n   85:     vkCreateRenderPass(mpDevice->getApiHandle(), &renderPassInfo.info, nullptr, &pass);\n   86  \n   87      // Framebuffer\n   ..\n   97      VkFramebuffer frameBuffer;\n   98  \n   99:     vkCreateFramebuffer(mpDevice->getApiHandle(), &frameBufferInfo, nullptr, &frameBuffer);\n  100  \n  101:     if (mApiHandle) mpDevice->releaseResource(std::static_pointer_cast<VkBaseApiHandle>(mApiHandle));\n  102:     mApiHandle = ApiHandle::create(mpDevice, pass, frameBuffer);\n  103  }\n  104  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKFormats.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"API/Device.h\"\n   30  \n   31  namespace Falcor\n   ..\n  125      ResourceBindFlags getFormatBindFlags(Device::SharedPtr device, ResourceFormat format) {\n  126          VkFormatProperties p;\n  127:         vkGetPhysicalDeviceFormatProperties(device->getApiHandle(), getVkFormat(format), &p);\n  128  \n  129          auto convertFlags = [](VkFormatFeatureFlags vk) -> ResourceBindFlags\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKGpuFence.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Falcor/Core/API/GpuFence.h\"\n   30: #include \"Falcor/Core/API/Device.h\"\n   31: #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n   32  \n   33  namespace Falcor {\n   34  \n   35:     using ApiHandle = FenceHandle;\n   36  \n   37      // #VKTODO This entire class seems overly complicated. Need to make sure that there are no performance issues\n   ..\n   40          info.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;\n   41          VkFence fence;\n   42:         vkCreateFence(device->getApiHandle(), &info, nullptr, &fence);\n   43          return fence;\n   44      }\n   45  \n   46      void destroyFence(std::shared_ptr<Device> device, VkFence fence) {\n   47:         vkDestroyFence(device->getApiHandle(), fence, nullptr);\n   48      }\n   49  \n   50      void resetFence(std::shared_ptr<Device> device, VkFence fence) {\n   51:         vkResetFences(device->getApiHandle(), 1, &fence);\n   52      }\n   53  \n   ..\n   56          semaphoreInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;\n   57          VkSemaphore sem;\n   58:         vkCreateSemaphore(device->getApiHandle(), &semaphoreInfo, nullptr, &sem);\n   59          return sem;\n   60      };\n   61  \n   62      void destroySemaphore(std::shared_ptr<Device> device, VkSemaphore semaphore) {\n   63:         vkDestroySemaphore(device->getApiHandle(), semaphore, nullptr);\n   64      }\n   65  \n   66:     struct FenceApiData {\n   67:         FenceApiData(std::shared_ptr<Device> device) { \n   68              fenceQueue =  std::make_unique<SmartQueue<VkFence, createFence, destroyFence, resetFence>>(device);\n   69              semaphoreQueue = std::make_unique<SmartQueue<VkSemaphore, createSemaphore, destroySemaphore, nullptr>>(device);\n   ..\n  130  \n  131      GpuFence::~GpuFence() {\n  132:         safe_delete(mpApiData);\n  133      }\n  134  \n  135      GpuFence::SharedPtr GpuFence::create(std::shared_ptr<Device> device) {\n  136          SharedPtr pFence = SharedPtr(new GpuFence(device));\n  137:         pFence->mpApiData = new FenceApiData(device);\n  138          pFence->mCpuValue = 1;\n  139          return pFence;\n  ...\n  143          assert(pQueue);\n  144          mCpuValue++;\n  145:         VkFence fence = mpApiData->fenceQueue->getObject();\n  146:         VkSemaphore sem = mpApiData->semaphoreQueue->getObject();\n  147:         mpApiData->semaphoreWaitList.push_back(sem);\n  148  \n  149          VkSubmitInfo submit = {};\n  ...\n  154          static const uint32_t waitThreshold = 20;\n  155          static const uint32_t waitCount = 10;\n  156:         static const std::vector<VkPipelineStageFlags> waitStages(waitCount, VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT);\n  157  \n  158:         if (mpApiData->semaphoreWaitList.size() > waitThreshold) {\n  159              // #VKTODO syncGpu() is never actually called, we need to do some cleanup to make sure we don't allocate semaphors until we exhast the memory\n  160              // We insert a wait here. We should make sure it doesn't actually stall the queue\n  161              submit.pWaitDstStageMask = waitStages.data();\n  162              submit.waitSemaphoreCount = waitCount;\n  163:             submit.pWaitSemaphores = mpApiData->semaphoreWaitList.data();\n  164          }\n  165  \n  166          vk_call(vkQueueSubmit(pQueue, 1, &submit , fence));\n  167  \n  168:         if (mpApiData->semaphoreWaitList.size() > waitThreshold) {\n  169:             mpApiData->semaphoreWaitList.erase(mpApiData->semaphoreWaitList.begin(), mpApiData->semaphoreWaitList.begin() + waitCount);\n  170          }\n  171          return mCpuValue - 1;\n  172      }\n  173  \n  174:     const ApiHandle& GpuFence::getApiHandle() const {\n  175:         const auto& fence = mpApiData->semaphoreQueue->getObject(); // #VKTODO Figure this out. It is implemented like this based on the internal usage in VkDevice.cpp, but might not be what the user expects\n  176:         mpApiData->semaphoreWaitList.push_back(fence);\n  177          return fence;\n  178      }\n  ...\n  181          VkSubmitInfo submit = {};\n  182          submit.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;\n  183:         submit.waitSemaphoreCount = (uint32_t)mpApiData->semaphoreWaitList.size();\n  184:         submit.pWaitSemaphores = mpApiData->semaphoreWaitList.data();\n  185:         const std::vector<VkPipelineStageFlags> waitStages(submit.waitSemaphoreCount, VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT);\n  186          submit.pWaitDstStageMask = waitStages.data();\n  187  \n  188          vk_call(vkQueueSubmit(pQueue, 1, &submit, nullptr));\n  189:         mpApiData->semaphoreWaitList.clear();\n  190      }\n  191  \n  192:     void releaseSemaphores(FenceApiData* pApiData) {\n  193:         size_t sems = pApiData->semaphoreQueue->getActiveObjects().size();\n  194:         size_t fences = pApiData->fenceQueue->getActiveObjects().size();\n  195          assert(fences <= sems);\n  196          size_t fenceDelta = sems - fences;\n  197          // Make sure we don't release anything that's on the wait list\n  198:         size_t wait = pApiData->semaphoreWaitList.size();\n  199          assert(wait <= sems);\n  200          size_t waitDelta = sems - wait;\n  201          size_t count = std::min(waitDelta, fenceDelta);\n  202:         pApiData->semaphoreQueue->popFront(count);\n  203      }\n  204  \n  205      //void GpuFence::syncCpu()\n  206      void GpuFence::syncCpu(std::optional<uint64_t> val) {\n  207:         if (mpApiData->fenceQueue->hasActiveObjects() == false) return;\n  208  \n  209:         auto& activeFences = mpApiData->fenceQueue->getActiveObjects();\n  210          std::vector<VkFence> fenceVec(activeFences.begin(), activeFences.end());\n  211:         vk_call(vkWaitForFences(mpDevice->getApiHandle(), (uint32_t)fenceVec.size(), fenceVec.data(), true, UINT64_MAX));\n  212:         mpApiData->gpuValue += fenceVec.size();\n  213:         mpApiData->fenceQueue->popAllObjects();\n  214:         releaseSemaphores(mpApiData);  // Call this after popping the fences\n  215      }\n  216  \n  217      uint64_t GpuFence::getGpuValue() const {\n  218:         auto& activeFences = mpApiData->fenceQueue->getActiveObjects();\n  219          while (activeFences.size()) {\n  220              VkFence fence = activeFences.front();\n  221:             if (vkGetFenceStatus(mpDevice->getApiHandle(), fence) == VK_SUCCESS) {\n  222:                 mpApiData->fenceQueue->popFront();\n  223:                 mpApiData->gpuValue++;\n  224              } else {\n  225                  break;\n  226              }\n  227          }\n  228:         releaseSemaphores(mpApiData);\n  229:         return mpApiData->gpuValue;\n  230      }\n  231  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/GpuMemoryHeap.h\"\n   30: #include \"Falcor/Core/API/Buffer.h\"\n   31: #include \"Falcor/Core/API/Device.h\"\n   32  \n   33  namespace Falcor {\n   34  \n   35: Buffer::ApiHandle createBuffer(std::shared_ptr<Device> device, size_t size, Buffer::BindFlags bindFlags, GpuMemoryHeap::Type memType);\n   36  \n   37  void GpuMemoryHeap::initBasePageData(BaseData& data, size_t size) {\n   ..\n   39      data.pResourceHandle = createBuffer(mpDevice, size, Buffer::BindFlags::Constant | Buffer::BindFlags::Vertex | Buffer::BindFlags::Index, mType);\n   40      data.offset = 0;\n   41:     vk_call(vkMapMemory(mpDevice->getApiHandle(), data.pResourceHandle, 0, VK_WHOLE_SIZE, 0, (void**)&data.pData));\n   42  }\n   43  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKGpuTimer.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/GpuTimer.h\"\n   30: #include \"Falcor/Core/API/Device.h\"\n   31  \n   32  namespace Falcor {\n   33  \n   34:     void GpuTimer::apiBegin() {\n   35:         auto mpHeap = spHeap.lock()->getApiHandle();\n   36          vkCmdResetQueryPool(mpLowLevelData->getCommandList(), mpHeap, mStart, 2);\n   37:         vkCmdWriteTimestamp(mpLowLevelData->getCommandList(), VK_PIPELINE_STAGE_ALL_COMMANDS_BIT, mpHeap, mStart);\n   38      }\n   39  \n   40:     void GpuTimer::apiEnd() {\n   41:         auto mpHeap = spHeap.lock()->getApiHandle();\n   42:         vkCmdWriteTimestamp(mpLowLevelData->getCommandList(), VK_PIPELINE_STAGE_ALL_COMMANDS_BIT, mpHeap, mEnd);\n   43      }\n   44  \n   45:     void GpuTimer::apiResolve(uint64_t result[2]) {\n   46:         auto mpHeap = spHeap.lock()->getApiHandle();\n   47:         vk_call(vkGetQueryPoolResults(mpDevice->getApiHandle(), mpHeap, mStart, 2, sizeof(uint64_t) * 2, result, sizeof(result[0]), VK_QUERY_RESULT_64_BIT | VK_QUERY_RESULT_WAIT_BIT));\n   48      }\n   49  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp:\n   30  #include \"Falcor/stdafx.h\"\n   31  \n   32: #include \"Falcor/Core/API/GraphicsStateObject.h\"\n   33: #include \"Falcor/Core/API/FBO.h\"\n   34: #include \"Falcor/Core/API/Texture.h\"\n   35: #include \"Falcor/Core/API/Device.h\"\n   36: #include \"Falcor/Core/API/Vulkan/VKState.h\"\n   37  \n   38  namespace Falcor {\n   39  \n   40:     void GraphicsStateObject::apiInit() {\n   41          // Shader Stages\n   42:         std::vector<VkPipelineShaderStageCreateInfo> shaderStageInfos;\n   43          //initVkShaderStageInfo(mDesc.getProgramVersion().get(), shaderStageInfos);\n   44          initVkShaderStageInfo(mDesc.getProgramKernels(), shaderStageInfos);\n   ..\n   49  \n   50          // Input Assembly State\n   51:         VkPipelineInputAssemblyStateCreateInfo inputAssemblyInfo = {};\n   52          initVkInputAssemblyInfo(mDesc.getVao().get(), inputAssemblyInfo);\n   53          \n   54          // Viewport State\n   55          // Viewport and Scissors will be dynamic, but the count is still described here in the info struct\n   56:         VkPipelineViewportStateCreateInfo viewportStateInfo = {};\n   57:         viewportStateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;\n   58          viewportStateInfo.viewportCount = getMaxViewportCount(mpDevice);\n   59          viewportStateInfo.scissorCount = getMaxViewportCount(mpDevice);\n   60  \n   61          // Rasterizerization State\n   62:         VkPipelineRasterizationStateCreateInfo rasterizerInfo = {};\n   63          initVkRasterizerInfo(mDesc.getRasterizerState().get(), rasterizerInfo);\n   64  \n   65          // Multisample State\n   66:         VkPipelineMultisampleStateCreateInfo multisampleInfo = {};\n   67          bool enableSampleFrequency = mDesc.getProgramVersion() ? mDesc.getProgramVersion()->getReflector()->isSampleFrequency() : false;\n   68          initVkMultiSampleInfo(mDesc.getBlendState().get(), mDesc.getFboDesc(), mDesc.getSampleMask(), multisampleInfo, enableSampleFrequency);\n   69  \n   70          // Depth Stencil State\n   71:         VkPipelineDepthStencilStateCreateInfo depthStencilInfo = {};\n   72          initVkDepthStencilInfo(mDesc.getDepthStencilState().get(), depthStencilInfo);\n   73  \n   ..\n   77  \n   78          // Dynamic State\n   79:         VkPipelineDynamicStateCreateInfo dynamicInfo = {};\n   80          VkDynamicState dynamicStates[] = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR };\n   81:         dynamicInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;\n   82          dynamicInfo.dynamicStateCount = arraysize(dynamicStates);\n   83          dynamicInfo.pDynamicStates = dynamicStates;\n   84  \n   85:         // Create the pipeline object\n   86:         VkGraphicsPipelineCreateInfo pipelineCreateInfo = {};\n   87:         pipelineCreateInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;\n   88:         pipelineCreateInfo.pNext = NULL;\n   89:         pipelineCreateInfo.flags = 0;\n   90:         pipelineCreateInfo.stageCount = (uint32_t)shaderStageInfos.size();\n   91          \n   92:         pipelineCreateInfo.pStages = shaderStageInfos.data();\n   93:         pipelineCreateInfo.pVertexInputState = &vertexInputInfo.info;\n   94:         pipelineCreateInfo.pInputAssemblyState = &inputAssemblyInfo;\n   95:         pipelineCreateInfo.pTessellationState = NULL;\n   96:         pipelineCreateInfo.pViewportState = &viewportStateInfo;\n   97:         pipelineCreateInfo.pRasterizationState = &rasterizerInfo;\n   98:         pipelineCreateInfo.pMultisampleState = &multisampleInfo;\n   99:         pipelineCreateInfo.pDepthStencilState = &depthStencilInfo;\n  100:         pipelineCreateInfo.pColorBlendState = &blendInfo.info;\n  101:         pipelineCreateInfo.pDynamicState = &dynamicInfo;\n  102          \n  103:         pipelineCreateInfo.layout = mDesc.mpRootSignature->getApiHandle();\n  104:         pipelineCreateInfo.renderPass = mDesc.getRenderPass();\n  105:         pipelineCreateInfo.subpass = 0;\n  106:         pipelineCreateInfo.basePipelineHandle = VK_NULL_HANDLE;\n  107:         pipelineCreateInfo.basePipelineIndex = 0;\n  108  \n  109:         VkPipeline pipeline;\n  110:         if (VK_FAILED(vkCreateGraphicsPipelines(mpDevice->getApiHandle(), VK_NULL_HANDLE, 1, &pipelineCreateInfo, nullptr, &pipeline))) {\n  111:             throw std::runtime_error(\"Could not create graphics pipeline.\");\n  112          }\n  113:         mApiHandle = ApiHandle::create(mpDevice, pipeline);\n  114      }\n  115  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Falcor/Core/API/LowLevelContextData.h\"\n   30: #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n   31: #include \"Falcor/Core/API/Device.h\"\n   32  \n   33  namespace Falcor\n   34  {\n   35:     struct LowLevelContextApiData\n   36      {\n   37          FencedPool<VkCommandBuffer>::SharedPtr pCmdBufferAllocator;\n   ..\n   48          cmdBufAllocateInfo.commandBufferCount = 1;\n   49          VkCommandBuffer cmdBuf;\n   50:         vk_call(vkAllocateCommandBuffers(device->getApiHandle(), &cmdBufAllocateInfo, &cmdBuf));\n   51          return cmdBuf;\n   52      }\n   53  \n   54:     void initCommandList(LowLevelContextApiData* pApiData, const CommandListHandle& list)\n   55      {\n   56          // Begin recording\n   ..\n   58          beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;\n   59          beginInfo.flags = VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT;\n   60:         beginInfo.pInheritanceInfo = nullptr;\n   61          vk_call(vkBeginCommandBuffer(list, &beginInfo));\n   62:         pApiData->recordingCmds = true;\n   63      }\n   64  \n   ..\n   77          commandPoolCreateInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;\n   78          commandPoolCreateInfo.flags = VK_COMMAND_POOL_CREATE_TRANSIENT_BIT | VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;\n   79:         commandPoolCreateInfo.queueFamilyIndex = device->getApiCommandQueueType(type);\n   80          VkCommandPool pool;\n   81:         if (VK_FAILED(vkCreateCommandPool(device->getApiHandle(), &commandPoolCreateInfo, nullptr, &pool)))\n   82          {\n   83              logError(\"Could not create command pool\");\n   ..\n   85          }\n   86          pThis->mpAllocator = CommandAllocatorHandle::create(device, pool);\n   87:         pThis->mpApiData = new LowLevelContextApiData;\n   88:         pThis->mpApiData->pCmdBufferAllocator = FencedPool<VkCommandBuffer>::create(device, pThis->mpFence, createCommandBuffer, pThis.get());\n   89:         pThis->mpList = pThis->mpApiData->pCmdBufferAllocator->newObject();\n   90:         initCommandList(pThis->mpApiData, pThis->mpList);\n   91  \n   92          return pThis;\n   ..\n   95      LowLevelContextData::~LowLevelContextData()\n   96      {\n   97:         safe_delete(mpApiData);\n   98      }\n   99  \n  ...\n  101      void LowLevelContextData::flush()\n  102      {\n  103:         mpApiData->recordingCmds = false;\n  104          vk_call(vkEndCommandBuffer(mpList));\n  105          VkSubmitInfo submitInfo = {};\n  ...\n  114  \n  115          // Reset the command list: get a new one and begin recording\n  116:         mpList = mpApiData->pCmdBufferAllocator->newObject();\n  117:         initCommandList(mpApiData, mpList);\n  118      }\n  119  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VkQueryHeap.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/Device.h\"\n   30: #include \"Falcor/Core/API/QueryHeap.h\"\n   31  \n   32  namespace Falcor {\n   ..\n   38      case QueryHeap::Type::Occlusion:\n   39          return VK_QUERY_TYPE_OCCLUSION;\n   40:     case QueryHeap::Type::PipelineStats:\n   41:         return VK_QUERY_TYPE_PIPELINE_STATISTICS;\n   42      default:\n   43          should_not_get_here();\n   ..\n   51      info.queryCount = count;\n   52      info.queryType = getVkPoolType(type);\n   53:     info.pipelineStatistics = VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM;\n   54      VkQueryPool pool;\n   55:     vk_call(vkCreateQueryPool(pDevice->getApiHandle(), &info, nullptr, &pool));\n   56:     mApiHandle = ApiHandle::create(pDevice, pool);\n   57  }\n   58  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKRasterizerState.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/RasterizerState.h\"\n   30  \n   31  namespace Falcor\n   ..\n   33      RasterizerState::~RasterizerState() = default;\n   34  \n   35:     const RasterizerStateHandle& RasterizerState::getApiHandle() const\n   36      {\n   37:         UNSUPPORTED_IN_VULKAN(\"RasterizerState::getApiHandle()\");\n   38:         return mApiHandle;\n   39      }\n   40  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Falcor/Core/API/RenderContext.h\"\n   30: #include \"Falcor/Core/API/DescriptorPool.h\"\n   31: #include \"Falcor/Core/API/Device.h\"\n   32  #include \"Falcor/Utils/Debug/debug.h\"\n   33  #include \"glm/gtc/type_ptr.hpp\"\n   ..\n   69          range.aspectMask |= clearStencil ? VK_IMAGE_ASPECT_STENCIL_BIT : 0;\n   70  \n   71:         vkCmdClearDepthStencilImage(mpLowLevelData->getCommandList(), pDsv->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &val, 1, &range);\n   72          mCommandsPending = true;\n   73      }\n   ..\n  115              const Buffer* pVB = pVao->getVertexBuffer(i).get();\n  116              VkDeviceSize offset = pVB->getGpuAddressOffset();\n  117:             VkBuffer handle = pVB->getApiHandle();\n  118              vkCmdBindVertexBuffers(cmdList, i, 1, &handle, &offset);\n  119              pCtx->resourceBarrier(pVB, Resource::State::VertexBuffer);\n  120          }\n  121  \n  122:         const Buffer* pIB = pVao->getIndexBuffer().get();\n  123:         if (pIB) {\n  124:             VkDeviceSize offset = pIB->getGpuAddressOffset();\n  125:             VkBuffer handle = pIB->getApiHandle();\n  126              vkCmdBindIndexBuffer(cmdList, handle, offset, getVkIndexType(pVao->getIndexBufferFormat()));\n  127:             pCtx->resourceBarrier(pIB, Resource::State::IndexBuffer);\n  128          }\n  129      }\n  ...\n  132          // LOG_DBG(\"begin render pass\");\n  133          // Begin Render Pass\n  134:         const auto& fboHandle = pFbo->getApiHandle();\n  135          VkRenderPassBeginInfo beginInfo = {};\n  136          beginInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;\n  ...\n  181              }\n  182          }\n  183:         if (is_set(RenderContext::StateBindFlags::PipelineState, mBindFlags)) {\n  184:             vkCmdBindPipeline(mpLowLevelData->getCommandList(), VK_PIPELINE_BIND_POINT_GRAPHICS, pGSO->getApiHandle());\n  185          }\n  186          if (is_set(RenderContext::StateBindFlags::Fbo, mBindFlags)) {\n  ...\n  231          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  232          if (prepareForDraw(pState, pVars) == false) return;\n  233:         vkCmdDrawIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), 1, 0);\n  234          endVkDraw(mpLowLevelData->getCommandList());\n  235      }\n  ...\n  238          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  239          if (prepareForDraw(pState, pVars) == false) return;\n  240:         vkCmdDrawIndexedIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), maxCommandCount, sizeof(VkDrawIndexedIndirectCommand));\n  241          endVkDraw(mpLowLevelData->getCommandList());\n  242      }\n  ...\n  280              resolve.extent.depth = 1;\n  281  \n  282:             vkCmdResolveImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &resolve);\n  283          } else {\n  284              VkImageBlit blt;\n  ...\n  288              // Vulkan spec requires VK_FILTER_NEAREST if blit source is a depth and/or stencil format\n  289              VkFilter vkFilter = isDepthStencilFormat(pTexture->getFormat()) ? VK_FILTER_NEAREST : getVkFilter(filter);\n  290:             vkCmdBlitImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &blt, vkFilter);\n  291          }\n  292          mCommandsPending = true;\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VkResource.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Falcor/Core/API/Resource.h\"\n   30  \n   31  namespace Falcor {\n   32  \n   33:     void Resource::apiSetName() {\n   34          // Vulkan doesn't support resource naming\n   35      }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/ResourceViews.h\"\n   30: #include \"Falcor/Core/API/Resource.h\"\n   31: #include \"Falcor/Core/API/Device.h\"\n   32: #include \"Falcor/Core/API/DescriptorSet.h\"\n   33: #include \"Falcor/Core/API/Formats.h\"\n   34: #include \"Falcor/Core/API/Buffer.h\"\n   35  #include \"Falcor/Utils/Debug/debug.h\"\n   36  \n   ..\n   46  VkImageAspectFlags getAspectFlagsFromFormat(ResourceFormat format, bool ignoreStencil = false);\n   47  \n   48: template<typename ApiHandleType>\n   49: ResourceView<ApiHandleType>::~ResourceView() {\n   50      auto _pResource = getResource();\n   51      if (_pResource) {\n   52:         _pResource->device()->releaseResource(mApiHandle);\n   53      }\n   54  }\n   ..\n   63  \n   64  Texture::SharedPtr createBlackTexture(Device::SharedPtr pDevice) {\n   65:     uint8_t blackPixel[4] = { 0 };\n   66:     return Texture::create2D(pDevice, 1, 1, ResourceFormat::RGBA8Unorm, 1, 1, blackPixel, Resource::BindFlags::ShaderResource | Resource::BindFlags::RenderTarget | Resource::BindFlags::UnorderedAccess);\n   67  }\n   68  \n   ..\n  135  \n  136      outInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;\n  137:     outInfo.image = pTexture->getApiHandle();\n  138      outInfo.viewType = getViewType(pTexture->getType(), pTexture->getArraySize() > 1);\n  139      outInfo.format = getVkFormat(texFormat);\n  ...\n  159  \n  160      outInfo.sType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;\n  161:     outInfo.buffer = pBuffer->getApiHandle();\n  162      outInfo.offset = 0;\n  163      outInfo.range = VK_WHOLE_SIZE;\n  ...\n  170      assert(pResource);\n  171  \n  172:     switch (pResource->getApiHandle().getType()) {\n  173          case VkResourceType::Image: {\n  174              //LOG_DBG(\"createViewCommon image id %zu\", pSharedPtr->id());\n  175              VkImageViewCreateInfo info = initializeImageViewInfo((const Texture*)pResource, mostDetailedMip, mipCount, firstArraySlice, arraySize);\n  176              VkImageView imageView;\n  177:             vk_call(vkCreateImageView(pResource->device()->getApiHandle(), &info, nullptr, &imageView));\n  178              return VkResource<VkImageView, VkBufferView>::SharedPtr::create(pResource->device(), imageView, nullptr);\n  179          }\n  ...\n  186              if (pBuffer->isTyped()) {\n  187                  VkBufferViewCreateInfo info = initializeBufferViewInfo(pBuffer);\n  188:                 vk_call(vkCreateBufferView(pResource->device()->getApiHandle(), &info, nullptr, &bufferView));\n  189              }\n  190  \n  ...\n  218      }\n  219  \n  220:     if (pBuffer->getApiHandle().getType() == VkResourceType::Image) {\n  221          logWarning(\"Cannot create DepthStencilView from a texture!\");\n  222          return getNullBufferView(pDevice);\n  ...\n  232      if (buffer->isTyped()) {\n  233          VkBufferViewCreateInfo info = initializeBufferViewInfo(buffer);\n  234:         vk_call(vkCreateBufferView(pBuffer->device()->getApiHandle(), &info, nullptr, &bufferView));\n  235      }\n  236  \n  ...\n  245      }\n  246  \n  247:     if (pTexture->getApiHandle().getType() == VkResourceType::Buffer) {\n  248          logWarning(\"Cannot create DepthStencilView from a buffer!\");\n  249          return getNullView(pDevice);\n  ...\n  259      }\n  260  \n  261:     if (pTexture->getApiHandle().getType() == VkResourceType::Buffer) {\n  262          logWarning(\"Cannot create UnorderedAccessView from a buffer!\");\n  263          return getNullView(pDevice);\n  ...\n  279      }\n  280  \n  281:     if (pBuffer->getApiHandle().getType() == VkResourceType::Image) {\n  282          logWarning(\"Cannot create UnorderedAccessView from a texture!\");\n  283          return getNullBufferView(pBuffer->device());\n  ...\n  293      if (buffer->isTyped()) {\n  294          VkBufferViewCreateInfo info = initializeBufferViewInfo(buffer);\n  295:         vk_call(vkCreateBufferView(pDevice->getApiHandle(), &info, nullptr, &bufferView));\n  296      }\n  297  \n  ...\n  301  \n  302  RenderTargetView::~RenderTargetView() {\n  303:     static std::vector<RenderTargetView::ApiHandle> hdl;\n  304:     hdl.push_back(mApiHandle);\n  305  }\n  306  \n  ...\n  309  \n  310      // Check type\n  311:     if (pTexture->getApiHandle().getType() == VkResourceType::Buffer) {\n  312          logWarning(\"Cannot create RenderTargetView from a buffer!\");\n  313          return getNullView(pDevice);\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKRootSignature.cpp:\n   29  \n   30  #include \"Falcor/stdafx.h\"\n   31: #include \"Falcor/Core/API/RootSignature.h\"\n   32: #include \"Falcor/Core/API/Device.h\"\n   33  #include \"Falcor/Utils/Debug/debug.h\"\n   34  \n   ..\n   44          }\n   45  \n   46:         if ((visibility & ShaderVisibility::Pixel) != ShaderVisibility::None) {\n   47              flags |= VK_SHADER_STAGE_FRAGMENT_BIT;\n   48          }\n   ..\n   81              b.descriptorCount = range.descCount;\n   82              b.descriptorType = falcorToVkDescType(range.type);\n   83:             b.pImmutableSamplers = nullptr;\n   84              b.stageFlags = getShaderVisibility(layout.getVisibility());\n   85          \n   ..\n   93  \n   94          VkDescriptorSetLayout vkHandle;\n   95:         //vk_call(vkCreateDescriptorSetLayout(gpDevice->getApiHandle(), &layoutInfo, nullptr, &vkHandle));\n   96:         if (VK_FAILED(vkCreateDescriptorSetLayout(pDevice->getApiHandle(), &layoutInfo, nullptr, &vkHandle))){\n   97              LOG_FTL(\"vkCreateDescriptorSetLayout failed !!!\");\n   98          }\n   ..\n  101      }\n  102  \n  103:     void RootSignature::apiInit() {\n  104          // Find the max set index\n  105          uint32_t maxIndex = 0;\n  ...\n  116          }\n  117  \n  118:         VkPipelineLayoutCreateInfo pipelineLayoutInfo = {};\n  119:         pipelineLayoutInfo.pNext = nullptr;\n  120:         pipelineLayoutInfo.flags = 0;\n  121:         pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;\n  122:         pipelineLayoutInfo.pSetLayouts = vkSetLayouts.data();\n  123:         pipelineLayoutInfo.setLayoutCount = (uint32_t)vkSetLayouts.size();\n  124  \n  125:         VkPipelineLayout layout;\n  126:         vk_call(vkCreatePipelineLayout(mpDevice->getApiHandle(), &pipelineLayoutInfo, nullptr, &layout));\n  127:         mApiHandle = ApiHandle::create(mpDevice, layout, vkSetLayouts);\n  128  \n  129      }\n  ...\n  131      void RootSignature::bindForGraphics(CopyContext* pCtx) {\n  132      //    LOG_ERR(\"bindForGraphics\");\n  133:     //   VkPipelineBindPoint bindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS;\n  134      //    VkDescriptorSet vkSet = {};\n  135      //   uint32_t bindLocation = 0;\n  136:     //    vkCmdBindDescriptorSets(pCtx->getLowLevelData()->getCommandList(), bindPoint, mApiHandle, bindLocation, 1, &vkSet, 0, nullptr);\n  137      }\n  138  \n  139      void RootSignature::bindForCompute(CopyContext* pCtx) {\n  140      //    LOG_ERR(\"bindForCompute\");\n  141:     //    VkPipelineBindPoint bindPoint = VK_PIPELINE_BIND_POINT_COMPUTE;\n  142      //    VkDescriptorSet vkSet = {};\n  143      //    uint32_t bindLocation = 0;\n  144:     //    vkCmdBindDescriptorSets(pCtx->getLowLevelData()->getCommandList(), bindPoint, mApiHandle, bindLocation, 1, &vkSet, 0, nullptr);\n  145      }\n  146  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKSampler.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/Sampler.h\"\n   30: #include \"Falcor/Core/API/Device.h\"\n   31  #include \"VKState.h\"\n   32  \n   33  namespace Falcor {\n   34  \n   35: uint32_t Sampler::getApiMaxAnisotropy(std::shared_ptr<Device> device) {\n   36      return (uint32_t)device->getPhysicalDeviceLimits().maxSamplerAnisotropy;\n   37  }\n   ..\n   43      initVkSamplerInfo(pSampler.get(), info);\n   44      VkSampler handle;\n   45:     vk_call(vkCreateSampler(device->getApiHandle(), &info, nullptr, &handle));\n   46:     pSampler->mApiHandle = ApiHandle::create(device, handle);\n   47      return pSampler;\n   48  }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKShader.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"Falcor/Core/API/Shader.h\"\n   30: #include \"Falcor/Core/API/Device.h\"\n   31  \n   32  namespace Falcor {\n   ..\n   36      Shader::~Shader() = default;\n   37  \n   38:     bool Shader::init(const Blob& shaderBlob, const std::string& entryPointName, CompilerFlags flags, std::string& log) {\n   39          VkShaderModuleCreateInfo moduleCreateInfo = {};\n   40          moduleCreateInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;\n   ..\n   45  \n   46          VkShaderModule shaderModule;\n   47:         if (VK_FAILED(vkCreateShaderModule(mpDevice->getApiHandle(), &moduleCreateInfo, nullptr, &shaderModule))) {\n   48              logError(\"Could not create shader!\");\n   49              return false;\n   50          }\n   51:         mApiHandle = ApiHandle::create(mpDevice, shaderModule);\n   52          return true;\n   53      }\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp:\n   31  \n   32  #include \"Falcor/stdafx.h\"\n   33: #include \"Falcor/Core/API/Vulkan/VKSmartHandle.h\"\n   34: #include \"Falcor/Core/API/Device.h\"\n   35  \n   36  namespace Falcor {\n   37  \n   38:     template<> VkHandle<VkSwapchainKHR>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroySwapchainKHR(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   39:     template<> VkHandle<VkCommandPool>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyCommandPool(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   40:     template<> VkHandle<VkSemaphore>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroySemaphore(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   41:     template<> VkHandle<VkSampler>::~VkHandle() { if((mApiHandle != VK_NULL_HANDLE) && mpDevice) vkDestroySampler(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   42:     template<> VkHandle<VkDescriptorSetLayout>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyDescriptorSetLayout(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   43:     template<> VkHandle<VkPipeline>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyPipeline(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   44:     template<> VkHandle<VkShaderModule>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyShaderModule(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   45:     template<> VkHandle<VkPipelineLayout>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyPipelineLayout(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   46:     template<> VkHandle<VkDescriptorPool>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyDescriptorPool(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   47:     template<> VkHandle<VkQueryPool>::~VkHandle() { if ((mApiHandle != VK_NULL_HANDLE) && mpDevice) vkDestroyQueryPool(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   48  \n   49      VkDeviceData::~VkDeviceData() {\n   ..\n   66                  case VkResourceType::Image:\n   67                      if (mImage) {\n   68:                         vkDestroyImage(mpDevice->getApiHandle(), mImage, nullptr);\n   69                      }\n   70                      break;\n   71                  case VkResourceType::Buffer:\n   72                      if (mBuffer) {\n   73:                         vkDestroyBuffer(mpDevice->getApiHandle(), mBuffer, nullptr);\n   74                      }\n   75                      break;\n   ..\n   77                      should_not_get_here();\n   78              }\n   79:             vkFreeMemory(mpDevice->getApiHandle(), mDeviceMem, nullptr);\n   80          }\n   81      }\n   ..\n   90              case VkResourceType::Image:\n   91                  if (mImage) {\n   92:                     vkDestroyImageView(mpDevice->getApiHandle(), mImage, nullptr);\n   93                  }\n   94                  break;\n   95              case VkResourceType::Buffer:\n   96                  if (mBuffer) {\n   97:                     vkDestroyBufferView(mpDevice->getApiHandle(), mBuffer, nullptr);\n   98                  }\n   99                  break;\n  ...\n  105      VkFbo::~VkFbo() {\n  106          if (mpDevice) {\n  107:             vkDestroyRenderPass(mpDevice->getApiHandle(), mVkRenderPass, nullptr);\n  108:             vkDestroyFramebuffer(mpDevice->getApiHandle(), mVkFbo, nullptr);\n  109          }\n  110      }\n  111  \n  112      VkRootSignature::~VkRootSignature() {\n  113:         vkDestroyPipelineLayout(mpDevice->getApiHandle(), mApiHandle, nullptr);\n  114          for (auto& s : mSets) {\n  115:             vkDestroyDescriptorSetLayout(mpDevice->getApiHandle(), s, nullptr);\n  116          }\n  117      }\n  ...\n  124      template VkHandle<VkSampler>::~VkHandle();\n  125      template VkHandle<VkDescriptorSetLayout>::~VkHandle();\n  126:     template VkHandle<VkPipeline>::~VkHandle();\n  127      template VkHandle<VkShaderModule>::~VkHandle();\n  128      template VkHandle<VkDescriptorPool>::~VkHandle();\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKSmartHandle.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_VULKAN_VKSMARTHANDLE_H_\n   29: #define SRC_FALCOR_CORE_API_VULKAN_VKSMARTHANDLE_H_\n   30  \n   31  #include <memory>\n   ..\n   33  \n   34  #include \"Falcor/Core/Framework.h\"\n   35: //#include \"Falcor/Core/API/Device.h\"\n   36  \n   37  namespace Falcor {\n   ..\n   39  class Device;\n   40  \n   41: class VkBaseApiHandle : public std::enable_shared_from_this<VkBaseApiHandle> {\n   42   public:\n   43:     using SharedPtr = std::shared_ptr<VkBaseApiHandle>;\n   44:     virtual ~VkBaseApiHandle() = default;\n   45  \n   46   protected:\n   47:     VkBaseApiHandle(std::shared_ptr<Device> device) { mpDevice = device; }\n   48  \n   49   protected:\n   ..\n   51  };\n   52  \n   53: template<typename ApiHandle>\n   54: class VkHandle : public VkBaseApiHandle, public inherit_shared_from_this<VkBaseApiHandle, VkHandle<ApiHandle>> {\n   55   public:\n   56:     class SharedPtr : public std::shared_ptr<VkHandle<ApiHandle>> {\n   57       public:\n   58          SharedPtr() = default;\n   59:         explicit SharedPtr(VkHandle<ApiHandle>* pHandle) : std::shared_ptr<VkHandle<ApiHandle>>(pHandle) {}\n   60:         static SharedPtr create(std::shared_ptr<Device> device, ApiHandle handle) { return SharedPtr(new VkHandle(device, handle)); }\n   61:         operator ApiHandle() const { return get()->mApiHandle; }\n   62  \n   63       private:\n   64:         VkHandle<ApiHandle>* get() const { return std::shared_ptr< VkHandle<ApiHandle>>::get(); }\n   65      };\n   66  \n   ..\n   72   private:\n   73      friend class SharedPtr;\n   74:     explicit VkHandle(std::shared_ptr<Device> device, const ApiHandle& apiHandle) : VkBaseApiHandle(device), mApiHandle(apiHandle) {}\n   75:     ApiHandle mApiHandle;\n   76  };\n   77  \n   78: class VkRootSignature : public VkBaseApiHandle, public inherit_shared_from_this<VkBaseApiHandle, VkRootSignature> {\n   79   public:\n   80      class SharedPtr : public std::shared_ptr<VkRootSignature> {\n   ..\n   82          SharedPtr() = default;\n   83          explicit SharedPtr(VkRootSignature* pHandle) : std::shared_ptr<VkRootSignature>(pHandle) {}\n   84:         static SharedPtr create(std::shared_ptr<Device> device, VkPipelineLayout layout, const std::vector<VkDescriptorSetLayout>& sets) { return SharedPtr(new VkRootSignature(device ,layout, sets)); }\n   85:         operator VkPipelineLayout() const { return get()->mApiHandle; }\n   86  \n   87       private:\n   ..\n   93   private:\n   94      friend class SharedPtr;\n   95:     VkRootSignature(std::shared_ptr<Device> device, VkPipelineLayout layout, const std::vector<VkDescriptorSetLayout>& sets) : VkBaseApiHandle(device), mApiHandle(layout), mSets(sets) {}\n   96:     VkPipelineLayout mApiHandle;\n   97      std::vector<VkDescriptorSetLayout> mSets;\n   98  };\n   99  \n  100: class VkDeviceData : public VkBaseApiHandle, public inherit_shared_from_this<VkBaseApiHandle, VkDeviceData> {\n  101   public:\n  102      class SharedPtr : public std::shared_ptr<VkDeviceData> {\n  ...\n  122      friend SharedPtr;\n  123      VkDeviceData(std::shared_ptr<Device> device, VkInstance instance, VkPhysicalDevice physicalDevice, VkDevice vkdevice, VkSurfaceKHR surface) :\n  124:         VkBaseApiHandle(device), mInstance(instance), mPhysicalDevice(physicalDevice), mLogicalDevice(vkdevice), mSurface(surface) {}\n  125      VkInstance          mInstance;\n  126      VkPhysicalDevice    mPhysicalDevice;\n  ...\n  136  \n  137  template<typename ImageType, typename BufferType>\n  138: class VkResource : public VkBaseApiHandle, public inherit_shared_from_this<VkBaseApiHandle, VkResource<ImageType, BufferType>> {\n  139   public:\n  140      class SharedPtr : public std::shared_ptr<VkResource<ImageType, BufferType>> {\n  ...\n  171   private:\n  172      friend SharedPtr;\n  173:     VkResource(std::shared_ptr<Device> device, ImageType image, VkDeviceMemory mem) : VkBaseApiHandle(device), mType(VkResourceType::Image), mImage(image), mDeviceMem(mem) { }\n  174      \n  175:     VkResource(std::shared_ptr<Device> device, BufferType buffer, VkDeviceMemory mem) : VkBaseApiHandle(device), mType(VkResourceType::Buffer), mBuffer(buffer), mDeviceMem(mem) { }\n  176  \n  177      VkResourceType mType = VkResourceType::None;\n  ...\n  181  };\n  182  \n  183: class VkFbo : public VkBaseApiHandle {\n  184   public:\n  185      class SharedPtr : public std::shared_ptr<VkFbo> {\n  ...\n  202   private:\n  203      friend SharedPtr;\n  204:     VkFbo(std::shared_ptr<Device> device, VkRenderPass renderPass, VkFramebuffer fbo) : VkBaseApiHandle(device), mVkRenderPass(renderPass), mVkFbo(fbo) {}\n  205      VkRenderPass mVkRenderPass = VK_NULL_HANDLE;\n  206      VkFramebuffer mVkFbo = VK_NULL_HANDLE;\n  ...\n  213  template<> VkHandle<VkSampler>::~VkHandle();\n  214  template<> VkHandle<VkDescriptorSetLayout>::~VkHandle();\n  215: template<> VkHandle<VkPipeline>::~VkHandle();\n  216  template<> VkHandle<VkShaderModule>::~VkHandle();\n  217: template<> VkHandle<VkPipelineLayout>::~VkHandle();\n  218  template<> VkHandle<VkDescriptorPool>::~VkHandle();\n  219  template<> VkHandle<VkQueryPool>::~VkHandle();\n  ...\n  224  }  // namespace Falcor\n  225  \n  226: #endif  // SRC_FALCOR_CORE_API_VULKAN_VKSMARTHANDLE_H_\n  227  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKState.cpp:\n   28  #include \"Falcor/stdafx.h\"\n   29  #include \"VKState.h\"\n   30: #include \"Falcor/Core/API/FBO.h\"\n   31: #include \"Falcor/Core/API/Device.h\"\n   32  \n   33  #include \"Falcor/Utils/Debug/debug.h\"\n   ..\n   43              case ShaderType::Vertex:\n   44                  return VK_SHADER_STAGE_VERTEX_BIT;\n   45:             case ShaderType::Pixel:\n   46                  return VK_SHADER_STAGE_FRAGMENT_BIT;\n   47              case ShaderType::Geometry:\n   ..\n   59      }\n   60  \n   61:     void initVkShaderStageInfo(const ProgramKernels::SharedConstPtr& pProgramKernels, std::vector<VkPipelineShaderStageCreateInfo>& infosOut) {\n   62          infosOut.clear();\n   63  \n   ..\n   68  \n   69              if (pShader != nullptr) {\n   70:                 VkPipelineShaderStageCreateInfo info = {};\n   71:                 info.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;\n   72                  info.stage = getVkShaderStage(type);\n   73:                 info.module = pShader->getApiHandle();\n   74                  info.pName = \"main\";\n   75                  infosOut.push_back(info);\n   ..\n  147      void initVkBlendInfo(const Fbo::Desc& fboDesc, const BlendState* pState, ColorBlendStateCreateInfo& infoOut) {\n  148          infoOut.info = {};\n  149:         infoOut.info.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;\n  150          infoOut.info.logicOpEnable = VK_FALSE;\n  151  \n  ...\n  157          for (uint32_t i = 0; i < (uint32_t)infoOut.attachmentStates.size(); i++) {\n  158              const BlendState::Desc::RenderTargetDesc& rtDesc = pState->getRtDesc(i);\n  159:             VkPipelineColorBlendAttachmentState& state = infoOut.attachmentStates[i];\n  160              state.blendEnable = vkBool(rtDesc.blendEnabled);\n  161              state.srcColorBlendFactor = getVkBlendFactor(rtDesc.srcRgbFunc);\n  ...\n  209      }\n  210  \n  211:     void initVkRasterizerInfo(const RasterizerState* pState, VkPipelineRasterizationStateCreateInfo& infoOut) {\n  212          infoOut = {};\n  213  \n  214:         infoOut.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;\n  215          infoOut.depthClampEnable = vkBool(pState->isDepthClampEnabled());\n  216          infoOut.rasterizerDiscardEnable = VK_FALSE; // #VKTODO We can set it to true if the PS and depth are disabled\n  ...\n  289      }\n  290  \n  291:     void initVkDepthStencilInfo(const DepthStencilState* pState, VkPipelineDepthStencilStateCreateInfo& infoOut) {\n  292          infoOut = {};\n  293  \n  294:         infoOut.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;\n  295          infoOut.depthTestEnable = vkBool(pState->isDepthTestEnabled());\n  296          infoOut.depthWriteEnable = vkBool(pState->isDepthWriteEnabled());\n  ...\n  361          // Now put together the actual layout create info\n  362          infoOut.info = {};\n  363:         infoOut.info.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;\n  364          infoOut.info.vertexBindingDescriptionCount = (uint32_t)infoOut.bindingDescs.size();\n  365          infoOut.info.pVertexBindingDescriptions = infoOut.bindingDescs.data();\n  ...\n  439      }\n  440  \n  441:     void initVkMultiSampleInfo(const BlendState* pState, const Fbo::Desc& fboDesc, const uint32_t& sampleMask, VkPipelineMultisampleStateCreateInfo& infoOut, bool enableSampleFrequency) {\n  442          infoOut = {};\n  443  \n  444:         infoOut.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;\n  445          infoOut.rasterizationSamples = (VkSampleCountFlagBits)fboDesc.getSampleCount();\n  446          infoOut.sampleShadingEnable = enableSampleFrequency;\n  ...\n  467      }\n  468  \n  469:     void initVkInputAssemblyInfo(const Vao* pVao, VkPipelineInputAssemblyStateCreateInfo& infoOut) {\n  470          infoOut = {};\n  471:         infoOut.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;\n  472          infoOut.topology = getVkPrimitiveTopology(pVao->getPrimitiveTopology());\n  473          infoOut.primitiveRestartEnable = (pVao->getPrimitiveTopology() == Vao::Topology::TriangleStrip); // Following the DX convention\n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKState.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_CORE_API_VULKAN_VKSTATE_H_\n   29: #define SRC_FALCOR_CORE_API_VULKAN_VKSTATE_H_\n   30  \n   31: #include \"Falcor/Core/API/GraphicsStateObject.h\"\n   32  \n   33  namespace Falcor {\n   34  \n   35      struct ColorBlendStateCreateInfo {\n   36:         std::vector<VkPipelineColorBlendAttachmentState> attachmentStates;\n   37          uint32_t attachmentCount = 0;\n   38:         VkPipelineColorBlendStateCreateInfo info;\n   39      };\n   40  \n   ..\n   42          std::vector<VkVertexInputBindingDescription> bindingDescs;\n   43          std::vector<VkVertexInputAttributeDescription> attribDescs;\n   44:         VkPipelineVertexInputStateCreateInfo info;\n   45      };\n   46  \n   ..\n   53      };\n   54  \n   55:     //void initVkShaderStageInfo(const ProgramVersion* pProgram, std::vector<VkPipelineShaderStageCreateInfo>& infosOut);\n   56:     void initVkShaderStageInfo(const ProgramKernels::SharedConstPtr& pProgramKernels, std::vector<VkPipelineShaderStageCreateInfo>& infosOut);\n   57      void initVkBlendInfo(const Fbo::Desc& fboDesc, const BlendState* pState, ColorBlendStateCreateInfo& infoOut);\n   58:     void initVkRasterizerInfo(const RasterizerState* pState, VkPipelineRasterizationStateCreateInfo& infoOut);\n   59:     void initVkDepthStencilInfo(const DepthStencilState* pState, VkPipelineDepthStencilStateCreateInfo& infoOut);\n   60      void initVkVertexLayoutInfo(const VertexLayout* pLayout, VertexInputStateCreateInfo& infoOut, ProgramReflection const* pReflector);\n   61      void initVkSamplerInfo(const Sampler* pSampler, VkSamplerCreateInfo& infoOut);\n   62:     void initVkMultiSampleInfo(const BlendState* pState, const Fbo::Desc& fboDesc, const uint32_t& sampleMask, VkPipelineMultisampleStateCreateInfo& infoOut, bool enableSampleFrequency);\n   63:     void initVkInputAssemblyInfo(const Vao* pVao, VkPipelineInputAssemblyStateCreateInfo& infoOut);\n   64      void initVkRenderPassInfo(const Fbo::Desc& fboDesc, RenderPassCreateInfo& infoOut);\n   65  \n   ..\n   68  }  // namespace Falcor\n   69  \n   70: #endif  // SRC_FALCOR_CORE_API_VULKAN_VKSTATE_H_\n   71  \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n   29  \n   30  #include \"Falcor/stdafx.h\"\n   31: #include \"Falcor/Core/API/Texture.h\"\n   32: #include \"Falcor/Core/API/Device.h\"\n   33: #include \"Falcor/Core/API/Resource.h\"\n   34: #include \"Falcor/Core/API/SparseResourceManager.h\"\n   35  \n   36: #include \"Falcor/Core/API/Vulkan/VKDevice.h\"\n   37  \n   38  namespace Falcor {\n   ..\n   47      }\n   48  \n   49:     struct TextureApiData {\n   50      };\n   51  \n   ..\n   56          if (mpDevice ) {\n   57              //if (mImage != VK_NULL_HANDLE)\n   58:             //    vkDestroyImage(mpDevice->getApiHandle(), mImage, nullptr);\n   59              \n   60              if (mBindSparseSemaphore != VK_NULL_HANDLE)\n   61:                 vkDestroySemaphore(mpDevice->getApiHandle(), mBindSparseSemaphore, nullptr);\n   62  \n   63              for( auto pPage: mPages)\n   ..\n   65  \n   66              for (auto bind : mOpaqueMemoryBinds)\n   67:                 vkFreeMemory(mpDevice->getApiHandle(), bind.memory, nullptr);\n   68          \n   69:             mpDevice->releaseResource(std::static_pointer_cast<VkBaseApiHandle>(mApiHandle));\n   70          }\n   71      }\n   ..\n  136      static VkImageTiling getFormatImageTiling(std::shared_ptr<Device> device, VkFormat format, VkImageUsageFlags usage) {\n  137          VkFormatProperties p;\n  138:         vkGetPhysicalDeviceFormatProperties(device->getApiHandle(), format, &p);\n  139          auto featureBits = getFormatFeatureBitsFromUsage(usage);\n  140          if ((p.optimalTilingFeatures & featureBits) == featureBits) return VK_IMAGE_TILING_OPTIMAL;\n  ...\n  174  \n  175          mBindSparseInfo.imageBindCount = (mImageMemoryBindInfo.bindCount > 0) ? 1 : 0;\n  176:         mBindSparseInfo.pImageBinds = &mImageMemoryBindInfo;\n  177  \n  178          // Opaque image memory binds for the mip tail\n  ...\n  181          mOpaqueMemoryBindInfo.pBinds = mOpaqueMemoryBinds.data();\n  182          mBindSparseInfo.imageOpaqueBindCount = (mOpaqueMemoryBindInfo.bindCount > 0) ? 1 : 0;\n  183:         mBindSparseInfo.pImageOpaqueBinds = &mOpaqueMemoryBindInfo;\n  184  \n  185  \n  ...\n  202      }\n  203  \n  204:     void Texture::apiInit(const void* pData, bool autoGenMips) {\n  205          if (mImage != VK_NULL_HANDLE) {\n  206:             LOG_WARN(\"Texture api already initialized !!!\");\n  207              return;\n  208          }\n  ...\n  240          mState.global = (pData && !mIsSparse ) ? Resource::State::PreInitialized : Resource::State::Undefined;\n  241  \n  242:         auto result = vkCreateImage(mpDevice->getApiHandle(), &imageCreateInfo, nullptr, &mImage);\n  243          if (VK_FAILED(result)) {\n  244              mImage = VK_NULL_HANDLE;\n  ...\n  246          }\n  247  \n  248:         mApiHandle = ApiHandle::create(mpDevice, mImage, VK_NULL_HANDLE);\n  249          \n  250          if (mIsSparse) {\n  ...\n  255          }\n  256  \n  257:         vkGetImageMemoryRequirements(mpDevice->getApiHandle(), mImage, &mMemRequirements);\n  258          std::cout << \"Image memory requirements:\" << std::endl;\n  259          std::cout << \"\\t Size: \" << mMemRequirements.size << std::endl;\n  ...\n  261  \n  262          if (mIsSparse) {\n  263:             std::cout << \"Sparse address space size: \" << mpDevice->apiData()->properties.limits.sparseAddressSpaceSize << std::endl;\n  264              // Check requested image size against hardware sparse limit            \n  265:             if (mMemRequirements.size > mpDevice->apiData()->properties.limits.sparseAddressSpaceSize) {\n  266                  LOG_ERR(\"Error: Requested sparse image size exceeds supports sparse address space size !!!\");\n  267                  return;\n  ...\n  272              uint32_t sparseMemoryReqsCount = 32;\n  273              std::vector<VkSparseImageMemoryRequirements> sparseMemoryReqs(sparseMemoryReqsCount);\n  274:             vkGetImageSparseMemoryRequirements(mpDevice->getApiHandle(), mImage, &sparseMemoryReqsCount, sparseMemoryReqs.data());\n  275              \n  276              if (sparseMemoryReqsCount == 0) {\n  ...\n  280              sparseMemoryReqs.resize(sparseMemoryReqsCount);\n  281              // Get actual requirements\n  282:             vkGetImageSparseMemoryRequirements(mpDevice->getApiHandle(), mImage, &sparseMemoryReqsCount, sparseMemoryReqs.data());\n  283  \n  284              std::cout << \"Sparse image memory requirements: \" << sparseMemoryReqsCount << std::endl;\n  ...\n  358                      lastBlockExtent.z = (extent.depth % imageGranularity.depth) ? extent.depth % imageGranularity.depth : imageGranularity.depth;\n  359  \n  360:                     LOG_DBG(\"apiInit mip level %u sparse binds count: %u %u %u\", mipLevel, sparseBindCounts.x, sparseBindCounts.y, sparseBindCounts.z);\n  361  \n  362                      // @todo: Comment\n  ...\n  403  \n  404                      VkDeviceMemory deviceMemory;\n  405:                     if ( VK_FAILED(vkAllocateMemory(mpDevice->getApiHandle(), &memAllocInfo, nullptr, &deviceMemory)) ) {\n  406                          LOG_ERR(\"Could not allocate memory !!!\");\n  407                          return;\n  ...\n  431              semaphoreCreateInfo.flags = 0;\n  432  \n  433:             if ( VK_FAILED(vkCreateSemaphore(mpDevice->getApiHandle(), &semaphoreCreateInfo, nullptr, &mBindSparseSemaphore)) ) {\n  434                  LOG_ERR(\"Could not create semaphore !!!\");\n  435                  return;\n  ...\n  444              VkDeviceMemory deviceMem = VK_NULL_HANDLE;\n  445              deviceMem = allocateDeviceMemory(mpDevice, Device::MemoryType::Default, mMemRequirements.memoryTypeBits, mMemRequirements.size);\n  446:             vkBindImageMemory(mpDevice->getApiHandle(), mImage, deviceMem, 0);\n  447          }\n  448          \n\n/home/max/dev/Lava/src/Falcor/Core/API/Vulkan/VKVao.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"API/VAO.h\"\n   30  \n   31  namespace Falcor\n   32  {\n   33:     const VaoHandle& Vao::getApiHandle() const\n   34      {\n   35:         return mApiHandle;\n   36      }\n   37  }\n\n/home/max/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n   34  #include \"Falcor/Utils/StringUtils.h\"\n   35  #include \"Falcor/Utils/Debug/debug.h\"\n   36: #include \"Falcor/Core/API/CopyContext.h\"\n   37: #include \"Falcor/Core/API/Device.h\"\n   38  \n   39  #include <slang/slang.h>\n   ..\n  769          // and as a result we need some extra bytes in our underlying constant buffer.\n  770          //\n  771:         // The Slang reflection API can tell us the size of the unspecialized part with\n  772          // `getSize()` above, and can tell us the size required for all the \"pending\"\n  773          // data that couldn't be laid out until specialization was performed (using\n  ...\n  775          // doesn't account for the possibility of padding required for alignment.\n  776          //\n  777:         // There are actually Slang reflection APIs that could tell us what we\n  778          // need to know (the starting offset of this extra \"pending\" data),\n  779          // but the way the Falcor `ParameterBlockReflection` is structured today,\n  ...\n  783          // alignment.\n  784          //\n  785:         // TODO: Use the Slang reflection API in a more refined fashion.\n  786          //\n  787          requiredSize += pSlangPendingTypeLayout->getSize() + 16;\n\n/home/max/dev/Lava/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n   32  \n   33  #include \"Falcor/Core/Program/ProgramReflection.h\"\n   34: #include \"Falcor/Core/API/Buffer.h\"\n   35: #include \"Falcor/Core/API/Texture.h\"\n   36: #include \"Falcor/Core/API/Sampler.h\"\n   37  #include \"Falcor/Core/Program/ShaderVar.h\"\n   38  #include \"Falcor/Utils/UI/Gui.h\"\n   ..\n  318      ParameterBlock::ConstSharedPtrRef getParameterBlock(uint32_t resourceRangeIndex, uint32_t arrayIndex) const;\n  319  \n  320:     // Delete some functions. If they are not deleted, the compiler will try to convert the uints to string, resulting in runtime error\n  321      Sampler::SharedPtr getSampler(uint32_t) = delete;\n  322      bool setSampler(uint32_t, const Sampler::SharedPtr&) = delete;\n\n/home/max/dev/Lava/src/Falcor/Core/BufferTypes/VariablesBufferUI.cpp:\n  288  \n  289                  // TODO: We should wrap the following with\n  290:                 // `ImGui::PushID` and `ImGui::PopID` to ensure\n  291                  // that the ID stack can be used to ensure\n  292                  // unique IDs for distinct members.\n\n/home/max/dev/Lava/src/Falcor/Core/FalcorConfig.h:\n   35  #define _PROFILING_LOG_BATCH_SIZE 1024 * 1  // This can be used to control how many samples are accumulated before they are dumped to file.\n   36  \n   37: #define _ENABLE_NVAPI false // Controls NVIDIA specific DX extensions. If it is set to true, make sure you have the NVAPI package in your 'Externals' directory. View the readme for more information.\n   38  \n   39  #ifdef _WIN32\n\n/home/max/dev/Lava/src/Falcor/Core/Framework.h:\n   29  #define SRC_FALCOR_CORE_FRAMEWORK_H_\n   30  \n   31: // save compiler switches\n   32  #pragma GCC diagnostic push\n   33  #pragma GCC diagnostic ignored \"-Wpedantic\"\n   ..\n  127  enum class ShaderType {\n  128      Vertex,         ///< Vertex shader\n  129:     Pixel,          ///< Pixel shader\n  130      Geometry,       ///< Geometry shader\n  131      Hull,           ///< Hull shader (AKA Tessellation control shader)\n  ...\n  145  \n  146  \n  147: /** Shading languages. Used for shader cross-compilation.\n  148  */\n  149  enum class ShadingLanguage {\n  ...\n  228  \n  229  // This is a helper class which should be used in case a class derives from a base class which derives from enable_shared_from_this\n  230: // If Derived will also inherit enable_shared_from_this, it will cause multiple inheritance from enable_shared_from_this, which results in a runtime errors because we have 2 copies of the WeakPtr inside shared_ptr\n  231  template<typename Base, typename Derived>\n  232  class inherit_shared_from_this {\n  ...\n  248  \n  249  #if defined(FALCOR_D3D12)\n  250: #include \"Falcor/Core/API/D3D12/FalcorD3D12.h\"\n  251  #elif defined(FALCOR_VK)\n  252: #include \"Falcor/Core/API/Vulkan/FalcorVK.h\"\n  253  #else\n  254  #error Undefined falcor backend. Make sure that a backend is selected in \"FalcorConfig.h\"\n  ...\n  264          case ShaderType::Vertex:\n  265              return \"vertex\";\n  266:         case ShaderType::Pixel:\n  267:             return \"pixel\";\n  268          case ShaderType::Hull:\n  269              return \"hull\";\n  ...\n  370  //#include \"Falcor/Utils/Scripting/Scripting.h\"\n  371  \n  372: #if (_ENABLE_NVAPI == true)\n  373: #include \"nvapi.h\"\n  374: #pragma comment(lib, \"nvapi64.lib\")\n  375  #endif\n  376  \n  377: // restore compiler switches\n  378  #pragma GCC diagnostic pop\n  379  \n\n/home/max/dev/Lava/src/Falcor/Core/Platform/Linux/Linux.cpp:\n  330  }\n  331  \n  332: int getDisplayDpi() {\n  333      // #TODO Not yet implemented\n  334      return int(200);\n\n/home/max/dev/Lava/src/Falcor/Core/Platform/MonitorInfo.cpp:\n   29  #ifdef _WIN32\n   30  #include \"MonitorInfo.h\"\n   31: #include <SetupApi.h>\n   32  #include <cfgmgr32.h>\n   33  #include \"Utils/StringUtils.h\"\n   34  \n   35: #pragma comment(lib, \"setupapi.lib\")\n   36  \n   37: // With some inspiration from:\n   38  //     http://ofekshilon.com/2011/11/13/reading-monitor-physical-dimensions-or-getting-the-edid-the-right-way/\n   39  //     http://ofekshilon.com/2014/06/19/reading-specific-monitor-dimensions/\n   ..\n  198              //printf(\"%fx%f mm\\n\", WidthMm, HeightMm );\n  199              desc.mPhysicalSize = float2(wInch, hInch);\n  200:             auto vPpi = desc.mResolution / desc.mPhysicalSize;\n  201:             desc.mPpi = (vPpi.x + vPpi.y) * 0.5f;\n  202              desc.mIsPrimary = (info.dwFlags & MONITORINFOF_PRIMARY);\n  203  \n  ...\n  222          for(auto& desc : monitorDescs)\n  223          {\n  224:             printf(\"%s%s: %0.0f x %0.0f pix, %0.1f x %0.1f in, %0.2f ppi\\n\",\n  225                  desc.mIdentifier.c_str(),\n  226                  desc.mIsPrimary ? \" (Primary) \" : \" \",\n  227                  desc.mResolution.x, desc.mResolution.y,\n  228                  desc.mPhysicalSize.x, desc.mPhysicalSize.y,\n  229:                 desc.mPpi);\n  230          }\n  231      }\n\n/home/max/dev/Lava/src/Falcor/Core/Platform/MonitorInfo.h:\n   44              float2 mResolution;\n   45              float2 mPhysicalSize;\n   46:             float mPpi;\n   47              bool mIsPrimary;\n   48          };\n\n/home/max/dev/Lava/src/Falcor/Core/Platform/OS.cpp:\n   69          //std::string(PROJECT_DIR) + \"../Tools/FalcorTest/\",\n   70          \n   71:         // Then we search in deployment folders (necessary to pickup NVAPI and other third-party shaders).\n   72          std::string(LAVA_INSTALL_DIR) + \"shaders\",\n   73          //getExecutableDirectory() + \"../shaders\",\n   ..\n   87  inline std::vector<std::string> getInitialRenderPassDirectories() {\n   88      std::vector<std::string> developmentDirectories = {\n   89:         // Then we search in deployment folders (necessary to pickup NVAPI and other third-party shaders).\n   90          std::string(LAVA_INSTALL_DIR) + \"render_passes\",\n   91          getExecutableDirectory() + \"../render_passes\",\n\n/home/max/dev/Lava/src/Falcor/Core/Platform/OS.h:\n   62  /** Adds an icon to the foreground window.\n   63      \\param[in] iconFile Icon file name\n   64:     \\param[in] windowHandle The api handle of the window for which we need to set the icon to. nullptr will apply the icon to the foreground window\n   65  */\n   66  dlldecl void setWindowIcon(const std::string& iconFile, WindowHandle windowHandle);\n   67  \n   68: /** Retrieves estimated/user-set pixel density of a display.\n   69:     \\return integer value of number of pixels per inch.\n   70  */\n   71: dlldecl int getDisplayDpi();\n   72  \n   73  /** Get the requested display scale factor\n\n/home/max/dev/Lava/src/Falcor/Core/Platform/Windows/ProgressBarWin.cpp:\n   92          while (pData->running)\n   93          {\n   94:             SendMessage(pData->hwnd, PBM_STEPIT, 0, 0);\n   95              SendMessage(pData->hwnd, WM_PAINT, 0, 0);\n   96              Sleep(50);\n\n/home/max/dev/Lava/src/Falcor/Core/Platform/Windows/Windows.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include <shellscalingapi.h>\n   30: #include <Psapi.h>\n   31  #include <commdlg.h>\n   32  #include <ShlObj_core.h>\n   ..\n   85          // For that reason we go through the excercise of determining the width of the longest text line manually.\n   86  \n   87:         // Compute the width of the given text in pixels using the default message font.\n   88          auto computeTextWidth = [&toWideString](const std::string& text)\n   89          {\n   ..\n   92              // Query windows for common metrics.\n   93              HWND hwnd = gMainWindowHandle;\n   94:             UINT dpi = GetDpiForSystem();\n   95              NONCLIENTMETRICS metrics;\n   96              metrics.cbSize = sizeof(metrics);\n   97:             if (!SystemParametersInfoForDpi(SPI_GETNONCLIENTMETRICS, sizeof(metrics), &metrics, 0, dpi)) return textWidth;\n   98  \n   99              // Setup DC with message font.\n  ...\n  138          }\n  139  \n  140:         // The width of the dialog is expressed in \"dialog units\", not pixels.\n  141          LONG horizontalBaseUnit = GetDialogBaseUnits() & 0xffff;\n  142          UINT dialogWidth = (computeTextWidth(msg) * 4) / horizontalBaseUnit;\n  ...\n  348          if (pDialog->Show(nullptr) == S_OK)\n  349          {\n  350:             IShellItem* pItem;\n  351:             if (pDialog->GetResult(&pItem) == S_OK)\n  352              {\n  353                  PWSTR path;\n  354:                 if (pItem->GetDisplayName(SIGDN_FILESYSPATH, &path) == S_OK)\n  355                  {\n  356                      filename = wstring_2_string(std::wstring(path));\n  ...\n  376      bool chooseFolderDialog(std::string& folder)\n  377      {\n  378:         return fileDialogCommon<IFileOpenDialog>({}, folder, FOS_PICKFOLDERS | FOS_PATHMUSTEXIST, CLSID_FileOpenDialog);\n  379      }\n  380  \n  ...\n  394      }\n  395  \n  396:     int getDisplayDpi()\n  397      {\n  398:         ::SetProcessDPIAware();\n  399          HDC screen = GetDC(NULL);\n  400:         double hPixelsPerInch = GetDeviceCaps(screen, LOGPIXELSX);\n  401:         double vPixelsPerInch = GetDeviceCaps(screen, LOGPIXELSY);\n  402          ::ReleaseDC(NULL, screen);\n  403:         return int((hPixelsPerInch + vPixelsPerInch) * 0.5);\n  404      }\n  405  \n  406      float getDisplayScaleFactor()\n  407      {\n  408:         float dpi = (float)getDisplayDpi();\n  409:         float scale = dpi / 96.0f;\n  410          return scale;\n  411  \n  412:         ::SetProcessDPIAware();\n  413          DEVICE_SCALE_FACTOR factor;\n  414          if (GetScaleFactorForMonitor(nullptr, &factor) == S_OK)\n  ...\n  458      {\n  459          std::string commandLine = appName + \".exe \" + commandLineArgs;\n  460:         STARTUPINFOA startupInfo{}; PROCESS_INFORMATION processInformation{};\n  461:         if (!CreateProcessA(nullptr, (LPSTR)commandLine.c_str(), nullptr, nullptr, TRUE, NORMAL_PRIORITY_CLASS, nullptr, nullptr, &startupInfo, &processInformation))\n  462          {\n  463              logError(\"Unable to execute the render graph editor\");\n\n/home/max/dev/Lava/src/Falcor/Core/Program/ComputeProgram.cpp:\n   31  namespace Falcor {\n   32  \n   33:     ComputeProgram::SharedPtr ComputeProgram::createFromFile(std::shared_ptr<Device> device, const std::string& filename, const std::string& csEntry, const DefineList& programDefines, Shader::CompilerFlags flags, const std::string& shaderModel) {\n   34          Desc d(filename);\n   35          if (!shaderModel.empty()) d.setShaderModel(shaderModel);\n   36:         d.setCompilerFlags(flags);\n   37          d.csEntry(csEntry);\n   38          return create(device, d, programDefines);\n\n/home/max/dev/Lava/src/Falcor/Core/Program/ComputeProgram.h:\n   47  \n   48      /** Create a new compute program from file.\n   49:         Note that this call merely creates a program object. The actual compilation and link happens at a later time.\n   50          \\param[in] filename Compute program filename.\n   51          \\param[in] csEntry Name of the entry point in the program.\n   52          \\param[in] programDefines Optional list of macro definitions to set into the program.\n   53:         \\param[in] flags Optional program compilation flags.\n   54          \\param[in] shaderModel Optional string desribing which shader model to use.\n   55          \\return A new object, or an exception is thrown if creation failed.\n   56      */\n   57:     static SharedPtr createFromFile(std::shared_ptr<Device> device, const std::string& filename, const std::string& csEntry, const DefineList& programDefines = DefineList(), Shader::CompilerFlags flags = Shader::CompilerFlags::None, const std::string& shaderModel = \"\");\n   58  \n   59      /** Create a new compute program.\n   60:         Note that this call merely creates a program object. The actual compilation and link happens at a later time.\n   61          \\param[in] desc The program description.\n   62          \\param[in] programDefines Optional list of macro definitions to set into the program.\n\n/home/max/dev/Lava/src/Falcor/Core/Program/GraphicsProgram.h:\n   47  \n   48      /** Create a new graphics program.\n   49:         Note that this call merely creates a program object. The actual compilation and link happens at a later time.\n   50          \\param[in] desc Description of the source files and entry points to use.\n   51          \\param[in] programDefines Optional list of macro definitions to set into the program. The macro definitions will be set on all shader stages.\n   ..\n   57          \\param[in] filename Graphics program filename.\n   58          \\param[in] vsEntry Vertex shader entry point. If this string is empty (\"\"), it will use a default vertex shader, which transforms and outputs all default vertex attributes.\n   59:         \\param[in] psEntry Pixel shader entry point\n   60          \\param[in] programDefines Optional list of macro definitions to set into the program. The macro definitions will be set on all shader stages.\n   61          \\return A new object, or an exception is thrown if creation failed.\n\n/home/max/dev/Lava/src/Falcor/Core/Program/Program.cpp:\n   42  static Program::DefineList sGlobalDefineList;\n   43  \n   44: static Shader::SharedPtr createShaderFromBlob(std::shared_ptr<Device> pDevice, const Shader::Blob& shaderBlob, ShaderType shaderType, const std::string& entryPointName, Shader::CompilerFlags flags, std::string& log) {\n   45      std::string errorMsg;\n   46      auto pShader = Shader::create(pDevice, shaderBlob, shaderType, entryPointName, flags, log);\n   ..\n   98  \n   99      entryPoint.sourceIndex = mActiveSource;\n  100:     entryPoint.groupIndex = mActiveGroup;\n  101  \n  102      mGroups[mActiveGroup].entryPointCount++;\n  ...\n  282          if (it == mProgramVersions.end()) {\n  283              // Note that link() updates mActiveProgram only if the operation was successful.\n  284:             // On error we get false, and mActiveProgram points to the last successfully compiled version.\n  285              if (link() == false) {\n  286                  throw std::runtime_error(\"Program linkage failed\");\n  ...\n  312      switch(type) {\n  313          case ShaderType::Vertex:        return SLANG_STAGE_VERTEX;\n  314:         case ShaderType::Pixel:         return SLANG_STAGE_PIXEL;\n  315          case ShaderType::Geometry:      return SLANG_STAGE_GEOMETRY;\n  316          case ShaderType::Hull:          return SLANG_STAGE_HULL;\n  ...\n  337      return \"sm_\" + shaderModel;\n  338  #else\n  339: #error unknown shader compilation target\n  340  #endif\n  341  }\n  342  \n  343: SlangCompileRequest* Program::createSlangCompileRequest(const DefineList&   defineList) const {\n  344      slang::IGlobalSession* pSlangGlobalSession = getSlangGlobalSession();\n  345      assert(pSlangGlobalSession);\n  ...\n  349      // Add our media search paths as `#include` search paths for Slang.\n  350      //\n  351:     // Note: Slang allows application to plug in a callback API to\n  352      // implement file I/O, and this could be used instead of specifying\n  353      // the data directories to Slang.\n  ...\n  369      }\n  370  \n  371:     // Set floating point mode. If no shader compiler flags for this were set, we use Slang's default mode.\n  372:     bool flagFast = is_set(mDesc.getCompilerFlags(), Shader::CompilerFlags::FloatingPointModeFast);\n  373:     bool flagPrecise = is_set(mDesc.getCompilerFlags(), Shader::CompilerFlags::FloatingPointModePrecise);\n  374      \n  375      if (flagFast && flagPrecise) {\n  376:         logWarning(\"Shader compiler flags 'FloatingPointModeFast' and 'FloatingPointModePrecise' can't be used simultaneously. Ignoring 'FloatingPointModeFast'.\");\n  377          flagFast = false;\n  378      }\n  ...\n  386      const char* targetMacroName;\n  387  \n  388:     // Pick the right target based on the current graphics API\n  389  #ifdef FALCOR_VK\n  390      targetMacroName = \"FALCOR_VK\";\n  391:     targetDesc.format = SLANG_SPIRV;\n  392  #elif defined FALCOR_D3D12\n  393      targetMacroName = \"FALCOR_D3D\";\n  ...\n  397      else                                                                            targetDesc.format = SLANG_DXIL;\n  398  #else\n  399: #error unknown shader compilation target\n  400  #endif\n  401  \n  ...\n  451      mFileTimeMap.clear();\n  452  \n  453:     SlangCompileRequest* pSlangRequest = nullptr;\n  454:     pSlangSession->createCompileRequest(&pSlangRequest);\n  455      assert(pSlangRequest);\n  456  \n  457      // Enable/disable intermediates dump\n  458:     bool dumpIR = is_set(mDesc.getCompilerFlags(), Shader::CompilerFlags::DumpIntermediates);\n  459:     spSetDumpIntermediates(pSlangRequest, dumpIR);\n  460  \n  461:     if (is_set(mDesc.getCompilerFlags(), Shader::CompilerFlags::GenerateDebugInfo)) {\n  462          spSetDebugInfoLevel(pSlangRequest, SLANG_DEBUG_INFO_LEVEL_STANDARD);\n  463      }\n  464  \n  465:     // Configure any flags for the Slang compilation step\n  466:     SlangCompileFlags slangFlags = 0;\n  467  \n  468:     // When we invoke the Slang compiler front-end, skip code generation step\n  469:     // so that the compiler does not complain about missing arguments for\n  470      // specialization parameters.\n  471      //\n  472:     slangFlags |= SLANG_COMPILE_FLAG_NO_CODEGEN;\n  473  \n  474:     spSetCompileFlags(pSlangRequest, slangFlags);\n  475  \n  476      // Now lets add all our input shader code, one-by-one\n  ...\n  492              // If this is not an HLSL or a SLANG file, display a warning\n  493              if (!hasSuffix(src.pLibrary->getFilename(), \".hlsl\", false) && !hasSuffix(src.pLibrary->getFilename(), \".slang\", false)) {\n  494:                 logWarning(\"Compiling a shader file which is not a SLANG file or an HLSL file. This is not an error, but make sure that the file contains valid shaders\");\n  495              }\n  496              std::string fullpath;\n  497              if (!findFileInShaderDirectories(src.pLibrary->getFilename(), fullpath)) {\n  498                  logError(\"Can't find file \" + src.pLibrary->getFilename());\n  499:                 spDestroyCompileRequest(pSlangRequest);\n  500                  return nullptr;\n  501              }\n  ...\n  509      // Now we make a separate pass and add the entry points.\n  510      // Each entry point references the index of the source\n  511:     // it uses, and luckily, the Slang API can use these\n  512      // indices directly.\n  513      for(auto& entryPoint : mDesc.mEntryPoints) {\n  514:         auto& group = mDesc.mGroups[entryPoint.groupIndex];\n  515  \n  516          spAddEntryPoint(\n  ...\n  649      // TODO: Once the behavior is fixed in Slang for SM 5.1+, we can\n  650      // eliminate this step and use `pSpecializedSlangGlobalScope` instead\n  651:     // of `pSpecializedSlangProgram`, so long as we are okay with dropping\n  652      // support for SM5.0 and below.\n  653      //\n  ...\n  657          // all the entry points. Note that we do *not* use the \"linked\"\n  658          // versions of the entry points because those already incorporate\n  659:         // the global scope, and we'd end up with multiple copies of\n  660          // the global scope in that case.\n  661          //\n  ...\n  695          auto entryPointGroupDesc = mDesc.mGroups[gg];\n  696  \n  697:         // For each entry-point group we will collect the compiled kernel\n  698          // code for its constituent entry points, using the \"linked\"\n  699          // version of the entry-point group.\n  ...\n  724              }\n  725              \n  726:             Shader::SharedPtr shader = createShaderFromBlob(mpDevice, blob, entryPointDesc.stage, entryPointDesc.name, mDesc.getCompilerFlags(), log);\n  727              \n  728              if (!shader) {\n  ...\n  750      TimeReport timeReport;\n  751  \n  752:     auto pSlangRequest = createSlangCompileRequest(mDefineList);\n  753      if (pSlangRequest == nullptr) {\n  754:         LOG_ERR(\"Error creating slang compile request !!!\");\n  755          return nullptr;\n  756      }\n  757  \n  758:     timeReport.measure(\"Program::preprocessAndCreateProgramVersion createCompileRequest\");\n  759  \n  760:     SlangResult slangResult = spCompile(pSlangRequest);\n  761:     timeReport.measure(\"Program::preprocessAndCreateProgramVersion spCompile\");\n  762      log += spGetDiagnosticOutput(pSlangRequest);\n  763      \n  764      if(SLANG_FAILED(slangResult)) {\n  765:         spDestroyCompileRequest(pSlangRequest);\n  766          return nullptr;\n  767      }\n  768  \n  769      ComPtr<slang::IComponentType> pSlangGlobalScope;\n  770:     spCompileRequest_getProgram(\n  771          pSlangRequest,\n  772          pSlangGlobalScope.writeRef());\n  773:     timeReport.measure(\"Program::preprocessAndCreateProgramVersion spCompileRequest_getProgram\");\n  774  \n  775      ComPtr<slang::ISession> pSlangSession(pSlangGlobalScope->getSession());\n  ...\n  783  \n  784          ComPtr<slang::IComponentType> pSlangEntryPoint;\n  785:         spCompileRequest_getEntryPoint(\n  786              pSlangRequest,\n  787              ee,\n  ...\n  791      }\n  792  \n  793:     timeReport.measure(\"Program::preprocessAndCreateProgramVersion spCompileRequest_getEntryPoint's\");\n  794  \n  795      // Extract list of files referenced, for dependency-tracking purposes\n  ...\n  827      //\n  828      ComPtr<slang::IComponentType> pSlangProgram;\n  829:     spCompileRequest_getProgram(\n  830          pSlangRequest,\n  831          pSlangProgram.writeRef());\n  832:     timeReport.measure(\"Program::preprocessAndCreateProgramVersion spCompileRequest_getProgram\");\n  833  \n  834      ProgramReflection::SharedPtr pReflector;\n  ...\n  935  \n  936          // Next we check if any of the files that affected the\n  937:         // compilation of `pProgram` has been changed. If not,\n  938          // we can skip further processing of this program\n  939          // (unless forceReload flag is set).\n  ...\n  943  \n  944          // If any files have changed, then we need to reset\n  945:         // the caches of compiled information for the program.\n  946          //\n  947          pProgram->reset();\n  ...\n  951  \n  952      // Once we are done, we will have written a compacted\n  953:     // version of `sPrograms` (skipping the null elements)\n  954      // to the first N elements of the vector. To make the\n  955      // vector only contain those first N elements, we\n\n/home/max/dev/Lava/src/Falcor/Core/Program/Program.h:\n   31  #include <string>\n   32  \n   33: #include \"Falcor/Core/API/Shader.h\"\n   34  #include \"Falcor/Core/Program/ShaderLibrary.h\"\n   35  #include \"Falcor/Core/Program/ProgramVersion.h\"\n   ..\n   82          Desc& dsEntry(const std::string& name) { return entryPoint(ShaderType::Domain, name); }\n   83          Desc& gsEntry(const std::string& name) { return entryPoint(ShaderType::Geometry, name); }\n   84:         Desc& psEntry(const std::string& name) { return entryPoint(ShaderType::Pixel, name); }\n   85          Desc& csEntry(const std::string& name) { return entryPoint(ShaderType::Compute, name); }\n   86  \n   87:         /** Enable/disable treat-warnings-as-error compilation flag\n   88          */\n   89:         Desc& warningsAsErrors(bool enable) { enable ? mShaderFlags |= Shader::CompilerFlags::TreatWarningsAsErrors : mShaderFlags &= ~(Shader::CompilerFlags::TreatWarningsAsErrors); return *this; }\n   90  \n   91          /** Enable/disable pre-processed shader dump\n   92          */\n   93:         Desc& dumpIntermediates(bool enable) { enable ? mShaderFlags |= Shader::CompilerFlags::DumpIntermediates : mShaderFlags &= ~(Shader::CompilerFlags::DumpIntermediates); return *this; }\n   94  \n   95:         /** Set the shader model string. This depends on the API you are using.\n   96:             For DirectX it should be `4_0`, `4_1`, `5_0`, `5_1`, `6_0`, `6_1`, `6_2`, or `6_3`. The default is `6_0`. Shader model `6.x` will use dxcompiler, previous shader models use fxc.\n   97              For Vulkan, it should be `400`, `410`, `420`, `430`, `440` or `450`. The default is `450`\n   98          */\n   99          Desc& setShaderModel(const std::string& sm);\n  100  \n  101:         /** Get the compiler flags\n  102          */\n  103:         Shader::CompilerFlags getCompilerFlags() const { return mShaderFlags; }\n  104  \n  105:         /** Set the compiler flags. Replaces any previously set flags.\n  106          */\n  107:         Desc& setCompilerFlags(Shader::CompilerFlags flags) { mShaderFlags = flags; return *this; }\n  108  \n  109  \n  ...\n  146  \n  147              int32_t sourceIndex;\n  148:             int32_t groupIndex;\n  149          };\n  150  \n  ...\n  155          int32_t mActiveSource = -1;\n  156          int32_t mActiveGroup = -1;\n  157:         Shader::CompilerFlags mShaderFlags = Shader::CompilerFlags::None;\n  158  #ifdef FALCOR_VK\n  159          std::string mShaderModel = \"450\";\n  ...\n  165      virtual ~Program() = 0;\n  166  \n  167:     /** Get the API handle of the active program.\n  168          \\return The active program version, or an exception is thrown on failure.\n  169      */\n  ...\n  235  \n  236      uint32_t getEntryPointGroupCount() const { return uint32_t(mDesc.mGroups.size()); }\n  237:     uint32_t getGroupEntryPointCount(uint32_t groupIndex) const { return mDesc.mGroups[groupIndex].entryPointCount; }\n  238:     uint32_t getGroupEntryPointIndex(uint32_t groupIndex, uint32_t entryPointIndexInGroup) const {\n  239:         return mDesc.mGroups[groupIndex].firstEntryPoint + entryPointIndexInGroup;\n  240      }\n  241  \n  ...\n  249      bool link() const;\n  250  \n  251:     SlangCompileRequest* createSlangCompileRequest(\n  252          DefineList  const& defineList) const;\n  253  \n  ...\n  275      DefineList mDefineList;\n  276  \n  277:     // We are doing lazy compilation, so these are mutable\n  278      mutable bool mLinkRequired = true;\n  279      mutable std::map<DefineList, ProgramVersion::SharedConstPtr> mProgramVersions;\n\n/home/max/dev/Lava/src/Falcor/Core/Program/ProgramReflection.cpp:\n  102      // and add up offsets.\n  103      //\n  104:     // In simple cases, one can track this info top-down, by simply keeping\n  105      // a \"running total\" offset, but that doesn't account for the fact that\n  106      // `baz` might be a texture, UAV, sampler, or uniform, and the offset\n  ...\n  142      //\n  143      // But that means that the allocation for `gStuff` is split into two\n  144:     // pieces: a \"primary\" allocation for `gStuff.t`, and then a secondary\n  145      // allocation for `gStuff.f` that got \"deferred\" until after specialization\n  146      // (which means it comes after all the un-specialized parameters).\n  ...\n 1077      EntryPointGroupReflection::SharedPtr EntryPointGroupReflection::create(\n 1078          ProgramVersion const*   pProgramVersion,\n 1079:         uint32_t                groupIndex,\n 1080          std::vector<slang::EntryPointLayout*> const& pSlangEntryPointReflectors)\n 1081      {\n ....\n 1088          //\n 1089          auto pProgram = pProgramVersion->getProgram();\n 1090:         uint32_t entryPointCount = pProgram->getGroupEntryPointCount(groupIndex);\n 1091          assert(entryPointCount != 0);\n 1092  \n 1093:         slang::EntryPointLayout* pBestEntryPoint = pSlangEntryPointReflectors[pProgram->getGroupEntryPointIndex(groupIndex, 0)];\n 1094          for (uint32_t ee = 0; ee < entryPointCount; ++ee)\n 1095          {\n 1096:             slang::EntryPointReflection* pSlangEntryPoint = pSlangEntryPointReflectors[pProgram->getGroupEntryPointIndex(groupIndex, ee)];\n 1097  \n 1098              if(getUniformParameterCount(pSlangEntryPoint) > getUniformParameterCount(pBestEntryPoint))\n ....\n 1171          CASE(DOMAIN,    Domain);\n 1172          CASE(GEOMETRY,  Geometry);\n 1173:         CASE(PIXEL,     Pixel);\n 1174  \n 1175          CASE(COMPUTE,   Compute);\n ....\n 1394          uint32_t bindingCount = 0;\n 1395  #else\n 1396: #error unimplemented graphics API\n 1397  #endif\n 1398  \n ....\n 1448              bindingCount++;\n 1449  #else\n 1450: #error unimplemented graphics API\n 1451  #endif\n 1452  \n ....\n 2083      }\n 2084  \n 2085:     const ProgramReflection::ShaderVariable* ProgramReflection::getPixelShaderOutput(const std::string& name) const {\n 2086:         return getShaderAttribute(name, mPsOut, \"getPixelShaderOutput()\");\n 2087      }\n 2088  \n\n/home/max/dev/Lava/src/Falcor/Core/Program/ProgramReflection.h:\n   29  \n   30  #include <map>\n   31: #include \"Falcor/Core/API/DescriptorSet.h\"\n   32  \n   33  #include <slang/slang.h>\n   ..\n   48  \n   49  A `UniformShaderVarOffset` is a simple wrapper around a byte offset for a uniform shader variable.\n   50: It is used to make API signatures less ambiguous (e.g., about whether an integer represents an\n   51  index, an offset, a count, etc.\n   52  \n   ..\n 1212      /// A single `ParameterBlock` may map to zero or more distinct descriptor\n 1213      /// sets, depending on what members it contains, and how those members\n 1214:     /// are mapped to API registers/spaces.\n 1215      ///\n 1216      struct DescriptorSetInfo\n 1217      {\n 1218:         /// The layout of the API descriptor set to allocate.\n 1219          DescriptorSet::Layout   layout;\n 1220  \n ....\n 1265      Things like the descriptor type and count for a range can thus be queried on\n 1266      the element type, while the `ParameterBlockReflection` stores additional information\n 1267:     pertinent to how resource ranges are bound to the pipeline state.\n 1268      */\n 1269      struct ResourceRangeBindingInfo\n ....\n 1403      static SharedPtr create(\n 1404          ProgramVersion const*   pProgramVersion,\n 1405:         uint32_t                groupIndex,\n 1406          std::vector<slang::EntryPointLayout*> const& pSlangEntryPointReflectors);\n 1407  \n ....\n 1457      uint3 getThreadGroupSize() const { return mThreadGroupSize; }\n 1458  \n 1459:     /** For pixel-shaders, check if we need to run the shader at sample frequency\n 1460      */\n 1461      bool isSampleFrequency() const { return mIsSampleFrequency; }\n ....\n 1473      const ShaderVariable* getVertexAttribute(const std::string& name) const;\n 1474  \n 1475:     /** Get a pixel shader output variable\n 1476      */\n 1477:     const ShaderVariable* getPixelShaderOutput(const std::string& name) const;\n 1478  \n 1479      /** Look up a type by name.\n\n/home/max/dev/Lava/src/Falcor/Core/Program/ProgramVars.cpp:\n   31  #include \"GraphicsProgram.h\"\n   32  #include \"ComputeProgram.h\"\n   33: #include \"Falcor/Core/API/ComputeContext.h\"\n   34: #include \"Falcor/Core/API/RenderContext.h\"\n   35  #include \"Falcor/Utils/Debug/debug.h\"\n   36  \n\n/home/max/dev/Lava/src/Falcor/Core/Program/ProgramVars.h:\n   30  \n   31  #include \"Falcor/Core/Framework.h\"\n   32: #include \"Falcor/Core/API/RootSignature.h\"\n   33  #include \"ShaderVar.h\"\n   34  \n   ..\n   47      /** Create a new entry point group vars object.\n   48          \\param[in] pReflector The reflection object.\n   49:         \\param[in] groupIndexInProgram Group index.\n   50          \\return New object, or throws an exception if creation failed.\n   51      */\n   52:     static SharedPtr create(std::shared_ptr<Device> pDevice, const EntryPointGroupReflection::SharedConstPtr& pReflector, uint32_t groupIndexInProgram) {\n   53          assert(pReflector);\n   54:         return SharedPtr(new EntryPointGroupVars(pDevice, pReflector, groupIndexInProgram));\n   55      }\n   56  \n   57:     uint32_t getGroupIndexInProgram() const { return mGroupIndexInProgram; }\n   58  \n   59   protected:\n   60:     EntryPointGroupVars(std::shared_ptr<Device> pDevice, const EntryPointGroupReflection::SharedConstPtr& pReflector, uint32_t groupIndexInProgram)\n   61          : ParameterBlock(pDevice, pReflector->getProgramVersion(), pReflector)\n   62:         , mGroupIndexInProgram(groupIndexInProgram)\n   63      {\n   64          assert(pReflector);\n   ..\n   66  \n   67   private:\n   68:     uint32_t mGroupIndexInProgram;\n   69  \n   70  };\n\n/home/max/dev/Lava/src/Falcor/Core/Program/ProgramVersion.cpp:\n  181          }\n  182  \n  183:         // Loop so that user can trigger recompilation on error\n  184          for(;;) {\n  185              std::string log;\n\n/home/max/dev/Lava/src/Falcor/Core/Program/ProgramVersion.h:\n   30  \n   31  #include \"Core/Program/ProgramReflection.h\"\n   32: #include \"Core/API/Shader.h\"\n   33: #include \"Core/API/RootSignature.h\"\n   34  \n   35  #include <slang/slang.h>\n   ..\n   78          enum class Type {\n   79              Compute,            ///< A group consisting of a single compute kernel\n   80:             Rasterization,      ///< A group consisting of rasterization shaders to be used together as a pipeline.\n   81              RtSingleShader,     ///< A group consisting of a single ray tracing shader\n   82              RtHitGroup,         ///< A ray tracing \"hit group\"\n   ..\n  137  \n  138      /** Low-level program object\n  139:         This class abstracts the API's program creation and management\n  140      */\n  141      class dlldecl ProgramKernels : public std::enable_shared_from_this<ProgramKernels> {\n  ...\n  195              const std::string& name = \"\");\n  196  \n  197:         ProgramHandle mApiHandle = ProgramHandle();\n  198          const std::string mName;\n  199  \n  ...\n  261          std::vector<ComPtr<slang::IComponentType>> mpSlangEntryPoints;\n  262  \n  263:         // Cached version of compiled kernels for this program version\n  264          mutable std::unordered_map<std::string, ProgramKernels::SharedPtr> mpKernels;\n  265      };\n\n/home/max/dev/Lava/src/Falcor/Core/Program/ShaderVar.h:\n   32  \n   33  #include \"ProgramReflection.h\"\n   34: #include \"Falcor/Core/API/Texture.h\"\n   35: #include \"Falcor/Core/API/Sampler.h\"\n   36: #include \"Falcor/Core/API/Buffer.h\"\n   37  \n   38  namespace Falcor {\n   ..\n   52  3. The type of the data at that offset\n   53  \n   54: Typically a `ShaderVar` is created using the `getRootVar()` operation\n   55  on `ParameterBlock`, which yields a shader variable that points to\n   56  the entire \"contents\" of the parameter block.\n\n/home/max/dev/Lava/src/Falcor/Core/Renderer.h:\n   32  #include \"Falcor/Utils/ArgList.h\"\n   33  #include \"Falcor/Utils/Scripting/ScriptBindings.h\"\n   34: #include \"Falcor/Core/API/RenderContext.h\"\n   35  \n   36  namespace Falcor {\n   ..\n   46      Device::Desc deviceDesc;                 ///< Controls device creation\n   47      bool suppressInput = false;              ///< Suppress all keyboard and mouse input (other than escape to terminate)\n   48:     bool showMessageBoxOnError = true;       ///< Show message box on framework/API errors.\n   49      float timeScale = 1.0f;                  ///< A scaling factor for the time elapsed between frames\n   50      bool pauseTime = false;                  ///< Control whether or not to start the clock when the sample start running\n\n/home/max/dev/Lava/src/Falcor/Core/Sample.cpp:\n   32  \n   33  #include \"Falcor/stdafx.h\"\n   34: #include \"Falcor/Core/API/DeviceManager.h\"\n   35  #include \"Sample.h\"\n   36  #include \"Falcor/RenderGraph/RenderPassLibrary.h\"\n   ..\n   75          }\n   76  \n   77:         // Resize the pixel zoom\n   78:         if (mpPixelZoom) {\n   79:             mpPixelZoom->onResizeSwapChain(mpDevice->getSwapChainFbo().get());\n   80          }\n   81  \n   ..\n   99  \n  100          // Checks if should toggle zoom\n  101:         mpPixelZoom->onKeyboardEvent(keyEvent);\n  102  \n  103          // Consume system messages first\n  ...\n  162          if (mShowUI && mpGui->onMouseEvent(mouseEvent)) return;\n  163          if (mpRenderer && mpRenderer->onMouseEvent(mouseEvent)) return;\n  164:         if (mpPixelZoom->onMouseEvent(mouseEvent)) return;\n  165      }\n  166  \n  ...\n  180          mpGui.reset();\n  181          mpTargetFBO.reset();\n  182:         mpPixelZoom.reset();\n  183          if(mpDevice) mpDevice->cleanup();\n  184          mpDevice.reset();\n  ...\n  281          LOG_DBG(\"call Sample::initUI\");\n  282          initUI();\n  283:         mpPixelZoom = PixelZoom::create(mpDevice, mpTargetFBO.get());\n  284  \n  285  #ifdef _WIN32\n  286          // Set the icon\n  287:         setWindowIcon(\"Framework\\\\Nvidia.ico\", mpWindow->getApiHandle());\n  288  \n  289          if (argc == 0 || argv == nullptr) {\n  ...\n  353              \"  'Pause|Space'      - Pause\\\\resume the global timer\\n\"\n  354              \"  'Ctrl+Pause|Space' - Pause\\\\resume the renderer\\n\"\n  355:             \"  'Z'       - Zoom in on a pixel\\n\"\n  356              \"  'MouseWheel' - Change level of zoom\\n\"\n  357  #if _PROFILING_ENABLED\n  ...\n  477  \n  478              pSwapChainFbo = mpDevice->getSwapChainFbo();  // The UI might have triggered a swap-chain resize, invalidating the previous FBO\n  479:             if (mpPixelZoom) mpPixelZoom->render(pRenderContext, pSwapChainFbo.get());\n  480  \n  481  #if _PROFILING_ENABLED\n\n/home/max/dev/Lava/src/Falcor/Core/Sample.h:\n   36  \n   37  #include \"Falcor/Core/Window.h\"\n   38: #include \"Falcor/Core/API/Device.h\"\n   39  #include \"Renderer.h\"\n   40  #include \"Falcor/Utils/ArgList.h\"\n   ..\n   43  #include \"Falcor/Utils/UI/Gui.h\"\n   44  #include \"Falcor/Utils/UI/TextRenderer.h\"\n   45: #include \"Falcor/Utils/UI/PixelZoom.h\"\n   46  #include \"Falcor/Utils/Video/VideoEncoderUI.h\"\n   47  \n   ..\n  152  \n  153      std::set<KeyboardEvent::Key> mPressedKeys;\n  154:     PixelZoom::SharedPtr mpPixelZoom;\n  155  \n  156      Sample(IRenderer::UniquePtr& pRenderer);\n\n/home/max/dev/Lava/src/Falcor/Core/State/ComputeState.h:\n   30  \n   31  #include \"StateGraph.h\"\n   32: #include \"Falcor/Core/API/ComputeStateObject.h\"\n   33  #include \"Falcor/Core/Program/ComputeProgram.h\"\n   34  \n   ..\n   57      SharedPtr operator=(const SharedPtr& other);\n   58  \n   59:     /** Bind a program to the pipeline\n   60      */\n   61      ComputeState& setProgram(const ComputeProgram::SharedPtr& pProgram) { mpProgram = pProgram; return *this; }\n\n/home/max/dev/Lava/src/Falcor/Core/State/GraphicsState.cpp:\n   92          mDesc.setFboFormats(mpFbo ? mpFbo->getDesc() : Fbo::Desc(mpDevice));\n   93  #ifdef FALCOR_VK\n   94:         mDesc.setRenderPass(mpFbo ? (VkRenderPass)mpFbo->getApiHandle() : VK_NULL_HANDLE);\n   95  #endif\n   96          mDesc.setVertexLayout(mpVao->getVertexLayout());\n   ..\n  132  void GraphicsState::popFbo(bool setVp0Sc0) {\n  133      if (mFboStack.empty()) {\n  134:         logError(\"PipelineState::popFbo() - can't pop FBO since the FBO stack is empty.\");\n  135          return;\n  136      }\n  ...\n  191  void GraphicsState::popViewport(uint32_t index, bool setScissors) {\n  192      if (mVpStack[index].empty()) {\n  193:         logError(\"PipelineState::popViewport() - can't pop viewport since the viewport stack is empty.\");\n  194          return;\n  195      }\n  ...\n  206  void GraphicsState::popScissors(uint32_t index) {\n  207      if (mScStack[index].empty()) {\n  208:         logError(\"PipelineState::popScissors() - can't pop scissors since the scissors stack is empty.\");\n  209          return;\n  210      }\n\n/home/max/dev/Lava/src/Falcor/Core/State/GraphicsState.h:\n   32  \n   33  #include \"Falcor/Core/Framework.h\"\n   34: #include \"Falcor/Core/API/GraphicsStateObject.h\"\n   35  #include \"StateGraph.h\"\n   36: #include \"Falcor/Core/API/FBO.h\"\n   37  #include \"Falcor/Core/Program/GraphicsProgram.h\"\n   38  #include \"Falcor/Core/Program/ProgramVars.h\"\n   ..\n   45  class GraphicsProgram;\n   46  \n   47: /** Pipeline state.\n   48      This class contains the entire state required by a single draw-call. It's not an immutable object - you can change it dynamically during rendering.\n   49:     The recommended way to use it is to create multiple PipelineState objects (ideally, a single object per render-pass)\n   50  */\n   51  class dlldecl GraphicsState {\n   ..\n  183      void popScissors(uint32_t index);\n  184  \n  185:     /** Bind a program to the pipeline.\n  186      */\n  187      GraphicsState& setProgram(const GraphicsProgram::SharedPtr& pProgram) { assert(pProgram); mpProgram = pProgram; return *this; }\n\n/home/max/dev/Lava/src/Falcor/Core/type.h:\n   50  \n   51  //DUPLICATED CODE (1/2). It is obviously possible to get rid of duplicates, \n   52: //                       but it is currently unclear how it may affect performance of the compiled code, so for now we prefer it this way \n   53  template<class TA, class TB>\n   54  inline constexpr bool lt(TA a, TB b) {\n\n/home/max/dev/Lava/src/Falcor/Core/Window.cpp:\n   59  namespace Falcor {\n   60  \n   61: class ApiCallbacks {\n   62   public:\n   63      static void windowSizeCallback(GLFWwindow* pGlfwWindow, int width, int height) {\n   ..\n  354  Window::SharedPtr Window::create(const Desc& desc, ICallbacks* pCallbacks) {\n  355      // Set error callback\n  356:     glfwSetErrorCallback(ApiCallbacks::errorCallback);\n  357  \n  358      // Init GLFW\n  ...\n  365  \n  366      // Create the window\n  367:     glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);\n  368      uint32_t w = desc.width;\n  369      uint32_t h = desc.height;\n  ...\n  395  \n  396  #ifdef _WIN32\n  397:     pWindow->mApiHandle = glfwGetWin32Window(pGLFWWindow);\n  398:     assert(pWindow->mApiHandle);\n  399  #else\n  400:     pWindow->mApiHandle.pDisplay = glfwGetX11Display();\n  401:     pWindow->mApiHandle.window = glfwGetX11Window(pGLFWWindow);\n  402:     assert(pWindow->mApiHandle.pDisplay != nullptr);\n  403  #endif\n  404:     setMainWindowHandle(pWindow->mApiHandle);\n  405  \n  406      pWindow->updateWindowSize();\n  ...\n  409  \n  410      // Set callbacks\n  411:     glfwSetWindowSizeCallback(pGLFWWindow, ApiCallbacks::windowSizeCallback);\n  412:     glfwSetKeyCallback(pGLFWWindow, ApiCallbacks::keyboardCallback);\n  413:     glfwSetMouseButtonCallback(pGLFWWindow, ApiCallbacks::mouseButtonCallback);\n  414:     glfwSetCursorPosCallback(pGLFWWindow, ApiCallbacks::mouseMoveCallback);\n  415:     glfwSetScrollCallback(pGLFWWindow, ApiCallbacks::mouseWheelCallback);\n  416:     glfwSetCharCallback(pGLFWWindow, ApiCallbacks::charInputCallback);\n  417:     glfwSetDropCallback(pGLFWWindow, ApiCallbacks::droppedFileCallback);\n  418  \n  419      if (desc.mode == WindowMode::Minimized) {\n\n/home/max/dev/Lava/src/Falcor/Core/Window.h:\n   43      using SharedPtr = std::shared_ptr<Window>;\n   44      using SharedConstPtr = std::shared_ptr<const Window>;\n   45:     using ApiHandle = WindowHandle;\n   46  \n   47      /** Window mode\n   ..\n  114      /** Get the native window handle\n  115      */\n  116:     const ApiHandle& getApiHandle() const { return mApiHandle; }\n  117  \n  118      /** Get the width of the window's client area\n  ...\n  125   \n  126   private:\n  127:     friend class ApiCallbacks;\n  128      Window(ICallbacks* pCallbacks, const Desc& desc);\n  129  \n  ...\n  133      Desc mDesc;\n  134      GLFWwindow* mpGLFWWindow;\n  135:     ApiHandle mApiHandle;\n  136      float2 mMouseScale;\n  137      const float2& getMouseScale() const { return mMouseScale; }\n\n/home/max/dev/Lava/src/Falcor/Data/Framework/Fonts/consolab.ttf:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/Data/Framework/Fonts/trebucbd.ttf:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/Data/Framework/Nvidia.ico:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/Data/Framework/Textures/NextFrame.jpg:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/Data/Framework/Textures/Pause.jpg:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/Data/Framework/Textures/Play.jpg:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/Data/Framework/Textures/PrevFrame.jpg:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/Data/Framework/Textures/Rewind.jpg:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/Data/Framework/Textures/Stop.jpg:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/Data/LightProbes/20050806-03_hd.hdr:\n    <binary>\n\n/home/max/dev/Lava/src/Falcor/dependencies.xml:\n   22          <package name=\"vulkansdk\" version=\"1.1.82.1\" platforms=\"win\"/>\n   23      </dependency>\n   24:     <dependency name=\"rapidjson\" linkPath=\"../Externals/.packman/RapidJson\">\n   25:         <package name=\"rapidjson\" version=\"1.1.0\" />\n   26      </dependency>\n   27      <dependency name=\"slang\" linkPath=\"../Externals/.packman/Slang\">\n   ..\n   32          <package name=\"glfw\" version=\"3.2.1\" platforms=\"win\" />\n   33      </dependency>\n   34:     <dependency name=\"winpixeventruntime\" linkPath=\"../Externals/.packman/WinPixEventRuntime\">\n   35:         <package name=\"WinPixEventRuntime\" version=\"1.0.190604001\" platforms=\"win\" />\n   36      </dependency>\n   37      <dependency name=\"falcor_media\" linkPath=\"../../Media\">\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang:\n   33  import Experimental.Scene.Lights.LightCollection;\n   34  \n   35: // Setup NvApi. We need this for fp32 atomics.\n   36  #define NV_SHADER_EXTN_SLOT u63\n   37  #define NV_SHADER_EXTN_REGISTER_SPACE space0\n   38: #include \"NVAPI/nvHLSLExtns.h\"\n   39  \n   40  // Check that defines are set.\n   ..\n   58  /** Vertex shader.\n   59      We place textured emissive triangles in texture space scaled so that we get\n   60:     one pixel shader execution per texel.\n   61      Non-textured emissive triangles are culled.\n   62  */\n   ..\n   82          const float2 uvMax = max(max(tri.texCoords[0], tri.texCoords[1]), tri.texCoords[2]);\n   83  \n   84:         // Pass on texture coordinate unmodified for pixel to use.\n   85          vsOut.uv = tri.texCoords[vtxIdx % 3];\n   86  \n   ..\n  107  }\n  108  \n  109: /** Pixel shader.\n  110      This is executed once per texel that the emissive triangle covers.\n  111  */\n  112  void psMain(VsOut vsIn, uint triIdx : SV_PrimitiveID)\n  113  {\n  114:     // TODO: Use conservative rasterization and compute analytic coverage in pixel shader.\n  115      // With standard rasterization, we only get approximate integrals and it's possible to entire\n  116      // miss small triangles. This leads to bias unless we explicitly set a small non-zero probability elsewhere.\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.h:\n   48          virtual bool update(RenderContext* pRenderContext) { return false; }\n   49  \n   50:         /** Add compile-time specialization to program to use this light sampler.\n   51              This function must be called every frame before the sampler is bound.\n   52              Note that ProgramVars may need to be re-created after this call, check the return value.\n   53:             \\param[in] pProgram The Program to add compile-time specialization to.\n   54              \\return True if the ProgramVars needs to be re-created.\n   55          */\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.slang:\n   45  \n   46  #elif defined(_EMISSIVE_LIGHT_SAMPLER_TYPE)\n   47:     // Compile-time error if _EMISSIVE_LIGHT_SAMPLER_TYPE is an invalid type.\n   48      #error _EMISSIVE_LIGHT_SAMPLER_TYPE is not set to a supported type. See EmissiveLightSamplerType.slangh.\n   49  \n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang:\n   83      // Compute probability density with respect to solid angle from the shading point.\n   84      // The farther away the light is and the larger the angle it is at, the larger the pdf becomes. The probability goes to infinity in the limit.\n   85:     // Note: Guard against div-by-zero here by clamping.\n   86      float denom = max(FLT_MIN, cosTheta * tri.area);\n   87      ls.pdf = distSqr / denom;\n   ..\n  111      // Compute probability density with respect to solid angle from the shading point.\n  112      // The farther away the light is and the larger the angle it is at, the larger the pdf becomes. The probability goes to infinity in the limit.\n  113:     // Note: Guard against div-by-zero here by clamping.\n  114      // TODO: Do we need the clamp here? distSqr is already clamped, so NaN should not be possible (but +inf is).\n  115      float denom = max(FLT_MIN, cosTheta * gScene.lightCollection.getTriangle(hit.triangleIndex).area);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang:\n   56          if (gScene.lightCollection.getActiveTriangleCount() == 0) return false;\n   57  \n   58:         // Randomly pick a triangle out of the global list of active triangles with uniform probability.\n   59          float uLight = sampleNext1D(sg);\n   60          uint triangleCount = gScene.lightCollection.getActiveTriangleCount();\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EnvMap.h:\n   31  //#include \"Falcor.h\"\n   32  #include \"Falcor/Core/Framework.h\"\n   33: #include \"Falcor/Core/API/Sampler.h\"\n   34  #include \"Falcor/Utils/UI/Gui.h\"\n   35  #include \"EnvMapData.slang\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EnvMapSampler.cpp:\n   48  \n   49      // Set variables.\n   50:     float2 invDim = 1.f / float2(mpImportanceMap->getWidth(), mpImportanceMap->getHeight());\n   51:     var[\"importanceBaseMip\"] = mpImportanceMap->getMipCount() - 1; // The base mip is 1x1 texels\n   52      var[\"importanceInvDim\"] = invDim;\n   53  \n   54      // Bind resources.\n   55:     var[\"importanceMap\"] = mpImportanceMap;\n   56:     var[\"importanceSampler\"] = mpImportanceSampler;\n   57  }\n   58  \n   ..\n   69      samplerDesc.setFilterMode(Sampler::Filter::Point, Sampler::Filter::Point, Sampler::Filter::Point);\n   70      samplerDesc.setAddressingMode(Sampler::AddressMode::Clamp, Sampler::AddressMode::Clamp, Sampler::AddressMode::Clamp);\n   71:     mpImportanceSampler = Sampler::create(mpDevice, samplerDesc);\n   72  \n   73      // Create hierarchical importance map for sampling.\n   ..\n   88  \n   89      // Create importance map. We have to set the RTV flag to be able to use generateMips().\n   90:     mpImportanceMap = Texture::create2D(mpDevice, dimension, dimension, ResourceFormat::R32Float, 1, mips, nullptr, Resource::BindFlags::ShaderResource | Resource::BindFlags::RenderTarget | Resource::BindFlags::UnorderedAccess);\n   91:     assert(mpImportanceMap);\n   92  \n   93      mpSetupPass[\"gEnvMap\"] = mpEnvMap->getEnvMap();\n   94:     mpSetupPass[\"gImportanceMap\"] = mpImportanceMap;\n   95  \n   96      uint32_t samplesX = std::max(1u, (uint32_t)std::sqrt(samples));\n   ..\n  107  \n  108      // Populate mip hierarchy. We rely on the default mip generation for this.\n  109:     mpImportanceMap->generateMips(pRenderContext);\n  110  \n  111      return true;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EnvMapSampler.h:\n   57      const EnvMap::SharedPtr& getEnvMap() const { return mpEnvMap; }\n   58  \n   59:     const Texture::SharedPtr& getImportanceMap() const { return mpImportanceMap; }\n   60  \n   61   protected:\n   ..\n   70      std::shared_ptr<Device> mpDevice;\n   71  \n   72:     Texture::SharedPtr      mpImportanceMap;    ///< Hierarchical importance map (luminance).\n   73:     Sampler::SharedPtr      mpImportanceSampler;\n   74  };\n   75  \n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EnvMapSampler.slang:\n  128  \n  129          result.dir = gScene.envMap.toWorld(dir);\n  130:         result.pdf = pdf * M_1_4PI;\n  131          result.Le = gScene.envMap.eval(result.dir);\n  132  \n  ...\n  146          float avg_w = importanceMap.Load(int3(0, 0, importanceBaseMip)); // 1x1 mip holds integral over importance map. TODO: Replace by constant or rescale in setup so that the integral is 1.0\n  147          float pdf = importanceMap.SampleLevel(importanceSampler, uv, 0) / avg_w;\n  148:         return pdf * (1.f / M_4PI);\n  149      }\n  150  \n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/EnvMapSamplerSetup.cs.slang:\n   49  void main(uint3 dispatchThreadID : SV_DispatchThreadID)\n   50  {\n   51:     uint2 pixel = dispatchThreadID.xy;\n   52:     if (any(pixel >= outputDim)) return;\n   53  \n   54      float L = 0.f;\n   ..\n   58          {\n   59              // Compute sample pos p in [0,1)^2 in octahedral map.\n   60:             uint2 samplePos = pixel * numSamples + uint2(x, y);\n   61              float2 p = ((float2)samplePos + 0.5f) / outputDimInSamples;\n   62  \n   ..\n   72  \n   73      // Store average radiance for this texel.\n   74:     gImportanceMap[pixel] = L * invSamples;\n   75  }\n   76  \n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/FinalizeIntegration.cs.slang:\n   69  \n   70      // Pre-compute the luminous flux emitted, which is what we use during sampling to set probabilities.\n   71:     // We assume diffuse emitters and integrate per side (hemisphere) => the scale factor is pi.\n   72      // Triangle area in m^2 (the scene units are assumed to be in meters).\n   73:     float flux = luminance(averageRadiance) * tri.area * (float) M_PI;  // Flux in lumens.\n   74  \n   75      gFluxData[triIdx].flux = flux;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVH.h:\n  104          uint32_t treeHeight = 0;                         ///< Number of edges on the longest path between the root node and a leaf.\n  105          uint32_t minDepth = 0;                           ///< Number of edges on the shortest path between the root node and a leaf.\n  106:         uint32_t byteSize = 0;                           ///< Number of bytes occupied by the BVH.\n  107          uint32_t internalNodeCount = 0;                  ///< Number of internal nodes inside the BVH.\n  108          uint32_t leafNodeCount = 0;                      ///< Number of leaf nodes inside the BVH.\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp:\n   47      }\n   48  \n   49:     /** Returns sin(a) based on cos(a) for a in [0,pi].\n   50      */\n   51      inline float sinFromCos(float cosAngle)\n   ..\n   56      /** Given a bounding cone specified by direction and cosine spread angle,\n   57          compute the minimum cone angle that includes a second bounding cone.\n   58:         If either cone is invalid or the result is larger than pi, the resulting\n   59          cone is marked as invalid.\n   60          TODO: Move to utility header and add unit test.\n   ..\n   74              float sinTotalTheta = sinOtherTheta * cosDiffTheta + cosOtherTheta * sinDiffTheta;\n   75  \n   76:             // If the total angle is less than pi, store the new cone angle.\n   77              // Otherwise, the bounding cone will be deactivated because it would represent the whole sphere.\n   78              if (sinTotalTheta > 0.f)\n   ..\n  129          const float theta = safeACos(glm::dot(aDir, bDir));\n  130          const float aTheta = safeACos(aCosTheta), bTheta = safeACos(bCosTheta);\n  131:         if (std::min(theta + bTheta, glm::pi<float>()) <= aTheta)\n  132          {\n  133              // a encloses b and we're done.\n  ...\n  139          // that will fit all of them.\n  140          float oTheta = (theta + aTheta + bTheta) / 2;\n  141:         if (oTheta > glm::pi<float>())\n  142          {\n  143              cosResult = kInvalidCosConeAngle;\n  ...\n  160              const float b = aDir.x * aDir.y * a;\n  161              dir = float3(1.f + sign * aDir.x * aDir.x * a, sign * b, -sign * aDir.x);\n  162:             // The spread angle needs to be pi/2 to encompass aDir and\n  163              // bDir, then aTheta / 2 more on top of that. (Recall that\n  164              // aTheta > bTheta, so we don't need to worry about bTheta).\n  ...\n  167              // oTheta computed before, but it probably doesn't matter much\n  168              // in this (rare) case.\n  169:             oTheta = std::min(glm::pi<float>(), glm::half_pi<float>() + aTheta);\n  170              cosResult = std::cos(oTheta);\n  171          }\n  ...\n  577              }\n  578  \n  579:             // First, compute A_j(L) * N_j(L) by sweeping over the bins from left to right.\n  580              // Note that the costs vector has n-1 elements when there are n bins; the i:th elements represents the split between bin i and i+1.\n  581              Bin total = Bin();\n  ...\n  586              }\n  587  \n  588:             // Then, compute A_j(R) * N_j(R) by sweeping over the bins from right to left.\n  589              total = Bin();\n  590              for (std::size_t i = costs.size(); i > 0; --i)\n  ...\n  655      /** Utility function that implements the orientation cost heuristic according to Equation 1\n  656          in Conty & Kulla, \"Importance Sampling of Many Lights with Adaptive Tree Splitting\", 2018.\n  657:         We're assuming flat diffuse emitters (theta_e = pi/2). For this case the orientation cost\n  658:         varies smoothly between pi (flat emitter) to 4pi (full sphere).\n  659      */\n  660      static float computeOrientationCost(const float theta_o)\n  661      {\n  662:         float theta_w = std::min(theta_o + glm::half_pi<float>(), glm::pi<float>());\n  663          float sin_theta_o = std::sin(theta_o);\n  664          float cos_theta_o = std::cos(theta_o);\n  665:         return glm::two_pi<float>() * (1.0f - cos_theta_o) + glm::half_pi<float>() * (2.0f * theta_w * sin_theta_o - std::cos(theta_o - 2.0f * theta_w) - 2.0f * theta_o * sin_theta_o + cos_theta_o);\n  666      };\n  667  \n  ...\n  674          float fluxCost = parameters.usePreintegration ? flux : 1.0f;\n  675          float aabbCost = bounds.valid() ? (parameters.useVolumeOverSA ? bounds.volume(parameters.volumeEpsilon) : bounds.surfaceArea()) : 0.f;\n  676:         float theta = cosTheta != kInvalidCosConeAngle ? safeACos(cosTheta) : glm::pi<float>();\n  677          float orientationCost = parameters.useLightingCones ? computeOrientationCost(theta) : 1.0f;\n  678          float cost = fluxCost * aabbCost * orientationCost;\n  ...\n  763              }\n  764  \n  765:             // First, compute A_j(L) * N_j(L) by sweeping over the bins from left to right.\n  766              // Note that the costs vector has n-1 elements when there are n bins; the i:th elements represents the split between bin i and i+1.\n  767              Bin total = Bin();\n  ...\n  785              }\n  786  \n  787:             // Then, compute A_j(R) * N_j(R) by sweeping over the bins from right to left.\n  788              total = Bin();\n  789              for (std::size_t i = costs.size(); i > 0; --i)\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHRefit.cs.slang:\n   95  }\n   96  \n   97: // Returns sin(a) based on cos(a) for a in [0,pi].\n   98  float sinFromCos(float cosAngle)\n   99  {\n  ...\n  152          float sinRightTotalAngle = sinRightConeAngle * cosRightDiffAngle + sinRightDiffAngle * rightNode.cosConeAngle;\n  153  \n  154:         // If neither sum of angles is greater than pi, compute the new cosConeAngle.\n  155          // Otherwise, deactivate the orientation cone as useless since it would represent the whole sphere.\n  156          if (sinLeftTotalAngle > 0.0f && sinRightTotalAngle > 0.0f)\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h:\n   86          virtual bool update(RenderContext* pRenderContext) override;\n   87  \n   88:         /** Add compile-time specialization to program to use this light sampler.\n   89              This function must be called every frame before the sampler is bound.\n   90              Note that ProgramVars may need to be re-created after this call, check the return value.\n   91:             \\param[in] pProgram The Program to add compile-time specialization to.\n   92              \\return True if the ProgramVars needs to be re-created.\n   93          */\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang:\n   40  // TODO: Use precise keyword at appropriate places.\n   41  \n   42: // Make sure the implementation compiles even when sampler is not used.\n   43  #ifndef _ACTUAL_MAX_TRIANGLES_PER_NODE\n   44  #define _ACTUAL_MAX_TRIANGLES_PER_NODE 1\n   ..\n   56  struct LightBVHSampler : IEmissiveLightSampler\n   57  {\n   58:     // Compile-time constants\n   59      static const SolidAngleBoundMethod kSolidAngleBoundMethod = (SolidAngleBoundMethod)(_SOLID_ANGLE_BOUND_METHOD);\n   60  \n   ..\n   72          if (gScene.lightCollection.isEmpty()) return false;\n   73  \n   74:         // Stochastically traverse the light BVH to pick a triangle.\n   75          uint triangleIndex;\n   76          float trianglePdf;\n   ..\n  217          // Note: coneAngle is the angle of the bounding cone for the node's dominant light directions.\n  218          // It is _not_ the angle of the bounding cone within which light is emitted.\n  219:         // The current assumption is that all emitters are diffuse, so the actual light cone angle is PI/2 larger than coneAngle.\n  220          // Conty Estevez and Kulla's 2018 paper uses a second cone angle (theta_e) to bound the emitted light.\n  221          // We might want to add that to support non-diffuse emitters or switch to another representation altogether.\n  222          float cosConeAngle = nodeAttribs.cosConeAngle;\n  223          float3 dirToAabb = (nodeAttribs.origin - posW) / distance;          // TODO: dirToAabb won't be normalized for very short distances, as the computation of distance has a clamp.\n  224:         if (cosConeAngle != kInvalidCosConeAngle && cosConeAngle > 0.f)     // theta_o + theta_e < pi. (Note: assumes theta_e = pi/2!)\n  225          {\n  226              float sinConeAngle = sqrt(max(0.f, 1.f - cosConeAngle * cosConeAngle));\n  ...\n  332      }\n  333  \n  334:     /** Pick a triangle in a leaf node to sample.\n  335          \\param[in] posW Shading point in world space.\n  336          \\param[in] normalW Normal at the shading point in world space.\n  ...\n  341          \\return True if a triangle was sampled, false otherwise.\n  342      */\n  343:     bool pickTriangle(const float3 posW, const float3 normalW, const uint nodeIndex, const float u, out float pdf, out uint triangleIndex)\n  344      {\n  345          const LeafNode node = _lightBVH.getLeafNode(nodeIndex);\n  ...\n  396          if (!traverseTree(posW, normalW, u, leafPdf, leafNodeIndex)) return false;\n  397  \n  398:         // Within the selected leaf, pick one out of the N triangles to sample.\n  399          float trianglePdf;\n  400:         if (!pickTriangle(posW, normalW, leafNodeIndex, u, trianglePdf, triangleIndex)) return false;\n  401  \n  402          pdf = leafPdf * trianglePdf;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n  129  \n  130      std::string s;\n  131:     if (findFileInShaderDirectories(\"NVAPI/nvHLSLExtns.h\", s) == false)\n  132      {\n  133:         logError(\"LightCollection relies on NVAPI, which appears to be missing. Please make sure you have NVAPI installed (instructions are in the readme file)\");\n  134          return false;\n  135      }\n  ...\n  435  \n  436          // TODO: Disable automatic UAV barriers.\n  437:         // Each kernel writes to non-overlapping parts of the output buffers, but currently Falcor inserts barriers between each dispatch.\n  438          mpTriangleListBuilder->execute(pRenderContext, meshLight.triangleCount, 1u, 1u);\n  439      }\n  ...\n  584      if (mCPUInvalidData == CPUOutOfDateFlags::None) return;\n  585  \n  586:     // If the data has not yet been copied to the staging buffer, we have to do that first.\n  587      // This should normally have done by calling prepareSyncCPUData().\n  588      if (!mStagingBufferValid)\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightCollection.h:\n  164          If the mesh light triangles will be accessed with getMeshLightTriangles()\n  165          performance can be improved by calling this function ahead of time.\n  166:         This function schedules the copies so that it can be read back without delay later.\n  167      */\n  168      void prepareSyncCPUData(RenderContext* pRenderContext) const { copyDataToStagingBuffer(pRenderContext); }\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightCollectionShared.slang:\n   80  \n   81      float4  posAndTexCoords[3]; ///< Per-vertex world-space positions and texture coordinates (encoded in fp16 format).\n   82:     uint    normal;             ///< Face normal in world space (encoded in 16-bit snorms, octahedral mapping).\n   83      uint    area;               ///< Triangle area in world space (encoded in fp32 format).\n   84      uint    materialID;         ///< Material ID.\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightHelpers.slang:\n   94  bool sampleRectAreaLight(const float3 shadingPosW, const LightData light, inout SampleGenerator sg, out AnalyticLightSample ls)\n   95  {\n   96:     // Pick a random sample on the quad.\n   97      // The quad is from (-1,-1,0) to (1,1,0) in object space, but may be scaled by its transform matrix.\n   98      float2 u = sampleNext2D(sg);\n   ..\n  122  {\n  123      // Sample a random point on the sphere.\n  124:     // TODO: We should pick a random point on the hemisphere facing the shading point.\n  125      float2 u = sampleNext2D(sg);\n  126      float3 pos = sample_sphere(u);\n  ...\n  182      // But because the angle is intended to affect penumbra size, but not\n  183      // perceived brigthness, we treat intensity as radiance.\n  184:     float solidAngle = (float)M_2PI * (1.f - light.cosSubtendedAngle);\n  185      ls.Li = light.intensity;\n  186      ls.pdf = 1.f / solidAngle;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n   97  \n   98  /** Lambertian diffuse reflection.\n   99:     f_r(wo, wi) = albedo / pi\n  100  */\n  101  struct DiffuseReflectionLambert : IBxDF\n  ...\n  107          if (min(wo.z, wi.z) < kMinCosTheta) return float3(0);\n  108  \n  109:         return M_1_PI * albedo * wi.z;\n  110      }\n  111  \n  ...\n  125          if (min(wo.z, wi.z) < kMinCosTheta) return 0;\n  126  \n  127:         return M_1_PI * wi.z;\n  128      }\n  129  };\n  ...\n  135  {\n  136      float3 albedo;          ///< Diffuse albedo.\n  137:     float linearRoughness;  ///< Roughness before remapping.\n  138  \n  139      float3 eval(float3 wo, float3 wi)\n  ...\n  141          if (min(wo.z, wi.z) < kMinCosTheta) return float3(0);\n  142  \n  143:         return evalWeight(wo, wi) * M_1_PI * wi.z;\n  144      }\n  145  \n  ...\n  159          if (min(wo.z, wi.z) < kMinCosTheta) return 0;\n  160  \n  161:         return M_1_PI * wi.z;\n  162      }\n  163  \n  164      // private\n  165  \n  166:     // Returns f(wo, wi) * pi.\n  167      float3 evalWeight(float3 wo, float3 wi)\n  168      {\n  ...\n  184  {\n  185      float3 albedo;          ///< Diffuse albedo.\n  186:     float linearRoughness;  ///< Roughness before remapping.\n  187  \n  188      float3 eval(float3 wo, float3 wi)\n  ...\n  190          if (min(wo.z, wi.z) < kMinCosTheta) return float3(0);\n  191  \n  192:         return evalWeight(wo, wi) * M_1_PI * wi.z;\n  193      }\n  194  \n  ...\n  208          if (min(wo.z, wi.z) < kMinCosTheta) return 0;\n  209  \n  210:         return M_1_PI * wi.z;\n  211      }\n  212  \n  213      // private\n  214  \n  215:     // Returns f(wo, wi) * pi.\n  216      float3 evalWeight(float3 wo, float3 wi)\n  217      {\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n  107      Note: The evaluated pdf for the generated sample is expensive to compute, as the pdf is a weighted\n  108      combination of two sampling strategies. If the caller doesn't explicitly need the probability, they\n  109:     should be careful not to touch the value so that the compiler can do dead code elimination.\n  110  \n  111      \\param[in] sd Shading point data.\n  ...\n  151  {\n  152      float3 wo = toLocal(sd.V, sd);\n  153:     float3 wi = sample_cosine_hemisphere_concentric(sampleNext2D(sg), result.pdf); // pdf = cos(theta) / pi\n  154  \n  155      if (result.pdf == 0.f) return false;\n  ...\n  197  float3 evalDiffuseLambert(const ShadingData sd)\n  198  {\n  199:     return sd.diffuse.rgb * (1 / M_PI);\n  200  }\n  201  \n  ...\n  215      float lightScatter = evalFresnelSchlick(fd0, fd90, NdotL).r;\n  216      float viewScatter = evalFresnelSchlick(fd0, fd90, NdotV).r;\n  217:     return sd.diffuse.rgb * (viewScatter * lightScatter * (1 / M_PI));\n  218  }\n  219  \n  ...\n  236      float lightScatter = evalFresnelSchlick(fd0, fd90, NdotL).r;\n  237      float viewScatter = evalFresnelSchlick(fd0, fd90, NdotV).r;\n  238:     return sd.diffuse.rgb * (viewScatter * lightScatter * energyFactor * (1 / M_PI));\n  239  }\n  240  \n  ...\n  374      \\param[in] sd Describes the shading point.\n  375      \\param[in] u Uniform random number (2D).\n  376:     \\param[out] pdf Sampling probability (= cos(theta) / pi). Note that pdf goes to zero at the horizon (relative to the shading normal).\n  377      \\return Sampled direction in world space.\n  378  */\n  ...\n  402      float cosThetaH = sqrt(cosThetaHSqr);\n  403      float sinThetaH = sqrt(1 - cosThetaHSqr);\n  404:     float phiH = u.y * M_2PI;\n  405  \n  406      // Convert half vector to world space.\n  ...\n  417      // The pdf in half vector space is pdf = D(H) * NdotH, which we multiply by the Jacobian of the half-vector transform.\n  418      float d = (a2 - 1) * cosThetaHSqr + 1;\n  419:     pdf = (a2 * NdotH) / (d * d * VdotH * M_4PI);\n  420      //pdf = evalNdfGGX(alpha, NdotH) * NdotH / (4.f * VdotH);   // For reference, identical to the line above\n  421  \n  ...\n  439      // We're using cosine-weighted sampling over the hemisphere.\n  440      float NdotL = dot(sd.N, L);\n  441:     return NdotL < kMinCosTheta ? 0.f : NdotL * M_1_PI;\n  442  }\n  443  \n  ...\n  450  void sampleDiffuse(const ShadingData sd, const float2 u, out BSDFSample result)\n  451  {\n  452:     // Sample the diffuse lobe with pdf = NdotL / pi.\n  453      // The Disney diffuse is a Lambert times a Fresnel term to increase grazing retroreflection. The latter is not included in the pdf.\n  454      // TODO: Derive sampling method that better approminates the Disney diffuse lobe.\n  ...\n  465  \n  466      // Compute weight. Note that NdotL cancels out by the pdf.\n  467:     result.weight = evalBSDFLobes(sd, result.wi, (uint)LobeType::DiffuseReflection) * M_PI;\n  468      result.lobe = (uint)LobeType::DiffuseReflection;\n  469  }\n  ...\n  558      Note: The evaluated pdf for the generated sample is expensive to compute, as the pdf is a weighted\n  559      combination of two sampling strategies. If the caller doesn't explicitly need the probability, they\n  560:     should be careful not to touch the value so that the compiler can do dead code elimination.\n  561  \n  562      \\param[in] sd Shading point data.\n  ...\n  615  {\n  616      float pdf;\n  617:     float3 dir = sampleHemisphereCosine(sd, sampleNext2D(sg), pdf); // pdf = cos(theta) / pi\n  618  \n  619      // Check that L and V are in the positive hemisphere, reset pdf to zero otherwise.\n  ...\n  623  \n  624      result.wi = dir;\n  625:     result.weight = evalBSDF(sd, dir) * M_PI; // dot(N,L) / pdf = pi\n  626      result.pdf = pdf;\n  627      result.lobe = (uint)LobeType::DiffuseReflection;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/Microfacet.slang:\n   46      float a2 = alpha * alpha;\n   47      float d = ((cosTheta * a2 - cosTheta) * cosTheta + 1);\n   48:     return a2 / (d * d * M_PI);\n   49  }\n   50  \n   ..\n   74  {\n   75      float alphaSqr = alpha * alpha;\n   76:     float phi = u.y * (2 * M_PI);\n   77      float tanThetaSqr = alphaSqr * u.x / (1 - u.x);\n   78      float cosTheta = 1 / sqrt(1 + tanThetaSqr);\n   ..\n  102      See http://jcgt.org/published/0007/04/01/paper.pdf\n  103  \n  104:     \\param[in] alpha Isotropic GGX width parameter (should be clamped to small epsilon beforehand).\n  105      \\param[in] wo View direction in local space, in the positive hemisphere.\n  106      \\param[in] u Uniform random number (2D).\n  ...\n  121      // Parameterization of the projected area of the hemisphere.\n  122      float r = sqrt(u.x);\n  123:     float phi = (2.f * M_PI) * u.y;\n  124      float t1 = r * cos(phi);\n  125      float t2 = r * sin(phi);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang:\n   87          float lambda = triLODConstant;  // Constant per triangle.\n   88          float filterWidth = getWidth();\n   89:         // Keeping this implementation since it is easier to read, but the following three lines that are not commented out are a bit faster\n   90          //float distTerm = abs(filterWidth);\n   91          //float normalTerm = abs(dot(rayDir, normal));\n   ..\n  113          float filterWidth = getWidth();\n  114  \n  115:         // Keeping this implementation since it is easier to read, but the following three lines that are not commented out are a bit faster\n  116          //float distTerm = abs(filterWidth);\n  117          //float normalTerm = abs(dot(rayDir, normal));\n  ...\n  255  }\n  256  \n  257: /** Exploit ray cone to compute an approximate anisotropic filter. The idea is to find the width (2*radius) of the ray cone at\n  258      the intersection point, and approximate the ray cone as a cylinder at that point with that radius. Then intersect the\n  259      cylinder with the triangle plane to find the ellipse of anisotropy. Finally, convert to gradients in texture coordinates.\n  ...\n  261      \\param[in] faceNormal The normal of the triangle.\n  262      \\param[in] rayConeDir Direction of the ray cone.\n  263:     \\param[in] rayConeRadiusAtIntersection Radius of the cone at the intersection point, typically computed as coneRadiusAtIntersection = t * tan(rayConeAngle);\n  264      \\param[in] positions Positions of the triangle.\n  265      \\param[in] txcoords Texture coordinates of the vertices of the triangle.\n  ...\n  268      \\param[in] texGradientY Second gradient of texture coordinates.\n  269  */\n  270: void computeAnisotropicEllipseAxes(float3 intersectionPoint, float3 faceNormal, float3 rayConeDir,\n  271      float rayConeRadiusAtIntersection, float3 positions[3], float2 txcoords[3], float2 interpolatedTexCoordsAtIntersection,\n  272      out float2 texGradientX, out float2 texGradientY)\n  ...\n  370  \n  371      The computeRayDirectionDifferentials() function differentiates normalize(getCameraRayDir()), where getCameraRayDir() is:\n  372:     float3 getCameraRayDir(uint2 pixel, uint2 frameDim)\n  373      {\n  374:         float2 p = (pixel.xy + float2(0.5f, 0.5f)) / frameDim.xy; // Pixel center on image plane in [0,1] where (0,0) is top-left\n  375          float2 ndc = float2(2, -2) * p + float2(-1, 1);\n  376          return ndc.x * gCamera.cameraU + ndc.y * gCamera.cameraV + gCamera.cameraW; // rayDir = world-space direction to point on image plane (unnormalized)\n  ...\n  573      \\param[in] worldInvTransposeMat Inverse transpose of world transformation matrix.\n  574      \\param[in,out] rayDiff The ray differential used as input and output.\n  575:     \\param[out] dUVdx The differential of the texture coordinates in pixel coordinate x.\n  576:     \\param[out] dUVdy The differential of the texture coordinates in pixel coordinate y.\n  577  */\n  578  void reflectRayDiffUsingVertexData(VertexData v, StaticVertexData triangleVertices[3], float3 barycentrics, float3 rayDir, float4x4 worldMat, float3x3 worldInvTransposeMat,\n  ...\n  623      uint txw, txh;\n  624      environmentMap.GetDimensions(txw, txh);\n  625:     return log2(abs(spreadAngle) * txh * M_1_PI);                                // From chapter 21 in Ray Tracing Gems\n  626  }\n  627  \n  ...\n  636      uint txw, txh;\n  637      environmentMap.GetDimensions(txw, txh);\n  638:     return log2(length(dDdx + dDdy) * txh * M_1_PI);                             // From chapter 21 in Ray Tracing Gems\n  639  }\n  640  \n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/TexLODTypes.slang:\n   46      Mip0 = 0,\n   47      RayCones = 1,\n   48:     RayDiffsIsotropic = 2,\n   49:     RayDiffsAnisotropic = 3,\n   50  };\n   51  \n\n/home/max/dev/Lava/src/Falcor/Falcor.h:\n   45  #include \"Falcor/Core/Window.h\"\n   46  \n   47: // Core/API\n   48: #include \"Falcor/Core/API/BlendState.h\"\n   49: #include \"Falcor/Core/API/Buffer.h\"\n   50: #include \"Falcor/Core/API/ComputeContext.h\"\n   51: #include \"Falcor/Core/API/ComputeStateObject.h\"\n   52: #include \"Falcor/Core/API/CopyContext.h\"\n   53: #include \"Falcor/Core/API/DepthStencilState.h\"\n   54: #include \"Falcor/Core/API/DescriptorPool.h\"\n   55: #include \"Falcor/Core/API/DescriptorSet.h\"\n   56: #include \"Falcor/Core/API/Device.h\"\n   57: #include \"Falcor/Core/API/FBO.h\"\n   58: #include \"Falcor/Core/API/FencedPool.h\"\n   59: #include \"Falcor/Core/API/Formats.h\"\n   60: #include \"Falcor/Core/API/GpuFence.h\"\n   61: #include \"Falcor/Core/API/GpuTimer.h\"\n   62: #include \"Falcor/Core/API/GraphicsStateObject.h\"\n   63: #include \"Falcor/Core/API/LowLevelContextData.h\"\n   64: #include \"Falcor/Core/API/QueryHeap.h\"\n   65: #include \"Falcor/Core/API/RasterizerState.h\"\n   66: #include \"Falcor/Core/API/RenderContext.h\"\n   67: #include \"Falcor/Core/API/Resource.h\"\n   68: #include \"Falcor/Core/API/GpuMemoryHeap.h\"\n   69: #include \"Falcor/Core/API/ResourceViews.h\"\n   70: #include \"Falcor/Core/API/RootSignature.h\"\n   71: #include \"Falcor/Core/API/Sampler.h\"\n   72: #include \"Falcor/Core/API/Texture.h\"\n   73: #include \"Falcor/Core/API/VAO.h\"\n   74: #include \"Falcor/Core/API/VertexLayout.h\"\n   75  \n   76  // Core/BufferTypes\n   ..\n  152  #include \"Falcor/Utils/UI/Gui.h\"\n  153  #include \"Falcor/Utils/UI/DebugDrawer.h\"\n  154: #include \"Falcor/Utils/UI/PixelZoom.h\"\n  155  #include \"Falcor/Utils/UI/TextRenderer.h\"\n  156  #include \"Falcor/Utils/UI/UserInput.h\"\n  ...\n  158  #include \"Falcor/Utils/Video/VideoEncoderUI.h\"\n  159  #include \"Falcor/Utils/Debug/DebugConsole.h\"\n  160: #include \"Falcor/Utils/Debug/PixelDebug.h\"\n  161  \n  162  // #ifdef FALCOR_D3D12\n\n/home/max/dev/Lava/src/Falcor/Falcor.natvis:\n   19    </Type>\n   20  \n   21:   <!-- These were copied from https://github.com/g-truc/glm/blob/master/util/glm.natvis -->\n   22    <!-- License: https://github.com/g-truc/glm/blob/master/manual.md#section0 -->\n   23    <Type Name=\"glm::tvec1&lt;*&gt;\">\n\n/home/max/dev/Lava/src/Falcor/Falcor.props:\n   12    </PropertyGroup>\n   13    <ItemDefinitionGroup>\n   14:     <ClCompile>\n   15        <WarningLevel>Level3</WarningLevel>\n   16        <TreatWarningAsError>true</TreatWarningAsError>\n   17:       <AdditionalIncludeDirectories>$(FALCOR_CORE_DIRECTORY)\\Falcor;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\nvapi;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\GLM;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\VulkanSDK\\Include;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\RapidJson\\include;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\pybind11\\include;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\Python\\include;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\WinPixEventRuntime\\Include\\WinPixEventRuntime;$(FALCOR_CORE_DIRECTORY)\\Externals;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n   18        <PreprocessorDefinitions>_$(OutputType);_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;GLM_FORCE_DEPTH_ZERO_TO_ONE;$(FALCOR_BACKEND);_UNICODE;UNICODE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n   19        <LanguageStandard>stdcpp17</LanguageStandard>\n   20:     </ClCompile>\n   21      <Link>\n   22:       <AdditionalLibraryDirectories>$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\FreeImage;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\Assimp\\lib\\$(PlatformName);$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\FFMpeg\\lib\\$(PlatformName);$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\nvapi\\amd64;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\VulkanSDK\\Lib;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\Slang\\bin\\windows-x64\\release;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\GLFW\\lib;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\Python\\libs;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\WinPixEventRuntime\\bin\\x64;%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>\n   23:       <AdditionalDependencies>WinPixEventRuntime.lib;glfw3dll.lib;slang.lib;Comctl32.lib;Shlwapi.lib;assimp-vc141-mt.lib;freeimage.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;avcodec.lib;avutil.lib;avformat.lib;swscale.lib;Shcore.lib;%(AdditionalDependencies)</AdditionalDependencies>\n   24      </Link>\n   25      <PostBuildEvent>\n\n/home/max/dev/Lava/src/Falcor/Falcor.vcxproj:\n   28      <ClInclude Include=\"..\\Externals\\dear_imgui_addons\\imguinodegrapheditor\\imguinodegrapheditor.h\" />\n   29      <ClInclude Include=\"..\\Externals\\mikktspace\\mikktspace.h\" />\n   30:     <ClInclude Include=\"Core\\API\\BlendState.h\" />\n   31:     <ClInclude Include=\"Core\\API\\Buffer.h\" />\n   32:     <ClInclude Include=\"Core\\API\\ComputeContext.h\" />\n   33:     <ClInclude Include=\"Core\\API\\ComputeStateObject.h\" />\n   34:     <ClInclude Include=\"Core\\API\\CopyContext.h\" />\n   35:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12ApiData.h\">\n   36        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n   37        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n   38      </ClInclude>\n   39:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12DescriptorData.h\">\n   40        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n   41        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n   42      </ClInclude>\n   43:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12DescriptorHeap.h\">\n   44        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n   45        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n   46      </ClInclude>\n   47:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12NvApiExDesc.h\">\n   48        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n   49        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n   50      </ClInclude>\n   51:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12Resource.h\">\n   52        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n   53        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n   54      </ClInclude>\n   55:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12State.h\">\n   56        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n   57        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n   58      </ClInclude>\n   59:     <ClInclude Include=\"Core\\API\\D3D12\\FalcorD3D12.h\">\n   60        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n   61        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n   62      </ClInclude>\n   63:     <ClInclude Include=\"Core\\API\\DepthStencilState.h\" />\n   64:     <ClInclude Include=\"Core\\API\\DescriptorPool.h\" />\n   65:     <ClInclude Include=\"Core\\API\\DescriptorSet.h\" />\n   66:     <ClInclude Include=\"Core\\API\\Device.h\" />\n   67:     <ClInclude Include=\"Core\\API\\FBO.h\" />\n   68:     <ClInclude Include=\"Core\\API\\FencedPool.h\" />\n   69:     <ClInclude Include=\"Core\\API\\Formats.h\" />\n   70:     <ClInclude Include=\"Core\\API\\GpuFence.h\" />\n   71:     <ClInclude Include=\"Core\\API\\GpuTimer.h\" />\n   72:     <ClInclude Include=\"Core\\API\\GraphicsStateObject.h\" />\n   73:     <ClInclude Include=\"Core\\API\\LowLevelContextData.h\" />\n   74:     <ClInclude Include=\"Core\\API\\QueryHeap.h\" />\n   75:     <ClInclude Include=\"Core\\API\\RasterizerState.h\" />\n   76:     <ClInclude Include=\"Core\\API\\RenderContext.h\" />\n   77:     <ClInclude Include=\"Core\\API\\Resource.h\" />\n   78:     <ClInclude Include=\"Core\\API\\GpuMemoryHeap.h\" />\n   79:     <ClInclude Include=\"Core\\API\\ResourceViews.h\" />\n   80:     <ClInclude Include=\"Core\\API\\RootSignature.h\" />\n   81:     <ClInclude Include=\"Core\\API\\Sampler.h\" />\n   82:     <ClInclude Include=\"Core\\API\\Shader.h\" />\n   83:     <ClInclude Include=\"Core\\API\\Texture.h\" />\n   84:     <ClInclude Include=\"Core\\API\\VAO.h\" />\n   85:     <ClInclude Include=\"Core\\API\\VertexLayout.h\" />\n   86:     <ClInclude Include=\"Core\\API\\Vulkan\\FalcorVK.h\">\n   87        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n   88        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n   89      </ClInclude>\n   90:     <ClInclude Include=\"Core\\API\\Vulkan\\VKDescriptorData.h\">\n   91        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n   92        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n   93      </ClInclude>\n   94:     <ClInclude Include=\"Core\\API\\Vulkan\\VKSmartHandle.h\">\n   95        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n   96        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n   97      </ClInclude>\n   98:     <ClInclude Include=\"Core\\API\\Vulkan\\VKState.h\">\n   99        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  100        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  ...\n  123      <ClInclude Include=\"Experimental\\Scene\\Lights\\EmissiveLightSampler.h\" />\n  124      <ShaderSource Include=\"Experimental\\Scene\\Lights\\BuildTriangleList.cs.slang\" />\n  125:     <ShaderSource Include=\"Core\\API\\Blit.slang\" />\n  126      <ClInclude Include=\"Experimental\\Scene\\Lights\\EmissiveUniformSampler.h\" />\n  127      <ClInclude Include=\"Experimental\\Scene\\Lights\\EnvProbe.h\" />\n  ...\n  143      <ClInclude Include=\"RenderGraph\\RenderPassHelpers.h\" />\n  144      <ClInclude Include=\"RenderPasses\\ResolvePass.h\" />\n  145:     <ClInclude Include=\"RenderPasses\\Shared\\PathTracer\\PixelStats.h\" />\n  146      <ClInclude Include=\"RenderPasses\\Shared\\PathTracer\\PathTracer.h\" />\n  147      <ClInclude Include=\"Scene\\Animation\\Animation.h\" />\n  148      <ClInclude Include=\"Scene\\Animation\\AnimationController.h\" />\n  149      <ClInclude Include=\"Scene\\HitInfo.h\" />\n  150:     <ClInclude Include=\"Scene\\Importers\\AssimpImporter.h\" />\n  151      <ClInclude Include=\"Scene\\Importers\\PythonImporter.h\" />\n  152      <ClInclude Include=\"Scene\\Importers\\SceneImporter.h\" />\n  ...\n  158      <ShaderSource Include=\"RenderPasses\\Shared\\PathTracer\\InteriorListHelpers.slang\" />\n  159      <ShaderSource Include=\"RenderPasses\\Shared\\PathTracer\\LoadShadingData.slang\" />\n  160:     <ShaderSource Include=\"RenderPasses\\Shared\\PathTracer\\PixelStats.slang\" />\n  161      <ShaderSource Include=\"RenderPasses\\Shared\\PathTracer\\PathData.slang\" />\n  162      <ShaderSource Include=\"RenderPasses\\Shared\\PathTracer\\PathTracerHelpers.slang\" />\n  ...\n  183      <ClInclude Include=\"RenderGraph\\BasePasses\\RasterScenePass.h\" />\n  184      <ClInclude Include=\"RenderGraph\\RenderGraph.h\" />\n  185:     <ClInclude Include=\"RenderGraph\\RenderGraphCompiler.h\" />\n  186      <ClInclude Include=\"RenderGraph\\RenderGraphExe.h\" />\n  187      <ClInclude Include=\"RenderGraph\\RenderGraphImportExport.h\" />\n  ...\n  237      <ClInclude Include=\"Utils\\Color\\ColorUtils.h\" />\n  238      <ClInclude Include=\"Utils\\Debug\\DebugConsole.h\" />\n  239:     <ClInclude Include=\"Utils\\Debug\\PixelDebug.h\" />\n  240      <ShaderSource Include=\"Utils\\Algorithm\\ParallelReductionType.slangh\" />\n  241      <ShaderSource Include=\"Utils\\Attributes.slang\" />\n  ...\n  249      <ClInclude Include=\"Utils\\Math\\CubicSpline.h\" />\n  250      <ClInclude Include=\"Utils\\Math\\FalcorMath.h\" />\n  251:     <ShaderSource Include=\"Utils\\Debug\\PixelDebugTypes.slang\" />\n  252:     <ShaderSource Include=\"Utils\\Debug\\ReflectPixelDebugTypes.cs.slang\" />\n  253      <ShaderSource Include=\"Utils\\Helpers.slang\" />\n  254      <ClInclude Include=\"Utils\\Math\\Vector.h\" />\n  ...\n  276      <ClInclude Include=\"Utils\\UI\\Font.h\" />\n  277      <ClInclude Include=\"Utils\\UI\\Gui.h\" />\n  278:     <ClInclude Include=\"Utils\\UI\\PixelZoom.h\" />\n  279      <ClInclude Include=\"Utils\\UI\\TextRenderer.h\" />\n  280      <ClInclude Include=\"Utils\\UI\\UserInput.h\" />\n  ...\n  286    </ItemGroup>\n  287    <ItemGroup>\n  288:     <ClCompile Include=\"..\\Externals\\.packman\\dear_imgui\\imgui.cpp\">\n  289:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">NotUsing</PrecompiledHeader>\n  290:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">NotUsing</PrecompiledHeader>\n  291:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">NotUsing</PrecompiledHeader>\n  292:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">NotUsing</PrecompiledHeader>\n  293:     </ClCompile>\n  294:     <ClCompile Include=\"..\\Externals\\.packman\\dear_imgui\\imgui_draw.cpp\">\n  295:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">NotUsing</PrecompiledHeader>\n  296:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">NotUsing</PrecompiledHeader>\n  297:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">NotUsing</PrecompiledHeader>\n  298:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">NotUsing</PrecompiledHeader>\n  299:     </ClCompile>\n  300:     <ClCompile Include=\"..\\Externals\\.packman\\dear_imgui\\imgui_widgets.cpp\">\n  301:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">NotUsing</PrecompiledHeader>\n  302:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">NotUsing</PrecompiledHeader>\n  303:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">NotUsing</PrecompiledHeader>\n  304:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">NotUsing</PrecompiledHeader>\n  305:     </ClCompile>\n  306:     <ClCompile Include=\"..\\Externals\\dear_imgui_addons\\imguinodegrapheditor\\imguinodegrapheditor.cpp\">\n  307:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">NotUsing</PrecompiledHeader>\n  308:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">NotUsing</PrecompiledHeader>\n  309:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">NotUsing</PrecompiledHeader>\n  310:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">NotUsing</PrecompiledHeader>\n  311:     </ClCompile>\n  312:     <ClCompile Include=\"..\\Externals\\mikktspace\\mikktspace.c\">\n  313:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">NotUsing</PrecompiledHeader>\n  314:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">NotUsing</PrecompiledHeader>\n  315:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">NotUsing</PrecompiledHeader>\n  316:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">NotUsing</PrecompiledHeader>\n  317:     </ClCompile>\n  318:     <ClCompile Include=\"Core\\API\\BlendState.cpp\" />\n  319:     <ClCompile Include=\"Core\\API\\Buffer.cpp\" />\n  320:     <ClCompile Include=\"Core\\API\\ComputeContext.cpp\" />\n  321:     <ClCompile Include=\"Core\\API\\ComputeStateObject.cpp\" />\n  322:     <ClCompile Include=\"Core\\API\\CopyContext.cpp\" />\n  323:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Buffer.cpp\">\n  324        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  325        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  326:     </ClCompile>\n  327:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12ComputeContext.cpp\">\n  328        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  329        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  330:     </ClCompile>\n  331:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12ComputeStateObject.cpp\">\n  332        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  333        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  334:     </ClCompile>\n  335:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12CopyContext.cpp\">\n  336        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  337        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  338:     </ClCompile>\n  339:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12DescriptorHeap.cpp\">\n  340        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  341        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  342:     </ClCompile>\n  343:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12DescriptorPool.cpp\">\n  344        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  345        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  346:     </ClCompile>\n  347:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12DescriptorSet.cpp\">\n  348        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  349        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  350:     </ClCompile>\n  351:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Device.cpp\">\n  352        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  353        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  354:     </ClCompile>\n  355:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Fbo.cpp\">\n  356        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  357        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  358:     </ClCompile>\n  359:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12GpuFence.cpp\">\n  360        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  361        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  362:     </ClCompile>\n  363:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12GpuTimer.cpp\">\n  364        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  365        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  366:     </ClCompile>\n  367:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12GraphicsStateObject.cpp\">\n  368        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  369        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  370:     </ClCompile>\n  371:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12LowLevelContextData.cpp\">\n  372        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  373        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  374:     </ClCompile>\n  375:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12QueryHeap.cpp\">\n  376        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  377        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  378:     </ClCompile>\n  379:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12RasterizerState.cpp\">\n  380        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  381        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  382:     </ClCompile>\n  383:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12RenderContext.cpp\">\n  384        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  385        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  386:     </ClCompile>\n  387:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Resource.cpp\">\n  388        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  389        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  390:     </ClCompile>\n  391:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12GpuMemoryHeap.cpp\">\n  392        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  393        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  394:     </ClCompile>\n  395:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12ResourceViews.cpp\">\n  396        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  397        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  398:     </ClCompile>\n  399:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12RootSignature.cpp\">\n  400        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  401        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  402:     </ClCompile>\n  403:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Sampler.cpp\">\n  404        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  405        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  406:     </ClCompile>\n  407:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12State.cpp\">\n  408        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  409        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  410:     </ClCompile>\n  411:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Texture.cpp\">\n  412        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  413        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  414:     </ClCompile>\n  415:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Vao.cpp\">\n  416        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  417        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  418:     </ClCompile>\n  419:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Formats.cpp\">\n  420        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  421        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  422:     </ClCompile>\n  423:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Shader.cpp\">\n  424        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  425        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  426:     </ClCompile>\n  427:     <ClCompile Include=\"Core\\API\\DepthStencilState.cpp\" />\n  428:     <ClCompile Include=\"Core\\API\\DescriptorPool.cpp\" />\n  429:     <ClCompile Include=\"Core\\API\\DescriptorSet.cpp\" />\n  430:     <ClCompile Include=\"Core\\API\\Device.cpp\" />\n  431:     <ClCompile Include=\"Core\\API\\FBO.cpp\" />\n  432:     <ClCompile Include=\"Core\\API\\Formats.cpp\" />\n  433:     <ClCompile Include=\"Core\\API\\GpuTimer.cpp\" />\n  434:     <ClCompile Include=\"Core\\API\\GraphicsStateObject.cpp\" />\n  435:     <ClCompile Include=\"Core\\API\\RasterizerState.cpp\" />\n  436:     <ClCompile Include=\"Core\\API\\RenderContext.cpp\" />\n  437:     <ClCompile Include=\"Core\\API\\Resource.cpp\" />\n  438:     <ClCompile Include=\"Core\\API\\GpuMemoryHeap.cpp\" />\n  439:     <ClCompile Include=\"Core\\API\\ResourceViews.cpp\" />\n  440:     <ClCompile Include=\"Core\\API\\RootSignature.cpp\" />\n  441:     <ClCompile Include=\"Core\\API\\Sampler.cpp\" />\n  442:     <ClCompile Include=\"Core\\API\\Texture.cpp\" />\n  443:     <ClCompile Include=\"Core\\API\\TextureLoader.cpp\" />\n  444:     <ClCompile Include=\"Core\\API\\VAO.cpp\" />\n  445:     <ClCompile Include=\"Core\\API\\VertexLayout.cpp\" />\n  446:     <ClCompile Include=\"Core\\API\\Vulkan\\VKBuffer.cpp\">\n  447        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  448        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  449:     </ClCompile>\n  450:     <ClCompile Include=\"Core\\API\\Vulkan\\VKComputeContext.cpp\">\n  451        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  452        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  453:     </ClCompile>\n  454:     <ClCompile Include=\"Core\\API\\Vulkan\\VKComputeStateObject.cpp\">\n  455        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  456        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  457:     </ClCompile>\n  458:     <ClCompile Include=\"Core\\API\\Vulkan\\VKCopyContext.cpp\">\n  459        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  460        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  461:     </ClCompile>\n  462:     <ClCompile Include=\"Core\\API\\Vulkan\\VKDescriptorPool.cpp\">\n  463        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  464        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  465:     </ClCompile>\n  466:     <ClCompile Include=\"Core\\API\\Vulkan\\VKDescriptorSet.cpp\">\n  467        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  468        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  469:     </ClCompile>\n  470:     <ClCompile Include=\"Core\\API\\Vulkan\\VKDevice.cpp\">\n  471        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  472        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  473:     </ClCompile>\n  474:     <ClCompile Include=\"Core\\API\\Vulkan\\VKFbo.cpp\">\n  475        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  476        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  477:     </ClCompile>\n  478:     <ClCompile Include=\"Core\\API\\Vulkan\\VKFormats.cpp\">\n  479        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  480        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  481:     </ClCompile>\n  482:     <ClCompile Include=\"Core\\API\\Vulkan\\VKGpuFence.cpp\">\n  483        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  484        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  485:     </ClCompile>\n  486:     <ClCompile Include=\"Core\\API\\Vulkan\\VKGpuTimer.cpp\">\n  487        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  488        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  489:     </ClCompile>\n  490:     <ClCompile Include=\"Core\\API\\Vulkan\\VKGraphicsStateObject.cpp\">\n  491        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  492        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  493:     </ClCompile>\n  494:     <ClCompile Include=\"Core\\API\\Vulkan\\VKLowLevelContextData.cpp\">\n  495        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  496        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  497:     </ClCompile>\n  498:     <ClCompile Include=\"Core\\API\\Vulkan\\VkQueryHeap.cpp\">\n  499        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  500        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  501:     </ClCompile>\n  502:     <ClCompile Include=\"Core\\API\\Vulkan\\VKRasterizerState.cpp\">\n  503        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  504        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  505:     </ClCompile>\n  506:     <ClCompile Include=\"Core\\API\\Vulkan\\VKRenderContext.cpp\">\n  507        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  508        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  509:     </ClCompile>\n  510:     <ClCompile Include=\"Core\\API\\Vulkan\\VkResource.cpp\">\n  511        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  512        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  513:     </ClCompile>\n  514:     <ClCompile Include=\"Core\\API\\Vulkan\\VkGpuMemoryHeap.cpp\">\n  515        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  516        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  517:     </ClCompile>\n  518:     <ClCompile Include=\"Core\\API\\Vulkan\\VKResourceViews.cpp\">\n  519        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  520        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  521:     </ClCompile>\n  522:     <ClCompile Include=\"Core\\API\\Vulkan\\VKRootSignature.cpp\">\n  523        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  524        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  525:     </ClCompile>\n  526:     <ClCompile Include=\"Core\\API\\Vulkan\\VKSampler.cpp\">\n  527        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  528        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  529:     </ClCompile>\n  530:     <ClCompile Include=\"Core\\API\\Vulkan\\VKShader.cpp\">\n  531        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  532        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  533:     </ClCompile>\n  534:     <ClCompile Include=\"Core\\API\\Vulkan\\VkSmartHandle.cpp\">\n  535        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  536        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  537:     </ClCompile>\n  538:     <ClCompile Include=\"Core\\API\\Vulkan\\VKState.cpp\">\n  539        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  540        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  541:     </ClCompile>\n  542:     <ClCompile Include=\"Core\\API\\Vulkan\\VKTexture.cpp\">\n  543        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  544        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  545:     </ClCompile>\n  546:     <ClCompile Include=\"Core\\API\\Vulkan\\VKVao.cpp\">\n  547        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  548        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  549:     </ClCompile>\n  550:     <ClCompile Include=\"Core\\BufferTypes\\ParameterBlock.cpp\" />\n  551:     <ClCompile Include=\"Core\\BufferTypes\\VariablesBufferUI.cpp\" />\n  552:     <ClCompile Include=\"Core\\Framework.cpp\" />\n  553:     <ClCompile Include=\"Core\\Platform\\Linux\\Linux.cpp\">\n  554        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  555        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  556        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  557        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  558:     </ClCompile>\n  559:     <ClCompile Include=\"Core\\Platform\\Linux\\ProgressBarLinux.cpp\">\n  560        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">true</ExcludedFromBuild>\n  561        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">true</ExcludedFromBuild>\n  562        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">true</ExcludedFromBuild>\n  563        <ExcludedFromBuild Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">true</ExcludedFromBuild>\n  564:     </ClCompile>\n  565:     <ClCompile Include=\"Core\\Platform\\MonitorInfo.cpp\" />\n  566:     <ClCompile Include=\"Core\\Platform\\OS.cpp\" />\n  567:     <ClCompile Include=\"Core\\Platform\\ProgressBar.cpp\" />\n  568:     <ClCompile Include=\"Core\\Platform\\Windows\\ProgressBarWin.cpp\" />\n  569:     <ClCompile Include=\"Core\\Platform\\Windows\\Windows.cpp\" />\n  570:     <ClCompile Include=\"Core\\Program\\ComputeProgram.cpp\" />\n  571:     <ClCompile Include=\"Core\\Program\\GraphicsProgram.cpp\" />\n  572:     <ClCompile Include=\"Core\\Program\\Program.cpp\" />\n  573:     <ClCompile Include=\"Core\\Program\\ProgramReflection.cpp\" />\n  574:     <ClCompile Include=\"Core\\Program\\ProgramVars.cpp\" />\n  575:     <ClCompile Include=\"Core\\Program\\ProgramVersion.cpp\" />\n  576:     <ClCompile Include=\"Core\\Program\\ShaderLibrary.cpp\" />\n  577:     <ClCompile Include=\"Core\\Program\\ShaderVar.cpp\" />\n  578:     <ClCompile Include=\"Core\\Sample.cpp\" />\n  579:     <ClCompile Include=\"Core\\State\\ComputeState.cpp\" />\n  580:     <ClCompile Include=\"Core\\State\\GraphicsState.cpp\" />\n  581:     <ClCompile Include=\"Core\\Window.cpp\" />\n  582:     <ClCompile Include=\"Experimental\\Scene\\Lights\\EmissiveLightSampler.cpp\" />\n  583:     <ClCompile Include=\"Experimental\\Scene\\Lights\\EmissiveUniformSampler.cpp\" />\n  584:     <ClCompile Include=\"Experimental\\Scene\\Lights\\EnvProbe.cpp\" />\n  585:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVH.cpp\" />\n  586:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVHBuilder.cpp\" />\n  587:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVHSampler.cpp\" />\n  588:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightCollection.cpp\" />\n  589:     <ClCompile Include=\"Raytracing\\RtProgramVars.cpp\" />\n  590:     <ClCompile Include=\"Raytracing\\RtProgramVarsHelper.cpp\" />\n  591:     <ClCompile Include=\"Raytracing\\RtProgram\\RtProgram.cpp\" />\n  592:     <ClCompile Include=\"Raytracing\\RtStateObject.cpp\" />\n  593:     <ClCompile Include=\"Raytracing\\ShaderTable.cpp\" />\n  594:     <ClCompile Include=\"RenderPasses\\ResolvePass.cpp\" />\n  595:     <ClCompile Include=\"RenderPasses\\Shared\\PathTracer\\PixelStats.cpp\" />\n  596:     <ClCompile Include=\"RenderPasses\\Shared\\PathTracer\\PathTracer.cpp\" />\n  597:     <ClCompile Include=\"Scene\\Animation\\Animation.cpp\" />\n  598:     <ClCompile Include=\"Scene\\Animation\\AnimationController.cpp\" />\n  599:     <ClCompile Include=\"Scene\\Importers\\AssimpImporter.cpp\" />\n  600:     <ClCompile Include=\"Scene\\Importers\\PythonImporter.cpp\" />\n  601:     <ClCompile Include=\"Scene\\Importers\\SceneImporter.cpp\" />\n  602:     <ClCompile Include=\"Scene\\ParticleSystem\\ParticleSystem.cpp\" />\n  603:     <ClCompile Include=\"RenderGraph\\BasePasses\\BaseGraphicsPass.cpp\" />\n  604:     <ClCompile Include=\"RenderGraph\\BasePasses\\ComputePass.cpp\" />\n  605:     <ClCompile Include=\"RenderGraph\\BasePasses\\FullScreenPass.cpp\" />\n  606:     <ClCompile Include=\"RenderGraph\\BasePasses\\RasterPass.cpp\" />\n  607:     <ClCompile Include=\"RenderGraph\\BasePasses\\RasterScenePass.cpp\" />\n  608:     <ClCompile Include=\"RenderGraph\\RenderGraph.cpp\" />\n  609:     <ClCompile Include=\"RenderGraph\\RenderGraphCompiler.cpp\" />\n  610:     <ClCompile Include=\"RenderGraph\\RenderGraphExe.cpp\" />\n  611:     <ClCompile Include=\"RenderGraph\\RenderGraphImportExport.cpp\" />\n  612:     <ClCompile Include=\"RenderGraph\\RenderGraphIR.cpp\" />\n  613:     <ClCompile Include=\"RenderGraph\\RenderGraphUI.cpp\" />\n  614:     <ClCompile Include=\"RenderGraph\\RenderPass.cpp\" />\n  615:     <ClCompile Include=\"RenderGraph\\RenderPassLibrary.cpp\" />\n  616:     <ClCompile Include=\"RenderGraph\\RenderPassReflection.cpp\" />\n  617:     <ClCompile Include=\"RenderGraph\\ResourceCache.cpp\" />\n  618:     <ClCompile Include=\"Scene\\Camera\\Camera.cpp\" />\n  619:     <ClCompile Include=\"Scene\\Camera\\CameraController.cpp\" />\n  620:     <ClCompile Include=\"Scene\\Lights\\Light.cpp\" />\n  621:     <ClCompile Include=\"Scene\\Lights\\LightProbe.cpp\" />\n  622:     <ClCompile Include=\"Scene\\Material\\Material.cpp\" />\n  623:     <ClCompile Include=\"Scene\\SceneBuilder.cpp\" />\n  624:     <ClCompile Include=\"Scene\\Scene.cpp\" />\n  625:     <ClCompile Include=\"stdafx.cpp\">\n  626:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">Create</PrecompiledHeader>\n  627:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">Create</PrecompiledHeader>\n  628:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">Create</PrecompiledHeader>\n  629:       <PrecompiledHeader Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">Create</PrecompiledHeader>\n  630:     </ClCompile>\n  631:     <ClCompile Include=\"Testing\\UnitTest.cpp\" />\n  632:     <ClCompile Include=\"Utils\\Algorithm\\BitonicSort.cpp\" />\n  633:     <ClCompile Include=\"Utils\\Algorithm\\ComputeParallelReduction.cpp\" />\n  634:     <ClCompile Include=\"Utils\\Algorithm\\ParallelReduction.cpp\" />\n  635:     <ClCompile Include=\"Utils\\Algorithm\\PrefixSum.cpp\" />\n  636:     <ClCompile Include=\"Utils\\ArgList.cpp\" />\n  637:     <ClCompile Include=\"Utils\\Debug\\PixelDebug.cpp\" />\n  638:     <ClCompile Include=\"Utils\\Image\\Bitmap.cpp\" />\n  639:     <ClCompile Include=\"Utils\\Image\\DXHeader.cpp\" />\n  640:     <ClCompile Include=\"Utils\\Logger.cpp\" />\n  641:     <ClCompile Include=\"Utils\\Perception\\Experiment.cpp\" />\n  642:     <ClCompile Include=\"Utils\\Perception\\SingleThresholdMeasurement.cpp\" />\n  643:     <ClCompile Include=\"Utils\\SampleGenerators\\DxSamplePattern.cpp\" />\n  644:     <ClCompile Include=\"Utils\\SampleGenerators\\HaltonSamplePattern.cpp\" />\n  645:     <ClCompile Include=\"Utils\\SampleGenerators\\StratifiedSamplePattern.cpp\" />\n  646:     <ClCompile Include=\"Utils\\Sampling\\SampleGenerator.cpp\" />\n  647:     <ClCompile Include=\"Utils\\Scripting\\Console.cpp\" />\n  648:     <ClCompile Include=\"Utils\\Scripting\\ScriptBindings.cpp\" />\n  649:     <ClCompile Include=\"Utils\\Scripting\\Scripting.cpp\" />\n  650:     <ClCompile Include=\"Utils\\TermColor.cpp\" />\n  651:     <ClCompile Include=\"Utils\\Threading.cpp\" />\n  652:     <ClCompile Include=\"Utils\\Timing\\Clock.cpp\" />\n  653:     <ClCompile Include=\"Utils\\Timing\\FrameRate.cpp\" />\n  654:     <ClCompile Include=\"Utils\\Timing\\Profiler.cpp\" />\n  655:     <ClCompile Include=\"Utils\\UI\\DebugDrawer.cpp\" />\n  656:     <ClCompile Include=\"Utils\\UI\\Font.cpp\" />\n  657:     <ClCompile Include=\"Utils\\UI\\Gui.cpp\" />\n  658:     <ClCompile Include=\"Utils\\UI\\PixelZoom.cpp\" />\n  659:     <ClCompile Include=\"Utils\\UI\\TextRenderer.cpp\" />\n  660:     <ClCompile Include=\"Utils\\Video\\VideoEncoder.cpp\" />\n  661:     <ClCompile Include=\"Utils\\Video\\VideoEncoderUI.cpp\" />\n  662    </ItemGroup>\n  663    <ItemGroup>\n  ...\n  681      <ShaderSource Include=\"Utils\\Algorithm\\PrefixSum.cs.slang\" />\n  682      <ShaderSource Include=\"Utils\\Color\\ColorMap.slang\" />\n  683:     <ShaderSource Include=\"Utils\\Debug\\PixelDebug.slang\" />\n  684      <ShaderSource Include=\"Utils\\Math\\AABB.slang\" />\n  685      <ShaderSource Include=\"Utils\\Math\\BitTricks.slang\" />\n  ...\n  774    </PropertyGroup>\n  775    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='DebugD3D12|x64'\">\n  776:     <ClCompile>\n  777        <WarningLevel>Level3</WarningLevel>\n  778        <Optimization>Disabled</Optimization>\n  779:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_D3D12;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE;_$(OutputType)</PreprocessorDefinitions>\n  780:       <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  781        <TreatWarningAsError>true</TreatWarningAsError>\n  782:       <MultiProcessorCompilation>true</MultiProcessorCompilation>\n  783        <LanguageStandard>stdcpp17</LanguageStandard>\n  784        <ConformanceMode>true</ConformanceMode>\n  785:       <PrecompiledHeader>Use</PrecompiledHeader>\n  786        <AdditionalOptions>/bigobj</AdditionalOptions>\n  787:     </ClCompile>\n  788      <Link>\n  789        <SubSystem>Windows</SubSystem>\n  790        <GenerateDebugInformation>true</GenerateDebugInformation>\n  791:       <AdditionalLibraryDirectories>$(ProjectDir)..\\Externals\\.packman\\FreeImage;$(ProjectDir)..\\Externals\\.packman\\Assimp\\lib\\$(PlatformName)\\;$(ProjectDir)..\\Externals\\.packman\\FFMpeg\\lib\\$(PlatformName);$(ProjectDir)..\\Externals\\.packman\\openvr\\lib\\win64;$(ProjectDir)..\\Externals\\.packman\\nvapi\\amd64;$(ProjectDir)..\\Externals\\.packman\\VulkanSDK\\Lib;$(ProjectDir)..\\Externals\\.packman\\Slang\\bin\\windows-x64\\release;$(ProjectDir)..\\Externals\\.packman\\GLFW\\lib;$(ProjectDir)..\\Externals\\.packman\\Python\\libs;$(ProjectDir)..\\Externals\\.packman\\WinPixEventRuntime\\bin\\x64</AdditionalLibraryDirectories>\n  792:       <AdditionalDependencies>WinPixEventRuntime.lib;glfw3dll.lib;slang.lib;Comctl32.lib;Shlwapi.lib;assimp-vc141-mt.lib;freeimage.lib;avcodec.lib;avutil.lib;avformat.lib;swscale.lib;Shcore.lib;%(AdditionalDependencies)</AdditionalDependencies>\n  793      </Link>\n  794      <PreBuildEvent>\n  ...\n  812    </ItemDefinitionGroup>\n  813    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='DebugVK|x64'\">\n  814:     <ClCompile>\n  815        <WarningLevel>Level3</WarningLevel>\n  816        <Optimization>Disabled</Optimization>\n  817:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_VK;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE</PreprocessorDefinitions>\n  818:       <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  819        <TreatWarningAsError>true</TreatWarningAsError>\n  820:       <MultiProcessorCompilation>true</MultiProcessorCompilation>\n  821        <LanguageStandard>stdcpp17</LanguageStandard>\n  822        <ConformanceMode>true</ConformanceMode>\n  823:       <PrecompiledHeader>Use</PrecompiledHeader>\n  824        <AdditionalOptions>/bigobj</AdditionalOptions>\n  825:     </ClCompile>\n  826      <Link>\n  827        <SubSystem>Windows</SubSystem>\n  828        <GenerateDebugInformation>true</GenerateDebugInformation>\n  829:       <AdditionalLibraryDirectories>$(ProjectDir)..\\Externals\\.packman\\FreeImage;$(ProjectDir)..\\Externals\\.packman\\Assimp\\lib\\$(PlatformName)\\;$(ProjectDir)..\\Externals\\.packman\\FFMpeg\\lib\\$(PlatformName);$(ProjectDir)..\\Externals\\.packman\\openvr\\lib\\win64;$(ProjectDir)..\\Externals\\.packman\\nvapi\\amd64;$(ProjectDir)..\\Externals\\.packman\\VulkanSDK\\Lib;$(ProjectDir)..\\Externals\\.packman\\Slang\\bin\\windows-x64\\release;$(ProjectDir)..\\Externals\\.packman\\GLFW\\lib;$(ProjectDir)..\\Externals\\.packman\\Python\\libs;$(ProjectDir)..\\Externals\\.packman\\WinPixEventRuntime\\bin\\x64</AdditionalLibraryDirectories>\n  830:       <AdditionalDependencies>WinPixEventRuntime.lib;glfw3dll.lib;slang.lib;Comctl32.lib;Shlwapi.lib;assimp-vc141-mt.lib;freeimage.lib;avcodec.lib;avutil.lib;avformat.lib;swscale.lib;Shcore.lib;%(AdditionalDependencies)</AdditionalDependencies>\n  831      </Link>\n  832      <PreBuildEvent>\n  ...\n  852    </ItemDefinitionGroup>\n  853    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='ReleaseD3D12|x64'\">\n  854:     <ClCompile>\n  855        <WarningLevel>Level3</WarningLevel>\n  856        <Optimization>MaxSpeed</Optimization>\n  857        <IntrinsicFunctions>true</IntrinsicFunctions>\n  858:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_D3D12;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE</PreprocessorDefinitions>\n  859:       <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  860        <TreatWarningAsError>true</TreatWarningAsError>\n  861:       <MultiProcessorCompilation>true</MultiProcessorCompilation>\n  862        <LanguageStandard>stdcpp17</LanguageStandard>\n  863        <ConformanceMode>true</ConformanceMode>\n  864:       <PrecompiledHeader>Use</PrecompiledHeader>\n  865        <AdditionalOptions>/bigobj</AdditionalOptions>\n  866:     </ClCompile>\n  867      <Link>\n  868        <SubSystem>Windows</SubSystem>\n  ...\n  870        <EnableCOMDATFolding>true</EnableCOMDATFolding>\n  871        <OptimizeReferences>true</OptimizeReferences>\n  872:       <AdditionalLibraryDirectories>$(ProjectDir)..\\Externals\\.packman\\FreeImage;$(ProjectDir)..\\Externals\\.packman\\Assimp\\lib\\$(PlatformName)\\;$(ProjectDir)..\\Externals\\.packman\\FFMpeg\\lib\\$(PlatformName);$(ProjectDir)..\\Externals\\.packman\\openvr\\lib\\win64;$(ProjectDir)..\\Externals\\.packman\\nvapi\\amd64;$(ProjectDir)..\\Externals\\.packman\\VulkanSDK\\Lib;$(ProjectDir)..\\Externals\\.packman\\Slang\\bin\\windows-x64\\release;$(ProjectDir)..\\Externals\\.packman\\GLFW\\lib;$(ProjectDir)..\\Externals\\.packman\\Python\\libs;$(ProjectDir)..\\Externals\\.packman\\WinPixEventRuntime\\bin\\x64</AdditionalLibraryDirectories>\n  873:       <AdditionalDependencies>WinPixEventRuntime.lib;glfw3dll.lib;slang.lib;Comctl32.lib;Shlwapi.lib;assimp-vc141-mt.lib;freeimage.lib;avcodec.lib;avutil.lib;avformat.lib;swscale.lib;Shcore.lib;%(AdditionalDependencies)</AdditionalDependencies>\n  874      </Link>\n  875      <PreBuildEvent>\n  ...\n  894    </ItemDefinitionGroup>\n  895    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='ReleaseVK|x64'\">\n  896:     <ClCompile>\n  897        <WarningLevel>Level3</WarningLevel>\n  898        <Optimization>MaxSpeed</Optimization>\n  899        <IntrinsicFunctions>true</IntrinsicFunctions>\n  900:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_VK;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE</PreprocessorDefinitions>\n  901:       <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  902        <TreatWarningAsError>true</TreatWarningAsError>\n  903:       <MultiProcessorCompilation>true</MultiProcessorCompilation>\n  904        <LanguageStandard>stdcpp17</LanguageStandard>\n  905        <ConformanceMode>true</ConformanceMode>\n  906:       <PrecompiledHeader>Use</PrecompiledHeader>\n  907        <AdditionalOptions>/bigobj</AdditionalOptions>\n  908:     </ClCompile>\n  909      <Link>\n  910        <SubSystem>Windows</SubSystem>\n  ...\n  912        <EnableCOMDATFolding>true</EnableCOMDATFolding>\n  913        <OptimizeReferences>true</OptimizeReferences>\n  914:       <AdditionalLibraryDirectories>$(ProjectDir)..\\Externals\\.packman\\FreeImage;$(ProjectDir)..\\Externals\\.packman\\Assimp\\lib\\$(PlatformName)\\;$(ProjectDir)..\\Externals\\.packman\\FFMpeg\\lib\\$(PlatformName);$(ProjectDir)..\\Externals\\.packman\\openvr\\lib\\win64;$(ProjectDir)..\\Externals\\.packman\\nvapi\\amd64;$(ProjectDir)..\\Externals\\.packman\\VulkanSDK\\Lib;$(ProjectDir)..\\Externals\\.packman\\Slang\\bin\\windows-x64\\release;$(ProjectDir)..\\Externals\\.packman\\GLFW\\lib;$(ProjectDir)..\\Externals\\.packman\\Python\\libs;$(ProjectDir)..\\Externals\\.packman\\WinPixEventRuntime\\bin\\x64</AdditionalLibraryDirectories>\n  915:       <AdditionalDependencies>WinPixEventRuntime.lib;glfw3dll.lib;slang.lib;Comctl32.lib;Shlwapi.lib;assimp-vc141-mt.lib;freeimage.lib;avcodec.lib;avutil.lib;avformat.lib;swscale.lib;Shcore.lib;%(AdditionalDependencies)</AdditionalDependencies>\n  916      </Link>\n  917      <PreBuildEvent>\n\n/home/max/dev/Lava/src/Falcor/Falcor.vcxproj.filters:\n    2  <Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n    3    <ItemGroup>\n    4:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12DescriptorData.h\">\n    5:       <Filter>Core\\API\\D3D12</Filter>\n    6      </ClInclude>\n    7:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12DescriptorHeap.h\">\n    8:       <Filter>Core\\API\\D3D12</Filter>\n    9      </ClInclude>\n   10:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12NvApiExDesc.h\">\n   11:       <Filter>Core\\API\\D3D12</Filter>\n   12      </ClInclude>\n   13:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12Resource.h\">\n   14:       <Filter>Core\\API\\D3D12</Filter>\n   15      </ClInclude>\n   16:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12State.h\">\n   17:       <Filter>Core\\API\\D3D12</Filter>\n   18      </ClInclude>\n   19:     <ClInclude Include=\"Core\\API\\D3D12\\FalcorD3D12.h\">\n   20:       <Filter>Core\\API\\D3D12</Filter>\n   21      </ClInclude>\n   22:     <ClInclude Include=\"Core\\API\\D3D12\\D3D12ApiData.h\">\n   23:       <Filter>Core\\API\\D3D12</Filter>\n   24      </ClInclude>\n   25:     <ClInclude Include=\"Core\\API\\Vulkan\\VKDescriptorData.h\">\n   26:       <Filter>Core\\API\\Vulkan</Filter>\n   27      </ClInclude>\n   28:     <ClInclude Include=\"Core\\API\\Vulkan\\VKSmartHandle.h\">\n   29:       <Filter>Core\\API\\Vulkan</Filter>\n   30      </ClInclude>\n   31:     <ClInclude Include=\"Core\\API\\Vulkan\\VKState.h\">\n   32:       <Filter>Core\\API\\Vulkan</Filter>\n   33      </ClInclude>\n   34:     <ClInclude Include=\"Core\\API\\Vulkan\\FalcorVK.h\">\n   35:       <Filter>Core\\API\\Vulkan</Filter>\n   36      </ClInclude>\n   37:     <ClInclude Include=\"Core\\API\\ComputeStateObject.h\">\n   38:       <Filter>Core\\API</Filter>\n   39      </ClInclude>\n   40:     <ClInclude Include=\"Core\\API\\CopyContext.h\">\n   41:       <Filter>Core\\API</Filter>\n   42      </ClInclude>\n   43:     <ClInclude Include=\"Core\\API\\DepthStencilState.h\">\n   44:       <Filter>Core\\API</Filter>\n   45      </ClInclude>\n   46:     <ClInclude Include=\"Core\\API\\DescriptorPool.h\">\n   47:       <Filter>Core\\API</Filter>\n   48      </ClInclude>\n   49:     <ClInclude Include=\"Core\\API\\DescriptorSet.h\">\n   50:       <Filter>Core\\API</Filter>\n   51      </ClInclude>\n   52:     <ClInclude Include=\"Core\\API\\Device.h\">\n   53:       <Filter>Core\\API</Filter>\n   54      </ClInclude>\n   55:     <ClInclude Include=\"Core\\API\\FBO.h\">\n   56:       <Filter>Core\\API</Filter>\n   57      </ClInclude>\n   58:     <ClInclude Include=\"Core\\API\\FencedPool.h\">\n   59:       <Filter>Core\\API</Filter>\n   60      </ClInclude>\n   61:     <ClInclude Include=\"Core\\API\\Formats.h\">\n   62:       <Filter>Core\\API</Filter>\n   63      </ClInclude>\n   64:     <ClInclude Include=\"Core\\API\\GpuFence.h\">\n   65:       <Filter>Core\\API</Filter>\n   66      </ClInclude>\n   67:     <ClInclude Include=\"Core\\API\\GpuTimer.h\">\n   68:       <Filter>Core\\API</Filter>\n   69      </ClInclude>\n   70:     <ClInclude Include=\"Core\\API\\GraphicsStateObject.h\">\n   71:       <Filter>Core\\API</Filter>\n   72      </ClInclude>\n   73:     <ClInclude Include=\"Core\\API\\LowLevelContextData.h\">\n   74:       <Filter>Core\\API</Filter>\n   75      </ClInclude>\n   76:     <ClInclude Include=\"Core\\API\\QueryHeap.h\">\n   77:       <Filter>Core\\API</Filter>\n   78      </ClInclude>\n   79:     <ClInclude Include=\"Core\\API\\RasterizerState.h\">\n   80:       <Filter>Core\\API</Filter>\n   81      </ClInclude>\n   82:     <ClInclude Include=\"Core\\API\\RenderContext.h\">\n   83:       <Filter>Core\\API</Filter>\n   84      </ClInclude>\n   85:     <ClInclude Include=\"Core\\API\\Resource.h\">\n   86:       <Filter>Core\\API</Filter>\n   87      </ClInclude>\n   88:     <ClInclude Include=\"Core\\API\\ResourceViews.h\">\n   89:       <Filter>Core\\API</Filter>\n   90      </ClInclude>\n   91:     <ClInclude Include=\"Core\\API\\RootSignature.h\">\n   92:       <Filter>Core\\API</Filter>\n   93      </ClInclude>\n   94:     <ClInclude Include=\"Core\\API\\Sampler.h\">\n   95:       <Filter>Core\\API</Filter>\n   96      </ClInclude>\n   97:     <ClInclude Include=\"Core\\API\\Shader.h\">\n   98:       <Filter>Core\\API</Filter>\n   99      </ClInclude>\n  100:     <ClInclude Include=\"Core\\API\\Texture.h\">\n  101:       <Filter>Core\\API</Filter>\n  102      </ClInclude>\n  103:     <ClInclude Include=\"Core\\API\\VAO.h\">\n  104:       <Filter>Core\\API</Filter>\n  105      </ClInclude>\n  106:     <ClInclude Include=\"Core\\API\\VertexLayout.h\">\n  107:       <Filter>Core\\API</Filter>\n  108      </ClInclude>\n  109:     <ClInclude Include=\"Core\\API\\BlendState.h\">\n  110:       <Filter>Core\\API</Filter>\n  111      </ClInclude>\n  112:     <ClInclude Include=\"Core\\API\\Buffer.h\">\n  113:       <Filter>Core\\API</Filter>\n  114      </ClInclude>\n  115:     <ClInclude Include=\"Core\\API\\ComputeContext.h\">\n  116:       <Filter>Core\\API</Filter>\n  117      </ClInclude>\n  118      <ClInclude Include=\"Core\\Program\\GraphicsProgram.h\">\n  ...\n  202        <Filter>Utils\\UI</Filter>\n  203      </ClInclude>\n  204:     <ClInclude Include=\"Utils\\UI\\PixelZoom.h\">\n  205        <Filter>Utils\\UI</Filter>\n  206      </ClInclude>\n  ...\n  344        <Filter>RenderGraph</Filter>\n  345      </ClInclude>\n  346:     <ClInclude Include=\"RenderGraph\\RenderGraphCompiler.h\">\n  347        <Filter>RenderGraph</Filter>\n  348      </ClInclude>\n  ...\n  362        <Filter>Utils\\Color</Filter>\n  363      </ClInclude>\n  364:     <ClInclude Include=\"Core\\API\\GpuMemoryHeap.h\">\n  365:       <Filter>Core\\API</Filter>\n  366      </ClInclude>\n  367      <ClInclude Include=\"Scene\\SceneBuilder.h\">\n  ...\n  392        <Filter>Scene\\Animation</Filter>\n  393      </ClInclude>\n  394:     <ClInclude Include=\"Scene\\Importers\\AssimpImporter.h\">\n  395        <Filter>Scene\\Importers</Filter>\n  396      </ClInclude>\n  ...\n  419        <Filter>RenderGraph</Filter>\n  420      </ClInclude>\n  421:     <ClInclude Include=\"Utils\\Debug\\PixelDebug.h\">\n  422        <Filter>Utils\\Debug</Filter>\n  423      </ClInclude>\n  ...\n  485        <Filter>Utils</Filter>\n  486      </ClInclude>\n  487:     <ClInclude Include=\"RenderPasses\\Shared\\PathTracer\\PixelStats.h\">\n  488        <Filter>RenderPasses\\Shared\\PathTracer</Filter>\n  489      </ClInclude>\n  ...\n  499        <UniqueIdentifier>{fc024fe5-7aa0-45ec-95d3-cf8a36a0604c}</UniqueIdentifier>\n  500      </Filter>\n  501:     <Filter Include=\"Core\\API\">\n  502        <UniqueIdentifier>{1d9e2adf-2ce8-4026-a082-0a4009876488}</UniqueIdentifier>\n  503      </Filter>\n  504:     <Filter Include=\"Core\\API\\D3D12\">\n  505        <UniqueIdentifier>{c95f5d9c-1636-49d4-998f-495bade41a7e}</UniqueIdentifier>\n  506      </Filter>\n  507:     <Filter Include=\"Core\\API\\Vulkan\">\n  508        <UniqueIdentifier>{9bc470ff-b97f-48f8-9841-6aed7b07e822}</UniqueIdentifier>\n  509      </Filter>\n  ...\n  639    </ItemGroup>\n  640    <ItemGroup>\n  641:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12DescriptorHeap.cpp\">\n  642:       <Filter>Core\\API\\D3D12</Filter>\n  643:     </ClCompile>\n  644:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12DescriptorPool.cpp\">\n  645:       <Filter>Core\\API\\D3D12</Filter>\n  646:     </ClCompile>\n  647:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12DescriptorSet.cpp\">\n  648:       <Filter>Core\\API\\D3D12</Filter>\n  649:     </ClCompile>\n  650:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Device.cpp\">\n  651:       <Filter>Core\\API\\D3D12</Filter>\n  652:     </ClCompile>\n  653:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Fbo.cpp\">\n  654:       <Filter>Core\\API\\D3D12</Filter>\n  655:     </ClCompile>\n  656:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12GpuFence.cpp\">\n  657:       <Filter>Core\\API\\D3D12</Filter>\n  658:     </ClCompile>\n  659:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12GpuTimer.cpp\">\n  660:       <Filter>Core\\API\\D3D12</Filter>\n  661:     </ClCompile>\n  662:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12GraphicsStateObject.cpp\">\n  663:       <Filter>Core\\API\\D3D12</Filter>\n  664:     </ClCompile>\n  665:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12LowLevelContextData.cpp\">\n  666:       <Filter>Core\\API\\D3D12</Filter>\n  667:     </ClCompile>\n  668:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12QueryHeap.cpp\">\n  669:       <Filter>Core\\API\\D3D12</Filter>\n  670:     </ClCompile>\n  671:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12RasterizerState.cpp\">\n  672:       <Filter>Core\\API\\D3D12</Filter>\n  673:     </ClCompile>\n  674:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12RenderContext.cpp\">\n  675:       <Filter>Core\\API\\D3D12</Filter>\n  676:     </ClCompile>\n  677:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Resource.cpp\">\n  678:       <Filter>Core\\API\\D3D12</Filter>\n  679:     </ClCompile>\n  680:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12ResourceViews.cpp\">\n  681:       <Filter>Core\\API\\D3D12</Filter>\n  682:     </ClCompile>\n  683:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12RootSignature.cpp\">\n  684:       <Filter>Core\\API\\D3D12</Filter>\n  685:     </ClCompile>\n  686:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Sampler.cpp\">\n  687:       <Filter>Core\\API\\D3D12</Filter>\n  688:     </ClCompile>\n  689:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12State.cpp\">\n  690:       <Filter>Core\\API\\D3D12</Filter>\n  691:     </ClCompile>\n  692:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Texture.cpp\">\n  693:       <Filter>Core\\API\\D3D12</Filter>\n  694:     </ClCompile>\n  695:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Vao.cpp\">\n  696:       <Filter>Core\\API\\D3D12</Filter>\n  697:     </ClCompile>\n  698:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Buffer.cpp\">\n  699:       <Filter>Core\\API\\D3D12</Filter>\n  700:     </ClCompile>\n  701:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12ComputeContext.cpp\">\n  702:       <Filter>Core\\API\\D3D12</Filter>\n  703:     </ClCompile>\n  704:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12ComputeStateObject.cpp\">\n  705:       <Filter>Core\\API\\D3D12</Filter>\n  706:     </ClCompile>\n  707:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12CopyContext.cpp\">\n  708:       <Filter>Core\\API\\D3D12</Filter>\n  709:     </ClCompile>\n  710:     <ClCompile Include=\"Core\\API\\Vulkan\\VKCopyContext.cpp\">\n  711:       <Filter>Core\\API\\Vulkan</Filter>\n  712:     </ClCompile>\n  713:     <ClCompile Include=\"Core\\API\\Vulkan\\VKDescriptorPool.cpp\">\n  714:       <Filter>Core\\API\\Vulkan</Filter>\n  715:     </ClCompile>\n  716:     <ClCompile Include=\"Core\\API\\Vulkan\\VKDescriptorSet.cpp\">\n  717:       <Filter>Core\\API\\Vulkan</Filter>\n  718:     </ClCompile>\n  719:     <ClCompile Include=\"Core\\API\\Vulkan\\VKDevice.cpp\">\n  720:       <Filter>Core\\API\\Vulkan</Filter>\n  721:     </ClCompile>\n  722:     <ClCompile Include=\"Core\\API\\Vulkan\\VKFbo.cpp\">\n  723:       <Filter>Core\\API\\Vulkan</Filter>\n  724:     </ClCompile>\n  725:     <ClCompile Include=\"Core\\API\\Vulkan\\VKFormats.cpp\">\n  726:       <Filter>Core\\API\\Vulkan</Filter>\n  727:     </ClCompile>\n  728:     <ClCompile Include=\"Core\\API\\Vulkan\\VKGpuFence.cpp\">\n  729:       <Filter>Core\\API\\Vulkan</Filter>\n  730:     </ClCompile>\n  731:     <ClCompile Include=\"Core\\API\\Vulkan\\VKGpuTimer.cpp\">\n  732:       <Filter>Core\\API\\Vulkan</Filter>\n  733:     </ClCompile>\n  734:     <ClCompile Include=\"Core\\API\\Vulkan\\VKGraphicsStateObject.cpp\">\n  735:       <Filter>Core\\API\\Vulkan</Filter>\n  736:     </ClCompile>\n  737:     <ClCompile Include=\"Core\\API\\Vulkan\\VKLowLevelContextData.cpp\">\n  738:       <Filter>Core\\API\\Vulkan</Filter>\n  739:     </ClCompile>\n  740:     <ClCompile Include=\"Core\\API\\Vulkan\\VkQueryHeap.cpp\">\n  741:       <Filter>Core\\API\\Vulkan</Filter>\n  742:     </ClCompile>\n  743:     <ClCompile Include=\"Core\\API\\Vulkan\\VKRasterizerState.cpp\">\n  744:       <Filter>Core\\API\\Vulkan</Filter>\n  745:     </ClCompile>\n  746:     <ClCompile Include=\"Core\\API\\Vulkan\\VKRenderContext.cpp\">\n  747:       <Filter>Core\\API\\Vulkan</Filter>\n  748:     </ClCompile>\n  749:     <ClCompile Include=\"Core\\API\\Vulkan\\VkResource.cpp\">\n  750:       <Filter>Core\\API\\Vulkan</Filter>\n  751:     </ClCompile>\n  752:     <ClCompile Include=\"Core\\API\\Vulkan\\VKResourceViews.cpp\">\n  753:       <Filter>Core\\API\\Vulkan</Filter>\n  754:     </ClCompile>\n  755:     <ClCompile Include=\"Core\\API\\Vulkan\\VKRootSignature.cpp\">\n  756:       <Filter>Core\\API\\Vulkan</Filter>\n  757:     </ClCompile>\n  758:     <ClCompile Include=\"Core\\API\\Vulkan\\VKSampler.cpp\">\n  759:       <Filter>Core\\API\\Vulkan</Filter>\n  760:     </ClCompile>\n  761:     <ClCompile Include=\"Core\\API\\Vulkan\\VKShader.cpp\">\n  762:       <Filter>Core\\API\\Vulkan</Filter>\n  763:     </ClCompile>\n  764:     <ClCompile Include=\"Core\\API\\Vulkan\\VkSmartHandle.cpp\">\n  765:       <Filter>Core\\API\\Vulkan</Filter>\n  766:     </ClCompile>\n  767:     <ClCompile Include=\"Core\\API\\Vulkan\\VKState.cpp\">\n  768:       <Filter>Core\\API\\Vulkan</Filter>\n  769:     </ClCompile>\n  770:     <ClCompile Include=\"Core\\API\\Vulkan\\VKTexture.cpp\">\n  771:       <Filter>Core\\API\\Vulkan</Filter>\n  772:     </ClCompile>\n  773:     <ClCompile Include=\"Core\\API\\Vulkan\\VKVao.cpp\">\n  774:       <Filter>Core\\API\\Vulkan</Filter>\n  775:     </ClCompile>\n  776:     <ClCompile Include=\"Core\\API\\Vulkan\\VKBuffer.cpp\">\n  777:       <Filter>Core\\API\\Vulkan</Filter>\n  778:     </ClCompile>\n  779:     <ClCompile Include=\"Core\\API\\Vulkan\\VKComputeContext.cpp\">\n  780:       <Filter>Core\\API\\Vulkan</Filter>\n  781:     </ClCompile>\n  782:     <ClCompile Include=\"Core\\API\\Vulkan\\VKComputeStateObject.cpp\">\n  783:       <Filter>Core\\API\\Vulkan</Filter>\n  784:     </ClCompile>\n  785:     <ClCompile Include=\"Core\\API\\CopyContext.cpp\">\n  786:       <Filter>Core\\API</Filter>\n  787:     </ClCompile>\n  788:     <ClCompile Include=\"Core\\API\\DepthStencilState.cpp\">\n  789:       <Filter>Core\\API</Filter>\n  790:     </ClCompile>\n  791:     <ClCompile Include=\"Core\\API\\DescriptorPool.cpp\">\n  792:       <Filter>Core\\API</Filter>\n  793:     </ClCompile>\n  794:     <ClCompile Include=\"Core\\API\\DescriptorSet.cpp\">\n  795:       <Filter>Core\\API</Filter>\n  796:     </ClCompile>\n  797:     <ClCompile Include=\"Core\\API\\Device.cpp\">\n  798:       <Filter>Core\\API</Filter>\n  799:     </ClCompile>\n  800:     <ClCompile Include=\"Core\\API\\FBO.cpp\">\n  801:       <Filter>Core\\API</Filter>\n  802:     </ClCompile>\n  803:     <ClCompile Include=\"Core\\API\\Formats.cpp\">\n  804:       <Filter>Core\\API</Filter>\n  805:     </ClCompile>\n  806:     <ClCompile Include=\"Core\\API\\GpuTimer.cpp\">\n  807:       <Filter>Core\\API</Filter>\n  808:     </ClCompile>\n  809:     <ClCompile Include=\"Core\\API\\GraphicsStateObject.cpp\">\n  810:       <Filter>Core\\API</Filter>\n  811:     </ClCompile>\n  812:     <ClCompile Include=\"Core\\API\\RenderContext.cpp\">\n  813:       <Filter>Core\\API</Filter>\n  814:     </ClCompile>\n  815:     <ClCompile Include=\"Core\\API\\Resource.cpp\">\n  816:       <Filter>Core\\API</Filter>\n  817:     </ClCompile>\n  818:     <ClCompile Include=\"Core\\API\\ResourceViews.cpp\">\n  819:       <Filter>Core\\API</Filter>\n  820:     </ClCompile>\n  821:     <ClCompile Include=\"Core\\API\\RootSignature.cpp\">\n  822:       <Filter>Core\\API</Filter>\n  823:     </ClCompile>\n  824:     <ClCompile Include=\"Core\\API\\Sampler.cpp\">\n  825:       <Filter>Core\\API</Filter>\n  826:     </ClCompile>\n  827:     <ClCompile Include=\"Core\\API\\Texture.cpp\">\n  828:       <Filter>Core\\API</Filter>\n  829:     </ClCompile>\n  830:     <ClCompile Include=\"Core\\API\\TextureLoader.cpp\">\n  831:       <Filter>Core\\API</Filter>\n  832:     </ClCompile>\n  833:     <ClCompile Include=\"Core\\API\\VAO.cpp\">\n  834:       <Filter>Core\\API</Filter>\n  835:     </ClCompile>\n  836:     <ClCompile Include=\"Core\\API\\BlendState.cpp\">\n  837:       <Filter>Core\\API</Filter>\n  838:     </ClCompile>\n  839:     <ClCompile Include=\"Core\\API\\Buffer.cpp\">\n  840:       <Filter>Core\\API</Filter>\n  841:     </ClCompile>\n  842:     <ClCompile Include=\"Core\\API\\ComputeContext.cpp\">\n  843:       <Filter>Core\\API</Filter>\n  844:     </ClCompile>\n  845:     <ClCompile Include=\"Core\\API\\ComputeStateObject.cpp\">\n  846:       <Filter>Core\\API</Filter>\n  847:     </ClCompile>\n  848:     <ClCompile Include=\"Core\\Program\\Program.cpp\">\n  849        <Filter>Core\\Program</Filter>\n  850:     </ClCompile>\n  851:     <ClCompile Include=\"Core\\Program\\ProgramReflection.cpp\">\n  852        <Filter>Core\\Program</Filter>\n  853:     </ClCompile>\n  854:     <ClCompile Include=\"Core\\Program\\ProgramVars.cpp\">\n  855        <Filter>Core\\Program</Filter>\n  856:     </ClCompile>\n  857:     <ClCompile Include=\"Core\\Program\\ProgramVersion.cpp\">\n  858        <Filter>Core\\Program</Filter>\n  859:     </ClCompile>\n  860:     <ClCompile Include=\"Core\\Program\\ShaderLibrary.cpp\">\n  861        <Filter>Core\\Program</Filter>\n  862:     </ClCompile>\n  863:     <ClCompile Include=\"Core\\Program\\ComputeProgram.cpp\">\n  864        <Filter>Core\\Program</Filter>\n  865:     </ClCompile>\n  866:     <ClCompile Include=\"Core\\Program\\GraphicsProgram.cpp\">\n  867        <Filter>Core\\Program</Filter>\n  868:     </ClCompile>\n  869:     <ClCompile Include=\"Core\\State\\GraphicsState.cpp\">\n  870        <Filter>Core\\State</Filter>\n  871:     </ClCompile>\n  872:     <ClCompile Include=\"Core\\State\\ComputeState.cpp\">\n  873        <Filter>Core\\State</Filter>\n  874:     </ClCompile>\n  875:     <ClCompile Include=\"Core\\Sample.cpp\">\n  876        <Filter>Core</Filter>\n  877:     </ClCompile>\n  878:     <ClCompile Include=\"Core\\Window.cpp\">\n  879        <Filter>Core</Filter>\n  880:     </ClCompile>\n  881:     <ClCompile Include=\"Scene\\Camera\\CameraController.cpp\">\n  882        <Filter>Scene\\Camera</Filter>\n  883:     </ClCompile>\n  884:     <ClCompile Include=\"Scene\\Camera\\Camera.cpp\">\n  885        <Filter>Scene\\Camera</Filter>\n  886:     </ClCompile>\n  887:     <ClCompile Include=\"Scene\\Lights\\LightProbe.cpp\">\n  888        <Filter>Scene\\Lights</Filter>\n  889:     </ClCompile>\n  890:     <ClCompile Include=\"Scene\\Lights\\Light.cpp\">\n  891        <Filter>Scene\\Lights</Filter>\n  892:     </ClCompile>\n  893:     <ClCompile Include=\"Scene\\Material\\Material.cpp\">\n  894        <Filter>Scene\\Material</Filter>\n  895:     </ClCompile>\n  896:     <ClCompile Include=\"Testing\\UnitTest.cpp\">\n  897        <Filter>Testing</Filter>\n  898:     </ClCompile>\n  899:     <ClCompile Include=\"Utils\\ArgList.cpp\">\n  900        <Filter>Utils</Filter>\n  901:     </ClCompile>\n  902:     <ClCompile Include=\"Utils\\Scripting\\Scripting.cpp\">\n  903        <Filter>Utils\\Scripting</Filter>\n  904:     </ClCompile>\n  905:     <ClCompile Include=\"Utils\\Video\\VideoEncoderUI.cpp\">\n  906        <Filter>Utils\\Video</Filter>\n  907:     </ClCompile>\n  908:     <ClCompile Include=\"Utils\\Video\\VideoEncoder.cpp\">\n  909        <Filter>Utils\\Video</Filter>\n  910:     </ClCompile>\n  911:     <ClCompile Include=\"Utils\\Timing\\Profiler.cpp\">\n  912        <Filter>Utils\\Timing</Filter>\n  913:     </ClCompile>\n  914:     <ClCompile Include=\"Utils\\UI\\Gui.cpp\">\n  915        <Filter>Utils\\UI</Filter>\n  916:     </ClCompile>\n  917:     <ClCompile Include=\"Utils\\UI\\PixelZoom.cpp\">\n  918        <Filter>Utils\\UI</Filter>\n  919:     </ClCompile>\n  920:     <ClCompile Include=\"Utils\\UI\\TextRenderer.cpp\">\n  921        <Filter>Utils\\UI</Filter>\n  922:     </ClCompile>\n  923:     <ClCompile Include=\"Utils\\UI\\Font.cpp\">\n  924        <Filter>Utils\\UI</Filter>\n  925:     </ClCompile>\n  926:     <ClCompile Include=\"Utils\\Image\\Bitmap.cpp\">\n  927        <Filter>Utils\\Image</Filter>\n  928:     </ClCompile>\n  929:     <ClCompile Include=\"Utils\\Image\\DXHeader.cpp\">\n  930        <Filter>Utils\\Image</Filter>\n  931:     </ClCompile>\n  932:     <ClCompile Include=\"Utils\\Algorithm\\ParallelReduction.cpp\">\n  933        <Filter>Utils\\Algorithm</Filter>\n  934:     </ClCompile>\n  935:     <ClCompile Include=\"Core\\Platform\\OS.cpp\">\n  936        <Filter>Core\\Platform</Filter>\n  937:     </ClCompile>\n  938:     <ClCompile Include=\"Core\\Platform\\ProgressBar.cpp\">\n  939        <Filter>Core\\Platform</Filter>\n  940:     </ClCompile>\n  941:     <ClCompile Include=\"Core\\Platform\\Windows\\ProgressBarWin.cpp\">\n  942        <Filter>Core\\Platform\\Windows</Filter>\n  943:     </ClCompile>\n  944:     <ClCompile Include=\"Core\\Platform\\Windows\\Windows.cpp\">\n  945        <Filter>Core\\Platform\\Windows</Filter>\n  946:     </ClCompile>\n  947:     <ClCompile Include=\"Core\\Platform\\Linux\\ProgressBarLinux.cpp\">\n  948        <Filter>Core\\Platform\\Linux</Filter>\n  949:     </ClCompile>\n  950:     <ClCompile Include=\"Core\\Platform\\Linux\\Linux.cpp\">\n  951        <Filter>Core\\Platform\\Linux</Filter>\n  952:     </ClCompile>\n  953:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Formats.cpp\">\n  954:       <Filter>Core\\API\\D3D12</Filter>\n  955:     </ClCompile>\n  956:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12Shader.cpp\">\n  957:       <Filter>Core\\API\\D3D12</Filter>\n  958:     </ClCompile>\n  959:     <ClCompile Include=\"Core\\BufferTypes\\VariablesBufferUI.cpp\">\n  960        <Filter>Core\\BufferTypes</Filter>\n  961:     </ClCompile>\n  962:     <ClCompile Include=\"Utils\\Perception\\SingleThresholdMeasurement.cpp\">\n  963        <Filter>Utils\\Perception</Filter>\n  964:     </ClCompile>\n  965:     <ClCompile Include=\"Utils\\Perception\\Experiment.cpp\">\n  966        <Filter>Utils\\Perception</Filter>\n  967:     </ClCompile>\n  968:     <ClCompile Include=\"stdafx.cpp\" />\n  969:     <ClCompile Include=\"Utils\\UI\\DebugDrawer.cpp\">\n  970        <Filter>Utils\\UI</Filter>\n  971:     </ClCompile>\n  972:     <ClCompile Include=\"Core\\Platform\\MonitorInfo.cpp\">\n  973        <Filter>Core\\Platform</Filter>\n  974:     </ClCompile>\n  975:     <ClCompile Include=\"Utils\\SampleGenerators\\DxSamplePattern.cpp\">\n  976        <Filter>Utils\\SampleGenerators</Filter>\n  977:     </ClCompile>\n  978:     <ClCompile Include=\"Utils\\SampleGenerators\\HaltonSamplePattern.cpp\">\n  979        <Filter>Utils\\SampleGenerators</Filter>\n  980:     </ClCompile>\n  981:     <ClCompile Include=\"Core\\API\\VertexLayout.cpp\">\n  982:       <Filter>Core\\API</Filter>\n  983:     </ClCompile>\n  984:     <ClCompile Include=\"Core\\API\\RasterizerState.cpp\">\n  985:       <Filter>Core\\API</Filter>\n  986:     </ClCompile>\n  987:     <ClCompile Include=\"Core\\Framework.cpp\">\n  988        <Filter>Core</Filter>\n  989:     </ClCompile>\n  990:     <ClCompile Include=\"..\\Externals\\.packman\\dear_imgui\\imgui.cpp\">\n  991        <Filter>Externals\\dear_imgui</Filter>\n  992:     </ClCompile>\n  993:     <ClCompile Include=\"..\\Externals\\.packman\\dear_imgui\\imgui_draw.cpp\">\n  994        <Filter>Externals\\dear_imgui</Filter>\n  995:     </ClCompile>\n  996:     <ClCompile Include=\"..\\Externals\\.packman\\dear_imgui\\imgui_widgets.cpp\">\n  997        <Filter>Externals\\dear_imgui</Filter>\n  998:     </ClCompile>\n  999:     <ClCompile Include=\"..\\Externals\\dear_imgui_addons\\imguinodegrapheditor\\imguinodegrapheditor.cpp\">\n 1000        <Filter>Externals\\dear_imgui_addons</Filter>\n 1001:     </ClCompile>\n 1002:     <ClCompile Include=\"Utils\\Scripting\\ScriptBindings.cpp\">\n 1003        <Filter>Utils\\Scripting</Filter>\n 1004:     </ClCompile>\n 1005:     <ClCompile Include=\"Utils\\Logger.cpp\">\n 1006        <Filter>Utils</Filter>\n 1007:     </ClCompile>\n 1008:     <ClCompile Include=\"RenderGraph\\BasePasses\\ComputePass.cpp\">\n 1009        <Filter>RenderGraph\\BasePasses</Filter>\n 1010:     </ClCompile>\n 1011:     <ClCompile Include=\"RenderGraph\\BasePasses\\FullScreenPass.cpp\">\n 1012        <Filter>RenderGraph\\BasePasses</Filter>\n 1013:     </ClCompile>\n 1014:     <ClCompile Include=\"RenderGraph\\BasePasses\\RasterPass.cpp\">\n 1015        <Filter>RenderGraph\\BasePasses</Filter>\n 1016:     </ClCompile>\n 1017:     <ClCompile Include=\"RenderGraph\\BasePasses\\RasterScenePass.cpp\">\n 1018        <Filter>RenderGraph\\BasePasses</Filter>\n 1019:     </ClCompile>\n 1020:     <ClCompile Include=\"RenderGraph\\BasePasses\\BaseGraphicsPass.cpp\">\n 1021        <Filter>RenderGraph\\BasePasses</Filter>\n 1022:     </ClCompile>\n 1023:     <ClCompile Include=\"RenderGraph\\RenderGraph.cpp\">\n 1024        <Filter>RenderGraph</Filter>\n 1025:     </ClCompile>\n 1026:     <ClCompile Include=\"RenderGraph\\RenderGraphImportExport.cpp\">\n 1027        <Filter>RenderGraph</Filter>\n 1028:     </ClCompile>\n 1029:     <ClCompile Include=\"RenderGraph\\RenderGraphIR.cpp\">\n 1030        <Filter>RenderGraph</Filter>\n 1031:     </ClCompile>\n 1032:     <ClCompile Include=\"RenderGraph\\RenderGraphUI.cpp\">\n 1033        <Filter>RenderGraph</Filter>\n 1034:     </ClCompile>\n 1035:     <ClCompile Include=\"RenderGraph\\RenderPass.cpp\">\n 1036        <Filter>RenderGraph</Filter>\n 1037:     </ClCompile>\n 1038:     <ClCompile Include=\"RenderGraph\\RenderPassLibrary.cpp\">\n 1039        <Filter>RenderGraph</Filter>\n 1040:     </ClCompile>\n 1041:     <ClCompile Include=\"RenderGraph\\RenderPassReflection.cpp\">\n 1042        <Filter>RenderGraph</Filter>\n 1043:     </ClCompile>\n 1044:     <ClCompile Include=\"RenderGraph\\ResourceCache.cpp\">\n 1045        <Filter>RenderGraph</Filter>\n 1046:     </ClCompile>\n 1047:     <ClCompile Include=\"RenderGraph\\RenderGraphCompiler.cpp\">\n 1048        <Filter>RenderGraph</Filter>\n 1049:     </ClCompile>\n 1050:     <ClCompile Include=\"RenderGraph\\RenderGraphExe.cpp\">\n 1051        <Filter>RenderGraph</Filter>\n 1052:     </ClCompile>\n 1053:     <ClCompile Include=\"Utils\\Threading.cpp\">\n 1054        <Filter>Utils</Filter>\n 1055:     </ClCompile>\n 1056:     <ClCompile Include=\"Utils\\Timing\\FrameRate.cpp\">\n 1057        <Filter>Utils\\Timing</Filter>\n 1058:     </ClCompile>\n 1059:     <ClCompile Include=\"Utils\\Scripting\\Console.cpp\">\n 1060        <Filter>Utils\\Scripting</Filter>\n 1061:     </ClCompile>\n 1062:     <ClCompile Include=\"Utils\\Timing\\Clock.cpp\">\n 1063        <Filter>Utils\\Timing</Filter>\n 1064:     </ClCompile>\n 1065:     <ClCompile Include=\"Core\\API\\GpuMemoryHeap.cpp\">\n 1066:       <Filter>Core\\API</Filter>\n 1067:     </ClCompile>\n 1068:     <ClCompile Include=\"Core\\API\\Vulkan\\VkGpuMemoryHeap.cpp\">\n 1069:       <Filter>Core\\API\\Vulkan</Filter>\n 1070:     </ClCompile>\n 1071:     <ClCompile Include=\"Core\\API\\D3D12\\D3D12GpuMemoryHeap.cpp\">\n 1072:       <Filter>Core\\API\\D3D12</Filter>\n 1073:     </ClCompile>\n 1074:     <ClCompile Include=\"Scene\\SceneBuilder.cpp\">\n 1075        <Filter>Scene</Filter>\n 1076:     </ClCompile>\n 1077:     <ClCompile Include=\"..\\Externals\\mikktspace\\mikktspace.c\">\n 1078        <Filter>Externals\\mikktspace</Filter>\n 1079:     </ClCompile>\n 1080:     <ClCompile Include=\"Utils\\SampleGenerators\\StratifiedSamplePattern.cpp\">\n 1081        <Filter>Utils\\SampleGenerators</Filter>\n 1082:     </ClCompile>\n 1083:     <ClCompile Include=\"Scene\\Scene.cpp\">\n 1084        <Filter>Scene</Filter>\n 1085:     </ClCompile>\n 1086:     <ClCompile Include=\"Scene\\ParticleSystem\\ParticleSystem.cpp\">\n 1087        <Filter>Scene\\ParticleSystem</Filter>\n 1088:     </ClCompile>\n 1089:     <ClCompile Include=\"Core\\Program\\ShaderVar.cpp\">\n 1090        <Filter>Core\\Program</Filter>\n 1091:     </ClCompile>\n 1092:     <ClCompile Include=\"Core\\BufferTypes\\ParameterBlock.cpp\">\n 1093        <Filter>Core\\BufferTypes</Filter>\n 1094:     </ClCompile>\n 1095:     <ClCompile Include=\"Scene\\Animation\\AnimationController.cpp\">\n 1096        <Filter>Scene\\Animation</Filter>\n 1097:     </ClCompile>\n 1098:     <ClCompile Include=\"Scene\\Animation\\Animation.cpp\">\n 1099        <Filter>Scene\\Animation</Filter>\n 1100:     </ClCompile>\n 1101:     <ClCompile Include=\"Scene\\Importers\\AssimpImporter.cpp\">\n 1102        <Filter>Scene\\Importers</Filter>\n 1103:     </ClCompile>\n 1104:     <ClCompile Include=\"Scene\\Importers\\SceneImporter.cpp\">\n 1105        <Filter>Scene\\Importers</Filter>\n 1106:     </ClCompile>\n 1107:     <ClCompile Include=\"Raytracing\\RtProgram\\RtProgram.cpp\">\n 1108        <Filter>Raytracing\\RtProgram</Filter>\n 1109:     </ClCompile>\n 1110:     <ClCompile Include=\"Raytracing\\RtProgramVars.cpp\">\n 1111        <Filter>Raytracing</Filter>\n 1112:     </ClCompile>\n 1113:     <ClCompile Include=\"Raytracing\\RtProgramVarsHelper.cpp\">\n 1114        <Filter>Raytracing</Filter>\n 1115:     </ClCompile>\n 1116:     <ClCompile Include=\"Raytracing\\RtStateObject.cpp\">\n 1117        <Filter>Raytracing</Filter>\n 1118:     </ClCompile>\n 1119:     <ClCompile Include=\"Utils\\Debug\\PixelDebug.cpp\">\n 1120        <Filter>Utils\\Debug</Filter>\n 1121:     </ClCompile>\n 1122:     <ClCompile Include=\"Utils\\Algorithm\\PrefixSum.cpp\">\n 1123        <Filter>Utils\\Algorithm</Filter>\n 1124:     </ClCompile>\n 1125:     <ClCompile Include=\"Utils\\Algorithm\\BitonicSort.cpp\">\n 1126        <Filter>Utils\\Algorithm</Filter>\n 1127:     </ClCompile>\n 1128:     <ClCompile Include=\"Utils\\Algorithm\\ComputeParallelReduction.cpp\">\n 1129        <Filter>Utils\\Algorithm</Filter>\n 1130:     </ClCompile>\n 1131:     <ClCompile Include=\"Utils\\Sampling\\SampleGenerator.cpp\">\n 1132        <Filter>Utils\\Sampling</Filter>\n 1133:     </ClCompile>\n 1134:     <ClCompile Include=\"Experimental\\Scene\\Lights\\EnvProbe.cpp\">\n 1135        <Filter>Experimental\\Scene\\Lights</Filter>\n 1136:     </ClCompile>\n 1137:     <ClCompile Include=\"Experimental\\Scene\\Lights\\EmissiveUniformSampler.cpp\">\n 1138        <Filter>Experimental\\Scene\\Lights</Filter>\n 1139:     </ClCompile>\n 1140:     <ClCompile Include=\"Experimental\\Scene\\Lights\\EmissiveLightSampler.cpp\">\n 1141        <Filter>Experimental\\Scene\\Lights</Filter>\n 1142:     </ClCompile>\n 1143:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVH.cpp\">\n 1144        <Filter>Experimental\\Scene\\Lights</Filter>\n 1145:     </ClCompile>\n 1146:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVHBuilder.cpp\">\n 1147        <Filter>Experimental\\Scene\\Lights</Filter>\n 1148:     </ClCompile>\n 1149:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVHSampler.cpp\">\n 1150        <Filter>Experimental\\Scene\\Lights</Filter>\n 1151:     </ClCompile>\n 1152:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightCollection.cpp\">\n 1153        <Filter>Experimental\\Scene\\Lights</Filter>\n 1154:     </ClCompile>\n 1155:     <ClCompile Include=\"Raytracing\\ShaderTable.cpp\">\n 1156        <Filter>Raytracing</Filter>\n 1157:     </ClCompile>\n 1158:     <ClCompile Include=\"RenderPasses\\ResolvePass.cpp\">\n 1159        <Filter>RenderPasses</Filter>\n 1160:     </ClCompile>\n 1161:     <ClCompile Include=\"Scene\\Importers\\PythonImporter.cpp\">\n 1162        <Filter>Scene\\Importers</Filter>\n 1163:     </ClCompile>\n 1164:     <ClCompile Include=\"Utils\\TermColor.cpp\">\n 1165        <Filter>Utils</Filter>\n 1166:     </ClCompile>\n 1167:     <ClCompile Include=\"RenderPasses\\Shared\\PathTracer\\PixelStats.cpp\">\n 1168        <Filter>RenderPasses\\Shared\\PathTracer</Filter>\n 1169:     </ClCompile>\n 1170:     <ClCompile Include=\"RenderPasses\\Shared\\PathTracer\\PathTracer.cpp\">\n 1171        <Filter>RenderPasses\\Shared\\PathTracer</Filter>\n 1172:     </ClCompile>\n 1173    </ItemGroup>\n 1174    <ItemGroup>\n ....\n 1254        <Filter>Utils\\Algorithm</Filter>\n 1255      </ShaderSource>\n 1256:     <ShaderSource Include=\"Utils\\Debug\\PixelDebug.slang\">\n 1257        <Filter>Utils\\Debug</Filter>\n 1258      </ShaderSource>\n ....\n 1347        <Filter>Scene\\Lights</Filter>\n 1348      </ShaderSource>\n 1349:     <ShaderSource Include=\"Core\\API\\Blit.slang\">\n 1350:       <Filter>Core\\API</Filter>\n 1351      </ShaderSource>\n 1352      <ShaderSource Include=\"Utils\\Helpers.slang\">\n ....\n 1410        <Filter>Utils\\Algorithm</Filter>\n 1411      </ShaderSource>\n 1412:     <ShaderSource Include=\"Utils\\Debug\\PixelDebugTypes.slang\">\n 1413        <Filter>Utils\\Debug</Filter>\n 1414      </ShaderSource>\n ....\n 1449        <Filter>RenderPasses\\Shared\\PathTracer</Filter>\n 1450      </ShaderSource>\n 1451:     <ShaderSource Include=\"RenderPasses\\Shared\\PathTracer\\PixelStats.slang\">\n 1452        <Filter>RenderPasses\\Shared\\PathTracer</Filter>\n 1453      </ShaderSource>\n ....\n 1464        <Filter>RenderPasses\\Shared\\PathTracer</Filter>\n 1465      </ShaderSource>\n 1466:     <ShaderSource Include=\"Utils\\Debug\\ReflectPixelDebugTypes.cs.slang\">\n 1467        <Filter>Utils\\Debug</Filter>\n 1468      </ShaderSource>\n\n/home/max/dev/Lava/src/Falcor/Raytracing/RtProgram/RtProgram.cpp:\n   56          mBaseDesc.entryPoint(ShaderType::RayGeneration, raygen);\n   57  \n   58:         DescExtra::GroupInfo info = { mBaseDesc.mActiveGroup };\n   59          mRayGenEntryPoints.push_back(info);\n   60          return *this;\n   ..\n   67              mMissEntryPoints.resize(missIndex+1);\n   68          }\n   69:         else if(mMissEntryPoints[missIndex].groupIndex >= 0)\n   70          {\n   71              logError(\"already have a miss shader at that index\");\n   ..\n   76          mBaseDesc.entryPoint(ShaderType::Miss, miss);\n   77  \n   78:         DescExtra::GroupInfo info = { mBaseDesc.mActiveGroup };\n   79          mMissEntryPoints[missIndex] = info;\n   80          return *this;\n   ..\n   87              mHitGroups.resize(hitIndex+1);\n   88          }\n   89:         else if(mHitGroups[hitIndex].groupIndex >= 0)\n   90          {\n   91              logError(\"already have a hit group at that index\");\n   92          }\n   93  \n   94:         auto groupIndex = int32_t(mBaseDesc.mGroups.size());\n   95          mBaseDesc.beginEntryPointGroup();\n   96          if(closestHit.length())\n   ..\n  107          }\n  108  \n  109:         DescExtra::GroupInfo info = { mBaseDesc.mActiveGroup };\n  110          mHitGroups[hitIndex] = info;\n  111          return *this;\n  ...\n  157      }\n  158  \n  159:     static uint64_t sHitGroupID = 0;\n  160  \n  161      EntryPointGroupKernels::SharedPtr RtProgram::createEntryPointGroupKernels(\n  ...\n  173          case ShaderType::Intersection:\n  174              {\n  175:                 std::string exportName = \"HitGroup\" + std::to_string(sHitGroupID++);\n  176                  return RtEntryPointGroupKernels::create(RtEntryPointGroupKernels::Type::RtHitGroup, shaders, exportName, localRootSignature, mMaxPayloadSize, mMaxAttributesSize);\n  177              }\n\n/home/max/dev/Lava/src/Falcor/Raytracing/RtProgram/RtProgram.h:\n   28  #pragma once\n   29  #include \"Falcor/Core/Program/Program.h\"\n   30: #include \"Falcor/Core/API/RootSignature.h\"\n   31  #include \"Falcor/Raytracing/RtStateObject.h\"\n   32  #include \"Falcor/Raytracing/ShaderTable.h\"\n   ..\n   49          {\n   50          public:\n   51:             struct GroupInfo\n   52              {\n   53:                 int32_t groupIndex = -1;\n   54              };\n   55  \n   ..\n   58              void setMaxTraceRecursionDepth(uint32_t maxDepth) { mMaxTraceRecursionDepth = maxDepth; }\n   59  \n   60:             std::vector<GroupInfo> mRayGenEntryPoints;\n   61:             std::vector<GroupInfo> mMissEntryPoints;\n   62:             std::vector<GroupInfo> mHitGroups;\n   63              uint32_t mMaxTraceRecursionDepth = 1;\n   64          };\n   ..\n   78              Desc& addDefines(const DefineList& defines);\n   79  \n   80:             /** Set the compiler flags. Replaces any previously set flags.\n   81              */\n   82:             Desc& setCompilerFlags(Shader::CompilerFlags flags) { mBaseDesc.setCompilerFlags(flags); return *this; }\n   83  \n   84          private:\n   ..\n  109          // Ray-gen\n  110          uint32_t getRayGenProgramCount() const { return (uint32_t) mDescExtra.mRayGenEntryPoints.size(); }\n  111:         uint32_t getRayGenIndex(uint32_t index) const { return mDescExtra.mRayGenEntryPoints[index].groupIndex; }\n  112  \n  113          // Hit\n  114          uint32_t getHitProgramCount() const { return (uint32_t) mDescExtra.mHitGroups.size(); }\n  115:         uint32_t getHitIndex(uint32_t index) const { return mDescExtra.mHitGroups[index].groupIndex; }\n  116  \n  117          // Miss\n  118          uint32_t getMissProgramCount() const { return (uint32_t) mDescExtra.mMissEntryPoints.size(); }\n  119:         uint32_t getMissIndex(uint32_t index) const { return mDescExtra.mMissEntryPoints[index].groupIndex; }\n  120  \n  121          /** Set the scene\n\n/home/max/dev/Lava/src/Falcor/Raytracing/RtProgramVars.cpp:\n   29  #include \"RtProgramVars.h\"\n   30  \n   31: #include \"Core/API/Device.h\"\n   32  //#include \"RtStateObject.h\"\n   33  \n   ..\n   99  \n  100          // Hit groups are more complicated than ray generation and miss shaders.\n  101:         // We typically want a distinct parameter block per declared hit group\n  102          // and per mesh in the scene (and sometimes even per mesh instance).\n  103          //\n  ...\n  116          {\n  117              auto& info = descExtra.mRayGenEntryPoints[i];\n  118:             if(info.groupIndex < 0) continue;\n  119  \n  120:             mRayGenVars[i].pVars = EntryPointGroupVars::create(pReflector->getEntryPointGroup(info.groupIndex), info.groupIndex);\n  121          }\n  122  \n  ...\n  124          {\n  125              auto& info = descExtra.mHitGroups[i];\n  126:             if(info.groupIndex < 0) continue;\n  127  \n  128              for(uint32_t j = 0; j < blockCountPerHitGroup; ++j)\n  129              {\n  130:                 mHitVars[j*descHitGroupCount + i].pVars = EntryPointGroupVars::create(pReflector->getEntryPointGroup(info.groupIndex), info.groupIndex);\n  131              }\n  132          }\n  ...\n  135          {\n  136              auto& info = descExtra.mMissEntryPoints[i];\n  137:             if(info.groupIndex < 0) continue;\n  138  \n  139:             mMissVars[i].pVars = EntryPointGroupVars::create(pReflector->getEntryPointGroup(info.groupIndex), info.groupIndex);\n  140          }\n  141  \n  142:         for(auto entryPointGroupInfo : mRayGenVars)\n  143:             mpEntryPointGroupVars.push_back(entryPointGroupInfo.pVars);\n  144:         for(auto entryPointGroupInfo : mHitVars)\n  145:             mpEntryPointGroupVars.push_back(entryPointGroupInfo.pVars);\n  146:         for(auto entryPointGroupInfo : mMissVars)\n  147:             mpEntryPointGroupVars.push_back(entryPointGroupInfo.pVars);\n  148      }\n  149  \n  ...\n  151          uint8_t*                        pRecord,\n  152          const RtEntryPointGroupKernels* pKernels,\n  153:         uint32_t                        uniqueEntryPointGroupIndex,\n  154          const RtStateObject*            pRtso,\n  155          ParameterBlock*                 pVars,\n  ...\n  159          assert(pKernels);\n  160  \n  161:         auto pShaderIdentifier = pRtso->getShaderIdentifier(uniqueEntryPointGroupIndex);\n  162          memcpy(pRecord, pShaderIdentifier, D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES);\n  163          pRecord += D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES;\n  ...\n  173      static RtEntryPointGroupKernels* getUniqueRtEntryPointGroupKernels(\n  174          const ProgramKernels::SharedConstPtr&   pKernels,\n  175:         uint32_t                                uniqueEntryPointGroupIndex)\n  176      {\n  177:         if(uniqueEntryPointGroupIndex < 0) return nullptr;\n  178:         auto pEntryPointGroup = pKernels->getUniqueEntryPointGroup(uniqueEntryPointGroupIndex);\n  179          assert(dynamic_cast<RtEntryPointGroupKernels*>(pEntryPointGroup.get()));\n  180          return static_cast<RtEntryPointGroupKernels*>(pEntryPointGroup.get());\n  ...\n  239                  auto pBlock = varsInfo.pVars.get();\n  240  \n  241:                 auto uniqueGroupIndex = pBlock->getGroupIndexInProgram();\n  242  \n  243:                 auto pGroupKernels = getUniqueRtEntryPointGroupKernels(pKernels, uniqueGroupIndex);\n  244                  if(!pGroupKernels) { continue; }\n  245  \n  246                  uint8_t* pRecord = mpShaderTable->getRecordPtr(ShaderTable::SubTableType::RayGen, r);\n  247  \n  248:                 if (!applyRtProgramVars(pRecord, pGroupKernels, uniqueGroupIndex, pRtso, pBlock, mpRtVarsHelper.get()))\n  249                  {\n  250                      return false;\n  ...\n  261                  auto pBlock = varsInfo.pVars.get();\n  262  \n  263:                 auto uniqueGroupIndex = pBlock->getGroupIndexInProgram();\n  264  \n  265:                 auto pGroupKernels = getUniqueRtEntryPointGroupKernels(pKernels, uniqueGroupIndex);\n  266                  if(!pGroupKernels) { continue; }\n  267  \n  268                  uint8_t* pRecord = mpShaderTable->getRecordPtr(ShaderTable::SubTableType::Hit, h);\n  269  \n  270:                 if (!applyRtProgramVars(pRecord, pGroupKernels, uniqueGroupIndex, pRtso, pBlock, mpRtVarsHelper.get()))\n  271                  {\n  272                      return false;\n  ...\n  281                  auto pBlock = varsInfo.pVars.get();\n  282  \n  283:                 auto uniqueGroupIndex = pBlock->getGroupIndexInProgram();\n  284  \n  285:                 auto pGroupKernels = getUniqueRtEntryPointGroupKernels(pKernels, uniqueGroupIndex);\n  286                  if(!pGroupKernels) { continue; }\n  287  \n  288                  uint8_t* pRecord = mpShaderTable->getRecordPtr(ShaderTable::SubTableType::Miss, m);\n  289  \n  290:                 if (!applyRtProgramVars(pRecord, pGroupKernels, uniqueGroupIndex, pRtso, pBlock, mpRtVarsHelper.get()))\n  291                  {\n  292                      return false;\n\n/home/max/dev/Lava/src/Falcor/Raytracing/RtProgramVars.h:\n   69          void updateShaderTable(RenderContext* pCtx, RtStateObject* pRtso) const;\n   70  \n   71:         struct EntryPointGroupInfo\n   72          {\n   73              EntryPointGroupVars::SharedPtr  pVars;\n   ..\n   75          };\n   76  \n   77:         using VarsVector = std::vector<EntryPointGroupInfo>;\n   78  \n   79          RtProgramVars(\n\n/home/max/dev/Lava/src/Falcor/Raytracing/RtProgramVarsHelper.cpp:\n   28  #include \"stdafx.h\"\n   29  #include \"RtProgramVarsHelper.h\"\n   30: #include \"Core/API/Device.h\"\n   31  \n   32  namespace Falcor\n\n/home/max/dev/Lava/src/Falcor/Raytracing/RtProgramVarsHelper.h:\n   27   **************************************************************************/\n   28  #pragma once\n   29: #include \"Core/API/CopyContext.h\"\n   30: #include \"Core/API/RootSignature.h\"\n   31  \n   32  namespace Falcor\n   ..\n   64          D3D12_COMMAND_LIST_TYPE GetType() { should_not_get_here(); return D3D12_COMMAND_LIST_TYPE_BUNDLE; }\n   65          HRESULT Close() { should_not_get_here(); return E_FAIL; }\n   66:         HRESULT Reset(ID3D12CommandAllocator *pAllocator, ID3D12PipelineState *pInitialState) { should_not_get_here(); return E_FAIL; }\n   67:         void ClearState(ID3D12PipelineState *pPipelineState) { should_not_get_here(); }\n   68          void DrawInstanced(UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation) { should_not_get_here(); }\n   69          void DrawIndexedInstanced(UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation) { should_not_get_here(); }\n   ..\n   80          void OMSetRenderTargets(UINT NumRenderTargetDescriptors, const D3D12_CPU_DESCRIPTOR_HANDLE *pRenderTargetDescriptors, BOOL RTsSingleHandleToDescriptorRange, const D3D12_CPU_DESCRIPTOR_HANDLE *pDepthStencilDescriptor) { should_not_get_here(); }\n   81          void OMSetStencilRef(UINT StencilRef) { should_not_get_here(); }\n   82:         void SetPipelineState(ID3D12PipelineState *pPipelineState) { should_not_get_here(); }\n   83          void ResourceBarrier(UINT NumBarriers, const D3D12_RESOURCE_BARRIER *pBarriers) { should_not_get_here(); }\n   84          void ExecuteBundle(ID3D12GraphicsCommandList *pCommandList) { should_not_get_here(); }\n   ..\n  112          void AtomicCopyBufferUINT64(ID3D12Resource *pDstBuffer, UINT64 DstOffset, ID3D12Resource *pSrcBuffer, UINT64 SrcOffset, UINT Dependencies, ID3D12Resource *const *ppDependentResources, const D3D12_SUBRESOURCE_RANGE_UINT64 *pDependentSubresourceRanges) { should_not_get_here(); }\n  113          void OMSetDepthBounds(FLOAT Min, FLOAT Max) { should_not_get_here(); }\n  114:         void SetSamplePositions(UINT NumSamplesPerPixel, UINT NumPixels, D3D12_SAMPLE_POSITION *pSamplePositions) { should_not_get_here(); }\n  115          void ResolveSubresourceRegion(ID3D12Resource *pDstResource, UINT DstSubresource, UINT DstX, UINT DstY, ID3D12Resource *pSrcResource, UINT SrcSubresource, D3D12_RECT *pSrcRect, DXGI_FORMAT Format, D3D12_RESOLVE_MODE ResolveMode) { should_not_get_here(); }\n  116          void SetViewInstanceMask(UINT Mask) { should_not_get_here(); }\n  ...\n  125          void BeginRenderPass(UINT NumRenderTargets, const D3D12_RENDER_PASS_RENDER_TARGET_DESC *pRenderTargets, const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC *pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags) { should_not_get_here(); }\n  126          void EndRenderPass(void) { should_not_get_here(); }\n  127:         void InitializeMetaCommand(ID3D12MetaCommand *pMetaCommand, const void *pInitializationParametersData, SIZE_T InitializationParametersDataSizeInBytes) { should_not_get_here(); }\n  128          void ExecuteMetaCommand(ID3D12MetaCommand *pMetaCommand, const void *pExecutionParametersData, SIZE_T ExecutionParametersDataSizeInBytes) { should_not_get_here(); }\n  129          void BuildRaytracingAccelerationStructure(const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC *pDesc, UINT NumPostbuildInfoDescs, const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *pPostbuildInfoDescs) { should_not_get_here(); }\n  130          void EmitRaytracingAccelerationStructurePostbuildInfo(const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *pDesc, UINT NumSourceAccelerationStructures, const D3D12_GPU_VIRTUAL_ADDRESS *pSourceAccelerationStructureData) { should_not_get_here(); }\n  131          void CopyRaytracingAccelerationStructure(D3D12_GPU_VIRTUAL_ADDRESS DestAccelerationStructureData, D3D12_GPU_VIRTUAL_ADDRESS SourceAccelerationStructureData, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode) { should_not_get_here(); }\n  132:         void SetPipelineState1(ID3D12StateObject *pStateObject) { should_not_get_here(); }\n  133          void DispatchRays(const D3D12_DISPATCH_RAYS_DESC *pDesc) { should_not_get_here(); }\n  134  \n\n/home/max/dev/Lava/src/Falcor/Raytracing/RtStateObject.cpp:\n   30  #include \"RtStateObjectHelper.h\"\n   31  #include \"Utils/StringUtils.h\"\n   32: #include \"Core/API/Device.h\"\n   33  #include \"ShaderTable.h\"\n   34  \n   ..\n   48  \n   49          RtStateObjectHelper rtsoHelper;\n   50:         // Pipeline config\n   51:         rtsoHelper.addPipelineConfig(desc.mMaxTraceRecursionDepth);\n   52  \n   53          // Loop over the programs\n   ..\n   61              case EntryPointGroupKernels::Type::RtHitGroup:\n   62                  {\n   63:                     const Shader* pIntersection = pEntryPointGroup->getShader(ShaderType::Intersection);\n   64                      const Shader* pAhs = pEntryPointGroup->getShader(ShaderType::AnyHit);\n   65                      const Shader* pChs = pEntryPointGroup->getShader(ShaderType::ClosestHit);\n   66  \n   67:                     ID3DBlobPtr pIntersectionBlob = pIntersection ? pIntersection->getD3DBlob() : nullptr;\n   68                      ID3DBlobPtr pAhsBlob = pAhs ? pAhs->getD3DBlob() : nullptr;\n   69                      ID3DBlobPtr pChsBlob = pChs ? pChs->getD3DBlob() : nullptr;\n   70  \n   71                      const std::wstring& exportName = string_2_wstring(pEntryPointGroup->getExportName());\n   72:                     const std::wstring& intersectionExport = pIntersection ? string_2_wstring(pIntersection->getEntryPoint()) : L\"\";\n   73                      const std::wstring& ahsExport = pAhs ? string_2_wstring(pAhs->getEntryPoint()) : L\"\";\n   74                      const std::wstring& chsExport = pChs ? string_2_wstring(pChs->getEntryPoint()) : L\"\";\n   75  \n   76:                     rtsoHelper.addHitProgramDesc(pAhsBlob, ahsExport, pChsBlob, chsExport, pIntersectionBlob, intersectionExport, exportName);\n   77  \n   78                      if (intersectionExport.size())\n   79                      {\n   80:                         rtsoHelper.addLocalRootSignature(&intersectionExport, 1, pEntryPointGroup->getLocalRootSignature()->getApiHandle().GetInterfacePtr());\n   81                          rtsoHelper.addShaderConfig(&intersectionExport, 1, pEntryPointGroup->getMaxPayloadSize(), pEntryPointGroup->getMaxAttributesSize());\n   82                      }\n   ..\n   84                      if (ahsExport.size())\n   85                      {\n   86:                         rtsoHelper.addLocalRootSignature(&ahsExport, 1, pEntryPointGroup->getLocalRootSignature()->getApiHandle().GetInterfacePtr());\n   87                          rtsoHelper.addShaderConfig(&ahsExport, 1, pEntryPointGroup->getMaxPayloadSize(), pEntryPointGroup->getMaxAttributesSize());\n   88                      }\n   ..\n   90                      if (chsExport.size())\n   91                      {\n   92:                         rtsoHelper.addLocalRootSignature(&chsExport, 1, pEntryPointGroup->getLocalRootSignature()->getApiHandle().GetInterfacePtr());\n   93                          rtsoHelper.addShaderConfig(&chsExport, 1, pEntryPointGroup->getMaxPayloadSize(), pEntryPointGroup->getMaxAttributesSize());\n   94                      }\n   ..\n  105  \n  106                      // Root signature\n  107:                     rtsoHelper.addLocalRootSignature(&exportName, 1, pEntryPointGroup->getLocalRootSignature()->getApiHandle().GetInterfacePtr());\n  108                      // Payload size\n  109                      rtsoHelper.addShaderConfig(&exportName, 1, pEntryPointGroup->getMaxPayloadSize(), pEntryPointGroup->getMaxAttributesSize());\n  ...\n  115          // Add an empty global root-signature\n  116          RootSignature* pRootSig = desc.mpGlobalRootSignature ? desc.mpGlobalRootSignature.get() : RootSignature::getEmpty().get();\n  117:         rtsoHelper.addGlobalRootSignature(pRootSig->getApiHandle());\n  118  \n  119          // Create the state\n  120          D3D12_STATE_OBJECT_DESC objectDesc = rtsoHelper.getDesc();\n  121:         GET_COM_INTERFACE(gpDevice->getApiHandle(), ID3D12Device5, pDevice5);\n  122:         d3d_call(pDevice5->CreateStateObject(&objectDesc, IID_PPV_ARGS(&pState->mApiHandle)));\n  123  \n  124          MAKE_SMART_COM_PTR(ID3D12StateObjectProperties);\n  125:         ID3D12StateObjectPropertiesPtr pRtsoProps = pState->getApiHandle();\n  126  \n  127          for( const auto& pBaseEntryPointGroup : pKernels->getUniqueEntryPointGroups() )\n\n/home/max/dev/Lava/src/Falcor/Raytracing/RtStateObject.h:\n   35          using SharedPtr = std::shared_ptr<RtStateObject>;\n   36          using SharedConstPtr = std::shared_ptr<const RtStateObject>;\n   37:         using ApiHandle = ID3D12StateObjectPtr;\n   38  \n   39          class dlldecl Desc\n   ..\n   55  \n   56          static SharedPtr create(const Desc& desc);\n   57:         const ApiHandle& getApiHandle() const { return mApiHandle; }\n   58  \n   59          const ProgramKernels::SharedConstPtr& getKernels() const { return mDesc.mpKernels; };\n   ..\n   66      private:\n   67          RtStateObject(const Desc& d) : mDesc(d) {}\n   68:         ApiHandle mApiHandle;\n   69  \n   70          std::vector<void const*> mShaderIdentifiers;\n\n/home/max/dev/Lava/src/Falcor/Raytracing/RtStateObjectHelper.h:\n   39          }\n   40  \n   41:         void addPipelineConfig(uint32_t maxTraceRecursionDepth)\n   42          {\n   43:             addSubobject<PipelineConfig>(maxTraceRecursionDepth);\n   44              mDirty = true;\n   45          }\n   ..\n   51          }\n   52  \n   53:         void addHitProgramDesc(ID3DBlobPtr pAhsBlob, const std::wstring& ahsExportName, ID3DBlobPtr pChsBlob, const std::wstring& chsExportName, ID3DBlobPtr pIntersectionBlob, const std::wstring& intersectionExportName, const std::wstring& name)\n   54          {\n   55:             addSubobject<HitProgramDesc>(pAhsBlob, ahsExportName, pChsBlob, chsExportName, pIntersectionBlob, intersectionExportName, name);\n   56              mDirty = true;\n   57          }\n   ..\n   83              desc.NumSubobjects = (uint32_t)mSubobjects.size();\n   84              desc.pSubobjects = mSubobjects.data();\n   85:             desc.Type = D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE;\n   86              return desc;\n   87          }\n   ..\n  112          };\n  113  \n  114:         struct PipelineConfig : public RtStateSubobjectBase\n  115          {\n  116:             PipelineConfig(uint32_t maxTraceRecursionDepth)\n  117              {\n  118                  config.MaxTraceRecursionDepth = maxTraceRecursionDepth;\n  119  \n  120:                 subobject.Type = D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG;\n  121                  subobject.pDesc = &config;\n  122              }\n  123:             virtual ~PipelineConfig() = default;\n  124:             D3D12_RAYTRACING_PIPELINE_CONFIG config = {};            \n  125          };\n  126  \n  ...\n  160                  ID3DBlobPtr pAhsBlob, const std::wstring& ahsExportName,\n  161                  ID3DBlobPtr pChsBlob, const std::wstring& chsExportName,\n  162:                 ID3DBlobPtr pIntersectionBlob, const std::wstring& intersectionExportName,\n  163                  const std::wstring& name) :\n  164                  anyHitShader(pAhsBlob, ahsExportName),\n  165                  closestHitShader(pChsBlob, chsExportName),\n  166:                 intersectionShader(pIntersectionBlob, intersectionExportName),\n  167                  exportName(name)\n  168              {\n  169:                 desc.IntersectionShaderImport = pIntersectionBlob ? intersectionShader.exportName.c_str() : nullptr;\n  170                  desc.AnyHitShaderImport = pAhsBlob ? anyHitShader.exportName.c_str() : nullptr;\n  171                  desc.ClosestHitShaderImport = pChsBlob ? closestHitShader.exportName.c_str() : nullptr;\n\n/home/max/dev/Lava/src/Falcor/Raytracing/ShaderTable.h:\n   64          /** Update the shader table.\n   65              This function doesn't do any early out. If it's called, it will always update the table.\n   66:             Call it only when the RtStateObject changed or when the program was recompiled\n   67          */\n   68          void update(\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/BasePasses/FullScreenPass.cpp:\n   47      return false;\n   48  #else\n   49: #error Unknown API\n   50  #endif\n   51  }\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/BasePasses/FullScreenPass.h:\n   41  \n   42      /** Create a new fullscreen pass from file.\n   43:         \\param[in] filename Pixel shader filename. This method expects a pixel shader named \"main()\" in the file.\n   44          \\param[in] defines Optional list of macro definitions to set into the program.\n   45          \\param[in] viewportMask Optional value to initialize viewport mask with. Useful for multi-projection passes.\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/BasePasses/RasterPass.cpp:\n   28  #include \"Falcor/stdafx.h\"\n   29  #include \"RasterPass.h\"\n   30: #include \"Falcor/Core/API/RenderContext.h\"\n   31  \n   32  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/BasePasses/RasterPass.h:\n   40              \\param[in] filename Program filename.\n   41              \\param[in] vsEntry Vertex shader entry point. If this string is empty (\"\"), it will use a default vertex shader which transforms and outputs all default vertex attributes.\n   42:             \\param[in] psEntry Pixel shader entry point\n   43              \\param[in] programDefines Optional list of macro definitions to set into the program. The macro definitions will be set on all shader stages.\n   44              \\return A new object, or throws an exception if creation failed.\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/BasePasses/RasterScenePass.h:\n   51              \\param[in] filename Program filename.\n   52              \\param[in] vsEntry Vertex shader entry point. If this string is empty (\"\"), it will use a default vertex shader which transforms and outputs all default vertex attributes.\n   53:             \\param[in] psEntry Pixel shader entry point.\n   54              \\param[in] programDefines Optional list of macro definitions to set into the program. The macro definitions will be set on all shader stages.\n   55              \\return A new object, or throws an exception if creation failed.\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderGraph.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Falcor/Core/API/DeviceManager.h\"\n   30  #include \"RenderGraph.h\"\n   31  #include \"RenderPassLibrary.h\"\n   32  #include \"Utils/Algorithm/DirectedGraphTraversal.h\"\n   33: #include \"RenderGraphCompiler.h\"\n   34  \n   35  namespace Falcor {\n   ..\n   95          it.second.pPass->setScene(mpDevice->getRenderContext(), pScene);\n   96      }\n   97:     mRecompile = true;\n   98  }\n   99  \n  ...\n  109      }\n  110  \n  111:     pPass->mPassChangedCB = [this]() { mRecompile = true; };\n  112      pPass->mName = passName;\n  113  \n  114      if (mpScene) pPass->setScene(mpDevice->getRenderContext(), mpScene);\n  115      mNodeData[passIndex] = { passName, pPass };\n  116:     mRecompile = true;\n  117      return passIndex;\n  118  }\n  ...\n  140      const auto& removedEdges = mpGraph->removeNode(index);\n  141      for (const auto& e : removedEdges) mEdgeData.erase(e);\n  142:     mRecompile = true;\n  143  }\n  144  \n  ...\n  157      auto pPass = RenderPassLibrary::instance(mpDevice).createPass(pRenderContext, passTypeName.c_str(), dict);\n  158      pPassIt->second.pPass = pPass;\n  159:     pPass->mPassChangedCB = [this]() { mRecompile = true; };\n  160      pPass->mName = pOldPass->getName();\n  161  \n  162      if (mpScene) pPass->setScene(mpDevice->getRenderContext(), mpScene);\n  163:     mRecompile = true;\n  164  }\n  165  \n  ...\n  270      uint32_t e = mpGraph->addEdge(srcIndex, dstIndex);\n  271      mEdgeData[e] = newEdge;\n  272:     mRecompile = true;\n  273      return e;\n  274  }\n  ...\n  306      mEdgeData.erase(edgeID);\n  307      mpGraph->removeEdge(edgeID);\n  308:     mRecompile = true;\n  309  }\n  310  \n  ...\n  348  }\n  349  \n  350: bool RenderGraph::compile(RenderContext* pContext, std::string& log) {\n  351:     if (!mRecompile) return true;\n  352      mpExe = nullptr;\n  353  \n  354      try {\n  355:         mpExe = RenderGraphCompiler::compile(*this, pContext, mCompilerDeps);\n  356:         mRecompile = false;\n  357          return true;\n  358      } catch (const std::exception& e) {\n  ...\n  364  void RenderGraph::execute(RenderContext* pContext) {\n  365      std::string log;\n  366:     if (!compile(pContext, log)) {\n  367:         logError(\"Failed to compile RenderGraph\\n\" + log + \"Ignoring RenderGraph::execute() call\");\n  368          return;\n  369      }\n  ...\n  373      c.pGraphDictionary = mpPassDictionary;\n  374      c.pRenderContext = pContext;\n  375:     c.defaultTexDims = mCompilerDeps.defaultResourceProps.dims;\n  376:     c.defaultTexFormat = mCompilerDeps.defaultResourceProps.format;\n  377      mpExe->execute(c);\n  378  }\n  ...\n  380  void RenderGraph::resolvePerFrameSparseResources(RenderContext* pContext) {\n  381      std::string log;\n  382:     if (!compile(pContext, log)) {\n  383:         logError(\"Failed to compile RenderGraph\\n\" + log + \"Ignoring RenderGraph::resolvePerFrameSparseResources() call\");\n  384          return;\n  385      }\n  ...\n  389      c.pGraphDictionary = mpPassDictionary;\n  390      c.pRenderContext = pContext;\n  391:     c.defaultTexDims = mCompilerDeps.defaultResourceProps.dims;\n  392:     c.defaultTexFormat = mCompilerDeps.defaultResourceProps.format;\n  393      mpExe->resolvePerFrameSparseResources(c);\n  394  }\n  ...\n  396  void RenderGraph::resolvePerSampleSparseResources(RenderContext* pContext) {\n  397      std::string log;\n  398:     if (!compile(pContext, log)) {\n  399:         logError(\"Failed to compile RenderGraph\\n\" + log + \"Ignoring RenderGraph::resolvePerSampleSparseResources() call\");\n  400          return;\n  401      }\n  ...\n  405      c.pGraphDictionary = mpPassDictionary;\n  406      c.pRenderContext = pContext;\n  407:     c.defaultTexDims = mCompilerDeps.defaultResourceProps.dims;\n  408:     c.defaultTexFormat = mCompilerDeps.defaultResourceProps.format;\n  409      mpExe->resolvePerSampleSparseResources(c);\n  410  }\n  ...\n  465  \n  466      if (pResource) {\n  467:         mCompilerDeps.externalResources[name] = pResource;\n  468      } else {\n  469:         if (mCompilerDeps.externalResources.find(name) == mCompilerDeps.externalResources.end()) {\n  470              logWarning(\"RenderGraph::setInput() - Trying to remove an external resource named `\" + name + \"` but the resource wasn't registered before. Ignoring call\");\n  471              return;\n  472          }\n  473:         mCompilerDeps.externalResources.erase(name);\n  474      }\n  475  \n  ...\n  498  \n  499      mOutputs.push_back(newOut);\n  500:     mRecompile = true;\n  501  }\n  502  \n  ...\n  513          if (mOutputs[i].nodeId == removeMe.nodeId && mOutputs[i].field == removeMe.field) {\n  514              mOutputs.erase(mOutputs.begin() + i);\n  515:             mRecompile = true;\n  516              return;\n  517          }\n  ...\n  529  \n  530  Resource::SharedPtr RenderGraph::getOutput(const std::string& name) {\n  531:     if (mRecompile) {\n  532:         logError(\"RenderGraph::getOutput() - can't fetch an output resource because the graph wasn't successfuly compiled yet\");\n  533          return nullptr;\n  534      }\n  ...\n  568  \n  569      // Store the values\n  570:     mCompilerDeps.defaultResourceProps.format = pColor->getFormat();\n  571:     mCompilerDeps.defaultResourceProps.dims = { pTargetFbo->getWidth(), pTargetFbo->getHeight() };\n  572  \n  573      // Invalidate the graph. Render-passes might change their reflection based on the resize information\n  574:     mRecompile = true;\n  575  }\n  576  \n  577  void RenderGraph::resize(uint width, uint height, const ResourceFormat& format) {\n  578      // Store the values\n  579:     mCompilerDeps.defaultResourceProps.format = format;\n  580:     mCompilerDeps.defaultResourceProps.dims = { width, height };\n  581  \n  582      // Invalidate the graph. Render-passes might change their reflection based on the resize information\n  583:     mRecompile = true;\n  584  }\n  585  \n  586  uint2 RenderGraph::dims() {\n  587:     return mCompilerDeps.defaultResourceProps.dims;\n  588  }\n  589  \n  ...\n  596          (dst.getDepth() == 0 || src.getDepth() == dst.getDepth()) &&\n  597          (dst.getFormat() == ResourceFormat::Unknown || src.getFormat() == dst.getFormat()) &&\n  598:         src.getSampleCount() == dst.getSampleCount() && // TODO: allow dst sample count to be 1 when auto MSAA resolve is implemented in graph compilation\n  599          src.getType() == dst.getType() &&\n  600          src.getSampleCount() == dst.getSampleCount();\n  ...\n  618                  uint32_t e = mpGraph->addEdge(srcIndex, dstIndex);\n  619                  mEdgeData[e] = { true, srcField.getName(), dstFieldIt->getName() };\n  620:                 mRecompile = true;\n  621                  inputSatisfied = true; // If connection was found, continue to next unsatisfied input\n  622                  break;\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderGraph.h:\n   35  #include \"Falcor/Utils/Algorithm/DirectedGraph.h\"\n   36  #include \"RenderGraphExe.h\"\n   37: #include \"RenderGraphCompiler.h\"\n   38  \n   39  namespace Falcor {\n   ..\n  222          void setName(const std::string& name) { mName = name; }\n  223  \n  224:         /** Compile the graph\n  225          */\n  226:         bool compile(RenderContext* pContext, std::string& log);\n  227:         bool compile(RenderContext* pContext) { std::string s; return compile(pContext, s); }\n  228  \n  229       private:\n  ...\n  231          friend class RenderGraphExporter;\n  232          friend class RenderPassLibrary;\n  233:         friend class RenderGraphCompiler;\n  234  \n  235          /** Default consturctor for FBO rendering (relies on gpFramework )\n  ...\n  283          InternalDictionary::SharedPtr mpPassDictionary;\n  284          RenderGraphExe::SharedPtr mpExe;\n  285:         bool mRecompile = false;\n  286:         RenderGraphCompiler::Dependencies mCompilerDeps;\n  287  \n  288          std::shared_ptr<Device> mpDevice;\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderGraphCompiler.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"RenderGraphCompiler.h\"\n   30  #include \"RenderGraph.h\"\n   31  #include \"RenderPasses/ResolvePass.h\"\n   ..\n   39  }  // namespace\n   40  \n   41: RenderGraphCompiler::RenderGraphCompiler(RenderGraph& graph, const Dependencies& dependencies) : mGraph(graph), mDependencies(dependencies) {}\n   42  \n   43: RenderGraphExe::SharedPtr RenderGraphCompiler::compile(RenderGraph& graph, RenderContext* pContext, const Dependencies& dependencies) {\n   44:     RenderGraphCompiler c = RenderGraphCompiler(graph, dependencies);\n   45  \n   46      // Register the external resources\n   ..\n   49  \n   50      c.resolveExecutionOrder();\n   51:     c.compilePasses(pContext);\n   52      if (c.insertAutoPasses()) c.resolveExecutionOrder();\n   53      c.validateGraph();\n   ..\n   60          pExe->insertPass(e.name, e.pPass);\n   61      }\n   62:     c.restoreCompilationChanges();\n   63      pExe->mpResourceCache = pResourcesCache;\n   64      return pExe;\n   65  }\n   66  \n   67: void RenderGraphCompiler::validateGraph() const {\n   68      std::string err;\n   69  \n   ..\n   97  }\n   98  \n   99: void RenderGraphCompiler::resolveExecutionOrder() {\n  100      mExecutionList.clear();\n  101  \n  ...\n  137  }\n  138  \n  139: bool RenderGraphCompiler::insertAutoPasses() {\n  140      bool addedPasses = false;\n  141      for (size_t i = 0; i < mExecutionList.size(); i++) {\n  ...\n  201                      mGraph.addEdge(resolvePassName + \".dst\", dstFieldName);\n  202  \n  203:                     // Log changes made to user's graph by compilation process\n  204:                     mCompilationChanges.removedEdges.emplace_back(srcFieldName, dstFieldName);\n  205                  }\n  206  \n  207:                 mCompilationChanges.generatedPasses.push_back(resolvePassName);\n  208                  addedPasses = true;\n  209              }\n  ...\n  214  }\n  215  \n  216: void RenderGraphCompiler::allocateResources(ResourceCache* pResourceCache) {\n  217      // Build list to look up execution order index from the pass\n  218      std::unordered_map<RenderPass*, uint32_t> passToIndex;\n  ...\n  285  \n  286  \n  287: void RenderGraphCompiler::restoreCompilationChanges() {\n  288:     for (const auto& name : mCompilationChanges.generatedPasses) mGraph.removePass(name);\n  289:     for (const auto& e : mCompilationChanges.removedEdges) mGraph.addEdge(e.first, e.second);\n  290  \n  291:     mCompilationChanges.generatedPasses.clear();\n  292:     mCompilationChanges.removedEdges.clear();\n  293  }\n  294  \n  295: RenderPass::CompileData RenderGraphCompiler::prepPassCompilationData(const PassData& passData) {\n  296:     RenderPass::CompileData compileData;\n  297:     compileData.defaultTexDims = mDependencies.defaultResourceProps.dims;\n  298:     compileData.defaultTexFormat = mDependencies.defaultResourceProps.format;\n  299  \n  300      auto isExecutionEdge = [this](uint32_t edgeId) {\n  ...\n  314                  const auto& fIn = *passData.reflector.getField(mGraph.mEdgeData[e].dstField);\n  315                  f.name(fIn.getName()).visibility(fIn.getVisibility()).desc(fIn.getDesc());\n  316:                 compileData.connectedResources.addField(f);\n  317                  break;\n  318              }\n  ...\n  326              auto pTex = pRes->asTexture();\n  327              std::string resName = name.substr((passData.name + \".\").size());\n  328:             compileData.connectedResources.addInput(resName, \"External input resource\").format(pTex->getFormat()).resourceType(resourceTypeToFieldType(pTex->getType()), pTex->getWidth(), pTex->getHeight(), pTex->getDepth(), pTex->getSampleCount(), pTex->getMipCount(), pTex->getArraySize());\n  329          }\n  330      }\n  ...\n  339              if (otherPass.index == outgoingPass) {\n  340                  auto f = *otherPass.reflector.getField(mGraph.mEdgeData[e].dstField);\n  341:                 auto pField = compileData.connectedResources.getField(mGraph.mEdgeData[e].srcField);\n  342                  if (pField) {\n  343                      const_cast<RenderPassReflection::Field*>(pField)->merge(f);\n  ...\n  345                      const auto& fOut = *passData.reflector.getField(mGraph.mEdgeData[e].srcField);\n  346                      f.name(fOut.getName()).visibility(fOut.getVisibility()).desc(fOut.getDesc());\n  347:                     compileData.connectedResources.addField(f);\n  348                  }\n  349              }\n  ...\n  351      }\n  352  \n  353:     return compileData;\n  354  }\n  355  \n  356: void RenderGraphCompiler::compilePasses(RenderContext* pContext) {\n  357      while(1) {\n  358          std::string log;\n  ...\n  360          for (auto& p : mExecutionList) {\n  361              try {\n  362:                 p.pPass->compile(pContext, prepPassCompilationData(p));\n  363              } catch (const std::exception& e) {\n  364                  log += std::string(e.what()) + \"\\n\";\n  ...\n  372          bool changed = false;\n  373          for (auto& p : mExecutionList) {\n  374:             auto newR = p.pPass->reflect(prepPassCompilationData(p));\n  375              if (newR != p.reflector) {\n  376                  p.reflector = newR;\n  ...\n  380  \n  381          if (!changed) {\n  382:             logError(\"Graph compilation failed.\\n\" + log);\n  383              return;\n  384          }\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderGraphCompiler.h:\n   34      class RenderGraph;\n   35  \n   36:     class dlldecl RenderGraphCompiler\n   37      {\n   38      public:\n   ..\n   42              ResourceCache::ResourcesMap externalResources;\n   43          };\n   44:         static RenderGraphExe::SharedPtr compile(RenderGraph& graph, RenderContext* pContext, const Dependencies& dependencies);\n   45  \n   46      private:\n   47:         RenderGraphCompiler(RenderGraph& graph, const Dependencies& dependencies);\n   48          RenderGraph& mGraph;\n   49          const Dependencies& mDependencies;\n   ..\n   63              std::vector<std::string> generatedPasses;\n   64              std::vector<std::pair<std::string, std::string>> removedEdges;\n   65:         } mCompilationChanges;\n   66  \n   67          void resolveExecutionOrder();\n   68:         void compilePasses(RenderContext* pContext);\n   69          bool insertAutoPasses();\n   70          void allocateResources(ResourceCache* pResourceCache);\n   71          void validateGraph() const;\n   72:         void restoreCompilationChanges();\n   73:         RenderPass::CompileData prepPassCompilationData(const PassData& passData);\n   74      };\n   75  }\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderGraphExe.h:\n   35  namespace Falcor {\n   36  \n   37: class RenderGraphCompiler;\n   38  \n   39  class dlldecl RenderGraphExe {\n   ..\n   89  \n   90  private:\n   91:     friend class RenderGraphCompiler;\n   92      static SharedPtr create() { return SharedPtr(new RenderGraphExe); }\n   93      RenderGraphExe() = default;\n   ..\n  100          RenderPass::SharedPtr pPass;\n  101      private:\n  102:         friend class RenderGraphExe; // Force RenderGraphCompiler to use insertPass() by hiding this Ctor from it\n  103          Pass(const std::string& name_, const RenderPass::SharedPtr& pPass_) : name(name_), pPass(pPass_) {}\n  104      };\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderGraphImportExport.cpp:\n  104  \n  105  std::string RenderGraphExporter::getIR(const RenderGraph::SharedPtr& pGraph) {\n  106:     RenderGraphIR::SharedPtr pIR = RenderGraphIR::create(pGraph->getName());\n  107  \n  108      // Register passes that are loaded from dlls\n  109      auto libNames = RenderPassLibrary::enumerateLibraries();\n  110      for (const auto& libName : libNames) {\n  111:         pIR->loadPassLibrary(getFilenameFromPath(libName));\n  112      }\n  113  \n  ...\n  115      for (const auto& node : pGraph->mNodeData) {\n  116          const auto& data = node.second;\n  117:         pIR->addPass(getClassTypeName(data.pPass.get()), data.name, data.pPass->getScriptingDictionary());\n  118      }\n  119  \n  ...\n  125          std::string src = srcPass + (data.srcField.size() ? '.' + data.srcField : data.srcField);\n  126          std::string dst = dstPass + (data.dstField.size() ? '.' + data.dstField : data.dstField);\n  127:         pIR->addEdge(src, dst);\n  128      }\n  129  \n  ...\n  131      for (const auto& out : pGraph->mOutputs) {\n  132          std::string str = pGraph->mNodeData[out.nodeId].name + '.' + out.field;\n  133:         pIR->markOutput(str);\n  134      }\n  135  \n  136:     return pIR->getIR();\n  137  }\n  138  \n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderGraphUI.cpp:\n   37  {\n   38      const float kUpdateTimeInterval = 2.0f;\n   39:     const float kPinRadius = 7.0f;\n   40  \n   41      static const float kTimeTillPopup = 2.0f;\n   42:     static const uint32_t kPinColor = 0xFFFFFFFF;\n   43      static const uint32_t kEdgesColor = 0xFFFFFFFF;\n   44      static const uint32_t kAutoGenEdgesColor = 0xFFFF0400;\n   ..\n   73          ImGui::Node* getPopupNode() { return mpFocusedNode; }\n   74  \n   75:         void setPopupPin(uint32_t pinIndex, bool isInput)\n   76          {\n   77              if (ImGui::IsAnyMouseDown())\n   78              {\n   79:                 mPopupPinHoverTime = 0.0f;\n   80:                 mPinIndexToDisplay = -1;\n   81              }\n   82  \n   83:             if ((pinIndex != -1) )//&& pinIndex != mPinIndexToDisplay)\n   84              {\n   85                  std::chrono::system_clock::time_point thisTime = std::chrono::system_clock::now();\n   86                  float timeDiff = (std::chrono::duration<float>(thisTime - mLastTime)).count();\n   87:                 if(timeDiff < kTimeTillPopup) mPopupPinHoverTime += timeDiff;\n   88                  mLastTime = thisTime;\n   89:                 if (mPopupPinHoverTime < kTimeTillPopup) return;\n   90              }\n   91  \n   92:             if (mPopupPinHoverTime >= kTimeTillPopup) mPopupPinHoverTime = 0.0f;\n   93:             mPinIndexToDisplay = pinIndex; mPopupPinIsInput = isInput;\n   94          }\n   95  \n   96:         void deselectPopupPin()\n   97          {\n   98              std::chrono::system_clock::time_point thisTime = std::chrono::system_clock::now();\n   ..\n  104              {\n  105                  mNothingHoveredTime = 0.0f;\n  106:                 mPinIndexToDisplay = static_cast<uint32_t>(-1);\n  107              }\n  108          }\n  109  \n  110:         uint32_t getPopupPinIndex() const { return mPinIndexToDisplay; }\n  111  \n  112:         bool isPopupPinInput() const { return mPopupPinIsInput; }\n  113  \n  114:         ImGui::Node*& getNodeFromID(uint32_t nodeID) { return mpIDtoNode[nodeID]; }\n  115  \n  116          // wraps around creating link to avoid setting static flag\n  ...\n  146          friend class RenderGraphNode;\n  147  \n  148:         float mPopupPinHoverTime = 0.0f;\n  149          float mNothingHoveredTime = 0.0f;\n  150          std::chrono::system_clock::time_point mLastTime = std::chrono::system_clock::now();\n  ...\n  153          void* mpCBUserData = nullptr;\n  154          ImGui::Node* mpFocusedNode = nullptr;\n  155:         uint32_t mPinIndexToDisplay = uint32_t(-1);\n  156:         bool mPopupPinIsInput = false;\n  157:         std::unordered_map<uint32_t, ImGui::Node*> mpIDtoNode;\n  158      };\n  159  \n  ...\n  162      public:\n  163          bool mDisplayProperties;\n  164:         bool mOutputPinConnected[IMGUINODE_MAX_OUTPUT_SLOTS];\n  165:         bool mInputPinConnected[IMGUINODE_MAX_INPUT_SLOTS];\n  166          RenderPass* mpRenderPass;\n  167  \n  168:         bool pinIsConnected(uint32_t id, bool isInput)\n  169          {\n  170              assert(isInput ? id < IMGUINODE_MAX_INPUT_SLOTS : id < IMGUINODE_MAX_OUTPUT_SLOTS);\n  171:             return isInput ? mInputPinConnected[id] : mOutputPinConnected[id];\n  172          }\n  173  \n  174:         void setPinColor(uint32_t color, uint32_t index, bool isInput = false)\n  175          {\n  176              if (isInput) inputColors[index] = color;\n  ...\n  222              ImVec2 currentScreenPos{ pGraphEditorGui->offset.x  + pCurrentNode->Pos.x * ImGui::GetCurrentWindow()->FontWindowScale,\n  223                  pGraphEditorGui->offset.y + pCurrentNode->Pos.y * ImGui::GetCurrentWindow()->FontWindowScale };\n  224:             ImVec2 pinRectBoundsOffsetx{ -kPinRadius * 2.0f, kPinRadius * 4.0f };\n  225              float slotNum = 1.0f;\n  226:             float pinOffsetx = kPinRadius * 2.0f;\n  227:             uint32_t pinCount = static_cast<uint32_t>(pCurrentNode->InputsCount);\n  228              bool isInputs = true;\n  229  \n  ...\n  241              for (uint32_t j = 0; j < 2; ++j)\n  242              {\n  243:                 for (uint32_t i = 0; i < pinCount; ++i)\n  244                  {\n  245:                     // custom pins as an extension of the built ones\n  246                      ImVec2 inputPos = currentScreenPos;\n  247:                     inputPos.y += pCurrentNode->Size.y * ((i + 1) / static_cast<float>(pinCount + 1));\n  248:                     ImU32 pinColor = isInputs ? pCurrentNode->inputColors[i] : pCurrentNode->outputColors[i];\n  249  \n  250:                     // fill in circle for the pin if connected to a link\n  251:                     if (pCurrentNode->pinIsConnected(i, isInputs))\n  252                      {\n  253:                         ImGui::GetWindowDrawList()->AddCircleFilled(ImVec2(inputPos.x, inputPos.y), kPinRadius,pinColor);\n  254                      }\n  255  \n  256:                     if (ImGui::IsMouseHoveringRect(ImVec2(inputPos.x + pinRectBoundsOffsetx.x, inputPos.y - kPinRadius), ImVec2(inputPos.x + pinRectBoundsOffsetx.y, inputPos.y + kPinRadius)))\n  257                      {\n  258:                         uint32_t hoveredPinColor = (pinColor == kGraphOutputsColor) ? (pinColor | 0xFF000000) : ImGui::GetColorU32(pGraphEditorGui->GetStyle().color_node_title);\n  259:                         ImGui::GetWindowDrawList()->AddCircleFilled(ImVec2(inputPos.x, inputPos.y), kPinRadius, hoveredPinColor);\n  260  \n  261                          if (pRenderPass)\n  262                          {\n  263                              pGraphEditorGui->setPopupNode(pCurrentNode);\n  264:                             pGraphEditorGui->setPopupPin(i, !static_cast<bool>(j));\n  265                          }\n  266                      }\n  267                      else\n  268                      {\n  269:                         ImGui::GetWindowDrawList()->AddCircle(ImVec2(inputPos.x, inputPos.y), kPinRadius, pinColor);\n  270                      }\n  271  \n  ...\n  273                      bool drawLabel = !(pText[0] == '#');\n  274  \n  275:                     if (pinColor == kGraphOutputsColor)\n  276                      {\n  277:                         ImVec2 arrowPoints[3] = { { inputPos.x + kPinRadius * 3.0f / 2.0f, inputPos.y + kPinRadius },\n  278:                         { inputPos.x + kPinRadius * 3.0f / 2.0f + kPinRadius, inputPos.y },\n  279:                         { inputPos.x + kPinRadius * 3.0f / 2.0f, inputPos.y - kPinRadius } };\n  280:                         ImGui::GetWindowDrawList()->AddPolyline(arrowPoints, 3, pinColor, false, 3.0f);\n  281                      }\n  282:                     else if (!drawLabel && pinColor == kExecutionEdgeColor)\n  283                      {\n  284                          // we can draw anything special for execution edge inputs here\n  285                      }\n  286  \n  287:                     ImGui::SetCursorScreenPos({ inputPos.x + pinOffsetx - ((pinOffsetx < 0.0f) ? ImGui::CalcTextSize(isInputs ? pCurrentNode->InputNames[i] : pCurrentNode->OutputNames[i]).x : 0.0f), inputPos.y - kPinRadius });\n  288  \n  289                      slotNum++;\n  ...\n  291                  }\n  292  \n  293:                 // reset and set up offsets for the output pins\n  294                  slotNum = 1.0f;\n  295                  currentScreenPos.x += pCurrentNode->Size.x;\n  296:                 pinOffsetx *= -1.0f;\n  297:                 pinRectBoundsOffsetx.y = kPinRadius;\n  298:                 pinCount = static_cast<uint32_t>(pCurrentNode->OutputsCount);\n  299                  isInputs = false;\n  300              }\n  ...\n  320              {\n  321                  mpRenderPass = pRenderPass;\n  322:                 const float4 nodeColor = Gui::pickUniqueColor(pRenderPass->getName());\n  323                  overrideTitleBgColor = ImGui::GetColorU32({ nodeColor.x, nodeColor.y, nodeColor.z, nodeColor.w });\n  324              }\n  325  \n  326              bool isInputs = true;\n  327:             uint32_t pinCount = static_cast<uint32_t>(InputsCount);\n  328              for (uint32_t j = 0; j < 2; ++j)\n  329              {\n  330:                 for (uint32_t i = 0; i < pinCount; ++i)\n  331                  {\n  332                      if (isInputs) inputColors[i] = ImColor(150, 150, 150, 150);\n  333                      else outputColors[i] = ImColor(150, 150, 150, 150);\n  334                  }\n  335:                 pinCount = static_cast<uint32_t>(OutputsCount);\n  336                  isInputs = false;\n  337              }\n  ...\n  383              if (outputName[0] == '#')\n  384              {\n  385:                 static_cast<RenderGraphNode*>(link.InputNode)->setPinColor(link.LinkColor, link.InputSlot, false);\n  386:                 static_cast<RenderGraphNode*>(link.OutputNode)->setPinColor(link.LinkColor, link.OutputSlot, true);\n  387              }\n  388          }\n  ...\n  413      void RenderGraphUI::addRenderPass(const std::string& name, const std::string& nodeTypeName)\n  414      {\n  415:         mpIr->addPass(nodeTypeName, name);\n  416          mShouldUpdate = true;\n  417      }\n  ...\n  436              return;\n  437          }\n  438:         passUI.mOutputPins[outputIt->second].mIsGraphOutput = true;\n  439:         mpIr->markOutput(outputParam);\n  440          mRebuildDisplayData = true;\n  441          mShouldUpdate = true;\n  ...\n  451      {\n  452          std::string outputParam = outputPass + \".\" + outputField;\n  453:         mpIr->unmarkOutput(outputParam);\n  454          auto& passUI = mRenderPassUI[outputPass];\n  455:         passUI.mOutputPins[passUI.mNameToIndexOutput[outputField]].mIsGraphOutput = false;\n  456          mShouldUpdate = true;\n  457      }\n  ...\n  491              (inputIt != dstRenderPassUI.mNameToIndexInput.end());\n  492          // check that the input is not already connected\n  493:         canCreateEdge &= (mInputPinStringToLinkID.find(dstString) == mInputPinStringToLinkID.end());\n  494  \n  495  \n  496          if (canCreateEdge)\n  497          {\n  498:             uint32_t srcPinIndex = outputIt->second;\n  499:             uint32_t dstPinIndex = inputIt->second;\n  500:             srcRenderPassUI.mOutputPins[srcPinIndex].mConnectedPinName = dstField;\n  501:             srcRenderPassUI.mOutputPins[srcPinIndex].mConnectedNodeName = dstPass;\n  502:             dstRenderPassUI.mInputPins[dstPinIndex].mConnectedPinName = srcField;\n  503:             dstRenderPassUI.mInputPins[dstPinIndex].mConnectedNodeName = srcPass;\n  504  \n  505              if (!(dstField[0] == '#'))\n  ...\n  523                      mRebuildDisplayData = true;\n  524                      color = kExecutionEdgeColor;\n  525:                     mpIr->addEdge(srcPass, dstPass);\n  526                  }\n  527                  else\n  528                  {\n  529:                     mpIr->addEdge(srcString, dstString);\n  530                  }\n  531              }\n  ...\n  544          {\n  545              assert(srcField[0] == '#');\n  546:             mpIr->removeEdge(srcPass, dstPass);\n  547          }\n  548          else\n  549          {\n  550:             mpIr->removeEdge(srcPass + \".\" + srcField, dstPass + \".\" + dstField);\n  551          }\n  552          mShouldUpdate = true;\n  ...\n  556      {\n  557          mRebuildDisplayData = true;\n  558:         mpIr->removePass(name);\n  559          mShouldUpdate = true;\n  560      }\n  ...\n  563      {\n  564          if (!mShouldUpdate) return;\n  565:         std::string newCommands = mpIr->getIR();\n  566:         mpIr = RenderGraphIR::create(mRenderGraphName, false); // reset\n  567          if (mLastCommand == newCommands) return;\n  568  \n  ...\n  576  \n  577          // only send updates that we know are valid.\n  578:         if (mpRenderGraph->compile(pContext) == false) mLogString += \"Graph is currently invalid\\n\";\n  579          mShouldUpdate = false;\n  580          mRebuildDisplayData = true;\n  ...\n  588  \n  589          // only send delta of updates once the graph is valid\n  590:         if (mpRenderGraph->compile(pContext) == false) return;\n  591          std::ofstream outputFileStream(filePath, std::ios_base::out);\n  592          outputFileStream << mUpdateCommands;\n  ...\n  605          mNextPassName.resize(255, 0);\n  606          mpNodeGraphEditor = std::make_shared<NodeGraphEditorGui>(this);\n  607:         mpIr = RenderGraphIR::create(graphName, false);\n  608      }\n  609  \n  ...\n  630      }\n  631  \n  632:     void RenderPassUI::addUIPin(const std::string& fieldName, uint32_t guiPinID, bool isInput, const std::string& connectedPinName, const std::string& connectedNodeName, bool isGraphOutput)\n  633      {\n  634:         auto& pinsRef = isInput ? mInputPins : mOutputPins;\n  635          auto& nameToIndexMapRef = isInput ? mNameToIndexInput : mNameToIndexOutput;\n  636  \n  637:         if (pinsRef.size() <= guiPinID)\n  638          {\n  639:             pinsRef.resize(guiPinID + 1);\n  640          }\n  641  \n  642:         PinUI& pinUIData = pinsRef[guiPinID];\n  643:         pinUIData.mPinName = fieldName;\n  644:         pinUIData.mGuiPinID = guiPinID;\n  645:         pinUIData.mConnectedPinName = connectedPinName;\n  646:         pinUIData.mConnectedNodeName = connectedNodeName;\n  647:         pinUIData.mIsGraphOutput = isGraphOutput;\n  648  \n  649:         nameToIndexMapRef.insert(std::make_pair(pinUIData.mPinName, static_cast<uint32_t>(guiPinID) ));\n  650      }\n  651  \n  652:     void RenderPassUI::renderPinUI(const std::string& passName, RenderGraphUI* pGraphUI, uint32_t index, bool input)\n  653      {\n  654:         RenderPassUI::PinUI& pinUI = input ? mInputPins[index] : mOutputPins[index];\n  655  \n  656          size_t fieldIndex = -1;\n  657          for (size_t i = 0; i < mReflection.getFieldCount(); ++i)\n  658          {\n  659:             if (mReflection.getField(i)->getName() == pinUI.mPinName)\n  660              {\n  661                  fieldIndex = i;\n  ...\n  670              if (is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Input) || is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Output))\n  671              {\n  672:                 pinUI.renderUI(field, pGraphUI, passName);\n  673              }\n  674          }\n  675      }\n  676  \n  677:     void RenderPassUI::PinUI::renderFieldInfo(const RenderPassReflection::Field& field, RenderGraphUI* pGraphUI, const std::string& passName, const std::string& fieldName)\n  678      {\n  679          RenderPassReflection::Field::Visibility type = field.getVisibility();\n  680          uint32_t isInput = is_set(type, RenderPassReflection::Field::Visibility::Input);\n  681          uint32_t isOutput = is_set(type, RenderPassReflection::Field::Visibility::Output);\n  682:         bool isExecutionPin = fieldName[0] == '#';\n  683  \n  684:         if (isExecutionPin)\n  685          {\n  686:             ImGui::TextUnformatted(\"Execution Pin\");\n  687              return;\n  688          }\n  ...\n  759      }\n  760  \n  761:     void RenderPassUI::PinUI::renderUI(const RenderPassReflection::Field& field, RenderGraphUI* pGraphUI, const std::string& passName)\n  762      {\n  763          ImGui::TextUnformatted(mIsGraphOutput ? \"Graph Output : \" : \"\");\n  764:         renderFieldInfo(field, pGraphUI, passName, mPinName);\n  765:         bool isExecutionPin = mPinName[0] == '#';\n  766  \n  767:         if (!isExecutionPin && is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Output))\n  768          {\n  769              bool isGraphOut = mIsGraphOutput;\n  ...\n  772                  if (isGraphOut && !mIsGraphOutput)\n  773                  {\n  774:                     pGraphUI->removeOutput(passName, mPinName);\n  775                  }\n  776                  else if (!isGraphOut && mIsGraphOutput)\n  777                  {\n  778:                     pGraphUI->addOutput(passName, mPinName);\n  779                  }\n  780              }\n  ...\n  789          bool first = false;\n  790  \n  791:         if (!(isPopupOpen = ImGui::IsPopupOpen(ImGui::GetCurrentWindow()->GetID(\"PinMenu\"))))\n  792          {\n  793:             ImGui::OpenPopup(\"PinMenu\");\n  794              first = true;\n  795          }\n  796  \n  797          ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(8, 8));\n  798:         if (ImGui::BeginPopup(\"PinMenu\"))\n  799          {\n  800              if (first) ImGui::SetWindowPos({ ImGui::GetWindowPos().x - 8, ImGui::GetWindowPos().y - 8 });\n  ...\n  805                      mpNodeGraphEditor->selectedLink = -1;\n  806                      mpNodeGraphEditor->setPopupNode(nullptr);\n  807:                     mpNodeGraphEditor->setPopupPin(-1, false);\n  808                  }\n  809:                 else mpNodeGraphEditor->deselectPopupPin();\n  810              }\n  811  \n  812:             if (mpNodeGraphEditor->getPopupNode() && mpNodeGraphEditor->getPopupPinIndex() != -1)\n  813              {\n  814                  const std::string& passName = mpNodeGraphEditor->getPopupNode()->getName();\n  815                  RenderPassUI& renderPassUI = mRenderPassUI[passName];\n  816:                 renderPassUI.renderPinUI(passName, this, mpNodeGraphEditor->getPopupPinIndex(), mpNodeGraphEditor->isPopupPinInput());\n  817                  ImGui::Separator();\n  818              }\n  ...\n  826                  std::string inputName = std::string(static_cast<RenderGraphNode*>(selectedLink.OutputNode)->getInputName(selectedLink.OutputSlot));\n  827                  std::string inputString = dstPassName + (inputName.empty() ? \"\" : \".\") + inputName;\n  828:                 uint32_t linkID = mInputPinStringToLinkID[inputString];\n  829                  auto edgeIt = mpRenderGraph->mEdgeData.find(linkID);\n  830  \n  ...\n  879          style.color_node_frame_selected = ImGui::ColorConvertFloat4ToU32({ 226.0f / 255.0f, 190.0f / 255.0f, 42.0f / 255.0f, 0.8f });\n  880          style.color_node_frame_active = style.color_node_frame_selected;\n  881:         style.node_slots_radius = kPinRadius;\n  882  \n  883          // update the deleted links from the GUI since the library doesn't call its own callback\n  ...\n  890          else\n  891          {\n  892:             updatePins(false);\n  893          }\n  894  \n  ...\n  927                              renderGroup.separator();\n  928                          }\n  929:                         RenderPassUI::PinUI::renderFieldInfo(field, this, renderUIName, field.getName());\n  930                          internalResources = true;\n  931                      }\n  ...\n  935                  if (ImGui::IsWindowFocused())\n  936                  {\n  937:                     mpIr->updatePass(renderUIName, pPass->getScriptingDictionary());\n  938                  }\n  939                  mShouldUpdate = true;\n  ...\n  945          renderWindow.release();\n  946  \n  947:         if (mpNodeGraphEditor->getPopupPinIndex() != uint32_t(-1) || (mpNodeGraphEditor->selectedLink != -1))\n  948          {\n  949              renderPopupMenu();\n  ...\n  951          else\n  952          {\n  953:             if (ImGui::IsPopupOpen(ImGui::GetCurrentWindow()->GetID(\"PinMenu\")))\n  954              {\n  955                  ImGui::CloseCurrentPopup();\n  ...\n 1012                  }\n 1013  \n 1014:                 mpIr->addPass(dragAndDropText, mNextPassName);\n 1015                  mAddedFromDragAndDrop = true;\n 1016                  mDisplayDragAndDropPopup = false;\n ....\n 1051              std::string nameString;\n 1052  \n 1053:             for (const auto& currentPinUI : currentPassUI.mInputPins)\n 1054              {\n 1055                  // Connect the graph nodes for each of the edges\n 1056                  // need to iterate in here in order to use the right indices\n 1057:                 const std::string& currentPinName = currentPinUI.mPinName;\n 1058:                 inputsString += inputsString.size() ? (\";\" + currentPinName) : currentPinName;\n 1059              }\n 1060  \n 1061:             for (const auto& currentPinUI : currentPassUI.mOutputPins)\n 1062              {\n 1063:                 const std::string& currentPinName = currentPinUI.mPinName;\n 1064:                 outputsString += outputsString.size() ? (\";\" + currentPinName) : currentPinName;\n 1065              }\n 1066  \n ....\n 1080          }\n 1081  \n 1082:         updatePins();\n 1083          mpNodeGraphEditor->render();\n 1084          ImGui::BringWindowToDisplayBack(ImGui::FindWindowByName(\"Graph Editor\"));\n ....\n 1120      }\n 1121  \n 1122:     void RenderGraphUI::updatePins(bool addLinks)\n 1123      {\n 1124:         //  Draw pin connections. All the nodes have to be added to the GUI before the connections can be drawn\n 1125          for (auto& currentPass : mRenderPassUI)\n 1126          {\n 1127              auto& currentPassUI = currentPass.second;\n 1128  \n 1129:             for (auto& currentPinUI : currentPassUI.mOutputPins)\n 1130              {\n 1131:                 const std::string& currentPinName = currentPinUI.mPinName;\n 1132  \n 1133                  if (addLinks)\n 1134                  {\n 1135:                     const auto& inputPins = mOutputToInputPins.find(currentPass.first + \".\" + currentPinName);\n 1136:                     if (inputPins != mOutputToInputPins.end())\n 1137                      {\n 1138:                         for (const auto& connectedPin : (inputPins->second))\n 1139                          {\n 1140:                             if (!mpNodeGraphEditor->isLinkPresent(mpNodeGraphEditor->getNodeFromID(currentPassUI.mGuiNodeID), currentPinUI.mGuiPinID,\n 1141:                                 mpNodeGraphEditor->getNodeFromID(connectedPin.second), connectedPin.first))\n 1142                              {\n 1143:                                 RenderGraphNode* pNode = static_cast<RenderGraphNode*>(mpNodeGraphEditor->getNodeFromID(connectedPin.second));\n 1144:                                 std::string dstName = pNode->getInputName(connectedPin.first);\n 1145                                  uint32_t edgeColor = kEdgesColor;\n 1146                                  // execution edges\n ....\n 1151                                  else\n 1152                                  {\n 1153:                                     std::string srcString = currentPass.first + \".\" + currentPinName;\n 1154                                      std::string dstString = std::string(pNode->getName()) + \".\" + dstName;\n 1155:                                     const RenderPassReflection::Field& srcPin = *currentPassUI.mReflection.getField(currentPinName);\n 1156:                                     const RenderPassReflection::Field& dstPin = *mRenderPassUI[pNode->getName()].mReflection.getField(dstName);\n 1157  \n 1158:                                     if (false/*mpRenderGraph->canAutoResolve(srcPin, dstPin)*/)\n 1159                                      {\n 1160                                          mLogString += std::string(\"Warning: Edge \") + srcString + \" - \" + dstName + \" can auto-resolve.\\n\";\n ....\n 1168                                  }\n 1169  \n 1170:                                 mpNodeGraphEditor->addLinkFromGraph(mpNodeGraphEditor->getNodeFromID(currentPassUI.mGuiNodeID), currentPinUI.mGuiPinID,\n 1171:                                     mpNodeGraphEditor->getNodeFromID(connectedPin.second), connectedPin.first, false, edgeColor);\n 1172  \n 1173:                                 RenderGraphNode* pDstGraphNode = static_cast<RenderGraphNode*>(mpNodeGraphEditor->getNodeFromID(connectedPin.second));\n 1174                                  RenderGraphNode* pSrcGraphNode = static_cast<RenderGraphNode*>(mpNodeGraphEditor->getNodeFromID(currentPassUI.mGuiNodeID));\n 1175:                                 pDstGraphNode->mInputPinConnected[connectedPin.first] = true;\n 1176:                                 pSrcGraphNode->mOutputPinConnected[currentPinUI.mGuiPinID] = true;\n 1177                                  if (dstName[0] == '#')\n 1178                                  {\n 1179:                                     pSrcGraphNode->setPinColor(kExecutionEdgeColor, currentPinUI.mGuiPinID, false);\n 1180:                                     pDstGraphNode->setPinColor(kExecutionEdgeColor, connectedPin.first, true);\n 1181                                  }\n 1182                              }\n ....\n 1185  \n 1186                      // mark graph outputs to graph output node\n 1187:                     if (currentPinUI.mIsGraphOutput)\n 1188                      {\n 1189:                         static_cast<RenderGraphNode*>(mpNodeGraphEditor->getNodeFromID(currentPassUI.mGuiNodeID))->setPinColor(kGraphOutputsColor, currentPinUI.mGuiPinID);\n 1190                      }\n 1191                  }\n 1192                  else\n 1193                  {\n 1194:                     if (!currentPinUI.mIsGraphOutput)\n 1195                      {\n 1196:                         static_cast<RenderGraphNode*>(mpNodeGraphEditor->getNodeFromID(currentPassUI.mGuiNodeID))->setPinColor(ImColor(150, 150, 150, 150), currentPinUI.mGuiPinID);\n 1197                      }\n 1198                  }\n ....\n 1201              if (!addLinks)\n 1202              {\n 1203:                 for (auto& currentPinUI : currentPassUI.mInputPins)\n 1204                  {\n 1205:                     const std::string& currentPinName = currentPinUI.mPinName;\n 1206:                     if (!currentPinUI.mConnectedNodeName.size()) continue;\n 1207  \n 1208:                     std::pair<uint32_t, uint32_t> inputIDs{ currentPinUI.mGuiPinID, currentPassUI.mGuiNodeID };\n 1209:                     const auto& connectedNodeUI = mRenderPassUI[currentPinUI.mConnectedNodeName];\n 1210:                     uint32_t inputPinID = connectedNodeUI.mNameToIndexOutput.find(currentPinUI.mConnectedPinName)->second;\n 1211  \n 1212:                     if (!mpNodeGraphEditor->isLinkPresent(mpNodeGraphEditor->getNodeFromID(connectedNodeUI.mGuiNodeID), inputPinID,\n 1213                          mpNodeGraphEditor->getNodeFromID(inputIDs.second),inputIDs.first ))\n 1214                      {\n 1215:                         auto edgeIt = mInputPinStringToLinkID.find(currentPass.first + \".\" + currentPinName);\n 1216:                         assert(edgeIt != mInputPinStringToLinkID.end());\n 1217                          uint32_t edgeID = edgeIt->second;\n 1218  \n ....\n 1221                          mpRenderGraph->removeEdge(edgeID);\n 1222  \n 1223:                         currentPinUI.mConnectedNodeName = \"\";\n 1224                          RenderGraphNode* pDstGraphNode = static_cast<RenderGraphNode*>(mpNodeGraphEditor->getNodeFromID(inputIDs.second));\n 1225                          RenderGraphNode* pSrcGraphNode = static_cast<RenderGraphNode*>(mpNodeGraphEditor->getNodeFromID(connectedNodeUI.mGuiNodeID));\n 1226  \n 1227:                         pDstGraphNode->mInputPinConnected[inputIDs.first] = false;\n 1228:                         pSrcGraphNode->mOutputPinConnected[inputPinID] = false;\n 1229:                         pSrcGraphNode->setPinColor(kPinColor, inputPinID, false);\n 1230:                         pDstGraphNode->setPinColor(kPinColor, inputIDs.first, true);\n 1231  \n 1232                          continue;\n ....\n 1281          uint32_t nodeIndex = 0;\n 1282  \n 1283:         mOutputToInputPins.clear();\n 1284  \n 1285          // set of field names that have a connection and are represented in the graph\n ....\n 1295          }\n 1296  \n 1297:         mpRenderGraph->compile(pContext);\n 1298          mRenderPassUI.clear();\n 1299:         mInputPinStringToLinkID.clear();\n 1300  \n 1301          // build information for displaying graph\n ....\n 1340              }\n 1341  \n 1342:             uint32_t inputPinIndex = 0;\n 1343:             uint32_t outputPinIndex = 0;\n 1344  \n 1345              // add all of the incoming connections\n ....\n 1348                  uint32_t edgeID = pCurrentPass->getIncomingEdge(i);\n 1349                  auto currentEdge = mpRenderGraph->mEdgeData[edgeID];\n 1350:                 uint32_t pinIndex = 0;\n 1351:                 inputPinIndex = 0;\n 1352  \n 1353:                 while (pinIndex < renderPassUI.mReflection.getFieldCount())\n 1354                  {\n 1355:                     bool isInput = is_set(renderPassUI.mReflection.getField(pinIndex)->getVisibility(),RenderPassReflection::Field::Visibility::Input);\n 1356                      if (isInput)\n 1357                      {\n 1358:                         if (renderPassUI.mReflection.getField(pinIndex)->getName() == currentEdge.dstField) { break;  }\n 1359:                         inputPinIndex++;\n 1360                      }\n 1361:                     pinIndex++;\n 1362                  }\n 1363  \n ....\n 1367  \n 1368                  std::string dstFieldName = currentEdge.dstField.empty() ? kInPrefix + nameToIndex.first : currentEdge.dstField;\n 1369:                 std::string inputPinString  = nameToIndex.first + \".\" + dstFieldName;\n 1370                  std::string srcFieldName = currentEdge.srcField.empty() ? kOutPrefix + pSourceNode->second.name : currentEdge.srcField;\n 1371:                 std::string outputPinString = pSourceNode->second.name + \".\" + srcFieldName;\n 1372:                 if (nodeConnectedInput.find(inputPinString) == nodeConnectedInput.end())\n 1373                  {\n 1374:                     nodeConnectedInput.insert(inputPinString);\n 1375                  }\n 1376  \n 1377:                 renderPassUI.addUIPin(dstFieldName, inputPinIndex, true, srcFieldName, pSourceNode->second.name);\n 1378:                 mOutputToInputPins[outputPinString].push_back(std::make_pair(inputPinIndex, renderPassUI.mGuiNodeID));\n 1379:                 mInputPinStringToLinkID.insert(std::make_pair(inputPinString, edgeID));\n 1380              }\n 1381  \n ....\n 1385                  uint32_t edgeID = pCurrentPass->getOutgoingEdge(i);\n 1386                  auto currentEdge = mpRenderGraph->mEdgeData[edgeID];\n 1387:                 outputPinIndex = 0;\n 1388  \n 1389:                 std::string pinString = nameToIndex.first + \".\" + currentEdge.srcField;\n 1390:                 if (nodeConnectedOutput.find(pinString) != nodeConnectedOutput.end())\n 1391                  {\n 1392                      break;\n ....\n 1394  \n 1395                  bool isGraphOutput = passGraphOutputs.find(currentEdge.srcField) != passGraphOutputs.end();\n 1396:                 uint32_t pinIndex = 0;\n 1397  \n 1398:                 while (pinIndex < renderPassUI.mReflection.getFieldCount())\n 1399                  {\n 1400:                     bool isOutput = (static_cast<uint32_t>(renderPassUI.mReflection.getField(pinIndex)->getVisibility() & RenderPassReflection::Field::Visibility::Output) != 0);\n 1401                      if (isOutput)\n 1402                      {\n 1403:                         if (renderPassUI.mReflection.getField(pinIndex)->getName() == currentEdge.srcField) { break; }\n 1404:                         outputPinIndex++;\n 1405                      }\n 1406:                     pinIndex++;\n 1407                  }\n 1408  \n ....\n 1412  \n 1413                  std::string dstFieldName = currentEdge.dstField.empty() ? kInPrefix + pDestNode->second.name : currentEdge.dstField;\n 1414:                 std::string inputPinString = nameToIndex.first + \".\" + dstFieldName;\n 1415                  std::string srcFieldName = currentEdge.srcField.empty() ? kOutPrefix + nameToIndex.first : currentEdge.srcField;\n 1416:                 std::string outputPinString = pDestNode->second.name + \".\" + srcFieldName;\n 1417  \n 1418:                 renderPassUI.addUIPin(srcFieldName, outputPinIndex, false, dstFieldName, pDestNode->second.name, isGraphOutput);\n 1419:                 nodeConnectedOutput.insert(pinString);\n 1420              }\n 1421  \n 1422              // Now we know which nodes are connected within the graph and not\n 1423:             inputPinIndex = 0;\n 1424:             outputPinIndex = 0;\n 1425  \n 1426              for (uint32_t i = 0; i < renderPassUI.mReflection.getFieldCount(); ++i)\n ....\n 1432                      if (nodeConnectedInput.find(nameToIndex.first + \".\" + currentField.getName()) == nodeConnectedInput.end())\n 1433                      {\n 1434:                         renderPassUI.addUIPin(currentField.getName(), inputPinIndex, true, \"\");\n 1435                      }\n 1436  \n 1437:                     inputPinIndex++;\n 1438                  }\n 1439  \n ....\n 1443                      {\n 1444                          bool isGraphOutput = passGraphOutputs.find(currentField.getName()) != passGraphOutputs.end();\n 1445:                         renderPassUI.addUIPin(currentField.getName(), outputPinIndex, false, \"\", \"\", isGraphOutput);\n 1446                      }\n 1447  \n 1448:                     outputPinIndex++;\n 1449                  }\n 1450              }\n 1451  \n 1452              // unconnected nodes will be renamed when they are connected\n 1453:             if (!addedExecutionInput)  renderPassUI.addUIPin(kInPrefix  + nameToIndex.first,  static_cast<uint32_t>( renderPassUI.mInputPins.size()), true, \"\", \"\", false);\n 1454:             if (!addedExecutionOutput) renderPassUI.addUIPin(kOutPrefix + nameToIndex.first, static_cast<uint32_t>(renderPassUI.mOutputPins.size()), false, \"\", \"\", false);\n 1455  \n 1456              mRenderPassUI.emplace(std::make_pair(nameToIndex.first, std::move(renderPassUI)));\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderGraphUI.h:\n   41      public:\n   42  \n   43:         // wrapper around inserting new pin for a given pass\n   44:         void addUIPin(const std::string& fieldName, uint32_t guiPinID, bool isInput, const std::string& connectedPinName = \"\", const std::string& connectedNodeName = \"\", bool isGraphOutput = false);\n   45:         void renderPinUI(const std::string& passName, RenderGraphUI* pGraphUI, uint32_t index = 0, bool input = false);\n   46  \n   47          friend class RenderGraphUI;\n   48  \n   49      private:\n   50:         class PinUI\n   51          {\n   52          public:\n   53  \n   54:             std::string mPinName;\n   55:             uint32_t mGuiPinID;\n   56:             std::string mConnectedPinName;\n   57              std::string mConnectedNodeName;\n   58              bool mIsGraphOutput;\n   ..\n   62          };\n   63  \n   64:         std::vector<PinUI> mInputPins;\n   65          std::unordered_map<std::string, uint32_t> mNameToIndexInput;\n   66  \n   67:         std::vector<PinUI> mOutputPins;\n   68          std::unordered_map<std::string, uint32_t> mNameToIndexOutput;\n   69  \n   70          uint32_t mGuiNodeID;\n   71          RenderPassReflection mReflection;\n   72:         uint32_t mNumExecutionPins = 0;\n   73      };\n   74  \n   ..\n  159          void updateDisplayData(RenderContext* pContext);\n  160  \n  161:         /** Updates information about pin connections and graph output.\n  162          */\n  163:         void updatePins(bool addLinks = true);\n  164  \n  165          /** Helper function to calculate position of the next node in execution order\n  ...\n  182          RenderGraph::SharedPtr mpRenderGraph;\n  183  \n  184:         RenderGraphIR::SharedPtr mpIr;\n  185  \n  186          float2 mNewNodeStartPosition{ -40.0f, 100.0f };\n  ...\n  192          std::unordered_map <std::string, RenderPassUI> mRenderPassUI;\n  193  \n  194:         std::unordered_map <std::string, uint32_t> mInputPinStringToLinkID;\n  195  \n  196:         // maps output pin name to input pin ids. Pair first is pin id, second is node id\n  197:         std::unordered_map <std::string, std::vector< std::pair<uint32_t, uint32_t > > > mOutputToInputPins;\n  198  \n  199          // if in external editing mode, building list of commands for changes to send to the other process\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderPass.h:\n   34  #include \"Falcor/Utils/InternalDictionary.h\"\n   35  #include \"ResourceCache.h\"\n   36: #include \"Falcor/Core/API/Texture.h\"\n   37  #include \"Falcor/Scene/Scene.h\" \n   38  #include \"Falcor/Utils/UI/Gui.h\"\n   39  #include \"Falcor/Utils/UI/UserInput.h\"\n   40: #include \"Falcor/Core/API/RenderContext.h\" \n   41: #include \"Falcor/Core/API/Device.h\"\n   42  \n   43  namespace Falcor {\n   ..\n   88      Render passes are inserted in a render graph, which is executed at runtime.\n   89      Each render pass declares its I/O requirements in the reflect() function,\n   90:     and as part of the render graph compilation their compile() function is called.\n   91      At runtime, execute() is called each frame to generate the pass outputs.\n   92  */\n   ..\n   96      virtual ~RenderPass() = default;\n   97  \n   98:     struct CompileData {\n   99          RenderPassReflection connectedResources;\n  100          uint2 defaultTexDims;\n  ...\n  102      };\n  103  \n  104:     /** Called once before compilation. Describes I/O requirements of the pass.\n  105:         The requirements can't change after the graph is compiled. If the IO requests are dynamic, you'll need to trigger compilation of the render-graph yourself.\n  106      */\n  107:     virtual RenderPassReflection reflect(const CompileData& compileData) = 0;\n  108  \n  109:     /** Will be called during graph compilation. You should throw an exception in case the compilation failed\n  110      */\n  111:     virtual void compile(RenderContext* pContext, const CompileData& compileData) {}\n  112  \n  113      /** If pass has frame dependent sparse resources they should be resolved within this call\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderPassHelpers.h:\n   40      struct ChannelDesc\n   41      {\n   42:         std::string name;       ///< Render pass I/O pin name.\n   43          std::string texname;    ///< Name of corresponding resource in the shader, or empty if it's not a shader variable.\n   44          std::string desc;       ///< Human-readable description of the data.\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderPassLibrary.cpp:\n   41  #include \"RenderPassLibrary.h\"\n   42  #include \"RenderPasses/ResolvePass.h\"\n   43: #include \"Falcor/Core/API/Device.h\"\n   44  #include \"Falcor/Utils/Debug/debug.h\"\n   45  #include \"Falcor/Core/Platform/OS.h\"\n   ..\n   58      static const std::string kPassTempLibSuffix = \".falcor\";\n   59  \n   60:     RenderPassLibrary* RenderPassLibrary::spInstance = nullptr;\n   61:     std::map<Device*, RenderPassLibrary*> RenderPassLibrary::spInstances = {};\n   62  \n   63      template<typename Pass>\n   ..\n   77  \n   78      RenderPassLibrary& RenderPassLibrary::instance(std::shared_ptr<Device> pDevice) {\n   79:         //if (!spInstance) spInstance = new RenderPassLibrary;\n   80          \n   81:         auto it = spInstances.find(pDevice.get());\n   82:         if(it != spInstances.end()) {\n   83              // found device bound pass library\n   84              return *it->second;\n   85          } else {\n   86              // create pass library for a new device\n   87:             auto ret = spInstances.insert(std::pair<Device*, RenderPassLibrary*>(pDevice.get(), new RenderPassLibrary(pDevice)));\n   88              if (ret.second == false) {\n   89                  logError(\"RenderPassLibrary for device \" + pDevice->getPhysicalDeviceName() + \" already created !!!\");\n   ..\n   94              return *ret.first->second;\n   95          }\n   96:         return *spInstance;\n   97      }\n   98  \n   ..\n  105  \n  106      void RenderPassLibrary::shutdown() {\n  107:         safe_delete(spInstance);\n  108      }\n  109  \n  ...\n  147      RenderPassLibrary::StrVec RenderPassLibrary::enumerateLibraries() {\n  148          StrVec libNames;\n  149:         for (const auto& lib : spInstance->mLibs) {\n  150              libNames.push_back(lib.first);\n  151          }\n  ...\n  154  \n  155      std::string RenderPassLibrary::getClassDescription(const std::string& className) {\n  156:         auto classDescIt = spInstance->mPasses.find(className);\n  157          return std::string(classDescIt->second.desc);\n  158      }\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderPassLibrary.h:\n  104  \n  105      private:\n  106:         static RenderPassLibrary* spInstance;\n  107:         static std::map<Device*, RenderPassLibrary*> spInstances;\n  108  \n  109          struct ExtendedDesc : RenderPassDesc {\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/RenderPassReflection.h:\n   30  \n   31  #include \"Falcor/Core/Framework.h\"\n   32: #include \"Falcor/Core/API/Texture.h\"\n   33  \n   34  namespace Falcor {\n   ..\n   56              None = 0x0,         ///< None\n   57              Optional = 0x1,     ///< Mark that field as optional. For output resources, it means that they don't have to be bound unless their result is required by the caller. For input resources, it means that the pass can function correctly without them being bound (but the behavior might be different)\n   58:             Persistent = 0x2,   ///< The resource bound to this field must not change between execute() calls (not the pointer nor the data). It can change only during the RenderGraph recompilation.\n   59          };\n   60  \n\n/home/max/dev/Lava/src/Falcor/RenderGraph/ResourceCache.cpp:\n   28  #include \"Falcor/stdafx.h\"\n   29  #include \"ResourceCache.h\"\n   30: #include \"Falcor/Core/API/Texture.h\"\n   31  \n   32  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/RenderGraph/ResourceCache.h:\n   31  #include \"Falcor/Core/Framework.h\"\n   32  #include \"Falcor/RenderGraph/RenderPassReflection.h\"\n   33: #include \"Falcor/Core/API/Resource.h\"\n   34  \n   35  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/ResolvePass.cpp:\n   38  ResolvePass::ResolvePass(Device::SharedPtr pDevice): RenderPass(pDevice) {}\n   39  \n   40: RenderPassReflection ResolvePass::reflect(const CompileData& compileData) {\n   41      RenderPassReflection reflector;\n   42      reflector.addInput(kSrc, \"Multi-sampled texture\").format(mFormat).texture2D(0, 0, 0);\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/ResolvePass.h:\n   42  \n   43      void setFormat(ResourceFormat format) { mFormat = format; }\n   44:     virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   45      virtual void execute(RenderContext* pContext, const RenderData& renderData) override;\n   46      virtual std::string getDesc() override { return kDesc; }\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/LoadShadingData.slang:\n   65  /** Returns the primary ray's direction.\n   66  */\n   67: float3 getPrimaryRayDir(uint2 pixel, uint2 frameDim, const Camera camera)\n   68  {\n   69  #if !USE_VBUFFER\n   ..\n   71      {\n   72          // If we have the view vector bound as a buffer, just fetch it. No need to compute anything.\n   73:         return -gWorldView[pixel].xyz;\n   74      }\n   75      else\n   ..\n   79          // Note that we do not take depth-of-field into account as it would require exactly matching the\n   80          // sample generator between the passes, which is error prone. The host side will issue a warning instead.\n   81:         return camera.computeRayPinhole(pixel, frameDim).dir;\n   82      }\n   83  }\n   84  \n   85  /** Helper for setting up the ShadingData struct based on loaded data.\n   86:     \\param[in] pixel Current pixel coordinates.\n   87:     \\param[in] frameDim Frame dimensions in pixel.\n   88      \\param[in] camera Current camera.\n   89      \\param[out] sd ShadingData struct.\n   90:     \\return True if the pixel has valid data (not a background pixel). Note sd.V is always valid.\n   91  */\n   92: bool loadShadingData(uint2 pixel, uint2 frameDim, const Camera camera, out ShadingData sd)\n   93  {\n   94      sd = {};\n   95  \n   96:     float3 rayDir = getPrimaryRayDir(pixel, frameDim, camera);\n   97      bool valid = false;\n   98  \n   99  #if USE_VBUFFER\n  100      HitInfo hit;\n  101:     if (hit.decode(gVBuffer[pixel]))\n  102      {\n  103          // Evaluate Falcor's material parameters at the hit point.\n  ...\n  118      }\n  119  #else\n  120:     float4 worldPos = gWorldPosition[pixel];\n  121      if (worldPos.w != 0.f) // Using w to indicate valid geometry for now.\n  122      {\n  123          // Load geometry and material parameters from G-buffer.\n  124:         float3 normal = gWorldShadingNormal[pixel].xyz;\n  125:         float3 bitangent = isValid(gWorldShadingBitangent) ? gWorldShadingBitangent[pixel].xyz : perp_stark(normal);\n  126:         float3 faceNormal = gWorldFaceNormal[pixel].xyz;\n  127          GeometryParams geoParams = prepareGeometryParams(worldPos.xyz, -rayDir, normal, bitangent, faceNormal);\n  128  \n  129          MaterialParams matParams;\n  130:         matParams.diffuseOpacity = gMaterialDiffuseOpacity[pixel];\n  131:         matParams.specularRoughness = gMaterialSpecularRoughness[pixel];\n  132:         matParams.emissive = gMaterialEmissive[pixel];\n  133:         matParams.extraParams = gMaterialExtraParams[pixel];\n  134  \n  135          sd = prepareShadingData(geoParams, matParams);\n  ...\n  137          {\n  138              HitInfo hit;\n  139:             if (hit.decode(gVBuffer[pixel])) sd.materialID = gScene.getMaterialID(hit.meshInstanceID);\n  140          }\n  141  \n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathData.slang:\n   77      float3  L;                  ///< Accumulated path contribution. Note: This field is only used in the wavefront code. TODO: Move it out or make sure it's used by megakernel.\n   78  \n   79:     InteriorList interiorList;  ///< Interior list. Keeping track of a stack of materials with medium properties.\n   80  \n   81      SampleGenerator sg;         ///< Sample generator state. Note: This is only valid when path.length < kMaxBounces.\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.cpp:\n   90  \n   91          // Stats and debugging utils.\n   92:         mpPixelStats = PixelStats::create();\n   93:         assert(mpPixelStats);\n   94:         mpPixelDebug = PixelDebug::create();\n   95:         assert(mpPixelDebug);\n   96      }\n   97  \n   ..\n  103      }\n  104  \n  105:     RenderPassReflection PathTracer::reflect(const CompileData& compileData)\n  106      {\n  107          RenderPassReflection reflector;\n  ...\n  113      }\n  114  \n  115:     void PathTracer::compile(RenderContext* pRenderContext, const CompileData& compileData)\n  116      {\n  117:         mSharedParams.frameDim = compileData.defaultTexDims;\n  118      }\n  119  \n  ...\n  122          bool dirty = false;\n  123  \n  124:         dirty |= widget.var(\"Samples/pixel\", mSharedParams.samplesPerPixel, 1u, 1u << 16, 1);\n  125          if (dirty |= widget.var(\"Light samples/vertex\", mSharedParams.lightSamplesPerVertex, 1u, kMaxLightSamplesPerVertex)) recreateVars();  // Trigger recreation of the program vars.\n  126          widget.tooltip(\"The number of shadow rays that will be traced at each path vertex.\\n\"\n  ...\n  129          widget.tooltip(\"Maximum path length.\\n0 = direct only\\n1 = one indirect bounce etc.\", true);\n  130  \n  131:         widget.text(\"Max rays/pixel: \" + std::to_string(mMaxRaysPerPixel));\n  132:         widget.tooltip(\"This is the maximum number of rays that will be traced per pixel.\\n\"\n  133              \"The number depends on the scene's available light types and the current configuration.\", true);\n  134  \n  135:         // Clamping for basic firefly removal.\n  136          dirty |= widget.checkbox(\"Clamp samples\", mSharedParams.clampSamples);\n  137          widget.tooltip(\"Basic firefly removal.\\n\\n\"\n  138:             \"This option enables clamping the per-sample contribution before accumulating. \"\n  139:             \"Note that energy is lost and the images will be darker when clamping is enabled.\", true);\n  140          if (mSharedParams.clampSamples)\n  141          {\n  ...\n  192  \n  193              dirty |= samplingGroup.checkbox(\"Use light samples in volumes\", mSharedParams.useLightSamplesInVolumes);\n  194:             samplingGroup.tooltip(\"Use direct light sampling within volumes even though they typically are occluded.\", true);\n  195  \n  196              // Russian roulette.\n  ...\n  237              {\n  238                  dirty |= lightsGroup.checkbox(\"Use emissive light sampling\", mSharedParams.useEmissiveLightSampling);\n  239:                 lightsGroup.tooltip(\"This option enables explicit sampling of emissive geometry by using an emissive sampler to pick samples \"\n  240                      \"on the emissive triangles and tracing shadow rays to evaluate their visibility. See options in separate tab.\\n\"\n  241                      \"When disabled, the contribution from emissive lights is only accounted for when they are directly hit by a scatter ray.\", true);\n  ...\n  303          if (logGroup.open())\n  304          {\n  305:             // Pixel stats.\n  306:             mpPixelStats->renderUI(logGroup);\n  307  \n  308:             // Pixel debugger.\n  309:             mpPixelDebug->renderUI(logGroup);\n  310  \n  311              logGroup.release();\n  ...\n  326      bool PathTracer::onMouseEvent(const MouseEvent& mouseEvent)\n  327      {\n  328:         return mpPixelDebug->onMouseEvent(mouseEvent);\n  329      }\n  330  \n  ...\n  333          if (mSharedParams.lightSamplesPerVertex < 1 || mSharedParams.lightSamplesPerVertex > kMaxLightSamplesPerVertex)\n  334          {\n  335:             logError(\"Unsupported number of light samples per path vertex. Clamping to the range [1,\" + std::to_string(kMaxLightSamplesPerVertex) + \"].\");\n  336              mSharedParams.lightSamplesPerVertex = std::clamp(mSharedParams.lightSamplesPerVertex, 1u, kMaxLightSamplesPerVertex);\n  337              recreateVars();\n  ...\n  340          if (mSharedParams.maxBounces > kMaxPathLength)\n  341          {\n  342:             logError(\"'maxBounces' exceeds the maximum supported path length. Clamping to \" + std::to_string(kMaxPathLength));\n  343              mSharedParams.maxBounces = kMaxPathLength;\n  344          }\n  ...\n  468      }\n  469  \n  470:     // Compute the maximum number of rays per pixel we'll trace. This depends on the current config and scene.\n  471      // This function should be called just before rendering, when everything has been updated.\n  472:     uint32_t PathTracer::maxRaysPerPixel() const\n  473      {\n  474          if (!mpScene) return 0;\n  ...\n  484          uint32_t raysPerPath = shadowRays + scatterRays;\n  485  \n  486:         return raysPerPath * mSharedParams.samplesPerPixel;\n  487      }\n  488  \n  ...\n  492          bool lightingChanged = updateLights(pRenderContext);\n  493  \n  494:         mMaxRaysPerPixel = maxRaysPerPixel();\n  495  \n  496          // Update refresh flag if changes that affect the output have occured.\n  ...\n  534          mSharedParams.prngDimension = dict.keyExists(kRenderPassPRNGDimension) ? dict[kRenderPassPRNGDimension] : 0u;\n  535  \n  536:         mpPixelDebug->beginFrame(pRenderContext, renderData.getDefaultTextureDims());\n  537:         mpPixelStats->beginFrame(pRenderContext, renderData.getDefaultTextureDims());\n  538  \n  539          return true;\n  ...\n  542      void PathTracer::endFrame(RenderContext* pRenderContext, const RenderData& renderData)\n  543      {\n  544:         mpPixelDebug->endFrame(pRenderContext);\n  545:         mpPixelStats->endFrame(pRenderContext);\n  546  \n  547          // Generate ray count output if it is exists.\n  ...\n  549          if (pDstRayCount)\n  550          {\n  551:             Texture* pSrcRayCount = mpPixelStats->getRayCountBuffer().get();\n  552              if (pSrcRayCount == nullptr)\n  553              {\n  ...\n  568      void PathTracer::setStaticParams(Program* pProgram) const\n  569      {\n  570:         // Set compile-time constants on the given program.\n  571:         // TODO: It's unnecessary to set these every frame. It should be done lazily, but the book-keeping is complicated.\n  572          Program::DefineList defines;\n  573:         defines.add(\"SAMPLES_PER_PIXEL\", std::to_string(mSharedParams.samplesPerPixel));\n  574          defines.add(\"LIGHT_SAMPLES_PER_VERTEX\", std::to_string(mSharedParams.lightSamplesPerVertex));\n  575          defines.add(\"MAX_BOUNCES\", std::to_string(mSharedParams.maxBounces));\n  ...\n  600  #define field(f_) rwField(#f_, &PathTracerParams::f_)\n  601          // General\n  602:         params.field(samplesPerPixel);\n  603          params.field(lightSamplesPerVertex);\n  604          params.field(maxBounces);\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.h:\n   30  #include \"FalcorExperimental.h\"\n   31  #include \"Utils/Sampling/SampleGenerator.h\"\n   32: #include \"Utils/Debug/PixelDebug.h\"\n   33  #include \"Experimental/Scene/Lights/EnvProbe.h\"\n   34  #include \"Experimental/Scene/Lights/EmissiveUniformSampler.h\"\n   ..\n   36  #include \"RenderGraph/RenderPassHelpers.h\"\n   37  #include \"PathTracerParams.slang\"\n   38: #include \"PixelStats.h\"\n   39  \n   40  namespace Falcor\n   ..\n   48  \n   49          virtual Dictionary getScriptingDictionary() override;\n   50:         virtual RenderPassReflection reflect(const CompileData& compileData) override;\n   51:         virtual void compile(RenderContext* pRenderContext, const CompileData& compileData) override;\n   52          virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n   53          virtual void renderUI(Gui::Widgets& widget) override;\n   ..\n   63          bool initLights(RenderContext* pRenderContext);\n   64          bool updateLights(RenderContext* pRenderContext);\n   65:         uint32_t maxRaysPerPixel() const;\n   66          bool beginFrame(RenderContext* pRenderContext, const RenderData& renderData);\n   67          void endFrame(RenderContext* pRenderContext, const RenderData& renderData);\n   ..\n   80          std::string                         mEnvProbeFilename;              ///< Name of loaded environment map (stripped of full path).\n   81  \n   82:         PixelStats::SharedPtr               mpPixelStats;                    ///< Utility class for collecting pixel stats.\n   83:         PixelDebug::SharedPtr               mpPixelDebug;                    ///< Utility class for pixel debugging (print in shaders).\n   84  \n   85          ChannelList                         mInputChannels;                 ///< Render pass inputs.\n   ..\n   96          // Runtime data\n   97          bool                                mOptionsChanged = false;        ///< True if the config has changed since last frame.\n   98:         bool                                mUseAnalyticLights = false;     ///< True if analytic lights should be used for the current frame. See compile-time constant in StaticParams.slang.\n   99:         bool                                mUseEnvLight = false;           ///< True if env map light should be used for the current frame. See compile-time constant in StaticParams.slang.\n  100:         bool                                mUseEmissiveLights = false;     ///< True if emissive lights should be taken into account. See compile-time constant in StaticParams.slang.\n  101:         bool                                mUseEmissiveSampler = false;    ///< True if emissive light sampler should be used for the current frame. See compile-time constant in StaticParams.slang.\n  102:         uint32_t                            mMaxRaysPerPixel = 0;           ///< Maximum number of rays per pixel that will be traced. This is computed based on the current configuration.\n  103  \n  104          // Scripting\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracerHelpers.slang:\n  175          if (min(sd.NdotV, NdotL) < kMinCosTheta) return 0.f;\n  176  \n  177:         return NdotL * M_1_PI; // pdf = cos(theta) / pi\n  178      }\n  179  }\n  ...\n  215      float u = sampleNext1D(sg);\n  216  \n  217:     // We use explicit checks for which light types are enabled so that the compiler\n  218:     // can remove the unused code. It won't otherwise since u is unknown at compile time.\n  219      if (kUseEnvLight)\n  220      {\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracerParams.slang:\n   68  \n   69      // General\n   70:     uint    samplesPerPixel = 1;            ///< Number of samples (paths) per pixel. Use compile-time constant SAMPLES_PER_PIXEL in shader.\n   71:     uint    lightSamplesPerVertex = 1;      ///< Number of light samples per path vertex. Use compile-time constant LIGHT_SAMPLES_PER_VERTEX in shader. Note: This option is only supported in the WavefrontPathTracer.\n   72:     uint    maxBounces = 3;                 ///< Max number of indirect bounces (0 = none), up to kMaxPathLength. Use compile-time constant MAX_BOUNCES in shader.\n   73:     int     useVBuffer = 1;                 ///< Use a V-buffer as input. Use compile-time constant USE_VBUFFER in shader.\n   74  \n   75:     int     forceAlphaOne = true;           ///< Force the alpha channel to 1.0. Otherwise background will have alpha 0.0 and covered samples 1.0 to allow compositing. Use compile-time constant FORCE_ALPHA_ONE in shader.\n   76      int     clampSamples = false;           ///< Clamp the per-path contribution to 'clampThreshold' to reduce fireflys.\n   77      float   clampThreshold = 10.f;\n   ..\n   81      int     useAnalyticLights = true;       ///< Use built-in analytic lights.\n   82      int     useEmissiveLights = true;       ///< Use emissive geometry as light sources.\n   83:     int     useEnvLight = true;             ///< Use environment map as light source (if loaded). Use compile-time constant USE_ENV_LIGHT in shader.\n   84:     int     useEnvBackground = true;        ///< Use environment map as background (if loaded). Use compile-time constant USE_ENV_BACKGROUND in shader.\n   85  \n   86      // Sampling\n   87:     int     useBRDFSampling = true;         ///< Use BRDF importance sampling (otherwise cosine-weighted hemisphere sampling). Use compile-time constant USE_BRDF_SAMPLING in shader.\n   88:     int     useMIS = true;                  ///< Use multiple importance sampling (MIS). Use compile-time constant USE_MIS in shader.\n   89:     uint    misHeuristic = 1; /* (uint)MISHeuristic::PowerTwoHeuristic */   ///< MIS heuristic. Use compile-time constant MIS_HEURISTIC in shader. TODO: Replace initializer value by enum when Slang supports it.\n   90      float   misPowerExponent = 2.f;         ///< MIS exponent for the power heuristic. This is only used when 'PowerExpHeuristic' is chosen.\n   91  \n   92      int     useEmissiveLightSampling = true;///< Use emissive light importance sampling.\n   93:     int     useRussianRoulette = false;     ///< Use Russian roulette. Use compile-time constant USE_RUSSIAN_ROULETTE in shader.\n   94      float   probabilityAbsorption = 0.2f;   ///< Probability of absorption for Russian roulette.\n   95      int     useFixedSeed = false;           ///< Use fixed random seed for the sample generator. This is useful for print() debugging.\n   96  \n   97      // Runtime data\n   98:     uint2   frameDim = uint2(0, 0);         ///< Current frame dimensions in pixels.\n   99      uint    frameCount = 0;                 ///< Frame count since scene was loaded.\n  100      uint    prngDimension = 0;              ///< First available PRNG dimension.\n  ...\n  107      int     useLegacyBSDF = false;          ///< Use legacy BRDF sampling code (no support for specular transmission).\n  108      int     useNestedDielectrics = true;    ///< Use algorithm to handle nested dielectric materials.\n  109:     int     useLightSamplesInVolumes = false; ///< Use direct light sampling inside of volumes (transmissive materials), even though shadow rays are typically always occluded.\n  110      int     _pad4;\n  111  };\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"PixelStats.h\"\n   30  #include <sstream>\n   31  #include <iomanip>\n   ..\n   33  namespace Falcor\n   34  {\n   35:     PixelStats::SharedPtr PixelStats::create()\n   36      {\n   37:         return SharedPtr(new PixelStats());\n   38      }\n   39  \n   40:     void PixelStats::beginFrame(RenderContext* pRenderContext, const uint2& frameDim)\n   41      {\n   42          // Prepare state.\n   ..\n   73      }\n   74  \n   75:     void PixelStats::endFrame(RenderContext* pRenderContext)\n   76      {\n   77          assert(mRunning);\n   ..\n   83              if (!mpFence) mpFence = GpuFence::create();\n   84  \n   85:             // Sum of the per-pixel counters. The results are copied to a GPU buffer.\n   86              mpParallelReduction->execute<uint4>(pRenderContext, mpStatsRayCount, ComputeParallelReduction::Type::Sum, nullptr, mpReductionResult, 0);\n   87              mpParallelReduction->execute<uint4>(pRenderContext, mpStatsPathLength, ComputeParallelReduction::Type::Sum, nullptr, mpReductionResult, 16);\n   ..\n   96      }\n   97  \n   98:     void PixelStats::prepareProgram(const Program::SharedPtr& pProgram, const ShaderVar& var)\n   99      {\n  100          assert(mRunning);\n  ...\n  102          if (mStatsEnabled)\n  103          {\n  104:             pProgram->addDefine(\"_PIXEL_STATS_ENABLED\");\n  105              var[\"gStatsRayCount\"] = mpStatsRayCount;\n  106              var[\"gStatsPathLength\"] = mpStatsPathLength;\n  ...\n  108          else\n  109          {\n  110:             pProgram->removeDefine(\"_PIXEL_STATS_ENABLED\");\n  111          }\n  112      }\n  113  \n  114:     void PixelStats::renderUI(Gui::Widgets& widget)\n  115      {\n  116          // Configuration.\n  117:         widget.checkbox(\"Pixel stats\", mStatsEnabled);\n  118          widget.tooltip(\"Collects ray tracing traversal stats on the GPU.\\nNote that this option slows down the performance.\");\n  119  \n  ...\n  124              std::ostringstream oss;\n  125              oss << \"Path length (avg): \" << std::fixed << std::setprecision(3) << mStats.avgPathLength << \"\\n\";\n  126:             oss << \"Traced rays (avg): \" << std::fixed << std::setprecision(3) << mStats.avgRaysPerPixel << \"\\n\";\n  127              oss << \"Traced rays (total): \" << mStats.totalRays << \"\\n\";\n  128              widget.text(oss.str().c_str());\n  ...\n  130      }\n  131  \n  132:     bool PixelStats::getStats(PixelStats::Stats& stats)\n  133      {\n  134          copyStatsToCPU();\n  135          if (!mStatsValid)\n  136          {\n  137:             logWarning(\"PixelStats::getStats() - Stats are not valid. Ignoring.\");\n  138              return false;\n  139          }\n  ...\n  142      }\n  143  \n  144:     const Texture::SharedPtr PixelStats::getRayCountBuffer() const\n  145      {\n  146          assert(!mRunning);\n  ...\n  148      }\n  149  \n  150:     void PixelStats::copyStatsToCPU()\n  151      {\n  152          assert(!mRunning);\n  ...\n  167  \n  168                  // Store stats locally.\n  169:                 const uint32_t numPixels = mFrameDim.x * mFrameDim.y;\n  170:                 assert(numPixels > 0);\n  171  \n  172                  mStats.totalRays = totalRayCount;\n  173:                 mStats.avgRaysPerPixel = (float)totalRayCount / numPixels;\n  174:                 mStats.avgPathLength = (float)totalPathLength / numPixels;\n  175  \n  176                  mStatsValid = true;\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.h:\n   35      /** Helper class for collecting runtime stats in the path tracer.\n   36  \n   37:         We log per-pixel stats in buffers on the GPU, which are immediately ready for consumption\n   38          after end() is called. These stats are summarized in a reduction pass, which are\n   39          available in getStats() or printStats() after async readback to the CPU.\n   40      */\n   41:     class dlldecl PixelStats\n   42      {\n   43      public:\n   ..\n   45          {\n   46              uint32_t totalRays = 0;\n   47:             float    avgRaysPerPixel = 0.f;\n   48              float    avgPathLength = 0.f;\n   49          };\n   50  \n   51:         using SharedPtr = std::shared_ptr<PixelStats>;\n   52:         virtual ~PixelStats() = default;\n   53  \n   54          static SharedPtr create();\n   ..\n   62  \n   63          /** Fetches the latest stats generated by begin()/end().\n   64:             \\param[out] stats The stats are copied here.\n   65              \\return True if stats are available, false otherwise.\n   66          */\n   67:         bool getStats(PixelStats::Stats& stats);\n   68  \n   69:         /** Returns the per-pixel ray count buffer or nullptr if not available.\n   70:             \\return Texture in R32Uint format containing per-pixel ray counts, or nullptr if not available.\n   71          */\n   72          const Texture::SharedPtr getRayCountBuffer() const;\n   73  \n   74      protected:\n   75:         PixelStats() {}\n   76          void copyStatsToCPU();\n   77  \n   ..\n   94          Texture::SharedPtr                  mpStatsRayCount;                ///< Stats for number of rays traced.\n   95          Texture::SharedPtr                  mpStatsPathLength;              ///< Stats for path length.\n   96:         bool                                mStatsBuffersValid = false;     ///< True if per-pixel stats buffers contain valid data.\n   97      };\n   98  \n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.slang:\n   31      The host sets the following defines:\n   32  \n   33:     _PIXEL_STATS_ENABLED       Nonzero if stats should be collected.\n   34  \n   35  */\n   36  \n   37: RWTexture2D<uint> gStatsRayCount;            // Per-pixel ray count stats.\n   38: RWTexture2D<uint> gStatsPathLength;          // Per-pixel path length.\n   39  \n   40: #ifdef _PIXEL_STATS_ENABLED\n   41: static uint2 gPixelStatsPixel;\n   42  #endif\n   43  \n   44: void logSetPixel(uint2 pixel)\n   45  {\n   46: #ifdef _PIXEL_STATS_ENABLED\n   47:     gPixelStatsPixel = pixel;\n   48  #endif\n   49  }\n   ..\n   51  void logTraceRay()\n   52  {\n   53: #ifdef _PIXEL_STATS_ENABLED\n   54:     InterlockedAdd(gStatsRayCount[gPixelStatsPixel], 1);\n   55  #endif\n   56  }\n   ..\n   58  void logPathLength(uint pathLength)\n   59  {\n   60: #ifdef _PIXEL_STATS_ENABLED\n   61:     gStatsPathLength[gPixelStatsPixel] = pathLength;\n   62  #endif\n   63  }\n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/StaticParams.slang:\n   27   **************************************************************************/\n   28  \n   29: /** Translation of defines set by the host to compile-time constants used to\n   30      configure the path tracer without overhead from dynamic control flow.\n   31      This will eventually be replaced by specialization constants in Slang.\n   ..\n   33      The host sets the following defines (booleans are 1=true, 0=false):\n   34  \n   35:     SAMPLES_PER_PIXEL           Number of paths to trace per pixel.\n   36      LIGHT_SAMPLES_PER_VERTEX    Number of light sampler per path vertex.\n   37      MAX_BOUNCES                 Maximum number of indirect bounces (0 means no indirect).\n   ..\n   49  */\n   50  \n   51: #ifndef SAMPLES_PER_PIXEL\n   52  #error StaticParams.slang is missing defines\n   53  #endif\n   54  \n   55: static const uint kSamplesPerPixel = SAMPLES_PER_PIXEL;\n   56  static const uint kLightSamplesPerVertex = LIGHT_SAMPLES_PER_VERTEX;\n   57  static const uint kMaxBounces = MAX_BOUNCES;\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/Animation.cpp:\n  125      Keyframe interpolated;\n  126  \n  127:     // Compute index of adjacent frame including optional warping.\n  128      auto adjacentFrame = [] (const Channel& c, size_t frame, int32_t offset = 1)\n  129      {\n  130          size_t count = c.keyframes.size();\n  131          if ((int64_t)frame + offset < 0) frame += count;\n  132:         return c.enableWarping ? (frame + offset) % count : std::min(frame + offset, count - 1);\n  133      };\n  134  \n  ...\n  142  \n  143          double segmentDuration = k1.time - k0.time;\n  144:         if (c.enableWarping && segmentDuration < 0.0) segmentDuration += mDurationInSeconds;\n  145          float t = (float)clamp(segmentDuration > 0.0 ? (time - k0.time) / segmentDuration : 1.0, 0.0, 1.0);\n  146  \n  ...\n  160  \n  161          double segmentDuration = k2.time - k1.time;\n  162:         if (c.enableWarping && segmentDuration < 0.0) segmentDuration += mDurationInSeconds;\n  163          float t = (float)clamp(segmentDuration > 0.0 ? (time - k1.time) / segmentDuration : 1.0, 0.0, 1.0);\n  164  \n  ...\n  261  }\n  262  \n  263: void Animation::setInterpolationMode(uint32_t channelID, InterpolationMode mode, bool enableWarping)\n  264  {\n  265      assert(channelID < mChannels.size());\n  266      mChannels[channelID].interpolationMode = mode;\n  267:     mChannels[channelID].enableWarping = enableWarping;\n  268  }\n  269  \n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/Animation.h:\n   89      bool doesKeyframeExists(uint32_t channelID, double time) const;\n   90  \n   91:     /** Set the interpolation mode and enable/disable warping for a given channel.\n   92      */\n   93:     void setInterpolationMode(uint32_t channelID, InterpolationMode mode, bool enableWarping);\n   94  \n   95      /** Run the animation\n   ..\n  108      struct Channel\n  109      {\n  110:         Channel(uint32_t matrixID, InterpolationMode interpolationMode = InterpolationMode::Linear, bool enableWarping = true)\n  111              : matrixID(matrixID)\n  112              , interpolationMode(interpolationMode)\n  113:             , enableWarping(enableWarping)\n  114          {};\n  115  \n  116          uint32_t matrixID;\n  117          InterpolationMode interpolationMode;\n  118:         bool enableWarping;\n  119          std::vector<Keyframe> keyframes;\n  120          mutable size_t lastKeyframeUsed = 0;\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/AnimationController.cpp:\n   53      mpPrevWorldMatricesBuffer = Buffer::createStructured(mpDevice, sizeof(float4), float4Count, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n   54      mpPrevWorldMatricesBuffer->setName(\"AnimationController::mpPrevWorldMatricesBuffer\");\n   55:     mpInvTransposeWorldMatricesBuffer = Buffer::createStructured(mpDevice, sizeof(float4), float4Count, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n   56:     mpInvTransposeWorldMatricesBuffer->setName(\"AnimationController::mpInvTransposeWorldMatricesBuffer\");\n   57      createSkinningPass(staticVertexData, dynamicVertexData);\n   58  }\n   ..\n  134      }\n  135      mpWorldMatricesBuffer->setBlob(mGlobalMatrices.data(), 0, mpWorldMatricesBuffer->getSize());\n  136:     mpInvTransposeWorldMatricesBuffer->setBlob(mInvTransposeGlobalMatrices.data(), 0, mpInvTransposeWorldMatricesBuffer->getSize());\n  137  }\n  138  \n  ...\n  142      bool usePrev = mEnabled && hasAnimations();\n  143      pBlock->setBuffer(kPreviousFrameWorldMatrices, usePrev ? mpPrevWorldMatricesBuffer : mpWorldMatricesBuffer);\n  144:     pBlock->setBuffer(kInverseTransposeWorldMatrices, mpInvTransposeWorldMatricesBuffer);\n  145  }\n  146  \n  ...\n  184          mpSkinningMatricesBuffer = Buffer::createStructured(pDevice, sizeof(float4), float4Count, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  185          mpSkinningMatricesBuffer->setName(\"AnimationController::mpSkinningMatricesBuffer\");\n  186:         mpInvTransposeSkinningMatricesBuffer = Buffer::createStructured(pDevice, sizeof(float4), float4Count, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  187:         mpInvTransposeSkinningMatricesBuffer->setName(\"AnimationController::mpInvTransposeSkinningMatricesBuffer\");\n  188          block[\"boneMatrices\"].setBuffer(mpSkinningMatricesBuffer);\n  189:         block[\"inverseTransposeBoneMatrices\"].setBuffer(mpInvTransposeSkinningMatricesBuffer);\n  190:         block[\"inverseTransposeWorldMatrices\"].setBuffer(mpInvTransposeWorldMatricesBuffer);\n  191          block[\"worldMatrices\"].setBuffer(mpWorldMatricesBuffer);\n  192  \n  ...\n  198      if (!mpSkinningPass) return;\n  199      mpSkinningMatricesBuffer->setBlob(mSkinningMatrices.data(), 0, mpSkinningMatricesBuffer->getSize());\n  200:     mpInvTransposeSkinningMatricesBuffer->setBlob(mInvTransposeSkinningMatrices.data(), 0, mpInvTransposeSkinningMatricesBuffer->getSize());\n  201      mpSkinningPass->execute(pContext, mSkinningDispatchSize, 1, 1);\n  202  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Animation/AnimationController.h:\n  119      Buffer::SharedPtr mpWorldMatricesBuffer;\n  120      Buffer::SharedPtr mpPrevWorldMatricesBuffer;\n  121:     Buffer::SharedPtr mpInvTransposeWorldMatricesBuffer;\n  122  \n  123      // Skinning\n  ...\n  130  \n  131      Buffer::SharedPtr mpSkinningMatricesBuffer;\n  132:     Buffer::SharedPtr mpInvTransposeSkinningMatricesBuffer;\n  133      void initLocalMatrices();\n  134  };\n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/Camera.cpp:\n   73      if (firstFrame) mPrevData = mData;\n   74  \n   75:     // Keep copies of the transforms used for the previous frame. We need these for computing motion vectors etc.\n   76      mData.prevViewProjMatNoJitter = mPrevData.viewProjMatNoJitter;\n   77  \n   ..\n  154  \n  155          // Build jitter matrix\n  156:         // (jitterX and jitterY are expressed as subpixel quantities divided by the screen resolution\n  157:         //  for instance to apply an offset of half pixel along the X axis we set jitterX = 0.5f / Width)\n  158          glm::mat4 jitterMat(1.0f, 0.0f, 0.0f, 0.0f,\n  159              0.0f, 1.0f, 0.0f, 0.0f,\n  ...\n  294  }\n  295  \n  296: float Camera::computeScreenSpacePixelSpreadAngle(const uint32_t winHeightPixels) const\n  297  {\n  298      const float FOVrad = focalLengthToFovY(getFocalLength(), Camera::kDefaultFrameHeight);\n  299:     const float angle = std::atan(2.0f * std::tan(FOVrad * 0.5f) / winHeightPixels);\n  300      return angle;\n  301  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/Camera.cpp.bak:\n   68      if (firstFrame) mPrevData = mData;\n   69  \n   70:     // Keep copies of the transforms used for the previous frame. We need these for computing motion vectors etc.\n   71      mData.prevViewProjMatNoJitter = mPrevData.viewProjMatNoJitter;\n   72  \n   ..\n  128  \n  129          // Build jitter matrix\n  130:         // (jitterX and jitterY are expressed as subpixel quantities divided by the screen resolution\n  131:         //  for instance to apply an offset of half pixel along the X axis we set jitterX = 0.5f / Width)\n  132          glm::mat4 jitterMat(1.0f, 0.0f, 0.0f, 0.0f,\n  133              0.0f, 1.0f, 0.0f, 0.0f,\n  ...\n  251  }\n  252  \n  253: float Camera::computeScreenSpacePixelSpreadAngle(const uint32_t winHeightPixels) const {\n  254      const float FOVrad = focalLengthToFovY(getFocalLength(), Camera::kDefaultFrameHeight);\n  255:     const float angle = atanf(2.0f * tanf(FOVrad * 0.5f) / winHeightPixels);\n  256      return angle;\n  257  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/Camera.h:\n  183  \n  184      /** Set the camera's jitter.\n  185:         \\param[in] jitterX Subpixel offset along X axis divided by screen width (positive value shifts the image right).\n  186:         \\param[in] jitterY Subpixel offset along Y axis divided by screen height (positive value shifts the image up).\n  187      */\n  188      void setJitter(float jitterX, float jitterY);\n  ...\n  190      float getJitterY() const { return mData.jitterY; }\n  191  \n  192:     /** Compute pixel spread in screen space -- to be used with RayCones for texture level-of-detail.\n  193:         \\param[in] winHeightPixels Window height in pixels\n  194:         \\return the pixel spread angle in screen space\n  195      */\n  196:     float computeScreenSpacePixelSpreadAngle(const uint32_t winHeightPixels) const;\n  197  \n  198      /** Get the view matrix.\n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/Camera.slang:\n   49      float4x4 getViewProj() { return data.viewProjMat; }\n   50  \n   51:     /** Computes a camera ray for a given pixel assuming a pinhole camera model.\n   52          The camera jitter is taken into account to compute the sample position on the image plane.\n   53:         \\param[in] pixel Pixel coordinates with origin in top-left.\n   54:         \\param[in] frameDim Image plane dimensions in pixels.\n   55          \\return Returns the camera ray.\n   56      */\n   57:     CameraRay computeRayPinhole(uint2 pixel, uint2 frameDim)\n   58      {\n   59          CameraRay ray;\n   60  \n   61:         // Compute the normalized ray direction assuming a pinhole camera.\n   62          ray.origin = data.posW;\n   63:         ray.dir = normalize(computeNonNormalizedRayDirPinhole(pixel, frameDim));\n   64  \n   65          float invCos = 1.f / dot(normalize(data.cameraW), ray.dir);\n   ..\n   70      }\n   71  \n   72:     /** Computes the primary ray's direction, non-normalized assuming pinhole camera model.\n   73          The camera jitter is taken into account to compute the sample position on the image plane.\n   74:         \\param[in] pixel Pixel coordinates with origin in top-left.\n   75:         \\param[in] frameDim Image plane dimensions in pixels.\n   76          \\return Returns the non-normalized ray direction\n   77      */\n   78:     float3 computeNonNormalizedRayDirPinhole(uint2 pixel, uint2 frameDim)\n   79      {\n   80          // Compute sample position in screen space in [0,1] with origin at the top-left corner.\n   81:         // The camera jitter offsets the sample by +-0.5 pixels from the pixel center.\n   82:         float2 p = (pixel + float2(0.5f, 0.5f)) / frameDim + float2(-data.jitterX, data.jitterY);\n   83          float2 ndc = float2(2, -2) * p + float2(-1, 1);\n   84  \n   85:         // Compute the non-normalized ray direction assuming a pinhole camera.\n   86          return ndc.x * data.cameraU + ndc.y * data.cameraV + data.cameraW;\n   87      }\n   88  \n   89  \n   90:     /** Computes a camera ray for a given pixel assuming a thin-lens camera model.\n   91          The camera jitter is taken into account to compute the sample position on the image plane.\n   92:         \\param[in] pixel Pixel coordinates with origin in top-left.\n   93:         \\param[in] frameDim Image plane dimensions in pixels.\n   94          \\param[in] u Uniform 2D sample.\n   95          \\return Returns the camera ray.\n   96      */\n   97:     CameraRay computeRayThinlens(uint2 pixel, uint2 frameDim, float2 u)\n   98      {\n   99          CameraRay ray;\n  100  \n  101          // Sample position in screen space in [0,1] with origin at the top-left corner.\n  102:         // The camera jitter offsets the sample by +-0.5 pixels from the pixel center.\n  103:         float2 p = (pixel + float2(0.5f, 0.5f)) / frameDim + float2(-data.jitterX, data.jitterY);\n  104          float2 ndc = float2(2, -2) * p + float2(-1, 1);\n  105  \n\n/home/max/dev/Lava/src/Falcor/Scene/Camera/CameraData.slang:\n   51      float    farZ                   = 1000.0f;                  ///< Camera far plane.\n   52      float3   cameraV                = float3(0, 1, 0);          ///< Camera base vector V. Normalized it indicates the up image plane vector. The length is dependent on the FOV.\n   53:     float    jitterX                = 0.0f;                     ///< Eventual camera jitter along the x axis expressed as a subpixel offset divided by screen width (positive value shifts the image right).\n   54      float3   cameraW                = float3(1, 0, 0);          ///< Camera base vector W. Normalized it indicates the forward direction. The length is the camera focal distance.\n   55:     float    jitterY                = 0.0f;                     ///< Eventual camera jitter along the y axis expressed as a subpixel offset divided by screen height (positive value shifts the image up).\n   56  \n   57      float    frameHeight            = 24.0f;                    ///< Camera film frame height in mm. 24 is the height of a 35mm film\n\n/home/max/dev/Lava/src/Falcor/Scene/Importers/AssimpImporter.cpp:\n   31  #include \"assimp/scene.h\"\n   32  #include \"assimp/pbrmaterial.h\"\n   33: #include \"AssimpImporter.h\"\n   34  #include \"Falcor/Utils/StringUtils.h\"\n   35  #include \"Falcor/Utils/Timing/TimeReport.h\"\n   36: #include \"Falcor/Core/API/Device.h\"\n   37  #include \"Falcor/Scene/SceneBuilder.h\"\n   38  #include \"Falcor/Scene/Importer.h\"\n   ..\n   43  namespace\n   44  {\n   45:     // Global camera animation interpolation and warping configuration.\n   46      // Assimp does not provide enough information to determine this from data.\n   47      static const Animation::InterpolationMode kCameraInterpolationMode = Animation::InterpolationMode::Linear;\n   48:     static const bool kCameraEnableWarping = true;\n   49  \n   50      using BoneMeshMap = std::map<std::string, std::vector<uint32_t>>;\n   ..\n   92      }\n   93  \n   94:     /** Mapping from ASSIMP to Falcor texture type.\n   95      */\n   96:     struct TextureMapping\n   97      {\n   98          aiTextureType aiType;\n   ..\n  101      };\n  102  \n  103:     /** Mapping tables for different import modes.\n  104      */\n  105:     static const std::vector<TextureMapping> kTextureMappings[3] =\n  106      {\n  107:         // Default mappings\n  108          {\n  109              { aiTextureType_DIFFUSE, 0, Material::TextureSlot::BaseColor },\n  ...\n  113              { aiTextureType_AMBIENT, 0, Material::TextureSlot::Occlusion },\n  114          },\n  115:         // OBJ mappings\n  116          {\n  117              { aiTextureType_DIFFUSE, 0, Material::TextureSlot::BaseColor },\n  ...\n  123              { aiTextureType_DISPLACEMENT, 0, Material::TextureSlot::Normal },\n  124          },\n  125:         // GLTF2 mappings\n  126          {\n  127              { aiTextureType_DIFFUSE, 0, Material::TextureSlot::BaseColor },\n  ...\n  308                      pCamera->setNodeID(nodeID);\n  309                      pCamera->setHasAnimation(true);\n  310:                     data.builder.setNodeInterpolationMode(nodeID, kCameraInterpolationMode, kCameraEnableWarping);\n  311                  }\n  312              }\n  ...\n  536              assert(indexList.size() <= std::numeric_limits<uint32_t>::max());\n  537              mesh.indexCount = (uint32_t)indexList.size();\n  538:             mesh.pIndices = indexList.data();\n  539  \n  540              // Vertices\n  ...\n  731          assert(pDevice);\n  732  \n  733:         const auto& textureMappings = kTextureMappings[int(importMode)];\n  734  \n  735:         for (const auto& source : textureMappings)\n  736          {\n  737              // Skip if texture of requested type is not available\n  ...\n 1022  }  // namespace anon\n 1023  \n 1024: bool AssimpImporter::import(const std::string& filename, SceneBuilder& builder, const SceneBuilder::InstanceMatrices& instances, const Dictionary& dict)\n 1025  {\n 1026      auto pDevice = builder.device();\n ....\n 1127  \n 1128  REGISTER_IMPORTER(\n 1129:     AssimpImporter,\n 1130      Importer::ExtensionList({\n 1131          \"fbx\",\n\n/home/max/dev/Lava/src/Falcor/Scene/Importers/AssimpImporter.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FACLOR_SCENE_IMPORTERS_ASSIMPIMPORTER_H_\n   29: #define SRC_FACLOR_SCENE_IMPORTERS_ASSIMPIMPORTER_H_\n   30  \n   31  #include \"Falcor/Scene/SceneBuilder.h\"\n   ..\n   36  class Device;\n   37  \n   38: class dlldecl AssimpImporter\n   39  {\n   40  public:\n   41      static bool import(const std::string& filename, SceneBuilder& builder, const SceneBuilder::InstanceMatrices& instances, const Dictionary& dict);\n   42  private:\n   43:     AssimpImporter() = default;\n   44:     AssimpImporter(const AssimpImporter&) = delete;\n   45:     void operator=(const AssimpImporter&) = delete;\n   46  \n   47      std::shared_ptr<Device>\t\tmpDeivce;\n   ..\n   50  }  // namespace Falcor\n   51  \n   52: #endif  // SRC_FACLOR_SCENE_IMPORTERS_ASSIMPIMPORTER_H_\n   53  \n\n/home/max/dev/Lava/src/Falcor/Scene/Importers/PythonImporter.cpp:\n   35  \n   36  #include \"Falcor/stdafx.h\"\n   37: #include \"Falcor/Core/API/Device.h\"\n   38  #include \"Falcor/Scene/Importer.h\"\n   39  #include \"PythonImporter.h\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Importers/SceneImporter.cpp:\n   36  #include \"Falcor/stdafx.h\"\n   37  #include \"SceneImporter.h\"\n   38: #include \"rapidjson/document.h\"\n   39: #include \"rapidjson/error/en.h\"\n   40: #include \"Falcor/Core/API/Device.h\"\n   41  #include \"Falcor/Scene/Importer.h\"\n   42  #include \"glm/gtx/euler_angles.hpp\"\n   ..\n  123  \n  124  private:\n  125:     bool parseVersion(const rapidjson::Value& jsonVal);\n  126:     bool parseSceneUnit(const rapidjson::Value& jsonVal);\n  127:     bool parseModels(const rapidjson::Value& jsonVal);\n  128:     bool parseLights(const rapidjson::Value& jsonVal);\n  129:     bool parseLightProbes(const rapidjson::Value& jsonVal);\n  130:     bool parseCameras(const rapidjson::Value& jsonVal);\n  131:     bool parseCamera(const rapidjson::Value& jsonVal);\n  132:     bool parseAmbientIntensity(const rapidjson::Value& jsonVal);\n  133:     bool parseActiveCamera(const rapidjson::Value& jsonVal);\n  134:     bool parseCameraSpeed(const rapidjson::Value& jsonVal);\n  135:     bool parseLightingScale(const rapidjson::Value& jsonVal);\n  136:     bool parsePaths(const rapidjson::Value& jsonVal);\n  137:     bool parseUserDefinedSection(const rapidjson::Value& jsonVal);\n  138:     bool parseActivePath(const rapidjson::Value& jsonVal);\n  139:     bool parseIncludes(const rapidjson::Value& jsonVal);\n  140:     bool parseEnvMap(const rapidjson::Value& jsonVal);\n  141  \n  142      bool topLevelLoop();\n  ...\n  144      bool loadIncludeFile(const std::string& Include);\n  145  \n  146:     std::vector<glm::mat4> parseModelInstances(const rapidjson::Value& jsonVal);\n  147:     bool createModel(const rapidjson::Value& jsonModel);\n  148:     bool createPointLight(const rapidjson::Value& jsonLight);\n  149:     bool createDirLight(const rapidjson::Value& jsonLight);\n  150:     bool createDistantLight(const rapidjson::Value& jsonLight);\n  151:     bool createAnalyticAreaLight(const rapidjson::Value& jsonLight);\n  152  \n  153      bool error(const std::string& msg);\n  154  \n  155      template<uint32_t VecSize>\n  156:     bool getFloatVec(const rapidjson::Value& jsonVal, const std::string& desc, float vec[VecSize]);\n  157:     bool getFloatVecAnySize(const rapidjson::Value& jsonVal, const std::string& desc, std::vector<float>& vec);\n  158:     rapidjson::Document mJDoc;\n  159      SceneBuilder& mBuilder;\n  160      std::string mFilename;\n  ...\n  190  \n  191  template<uint32_t VecSize>\n  192: bool SceneImporterImpl::getFloatVec(const rapidjson::Value& jsonVal, const std::string& desc, float vec[VecSize])\n  193  {\n  194      if (jsonVal.IsArray() == false)\n  ...\n  215  }\n  216  \n  217: bool SceneImporterImpl::getFloatVecAnySize(const rapidjson::Value& jsonVal, const std::string& desc, std::vector<float>& vec)\n  218  {\n  219      if (jsonVal.IsArray() == false)\n  ...\n  235  }\n  236  \n  237: std::vector<glm::mat4> SceneImporterImpl::parseModelInstances(const rapidjson::Value& jsonVal)\n  238  {\n  239      struct ModelInstance\n  ...\n  282          T[3] = float4(instances[i].position, 1);\n  283          glm::mat4 S = glm::scale(instances[i].scaling);\n  284:         glm::mat4 R = glm::yawPitchRoll(instances[i].rotation[0], instances[i].rotation[1], instances[i].rotation[2]);\n  285          matrices[i] = T * R * S;\n  286      }\n  ...\n  289  }\n  290  \n  291: bool SceneImporterImpl::createModel(const rapidjson::Value& jsonModel)\n  292  {\n  293      // Model must have at least a filename\n  ...\n  386  }\n  387  \n  388: bool SceneImporterImpl::parseModels(const rapidjson::Value& jsonVal)\n  389  {\n  390      if (jsonVal.IsArray() == false)\n  ...\n  404  }\n  405  \n  406: bool SceneImporterImpl::createDirLight(const rapidjson::Value& jsonLight)\n  407  {\n  408      auto pDirLight = DirectionalLight::create();\n  ...\n  457  }\n  458  \n  459: bool SceneImporterImpl::createDistantLight(const rapidjson::Value& jsonLight)\n  460  {\n  461      auto pDistLight = DistantLight::create();\n  ...\n  510  }\n  511  \n  512: bool SceneImporterImpl::createPointLight(const rapidjson::Value& jsonLight)\n  513  {\n  514      auto pPointLight = PointLight::create();\n  ...\n  596  \n  597  // Support for analytic area lights\n  598: bool SceneImporterImpl::createAnalyticAreaLight(const rapidjson::Value& jsonLight)\n  599  {\n  600      // Get the type of area light.\n  ...\n  677      pAreaLight->setScaling(scaling);\n  678      glm::mat4 translationMtx = glm::translate(glm::mat4(), translation);\n  679:     glm::mat4 rotationMtx = glm::yawPitchRoll(rotation[0], rotation[1], rotation[2]);\n  680      //glm::mat4 scalingMtx = glm::scale(glm::mat4(), scaling);\n  681      glm::mat4 composite = translationMtx * rotationMtx;\n  ...\n  686  }\n  687  \n  688: bool SceneImporterImpl::parseLights(const rapidjson::Value& jsonVal)\n  689  {\n  690      if (jsonVal.IsArray() == false)\n  ...\n  740  }\n  741  \n  742: bool SceneImporterImpl::parseLightProbes(const rapidjson::Value& jsonVal)\n  743  {\n  744      if (jsonVal.IsArray() == false)\n  ...\n  826  }\n  827  \n  828: bool SceneImporterImpl::parsePaths(const rapidjson::Value& jsonVal)\n  829  {\n  830      if (jsonVal.IsArray() == false)\n  ...\n  837  }\n  838  \n  839: bool SceneImporterImpl::parseActivePath(const rapidjson::Value& jsonVal)\n  840  {\n  841      logWarning(\"fscene paths are deprecated, please use Maya or other DCC tools to create a path directly in the model file\");\n  ...\n  843  }\n  844  \n  845: bool SceneImporterImpl::parseCamera(const rapidjson::Value& jsonCamera)\n  846  {\n  847      auto pCamera = Camera::create();\n  ...\n  951  }\n  952  \n  953: bool SceneImporterImpl::parseCameras(const rapidjson::Value& jsonVal)\n  954  {\n  955      if (jsonVal.IsArray() == false)\n  ...\n  975          // Load the file\n  976          std::string jsonData = readFile(fullpath);\n  977:         rapidjson::StringStream JStream(jsonData.c_str());\n  978  \n  979          // Get the file directory\n  ...\n  988              size_t line;\n  989              line = std::count(jsonData.begin(), jsonData.begin() + mJDoc.GetErrorOffset(), '\\n');\n  990:             return error(std::string(\"JSON Parse error in line \") + std::to_string(line) + \". \" + rapidjson::GetParseError_En(mJDoc.GetParseError()));\n  991          }\n  992  \n  ...\n 1004  }\n 1005  \n 1006: bool SceneImporterImpl::parseAmbientIntensity(const rapidjson::Value& jsonVal)\n 1007  {\n 1008      logWarning(\"SceneImporterImpl: Global ambient term is no longer supported. Ignoring value.\");\n ....\n 1010  }\n 1011  \n 1012: bool SceneImporterImpl::parseLightingScale(const rapidjson::Value& jsonVal)\n 1013  {\n 1014      if (jsonVal.IsNumber() == false)\n ....\n 1021  }\n 1022  \n 1023: bool SceneImporterImpl::parseCameraSpeed(const rapidjson::Value& jsonVal)\n 1024  {\n 1025      if (jsonVal.IsNumber() == false)\n ....\n 1033  }\n 1034  \n 1035: bool SceneImporterImpl::parseActiveCamera(const rapidjson::Value& jsonVal)\n 1036  {\n 1037      if (jsonVal.IsString() == false)\n ....\n 1045  }\n 1046  \n 1047: bool SceneImporterImpl::parseVersion(const rapidjson::Value& jsonVal)\n 1048  {\n 1049      // Ignore this\n ....\n 1051  }\n 1052  \n 1053: bool SceneImporterImpl::parseSceneUnit(const rapidjson::Value& jsonVal)\n 1054  {\n 1055      if (jsonVal.IsNumber() == false)\n ....\n 1062  }\n 1063  \n 1064: bool SceneImporterImpl::parseEnvMap(const rapidjson::Value& jsonVal)\n 1065  {\n 1066      if (jsonVal.IsString() == false)\n ....\n 1082  }\n 1083  \n 1084: bool SceneImporterImpl::parseUserDefinedSection(const rapidjson::Value& jsonVal)\n 1085  {\n 1086      if (jsonVal.IsObject() == false)\n ....\n 1108  }\n 1109  \n 1110: bool SceneImporterImpl::parseIncludes(const rapidjson::Value& jsonVal)\n 1111  {\n 1112      if (jsonVal.IsArray() == false)\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/Light.cpp:\n  239  float PointLight::getPower() const\n  240  {\n  241:     return luminance(mData.intensity) * 4.f * (float)M_PI;\n  242  }\n  243  \n  ...\n  249      widget.direction(\"Direction\", mData.dirW);\n  250  \n  251:     if (widget.var(\"Opening Angle\", mData.openingAngle, 0.f, (float)M_PI))\n  252      {\n  253          setOpeningAngle(mData.openingAngle);\n  254      }\n  255:     if (widget.var(\"Penumbra Width\", mData.penumbraAngle, 0.f, (float)M_PI))\n  256      {\n  257          setPenumbraAngle(mData.penumbraAngle);\n  ...\n  261  void PointLight::setOpeningAngle(float openingAngle)\n  262  {\n  263:     openingAngle = glm::clamp(openingAngle, 0.f, (float)M_PI);\n  264      if (openingAngle == mData.openingAngle) return;\n  265  \n  ...\n  294  {\n  295      mData.dirW = float3(0.f, -1.f, 0.f);\n  296:     setAngle(0.5f * 0.53f * (float)M_PI / 180.f);   // Approximate sun half-angle\n  297      update();\n  298  }\n  ...\n  309      }\n  310  \n  311:     if (widget.var(\"Half-angle\", mAngle, 0.f, (float)M_PI_2))\n  312      {\n  313          setAngle(mAngle);\n  ...\n  318  void DistantLight::setAngle(float angle)\n  319  {\n  320:     mAngle = glm::clamp(angle, 0.f, (float)M_PI_2);\n  321  \n  322      mData.cosSubtendedAngle = std::cos(mAngle);\n  ...\n  375  float AnalyticAreaLight::getPower() const\n  376  {\n  377:     return luminance(mData.intensity) * (float)M_PI * mData.surfaceArea;\n  378  }\n  379  \n  ...\n  401          float rz = glm::length(mData.transMat * float4(0.0f, 0.0f, 1.0f, 0.0f));\n  402  \n  403:         mData.surfaceArea = 4.0f * (float)M_PI * std::pow(std::pow(rx * ry, 1.6f) + std::pow(ry * rz, 1.6f) + std::pow(rx * rz, 1.6f) / 3.0f, 1.0f / 1.6f);\n  404      }\n  405      break;\n  ...\n  410          float ry = glm::length(mData.transMat * float4(0.0f, 1.0f, 0.0f, 0.0f));\n  411  \n  412:         mData.surfaceArea = (float)M_PI * rx * ry;\n  413      }\n  414      break;\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/Light.h:\n  132      static const size_t kDataSize = sizeof(LightData);\n  133  \n  134:     /* UI callbacks for keeping the intensity in-sync */\n  135      float3 getColorForUI();\n  136      void setColorFromUI(const float3& uiColor);\n  ...\n  177      const float3& getWorldDirection() const { return mData.dirW; }\n  178  \n  179:     /** Get total light power (needed for light picking)\n  180      */\n  181      float getPower() const override { return 0.f; }\n  ...\n  202      void renderUI(Gui::Widgets& widget) override;\n  203  \n  204:     /** Get total light power (needed for light picking)\n  205      */\n  206      float getPower() const override;\n  ...\n  276      float3 getScaling() const { return mScaling; }\n  277  \n  278:     /** Get total light power (needed for light picking)\n  279      */\n  280      float getPower() const override;\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightData.slang:\n   40  #endif\n   41  {\n   42:     Point,          ///< Point light source, can be a spot light if its opening angle is < 2pi\n   43      Directional,    ///< Directional light source\n   44      Rect,           ///< Quad shaped area light source\n   ..\n   62      float    pad3;\n   63  \n   64:     float    openingAngle       = float(M_PI);      ///< For point (spot) light: Opening half-angle of a spot light cut-off, pi by default (full sphere).\n   65:     float    cosOpeningAngle    = -1.f;             ///< For point (spot) light: cos(openingAngle), -1 by default because openingAngle is pi by default\n   66      float    cosSubtendedAngle  = 0.9999893f;       ///< For distant light; cosine of the half-angle subtended by the light. Default corresponds to the sun as viewed from earth\n   67      float    penumbraAngle      = 0.f;              ///< For point (spot) light: Opening half-angle of penumbra region in radians, usually does not exceed openingAngle. 0.f by default, meaning a spot light with hard cut-off\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbe.cpp:\n   30  #include \"RenderGraph/BasePasses/FullScreenPass.h\"\n   31  #include \"Utils/UI/Gui.h\"\n   32: #include \"Core/API/RenderContext.h\"\n   33: #include \"Core/API/Device.h\"\n   34  \n   35  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbe.h:\n   30  \n   31  #include \"LightProbeData.slang\"\n   32: #include \"Falcor/Core/API/Texture.h\"\n   33: #include \"Falcor/Core/API/Sampler.h\"\n   34  \n   35  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang:\n   59  \n   60      float r = sqrt(u1);\n   61:     float phi = u2 * M_2PI;\n   62  \n   63      float3 L = float3(r * cos(phi),\n   ..\n   72      float a = roughness * roughness;\n   73  \n   74:     float phi = M_2PI * u.x;\n   75      float cosTheta = sqrt((1 - u.y) / (1 + (a * a - 1) * u.y));\n   76      float sinTheta = sqrt(1 - cosTheta * cosTheta);\n   ..\n  147  \n  148              // D term GGX\n  149:             float pdf = (evalGGX(roughness, NdotH) * M_1_PI) * NdotH / (4 * LdotH);\n  150  \n  151              float omegaS = 1 / (gSampleCount * pdf);\n  152:             float omegaP = 4.0 * M_PI / (6 * cubeWidth * cubeWidth);\n  153              float mipLevel = clamp(0.5 * log2(omegaS / omegaP), 0, mipCount);\n  154  \n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   33  #include \"Experimental/Scene/Material/BxDFConfig.slangh\"\n   34  \n   35: #define _PI 3.14159265359\n   36  \n   37  import Scene.ShadingData;\n   ..\n   66      float ss = 1.25 * (Fss * (1. / (NdotL + NdotV) - .5) + .5);\n   67      \n   68:     return (1./PI) * ss * material.baseColor;\n   69  }\n   70  \n   71  \n   72  float3 evalDiffuseDisneyBrdf(ShadingData sd, LightSample ls) {\n   73:     return disneyDiffuseFresnel(sd.NdotV, ls.NdotL, ls.LdotH, sd.linearRoughness) * M_1_PI * sd.diffuse.rgb;\n   74  }\n   75  \n   ..\n   77  */\n   78  float3 evalDiffuseLambertBrdf(ShadingData sd, LightSample ls) {\n   79:     return sd.diffuse.rgb * (1 / M_PI);\n   80  }\n   81  \n   ..\n   91      float lightScatter = fresnelSchlick(fd0, fd90, ls.NdotL).r;\n   92      float viewScatter = fresnelSchlick(fd0, fd90, sd.NdotV).r;\n   93:     return (viewScatter * lightScatter * energyFactor * M_1_PI) * sd.diffuse.rgb;\n   94  }\n   95  \n   ..\n  132      float G = evalSmithGGX(ls.NdotL, sd.NdotV, ggxAlpha);\n  133      float3 F = fresnelSchlick(sd.specular, 1, saturate(ls.LdotH));\n  134:     return D * G * F * M_1_PI;\n  135  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/Material.cpp:\n   29  #include \"Material.h\"\n   30  \n   31: #include \"Falcor/Core/API/SparseResourceManager.h\"\n   32  #include \"Core/Program/GraphicsProgram.h\"\n   33  #include \"Core/Program/ProgramVars.h\"\n   ..\n  193      if (priority > maxPriority)\n  194      {\n  195:         logWarning(\"Requested nested priority \" + std::to_string(priority) + \" for material '\" + mName + \"' is out of range. Clamping to \" + std::to_string(maxPriority) + \".\");\n  196          priority = maxPriority;\n  197      }\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/Material.h:\n   30  \n   31  #include \"Falcor/Core/Framework.h\"\n   32: #include \"Falcor/Core/API/Texture.h\"\n   33: #include \"Falcor/Core/API/Sampler.h\"\n   34  \n   35  #include \"MaterialData.slang\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/MaterialData.slang:\n   65      \n   66      float    metalness              = 0.0;\n   67:     float    anisotropic;\n   68      float    sheen;\n   69      float    subsurface;\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleData.slang:\n   90  \n   91  #ifndef HOST_CODE\n   92: uint getParticleIndex(uint groupIDx, uint threadsPerGroup, uint groupIndex)\n   93  {\n   94:     return groupIDx * threadsPerGroup + groupIndex;\n   95  }\n   96  #endif\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleEmit.cs.slang:\n   39  \n   40  [numthreads(kParticleEmitThreads, 1, 1)]\n   41: void main(int3 groupID : SV_GroupID, int3 threadID : SV_GroupThreadID)\n   42  {\n   43:     uint index = kParticleEmitThreads * groupID.y + threadID.x;\n   44      uint numAliveParticles = (uint)(numAlive.Load(0));\n   45      //make sure this corresponds to an emitted particle, and isnt a redundant thread\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleSimulate.cs.slang:\n   75  \n   76  [numthreads(numThreads, 1, 1)]\n   77: void main(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)\n   78  {\n   79:     uint index = getParticleIndex(groupID.x, numThreads, groupIndex);\n   80      //check if the particle is alive\n   81      if (particlePool[index].life > 0)\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleSort.cs.slang:\n   40  \n   41  [numthreads(kParticleSortThreads, 1, 1)]\n   42: void main(uint3 groupID : SV_GroupID, uint groupIndex : SV_GroupIndex)\n   43  {\n   44:     int threadIndex = (int)getParticleIndex(groupID.x, kParticleSortThreads, groupIndex);\n   45      //set size used to determine whether a subset of the data should be ascending or descending\n   46      for (uint setSize = 2; setSize <= iterationCounter[0]; setSize *= 2)\n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp:\n   28  #include \"Falcor/stdafx.h\"\n   29  #include \"ParticleSystem.h\"\n   30: #include \"Falcor/Core/API/RenderContext.h\"\n   31  #include \"Falcor/Utils/UI/Gui.h\"\n   32  #include \"glm/gtc/random.hpp\"\n   ..\n   37      const char* ParticleSystem::kSortShader = \"Scene/ParticleSystem/ParticleSort.cs.slang\";\n   38      const char* ParticleSystem::kEmitShader = \"Scene/ParticleSystem/ParticleEmit.cs.slang\";\n   39:     const char* ParticleSystem::kDefaultPixelShader = \"Scene/ParticleSystem/ParticleTexture.ps.slang\";\n   40      const char* ParticleSystem::kDefaultSimulateShader = \"Scene/ParticleSystem/ParticleSimulate.cs.slang\";\n   41  \n   42      ParticleSystem::SharedPtr ParticleSystem::create(RenderContext* pCtx, uint32_t maxParticles, uint32_t maxEmitPerFrame,\n   43:         std::string drawPixelShader, std::string simulateComputeShader, bool sorted)\n   44      {\n   45          return ParticleSystem::SharedPtr(\n   46:             new ParticleSystem(pCtx, maxParticles, maxEmitPerFrame, drawPixelShader, simulateComputeShader, sorted));\n   47      }\n   48  \n   49      ParticleSystem::ParticleSystem(RenderContext* pCtx, uint32_t maxParticles, uint32_t maxEmitPerFrame,\n   50:         std::string drawPixelShader, std::string simulateComputeShader, bool sorted)\n   51      {\n   52  \n   ..\n   81          //draw shader\n   82          GraphicsProgram::Desc d(kVertexShader);\n   83:         d.vsEntry(\"main\").addShaderLibrary(drawPixelShader).psEntry(\"main\");\n   84          GraphicsProgram::SharedPtr pDrawProgram = GraphicsProgram::create(device, d, defineList);\n   85  \n   ..\n  106          // Indirect args\n  107          Resource::BindFlags indirectBindFlags = Resource::BindFlags::IndirectArg | Resource::BindFlags::UnorderedAccess;\n  108:         mpIndirectArgs = Buffer::createStructured(device, pSimulateCs.get(), \"drawArgs\", 1, indirectBindFlags);\n  109  \n  110          //initialize the first member of the args, vert count per instance, to be 4 for particle billboards\n  111          uint32_t vertexCountPerInstance = 4;\n  112:         mpIndirectArgs->setBlob(&vertexCountPerInstance, 0, sizeof(uint32_t));\n  113  \n  114          //Vars\n  ...\n  123          mSimulateResources.pVars->setBuffer(\"deadList\", mpDeadList);\n  124          mSimulateResources.pVars->setBuffer(\"particlePool\", mpParticlePool);\n  125:         mSimulateResources.pVars->setBuffer(\"drawArgs\", mpIndirectArgs);\n  126          mSimulateResources.pVars->setBuffer(\"aliveList\", mpAliveList);\n  127          mSimulateResources.pVars->setBuffer(\"numDead\", mpDeadList->getUAVCounter());\n  ...\n  229          //particle draw uses many of render context's existing state's properties\n  230          mDrawResources.pState->setFbo(pDst);\n  231:         pCtx->drawIndirect(mDrawResources.pState.get(), mDrawResources.pVars.get(), 1, mpIndirectArgs.get(), 0, nullptr, 0);\n  232      }\n  233  \n\n/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem/ParticleSystem.h:\n   44          static const char* kSortShader;             ///< Filename for the sorting compute shader\n   45          static const char* kEmitShader;             ///< Filename for the emit compute shader\n   46:         static const char* kDefaultPixelShader;     ///< Filename for the default pixel shader\n   47          static const char* kDefaultSimulateShader;  ///< Filename for the particle update/simulation compute shader\n   48  \n   ..\n   52              \\params[in] pCtx The render context\n   53              \\params[in] maxParticles The max number of particles allowed at once, emits will be blocked if the system is maxxed out\n   54:             \\params[in] drawPixelShader The pixel shader used to draw the particles\n   55              \\params[in] simulateComputeShader The compute shader used to update the particles\n   56              \\params[in] sorted Whether or not the particles should be sorted by depth before render\n   57          */\n   58          static SharedPtr create(RenderContext* pCtx, uint32_t maxParticles, uint32_t maxEmitPerFrame,\n   59:             std::string drawPixelShader = kDefaultPixelShader,\n   60              std::string simulateComputeShader = kDefaultSimulateShader,\n   61              bool sorted = true);\n   ..\n  148          ParticleSystem() = delete;\n  149          ParticleSystem(RenderContext* pCtx, uint32_t maxParticles, uint32_t maxEmitPerFrame,\n  150:             std::string drawPixelShader, std::string simulateComputeShader, bool sorted);\n  151          void emit(RenderContext* pCtx, uint32_t num);\n  152  \n  ...\n  217          //for draw (0 - Verts Per Instance, 1 - Instance Count,\n  218          //2 - start vertex offset, 3 - start instance offset)\n  219:         Buffer::SharedPtr mpIndirectArgs;\n  220  \n  221          //Data for sorted systems\n\n/home/max/dev/Lava/src/Falcor/Scene/Raytracing.slang:\n   83      \\param[in] hitT Distance to hit point.\n   84      \\param[in,out] rayDiff The ray differential used as input and output.\n   85:     \\param[out] dUVdx The differential of the texture coordinates in pixel coordinate x.\n   86:     \\param[out] dUVdy The differential of the texture coordinates in pixel coordinate y.\n   87      \\return Interpolated vertex attributes.\n   88  */\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.cpp:\n  977      {\n  978          auto pMatricesBuffer = mpSceneBlock->getBuffer(\"worldMatrices\");\n  979:         const glm::mat4* matrices = (glm::mat4*)pMatricesBuffer->map(Buffer::MapType::Read); // #SCENEV2 This will cause the pipeline to flush and sync, but it's probably not too bad as this only happens once\n  980  \n  981          auto createBuffers = [&](const auto& drawClockwiseMeshes, const auto& drawCounterClockwiseMeshes)\n  ...\n 1087          }\n 1088  \n 1089:         // Calculate mapping from new mesh instance ID to existing instance index.\n 1090          // Here, just append existing instance ID's in order they appear in the mesh groups.\n 1091:         std::vector<size_t> instanceMapping;\n 1092          for (const auto& meshGroup : mMeshGroups)\n 1093          {\n ....\n 1097                  for (size_t idx : instanceList)\n 1098                  {\n 1099:                     instanceMapping.push_back(idx);\n 1100                  }\n 1101              }\n 1102          }\n 1103:         assert(instanceMapping.size() == mMeshInstanceData.size());\n 1104          {\n 1105              // Check that all indices exist\n 1106:             std::set<size_t> instanceIndices(instanceMapping.begin(), instanceMapping.end());\n 1107              assert(instanceIndices.size() == mMeshInstanceData.size());\n 1108          }\n 1109  \n 1110:         // Now reorder mMeshInstanceData based on the new mapping.\n 1111          // We'll make a copy of the existing data first, and the populate the array.\n 1112          std::vector<MeshInstanceData> prevInstanceData = mMeshInstanceData;\n 1113          for (size_t i = 0; i < mMeshInstanceData.size(); i++)\n 1114          {\n 1115:             assert(instanceMapping[i] < prevInstanceData.size());\n 1116:             mMeshInstanceData[i] = prevInstanceData[instanceMapping[i]];\n 1117          }\n 1118  \n 1119:         // Create mapping of meshes to their instances.\n 1120          mMeshIdToInstanceIds.clear();\n 1121          mMeshIdToInstanceIds.resize(mMeshDesc.size());\n ....\n 1133          const VertexBufferLayout::SharedConstPtr& pVbLayout = mpVao->getVertexLayout()->getBufferLayout(kStaticDataBufferIndex);\n 1134          const Buffer::SharedPtr& pVb = mpVao->getVertexBuffer(kStaticDataBufferIndex);\n 1135:         const Buffer::SharedPtr& pIb = mpVao->getIndexBuffer();\n 1136  \n 1137          assert(mMeshGroups.size() > 0);\n ....\n 1168  \n 1169                  // Set index data\n 1170:                 if (pIb)\n 1171                  {\n 1172:                     desc.Triangles.IndexBuffer = pIb->getGpuAddress() + (mesh.ibOffset * getFormatBytesPerBlock(mpVao->getIndexBufferFormat()));\n 1173                      desc.Triangles.IndexCount = mesh.indexCount;\n 1174                      desc.Triangles.IndexFormat = getDxgiFormat(mpVao->getIndexBufferFormat());\n ....\n 1195          // Add barriers for the VB and IB which will be accessed by the build.\n 1196          const Buffer::SharedPtr& pVb = mpVao->getVertexBuffer(kStaticDataBufferIndex);\n 1197:         const Buffer::SharedPtr& pIb = mpVao->getIndexBuffer();\n 1198:         pContext->resourceBarrier(pVb.get(), Resource::State::NonPixelShader);\n 1199:         if (pIb) pContext->resourceBarrier(pIb.get(), Resource::State::NonPixelShader);\n 1200  \n 1201          // On the first time, or if a full rebuild is necessary we will:\n ....\n 1246  \n 1247                  // Get prebuild info.\n 1248:                 GET_COM_INTERFACE(gpDevice->getApiHandle(), ID3D12Device5, pDevice5);\n 1249                  pDevice5->GetRaytracingAccelerationStructurePrebuildInfo(&inputs, &blas.prebuildInfo);\n 1250  \n ....\n 1412          assert(mpBlas);\n 1413          instanceDescs.clear();\n 1414:         uint32_t instanceContributionToHitGroupIndex = 0;\n 1415          uint32_t instanceId = 0;\n 1416  \n ....\n 1422              desc.AccelerationStructure = mpBlas->getGpuAddress() + mBlasData[i].blasByteOffset;\n 1423              desc.InstanceMask = 0xFF;\n 1424:             desc.InstanceContributionToHitGroupIndex = perMeshHitEntry ? instanceContributionToHitGroupIndex : 0;\n 1425:             instanceContributionToHitGroupIndex += rayCount * (uint32_t)meshList.size();\n 1426  \n 1427              // If multiple meshes are in a BLAS:\n ....\n 1435                  instanceId += (uint32_t)meshList.size();\n 1436  \n 1437:                 // Any instances of the mesh will get you the correct matrix, so just pick the first mesh then the first instance.\n 1438                  uint32_t matrixId = mMeshInstanceData[desc.InstanceID].globalMatrixID;\n 1439                  glm::mat4 transform4x4 = transpose(mpAnimationController->getGlobalMatrices()[matrixId]);\n ....\n 1496          {\n 1497              // Prebuild\n 1498:             GET_COM_INTERFACE(gpDevice->getApiHandle(), ID3D12Device5, pDevice5);\n 1499              pDevice5->GetRaytracingAccelerationStructurePrebuildInfo(&inputs, &mTlasPrebuildInfo);\n 1500              mpTlasScratch = Buffer::create(mpDevice, mTlasPrebuildInfo.ScratchDataSizeInBytes, Buffer::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n ....\n 1512          if (tlas.pTlas == nullptr)\n 1513          {\n 1514:             assert(tlas.pInstanceDescs == nullptr); // Instance desc should also be null if no TLAS\n 1515              tlas.pTlas = Buffer::create(mTlasPrebuildInfo.ResultDataMaxSizeInBytes, Buffer::BindFlags::AccelerationStructure, Buffer::CpuAccess::None);\n 1516:             tlas.pInstanceDescs = Buffer::create(mpDevice, (uint32_t)mInstanceDescs.size() * sizeof(D3D12_RAYTRACING_INSTANCE_DESC), Buffer::BindFlags::None, Buffer::CpuAccess::Write, mInstanceDescs.data());\n 1517          }\n 1518          // Else update instance descs and barrier TLAS buffers\n ....\n 1522              pContext->uavBarrier(tlas.pTlas.get());\n 1523              pContext->uavBarrier(mpTlasScratch.get());\n 1524:             tlas.pInstanceDescs->setBlob(mInstanceDescs.data(), 0, inputs.NumDescs * sizeof(D3D12_RAYTRACING_INSTANCE_DESC));\n 1525              asDesc.SourceAccelerationStructureData = tlas.pTlas->getGpuAddress(); // Perform the update in-place\n 1526          }\n 1527  \n 1528:         assert((inputs.NumDescs != 0) && tlas.pInstanceDescs->getApiHandle() && tlas.pTlas->getApiHandle() && mpTlasScratch->getApiHandle());\n 1529  \n 1530:         asDesc.Inputs.InstanceDescs = tlas.pInstanceDescs->getGpuAddress();\n 1531          asDesc.ScratchAccelerationStructureData = mpTlasScratch->getGpuAddress();\n 1532          asDesc.DestAccelerationStructureData = tlas.pTlas->getGpuAddress();\n ....\n 1537          // Create TLAS\n 1538          GET_COM_INTERFACE(pContext->getLowLevelData()->getCommandList(), ID3D12GraphicsCommandList4, pList4);\n 1539:         pContext->resourceBarrier(tlas.pInstanceDescs.get(), Resource::State::NonPixelShader);\n 1540          pList4->BuildRaytracingAccelerationStructure(&asDesc, 0, nullptr);\n 1541          pContext->uavBarrier(tlas.pTlas.get());\n ....\n 1546              D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc = {};\n 1547              srvDesc.ViewDimension = D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE;\n 1548:             srvDesc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;\n 1549              srvDesc.RaytracingAccelerationStructure.Location = tlas.pTlas->getGpuAddress();\n 1550  \n ....\n 1552              layout.addRange(DescriptorSet::Type::TextureSrv, 0, 1);\n 1553              DescriptorSet::SharedPtr pSet = DescriptorSet::create(mpDevice->getCpuDescriptorPool(), layout);\n 1554:             gpDevice->getApiHandle()->CreateShaderResourceView(nullptr, &srvDesc, pSet->getCpuHandle(0));\n 1555  \n 1556              ResourceWeakPtr pWeak = tlas.pTlas;\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.h:\n   32  \n   33  #include \"Falcor/Core/Framework.h\"\n   34: #include \"Falcor/Core/API/VAO.h\"\n   35  #include \"Falcor/Scene/Animation/Animatable.h\"\n   36  #include \"Falcor/Scene/Animation/Animation.h\"\n   ..\n  253      void gotoViewpoint(uint32_t index) { selectViewpoint(index); }\n  254  \n  255:     /** Returns true if there are saved viewpoints (used for dumping to config)\n  256      */\n  257      bool hasSavedViewpoints() { return mViewpoints.size() > 1; }\n  ...\n  603      // Scene Metadata (CPU Only)\n  604      std::vector<BoundingBox> mMeshBBs;                          ///< Bounding boxes for meshes (not instances)\n  605:     std::vector<std::vector<uint32_t>> mMeshIdToInstanceIds;    ///< Mapping of what instances belong to which mesh\n  606      BoundingBox mSceneBB;                                       ///< Bounding boxes of the entire scene\n  607      std::vector<bool> mMeshHasDynamicData;                      ///< Whether a Mesh has dynamic data, meaning it is skinned\n  ...\n  647          Buffer::SharedPtr pTlas;\n  648          ShaderResourceView::SharedPtr pSrv;             ///< Shader Resource View for binding the TLAS\n  649:         Buffer::SharedPtr pInstanceDescs;               ///< Buffer holding instance descs for the TLAS\n  650          UpdateMode updateMode = UpdateMode::Rebuild;    ///< Update mode this TLAS was created with.\n  651      };\n\n/home/max/dev/Lava/src/Falcor/Scene/Scene.slang:\n  484      }\n  485  \n  486:     /** Returns the estimated isoctropic curvature from vertex attributes for ray tracing.\n  487          \\param[in] meshInstanceID The mesh instance ID.\n  488          \\param[in] triangleIndex Index of the triangle in the given mesh.\n  489          \\return Estimated curvature.\n  490      */\n  491:     float computeCurvatureIsotropic(uint meshInstanceID, uint triangleIndex)\n  492      {\n  493          TriangleCurvature_Average tce = { };\n  ...\n  507      }\n  508  \n  509:     /** Returns the estimated isoctropic curvature from vertex attributes for ray tracing at the first hit point.\n  510          \\param[in] meshInstanceID The mesh instance ID.\n  511          \\param[in] triangleIndex Index of the triangle in the given mesh.\n  ...\n  513          \\return Estimated curvature.\n  514      */\n  515:     float computeCurvatureIsotropicFirstHit(uint meshInstanceID, uint triangleIndex, float3 rayDir)\n  516      {\n  517          TriangleCurvature_DirClosestDP tce = { rayDir };\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.cpp:\n   50      static std::vector<float4> generateTangents(const SceneBuilder::Mesh& mesh)\n   51      {\n   52:         if (!mesh.normals.pData || !mesh.positions.pData || !mesh.texCrds.pData || !mesh.pIndices)\n   53          {\n   54              logWarning(\"Can't generate tangent space. The mesh '\" + std::string(mesh.name) + \"' doesn't have positions/normals/texCrd/indices.\");\n   ..\n   67          MikkTSpaceWrapper wrapper(mesh);\n   68          SMikkTSpaceContext context = {};\n   69:         context.m_pInterface = &mikktspace;\n   70          context.m_pUserData = &wrapper;\n   71  \n   ..\n  178  }\n  179  \n  180: void SceneBuilder::setNodeInterpolationMode(uint32_t nodeID, Animation::InterpolationMode interpolationMode, bool enableWarping)\n  181  {\n  182      assert(nodeID < mSceneGraph.size());\n  ...\n  188              if (uint32_t channelID = animation->getChannel(nodeID); channelID != Animation::kInvalidChannel)\n  189              {\n  190:                 animation->setInterpolationMode(channelID, interpolationMode, enableWarping);\n  191              }\n  192          }\n  ...\n  249      if (mesh.faceCount == 0) throw_on_missing_element(\"faces\");\n  250      if (mesh.vertexCount == 0) throw_on_missing_element(\"vertices\");\n  251:     if (mesh.indexCount == 0 || !mesh.pIndices) throw_on_missing_element(\"indices\");\n  252      if (mesh.indexCount != mesh.faceCount * 3) throw std::runtime_error(\"Error when adding the mesh '\" + mesh.name + \"' to the scene.\\nUnexpected face/vertex count.\");\n  253  \n  ...\n  299          for (uint32_t vert = 0; vert < 3; vert++) {\n  300              const Mesh::Vertex v = mesh.getVertex(face, vert);\n  301:             const uint32_t origIndex = mesh.pIndices[face * 3 + vert];\n  302  \n  303              // Iterate over vertex list to check if it already exists.\n  ...\n  463          const auto& equalMaterial = *it;\n  464  \n  465:         // ASSIMP sometimes creates internal copies of a material: Always de-duplicate if name and properties are equal.\n  466          if (removeDuplicate || pMaterial->getName() == equalMaterial->getName())\n  467          {\n  ...\n  520  \n  521      // Create the index buffer\n  522:     Buffer::SharedPtr pIB = nullptr;\n  523      if (ibSize > 0)\n  524      {\n  525          ResourceBindFlags ibBindFlags = Resource::BindFlags::Index | ResourceBindFlags::ShaderResource;\n  526:         pIB = Buffer::create(mpDevice, (uint32_t)ibSize, ibBindFlags, Buffer::CpuAccess::None, mBuffersData.indices.data());\n  527      }\n  528  \n  ...\n  555  \n  556      // Add the draw ID layout\n  557:     VertexBufferLayout::SharedPtr pInstLayout = VertexBufferLayout::create();\n  558:     pInstLayout->addElement(INSTANCE_DRAW_ID_NAME, 0, ResourceFormat::R16Uint, 1, INSTANCE_DRAW_ID_LOC);\n  559:     pInstLayout->setInputClass(VertexBufferLayout::InputClass::PerInstanceData, 1);\n  560:     pLayout->addBufferLayout(Scene::kDrawIdBufferIndex, pInstLayout);\n  561  \n  562:     Vao::SharedPtr pVao = Vao::create(mMeshes[0].topology, pLayout, pVBs, pIB, ResourceFormat::R32Uint);\n  563      return pVao;\n  564  }\n\n/home/max/dev/Lava/src/Falcor/Scene/SceneBuilder.h:\n   80          uint32_t vertexCount = 0;                   ///< The number of vertices the mesh has.\n   81          uint32_t indexCount = 0;                    ///< The number of indices the mesh has.\n   82:         const uint32_t* pIndices = nullptr;         ///< Array of indices. The element count must match `indexCount`. This field is required.\n   83          Vao::Topology topology = Vao::Topology::Undefined; ///< The primitive topology of the mesh\n   84          Material::SharedPtr pMaterial;              ///< The mesh's material. Can't be nullptr.\n   ..\n  103                      return attribute.pData[face];\n  104                  case AttributeFrequency::Vertex:\n  105:                     return attribute.pData[pIndices[face * 3 + vert]];\n  106                  case AttributeFrequency::FaceVarying:\n  107                      return attribute.pData[face * 3 + vert];\n  ...\n  194      /** Set the animation interpolation mode for a given scene node. This sets the mode recursively for all parent nodes.\n  195      */\n  196:     void setNodeInterpolationMode(uint32_t nodeID, Animation::InterpolationMode interpolationMode, bool enableWarping);\n  197  \n  198      /** Add a mesh instance to a node\n  ...\n  221  \n  222      /** Set a light-probe\n  223:         \\param pProbe The environment map. You can set it to null to disable environment mapping\n  224      */\n  225      void setLightProbe(const LightProbe::SharedPtr& pProbe) { mpLightProbe = pProbe; }\n\n/home/max/dev/Lava/src/Falcor/Scene/Shading.slang:\n   98  \n   99  /** Apply alpha test and return the result.\n  100:     This version samples alpha using implicit gradients and only works in pixel shaders.\n  101      \\return True if hit should be ignored/discarded.\n  102  */\n\n/home/max/dev/Lava/src/Falcor/Scene/ShadingData.slang:\n   49      uint    activeLobes;            ///< BSDF lobes to include for sampling and evaluation. See LobeType in BxDFTypes.slang.\n   50  \n   51:     float2  uv;                     ///< Texture mapping coordinates\n   52      float   _pad0;\n   53      float   _pad1;\n   ..\n   60      \n   61      float3  specular;               ///< Specular albedo.\n   62:     float   linearRoughness;        ///< This is the original roughness, before re-mapping.\n   63      \n   64      float3  emissive;\n\n/home/max/dev/Lava/src/Falcor/ShaderSource.xml:\n   33      <BoolProperty Name=\"ShaderSourcePreservePaths\"\n   34          DisplayName=\"Preserve folder structure\"\n   35:         Description=\"If true, shaders will be copied into the destination subfolder using the original folder structure.  If false, shader will be copied directly into the destination subfolder.\"\n   36          Default=\"Yes\"\n   37          Category=\"General\">\n\n/home/max/dev/Lava/src/Falcor/Testing/UnitTest.cpp:\n  183                                              const std::string& entry,\n  184                                              const Program::DefineList& programDefines,\n  185:                                             Shader::CompilerFlags flags,\n  186                                              const std::string& shaderModel,\n  187                                              bool createShaderVars)\n  ...\n  208      }\n  209  \n  210:     void GPUUnitTestContext::allocateStructuredBuffer(const std::string& name, uint32_t nElements, const void* pInitData, size_t initDataSize) {\n  211          assert(mpVars);\n  212          mStructuredBuffers[name].pBuffer = Buffer::createStructured(mpDevice, mpProgram.get(), name, nElements);\n  213          assert(mStructuredBuffers[name].pBuffer);\n  214:         if (pInitData) {\n  215              size_t expectedDataSize = mStructuredBuffers[name].pBuffer->getStructSize() * mStructuredBuffers[name].pBuffer->getElementCount();\n  216              if (initDataSize == 0) initDataSize = expectedDataSize;\n  217              else if (initDataSize != expectedDataSize) throw ErrorRunningTestException(\"StructuredBuffer '\" + name + \"' initial data size mismatch\");\n  218:             mStructuredBuffers[name].pBuffer->setBlob(pInitData, 0, initDataSize);\n  219          }\n  220      }\n\n/home/max/dev/Lava/src/Falcor/Testing/UnitTest.h:\n   40  #include \"Falcor/Falcor.h\"\n   41  #include \"Falcor/Core/Framework.h\"\n   42: #include \"Falcor/Core/API/Resource.h\"\n   43: #include \"Falcor/Core/API/Buffer.h\"\n   44: #include \"Falcor/Core/API/Texture.h\"\n   45  \n   46: /** This file defines both the user-visible API for the unit testing framework as well as the various classes that implement it\n   47  */\n   48  \n   ..\n  103              given path.  The entrypoint is assumed to be |main()| unless\n  104              otherwise specified with the |csEntry| parameter.  Preprocessor\n  105:             defines and compiler flags can also be optionally provided.\n  106          */\n  107          void createProgram( const std::string& path,\n  108                              const std::string& csEntry = \"main\",\n  109                              const Program::DefineList& programDefines = Program::DefineList(),\n  110:                             Shader::CompilerFlags flags = Shader::CompilerFlags::None,\n  111                              const std::string& shaderModel = \"\",\n  112                              bool createShaderVars = true);\n  ...\n  143              \\param[in] name Name of the buffer in the shader.\n  144              \\param[in] nElements Number of elements to allocate.\n  145:             \\param[in] pInitData Optional parameter. Initial buffer data.\n  146              \\param[in] initDataSize Optional parameter. Size of the pointed initial data for validation (if 0 the buffer is assumed to be of the right size).\n  147          */\n  148:         void allocateStructuredBuffer(const std::string& name, uint32_t nElements, const void* pInitData = nullptr, size_t initDataSize = 0);\n  149  \n  150          /** runProgram runs the compute program that was specified in\n  ...\n  358      ///////////////////////////////////////////////////////////////////////////\n  359  \n  360:     /** Start of user-facing API */\n  361  \n  362  /** Macro to define a CPU unit test. The optional skip message will\n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/BitonicSort.cpp:\n   29  #include \"BitonicSort.h\"\n   30  \n   31: #ifdef _ENABLE_NVAPI\n   32  namespace Falcor {\n   33      static const char kShaderFilename[] = \"Utils/Algorithm/BitonicSort.cs.slang\";\n   34  \n   35      BitonicSort::BitonicSort(std::shared_ptr<Device> pDevice): mpDevice(pDevice) {\n   36: #if !(_ENABLE_NVAPI == true)\n   37:         throw std::runtime_error(\"BitonicSort requires NVAPI. Set _ENABLE_NVAPI to true in FalcorConfig.h.\");\n   38  #endif\n   39          mSort.pState = ComputeState::create(pDevice);\n   ..\n   65  \n   66          // Configure the shader for the specified chunk size.\n   67:         // This will trigger a re-compile if a new chunk size is encountered.\n   68          mSort.pProgram->addDefine(\"CHUNK_SIZE\", std::to_string(chunkSize));\n   69          mSort.pProgram->addDefine(\"GROUP_SIZE\", std::to_string(groupSize));\n   ..\n   75          assert(groupsX * groupsY * groupSize >= totalSize);\n   76  \n   77:         // Constants. The buffer size as a runtime constant as it may be variable and we don't want to recompile each time it changes.\n   78          mSort.pVars[\"CB\"][\"gTotalSize\"] = totalSize;\n   79          mSort.pVars[\"CB\"][\"gDispatchX\"] = groupsX;\n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/BitonicSort.cs.slang:\n   35      The code uses horizontal instructions to shuffle within the warp when possible,\n   36      and shared memory to shuffle between warps.\n   37:     Shuffles are not yet available in shader model 6.0+, we therefore rely on NVAPI.\n   38  */\n   39  \n   40: // Setup NvApi. We need this to get shuffle-xor operations.\n   41  #define NV_SHADER_EXTN_SLOT u63\n   42  #define NV_SHADER_EXTN_REGISTER_SPACE space0\n   43: #include \"NVAPI/nvHLSLExtns.h\"\n   44  \n   45  #if (NV_WARP_SIZE != 32)\n   ..\n   48  \n   49  // Check constraints.\n   50: // The kernel is currently written for a 1:1 mapping between elements to sort and threads.\n   51  #if (CHUNK_SIZE > GROUP_SIZE)\n   52  #error CHUNK_SIZE > GROUP_SIZE not supported\n   ..\n   86  */\n   87  [numthreads(GROUP_SIZE, 1, 1)]\n   88: void main(uint3 groupID : SV_GroupID, uint groupIdx : SV_GroupIndex)\n   89  {\n   90:     const uint group = groupID.y * gDispatchX + groupID.x;  // Sequential group index.\n   91:     const uint thid = groupIdx;                             // Local thread index in group (range 0..GROUP_SIZE-1).\n   92  \n   93      const uint globalIdx = group * GROUP_SIZE + thid;       // Global element index in gData\n   ..\n  124          const bool dir = ((i & k) == 0);   // Sort ascending (true) or descending (false)\n  125  \n  126:         // We ping-pong data in shared memory between adjacent addresses, using offset = {0, 1} to denote which one.\n  127          uint offset = 0;\n  128  \n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/BitonicSort.h:\n   37  class Device;\n   38  \n   39: #ifdef _ENABLE_NVAPI\n   40      /** In-place bitonic sort in chunks of N elements.\n   41  \n   ..\n   44          The sort is implemented using horizontal operations within warps, and shared memory across warps.\n   45  \n   46:         This code requires an NVIDIA GPU and NVAPI. Set _ENABLE_NVAPI to true in FalcorConfig.h.\n   47      */\n   48      class dlldecl BitonicSort : public std::enable_shared_from_this<BitonicSort>\n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp:\n   39      ComputeParallelReduction::ComputeParallelReduction(std::shared_ptr<Device> pDevice): mpDevice(pDevice) {\n   40          // Create the programs.\n   41:         // Set defines to avoid compiler warnings about undefined macros. Proper values will be assigned at runtime.\n   42          Program::DefineList defines = { { \"FORMAT_CHANNELS\", \"1\" }, { \"FORMAT_TYPE\", \"1\" } };\n   43:         mpInitialProgram = ComputeProgram::createFromFile(pDevice, kShaderFile, \"initialPass\", defines, Shader::CompilerFlags::None);\n   44:         mpFinalProgram = ComputeProgram::createFromFile(pDevice, kShaderFile, \"finalPass\", defines, Shader::CompilerFlags::None);\n   45:         mpVars = ComputeVars::create(pDevice, mpInitialProgram.get());\n   46  \n   47          // Check assumptions on thread group sizes. The initial pass is a 2D dispatch, the final pass a 1D.\n   48:         assert(mpInitialProgram->getReflector()->getThreadGroupSize().z == 1);\n   49          assert(mpFinalProgram->getReflector()->getThreadGroupSize().y == 1 && mpFinalProgram->getReflector()->getThreadGroupSize().z == 1);\n   50  \n   ..\n   66  \n   67      template<typename T>\n   68:     bool ComputeParallelReduction::execute(RenderContext* pRenderContext, const Texture::SharedPtr& pInput, Type operation, T* pResult, Buffer::SharedPtr pResultBuffer, uint64_t resultOffset) {\n   69          PROFILE(pRenderContext->device(), \"ComputeParallelReduction::execute\");\n   70  \n   71          // Check texture array/mip/sample count.\n   72:         if (pInput->getArraySize() != 1 || pInput->getMipCount() != 1 || pInput->getSampleCount() != 1) {\n   73              logError(\"ComputeParallelReduction::execute() - Input texture is unsupported. Aborting.\");\n   74              return false;\n   ..\n   77          // Check texture format.\n   78          uint32_t formatType = FORMAT_TYPE_UNKNOWN;\n   79:         switch (getFormatType(pInput->getFormat())) {\n   80              case FormatType::Float:\n   81              case FormatType::Unorm:\n   ..\n  105  \n  106          // Allocate intermediate buffers if needed.\n  107:         const uint2 resolution = uint2(pInput->getWidth(), pInput->getHeight());\n  108          assert(resolution.x > 0 && resolution.y > 0);\n  109  \n  110:         const uint2 numTiles = div_round_up(resolution, uint2(mpInitialProgram->getReflector()->getThreadGroupSize()));\n  111          allocate(numTiles.x * numTiles.y);\n  112          assert(mpBuffers[0]);\n  ...\n  114  \n  115          // Configure program.\n  116:         const uint32_t channelCount = getFormatChannelCount(pInput->getFormat());\n  117          assert(channelCount >= 1 && channelCount <= 4);\n  118:         mpInitialProgram->addDefine(\"FORMAT_CHANNELS\", std::to_string(channelCount));\n  119          mpFinalProgram->addDefine(\"FORMAT_CHANNELS\", std::to_string(channelCount));\n  120  \n  121:         mpInitialProgram->addDefine(\"FORMAT_TYPE\", std::to_string(formatType));\n  122          mpFinalProgram->addDefine(\"FORMAT_TYPE\", std::to_string(formatType));\n  123  \n  124:         // Initial pass: Reduction over tiles of pixels in input texture.\n  125          mpVars[\"PerFrameCB\"][\"gResolution\"] = resolution;\n  126          mpVars[\"PerFrameCB\"][\"gNumTiles\"] = numTiles;\n  127:         mpVars[\"gInput\"] = pInput;\n  128          mpVars->setBuffer(\"gResult\", mpBuffers[0]);\n  129  \n  130:         mpState->setProgram(mpInitialProgram);\n  131:         uint3 numGroups = div_round_up(uint3(resolution.x, resolution.y, 1), mpInitialProgram->getReflector()->getThreadGroupSize());\n  132          pRenderContext->dispatch(mpState.get(), mpVars.get(), numGroups);\n  133  \n  ...\n  171  \n  172      // Explicit template instantiation of the supported types.\n  173:     template dlldecl bool ComputeParallelReduction::execute<float4>(RenderContext* pRenderContext, const Texture::SharedPtr& pInput, Type operation, float4* pResult, Buffer::SharedPtr pResultBuffer, uint64_t resultOffset);\n  174:     template dlldecl bool ComputeParallelReduction::execute<int4>(RenderContext* pRenderContext, const Texture::SharedPtr& pInput, Type operation, int4* pResult, Buffer::SharedPtr pResultBuffer, uint64_t resultOffset);\n  175:     template dlldecl bool ComputeParallelReduction::execute<uint4>(RenderContext* pRenderContext, const Texture::SharedPtr& pInput, Type operation, uint4* pResult, Buffer::SharedPtr pResultBuffer, uint64_t resultOffset);\n  176  }\n  177  \n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/ComputeParallelReduction.h:\n   36  class Device;\n   37  \n   38:     /** Class that performs parallel reduction over all pixels in a texture.\n   39  \n   40          The reduction is done on recursively on blocks of n = 1024 elements.\n   41          The total number of iterations is ceil(log2(N)/10), where N is the\n   42:         total number of elements (pixels).\n   43  \n   44          The numerical error for the summation operation lies between pairwise\n   ..\n   70  \n   71              \\param[in] pRenderContext The render context.\n   72:             \\param[in] pInput Input texture.\n   73              \\param[in] operation Reduction operation.\n   74              \\param[out] pResult (Optional) The result of the reduction operation is stored here if non-nullptr. Note that this requires a GPU flush!\n   75:             \\param[out] pResultBuffer (Optional) Buffer on the GPU to which the result is copied (16B).\n   76              \\param[out] resultOffset (Optional) Byte offset into pResultBuffer to where the result should be stored.\n   77              \\return True if successful, false if an error occured.\n   78          */\n   79          template<typename T>\n   80:         bool execute(RenderContext* pRenderContext, const Texture::SharedPtr& pInput, Type operation, T* pResult = nullptr, Buffer::SharedPtr pResultBuffer = nullptr, uint64_t resultOffset = 0);\n   81  \n   82      private:\n   ..\n   85  \n   86          ComputeState::SharedPtr             mpState;\n   87:         ComputeProgram::SharedPtr           mpInitialProgram;\n   88          ComputeProgram::SharedPtr           mpFinalProgram;\n   89          ComputeVars::SharedPtr              mpVars;\n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/ParallelReduction.cpp:\n   28  #include \"Falcor/stdafx.h\"\n   29  #include \"ParallelReduction.h\"\n   30: #include \"Falcor/Core/API/RenderContext.h\"\n   31  \n   32  namespace Falcor {\n   ..\n   89      }\n   90  \n   91:     void runProgram(RenderContext* pRenderCtx, Texture::SharedPtr pInput, const FullScreenPass::SharedPtr& pPass, Fbo::SharedPtr pDst, Sampler::SharedPtr pPointSampler) {\n   92:         pPass[\"gInputTex\"] = pInput;\n   93          pPass[\"gSampler\"] = pPointSampler;\n   94          pPass->execute(pRenderCtx, pDst);\n   95       }\n   96  \n   97:     float4 ParallelReduction::reduce(RenderContext* pRenderCtx, Texture::SharedPtr pInput) {\n   98          FullScreenPass::SharedPtr pPass = mpFirstIterProg;\n   99  \n  100          for(size_t i = 0; i < mpTmpResultFbo.size(); i++) {\n  101:             runProgram(pRenderCtx, pInput, pPass, mpTmpResultFbo[i], mpPointSampler);\n  102              pPass = mpRestIterProg;\n  103:             pInput = mpTmpResultFbo[i]->getColorTexture(0);\n  104          }\n  105  \n  106:         runProgram(pRenderCtx, pInput, pPass, mResultData[mCurFbo].pFbo, mpPointSampler);\n  107          mResultData[mCurFbo].pReadTask = pRenderCtx->asyncReadTextureSubresource(mResultData[mCurFbo].pFbo->getColorTexture(0).get(), 0);\n  108          // Read back the results\n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/ParallelReduction.cs.slang:\n   37  cbuffer PerFrameCB\n   38  {\n   39:     uint2 gResolution;      // Pixel dimensions of input texture.\n   40      uint2 gNumTiles;        // Number of tiles in input texture.\n   41      uint gElems;            // Number of elements in input intermediate buffer.\n   ..\n   59  groupshared DataType gIntermediateCache[32 /* = 1024 / 32 */];\n   60  \n   61: DataType loadTexture(uint2 pixelCoords)\n   62  {\n   63:     DataType value = gInput[pixelCoords];\n   64  #if FORMAT_CHANNELS < 4\n   65      // The default value for missing components is (0,0,0,1). Reset last component to zero for consistency.\n   ..\n   90  \n   91  [numthreads(32, 32, 1)]\n   92: void initialPass(uint3 globalThreadId : SV_DispatchThreadID, uint groupThreadIdx : SV_GroupIndex, uint3 groupId : SV_GroupID)\n   93  {\n   94:     const uint2 pixelCoords = globalThreadId.xy;\n   95:     const uint tileIdx = groupId.y * gNumTiles.x + groupId.x;\n   96  \n   97:     // Load input from texture in tiles of 32x32 pixels.\n   98      DataType value = 0;\n   99:     if (all(pixelCoords < gResolution)) value = loadTexture(pixelCoords);\n  100  \n  101      reduce(value, tileIdx, groupThreadIdx);\n  ...\n  103  \n  104  [numthreads(1024, 1, 1)]\n  105: void finalPass(uint3 globalThreadId : SV_DispatchThreadID, uint groupThreadIdx : SV_GroupIndex, uint3 groupId : SV_GroupID)\n  106  {\n  107      // Load input from buffer written in previous pass.\n  ...\n  109      if (globalThreadId.x < gElems) value = gInputBuffer[globalThreadId.x];\n  110  \n  111:     reduce(value, groupId.x, groupThreadIdx);\n  112  }\n  113  \n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/ParallelReduction.h:\n   29  #define SRC_FALCOR_UTILS_ALGORITHM_PARALLELREDUCTION_H_\n   30  \n   31: #include \"Falcor/Core/API/CopyContext.h\"\n   32  #include \"Falcor/RenderGraph/BasePasses/FullScreenPass.h\"\n   33  \n   ..\n   45          \\param[in] reductionType The reduction operator.\n   46          \\param[in] readbackLatency The result is returned after this many calls to reduce().\n   47:         \\param[in] width Width in pixels of the texture that will be used.\n   48:         \\param[in] height Height in pixels of the texture that will be used.\n   49          \\param[in] sampleCount Multi-sample count for the texture that will be used.\n   50          \\return New object, or throws an exception if creation failed.\n   ..\n   52      static UniquePtr create(std::shared_ptr<Device> pDevice, Type reductionType, uint32_t readbackLatency, uint32_t width, uint32_t height, uint32_t sampleCount = 1);\n   53  \n   54:     float4 reduce(RenderContext* pRenderCtx, Texture::SharedPtr pInput);\n   55  \n   56  private:\n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/PrefixSum.cpp:\n  111      if (numPrefixGroups > 1) {\n  112          // Compute number of thread groups. Each thread operates on one element.\n  113:         // Note that we're skipping the first group of 2N elements, as no add is needed (their group sum is zero).\n  114          const uint dispatchSizeX = (numPrefixGroups - 1) * 2;\n  115          assert(dispatchSizeX > 0);\n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/PrefixSum.cs.slang:\n   54  */\n   55  [numthreads(GROUP_SIZE, 1, 1)]\n   56: void groupScan(uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)\n   57  {\n   58      const uint thid = groupThreadID.x;      // Local thread ID in the range 0..N-1.\n   59:     const uint groupIdx = groupID.x;        // Group index where each group represents 2N elements.\n   60  \n   61      // Load data for group into shared memory. Each thread loads two elements.\n   ..\n   63      // It's probably better to load one element into each half of the array as we do here.\n   64      // We pad the data with zeros in shared memory if actual #elements is less than working set.\n   65:     const uint idx = groupIdx * (2 * GROUP_SIZE) + thid;\n   66      gSharedData[thid] = idx < gNumElems ? gData.Load(idx * 4) : 0;\n   67      gSharedData[thid + GROUP_SIZE] = (idx + GROUP_SIZE) < gNumElems ? gData.Load((idx + GROUP_SIZE) * 4) : 0;\n   ..\n   90      // This can get slow for large inputs, but for moderate sized inputs (tens to hundreds of groups) it's probably still very fast.\n   91      // The alternative is to run an extra shader pass computing the prefix sum over the groups.\n   92:     if (thid >= groupIdx && thid < gNumGroups)\n   93      {\n   94          uint sum = gSharedData[2 * GROUP_SIZE - 1];\n   ..\n  130  /** Pass for finalizing a prefix sum computed over multiple thread groups.\n  131      Each thread here operates on one element of the data buffer.\n  132:     Note that we're skipping the first N elements as those don't need to be added\n  133      (their group's prefix sum is zero).\n  134  */\n  135  [numthreads(GROUP_SIZE, 1, 1)]\n  136: void finalizeGroups(uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)\n  137  {\n  138      const uint thid = groupThreadID.x;      // Local thread ID in the range 0..N-1.\n  139:     const uint groupIdx = groupID.x;        // Group index where each group represents N elements (skipping first 2N elements).\n  140  \n  141:     uint sum = gPrefixGroupSums.Load((groupIdx >> 1) * 4);\n  142:     uint globalIdx = (groupIdx * GROUP_SIZE) + thid + 2 * GROUP_SIZE;  // Skip first 2N elements.\n  143  \n  144      if (globalIdx < gNumElems)\n\n/home/max/dev/Lava/src/Falcor/Utils/Algorithm/PrefixSum.h:\n   29  #define SRC_FALCOR_UTILS_ALGORITHM_PREFIXSUM_H_\n   30  \n   31: #include \"Falcor/Core/API/Buffer.h\"\n   32  #include \"Falcor/Core/State/ComputeState.h\"\n   33  #include \"Falcor/Core/Program/ComputeProgram.h\"\n   ..\n   59              \\param[in] elementCount Number of elements to compute prefix sum over.\n   60              \\param[out] pTotalSum (Optional) The sum of all elements is stored to this variable if it is non-null. Note that this requires a GPU sync!\n   61:             \\param[in] pTotalSumBuffer (Optional) Buffer on the GPU to which the total sum is copied (uint32_t).\n   62              \\param[in] pTotalSumOffset (Optional) Byte offset into pTotalSumBuffer to where the sum should be written.\n   63          */\n\n/home/max/dev/Lava/src/Falcor/Utils/Color/ColorMap.slang:\n   27   **************************************************************************/\n   28  \n   29: /** Helpers for mapping scalar values to RGB color for visualization purposes.\n   30  \n   31      The input is clamped to [0,1] and mapped to a continuous color range.\n\n/home/max/dev/Lava/src/Falcor/Utils/Color/ColorUtils.h:\n  132  \n  133      /** Transforms color temperature of a blackbody emitter to color in CIE XYZ.\n  134:         This function uses an approximation based on piecewise rational polynomials:\n  135          Kang et al., Design of Advanced Color Temperature Control System for HDTV Applications, 2002.\n  136          https://pdfs.semanticscholar.org/cc7f/c2e67601ccb1a8fec048c9b78a4224c34d26.pdf\n\n/home/max/dev/Lava/src/Falcor/Utils/Debug/PixelDebug.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"PixelDebug.h\"\n   30  #include <sstream>\n   31  #include <iomanip>\n   ..\n   36  \n   37  namespace {\n   38:     const char kReflectPixelDebugTypesFile[] = \"Utils/Debug/ReflectPixelDebugTypes.cs.slang\";\n   39  }\n   40  \n   41: PixelDebug::SharedPtr PixelDebug::create(std::shared_ptr<Device> pDevice, uint32_t logSize) {\n   42:     return SharedPtr(new PixelDebug(pDevice, logSize));\n   43  }\n   44  \n   45: void PixelDebug::beginFrame(RenderContext* pRenderContext, const uint2& frameDim) {\n   46      mFrameDim = frameDim;\n   47      if (mRunning) {\n   48:         logError(\"PixelDebug::beginFrame() - Logging is already running, did you forget to call endFrame()? Ignoring call.\");\n   49          return;\n   50      }\n   ..\n   52  \n   53      // Reset previous data.\n   54:     mPixelLogData.clear();\n   55      mAssertLogData.clear();\n   56      mDataValid = false;\n   ..\n   59      if (mEnabled) {\n   60          // Prepare log buffers.\n   61:         if (!mpPixelLog || mpPixelLog->getElementCount() != mLogSize) {\n   62              // Create program for type reflection.\n   63:             if (!mpReflectProgram) mpReflectProgram = ComputeProgram::createFromFile(mpDevice, kReflectPixelDebugTypesFile, \"main\");\n   64  \n   65              // Allocate GPU buffers.\n   66:             mpPixelLog = Buffer::createStructured(mpDevice, mpReflectProgram.get(), \"gPixelLog\", mLogSize);\n   67:             if (mpPixelLog->getStructSize() != sizeof(PixelLogValue)) throw std::runtime_error(\"Struct PixelLogValue size mismatch between CPU/GPU\");\n   68  \n   69              mpAssertLog = Buffer::createStructured(mpDevice, mpReflectProgram.get(), \"gAssertLog\", mLogSize);\n   ..\n   72              // Allocate staging buffers for readback. These are shared, the data is stored consecutively.\n   73              mpCounterBuffer = Buffer::create(mpDevice, 2 * sizeof(uint32_t), ResourceBindFlags::None, Buffer::CpuAccess::Read);\n   74:             mpDataBuffer = Buffer::create(mpDevice, mpPixelLog->getSize() + mpAssertLog->getSize(), ResourceBindFlags::None, Buffer::CpuAccess::Read);\n   75          }\n   76  \n   77:         pRenderContext->clearUAVCounter(mpPixelLog, 0);\n   78          pRenderContext->clearUAVCounter(mpAssertLog, 0);\n   79      }\n   80  }\n   81  \n   82: void PixelDebug::endFrame(RenderContext* pRenderContext) {\n   83      if (!mRunning) {\n   84:         logError(\"PixelDebug::endFrame() - Logging is not running, did you forget to call beginFrame()? Ignoring call.\");\n   85          return;\n   86      }\n   ..\n   89      if (mEnabled) {\n   90          // Copy logged data to staging buffers.\n   91:         pRenderContext->copyBufferRegion(mpCounterBuffer.get(), 0, mpPixelLog->getUAVCounter().get(), 0, 4);\n   92          pRenderContext->copyBufferRegion(mpCounterBuffer.get(), 4, mpAssertLog->getUAVCounter().get(), 0, 4);\n   93:         pRenderContext->copyBufferRegion(mpDataBuffer.get(), 0, mpPixelLog.get(), 0, mpPixelLog->getSize());\n   94:         pRenderContext->copyBufferRegion(mpDataBuffer.get(), mpPixelLog->getSize(), mpAssertLog.get(), 0, mpAssertLog->getSize());\n   95  \n   96          // Create fence first time we need it.\n   ..\n  105  }\n  106  \n  107: void PixelDebug::prepareProgram(const Program::SharedPtr& pProgram, const ShaderVar& var) {\n  108      assert(mRunning);\n  109  \n  110      if (mEnabled) {\n  111:         pProgram->addDefine(\"_PIXEL_DEBUG_ENABLED\");\n  112:         var[\"gPixelLog\"] = mpPixelLog;\n  113          var[\"gAssertLog\"] = mpAssertLog;\n  114:         var[\"PixelDebugCB\"][\"gPixelLogSelected\"] = mSelectedPixel;\n  115:         var[\"PixelDebugCB\"][\"gPixelLogSize\"] = mLogSize;\n  116:         var[\"PixelDebugCB\"][\"gAssertLogSize\"] = mLogSize;\n  117      } else {\n  118:         pProgram->removeDefine(\"_PIXEL_DEBUG_ENABLED\");\n  119      }\n  120  }\n  121  \n  122: void PixelDebug::renderUI(Gui::Widgets& widget) {\n  123      if (mRunning) {\n  124:         logError(\"PixelDebug::renderUI() - Logging is running, call end() before renderUI(). Ignoring call.\");\n  125          return;\n  126      }\n  127  \n  128      // Configure logging.\n  129:     widget.checkbox(\"Pixel debug\", mEnabled);\n  130      widget.tooltip(\"Enables shader debugging.\\n\\n\"\n  131:         \"Left-mouse click on a pixel to select it.\\n\"\n  132:         \"Use print() in the shader to print values of basic types (int, float2, etc.) for the selected pixel.\\n\"\n  133          \"Use assert() in the shader to test a condition.\", true);\n  134      if (mEnabled) {\n  135:         widget.var(\"Selected pixel\", mSelectedPixel);\n  136      }\n  137  \n  ...\n  142  \n  143          // Print list of printed values.\n  144:         oss << \"Pixel log:\" << (mPixelLogData.empty() ? \" <empty>\\n\" : \"\\n\");\n  145:         for (auto v : mPixelLogData) {\n  146              // Parse value and convert to string.\n  147              if (v.count > 1) oss << \"(\";\n  148              for (uint32_t i = 0; i < v.count; i++) {\n  149                  uint32_t bits = v.data[i];\n  150:                 switch ((PixelLogValueType)v.type) {\n  151:                     case PixelLogValueType::Bool:\n  152                          oss << (bits != 0) ? \"true\" : \"false\";\n  153                          break;\n  154:                     case PixelLogValueType::Int:\n  155                          oss << (int32_t)bits;\n  156                          break;\n  157:                     case PixelLogValueType::Uint:\n  158                          oss << bits;\n  159                          break;\n  160:                     case PixelLogValueType::Float:\n  161                          // TODO: Replace by std::bit_cast in C++20 when that is available.\n  162                          oss << *reinterpret_cast<float*>(&bits);\n  ...\n  185  }\n  186  \n  187: bool PixelDebug::onMouseEvent(const MouseEvent& mouseEvent) {\n  188      if (mEnabled) {\n  189          if (mouseEvent.type == MouseEvent::Type::LeftButtonDown) {\n  190:             mSelectedPixel = uint2(mouseEvent.pos * float2(mFrameDim));\n  191              return true;\n  192          }\n  ...\n  195  }\n  196  \n  197: void PixelDebug::copyDataToCPU() {\n  198      assert(!mRunning);\n  199      if (mWaitingForData) {\n  ...\n  205              // Map counter buffer. This tells us how many print() and assert() calls were made.\n  206              uint32_t* uavCounters = (uint32_t*)mpCounterBuffer->map(Buffer::MapType::Read);\n  207:             const uint32_t printCount = std::min(mpPixelLog->getElementCount(), uavCounters[0]);\n  208              const uint32_t assertCount = std::min(mpAssertLog->getElementCount(), uavCounters[1]);\n  209              mpCounterBuffer->unmap();\n  ...\n  212              byte* pLog = (byte*)mpDataBuffer->map(Buffer::MapType::Read);\n  213  \n  214:             mPixelLogData.resize(printCount);\n  215:             for (uint32_t i = 0; i < printCount; i++) mPixelLogData[i] = ((PixelLogValue*)pLog)[i];\n  216:             pLog += mpPixelLog->getSize();\n  217  \n  218              mAssertLogData.resize(assertCount);\n\n/home/max/dev/Lava/src/Falcor/Utils/Debug/PixelDebug.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_UTILS_DEBUG_PIXELDEBUG_H_\n   29: #define SRC_FALCOR_UTILS_DEBUG_PIXELDEBUG_H_\n   30  \n   31: #include \"PixelDebugTypes.slang\"\n   32  \n   33  #include \"Falcor/Core/Framework.h\"\n   ..\n   45  \n   46      Host-side integration:\n   47:      - Create PixelDebug object\n   48       - Call beginFrame()/endFrame() before and after executing programs with debugging.\n   49       - Call prepareProgram() before launching a program to use debugging.\n   ..\n   51  \n   52      Runtime usage:\n   53:      - Import PixelDebug.slang in your shader.\n   54:      - Use printSetPixel() in the shader to set the current pixel.\n   55:      - Use print() in the shader to output values for the selected pixel.\n   56         All basic types (e.g. bool, int3, float2, uint4) are supported.\n   57:      - Click the left mouse button (or edit the coords) to select a pixel.\n   58       - Use assert() in the shader to test a condition for being true.\n   59:        All pixels are tested, and failed asserts logged. The coordinates\n   60         of asserts that trigger can be used with print() to debug further.\n   61  \n   ..\n   63      When enabled, async readback is used but expect a minor perf loss.\n   64  */\n   65: class dlldecl PixelDebug {\n   66   public:\n   67:     using SharedPtr = std::shared_ptr<PixelDebug>;\n   68:     virtual ~PixelDebug() = default;\n   69  \n   70      /** Create debug object.\n   ..\n   83  \n   84   protected:\n   85:     PixelDebug(std::shared_ptr<Device> pDevice, uint32_t logSize) : mLogSize(logSize), mpDevice(pDevice) {}\n   86      void copyDataToCPU();\n   87  \n   88      // Internal state\n   89      Program::SharedPtr          mpReflectProgram;               ///< Program for reflection of types.\n   90:     Buffer::SharedPtr           mpPixelLog;                     ///< Pixel log on the GPU with UAV counter.\n   91      Buffer::SharedPtr           mpAssertLog;                    ///< Assert log on the GPU with UAV counter.\n   92      Buffer::SharedPtr           mpCounterBuffer;                ///< Staging buffer for async readback of UAV counters.\n   ..\n   96      // Configuration\n   97      bool                        mEnabled = false;               ///< Enables debugging features.\n   98:     uint2                       mSelectedPixel = { 0, 0 };      ///< Currently selected pixel.\n   99  \n  100      // Runtime data\n  ...\n  105      bool                        mDataValid = false;             ///< True if data has been read back and is valid.\n  106  \n  107:     std::vector<PixelLogValue>  mPixelLogData;                  ///< Pixel log data read back from the GPU.\n  108      std::vector<AssertLogValue> mAssertLogData;                 ///< Assert log data read back from the GPU.\n  109  \n  ...\n  115  }  // namespace Falcor\n  116  \n  117: #endif  // SRC_FALCOR_UTILS_DEBUG_PIXELDEBUG_H_\n  118  \n\n/home/max/dev/Lava/src/Falcor/Utils/Debug/PixelDebug.slang:\n   27   **************************************************************************/\n   28  \n   29: /** GPU side implementation of pixel debugging utils.\n   30  \n   31      Note that the print() functions must be called from a ray tracing\n   32:     program as they use DispatchRaysIndex() to identify the current pixel.\n   33  \n   34      The host sets the following defines:\n   35  \n   36:     _PIXEL_DEBUG_ENABLED     Nonzero when pixel debugging is enabled.\n   37  \n   38  */\n   39  \n   40: import PixelDebugTypes;\n   41  \n   42: cbuffer PixelDebugCB\n   43  {\n   44:     uint2 gPixelLogSelected;    // Currently selected pixel to log.\n   45:     uint  gPixelLogSize;        // Number of elements in the output buffer.\n   46      uint  gAssertLogSize;\n   47  };\n   48  \n   49: RWStructuredBuffer<PixelLogValue> gPixelLog;\n   50  RWStructuredBuffer<AssertLogValue> gAssertLog;\n   51  \n   52: #ifdef _PIXEL_DEBUG_ENABLED\n   53: static uint2 gPixelDebugPixel;\n   54  #endif\n   55  \n   56: void printSetPixel(uint2 pixel)\n   57  {\n   58: #ifdef _PIXEL_DEBUG_ENABLED\n   59:     gPixelDebugPixel = pixel;\n   60  #endif\n   61  }\n   62  \n   63: #ifdef _PIXEL_DEBUG_ENABLED\n   64  \n   65      /** Define overloaded 'void print(Type x)' functions. Each takes a different\n   ..\n   69      void print(vector<Type, Count> v)                           \\\n   70      {                                                           \\\n   71:         if (all(gPixelDebugPixel == gPixelLogSelected))         \\\n   72          {                                                       \\\n   73:             uint i = gPixelLog.IncrementCounter();              \\\n   74:             if (i < gPixelLogSize)                              \\\n   75              {                                                   \\\n   76:                 PixelLogValue val;                              \\\n   77                  val.type = (uint)ValueType;                     \\\n   78                  val.count = Count;                              \\\n   ..\n   81                      val.data[j] = j < Count ? asuint(v[j]) : 0; \\\n   82                  }                                               \\\n   83:                 gPixelLog[i] = val;                             \\\n   84              }                                                   \\\n   85          }                                                       \\\n   ..\n  112      void assert(bool condition) {}\n  113  \n  114: #endif // !_PIXEL_DEBUG_ENABLED\n  115  \n  116: PRINT_FUNC(bool, 1, PixelLogValueType::Bool)\n  117: PRINT_FUNC(bool, 2, PixelLogValueType::Bool)\n  118: PRINT_FUNC(bool, 3, PixelLogValueType::Bool)\n  119: PRINT_FUNC(bool, 4, PixelLogValueType::Bool)\n  120: PRINT_FUNC(int, 1, PixelLogValueType::Int)\n  121: PRINT_FUNC(int, 2, PixelLogValueType::Int)\n  122: PRINT_FUNC(int, 3, PixelLogValueType::Int)\n  123: PRINT_FUNC(int, 4, PixelLogValueType::Int)\n  124: PRINT_FUNC(uint, 1, PixelLogValueType::Uint)\n  125: PRINT_FUNC(uint, 2, PixelLogValueType::Uint)\n  126: PRINT_FUNC(uint, 3, PixelLogValueType::Uint)\n  127: PRINT_FUNC(uint, 4, PixelLogValueType::Uint)\n  128: PRINT_FUNC(float, 1, PixelLogValueType::Float)\n  129: PRINT_FUNC(float, 2, PixelLogValueType::Float)\n  130: PRINT_FUNC(float, 3, PixelLogValueType::Float)\n  131: PRINT_FUNC(float, 4, PixelLogValueType::Float)\n  132  \n  133  #undef PRINT_FUNC\n\n/home/max/dev/Lava/src/Falcor/Utils/Debug/PixelDebugTypes.slang:\n   33  /** Define the basic types that print() supports.\n   34  */\n   35: enum class PixelLogValueType\n   36  {\n   37      Bool = 0,\n   ..\n   41  };\n   42  \n   43: struct PixelLogValue\n   44  {\n   45:     uint type;          ///< Value type (see PixelLogValueType).\n   46      uint count;         ///< Number of components (1-4).\n   47      uint4 data;         ///< The data bits. The encoding is determined by the data type.\n\n/home/max/dev/Lava/src/Falcor/Utils/Debug/ReflectPixelDebugTypes.cs.slang:\n   27   **************************************************************************/\n   28  \n   29: /** Dummy compute program for reflection of the PixelDebug types.\n   30  */\n   31: import Utils.Debug.PixelDebug;\n   32  \n   33  void main() {}\n\n/home/max/dev/Lava/src/Falcor/Utils/Helpers.slang:\n   38      float3 p = normalize(direction);\n   39      float2 uv;\n   40:     uv.x = (1 + atan2(-p.z, p.x) / M_PI) * 0.5;\n   41:     uv.y = acos(p.y) / M_PI;\n   42      return uv;\n   43  }\n   ..\n   45  float3 sphericalCrdToDir(float2 uv)\n   46  {\n   47:     float phi = M_PI * uv.y;\n   48:     float theta = M_2PI * uv.x - (M_PI / 2.0f);\n   49  \n   50      float3 dir;\n   ..\n  179  \n  180  /** Calculate screen-space motion vector.\n  181:     \\param[in] pixelCrd Sample in current frame expressed in pixel coordinates with origin in the top-left corner.\n  182      \\param[in] prevPosH Sample in previous frame expressed in homogeneous clip space coordinates. Note that the definition differs between D3D12 and Vulkan.\n  183:     \\param[in] renderTargetDim Render target dimension in pixels.\n  184      \\return Motion vector pointing from current to previous position expressed in sceen space [0,1] with origin in the top-left corner.\n  185  */\n  186: float2 calcMotionVector(float2 pixelCrd, float4 prevPosH, float2 renderTargetDim)\n  187  {\n  188      float2 prevCrd = prevPosH.xy / prevPosH.w;\n  ...\n  193  #endif\n  194      prevCrd += 0.5f;\n  195:     float2 normalizedCrd = pixelCrd / renderTargetDim;\n  196      return prevCrd - normalizedCrd;\n  197  }\n  ...\n  232      if (useAnisotropy)\n  233      {\n  234:         //////  Anisotropic version\n  235  \n  236          // Find the discretized derivatives of our coordinates\n  ...\n  267      else\n  268      {\n  269:         //////  Isotropic version\n  270  \n  271          // Find the discretized derivatives of our coordinates\n  272          float maxDeriv = max(length(ddx(hashInputCoord)), length(ddy(hashInputCoord)));\n  273:         float pixScale = 1.0 / (hashScale * maxDeriv);\n  274          // Find two nearest log-discretized noise scales\n  275:         float2 pixScales = float2(exp2(floor(log2(pixScale))), exp2(ceil(log2(pixScale))));\n  276          // Compute alpha thresholds at our two noise scales\n  277:         float2 alpha = float2(sineHash3D(floor(pixScales.x * hashInputCoord)), sineHash3D(floor(pixScales.y * hashInputCoord)));\n  278          // Factor to interpolate lerp with\n  279:         float lerpFactor = frac(log2(pixScale));\n  280          // Interpolate alpha threshold from noise at two scales\n  281          float x = (1 - lerpFactor) * alpha.x + lerpFactor * alpha.y;\n  ...\n  295  *******************************************************************/\n  296  \n  297: /** Evaluates alpha test, returning true if pixel should be discarded.\n  298      \\todo calculateHashedAlpha requires ddx/ddy, so cannot be used in RT mode.\n  299  */\n  ...\n  310  #ifdef _DEFAULT_ALPHA_TEST\n  311      return evalBasicAlphaTest(alpha, threshold);\n  312: #elif defined(_HASHED_ALPHA_TEST_ANISOTROPIC)\n  313      float hashedThreshold = calculateHashedAlpha(posW, hashedAlphaScale, true);\n  314      return evalHashedAlphaTest(alpha, threshold, hashedThreshold);\n  315  #else\n  316:     // Default to isotropic hashed alpha test\n  317      float hashedThreshold = calculateHashedAlpha(posW, hashedAlphaScale, false);\n  318      return evalHashedAlphaTest(alpha, threshold, hashedThreshold);\n\n/home/max/dev/Lava/src/Falcor/Utils/HostDeviceShared.slangh:\n   29  \n   30  /*******************************************************************\n   31:                     Glue code for CPU/GPU compilation\n   32  *******************************************************************/\n   33  \n   34: #if (defined(__STDC_HOSTED__) || defined(__cplusplus))   // we're in C-compliant compiler, probably host\n   35  #define HOST_CODE 1\n   36  #endif\n\n/home/max/dev/Lava/src/Falcor/Utils/Image/Bitmap.cpp:\n   31  \n   32  #include \"FreeImage.h\"\n   33: #include \"Falcor/Core/API/Texture.h\"\n   34  #include \"Falcor/Utils/StringUtils.h\"\n   35  \n   ..\n  113              break;\n  114          default:\n  115:             genError(\"Unknown bits-per-pixel\", filename);\n  116              return nullptr;\n  117      }\n  ...\n  134      }\n  135  \n  136:     uint32_t bytesPerPixel = bpp / 8;\n  137  \n  138:     pBmp->mpData = new uint8_t[pBmp->mHeight * pBmp->mWidth * bytesPerPixel];\n  139:     FreeImage_ConvertToRawBits(pBmp->mpData, pDib, pBmp->mWidth * bytesPerPixel, bpp, FI_RGBA_RED_MASK, FI_RGBA_GREEN_MASK, FI_RGBA_BLUE_MASK, isTopDown);\n  140  \n  141      FreeImage_Unload(pDib);\n  ...\n  233  \n  234      int flags = 0;\n  235:     FIBITMAP* pImage = nullptr;\n  236:     uint32_t bytesPerPixel = getFormatBytesPerBlock(resourceFormat);\n  237  \n  238:     //TODO replace this code for swapping channels. Can't use freeimage masks b/c they only care about 16 bpp images\n  239      //issue #74 in gitlab\n  240      if (resourceFormat == ResourceFormat::RGBA8Unorm || resourceFormat == ResourceFormat::RGBA8Snorm || resourceFormat == ResourceFormat::RGBA8UnormSrgb) {\n  241          for (uint32_t a = 0; a < width*height; a++) {\n  242:             uint32_t* pPixel = (uint32_t*)pData;\n  243:             pPixel += a;\n  244:             uint8_t* ch = (uint8_t*)pPixel;\n  245              std::swap(ch[0], ch[2]);\n  246              if (is_set(exportFlags, ExportFlags::ExportAlpha) == false) {\n  ...\n  256              pData = floatData.data();\n  257              resourceFormat = ResourceFormat::RGBA32Float;\n  258:             bytesPerPixel = 16;\n  259:         } else if (bytesPerPixel != 16 && bytesPerPixel != 12) {\n  260              logError(\"Bitmap::saveImage supports only 32-bit/channel RGB/RGBA or 16-bit RGBA images as PFM/EXR files.\");\n  261              return;\n  ...\n  275          }\n  276  \n  277:         if (exportAlpha && bytesPerPixel != 16) {\n  278              logError(\"Bitmap::saveImage requesting to export alpha-channel to EXR file, but the resource doesn't have an alpha-channel\");\n  279              return;\n  ...\n  281  \n  282          // Upload the image manually and flip it vertically\n  283:         bool scanlineCopy = exportAlpha ? bytesPerPixel == 16 : bytesPerPixel == 12;\n  284  \n  285:         pImage = FreeImage_AllocateT(exportAlpha ? FIT_RGBAF : FIT_RGBF, width, height);\n  286          BYTE* head = (BYTE*)pData;\n  287          for (unsigned y = 0; y < height; y++) {\n  288:             float* dstBits = (float*)FreeImage_GetScanLine(pImage, height - y - 1);\n  289              if (scanlineCopy) {\n  290:                 std::memcpy(dstBits, head, bytesPerPixel * width);\n  291              } else {\n  292                  assert(exportAlpha == false);\n  ...\n  297                  }\n  298              }\n  299:             head += bytesPerPixel * width;\n  300          }\n  301  \n  ...\n  309          }\n  310      } else {\n  311:         FIBITMAP* pTemp = FreeImage_ConvertFromRawBits((BYTE*)pData, width, height, bytesPerPixel * width, bytesPerPixel * 8, FI_RGBA_RED_MASK, FI_RGBA_GREEN_MASK, FI_RGBA_BLUE_MASK, isTopDown);\n  312          if (is_set(exportFlags, ExportFlags::ExportAlpha) == false || fileFormat == Bitmap::FileFormat::JpegFile) {\n  313:             pImage = FreeImage_ConvertTo24Bits(pTemp);\n  314              FreeImage_Unload(pTemp);\n  315          } else {\n  316:             pImage = pTemp;\n  317          }\n  318  \n  ...\n  361      }\n  362  \n  363:     FreeImage_Save(toFreeImageFormat(fileFormat), pImage, filename.c_str(), flags);\n  364:     FreeImage_Unload(pImage);\n  365  }\n  366  \n  ...\n  373  \n  374  void Bitmap::readDataRegion(uint2 offset, uint2 extent, std::vector<uint8_t>& data ) const {\n  375:     uint32_t bytesPerPixel = getFormatBytesPerBlock(mFormat);\n  376  \n  377:     data.resize(extent[0] * extent[1] * bytesPerPixel);\n  378  \n  379:     size_t bytesPerSourceLine = mWidth * bytesPerPixel;\n  380:     size_t bytesPerRegionLine = extent[0] * bytesPerPixel;\n  381:     size_t srcDataOffset = (offset[0] + mWidth *offset[1]) * bytesPerPixel;\n  382      size_t dstDataOffset = 0;\n  383      for( uint32_t line = offset[1]; line < (offset[1] + extent[1]); line++) {\n\n/home/max/dev/Lava/src/Falcor/Utils/Image/Bitmap.h:\n   62      /** Create a new object from file.\n   63          \\param[in] filename Filename, including a path. If the file can't be found relative to the current directory, Falcor will search for it in the common directories.\n   64:         \\param[in] isTopDown Control the memory layout of the image. If true, the top-left pixel is the first pixel in the buffer, otherwise the bottom-left pixel is first.\n   65          \\return If loading was successful, a new object. Otherwise, nullptr.\n   66      */\n   ..\n   74          \\param[in] exportFlags The flags to export the file. See ExportFlags above.\n   75          \\param[in] ResourceFormat the format of the resource data\n   76:         \\param[in] isTopDown Control the memory layout of the image. If true, the top-left pixel will be stored first, otherwise the bottom-left pixel will be stored first\n   77          \\param[in] pData Pointer to the buffer containing the image\n   78      */\n   ..\n  112      uint32_t getHeight() const { return mHeight; }\n  113  \n  114:     /** Get the number of bytes per pixel\n  115      */\n  116      ResourceFormat getFormat() const { return mFormat; }\n\n/home/max/dev/Lava/src/Falcor/Utils/Image/BitmapUtils.cpp:\n    7  bool isRGB32fSupported(std::shared_ptr<Device> pDevice) {\n    8      VkFormatProperties p;\n    9:     vkGetPhysicalDeviceFormatProperties(pDevice->getApiHandle(), VK_FORMAT_R32G32B32_SFLOAT, &p);\n   10      return p.optimalTilingFeatures != 0;\n   11  }\n   ..\n  141  }\n  142  \n  143: /** Converts 96bpp to 128bpp RGBA without clamping.\n  144      Note that we can't use FreeImage_ConvertToRGBAF() as it clamps to [0,1].\n  145  */\n  ...\n  151      FreeImage_CloneMetadata(pNew, pDib);\n  152  \n  153:     const unsigned src_pitch = FreeImage_GetPitch(pDib);\n  154:     const unsigned dst_pitch = FreeImage_GetPitch(pNew);\n  155  \n  156      const BYTE *src_bits = (BYTE*)FreeImage_GetBits(pDib);\n  ...\n  159      for (unsigned y = 0; y < height; y++)\n  160      {\n  161:         const FIRGBF *src_pixel = (FIRGBF*)src_bits;\n  162:         FIRGBAF* dst_pixel = (FIRGBAF*)dst_bits;\n  163  \n  164          for (unsigned x = 0; x < width; x++)\n  165          {\n  166:             // Convert pixels directly, while adding a \"dummy\" alpha of 1.0\n  167:             dst_pixel[x].red = src_pixel[x].red;\n  168:             dst_pixel[x].green = src_pixel[x].green;\n  169:             dst_pixel[x].blue = src_pixel[x].blue;\n  170:             dst_pixel[x].alpha = 1.0F;\n  171  \n  172          }\n  173:         src_bits += src_pitch;\n  174:         dst_bits += dst_pitch;\n  175      }\n  176      return pNew;\n  ...\n  199  }\n  200  \n  201: FREE_IMAGE_TYPE getImageType(uint32_t bytesPerPixel) {\n  202:     switch(bytesPerPixel) {\n  203          case 4:\n  204              return FIT_BITMAP;\n\n/home/max/dev/Lava/src/Falcor/Utils/Image/BitmapUtils.h:\n    5  #include \"LTX_Bitmap.h\"\n    6  #include \"FreeImage.h\"\n    7: #include \"Falcor/Core/API/Texture.h\"\n    8  #include \"Falcor/Utils/StringUtils.h\"\n    9  \n   ..\n   34  std::vector<unsigned char> convertToRGBA(ResourceFormat format, uint32_t width, uint32_t height, const void* pData);\n   35  \n   36: /** Converts 96bpp to 128bpp RGBA without clamping.\n   37      Note that we can't use FreeImage_ConvertToRGBAF() as it clamps to [0,1].\n   38  */\n   ..\n   41  \n   42  FREE_IMAGE_FORMAT toFreeImageFormat(Bitmap::FileFormat fmt);\n   43: FREE_IMAGE_TYPE getImageType(uint32_t bytesPerPixel);\n   44  \n   45  }  // namespace Falcor\n\n/home/max/dev/Lava/src/Falcor/Utils/Image/DDSHeader.h:\n   35          struct DdsHeader\n   36          {\n   37:             struct PixelFormat\n   38              {\n   39                  uint32_t structSize;\n   ..\n   47  \n   48                  // flags\n   49:                 static const uint32_t kAlphaPixelsMask = 0x1;\n   50                  static const uint32_t kAlphaMask = 0x2;\n   51                  static const uint32_t kFourCCFlag = 0x4;\n   ..\n   62              union\n   63              {\n   64:                 uint32_t pitch;\n   65                  uint32_t linearSize;\n   66              };\n   ..\n   69              uint32_t mipCount;\n   70              uint32_t reserved[11];\n   71:             PixelFormat    pixelFormat;\n   72              uint32_t caps[4];\n   73              uint32_t reserved2;\n   ..\n   77              static const uint32_t kHeightMask = 0x2;\n   78              static const uint32_t kWidthMask = 0x4;\n   79:             static const uint32_t kPitchMask = 0x8;\n   80:             static const uint32_t kPixelFormatMask = 0x1000;\n   81              static const uint32_t kMipCountMask = 0x20000;\n   82              static const uint32_t kLinearSizeMask = 0x80000;\n\n/home/max/dev/Lava/src/Falcor/Utils/Image/LTX_Bitmap.cpp:\n   39  #include \"LTX_BitmapUtils.h\"\n   40  \n   41: #include \"Falcor/Core/API/Texture.h\"\n   42: #include \"Falcor/Core/API/SparseResourceManager.h\"\n   43  #include \"Falcor/Utils/Debug/debug.h\"\n   44  \n   ..\n  228      LOG_WARN(\"OIIO is float: %s\", spec.format.is_floating_point() ? \"YES\" : \"NO\");\n  229      LOG_WARN(\"OIIO basetype %u\", oiio::TypeDesc::BASETYPE(spec.format.basetype));\n  230:     LOG_WARN(\"OIIO bytes per pixel %zu\", spec.pixel_bytes());\n  231      LOG_WARN(\"OIIO nchannels %i\", spec.nchannels);\n  232      \n  ...\n  293      uint32_t dstChannelBits = getNumChannelBits(dstFormat, 0);\n  294  \n  295:     size_t srcBytesPerPixel = spec.pixel_bytes();\n  296:     size_t dstBytesPerPixel = dstChannelCount * dstChannelBits / 8;\n  297  \n  298:     size_t tileWidthStride = pageDims.x * dstBytesPerPixel;\n  299:     size_t bufferWidthStride = dstDims.x * dstBytesPerPixel; //srcBytesPerPixel;\n  300  \n  301      uint32_t pagesNumX = dstDims.x / pageDims.x;\n  ...\n  309      };\n  310  \n  311:     size_t partialTileWidthStride = partialPageDims.x * dstBytesPerPixel;\n  312  \n  313      if( partialPageDims.x != 0) pagesNumX++;\n  ...\n  316  \n  317      std::vector<unsigned char> zero_buff(65536, 0);\n  318:     std::vector<unsigned char> tiles_buffer(srcDims.x * pageDims.y * dstBytesPerPixel);\n  319  \n  320      // write mip level 0\n  ...\n  335  \n  336              oiio::ROI roi(0, dstDims.x, y_begin, y_begin + writeLinesCount, z, z + 1, /*chans:*/ 0, dstChannelCount);\n  337:             srcBuff.get_pixels(roi, spec.format, tiles_buffer.data(), oiio::AutoStride, oiio::AutoStride, oiio::AutoStride);\n  338  \n  339              unsigned char *pBufferData = tiles_buffer.data();\n  ...\n  410          LOG_WARN(\"Partial page dims: %u %u %u\", partialPageDims.x, partialPageDims.y, partialPageDims.z);\n  411  \n  412:         partialTileWidthStride = partialPageDims.x * dstBytesPerPixel;\n  413  \n  414:         tiles_buffer.resize(mipLevelWidth * mipLevelHeight * dstBytesPerPixel);\n  415:         bufferWidthStride = mipLevelWidth * dstBytesPerPixel;\n  416  \n  417          oiio::ROI roi(0, mipLevelWidth, 0, mipLevelHeight, 0, 1, 0, dstChannelCount);\n  418:         oiio::ImageBufAlgo::resize(srcBuff, \"\", 0, roi).get_pixels(roi, spec.format, tiles_buffer.data(), oiio::AutoStride, oiio::AutoStride, oiio::AutoStride);\n  419  \n  420          for(uint32_t z = 0; z < pagesNumZ; z++) {\n\n/home/max/dev/Lava/src/Falcor/Utils/Image/LTX_Bitmap.h:\n   66      /** Create a new object from file.\n   67          \\param[in] filename Filename, including a path. If the file can't be found relative to the current directory, Falcor will search for it in the common directories.\n   68:         \\param[in] isTopDown Control the memory layout of the image. If true, the top-left pixel is the first pixel in the buffer, otherwise the bottom-left pixel is first.\n   69          \\return If loading was successful, a new object. Otherwise, nullptr.\n   70      */\n   ..\n  111      uint8_t getMipLevelsCount() const { return mHeader.mipLevelsCount; }\n  112  \n  113:     /** Get the number of bytes per pixel\n  114      */\n  115      ResourceFormat getFormat() const { return mHeader.format; }\n\n/home/max/dev/Lava/src/Falcor/Utils/Image/LTX_BitmapUtils.cpp:\n   29      }\n   30  \n   31:     uint8_t srcPixelBytesStride = srcChannelCount * srcChannelBitsCount / 8;\n   32:     uint8_t dstPixelBytesStride = dstChannelCount * dstChannelBitsCount / 8;\n   33  \n   34:     size_t numPixels = srcDataSize / srcPixelBytesStride;\n   35  \n   36:     unsigned char* lastSrcPixelAddr = data.data() + srcDataSize - srcPixelBytesStride;\n   37:     unsigned char* lastDstPixelAddr = data.data() + dstDataSize - dstPixelBytesStride;\n   38      \n   39:     for(size_t i = 0; i < numPixels; i++) {\n   40:         memcpy(lastDstPixelAddr, lastSrcPixelAddr, srcPixelBytesStride);\n   41  \n   42          // now fill aplha value\n   43          // TODO: this works only for 8bit images. Need a separate cycle for other formats to set proper full missing alpha channel\n   44:         memset(lastDstPixelAddr + srcPixelBytesStride, 255, dstPixelBytesStride - srcPixelBytesStride);\n   45          \n   46:         lastSrcPixelAddr -= srcPixelBytesStride;\n   47:         lastDstPixelAddr -= dstPixelBytesStride;\n   48      }\n   49  \n\n/home/max/dev/Lava/src/Falcor/Utils/Image/LTX_BitmapUtils.h:\n    5  #include \"LTX_Bitmap.h\"\n    6  #include \"FreeImage.h\"\n    7: #include \"Falcor/Core/API/Texture.h\"\n    8  #include \"Falcor/Utils/StringUtils.h\"\n    9  \n\n/home/max/dev/Lava/src/Falcor/Utils/Math/BitTricks.slang:\n   34      So, deinterleave_16bit(interleave_16bit(x)) == x should hold true.\n   35  \n   36:     TODO: Make this a host/device shared header, ensure code compiles on the host.\n   37      TODO: Add optimized 8-bit and 2x8-bit interleaving functions.\n   38:     TODO: Use NvApi intrinsics to optimize the code on NV.\n   39  */\n   40  \n\n/home/max/dev/Lava/src/Falcor/Utils/Math/CubicSpline.h:\n   95          {\n   96              // The following code is based on the article from http://graphicsrunner.blogspot.co.uk/2008/05/camera-animation-part-ii.html\n   97:             // http://math.stackexchange.com/questions/62360/natural-cubic-splines-vs-piecewise-hermite-splines\n   98              // https://en.wikipedia.org/wiki/Tridiagonal_matrix_algorithm\n   99              if (pointCount >= 2)\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/FalcorMath.h:\n  199  \n  200          // Map to radius 1 hemisphere\n  201:         float phi = uv.y * 2.0f * (float)M_PI;\n  202          float t = 1.0f - uv.x;\n  203          float s = sqrt(1.0f - t * t);\n  ...\n  210  \n  211          // Map to radius 1 hemisphere\n  212:         float phi = uv.y * 2.0f * (float)M_PI;\n  213          float t = sqrt(1.0f - uv.x);\n  214          float s = sqrt(1.0f - t * t);\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/MathConstants.slangh:\n   35  \n   36      Note the possible differences between declaring constants using static\n   37:     float vs macro definitions. The compiler may treat these differently with\n   38:     respect to what precision is used for compile-time constant propagation.\n   39      Slang currently uses fp32 for constant propagation. We get higher\n   40      precision using the pre-evaluated constants below. Ideally, all\n   41:     compile-time constants should be evaluated at fp64 or higher precision.\n   42  */\n   43  \n   ..\n   50  #define M_LN2               0.693147180559945309417 // ln(2)\n   51  #define M_LN10              2.30258509299404568402  // ln(10)\n   52: #define M_PI                3.14159265358979323846  // pi\n   53: #define M_PI_2              1.57079632679489661923  // pi/2\n   54: #define M_PI_4              0.785398163397448309616 // pi/4\n   55: #define M_1_PI              0.318309886183790671538 // 1/pi\n   56: #define M_2_PI              0.636619772367581343076 // 2/pi\n   57: #define M_2_SQRTPI          1.12837916709551257390  // 2/sqrt(pi)\n   58  #define M_SQRT2             1.41421356237309504880  // sqrt(2)\n   59  #define M_SQRT1_2           0.707106781186547524401 // 1/sqrt(2)\n   60  \n   61  // Additional constants\n   62: #define M_2PI               6.28318530717958647693  // 2pi\n   63: #define M_4PI               12.5663706143591729539  // 4pi\n   64: #define M_4_PI              1.27323954473516268615  // 4/pi\n   65: #define M_1_2PI             0.159154943091895335769 // 1/2pi\n   66: #define M_1_4PI             0.079577471545947667884 // 1/4pi\n   67: #define M_SQRTPI            1.77245385090551602730  // sqrt(pi)\n   68  #define M_1_SQRT2           0.707106781186547524401 // 1/sqrt(2)\n   69  \n\n/home/max/dev/Lava/src/Falcor/Utils/Math/MathHelpers.slang:\n   31      Included functionality (in order):\n   32  \n   33:     - Sherical coordinates mapping functions\n   34:     - Octahedral mapping functions\n   35      - Sampling functions (disk, sphere, triangle etc.)\n   36      - Misc stuff (matrix inversion, bounding cones etc.)\n   ..\n   38  */\n   39  \n   40: // Include math constants (M_PI etc.). These are for use in this file only,\n   41  // as macro definitions are not exported from a Slang module.\n   42  #include \"Utils/Math/MathConstants.slangh\"\n   ..\n   65      p = normalize(p);\n   66      float2 sph;\n   67:     sph.x = acos(p.z) * M_1_PI;\n   68:     sph.y = atan2(-p.y, -p.x) * M_1_2PI + 0.5f;\n   69      return sph;\n   70  }\n   71  \n   72  /** Converts Cartesian coordinates to spherical coordinates (radians).\n   73:     'theta' is the polar angle (inclination) between the +z axis and the vector from origin to p, in the range [0,pi].\n   74:     'phi' is the azimuthal angle from the +x axis in the xy-plane, in the range [0,2pi].\n   75      \\param[in] p Cartesian coordinates (x,y,z).\n   76      \\return Spherical coordinates (theta,phi).\n   ..\n   81      float2 sph;\n   82      sph.x = acos(p.z);\n   83:     sph.y = atan2(-p.y, -p.x) + M_PI;\n   84      return sph;\n   85  }\n   86  \n   87  /** Convert world space direction to (u,v) coord in latitude-longitude map (unsigned normalized).\n   88:     The map is centered around the -z axis and wrapping around in clockwise order (left to right).\n   89      \\param[in] dir World space direction (unnormalized).\n   90      \\return Position in latitude-longitude map in [0,1] for each component.\n   ..\n   94      float3 p = normalize(dir);\n   95      float2 uv;\n   96:     uv.x = atan2(p.x, -p.z) * M_1_2PI + 0.5f;\n   97:     uv.y = acos(p.y) * M_1_PI;\n   98      return uv;\n   99  }\n  ...\n  101  /******************************************************************************\n  102  \n  103:     Octahedral mapping\n  104  \n  105      The center of the map represents the +z axis and its corners -z.\n  ...\n  109  \n  110      For details refer to:\n  111:     - Clarberg 2008, \"Fast Equal-Area Mapping of the (Hemi)Sphere using SIMD\".\n  112      - Cigolle et al. 2014, \"Survey of Efficient Representations for Independent Unit Vectors\".\n  113  \n  ...\n  175      // Compute p = (u,v) in the first quadrant.\n  176      float2 p;\n  177:     p.y = r * phi * M_2_PI;\n  178      p.x = r - p.y;\n  179  \n  ...\n  197      float r = 1.f - abs(d);\n  198  \n  199:     // Compute phi in [0,pi/2] (first quadrant) and sin/cos without branching.\n  200      // TODO: Analyze fp32 precision, do we need a small epsilon instead of 0.0 here?\n  201:     float phi = (r > 0.f) ? ((abs(p.y) - abs(p.x)) / r + 1.f) * M_PI_4 : 0.f;\n  202  \n  203      // Convert to Cartesian coordinates. Note that sign(x)=0 for x=0, but that's fine here.\n  ...\n  224      float2 p;\n  225      float r = sqrt(u.x);\n  226:     float phi = M_2PI * u.y;\n  227      p.x = r * cos(phi);\n  228      p.y = r * sin(phi);\n  ...\n  236  float3 sample_sphere(float2 u)\n  237  {\n  238:     float phi = M_2PI * u.y;\n  239      float cosTheta = 1.0f - 2.0f * u.x;\n  240      float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));\n  ...\n  242  }\n  243  \n  244: /** Uniform sampling of the unit disk using Shirley's concentric mapping.\n  245      \\param[in] u Uniform random numbers in [0,1)^2.\n  246      \\return Sampled point on the unit disk.\n  ...\n  254      {\n  255          r = u.x;\n  256:         phi = (u.y / u.x) * M_PI_4;\n  257      } \n  258      else \n  259      {\n  260          r = u.y;\n  261:         phi = M_PI_2 - (u.x / u.y) * M_PI_4;\n  262      }\n  263      return r * float2(cos(phi), sin(phi));\n  264  }\n  265  \n  266: /** Cosine-weighted sampling of the hemisphere using Shirley's concentric mapping.\n  267      \\param[in] u Uniform random numbers in [0,1)^2.\n  268:     \\param[out] pdf Probability density of the sampled direction (= cos(theta)/pi).\n  269      \\return Sampled direction in the local frame (+z axis up).\n  270  */\n  ...\n  273      float2 d = sample_disk_concentric(u);\n  274      float z = sqrt(max(0.f, 1.f - dot(d, d)));\n  275:     pdf = z * M_1_PI;\n  276      return float3(d, z);\n  277  }\n  ...\n  279  /** Cosine-weighted sampling of the hemisphere using a polar coordinates.\n  280      \\param[in] u Uniform random numbers in [0,1)^2.\n  281:     \\param[out] pdf Probability density of the sampled direction (= cos(theta)/pi).\n  282      \\return Sampled direction in the local frame (+z axis up).\n  283  */\n  ...\n  286      float3 p;\n  287      float r = sqrt(u.x);\n  288:     float phi = M_2PI * u.y;\n  289      p.x = r * cos(phi);\n  290      p.y = r * sin(phi);\n  291      p.z = sqrt(1.f - u.x);\n  292:     pdf = p.z * M_1_PI;\n  293      return p;\n  294  }\n  ...\n  402          float x = distSqr - d;\n  403  \n  404:         // Check if distance is negative, in which case the AABB can't be bounded by a cone and we return a cone that covers the whole sphere (theta = pi).\n  405          if (x < 1e-5)\n  406          {\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/PackedFormats.h:\n   69  }\n   70  \n   71: /** Encode a normal packed as 2x 16-bit snorms in the octahedral mapping.\n   72  */\n   73  inline uint encodeNormal2x16(float3 normal) {\n   ..\n   76  }\n   77  \n   78: /** Decode a normal packed as 2x 16-bit snorms in the octahedral mapping.\n   79  */\n   80  inline float3 decodeNormal2x16(uint packedNormal) {\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/PackedFormats.slang:\n   30  import Utils.Color.ColorHelpers;\n   31  \n   32: /** Encode a normal packed as 2x 16-bit snorms in the octahedral mapping.\n   33  */\n   34  uint encodeNormal2x16(float3 normal)\n   ..\n   38  }\n   39  \n   40: /** Decode a normal packed as 2x 16-bit snorms in the octahedral mapping.\n   41  */\n   42  float3 decodeNormal2x16(uint packedNormal)\n   ..\n   70  \n   71      The log-luminance is encoded with 14 bits and chroma with 9 bits each.\n   72:     This was empirically more accurate than using 8 bit chroma.\n   73      Black (all zeros) is handled exactly.\n   74  */\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/SphericalHarmonics.slang:\n   45  {\n   46      // Standard real SH basis. See https://en.wikipedia.org/wiki/Table_of_spherical_harmonics\n   47:     // Note that in Appendix A2 of Sloan 2008, \"Stupid Spherical Harmonics (SH) Tricks\",\n   48      // the signs are reversed for basis functions with odd m. We're not using Sloan's definitions.\n   49      // TODO: More general implementation that supports higher degrees.\n   ..\n   51      {\n   52      // l = 0\n   53:     case 0: return 1.f / (2.f * M_SQRT_PIf);                // m = 0\n   54      // l = 1\n   55:     case 1: return p.y * sqrt(3.f) / (2.f * M_SQRT_PIf);            // m =-1\n   56:     case 2: return p.z * sqrt(3.f) / (2.f * M_SQRT_PIf);            // m = 0\n   57:     case 3: return p.x * sqrt(3.f) / (2.f * M_SQRT_PIf);            // m = 1\n   58      // l = 2\n   59:     case 4: return p.x * p.y * sqrt(15.f) / (2.f * M_SQRT_PIf);                 // m =-2\n   60:     case 5: return p.y * p.z * sqrt(15.f) / (2.f * M_SQRT_PIf);                 // m =-1\n   61:     case 6: return (3.f * p.z * p.z - 1.f) * sqrt(5.f) / (4.f * M_SQRT_PIf);    // m = 0\n   62:     case 7: return p.x * p.z * sqrt(15.f) / (2.f * M_SQRT_PIf);                 // m = 1\n   63:     case 8: return (p.x * p.x - p.y * p.y) * sqrt(15.f) / (4.f * M_SQRT_PIf);   // m = 2\n   64      // l = 3\n   65:     case 9:  return p.y * (3.f * p.x * p.x - p.y * p.y) * sqrt(70.f) / (8.f * M_SQRT_PIf);  // m =-3\n   66:     case 10: return p.x * p.y * p.z * sqrt(105.f) / (2.f * M_SQRT_PIf);                     // m =-2\n   67:     case 11: return p.y * (5.f * p.z * p.z - 1.f) * sqrt(42.f) / (8.f * M_SQRT_PIf);        // m =-1\n   68:     case 12: return p.z * (5.f * p.z * p.z - 3.f) * sqrt(7.f) / (4.f * M_SQRT_PIf);         // m = 0\n   69:     case 13: return p.x * (5.f * p.z * p.z - 1.f) * sqrt(42.f) / (8.f * M_SQRT_PIf);        // m = 1\n   70:     case 14: return p.z * (p.x * p.x - p.y * p.y) * sqrt(105.f) / (4.f * M_SQRT_PIf);       // m = 2\n   71:     case 15: return p.x * (p.x * p.x - 3.f * p.y * p.y) * sqrt(70.f) / (8.f * M_SQRT_PIf);  // m = 3\n   72      }   \n   73      return 0.f;\n\n/home/max/dev/Lava/src/Falcor/Utils/Perception/Experiment.h:\n   35      {\n   36          /** Description of an experiment: Any information that could be useful \n   37:             in future, in case an experiment grows while piloting or when \n   38              between-experiment analysis becomes necessary later.\n   39          */\n   ..\n   63              void addCondition(ConditionParameter newConditionParam, ExperimentalDesignParameter newExpParam);\n   64  \n   65:             /** Pick next condition\n   66              */\n   67              void chooseNextCondition();\n\n/home/max/dev/Lava/src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.cpp:\n   43      HaltonSamplePattern::HaltonSamplePattern(uint32_t sampleCount) {\n   44          // FIXME: Support arbitrary sample counts by computing the sequence instead of using a table\n   45:         if (sampleCount < 1 || sampleCount > 8) logWarning(\"HaltonSamplePattern() requires sampleCount in the range [1,8]. Clamping to that range.\");\n   46          mSampleCount = std::max(1u, std::min(8u, sampleCount));\n   47      }\n\n/home/max/dev/Lava/src/Falcor/Utils/Sampling/Pseudorandom/LCG.slang:\n   34      Note: Only for basic applications. The generator has poor statistical\n   35      properties and is sensitive to good seeding. If many parallel generators\n   36:     are used (e.g. one per pixel) there will be significant correlation\n   37      between the generated pseudorandom sequences. In those cases, it is\n   38      recommended to use one of the generators with larger state.\n\n/home/max/dev/Lava/src/Falcor/Utils/Sampling/Pseudorandom/Xoshiro.slang:\n   67  \n   68  /** Jump function for the generator. It is equivalent to 2^64 calls to nextRandom().\n   69:     It can be used to generate 2^64 non-overlapping subsequences for parallel computations.\n   70  */\n   71  void jump(inout Xoshiro128StarStar rng)\n\n/home/max/dev/Lava/src/Falcor/Utils/Sampling/SampleGenerator.slang:\n   34      size of the 'SampleGenerator' type may vary depending on their state size.\n   35  \n   36:     If SAMPLE_GENERATOR_TYPE is not defined, a compile-time error is printed.\n   37  \n   38      The 'SampleGeneratorPadded' type holds a SampleGenerator plus additional\n\n/home/max/dev/Lava/src/Falcor/Utils/Sampling/TinyUniformSampleGenerator.slang:\n   42      /** Create sample generator.\n   43      */\n   44:     static TinyUniformSampleGenerator create(uint2 pixel, uint sampleNumber)\n   45      {\n   46          TinyUniformSampleGenerator sampleGenerator;\n   47  \n   48          // Use block cipher to generate a pseudorandom initial seed.\n   49:         uint seed = blockCipherTEA(interleave_32bit(pixel), sampleNumber).x;\n   50          sampleGenerator.rng = createLCG(seed);\n   51          return sampleGenerator;\n\n/home/max/dev/Lava/src/Falcor/Utils/Sampling/UniformSampleGenerator.slang:\n   42      /** Create sample generator.\n   43      */\n   44:     static UniformSampleGenerator create(uint2 pixel, uint sampleNumber)\n   45      {\n   46          UniformSampleGenerator sampleGenerator;\n   47  \n   48          // Use SplitMix64 generator to generate a good pseudorandom initial state.\n   49:         // The pixel coord is expected to be max 28 bits (16K^2 is the resource limit in D3D12).\n   50          // The sample number is expected to be practically max ~28 bits, e.g. 16spp x 16M samples.\n   51          // As long as both stay <= 32 bits, we will always have a unique initial seed.\n   ..\n   53          // but it is very unlikely. For example, with these most extreme parameters of \n   54          // 2^56 sequences of length L, the probability of overlap is P(overlap) = L*2^-16.\n   55:         SplitMix64 rng = createSplitMix64(interleave_32bit(pixel), sampleNumber);\n   56          uint64_t s0 = nextRandom64(rng);\n   57          uint64_t s1 = nextRandom64(rng);\n\n/home/max/dev/Lava/src/Falcor/Utils/Scripting/Console.cpp:\n  129  Console& Console::instance()\n  130  {\n  131:     static std::unique_ptr<Console> pInstance;\n  132:     if (!pInstance) pInstance = std::unique_ptr<Console>(new Console());\n  133:     return *pInstance;\n  134  }\n  135  \n\n/home/max/dev/Lava/src/Falcor/Utils/StringUtils.h:\n  303          auto v = splitString(typeName.substr(6), \"::\");\n  304  #else\n  305:         int status = -4; // some arbitrary value to eliminate the compiler warning\n  306          char * demangled = abi::__cxa_demangle(typeid(*ptr).name(), NULL, NULL, &status);\n  307          if(!demangled) {\n  ...\n  323          auto v = splitString(typeName.substr(5), \"::\");\n  324  #else\n  325:         int status = -4; // some arbitrary value to eliminate the compiler warning\n  326          char * demangled = abi::__cxa_demangle(typeid(e).name(), NULL, NULL, &status);\n  327          if(!demangled) {\n\n/home/max/dev/Lava/src/Falcor/Utils/ThreadPool.cpp:\n   56          std::unique_lock<std::mutex> lock(queue_mutex);\n   57  \n   58:         // don't allow enqueueing after stopping the pool\n   59          if(stop)\n   60              throw std::runtime_error(\"enqueue on stopped ThreadPool\");\n\n/home/max/dev/Lava/src/Falcor/Utils/Timing/Profiler.cpp:\n   31  #include \"stdafx.h\"\n   32  #include \"Profiler.h\"\n   33: #include \"Falcor/Core/API/Device.h\"\n   34: #include \"Falcor/Core/API/GpuTimer.h\"\n   35  \n   36  #ifdef _WIN32\n   37: #define USE_PIX\n   38: #include \"WinPixEventRuntime/Include/WinPixEventRuntime/pix3.h\"\n   39  #endif\n   40  \n   ..\n  102          }\n  103          #ifdef _WIN32\n  104:         if (is_set(flags, Flags::Pix)) {\n  105:             PIXBeginEvent((ID3D12GraphicsCommandList*)gpDevice->getRenderContext()->getLowLevelData()->getCommandList(), PIX_COLOR(0, 0, 0), name.c_str());\n  106          }\n  107          #endif\n  ...\n  125          }\n  126          #ifdef _WIN32\n  127:         if (is_set(flags, Flags::Pix)) {\n  128:             PIXEndEvent((ID3D12GraphicsCommandList*)gpDevice->getRenderContext()->getLowLevelData()->getCommandList());\n  129          }\n  130          #endif\n  ...\n  175              if (pData->stepNr == _PROFILING_LOG_BATCH_SIZE) {\n  176                  std::ostringstream logOss, fileOss;\n  177:                 logOss << \"dumping \" << \"profile_\" << pData->name << \"_\" << pData->filesWritten;\n  178                  logInfo(logOss.str());\n  179                  fileOss << \"profile_\" << pData->name << \"_\" << pData->filesWritten++;\n  ...\n  220          for (EventData* pData : sRegisteredEvents) {\n  221              std::ostringstream logOss, fileOss;\n  222:             logOss << \"dumping \" << \"profile_\" << pData->name << \"_\" << pData->filesWritten;\n  223              logInfo(logOss.str());\n  224              fileOss << \"profile_\" << pData->name << \"_\" << pData->filesWritten++;\n\n/home/max/dev/Lava/src/Falcor/Utils/Timing/Profiler.h:\n   34  \n   35  #include \"CpuTimer.h\"\n   36: #include \"Falcor/Core/API/GpuTimer.h\"\n   37  \n   38  namespace Falcor {\n   ..\n   46      This class uses the most accurately available CPU and GPU timers to profile given events. It automatically creates event hierarchies based on the order of the calls made.\n   47      This class uses a double-buffering scheme for GPU profiling to avoid GPU stalls.\n   48:     ProfilerEvent is a wrapper class which together with scoping can simplify event profiling.\n   49  */\n   50  class dlldecl Profiler {\n   ..\n   67          None = 0x0,\n   68          Internal = 0x1,\n   69:         Pix = 0x2,\n   70  \n   71:         Default = Internal | Pix\n   72      };\n   73  \n   ..\n  168  \n  169  /** Helper class for starting and ending profiling events.\n  170:     The class C'tor and D'tor call Profiler#StartEvent() and Profiler#EndEvent(). This class can be used with scoping to simplify event creation.\\n\n  171      The PROFILE macro wraps creation of local ProfilerEvent objects when profiling is enabled, and does nothing when profiling is disabled, so should be used instead of directly creating ProfilerEvent objects.\n  172  */\n\n/home/max/dev/Lava/src/Falcor/Utils/UI/DebugDrawer.cpp:\n   29  #include \"DebugDrawer.h\"\n   30  #include \"Falcor/Utils/Math/AABB.h\"\n   31: #include \"Falcor/Core/API/RenderContext.h\"\n   32  #include \"Falcor/Scene/Camera/Camera.h\"\n   33  \n\n/home/max/dev/Lava/src/Falcor/Utils/UI/DebugDrawer.h:\n   29  #define SRC_FACLOR_UTILS_UI_DEBUGDRAWER_H_\n   30  \n   31: #include \"Falcor/Core/API/VAO.h\"\n   32  \n   33  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/Utils/UI/Font.cpp:\n   33  #include \"Falcor/stdafx.h\"\n   34  #include \"Font.h\"\n   35: #include \"Falcor/Core/API/Texture.h\"\n   36  #include \"Falcor/Utils/Debug/debug.h\"\n   37  \n\n/home/max/dev/Lava/src/Falcor/Utils/UI/Font.h:\n   27   **************************************************************************/\n   28  #pragma once\n   29: #include \"Core/API/Texture.h\"\n   30  \n   31  namespace Falcor {\n   ..\n   52          struct CharTexCrdDesc {\n   53              float2 topLeft; ///< Non-normalized origin of the character in the texture\n   54:             float2 size;    ///< Size in pixels of the character. This should be used to initialize the texture-coordinate when rendering.\n   55          };\n   56  \n   ..\n   66          }\n   67  \n   68:         /** Get the height in pixels of the font\n   69          */\n   70          float getFontHeight() const { return mFontHeight; }\n   71  \n   72:         /** Get the width in pixels of the tab character\n   73          */\n   74          float getTabWidth() const { return mTabWidth; }\n   75  \n   76:         /** Get the spacing in pixels between 2 characters. This is measured as (start-of-char-2) - (start-of-char-1).\n   77          */\n   78          float getLettersSpacing() const { return mLetterSpacing; }\n\n/home/max/dev/Lava/src/Falcor/Utils/UI/Gui.cpp:\n   30  #include \"imgui/imgui.h\"\n   31  #include \"UserInput.h\"\n   32: #include \"Falcor/Core/API/RenderContext.h\"\n   33  #include \"glm/gtc/type_ptr.hpp\"\n   34  #include \"Falcor/Utils/StringUtils.h\"\n   ..\n   49          void init(Gui* pGui, float scaleFactor);\n   50          void createVao(uint32_t vertexCount, uint32_t indexCount);\n   51:         void compileFonts();\n   52  \n   53          // Helper to create multiple inline text boxes\n   ..\n   72          Vao::SharedPtr mpVao;\n   73          VertexLayout::SharedPtr mpLayout;\n   74:         GraphicsState::SharedPtr mpPipelineState;\n   75          uint32_t mGroupStackSize = 0;\n   76  \n   77          GraphicsProgram::SharedPtr mpProgram;\n   78          GraphicsVars::SharedPtr mpProgramVars;\n   79:         std::vector<Texture::SharedPtr> mpImages;\n   80          ParameterBlockReflection::BindLocation mGuiImageLoc;\n   81          float mScaleFactor = 1.0f;\n   ..\n  186          style.ScaleAllSizes(scaleFactor);\n  187  \n  188:         // Create the pipeline state cache\n  189:         mpPipelineState = GraphicsState::create(mpDevice);\n  190  \n  191          // Create the program\n  ...\n  193          mpProgram = GraphicsProgram::createFromFile(mpDevice, \"Utils/UI/Gui.slang\", \"vs\", \"ps\");\n  194          mpProgramVars = GraphicsVars::create(mpDevice, mpProgram->getReflector());\n  195:         mpPipelineState->setProgram(mpProgram);\n  196  \n  197          // Add the default font\n  ...\n  202          BlendState::Desc blendDesc(mpDevice);\n  203          blendDesc.setRtBlend(0, true).setRtParams(0, BlendState::BlendOp::Add, BlendState::BlendOp::Add, BlendState::BlendFunc::SrcAlpha, BlendState::BlendFunc::OneMinusSrcAlpha, BlendState::BlendFunc::OneMinusSrcAlpha, BlendState::BlendFunc::Zero);\n  204:         mpPipelineState->setBlendState(BlendState::create(blendDesc));\n  205  \n  206          // Create the rasterizer state\n  207          RasterizerState::Desc rsDesc;\n  208          rsDesc.setFillMode(RasterizerState::FillMode::Solid).setCullMode(RasterizerState::CullMode::None).setScissorTest(true).setDepthClamp(false);\n  209:         mpPipelineState->setRasterizerState(RasterizerState::create(rsDesc));\n  210  \n  211          // Create the depth-stencil state\n  212          DepthStencilState::Desc dsDesc;\n  213          dsDesc.setDepthEnabled(false);\n  214:         mpPipelineState->setDepthStencilState(DepthStencilState::create(dsDesc));\n  215  \n  216          // Create the VAO\n  ...\n  244          std::vector<Buffer::SharedPtr> pVB(1);\n  245          pVB[0] = createVB ? Buffer::create(mpDevice, requiredVbSize + sizeof(ImDrawVert) * 1000, Buffer::BindFlags::Vertex, Buffer::CpuAccess::Write, nullptr) : mpVao->getVertexBuffer(0);\n  246:         Buffer::SharedPtr pIB = createIB ? Buffer::create(mpDevice, requiredIbSize, Buffer::BindFlags::Index, Buffer::CpuAccess::Write, nullptr) : mpVao->getIndexBuffer();\n  247:         mpVao = Vao::create(Vao::Topology::TriangleList, mpLayout, pVB, pIB, ResourceFormat::R16Uint);\n  248      }\n  249  \n  250:     void GuiImpl::compileFonts() {\n  251          uint8_t* pFontData;\n  252          int32_t width, height;\n  ...\n  405          ImGui::PushID(label);\n  406          ImGui::Dummy({ size.x, size.y });\n  407:         ImGui::PopID();\n  408      }\n  409  \n  ...\n  538          }\n  539  \n  540:         if (fitWindow) ImGui::PopItemWidth();\n  541      }\n  542  \n  ...\n  593          ImGui::PushID(label);\n  594          if (sameLine) ImGui::SameLine();\n  595:         mpImages.push_back(pTex);\n  596          float aspectRatio = maintainRatio ? (static_cast<float>(pTex->getHeight()) / static_cast<float>(pTex->getWidth())) : 1.0f;\n  597:         ImGui::Image(reinterpret_cast<ImTextureID>(mpImages.size()), { size.x, maintainRatio ? size.x  * aspectRatio : size.y });\n  598:         ImGui::PopID();\n  599      }\n  600  \n  601      bool GuiImpl::addImageButton(const char label[], const Texture::SharedPtr& pTex, float2 size, bool maintainRatio, bool sameLine) {\n  602          assert(pTex);\n  603:         mpImages.push_back(pTex);\n  604          if (sameLine) ImGui::SameLine();\n  605          float aspectRatio = maintainRatio ? (static_cast<float>(pTex->getHeight()) / static_cast<float>(pTex->getWidth())) : 1.0f;\n  606:         return ImGui::ImageButton(reinterpret_cast<ImTextureID>(mpImages.size()), { size.x, maintainRatio ? size.x  * aspectRatio : size.y });\n  607      }\n  608  \n  ...\n  613          bool b = ImGui::DragScalar(label, imguiType, &var, step, &minVal, &maxVal, displayFormat);\n  614          var = glm::clamp(var, T(minVal), T(maxVal));\n  615:         ImGui::PopItemWidth();\n  616          return b;\n  617      }\n  ...\n  638          if (sameLine) ImGui::SameLine();\n  639          bool b = ImGui::SliderScalar(label, imguiType, &var, &minVal, &maxVal, displayFormat);\n  640:         ImGui::PopItemWidth();\n  641          return b;\n  642      }\n  ...\n  663          bool b = ImGui::DragScalarN(label, imguiType, glm::value_ptr(var), var.length(), step, &minVal, &maxVal, displayFormat);\n  664          var = glm::clamp(var, T(minVal), T(maxVal));\n  665:         ImGui::PopItemWidth();\n  666          return b;\n  667      }\n  ...\n  688          if (sameLine) ImGui::SameLine();\n  689          bool b = ImGui::SliderScalarN(label, imguiType, glm::value_ptr(var), var.length(), &minVal, &maxVal, displayFormat);\n  690:         ImGui::PopItemWidth();\n  691          return b;\n  692      }\n  ...\n  772      }\n  773  \n  774:     float4 Gui::pickUniqueColor(const std::string& key) {\n  775          union hashedValue {\n  776              size_t st;\n  ...\n  793          ImFont* pFont = ImGui::GetIO().Fonts->AddFontFromFileTTF(fullpath.c_str(), size);\n  794          mpWrapper->mFontMap[name] = pFont;\n  795:         mpWrapper->compileFonts();\n  796      }\n  797  \n  ...\n  836          // Update the VAO\n  837          mpWrapper->createVao(pDrawData->TotalVtxCount, pDrawData->TotalIdxCount);\n  838:         mpWrapper->mpPipelineState->setVao(mpWrapper->mpVao);\n  839  \n  840          LOG_DBG(\"Gui::render 3\");\n  841          // Upload the data\n  842          ImDrawVert* pVerts = (ImDrawVert*)mpWrapper->mpVao->getVertexBuffer(0)->map(Buffer::MapType::WriteDiscard);\n  843:         uint16_t* pIndices = (uint16_t*)mpWrapper->mpVao->getIndexBuffer()->map(Buffer::MapType::WriteDiscard);\n  844  \n  845          LOG_DBG(\"Gui::render 4\");\n  ...\n  848              const ImDrawList* pCmdList = pDrawData->CmdLists[n];\n  849              memcpy(pVerts, pCmdList->VtxBuffer.Data, pCmdList->VtxBuffer.Size * sizeof(ImDrawVert));\n  850:             memcpy(pIndices, pCmdList->IdxBuffer.Data, pCmdList->IdxBuffer.Size * sizeof(ImDrawIdx));\n  851              pVerts += pCmdList->VtxBuffer.Size;\n  852:             pIndices += pCmdList->IdxBuffer.Size;\n  853          }\n  854          \n  ...\n  856          mpWrapper->mpVao->getVertexBuffer(0)->unmap();\n  857          mpWrapper->mpVao->getIndexBuffer()->unmap();\n  858:         mpWrapper->mpPipelineState->setFbo(pFbo);\n  859  \n  860          LOG_DBG(\"Gui::render 7\");\n  ...\n  869          \n  870          LOG_DBG(\"Gui::render 8\");\n  871:         mpWrapper->mpPipelineState->setViewport(0, vp);\n  872  \n  873          // Render command lists\n  ...\n  887                  if (pCmd->TextureId) {\n  888                      LOG_DBG(\"Gui::render 14\");\n  889:                     mpWrapper->mpProgramVars->setSrv(mpWrapper->mGuiImageLoc, (mpWrapper->mpImages[reinterpret_cast<size_t>(pCmd->TextureId) - 1])->getSRV());\n  890                      LOG_DBG(\"Gui::render 15\");\n  891                      mpWrapper->mpProgramVars[\"PerFrameCB\"][\"useGuiImage\"] = true;\n  ...\n  894                      mpWrapper->mpProgramVars[\"PerFrameCB\"][\"useGuiImage\"] = false;\n  895                  }\n  896:                 mpWrapper->mpPipelineState->setScissors(0, scissor);\n  897                  \n  898                  LOG_DBG(\"Gui::render 19\");\n  899:                 pContext->drawIndexed(mpWrapper->mpPipelineState.get(), mpWrapper->mpProgramVars.get(), pCmd->ElemCount, idxOffset, vtxOffset);\n  900                  idxOffset += pCmd->ElemCount;\n  901              }\n  ...\n  913  \n  914          LOG_DBG(\"Gui::render 22\");\n  915:         mpWrapper->mpImages.clear();\n  916      }\n  917  \n\n/home/max/dev/Lava/src/Falcor/Utils/UI/Gui.h:\n   33  #include \"Falcor/Core/Framework.h\"\n   34  //#include \"Falcor/Core/Program/ProgramVars.h\"\n   35: #include \"Falcor/Core/API/FBO.h\"\n   36: #include \"Falcor/Core/API/VAO.h\"\n   37: #include \"Falcor/Core/API/Texture.h\"\n   38  #include \"Falcor/Core/Program/GraphicsProgram.h\"\n   39  //#include \"Falcor/Core/State/GraphicsState.h\"\n   ..\n   57      struct is_vector<T, std::void_t<typename T::value_type>> : std::true_type {};\n   58  \n   59:     /** A class wrapping the external GUI library\n   60      */\n   61      class dlldecl Gui {\n   ..\n  125              /** Dummy object especially useful for spacing\n  126                  \\param[in] label. Name for id of item\n  127:                 \\param[in] size. size in pixels of the item.\n  128                  \\param[in] sameLine Optional. If set to true, the widget will appear on the same line as the previous widget\n  129              */\n  ...\n  131  \n  132              /** Display rectangle with specified color\n  133:                 \\param[in] size size in pixels of rectangle\n  134                  \\param[in] color Optional. color as an rgba float4\n  135                  \\param[in] filled Optional. If set to true, rectangle will be filled\n  ...\n  185              bool dragDropSource(const char label[], const char dataLabel[], const std::string& payloadString);\n  186  \n  187:             /** Destination area for dropping data in drag and drop of last gui item.\n  188                  \\param[in] dataLabel Named label needs to be the same as source datalabel to accept payload.\n  189                  \\param[in] payloadString Data sent from the drag and drop source\n  ...\n  247                  \\param[in] label. Name for id for item.\n  248                  \\param[in] pTex. Pointer to texture resource to draw in imgui\n  249:                 \\param[in] size. Size in pixels of the image to draw. 0 means fit to window\n  250                  \\param[in] sameLine Optional. If set to true, the widget will appear on the same line as the previous widget\n  251              */\n  ...\n  430              /** Create a new window\n  431                  \\param[in] pGui a pointer to the current Gui object\n  432:                 \\param[in] size size in pixels of the window\n  433:                 \\param[in] pos position in pixels of the window\n  434                  \\param[in] flags Window flags to apply\n  435              */\n  ...\n  439              /** Create a new window\n  440                  \\param[in] w a reference to a Widgets object\n  441:                 \\param[in] size size in pixels of the window\n  442:                 \\param[in] pos position in pixels of the window\n  443                  \\param[in] flags Window flags to apply\n  444              */\n  ...\n  467              void nextColumn();\n  468  \n  469:             /** Set the current window position in pixels\n  470:                 \\param[in] x horizontal window position in pixels\n  471:                 \\param[in] y vertical window position in pixels\n  472              */\n  473              void windowPos(uint32_t x, uint32_t y);\n  474  \n  475:             /**  Set the size of the current window in pixels\n  476:                 \\param[in] width Window width in pixels\n  477:                 \\param[in] height Window height in pixels\n  478              */\n  479              void windowSize(uint32_t width, uint32_t height);\n  ...\n  502          ~Gui();\n  503  \n  504:         static float4 pickUniqueColor(const std::string& key);\n  505  \n  506          /** Add a font\n\n/home/max/dev/Lava/src/Falcor/Utils/UI/PixelZoom.cpp:\n   27   **************************************************************************/\n   28  #include \"Falcor/stdafx.h\"\n   29: #include \"PixelZoom.h\"\n   30: #include \"Falcor/Core/API/RenderContext.h\"\n   31  #include \"Falcor/Utils/UI/UserInput.h\"\n   32  \n   33  namespace Falcor {\n   34  \n   35: static void clampToEdge(float2& pix, uint32_t width, uint32_t height, uint32_t offset) {\n   36:     float2 posOffset = pix + float2(offset, offset);\n   37:     float2 negOffset = pix - float2(offset, offset);\n   38  \n   39      //x\n   40      if (posOffset.x > width) {\n   41:         pix.x = pix.x - (posOffset.x - width);\n   42      } else if (negOffset.x < 0) {\n   43:         pix.x = pix.x - negOffset.x;\n   44      }\n   45  \n   46      //y\n   47      if (posOffset.y > height) {\n   48:         pix.y = pix.y - (posOffset.y - height);\n   49      } else if (negOffset.y < 0) {\n   50:         pix.y = pix.y - negOffset.y;\n   51      }\n   52  }\n   53  \n   54: PixelZoom::PixelZoom(std::shared_ptr<Device> pDevice, const Fbo* pBackbuffer): mpDevice(pDevice) {\n   55      onResizeSwapChain(pBackbuffer);\n   56  }\n   57  \n   58: PixelZoom::SharedPtr PixelZoom::create(std::shared_ptr<Device> pDevice, const Fbo* pBackbuffer) {\n   59:     return SharedPtr(new PixelZoom(pDevice, pBackbuffer));\n   60  }\n   61  \n   62: void PixelZoom::onResizeSwapChain(const Fbo* pBackbuffer) {\n   63      assert(pBackbuffer);\n   64      const Fbo::Desc& desc = pBackbuffer->getDesc();\n   ..\n   70  }\n   71  \n   72: void PixelZoom::render(RenderContext* pCtx, Fbo* backBuffer) {\n   73      if (mShouldZoom) {\n   74          //copy backbuffer into src blit fbo\n   ..\n   77          //blit src blit fbo into dst blit fbo\n   78          uint32_t offset = mSrcZoomSize / 2;\n   79:         float2 srcPix = float2(mMousePos.x * backBuffer->getWidth(), mMousePos.y * backBuffer->getHeight());\n   80:         clampToEdge(srcPix, backBuffer->getWidth(), backBuffer->getHeight(), offset);\n   81:         float4 srcRect = float4(srcPix.x - offset, srcPix.y - offset, srcPix.x + offset, srcPix.y + offset);\n   82          float4 dstRect = float4(0, 0, mDstZoomSize, mDstZoomSize);\n   83          pCtx->blit(mpSrcBlitFbo->getColorTexture(0)->getSRV(), mpDstBlitFbo->getColorTexture(0)->getRTV(), srcRect, dstRect, Sampler::Filter::Point);\n   ..\n   85          //blit dst blt fbo into back buffer\n   86          offset = mDstZoomSize / 2;\n   87:         clampToEdge(srcPix, backBuffer->getWidth(), backBuffer->getHeight(), offset);\n   88          srcRect = dstRect;\n   89:         dstRect = float4(srcPix.x - offset, srcPix.y - offset, srcPix.x + offset, srcPix.y + offset);\n   90          pCtx->blit(mpDstBlitFbo->getColorTexture(0)->getSRV(), backBuffer->getColorTexture(0)->getRTV(), srcRect, dstRect, Sampler::Filter::Point);\n   91      }\n   92  }\n   93  \n   94: bool PixelZoom::onMouseEvent(const MouseEvent& me) {\n   95      if (mShouldZoom) {\n   96          mMousePos = me.pos;\n   ..\n  103  }\n  104  \n  105: bool PixelZoom::onKeyboardEvent(const KeyboardEvent& ke) {\n  106      if (ke.type == KeyboardEvent::Type::KeyPressed || ke.type == KeyboardEvent::Type::KeyReleased) {\n  107          if (ke.key == KeyboardEvent::Key::Z) {\n\n/home/max/dev/Lava/src/Falcor/Utils/UI/PixelZoom.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_UTILS_UI_PIXELZOOM_H_\n   29: #define SRC_FALCOR_UTILS_UI_PIXELZOOM_H_\n   30  \n   31: #include \"Falcor/Core/API/FBO.h\"\n   32  \n   33  namespace Falcor {\n   ..\n   41  /** Magnifies a region of the screen to assist with inspecting details\n   42  */\n   43: class PixelZoom {\n   44   public:\n   45:     using SharedPtr = std::shared_ptr<PixelZoom>;\n   46  \n   47      /** Create a new object\n   ..\n   72  \n   73   private:\n   74:     PixelZoom(std::shared_ptr<Device> pDevice, const Fbo* pBackbuffer);\n   75  \n   76      int32_t mSrcZoomSize = 5;\n   ..\n   88  }  // namespace Falcor\n   89  \n   90: #endif  // SRC_FALCOR_UTILS_UI_PIXELZOOM_H_\n   91  \n\n/home/max/dev/Lava/src/Falcor/Utils/UI/TextRenderer.cpp:\n   28  #include \"stdafx.h\"\n   29  #include \"TextRenderer.h\"\n   30: #include \"Core/API/RenderContext.h\"\n   31  \n   32  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/Utils/UI/TextRenderer.h:\n   29  #define SRC_FALCOR_UTILS_UI_TEXTRENDERER_H_\n   30  \n   31: #include \"Falcor/Core/API/FBO.h\"\n   32  \n   33  namespace Falcor {\n\n/home/max/dev/Lava/src/Falcor/Utils/Video/VideoEncoder.cpp:\n   39      namespace\n   40      {\n   41:         AVPixelFormat getPictureFormatFromCodec(AVCodecID codec)\n   42          {\n   43              switch (codec)\n   44              {\n   45              case AV_CODEC_ID_RAWVIDEO:\n   46:                 return AV_PIX_FMT_BGR24;\n   47              case AV_CODEC_ID_H264:\n   48              case AV_CODEC_ID_HEVC:\n   49              case AV_CODEC_ID_MPEG2VIDEO:\n   50:                 return AV_PIX_FMT_YUV422P;\n   51              case AV_CODEC_ID_MPEG4:\n   52:                 return AV_PIX_FMT_YUV420P;\n   53              default:\n   54                  should_not_get_here();\n   55:                 return AV_PIX_FMT_NONE;\n   56              }\n   57          }\n   58  \n   59:         AVPixelFormat getPictureFormatFromFalcorFormat(ResourceFormat format)\n   60          {\n   61              switch (format)\n   ..\n   63              case ResourceFormat::RGBA8Unorm:\n   64              case ResourceFormat::RGBA8UnormSrgb:\n   65:                 return AV_PIX_FMT_RGBA;\n   66              case ResourceFormat::BGRA8Unorm:\n   67              case ResourceFormat::BGRA8UnormSrgb:\n   68:                 return AV_PIX_FMT_BGRA;\n   69              default:\n   70:                 return AV_PIX_FMT_NONE;\n   71              }\n   72          }\n   ..\n  110              pCodecCtx->time_base = { 1, (int)fps };\n  111              pCodecCtx->gop_size = gopSize;\n  112:             pCodecCtx->pix_fmt = getPictureFormatFromCodec(codecID);\n  113  \n  114              // Some formats want stream headers to be separate\n  ...\n  160              if (av_frame_get_buffer(pFrame, 32) < 0)\n  161              {\n  162:                 error(filename, \"Can't allocate destination picture\");\n  163                  return nullptr;\n  164              }\n  ...\n  191  \n  192              // create a frame\n  193:             pFrame = allocateFrame(pCodecCtx->pix_fmt, pCodecCtx->width, pCodecCtx->height, filename);\n  194              if (pFrame == nullptr)\n  195              {\n  ...\n  225      bool VideoEncoder::isFormatSupported(ResourceFormat format)\n  226      {\n  227:         return getPictureFormatFromFalcorFormat(format) != AV_PIX_FMT_NONE;\n  228      }\n  229  \n  ...\n  288  \n  289          mFormat = desc.format;\n  290:         mRowPitch = getFormatBytesPerBlock(desc.format) * desc.width;\n  291          if(desc.flipY)\n  292          {\n  293:             mpFlippedImage = new uint8_t[desc.height * mRowPitch];\n  294          }\n  295  \n  296          assert(isFormatSupported(desc.format));\n  297:         mpSwsContext = sws_getContext(desc.width, desc.height, getPictureFormatFromFalcorFormat(desc.format), desc.width, desc.height, mpCodecContext->pix_fmt, SWS_POINT, nullptr, nullptr, nullptr);\n  298          if(mpSwsContext == nullptr)\n  299          {\n  ...\n  364              for(int32_t h = 0; h < mpCodecContext->height; h++)\n  365              {\n  366:                 const uint8_t* pSrc = (uint8_t*)pData + h * mRowPitch;\n  367:                 uint8_t* pDst = mpFlippedImage + (mpCodecContext->height - 1 - h) * mRowPitch;\n  368:                 memcpy(pDst, pSrc, mRowPitch);\n  369              }\n  370  \n  ...\n  373  \n  374          uint8_t* src[AV_NUM_DATA_POINTERS] = {0};\n  375:         int32_t rowPitch[AV_NUM_DATA_POINTERS] = {0};\n  376          src[0] = (uint8_t*)pData;\n  377:         rowPitch[0] = (int32_t)mRowPitch;\n  378  \n  379          // Scale and convert the image\n  380:         sws_scale(mpSwsContext, src, rowPitch, 0, mpCodecContext->height, mpFrame->data, mpFrame->linesize);\n  381  \n  382          // Encode the frame\n\n/home/max/dev/Lava/src/Falcor/Utils/Video/VideoEncoder.h:\n   90          const std::string mFilename;\n   91          ResourceFormat mFormat;\n   92:         uint32_t mRowPitch = 0;\n   93          uint8_t* mpFlippedImage = nullptr; // Used in case the image memory layout if bottom->top\n   94      };\n\n5084 matches across 331 files\n\n\nSearching 484 files for \"#define PI\"\n\n0 matches\n\nSearching 60 files for \"M_1_PI\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang:\n  147  \n  148              // D term GGX\n  149:             float pdf = (evalGGX(roughness, NdotH) * M_1_PI) * NdotH / (4 * LdotH);\n  150  \n  151              float omegaS = 1 / (gSampleCount * pdf);\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   71  \n   72  float3 evalDiffuseDisneyBrdf(ShadingData sd, LightSample ls) {\n   73:     return disneyDiffuseFresnel(sd.NdotV, ls.NdotL, ls.LdotH, sd.linearRoughness) * M_1_PI * sd.diffuse.rgb;\n   74  }\n   75  \n   ..\n   91      float lightScatter = fresnelSchlick(fd0, fd90, ls.NdotL).r;\n   92      float viewScatter = fresnelSchlick(fd0, fd90, sd.NdotV).r;\n   93:     return (viewScatter * lightScatter * energyFactor * M_1_PI) * sd.diffuse.rgb;\n   94  }\n   95  \n   ..\n  132      float G = evalSmithGGX(ls.NdotL, sd.NdotV, ggxAlpha);\n  133      float3 F = fresnelSchlick(sd.specular, 1, saturate(ls.LdotH));\n  134:     return D * G * F * M_1_PI;\n  135  }\n\n4 matches across 2 files\n\n\nSearching 484 files for \"M_1_PI\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n  107          if (min(wo.z, wi.z) < kMinCosTheta) return float3(0);\n  108  \n  109:         return M_1_PI * albedo * wi.z;\n  110      }\n  111  \n  ...\n  125          if (min(wo.z, wi.z) < kMinCosTheta) return 0;\n  126  \n  127:         return M_1_PI * wi.z;\n  128      }\n  129  };\n  ...\n  141          if (min(wo.z, wi.z) < kMinCosTheta) return float3(0);\n  142  \n  143:         return evalWeight(wo, wi) * M_1_PI * wi.z;\n  144      }\n  145  \n  ...\n  159          if (min(wo.z, wi.z) < kMinCosTheta) return 0;\n  160  \n  161:         return M_1_PI * wi.z;\n  162      }\n  163  \n  ...\n  190          if (min(wo.z, wi.z) < kMinCosTheta) return float3(0);\n  191  \n  192:         return evalWeight(wo, wi) * M_1_PI * wi.z;\n  193      }\n  194  \n  ...\n  208          if (min(wo.z, wi.z) < kMinCosTheta) return 0;\n  209  \n  210:         return M_1_PI * wi.z;\n  211      }\n  212  \n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n  439      // We're using cosine-weighted sampling over the hemisphere.\n  440      float NdotL = dot(sd.N, L);\n  441:     return NdotL < kMinCosTheta ? 0.f : NdotL * M_1_PI;\n  442  }\n  443  \n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang:\n  623      uint txw, txh;\n  624      environmentMap.GetDimensions(txw, txh);\n  625:     return log2(abs(spreadAngle) * txh * M_1_PI);                                // From chapter 21 in Ray Tracing Gems\n  626  }\n  627  \n  ...\n  636      uint txw, txh;\n  637      environmentMap.GetDimensions(txw, txh);\n  638:     return log2(length(dDdx + dDdy) * txh * M_1_PI);                             // From chapter 21 in Ray Tracing Gems\n  639  }\n  640  \n\n/home/max/dev/Lava/src/Falcor/RenderPasses/Shared/PathTracer/PathTracerHelpers.slang:\n  175          if (min(sd.NdotV, NdotL) < kMinCosTheta) return 0.f;\n  176  \n  177:         return NdotL * M_1_PI; // pdf = cos(theta) / pi\n  178      }\n  179  }\n\n/home/max/dev/Lava/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang:\n  147  \n  148              // D term GGX\n  149:             float pdf = (evalGGX(roughness, NdotH) * M_1_PI) * NdotH / (4 * LdotH);\n  150  \n  151              float omegaS = 1 / (gSampleCount * pdf);\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   71  \n   72  float3 evalDiffuseDisneyBrdf(ShadingData sd, LightSample ls) {\n   73:     return disneyDiffuseFresnel(sd.NdotV, ls.NdotL, ls.LdotH, sd.linearRoughness) * M_1_PI * sd.diffuse.rgb;\n   74  }\n   75  \n   ..\n   91      float lightScatter = fresnelSchlick(fd0, fd90, ls.NdotL).r;\n   92      float viewScatter = fresnelSchlick(fd0, fd90, sd.NdotV).r;\n   93:     return (viewScatter * lightScatter * energyFactor * M_1_PI) * sd.diffuse.rgb;\n   94  }\n   95  \n   ..\n  132      float G = evalSmithGGX(ls.NdotL, sd.NdotV, ggxAlpha);\n  133      float3 F = fresnelSchlick(sd.specular, 1, saturate(ls.LdotH));\n  134:     return D * G * F * M_1_PI;\n  135  }\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/MathConstants.slangh:\n   53  #define M_PI_2              1.57079632679489661923  // pi/2\n   54  #define M_PI_4              0.785398163397448309616 // pi/4\n   55: #define M_1_PI              0.318309886183790671538 // 1/pi\n   56  #define M_2_PI              0.636619772367581343076 // 2/pi\n   57  #define M_2_SQRTPI          1.12837916709551257390  // 2/sqrt(pi)\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/MathHelpers.slang:\n   65      p = normalize(p);\n   66      float2 sph;\n   67:     sph.x = acos(p.z) * M_1_PI;\n   68      sph.y = atan2(-p.y, -p.x) * M_1_2PI + 0.5f;\n   69      return sph;\n   ..\n   95      float2 uv;\n   96      uv.x = atan2(p.x, -p.z) * M_1_2PI + 0.5f;\n   97:     uv.y = acos(p.y) * M_1_PI;\n   98      return uv;\n   99  }\n  ...\n  273      float2 d = sample_disk_concentric(u);\n  274      float z = sqrt(max(0.f, 1.f - dot(d, d)));\n  275:     pdf = z * M_1_PI;\n  276      return float3(d, z);\n  277  }\n  ...\n  290      p.y = r * sin(phi);\n  291      p.z = sqrt(1.f - u.x);\n  292:     pdf = p.z * M_1_PI;\n  293      return p;\n  294  }\n\n19 matches across 8 files\n\n\nSearching 484 files for \"EPSILON\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp:\n  330              if (options.useVolumeOverSA)\n  331              {\n  332:                 // TODO: Not sure we need volumeEpsilon as a configurable parameter. A small fixed epsilon should suffice.\n  333:                 optionsChanged |= splitGroup.var(\"Dimension epsilon for volume\", options.volumeEpsilon, 0.0f, 1.0f);\n  334              }\n  335  \n  ...\n  520      static float evalSAH(const BBox& bounds, const uint32_t triangleCount, const LightBVHBuilder::Options& parameters)\n  521      {\n  522:         float aabbCost = bounds.valid() ? (parameters.useVolumeOverSA ? bounds.volume(parameters.volumeEpsilon) : bounds.surfaceArea()) : 0.f;\n  523          float cost = aabbCost * (float)triangleCount;\n  524          assert(cost >= 0.f && !std::isnan(cost) && !std::isinf(cost));\n  ...\n  673      {\n  674          float fluxCost = parameters.usePreintegration ? flux : 1.0f;\n  675:         float aabbCost = bounds.valid() ? (parameters.useVolumeOverSA ? bounds.volume(parameters.volumeEpsilon) : bounds.surfaceArea()) : 0.f;\n  676          float theta = cosTheta != kInvalidCosConeAngle ? safeACos(cosTheta) : glm::pi<float>();\n  677          float orientationCost = parameters.useLightingCones ? computeOrientationCost(theta) : 1.0f;\n  ...\n  896          options.field(maxTriangleCountPerLeaf);\n  897          options.field(binCount);\n  898:         options.field(volumeEpsilon);\n  899          options.field(splitAlongLargest);\n  900          options.field(useVolumeOverSA);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h:\n   66          uint32_t       maxTriangleCountPerLeaf = 10;                         ///< How many triangles to store at most per leaf node.\n   67          uint32_t       binCount = 16;                                        ///< How many bins to use when building the BVH.\n   68:         float          volumeEpsilon = 1e-3f;                                ///< If a node has an AABB which is 0 along one (or more) of its dimensions, use this epsilon instead for that dimension. Only used when 'useVolumeOverSA' is enabled.\n   69          bool           splitAlongLargest = false;                            ///< Rather than computing a split along each of the 3 dimensions and selecting the best one, only compute the split along the largest dimension.\n   70          bool           useVolumeOverSA = false;                              ///< Use the volume rather than the surface area of the AABB, when computing a split cost.\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightHelpers.slang:\n   68  {\n   69      // Compute direction and distance to light.\n   70:     // The distance is clamped to a small epsilon to avoid div-by-zero below.\n   71      float3 toLight = ls.posW - shadingPosW;\n   72      float distSqr = max(dot(toLight, toLight), kMinLightDistSqr);\n   ..\n  228  \n  229      // Compute direction and distance to light.\n  230:     // The distance is clamped to a small epsilon to avoid div-by-zero below.\n  231      float3 toLight = ls.posW - shadingPosW;\n  232      float distSqr = max(dot(toLight, toLight), kMinLightDistSqr);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n   50  \n   51  // We clamp the GGX width parameter to avoid numerical instability.\n   52: // In some computations, we can avoid clamps etc. if 1.0 - alpha^2 != 1.0, so the epsilon should be 1.72666361e-4 or larger in fp32.\n   53  // The the value below is sufficient to avoid visible artifacts.\n   54  // Falcor used to clamp roughness to 0.08 before the clamp was removed for allowing delta events. We continue to use the same threshold.\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/Fresnel.slang:\n   40  float3 evalFresnelSchlick(float3 f0, float3 f90, float cosTheta)\n   41  {\n   42:     return f0 + (f90 - f0) * pow(max(1 - cosTheta, 0), 5); // Clamp to avoid NaN if cosTheta = 1+epsilon\n   43  }\n   44  \n   ..\n   70  \n   71      // Note that at eta=1 and cosThetaI=0, we get cosThetaT=0 and NaN below.\n   72:     // It's important the framework clamps |cosThetaI| or eta to small epsilon.\n   73      float Rs = (eta * cosThetaI - cosThetaT) / (eta * cosThetaI + cosThetaT);\n   74      float Rp = (eta * cosThetaT - cosThetaI) / (eta * cosThetaT + cosThetaI);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang:\n  155      sd.uv = geoParams.uv;\n  156  \n  157:     // Precompute N*V the same way as in Falcor (no clamp/epsilon).\n  158      sd.NdotV = dot(sd.N, sd.V);\n  159      sd.faceN = geoParams.faceN;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n  264      The function is only valid for V and L in the positive hemisphere, and should be clamped to 0 otherwise.\n  265  \n  266:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  267      \\param[in] NdotL Dot product between shading normal and incident direction, in positive hemisphere.\n  268      \\param[in] NdotV Dot product between shading normal and outgoing direction, in positive hemisphere.\n  ...\n  283      The function is only valid for V and L in the positive hemisphere, and should be clamped to 0 otherwise.\n  284  \n  285:     \\note The function is +inf if NdotL = NdotV = 0. The dot products should be clamped to small epsilon beforehand.\n  286:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  287      \\param[in] NdotL Dot product between shading normal and incident direction, in positive hemisphere.\n  288      \\param[in] NdotV Dot product between shading normal and outgoing direction, in positive hemisphere.\n  ...\n  308  float3 evalSpecular(const ShadingData sd, float NdotL, float NdotV, float NdotH, float LdotH)\n  309  {\n  310:     float alpha = max(kMinGGXAlpha, sd.ggxAlpha);    // TODO: Derive appropriate epsilon\n  311      float D = evalNdfGGX(alpha, NdotH);\n  312  #if SpecularMaskingFunction == SpecularMaskingFunctionSmithGGXSeparable\n  ...\n  389      \\param[in] sd Describes the shading point.\n  390      \\param[in] u Uniform random number (2D).\n  391:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  392      \\param[out] pdf Sampling probability or 0.0 if sample is invalid (L is below the horizon).\n  393      \\param[out] VdotH Byproduct of the sampling.\n  ...\n  399      // Draw sample from D(H) * NdotH.\n  400      float a2 = alpha * alpha;\n  401:     float cosThetaHSqr = min((1 - u.x) / ((a2 - 1) * u.x + 1), 1.0f); // Clamp to avoid 1.0+epsilon causing NaNs below.\n  402      float cosThetaH = sqrt(cosThetaHSqr);\n  403      float sinThetaH = sqrt(1 - cosThetaHSqr);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/Microfacet.slang:\n   36      For microfacet models, D is evaluated for the direction h to find the density of potentially active microfacets (those for which microfacet normal m = h).\n   37      The 'alpha' parameter is the standard GGX width, e.g., it is the square of the linear roughness parameter in Disney's BRDF.\n   38:     Note there is a singularity (0/0 = NaN) at NdotH = 1 and alpha = 0, so alpha should be clamped to some epsilon.\n   39  \n   40:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n   41      \\param[in] cosTheta Dot product between shading normal and half vector, in positive hemisphere.\n   42      \\return D(h)\n   ..\n   52      See https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n   53  \n   54:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n   55      \\param[in] cosTheta Dot product between shading normal and half vector, in positive hemisphere.\n   56      \\return D(h) * cosTheta\n   ..\n   66      See Listing A.1 in https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n   67  \n   68:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n   69      \\param[in] u Uniform random number (2D).\n   70      \\param[out] pdf Sampling probability.\n   ..\n   86      See http://jcgt.org/published/0007/04/01/paper.pdf\n   87  \n   88:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n   89      \\param[in] wo View direction in local space, in the positive hemisphere.\n   90      \\param[in] h Half vector in local space, in the positive hemisphere.\n   ..\n  102      See http://jcgt.org/published/0007/04/01/paper.pdf\n  103  \n  104:     \\param[in] alpha Isotropic GGX width parameter (should be clamped to small epsilon beforehand).\n  105      \\param[in] wo View direction in local space, in the positive hemisphere.\n  106      \\param[in] u Uniform random number (2D).\n  ...\n  171      See Eq 98 in http://jcgt.org/published/0003/02/03/paper.pdf\n  172  \n  173:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  174      \\param[in] cosThetaI Dot product between shading normal and incident direction, in positive hemisphere.\n  175      \\param[in] cosThetaO Dot product between shading normal and outgoing direction, in positive hemisphere.\n  ...\n  190      The function is only valid for cosThetaI > 0 and cosThetaO > 0  and should be clamped to 0 otherwise.\n  191  \n  192:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  193      \\param[in] cosThetaI Dot product between shading normal and incident direction, in positive hemisphere.\n  194      \\param[in] cosThetaO Dot product between shading normal and outgoing direction, in positive hemisphere.\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   99      float theta_r = acos(sd.NdotV);\n  100      float3 LdotV = dot(normalize(ls.L), normalize(sd.V));\n  101:     float cos_phi_diff = (LdotV - ls.NdotL*sd.NdotV) / (sin(theta_i)*sin(theta_r) + EPSILON);\n  102      float alpha = max(theta_i, theta_r);\n  103      float beta  = min(theta_i, theta_r);\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/BBox.h:\n   61  \n   62          /** Returns the volume of the bounding box.\n   63:             \\param[in] epsilon Replace dimensions that are zero by this value.\n   64              \\return the volume of the bounding box if it is valid, -inf otherwise.\n   65          */\n   66:         float volume(float epsilon = 0.0f) const\n   67          {\n   68              if (valid() == false)\n   ..\n   71              }\n   72  \n   73:             const float3 dims = glm::max(float3(epsilon), dimensions());\n   74              return dims.x * dims.y * dims.z;\n   75          }\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/MathConstants.slangh:\n   76  #define DBL_DECIMAL_DIG     17                      // # of decimal digits of rounding precision\n   77  #define DBL_DIG             15                      // # of decimal digits of precision\n   78: #define DBL_EPSILON         2.2204460492503131e-016 // smallest such that 1.0+DBL_EPSILON != 1.0\n   79  #define DBL_HAS_SUBNORM     1                       // type does support subnormal numbers\n   80  #define DBL_MANT_DIG        53                      // # of bits in mantissa\n   ..\n   90  #define FLT_DECIMAL_DIG     9                       // # of decimal digits of rounding precision\n   91  #define FLT_DIG             6                       // # of decimal digits of precision\n   92: #define FLT_EPSILON         1.192092896e-07F        // smallest such that 1.0+FLT_EPSILON != 1.0\n   93  #define FLT_HAS_SUBNORM     1                       // type does support subnormal numbers\n   94  #define FLT_GUARD           0\n   ..\n  107  \n  108  // Numeric limits for half (IEEE754 binary16)\n  109: #define HLF_EPSILON         9.765625e-04F           // smallest such that 1.0+HLF_EPSILON != 1.0\n  110  #define HLF_HAS_SUBNORM     1                       // type does support subnormal numbers\n  111  #define HLF_MANT_DIG        11\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/MathHelpers.slang:\n  198  \n  199      // Compute phi in [0,pi/2] (first quadrant) and sin/cos without branching.\n  200:     // TODO: Analyze fp32 precision, do we need a small epsilon instead of 0.0 here?\n  201      float phi = (r > 0.f) ? ((abs(p.y) - abs(p.x)) / r + 1.f) * M_PI_4 : 0.f;\n  202  \n\n/home/max/dev/Lava/src/Falcor/Utils/UI/DebugDrawer.cpp:\n  130  //\n  131  //         const float step = 1.0f / (float)kPathDetail;\n  132: //         const float epsilon = 1.0e-6f; // A bit more than glm::epsilon\n  133  //\n  134  //         ObjectPath::Frame prevFrame;\n  ...\n  146  //         const float maxFrameIndex = (float)(pPath->getKeyFrameCount() - 1);\n  147  //\n  148: //         // Add epsilon so loop's <= works properly\n  149: //         const float pathEnd = maxFrameIndex + epsilon;\n  150  //\n  151  //         for (float frame = step; frame <= pathEnd; frame += step)\n  ...\n  153  //             // Loop can overshoot the max index\n  154  //             // Clamp frame to right below max index so interpolation on the path will work\n  155: //             frame = std::min(frame, maxFrameIndex - epsilon);\n  156  //\n  157  //             uint32_t frameID = (uint32_t)(glm::floor(frame));\n\n45 matches across 13 files\n\n\nSearching 484 files for \"EPSILON\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp:\n  330              if (options.useVolumeOverSA)\n  331              {\n  332:                 // TODO: Not sure we need volumeEpsilon as a configurable parameter. A small fixed epsilon should suffice.\n  333:                 optionsChanged |= splitGroup.var(\"Dimension epsilon for volume\", options.volumeEpsilon, 0.0f, 1.0f);\n  334              }\n  335  \n  ...\n  520      static float evalSAH(const BBox& bounds, const uint32_t triangleCount, const LightBVHBuilder::Options& parameters)\n  521      {\n  522:         float aabbCost = bounds.valid() ? (parameters.useVolumeOverSA ? bounds.volume(parameters.volumeEpsilon) : bounds.surfaceArea()) : 0.f;\n  523          float cost = aabbCost * (float)triangleCount;\n  524          assert(cost >= 0.f && !std::isnan(cost) && !std::isinf(cost));\n  ...\n  673      {\n  674          float fluxCost = parameters.usePreintegration ? flux : 1.0f;\n  675:         float aabbCost = bounds.valid() ? (parameters.useVolumeOverSA ? bounds.volume(parameters.volumeEpsilon) : bounds.surfaceArea()) : 0.f;\n  676          float theta = cosTheta != kInvalidCosConeAngle ? safeACos(cosTheta) : glm::pi<float>();\n  677          float orientationCost = parameters.useLightingCones ? computeOrientationCost(theta) : 1.0f;\n  ...\n  896          options.field(maxTriangleCountPerLeaf);\n  897          options.field(binCount);\n  898:         options.field(volumeEpsilon);\n  899          options.field(splitAlongLargest);\n  900          options.field(useVolumeOverSA);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h:\n   66          uint32_t       maxTriangleCountPerLeaf = 10;                         ///< How many triangles to store at most per leaf node.\n   67          uint32_t       binCount = 16;                                        ///< How many bins to use when building the BVH.\n   68:         float          volumeEpsilon = 1e-3f;                                ///< If a node has an AABB which is 0 along one (or more) of its dimensions, use this epsilon instead for that dimension. Only used when 'useVolumeOverSA' is enabled.\n   69          bool           splitAlongLargest = false;                            ///< Rather than computing a split along each of the 3 dimensions and selecting the best one, only compute the split along the largest dimension.\n   70          bool           useVolumeOverSA = false;                              ///< Use the volume rather than the surface area of the AABB, when computing a split cost.\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights/LightHelpers.slang:\n   68  {\n   69      // Compute direction and distance to light.\n   70:     // The distance is clamped to a small epsilon to avoid div-by-zero below.\n   71      float3 toLight = ls.posW - shadingPosW;\n   72      float distSqr = max(dot(toLight, toLight), kMinLightDistSqr);\n   ..\n  228  \n  229      // Compute direction and distance to light.\n  230:     // The distance is clamped to a small epsilon to avoid div-by-zero below.\n  231      float3 toLight = ls.posW - shadingPosW;\n  232      float distSqr = max(dot(toLight, toLight), kMinLightDistSqr);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n   50  \n   51  // We clamp the GGX width parameter to avoid numerical instability.\n   52: // In some computations, we can avoid clamps etc. if 1.0 - alpha^2 != 1.0, so the epsilon should be 1.72666361e-4 or larger in fp32.\n   53  // The the value below is sufficient to avoid visible artifacts.\n   54  // Falcor used to clamp roughness to 0.08 before the clamp was removed for allowing delta events. We continue to use the same threshold.\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/Fresnel.slang:\n   40  float3 evalFresnelSchlick(float3 f0, float3 f90, float cosTheta)\n   41  {\n   42:     return f0 + (f90 - f0) * pow(max(1 - cosTheta, 0), 5); // Clamp to avoid NaN if cosTheta = 1+epsilon\n   43  }\n   44  \n   ..\n   70  \n   71      // Note that at eta=1 and cosThetaI=0, we get cosThetaT=0 and NaN below.\n   72:     // It's important the framework clamps |cosThetaI| or eta to small epsilon.\n   73      float Rs = (eta * cosThetaI - cosThetaT) / (eta * cosThetaI + cosThetaT);\n   74      float Rp = (eta * cosThetaT - cosThetaI) / (eta * cosThetaT + cosThetaI);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang:\n  155      sd.uv = geoParams.uv;\n  156  \n  157:     // Precompute N*V the same way as in Falcor (no clamp/epsilon).\n  158      sd.NdotV = dot(sd.N, sd.V);\n  159      sd.faceN = geoParams.faceN;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n  264      The function is only valid for V and L in the positive hemisphere, and should be clamped to 0 otherwise.\n  265  \n  266:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  267      \\param[in] NdotL Dot product between shading normal and incident direction, in positive hemisphere.\n  268      \\param[in] NdotV Dot product between shading normal and outgoing direction, in positive hemisphere.\n  ...\n  283      The function is only valid for V and L in the positive hemisphere, and should be clamped to 0 otherwise.\n  284  \n  285:     \\note The function is +inf if NdotL = NdotV = 0. The dot products should be clamped to small epsilon beforehand.\n  286:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  287      \\param[in] NdotL Dot product between shading normal and incident direction, in positive hemisphere.\n  288      \\param[in] NdotV Dot product between shading normal and outgoing direction, in positive hemisphere.\n  ...\n  308  float3 evalSpecular(const ShadingData sd, float NdotL, float NdotV, float NdotH, float LdotH)\n  309  {\n  310:     float alpha = max(kMinGGXAlpha, sd.ggxAlpha);    // TODO: Derive appropriate epsilon\n  311      float D = evalNdfGGX(alpha, NdotH);\n  312  #if SpecularMaskingFunction == SpecularMaskingFunctionSmithGGXSeparable\n  ...\n  389      \\param[in] sd Describes the shading point.\n  390      \\param[in] u Uniform random number (2D).\n  391:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  392      \\param[out] pdf Sampling probability or 0.0 if sample is invalid (L is below the horizon).\n  393      \\param[out] VdotH Byproduct of the sampling.\n  ...\n  399      // Draw sample from D(H) * NdotH.\n  400      float a2 = alpha * alpha;\n  401:     float cosThetaHSqr = min((1 - u.x) / ((a2 - 1) * u.x + 1), 1.0f); // Clamp to avoid 1.0+epsilon causing NaNs below.\n  402      float cosThetaH = sqrt(cosThetaHSqr);\n  403      float sinThetaH = sqrt(1 - cosThetaHSqr);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/Microfacet.slang:\n   36      For microfacet models, D is evaluated for the direction h to find the density of potentially active microfacets (those for which microfacet normal m = h).\n   37      The 'alpha' parameter is the standard GGX width, e.g., it is the square of the linear roughness parameter in Disney's BRDF.\n   38:     Note there is a singularity (0/0 = NaN) at NdotH = 1 and alpha = 0, so alpha should be clamped to some epsilon.\n   39  \n   40:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n   41      \\param[in] cosTheta Dot product between shading normal and half vector, in positive hemisphere.\n   42      \\return D(h)\n   ..\n   52      See https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n   53  \n   54:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n   55      \\param[in] cosTheta Dot product between shading normal and half vector, in positive hemisphere.\n   56      \\return D(h) * cosTheta\n   ..\n   66      See Listing A.1 in https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n   67  \n   68:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n   69      \\param[in] u Uniform random number (2D).\n   70      \\param[out] pdf Sampling probability.\n   ..\n   86      See http://jcgt.org/published/0007/04/01/paper.pdf\n   87  \n   88:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n   89      \\param[in] wo View direction in local space, in the positive hemisphere.\n   90      \\param[in] h Half vector in local space, in the positive hemisphere.\n   ..\n  102      See http://jcgt.org/published/0007/04/01/paper.pdf\n  103  \n  104:     \\param[in] alpha Isotropic GGX width parameter (should be clamped to small epsilon beforehand).\n  105      \\param[in] wo View direction in local space, in the positive hemisphere.\n  106      \\param[in] u Uniform random number (2D).\n  ...\n  171      See Eq 98 in http://jcgt.org/published/0003/02/03/paper.pdf\n  172  \n  173:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  174      \\param[in] cosThetaI Dot product between shading normal and incident direction, in positive hemisphere.\n  175      \\param[in] cosThetaO Dot product between shading normal and outgoing direction, in positive hemisphere.\n  ...\n  190      The function is only valid for cosThetaI > 0 and cosThetaO > 0  and should be clamped to 0 otherwise.\n  191  \n  192:     \\param[in] alpha GGX width parameter (should be clamped to small epsilon beforehand).\n  193      \\param[in] cosThetaI Dot product between shading normal and incident direction, in positive hemisphere.\n  194      \\param[in] cosThetaO Dot product between shading normal and outgoing direction, in positive hemisphere.\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   99      float theta_r = acos(sd.NdotV);\n  100      float3 LdotV = dot(normalize(ls.L), normalize(sd.V));\n  101:     float cos_phi_diff = (LdotV - ls.NdotL*sd.NdotV) / (sin(theta_i)*sin(theta_r) + FLT_EPSILON);\n  102      float alpha = max(theta_i, theta_r);\n  103      float beta  = min(theta_i, theta_r);\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/BBox.h:\n   61  \n   62          /** Returns the volume of the bounding box.\n   63:             \\param[in] epsilon Replace dimensions that are zero by this value.\n   64              \\return the volume of the bounding box if it is valid, -inf otherwise.\n   65          */\n   66:         float volume(float epsilon = 0.0f) const\n   67          {\n   68              if (valid() == false)\n   ..\n   71              }\n   72  \n   73:             const float3 dims = glm::max(float3(epsilon), dimensions());\n   74              return dims.x * dims.y * dims.z;\n   75          }\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/MathConstants.slangh:\n   76  #define DBL_DECIMAL_DIG     17                      // # of decimal digits of rounding precision\n   77  #define DBL_DIG             15                      // # of decimal digits of precision\n   78: #define DBL_EPSILON         2.2204460492503131e-016 // smallest such that 1.0+DBL_EPSILON != 1.0\n   79  #define DBL_HAS_SUBNORM     1                       // type does support subnormal numbers\n   80  #define DBL_MANT_DIG        53                      // # of bits in mantissa\n   ..\n   90  #define FLT_DECIMAL_DIG     9                       // # of decimal digits of rounding precision\n   91  #define FLT_DIG             6                       // # of decimal digits of precision\n   92: #define FLT_EPSILON         1.192092896e-07F        // smallest such that 1.0+FLT_EPSILON != 1.0\n   93  #define FLT_HAS_SUBNORM     1                       // type does support subnormal numbers\n   94  #define FLT_GUARD           0\n   ..\n  107  \n  108  // Numeric limits for half (IEEE754 binary16)\n  109: #define HLF_EPSILON         9.765625e-04F           // smallest such that 1.0+HLF_EPSILON != 1.0\n  110  #define HLF_HAS_SUBNORM     1                       // type does support subnormal numbers\n  111  #define HLF_MANT_DIG        11\n\n/home/max/dev/Lava/src/Falcor/Utils/Math/MathHelpers.slang:\n  198  \n  199      // Compute phi in [0,pi/2] (first quadrant) and sin/cos without branching.\n  200:     // TODO: Analyze fp32 precision, do we need a small epsilon instead of 0.0 here?\n  201      float phi = (r > 0.f) ? ((abs(p.y) - abs(p.x)) / r + 1.f) * M_PI_4 : 0.f;\n  202  \n\n/home/max/dev/Lava/src/Falcor/Utils/UI/DebugDrawer.cpp:\n  130  //\n  131  //         const float step = 1.0f / (float)kPathDetail;\n  132: //         const float epsilon = 1.0e-6f; // A bit more than glm::epsilon\n  133  //\n  134  //         ObjectPath::Frame prevFrame;\n  ...\n  146  //         const float maxFrameIndex = (float)(pPath->getKeyFrameCount() - 1);\n  147  //\n  148: //         // Add epsilon so loop's <= works properly\n  149: //         const float pathEnd = maxFrameIndex + epsilon;\n  150  //\n  151  //         for (float frame = step; frame <= pathEnd; frame += step)\n  ...\n  153  //             // Loop can overshoot the max index\n  154  //             // Clamp frame to right below max index so interpolation on the path will work\n  155: //             frame = std::min(frame, maxFrameIndex - epsilon);\n  156  //\n  157  //             uint32_t frameID = (uint32_t)(glm::floor(frame));\n\n45 matches across 13 files\n\n\nSearching 5 files for \"DiffuseBrdf\"\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   72  }\n   73  \n   74: float3 evalPrincipledDiffuseBrdf(ShadingData sd, LightSample ls) {\n   75      return principledDiffuseFresnel(sd.NdotV, ls.NdotL, ls.LdotH, sd.linearRoughness) * M_1_PI * sd.diffuse.rgb;\n   76  }\n   ..\n  201  }\n  202  \n  203: float3 evalDiffuseBrdf(ShadingData sd, LightSample ls) {\n  204  \n  205  return evalOrenNayarDiffuse(sd, ls);\n  206  \n  207: #if DiffuseBrdf == DiffuseBrdfLambert\n  208      return evalDiffuseLambertBrdf(sd, ls);\n  209: #elif DiffuseBrdf == DiffuseBrdfDisney\n  210      return evalDiffuseDisneyBrdf(sd, ls);\n  211: #elif DiffuseBrdf == DiffuseBrdfFrostbite\n  212      return evalDiffuseFrostbiteBrdf(sd, ls);\n  213  #endif\n\n8 matches in 1 file\n\n\nSearching 484 files for \"DiffuseBrdf\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n  504  struct FalcorBSDF : IBxDF\n  505  {\n  506: #if DiffuseBrdf == DiffuseBrdfLambert\n  507      DiffuseReflectionLambert diffuseReflection;\n  508: #elif DiffuseBrdf == DiffuseBrdfDisney\n  509      DiffuseReflectionDisney diffuseReflection;\n  510: #elif DiffuseBrdf == DiffuseBrdfFrostbite\n  511      DiffuseReflectionFrostbite diffuseReflection;\n  512  #endif\n  ...\n  531          // Setup lobes.\n  532          diffuseReflection.albedo = sd.diffuse;\n  533: #if DiffuseBrdf != DiffuseBrdfLambert\n  534          diffuseReflection.linearRoughness = sd.linearRoughness;\n  535  #endif\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDFConfig.slangh:\n   35  */\n   36  \n   37: #define DiffuseBrdfLambert      0\n   38: #define DiffuseBrdfDisney       1\n   39: #define DiffuseBrdfFrostbite    2\n   40  \n   41: #ifndef DiffuseBrdf\n   42: #define DiffuseBrdf DiffuseBrdfFrostbite\n   43  #endif\n   44  \n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n  249  float3 evalDiffuse(const ShadingData sd, float NdotL, float NdotV, float LdotH)\n  250  {\n  251: #if DiffuseBrdf == DiffuseBrdfLambert\n  252      return evalDiffuseLambert(sd);\n  253: #elif DiffuseBrdf == DiffuseBrdfDisney\n  254      return evalDiffuseDisney(sd, NdotL, NdotV, LdotH);\n  255: #elif DiffuseBrdf == DiffuseBrdfFrostbite\n  256      return evalDiffuseFrostbite(sd, NdotL, NdotV, LdotH);\n  257  #endif\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n   72  }\n   73  \n   74: float3 evalPrincipledDiffuseBrdf(ShadingData sd, LightSample ls) {\n   75      return principledDiffuseFresnel(sd.NdotV, ls.NdotL, ls.LdotH, sd.linearRoughness) * M_1_PI * sd.diffuse.rgb;\n   76  }\n   ..\n  201  }\n  202  \n  203: float3 evalDiffuseBrdf(ShadingData sd, LightSample ls) {\n  204  \n  205  return evalOrenNayarDiffuse(sd, ls);\n  206  \n  207: #if DiffuseBrdf == DiffuseBrdfLambert\n  208      return evalDiffuseLambertBrdf(sd, ls);\n  209: #elif DiffuseBrdf == DiffuseBrdfDisney\n  210      return evalDiffuseDisneyBrdf(sd, ls);\n  211: #elif DiffuseBrdf == DiffuseBrdfFrostbite\n  212      return evalDiffuseFrostbiteBrdf(sd, ls);\n  213  #endif\n\n/home/max/dev/Lava/src/Falcor/Scene/Shading.slang:\n  312  struct ShadingResult\n  313  {\n  314:     float3 diffuseBrdf;             // The result of the diffuse BRDF\n  315      float3 specularBrdf;            // The result of the specular BRDF\n  316      float3 diffuse;                 // The diffuse component of the result\n  ...\n  329  \n  330      // Calculate the diffuse term\n  331:     sr.diffuseBrdf = evalDiffuseBrdf(sd, ls);\n  332:     sr.diffuse = ls.diffuse * sr.diffuseBrdf * ls.NdotL;\n  333      sr.color = sr.diffuse;\n  334  \n\n32 matches across 5 files\n\n\nSearching 487 files for \"sd.metallic\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n  553  \n  554          // Compute sampling weights.\n  555:         float metallicBRDF = sd.metallic;\n  556:         float specularBSDF = (1 - sd.metallic) * sd.specularTransmission;\n  557:         float dielectricBRDF = (1 - sd.metallic) * (1 - sd.specularTransmission);\n  558  \n  559          float diffuseWeight = luminance(sd.diffuse);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang:\n   96      m.specularRoughness = float4(sd.specular, sd.linearRoughness);\n   97      m.emissive = float4(sd.emissive, 0.f);\n   98:     m.extraParams = float4(sd.IoR, sd.doubleSided ? 1.f : 0.f, sd.specularTransmission, sd.metallic);\n   99      return m;\n  100  }\n  ...\n  172      sd.doubleSided = matParams.extraParams.y != 0.f;\n  173      sd.specularTransmission = matParams.extraParams.z;\n  174:     sd.metallic = matParams.extraParams.w;\n  175  \n  176      sd.occlusion = 1.f;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n  535  float getDiffuseProbability(const ShadingData sd)\n  536  {\n  537:     float diffuseWeight = (sd.activeLobes & (uint)LobeType::DiffuseReflection) ? (1.f - sd.metallic) * luminance(sd.diffuse) : 0.f;\n  538      float specularWeight = (sd.activeLobes & (uint)LobeType::SpecularReflection) ? luminance(evalFresnelSchlick(sd.specular, 1.f, dot(sd.V, sd.N))) : 0.f;\n  539      float pDiffuse = (diffuseWeight + specularWeight) > 0.f ? diffuseWeight / (diffuseWeight + specularWeight) : 1.f;\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n  266  \n  267      float3 Ctint = Cdlum > 0. ? sd.specular / Cdlum : float3(1.); // normalize lum. to isolate hue+sat\n  268:     float3 Cspec0 = lerp(sd.specular *.08 * lerp(float3(1.), Ctint, specularTint), sd.specular, sd.metallic);\n  269      \n  270      float Ds = GTR2(ls.NdotH, ggxAlpha);\n\n/home/max/dev/Lava/src/Falcor/Scene/Shading.slang:\n  197          sd.specular = lerp(float3(F0), baseColor.rgb, metallic);\n  198          sd.linearRoughness = rough;\n  199:         sd.metallic = metallic;\n  200          if (sampleOcclusion) sd.occlusion = occ;\n  201      }\n  ...\n  206          sd.specular = specular.rgb;\n  207          sd.linearRoughness = 1 - rough;\n  208:         sd.metallic = getMetallic(sd.diffuse, sd.specular);\n  209  \n  210          if (sampleOcclusion)\n\n9 matches across 5 files\n\n\nSearching 487 files for \"sd.metallic\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n  553  \n  554          // Compute sampling weights.\n  555:         float metallicBRDF = sd.metallic;\n  556:         float specularBSDF = (1 - sd.metallic) * sd.specularTransmission;\n  557:         float dielectricBRDF = (1 - sd.metallic) * (1 - sd.specularTransmission);\n  558  \n  559          float diffuseWeight = luminance(sd.diffuse);\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang:\n   96      m.specularRoughness = float4(sd.specular, sd.linearRoughness);\n   97      m.emissive = float4(sd.emissive, 0.f);\n   98:     m.extraParams = float4(sd.IoR, sd.doubleSided ? 1.f : 0.f, sd.specularTransmission, sd.metallic);\n   99      return m;\n  100  }\n  ...\n  172      sd.doubleSided = matParams.extraParams.y != 0.f;\n  173      sd.specularTransmission = matParams.extraParams.z;\n  174:     sd.metallic = matParams.extraParams.w;\n  175  \n  176      sd.occlusion = 1.f;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n  535  float getDiffuseProbability(const ShadingData sd)\n  536  {\n  537:     float diffuseWeight = (sd.activeLobes & (uint)LobeType::DiffuseReflection) ? (1.f - sd.metallic) * luminance(sd.diffuse) : 0.f;\n  538      float specularWeight = (sd.activeLobes & (uint)LobeType::SpecularReflection) ? luminance(evalFresnelSchlick(sd.specular, 1.f, dot(sd.V, sd.N))) : 0.f;\n  539      float pDiffuse = (diffuseWeight + specularWeight) > 0.f ? diffuseWeight / (diffuseWeight + specularWeight) : 1.f;\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n  266  \n  267      float3 Ctint = Cdlum > 0. ? sd.specular / Cdlum : float3(1.); // normalize lum. to isolate hue+sat\n  268:     float3 Cspec0 = lerp(sd.specular *.08 * lerp(float3(1.), Ctint, specularTint), sd.specular, sd.metallic);\n  269      \n  270      float Ds = GTR2(ls.NdotH, ggxAlpha);\n\n/home/max/dev/Lava/src/Falcor/Scene/Shading.slang:\n  197          sd.specular = lerp(float3(F0), baseColor.rgb, metallic);\n  198          sd.linearRoughness = rough;\n  199:         sd.metallic = metallic;\n  200          if (sampleOcclusion) sd.occlusion = occ;\n  201      }\n  ...\n  206          sd.specular = specular.rgb;\n  207          sd.linearRoughness = 1 - rough;\n  208:         sd.metallic = getMetallic(sd.diffuse, sd.specular);\n  209  \n  210          if (sampleOcclusion)\n\n9 matches across 5 files\n\n\nSearching 487 files for \"metallic\"\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n  553  \n  554          // Compute sampling weights.\n  555:         float metallicBRDF = sd.metallic;\n  556:         float specularBSDF = (1 - sd.metallic) * sd.specularTransmission;\n  557:         float dielectricBRDF = (1 - sd.metallic) * (1 - sd.specularTransmission);\n  558  \n  559          float diffuseWeight = luminance(sd.diffuse);\n  ...\n  561  \n  562          pDiffuseReflection = (sd.activeLobes & (uint)LobeType::DiffuseReflection) ? diffuseWeight * dielectricBRDF : 0;\n  563:         pSpecularReflection = (sd.activeLobes & ((uint)LobeType::SpecularReflection | (uint)LobeType::DeltaReflection)) ? specularWeight * (metallicBRDF + dielectricBRDF) : 0;\n  564          pSpecularReflectionTransmission = (sd.activeLobes & ((uint)LobeType::SpecularTransmission | (uint)LobeType::DeltaTransmission)) ? specularBSDF : 0;\n  565  \n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang:\n   49      float4 specularRoughness;   ///< Specular color (rgb) and roughness (a).\n   50      float4 emissive;            ///< Emissive color (rgb). TODO: Use the alpha channel either for a luminance scaler, or 1.0/IoR.\n   51:     float4 extraParams;         ///< Extra parameters (IoR, doubleSided, specularTransmission, metallic).\n   52  \n   53      /** Returns the roughness parameter.\n   ..\n   96      m.specularRoughness = float4(sd.specular, sd.linearRoughness);\n   97      m.emissive = float4(sd.emissive, 0.f);\n   98:     m.extraParams = float4(sd.IoR, sd.doubleSided ? 1.f : 0.f, sd.specularTransmission, sd.metallic);\n   99      return m;\n  100  }\n  ...\n  172      sd.doubleSided = matParams.extraParams.y != 0.f;\n  173      sd.specularTransmission = matParams.extraParams.z;\n  174:     sd.metallic = matParams.extraParams.w;\n  175  \n  176      sd.occlusion = 1.f;\n\n/home/max/dev/Lava/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n  535  float getDiffuseProbability(const ShadingData sd)\n  536  {\n  537:     float diffuseWeight = (sd.activeLobes & (uint)LobeType::DiffuseReflection) ? (1.f - sd.metallic) * luminance(sd.diffuse) : 0.f;\n  538      float specularWeight = (sd.activeLobes & (uint)LobeType::SpecularReflection) ? luminance(evalFresnelSchlick(sd.specular, 1.f, dot(sd.V, sd.N))) : 0.f;\n  539      float pDiffuse = (diffuseWeight + specularWeight) > 0.f ? diffuseWeight / (diffuseWeight + specularWeight) : 1.f;\n\n/home/max/dev/Lava/src/Falcor/Scene/Importers/AssimpImporter.cpp:\n  129              { aiTextureType_NORMALS, 0, Material::TextureSlot::Normal },\n  130              { aiTextureType_AMBIENT, 0, Material::TextureSlot::Occlusion },\n  131:             // GLTF2 exposes metallic roughness texture.\n  132:             { AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_METALLICROUGHNESS_TEXTURE, Material::TextureSlot::Specular },\n  133          }\n  134      };\n  ...\n  870          if (importMode == ImportMode::GLTF2)\n  871          {\n  872:             if (pAiMaterial->Get(AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_BASE_COLOR_FACTOR, color) == AI_SUCCESS)\n  873              {\n  874                  float4 baseColor = float4(color.r, color.g, color.b, pMaterial->getBaseColor().a);\n  ...\n  878              float4 specularParams = pMaterial->getSpecularParams();\n  879  \n  880:             float metallic;\n  881:             if (pAiMaterial->Get(AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_METALLIC_FACTOR, metallic) == AI_SUCCESS)\n  882              {\n  883:                 specularParams.b = metallic;\n  884              }\n  885  \n  886              float roughness;\n  887:             if (pAiMaterial->Get(AI_MATKEY_GLTF_PBRMETALLICROUGHNESS_ROUGHNESS_FACTOR, roughness) == AI_SUCCESS)\n  888              {\n  889                  specularParams.g = roughness;\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/BRDF.slang:\n  266  \n  267      float3 Ctint = Cdlum > 0. ? sd.specular / Cdlum : float3(1.); // normalize lum. to isolate hue+sat\n  268:     float3 Cspec0 = lerp(sd.specular *.08 * lerp(float3(1.), Ctint, specularTint), sd.specular, sd.metallic);\n  269      \n  270      float Ds = GTR2(ls.NdotH, ggxAlpha);\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/Material.cpp:\n   91          widget.tooltip(\"The encoding depends on the shading model:\\n\\n\"\n   92              \"MetalRough:\\n\"\n   93:             \"    occlusion (R), roughness (G), metallic (B)\\n\\n\"\n   94              \"SpecGloss:\\n\"\n   95              \"    specular color(RGB) and glossiness(A)\", true);\n   ..\n  100              if (widget.var(\"Roughness\", roughness, 0.f, 1.f, 0.01f)) setRoughness(roughness);\n  101  \n  102:             float metallic = getMetallic();\n  103:             if (widget.var(\"Metallic\", metallic, 0.f, 1.f, 0.01f)) setMetallic(metallic);\n  104          }\n  105      }\n  ...\n  371  void Material::setRoughness(float roughness) {\n  372      if (getShadingModel() != ShadingModelMetalRough) {\n  373:         logWarning(\"Ignoring setRoughness(). Material '\" + mName + \"' does not use the metallic/roughness shading model.\");\n  374          return;\n  375      }\n  ...\n  382  }\n  383  \n  384: void Material::setMetallic(float metallic) {\n  385      if (getShadingModel() != ShadingModelMetalRough) {\n  386:         logWarning(\"Ignoring setMetallic(). Material '\" + mName + \"' does not use the metallic/roughness shading model.\");\n  387          return;\n  388      }\n  389  \n  390:     if (mData.specular.b != metallic) {\n  391:         mData.specular.b = metallic;\n  392          markUpdates(UpdateFlags::DataChanged);\n  393          updateSpecularType();\n  ...\n  567      material.def_property(\"specularParams\", &Material::getSpecularParams, &Material::setSpecularParams);\n  568      material.def_property(\"roughness\", &Material::getRoughness, &Material::setRoughness);\n  569:     material.def_property(\"metallic\", &Material::getMetallic, &Material::setMetallic);\n  570      material.def_property(\"specularTransmission\", &Material::getSpecularTransmission, &Material::setSpecularTransmission);\n  571      material.def_property(\"volumeAbsorption\", &Material::getVolumeAbsorption, &Material::setVolumeAbsorption);\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/Material.h:\n   51              - R - Occlusion\n   52              - G - Roughness\n   53:             - B - Metallic\n   54              - A - Reserved\n   55  \n   ..\n  241  \n  242      /** Set the roughness\n  243:         Only available for metallic/roughness shading model.\n  244      */\n  245      void setRoughness(float roughness);\n  246  \n  247      /** Get the roughness\n  248:         Only available for metallic/roughness shading model.\n  249      */\n  250      float getRoughness() const { return getShadingModel() == ShadingModelMetalRough ? mData.specular.g : 0.f; }\n  251  \n  252:     /** Set the metallic value\n  253:         Only available for metallic/roughness shading model.\n  254      */\n  255:     void setMetallic(float metallic);\n  256  \n  257:     /** Get the metallic value\n  258:         Only available for metallic/roughness shading model.\n  259      */\n  260:     float getMetallic() const { return getShadingModel() == ShadingModelMetalRough ? mData.specular.b : 0.f; }\n  261  \n  262      /** Set the specular transmission\n\n/home/max/dev/Lava/src/Falcor/Scene/Material/MaterialData.slang:\n   59      float4   baseColor              = float4(0);        ///< Material base color (RGB) and opacity (A).\n   60      \n   61:     float4   specular               = float4(0);        ///< Material specular channel encoding occlusion (R), roughness (G), metallic (B) in the default MetalRough mode. In SpecGloss mode specular color (RGB) and glossiness (A).\n   62      \n   63      float3   emissive               = float3(0, 0, 0);  ///< Emissive color (RGB).\n\n/home/max/dev/Lava/src/Falcor/Scene/Shading.slang:\n  181      \n  182      float occ = 1.0; // TODO: read occlusion texture\n  183:     float3 specular = sampleTexture(mr.specular, mr.samplerState, v.texC, float4(md.specular.b), EXTRACT_SPECULAR_TYPE(md.flags), lod).rgb; // metallic component stored in B channel of MaterialData\n  184:     float metallic = srgb_to_linear(specular.r) * 0.1; //linear_to_srgb(specular.r);\n  185      \n  186      float rough = sampleTexture(mr.roughness, mr.samplerState, v.texC, float4(1), EXTRACT_ROUGHNESS_TYPE(md.flags), lod).r * md.roughness;\n  ...\n  188      if (EXTRACT_SHADING_MODEL(md.flags) == ShadingModelMetalRough)\n  189      {\n  190:         sd.diffuse = lerp(baseColor.rgb, float3(0), metallic);\n  191  \n  192          // Calculate the specular reflectance for dielectrics from the IoR, as in the Disney BSDF [Burley 2015].\n  ...\n  195          float F0 = f * f;\n  196  \n  197:         sd.specular = lerp(float3(F0), baseColor.rgb, metallic);\n  198          sd.linearRoughness = rough;\n  199:         sd.metallic = metallic;\n  200          if (sampleOcclusion) sd.occlusion = occ;\n  201      }\n  ...\n  206          sd.specular = specular.rgb;\n  207          sd.linearRoughness = 1 - rough;\n  208:         sd.metallic = getMetallic(sd.diffuse, sd.specular);\n  209  \n  210          if (sampleOcclusion)\n\n/home/max/dev/Lava/src/Falcor/Scene/ShadingData.slang:\n   68      \n   69      float   IoR;                    ///< Index of refraction of the medium \"behind\" the surface.\n   70:     float   metallic;               ///< Metallic parameter, blends between dielectric and conducting BSDFs.\n   71      float   specularTransmission;   ///< Specular transmission, blends between opaque dielectric BRDF and specular transmissive BSDF.\n   72      float   eta;                    ///< Relative index of refraction (incident IoR / transmissive IoR).\n\n/home/max/dev/Lava/src/Falcor/Utils/Helpers.slang:\n  158  \n  159  // TODO: this function is broken an may return negative values.\n  160: float getMetallic(float3 diffuse, float3 spec)\n  161  {\n  162:     // This is based on the way that UE4 and Substance Painter 2 converts base+metallic+specular level to diffuse/spec colors\n  163      // We don't have the specular level information, so the assumption is that it is equal to 0.5 (based on the UE4 documentation)\n  164:     // Note that I'm using the luminance here instead of the actual colors. The reason is that there's no guaraentee that all RGB channels will end up with the same metallic value\n  165      float d = luminance(diffuse);\n  166      float s = luminance(spec);\n\n61 matches across 11 files\n\n\nSearching 46 files for \"principleddiffuse_eval\"\n\n/opt/houdini18.5/houdini/vex/CVex/principleddiffuse_eval.vex:\n    1: ;_name\tprincipleddiffuse_eval\n    2: ; ModuleID = 'principleddiffuse_eval'\n    3  \n    4  @refl = external global <3 x double>\n    .\n   22  declare double @\"clamp@FFFF\"(double, double, double) nounwind\n   23  \n   24: define void @principleddiffuse_eval(<3 x double> %u, <3 x double> %v, i64 %bounces, i64 %reverse, <3 x double> %refl, <3 x double> %eval, double %pdf, i64 %mybounces, <3 x double> %ng, <3 x double> %baseColor, <3 x double> %sheen, double %subsurface, double %roughness) nounwind {\n   25  __llvm_entry:\n   26    %0 = alloca double\n   ..\n  124  define void @__shader_default_arguments() {\n  125  __llvm_entry:\n  126:   call void @principleddiffuse_eval(<3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, double 0.000000e+00, i64 0, <3 x double> zeroinitializer, <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double> zeroinitializer, double 0.000000e+00, double 1.000000e-01)\n  127    ret void\n  128  }\n\n/opt/houdini18.5/houdini/vex/CVex/principleddiffuse_eval.vfl:\n    3  #include \"math.h\"\n    4  \n    5: cvex principleddiffuse_eval(\n    6          vector u = 0;\n    7          vector v = 0;\n\n5 matches across 2 files\n\n\nSearching 46 files for \"principleddiffuse_sample\"\n\n/opt/houdini18.5/houdini/vex/CVex/principleddiffuse_sample.vex:\n    1: ;_name\tprincipleddiffuse_sample\n    2: ; ModuleID = 'principleddiffuse_sample'\n    3  \n    4  @flags = external global i64\n    .\n   26  declare double @\"clamp@FFFF\"(double, double, double) nounwind\n   27  \n   28: define void @principleddiffuse_sample(i64 %flags, <3 x double> %u, double %sx, double %sy, i64 %bounces, <3 x double> %refl, <3 x double> %v, i64 %bouncetype, double %pdf, i64 %mybounces, <3 x double> %ng, <3 x double> %baseColor, <3 x double> %sheen, double %subsurface, double %roughness) nounwind {\n   29  __llvm_entry:\n   30    %0 = alloca double\n   ..\n  175  define void @__shader_default_arguments() {\n  176  __llvm_entry:\n  177:   call void @principleddiffuse_sample(i64 0, <3 x double> zeroinitializer, double 0.000000e+00, double 0.000000e+00, i64 0, <3 x double> zeroinitializer, <3 x double> zeroinitializer, i64 0, double 0.000000e+00, i64 0, <3 x double> zeroinitializer, <3 x double> <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>, <3 x double> zeroinitializer, double 0.000000e+00, double 1.000000e-01)\n  178    ret void\n  179  }\n\n/opt/houdini18.5/houdini/vex/CVex/principleddiffuse_sample.vfl:\n    3  #include \"math.h\"\n    4  \n    5: cvex principleddiffuse_sample(\n    6          export int flags = 0;\n    7  \n\n5 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 2358427,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/BxDFConfig.slangh",
			"settings":
			{
				"buffer_size": 2433,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/Common.h",
			"settings":
			{
				"buffer_size": 249,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/MathConstants.slangh",
			"settings":
			{
				"buffer_size": 6718,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/PixelInspectorPass/PixelInspector.cs.slang",
			"settings":
			{
				"buffer_size": 5572,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGeneratorInterface.slang",
			"settings":
			{
				"buffer_size": 1913,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/docs/wave-intrinsics.md",
			"settings":
			{
				"buffer_size": 13145,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/docs/design/existential-types.md",
			"settings":
			{
				"buffer_size": 13823,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tests/diagnostics/methods/mutating-method-on-rvalue.slang",
			"settings":
			{
				"buffer_size": 315,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/docs/language-reference/05-expressions.md",
			"settings":
			{
				"buffer_size": 13131,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tests/slang-extension/atomic-int64-byte-address-buffer.slang",
			"settings":
			{
				"buffer_size": 1689,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.cpp",
			"settings":
			{
				"buffer_size": 7141,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/130.frag",
			"settings":
			{
				"buffer_size": 4610,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/spv.extPostDepthCoverage.frag",
			"settings":
			{
				"buffer_size": 148,
				"line_ending": "Windows"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/hlsl.structbuffer.rwbyte.frag",
			"settings":
			{
				"buffer_size": 302,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/hlsl.rw.atomics.frag",
			"settings":
			{
				"buffer_size": 8983,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tests/compute/byte-address-buffer.slang",
			"settings":
			{
				"buffer_size": 1075,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tests/compute/atomics-buffer.slang",
			"settings":
			{
				"buffer_size": 1127,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/hlsl.structbuffer.atomics.frag",
			"settings":
			{
				"buffer_size": 649,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/docs/language-reference/04-types.md",
			"settings":
			{
				"buffer_size": 14365,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/docs/target-compatibility.md",
			"settings":
			{
				"buffer_size": 15768,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tests/hlsl-intrinsic/sampler-feedback/sampler-feedback-basic.slang",
			"settings":
			{
				"buffer_size": 1882,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/remap.hlsl.sample.basic.strip.frag",
			"settings":
			{
				"buffer_size": 3018,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/check_bgeo/check_bgeo.cpp",
			"settings":
			{
				"buffer_size": 4335,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/compression.cpp",
			"settings":
			{
				"buffer_size": 1308,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/hlsl.sample.dx9.frag",
			"settings":
			{
				"buffer_size": 1056,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/HLSL/hlslParseables.cpp",
			"settings":
			{
				"buffer_size": 86255,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/ParticleSystem/ParticleEmit.cs.slang",
			"settings":
			{
				"buffer_size": 2562,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/zlib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 8099,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/OpenEXR/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2957,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/OpenImageIO/src/cmake/checked_find_package.cmake",
			"settings":
			{
				"buffer_size": 8273,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# CMAKE generated file: DO NOT EDIT!\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.17\n\n# The generator used is:\nset(CMAKE_DEPENDS_GENERATOR \"Unix Makefiles\")\n\n# The top level Makefile was generated from the following files:\nset(CMAKE_MAKEFILE_DEPENDS\n  \"CMakeCache.txt\"\n  \"../CMakeLists.txt\"\n  \"CMakeFiles/3.17.0/CMakeCCompiler.cmake\"\n  \"CMakeFiles/3.17.0/CMakeCXXCompiler.cmake\"\n  \"CMakeFiles/3.17.0/CMakeSystem.cmake\"\n  \"CMakeFiles/hdf5/cmake_hdf5_test.c\"\n  \"../src/bmp.imageio/CMakeLists.txt\"\n  \"../src/build-scripts/OpenImageIO.pc.in\"\n  \"../src/cineon.imageio/CMakeLists.txt\"\n  \"../src/cmake/Config.cmake.in\"\n  \"../src/cmake/add_oiio_plugin.cmake\"\n  \"../src/cmake/check_is_enabled.cmake\"\n  \"../src/cmake/checked_find_package.cmake\"\n  \"../src/cmake/colors.cmake\"\n  \"../src/cmake/compiler.cmake\"\n  \"../src/cmake/externalpackages.cmake\"\n  \"../src/cmake/fancy_add_executable.cmake\"\n  \"../src/cmake/modules/FindDCMTK.cmake\"\n  \"../src/cmake/modules/FindFFmpeg.cmake\"\n  \"../src/cmake/modules/FindJPEGTurbo.cmake\"\n  \"../src/cmake/modules/FindLibRaw.cmake\"\n  \"../src/cmake/modules/FindLibheif.cmake\"\n  \"../src/cmake/modules/FindLibsquish.cmake\"\n  \"../src/cmake/modules/FindNuke.cmake\"\n  \"../src/cmake/modules/FindOpenCV.cmake\"\n  \"../src/cmake/modules/FindOpenColorIO.cmake\"\n  \"../src/cmake/modules/FindOpenEXR.cmake\"\n  \"../src/cmake/modules/FindOpenJpeg.cmake\"\n  \"../src/cmake/modules/FindOpenVDB.cmake\"\n  \"../src/cmake/modules/FindPTex.cmake\"\n  \"../src/cmake/modules/FindRobinmap.cmake\"\n  \"../src/cmake/modules/FindTBB.cmake\"\n  \"../src/cmake/modules/FindWebP.cmake\"\n  \"../src/cmake/modules/Findfmt.cmake\"\n  \"../src/cmake/packaging.cmake\"\n  \"../src/cmake/pythonutils.cmake\"\n  \"../src/cmake/testing.cmake\"\n  \"../src/dds.imageio/CMakeLists.txt\"\n  \"../src/dicom.imageio/CMakeLists.txt\"\n  \"../src/doc/CMakeLists.txt\"\n  \"../src/dpx.imageio/CMakeLists.txt\"\n  \"../src/ffmpeg.imageio/CMakeLists.txt\"\n  \"../src/field3d.imageio/CMakeLists.txt\"\n  \"../src/fits.imageio/CMakeLists.txt\"\n  \"../src/fonts/CMakeLists.txt\"\n  \"../src/gif.imageio/CMakeLists.txt\"\n  \"../src/hdr.imageio/CMakeLists.txt\"\n  \"../src/heif.imageio/CMakeLists.txt\"\n  \"../src/ico.imageio/CMakeLists.txt\"\n  \"../src/iconvert/CMakeLists.txt\"\n  \"../src/idiff/CMakeLists.txt\"\n  \"../src/iff.imageio/CMakeLists.txt\"\n  \"../src/igrep/CMakeLists.txt\"\n  \"../src/iinfo/CMakeLists.txt\"\n  \"../src/include/CMakeLists.txt\"\n  \"../src/include/OpenImageIO/oiioversion.h.in\"\n  \"../src/iv/CMakeLists.txt\"\n  \"../src/jpeg.imageio/CMakeLists.txt\"\n  \"../src/jpeg2000.imageio/CMakeLists.txt\"\n  \"../src/libOpenImageIO-C/CMakeLists.txt\"\n  \"../src/libOpenImageIO/CMakeLists.txt\"\n  \"../src/libOpenImageIO/imageio_pvt.h.in\"\n  \"../src/libutil/CMakeLists.txt\"\n  \"../src/maketx/CMakeLists.txt\"\n  \"../src/null.imageio/CMakeLists.txt\"\n  \"../src/oiiotool/CMakeLists.txt\"\n  \"../src/openexr.imageio/CMakeLists.txt\"\n  \"../src/openvdb.imageio/CMakeLists.txt\"\n  \"../src/png.imageio/CMakeLists.txt\"\n  \"../src/pnm.imageio/CMakeLists.txt\"\n  \"../src/psd.imageio/CMakeLists.txt\"\n  \"../src/ptex.imageio/CMakeLists.txt\"\n  \"../src/python/CMakeLists.txt\"\n  \"../src/r3d.imageio/CMakeLists.txt\"\n  \"../src/raw.imageio/CMakeLists.txt\"\n  \"../src/rla.imageio/CMakeLists.txt\"\n  \"../src/sgi.imageio/CMakeLists.txt\"\n  \"../src/socket.imageio/CMakeLists.txt\"\n  \"../src/softimage.imageio/CMakeLists.txt\"\n  \"../src/targa.imageio/CMakeLists.txt\"\n  \"../src/term.imageio/CMakeLists.txt\"\n  \"../src/testtex/CMakeLists.txt\"\n  \"../src/tiff.imageio/CMakeLists.txt\"\n  \"../src/webp.imageio/CMakeLists.txt\"\n  \"../src/zfile.imageio/CMakeLists.txt\"\n  \"/opt/lava/3rdparty/share/cmake/pybind11/pybind11Common.cmake\"\n  \"/opt/lava/3rdparty/share/cmake/pybind11/pybind11Config.cmake\"\n  \"/opt/lava/3rdparty/share/cmake/pybind11/pybind11ConfigVersion.cmake\"\n  \"/opt/lava/3rdparty/share/cmake/pybind11/pybind11NewTools.cmake\"\n  \"/opt/lava/3rdparty/share/cmake/pybind11/pybind11Targets.cmake\"\n  \"/usr/local/lib/cmake/Imath/ImathConfig.cmake\"\n  \"/usr/local/lib/cmake/Imath/ImathConfigVersion.cmake\"\n  \"/usr/local/lib/cmake/Imath/ImathTargets-debug.cmake\"\n  \"/usr/local/lib/cmake/Imath/ImathTargets-release.cmake\"\n  \"/usr/local/lib/cmake/Imath/ImathTargets.cmake\"\n  \"/usr/local/lib/cmake/OpenEXR/OpenEXRConfig.cmake\"\n  \"/usr/local/lib/cmake/OpenEXR/OpenEXRConfigVersion.cmake\"\n  \"/usr/local/lib/cmake/OpenEXR/OpenEXRTargets-debug.cmake\"\n  \"/usr/local/lib/cmake/OpenEXR/OpenEXRTargets.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/BasicConfigVersion-SameMajorVersion.cmake.in\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeCInformation.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeCXXInformation.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeCheckCompilerFlagCommonPatterns.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeCommonLanguageInclude.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeFindDependencyMacro.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeGenericSystem.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeInitializeConfigs.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeLanguageInformation.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakePackageConfigHelpers.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakePushCheckState.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeSystemSpecificInformation.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CMakeSystemSpecificInitialize.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CPack.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CPackComponent.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CTest.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CTestTargets.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CTestUseLaunchers.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CheckCSourceCompiles.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CheckCXXCompilerFlag.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CheckCXXSourceCompiles.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CheckCXXSourceRuns.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CheckIncludeFile.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CheckLibraryExists.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CheckStructHasMember.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/CheckSymbolExists.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Compiler/CMakeCommonCompilerMacros.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Compiler/GNU-C.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Compiler/GNU-CXX.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Compiler/GNU.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/DartConfiguration.tcl.in\"\n  \"/usr/local/share/cmake-3.17/Modules/ExternalProject.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindBZip2.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindBoost.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindFreetype.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindGIF.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindHDF5.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindOpenGL.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindPNG.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindPackageHandleStandardArgs.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindPackageMessage.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindPkgConfig.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindPython.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindPython/Support.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindTIFF.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindThreads.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/FindZLIB.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/GNUInstallDirs.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Internal/CMakeCheckCompilerFlag.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Platform/Linux-GNU-C.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Platform/Linux-GNU-CXX.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Platform/Linux-GNU.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Platform/Linux.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/Platform/UnixPaths.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/SelectLibraryConfigurations.cmake\"\n  \"/usr/local/share/cmake-3.17/Modules/WriteBasicConfigVersionFile.cmake\"\n  \"/usr/local/share/cmake-3.17/Templates/CPackConfig.cmake.in\"\n  )\n\n# The corresponding makefile is:\nset(CMAKE_MAKEFILE_OUTPUTS\n  \"Makefile\"\n  \"CMakeFiles/cmake.check_cache\"\n  )\n\n# Byproducts of CMake generate step:\nset(CMAKE_MAKEFILE_PRODUCTS\n  \"DartConfiguration.tcl\"\n  \"OpenImageIO.pc\"\n  \"OpenImageIOConfigVersion.cmake\"\n  \"OpenImageIOConfig.cmake\"\n  \"CPackConfig.cmake\"\n  \"CPackSourceConfig.cmake\"\n  \"CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/libutil/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/bmp.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/cineon.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/dds.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/dicom.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/dpx.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/ffmpeg.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/field3d.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/fits.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/gif.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/hdr.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/heif.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/ico.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/iff.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/jpeg.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/jpeg2000.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/null.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/openexr.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/openvdb.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/png.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/pnm.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/psd.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/ptex.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/r3d.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/raw.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/rla.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/sgi.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/socket.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/softimage.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/targa.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/term.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/tiff.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/webp.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/zfile.imageio/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/libOpenImageIO/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/iconvert/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/idiff/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/igrep/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/iinfo/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/maketx/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/oiiotool/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/testtex/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/iv/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/python/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/include/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/doc/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/fonts/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  \"src/libOpenImageIO-C/CMakeFiles/CMakeDirectoryInformation.cmake\"\n  )\n\n# Dependency information for all targets:\nset(CMAKE_DEPEND_INFO_FILES\n  \"CMakeFiles/ExperimentalBuild.dir/DependInfo.cmake\"\n  \"CMakeFiles/ContinuousUpdate.dir/DependInfo.cmake\"\n  \"CMakeFiles/ExperimentalStart.dir/DependInfo.cmake\"\n  \"CMakeFiles/Nightly.dir/DependInfo.cmake\"\n  \"CMakeFiles/ContinuousCoverage.dir/DependInfo.cmake\"\n  \"CMakeFiles/ContinuousStart.dir/DependInfo.cmake\"\n  \"CMakeFiles/ExperimentalCoverage.dir/DependInfo.cmake\"\n  \"CMakeFiles/NightlyConfigure.dir/DependInfo.cmake\"\n  \"CMakeFiles/NightlyCoverage.dir/DependInfo.cmake\"\n  \"CMakeFiles/Experimental.dir/DependInfo.cmake\"\n  \"CMakeFiles/Continuous.dir/DependInfo.cmake\"\n  \"CMakeFiles/ContinuousBuild.dir/DependInfo.cmake\"\n  \"CMakeFiles/ExperimentalUpdate.dir/DependInfo.cmake\"\n  \"CMakeFiles/ContinuousTest.dir/DependInfo.cmake\"\n  \"CMakeFiles/NightlySubmit.dir/DependInfo.cmake\"\n  \"CMakeFiles/NightlyBuild.dir/DependInfo.cmake\"\n  \"CMakeFiles/NightlyMemoryCheck.dir/DependInfo.cmake\"\n  \"CMakeFiles/NightlyStart.dir/DependInfo.cmake\"\n  \"CMakeFiles/NightlyUpdate.dir/DependInfo.cmake\"\n  \"CMakeFiles/ExperimentalTest.dir/DependInfo.cmake\"\n  \"CMakeFiles/CopyFiles.dir/DependInfo.cmake\"\n  \"CMakeFiles/ExperimentalMemCheck.dir/DependInfo.cmake\"\n  \"CMakeFiles/NightlyMemCheck.dir/DependInfo.cmake\"\n  \"CMakeFiles/ExperimentalSubmit.dir/DependInfo.cmake\"\n  \"CMakeFiles/ContinuousConfigure.dir/DependInfo.cmake\"\n  \"CMakeFiles/ContinuousMemCheck.dir/DependInfo.cmake\"\n  \"CMakeFiles/ExperimentalConfigure.dir/DependInfo.cmake\"\n  \"CMakeFiles/ContinuousSubmit.dir/DependInfo.cmake\"\n  \"CMakeFiles/NightlyTest.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/filter_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/strutil_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/hash_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/spinlock_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/atomic_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/ustring_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/argparse_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/thread_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/spin_rw_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/simd_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/paramlist_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/fmath_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/filesystem_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/optparser_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/parallel_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/span_test.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/OpenImageIO_Util.dir/DependInfo.cmake\"\n  \"src/libutil/CMakeFiles/timer_test.dir/DependInfo.cmake\"\n  \"src/libOpenImageIO/CMakeFiles/imagebufalgo_test.dir/DependInfo.cmake\"\n  \"src/libOpenImageIO/CMakeFiles/OpenImageIO.dir/DependInfo.cmake\"\n  \"src/libOpenImageIO/CMakeFiles/imagecache_test.dir/DependInfo.cmake\"\n  \"src/libOpenImageIO/CMakeFiles/imageinout_test.dir/DependInfo.cmake\"\n  \"src/libOpenImageIO/CMakeFiles/imagespec_test.dir/DependInfo.cmake\"\n  \"src/libOpenImageIO/CMakeFiles/imagespeed_test.dir/DependInfo.cmake\"\n  \"src/libOpenImageIO/CMakeFiles/imagebuf_test.dir/DependInfo.cmake\"\n  \"src/libOpenImageIO/CMakeFiles/compute_test.dir/DependInfo.cmake\"\n  \"src/iconvert/CMakeFiles/iconvert.dir/DependInfo.cmake\"\n  \"src/idiff/CMakeFiles/idiff.dir/DependInfo.cmake\"\n  \"src/igrep/CMakeFiles/igrep.dir/DependInfo.cmake\"\n  \"src/iinfo/CMakeFiles/iinfo.dir/DependInfo.cmake\"\n  \"src/maketx/CMakeFiles/maketx.dir/DependInfo.cmake\"\n  \"src/oiiotool/CMakeFiles/oiiotool.dir/DependInfo.cmake\"\n  \"src/testtex/CMakeFiles/testtex.dir/DependInfo.cmake\"\n  \"src/python/CMakeFiles/PyOpenImageIO.dir/DependInfo.cmake\"\n  \"src/libOpenImageIO-C/CMakeFiles/OpenImageIO-C.dir/DependInfo.cmake\"\n  )\n",
			"file": "third_party/OpenImageIO/build/CMakeFiles/Makefile.cmake",
			"file_size": 15226,
			"file_write_time": 132560006415335697,
			"settings":
			{
				"buffer_size": 15226,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/render-test/cpu-compute-util.cpp",
			"settings":
			{
				"buffer_size": 29059,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/prelude/slang-cpp-prelude.h.cpp",
			"settings":
			{
				"buffer_size": 55593,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/SPIRV/doc.cpp",
			"settings":
			{
				"buffer_size": 147268,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/docs/design/capabilities.md",
			"settings":
			{
				"buffer_size": 16403,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp",
			"settings":
			{
				"buffer_size": 376395,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/Include/intermediate.h",
			"settings":
			{
				"buffer_size": 58157,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/MachineIndependent/intermOut.cpp",
			"settings":
			{
				"buffer_size": 88410,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/MachineIndependent/Versions.h",
			"settings":
			{
				"buffer_size": 21615,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetection.ps.slang",
			"settings":
			{
				"buffer_size": 2338,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/hlsl.calculatelod.dx10.frag",
			"settings":
			{
				"buffer_size": 1440,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/core.meta.slang",
			"settings":
			{
				"buffer_size": 77741,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/HLSL/hlslParseHelper.cpp",
			"settings":
			{
				"buffer_size": 435519,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
			"settings":
			{
				"buffer_size": 153518,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/spv.computeShaderDerivatives.comp",
			"settings":
			{
				"buffer_size": 2689,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Raytracing.slang",
			"settings":
			{
				"buffer_size": 5519,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/WhittedRayTracer/WhittedRayTracer.rt.slang",
			"settings":
			{
				"buffer_size": 24096,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/150.frag",
			"settings":
			{
				"buffer_size": 4746,
				"line_ending": "Windows"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp",
			"settings":
			{
				"buffer_size": 478375,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/MegakernelPathTracer/PathTracer.rt.slang",
			"settings":
			{
				"buffer_size": 7848,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKFormats.cpp",
			"settings":
			{
				"buffer_size": 10869,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
			"settings":
			{
				"buffer_size": 24975,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
			"settings":
			{
				"buffer_size": 5061,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 8727,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.h",
			"settings":
			{
				"buffer_size": 19243,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
			"settings":
			{
				"buffer_size": 67639,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.h",
			"settings":
			{
				"buffer_size": 7695,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
			"settings":
			{
				"buffer_size": 9756,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
			"settings":
			{
				"buffer_size": 6803,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/Lights.slang",
			"settings":
			{
				"buffer_size": 8431,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightHelpers.slang",
			"settings":
			{
				"buffer_size": 11731,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/MeshLightData.slang",
			"settings":
			{
				"buffer_size": 2590,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/UpdateTriangleVertices.cs.slang",
			"settings":
			{
				"buffer_size": 3167,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSamplerSharedDefinitions.slang",
			"settings":
			{
				"buffer_size": 2024,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang",
			"settings":
			{
				"buffer_size": 22640,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHTypes.slang",
			"settings":
			{
				"buffer_size": 8077,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneTypes.slang",
			"settings":
			{
				"buffer_size": 7254,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/PackedFormats.h",
			"settings":
			{
				"buffer_size": 3763,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/Vector.h",
			"settings":
			{
				"buffer_size": 4190,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/HostDeviceShared.slangh",
			"settings":
			{
				"buffer_size": 4264,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Raster.slang",
			"settings":
			{
				"buffer_size": 5014,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/TexturesResolvePass/TexturesResolveCommon.slang",
			"settings":
			{
				"buffer_size": 3045,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/TexturesResolvePass/TexturesResolveData.slangh",
			"settings":
			{
				"buffer_size": 1048,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.ps.slang",
			"settings":
			{
				"buffer_size": 2931,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/BitonicSort.cpp",
			"settings":
			{
				"buffer_size": 4470,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp",
			"settings":
			{
				"buffer_size": 9541,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/ShadingData.slang",
			"settings":
			{
				"buffer_size": 4617,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/TextureSampler.slang",
			"settings":
			{
				"buffer_size": 5580,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Helpers.slang",
			"settings":
			{
				"buffer_size": 15157,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.slang",
			"settings":
			{
				"buffer_size": 21645,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Shading.slang",
			"settings":
			{
				"buffer_size": 13881,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang",
			"settings":
			{
				"buffer_size": 3583,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/HitInfo.slang",
			"settings":
			{
				"buffer_size": 3645,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/MaterialDefines.slangh",
			"settings":
			{
				"buffer_size": 6159,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/MaterialData.slang",
			"settings":
			{
				"buffer_size": 3860,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/BRDF.slang",
			"settings":
			{
				"buffer_size": 11702,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/python2.7/LSDsettings.py",
			"settings":
			{
				"buffer_size": 31531,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/python2.7/LSDapi.py",
			"settings":
			{
				"buffer_size": 8282,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/python2.7/wranglers/HoudiniLightLSD.py",
			"settings":
			{
				"buffer_size": 19684,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/houdini17.5/houdini/soho/python2.7/IFDframe.py",
			"settings":
			{
				"buffer_size": 64638,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/overrides/RendererTable",
			"settings":
			{
				"buffer_size": 177,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.h",
			"settings":
			{
				"buffer_size": 5856,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 2808,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
			"settings":
			{
				"buffer_size": 86481,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramReflection.h",
			"settings":
			{
				"buffer_size": 54847,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.h",
			"settings":
			{
				"buffer_size": 13061,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassLibrary.cpp",
			"settings":
			{
				"buffer_size": 11769,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PackedFragment.cpp",
			"settings":
			{
				"buffer_size": 1087,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.cpp",
			"settings":
			{
				"buffer_size": 1924,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.h",
			"settings":
			{
				"buffer_size": 1041,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.cpp",
			"settings":
			{
				"buffer_size": 3143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedFragment.cpp",
			"settings":
			{
				"buffer_size": 2368,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.h",
			"settings":
			{
				"buffer_size": 1377,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/util.cpp",
			"settings":
			{
				"buffer_size": 3965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/BgeoHeader.cpp",
			"settings":
			{
				"buffer_size": 3185,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.cpp",
			"settings":
			{
				"buffer_size": 7133,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.cpp",
			"settings":
			{
				"buffer_size": 5615,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.h",
			"settings":
			{
				"buffer_size": 1812,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Poly.h",
			"settings":
			{
				"buffer_size": 1391,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Poly.cpp",
			"settings":
			{
				"buffer_size": 3804,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Poly.h",
			"settings":
			{
				"buffer_size": 1612,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexArrayBuilder.h",
			"settings":
			{
				"buffer_size": 1191,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/types.h",
			"settings":
			{
				"buffer_size": 1170,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.h",
			"settings":
			{
				"buffer_size": 1723,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexMap.cpp",
			"settings":
			{
				"buffer_size": 1392,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexArrayBuilder.cpp",
			"settings":
			{
				"buffer_size": 1131,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.cpp",
			"settings":
			{
				"buffer_size": 5251,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.cpp",
			"settings":
			{
				"buffer_size": 7443,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitives.h",
			"settings":
			{
				"buffer_size": 1188,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
			"settings":
			{
				"buffer_size": 4150,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeContext.cpp",
			"settings":
			{
				"buffer_size": 3000,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
			"settings":
			{
				"buffer_size": 3050,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPass.cpp",
			"settings":
			{
				"buffer_size": 2487,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Dictionary.h",
			"settings":
			{
				"buffer_size": 4757,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPass.h",
			"settings":
			{
				"buffer_size": 7427,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassReflection.h",
			"settings":
			{
				"buffer_size": 9565,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassReflection.cpp",
			"settings":
			{
				"buffer_size": 12090,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.h",
			"settings":
			{
				"buffer_size": 3632,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
			"settings":
			{
				"buffer_size": 7499,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/AccumulatePass/AccumulatePass.cpp",
			"settings":
			{
				"buffer_size": 11965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/PixelDebug.cpp",
			"settings":
			{
				"buffer_size": 9625,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/ShaderTable.cpp",
			"settings":
			{
				"buffer_size": 5792,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/ComputeState.cpp",
			"settings":
			{
				"buffer_size": 3454,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
			"settings":
			{
				"buffer_size": 17887,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.h",
			"settings":
			{
				"buffer_size": 4245,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
			"settings":
			{
				"buffer_size": 3328,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
			"settings":
			{
				"buffer_size": 4266,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
			"settings":
			{
				"buffer_size": 15255,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewerParams.slang",
			"settings":
			{
				"buffer_size": 6133,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CSM.cpp",
			"settings":
			{
				"buffer_size": 36004,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CSM.h",
			"settings":
			{
				"buffer_size": 8949,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CascadedShadowMap.slang",
			"settings":
			{
				"buffer_size": 11750,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/VisibilityPass.ps.slang",
			"settings":
			{
				"buffer_size": 2981,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp",
			"settings":
			{
				"buffer_size": 6309,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.cpp",
			"settings":
			{
				"buffer_size": 3143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.cpp",
			"settings":
			{
				"buffer_size": 4322,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.cpp",
			"settings":
			{
				"buffer_size": 11713,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "build_scripts/build_lava.sh",
			"settings":
			{
				"buffer_size": 3406,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1331,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/zlib/Makefile",
			"settings":
			{
				"buffer_size": 13845,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.h",
			"settings":
			{
				"buffer_size": 10063,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 3880,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.h",
			"settings":
			{
				"buffer_size": 4229,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.ps.slang",
			"settings":
			{
				"buffer_size": 2057,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp",
			"settings":
			{
				"buffer_size": 16583,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
			"settings":
			{
				"buffer_size": 9929,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ShaderVar.cpp",
			"settings":
			{
				"buffer_size": 15515,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
			"settings":
			{
				"buffer_size": 4631,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp",
			"settings":
			{
				"buffer_size": 5266,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassHelpers.h",
			"settings":
			{
				"buffer_size": 5170,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp",
			"settings":
			{
				"buffer_size": 10529,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang",
			"settings":
			{
				"buffer_size": 6722,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferParams.slang",
			"settings":
			{
				"buffer_size": 2511,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferHelpers.slang",
			"settings":
			{
				"buffer_size": 3026,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.cpp",
			"settings":
			{
				"buffer_size": 5513,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.h",
			"settings":
			{
				"buffer_size": 3235,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.h",
			"settings":
			{
				"buffer_size": 3668,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.h",
			"settings":
			{
				"buffer_size": 2938,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp",
			"settings":
			{
				"buffer_size": 6595,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.h",
			"settings":
			{
				"buffer_size": 3381,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.h",
			"settings":
			{
				"buffer_size": 3086,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBufferBase.h",
			"settings":
			{
				"buffer_size": 4099,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBufferBase.cpp",
			"settings":
			{
				"buffer_size": 7435,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.cpp",
			"settings":
			{
				"buffer_size": 2647,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.h",
			"settings":
			{
				"buffer_size": 3159,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/VertexAttrib.slangh",
			"settings":
			{
				"buffer_size": 2497,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#include \"Falcor.h\"\n#include \"RenderGraph/RenderPassStandardFlags.h\"\n#include \"GBufferRaster.h\"\n\nconst char* GBufferRaster::kDesc = \"Rasterized G-buffer generation pass\";\n\nnamespace\n{\n    const std::string kProgramFile = \"RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang\";\n    const std::string shaderModel = \"6_1\";\n\n    // Additional output channels.\n    // TODO: Some are RG32 floats now. I'm sure that all of these could be fp16.\n    const ChannelList kGBufferExtraChannels =\n    {\n        { \"vbuffer\",          \"gVBuffer\",            \"Visibility buffer\",                true /* optional */, ResourceFormat::RG32Uint    },\n        { \"mvec\",             \"gMotionVectors\",      \"Motion vectors\",                   true /* optional */, ResourceFormat::RG32Float   },\n        { \"faceNormalW\",      \"gFaceNormalW\",        \"Face normal in world space\",       true /* optional */, ResourceFormat::RGBA32Float },\n        { \"pnFwidth\",         \"gPosNormalFwidth\",    \"position and normal filter width\", true /* optional */, ResourceFormat::RG32Float   },\n        { \"linearZ\",          \"gLinearZAndDeriv\",    \"linear z (and derivative)\",        true /* optional */, ResourceFormat::RG32Float   },\n        { \"surfSpreadAngle\",  \"gSurfaceSpreadAngle\", \"surface spread angle (texlod)\",    true /* optional */, ResourceFormat::R16Float    },\n    };\n\n    const std::string kDepthName = \"depth\";\n}\n\nRenderPassReflection GBufferRaster::reflect(const CompileData& compileData)\n{\n    RenderPassReflection reflector;\n\n    // Add the required depth output. This always exists.\n    reflector.addOutput(kDepthName, \"Depth buffer\").format(ResourceFormat::D32Float).bindFlags(Resource::BindFlags::DepthStencil);\n\n    // Add all the other outputs.\n    // The default channels are written as render targets, the rest as UAVs as there is way to assign/pack render targets yet.\n    addRenderPassOutputs(reflector, kGBufferChannels, Resource::BindFlags::RenderTarget);\n    addRenderPassOutputs(reflector, kGBufferExtraChannels, Resource::BindFlags::UnorderedAccess);\n\n    return reflector;\n}\n\nGBufferRaster::SharedPtr GBufferRaster::create(RenderContext* pRenderContext, const Dictionary& dict)\n{\n    return SharedPtr(new GBufferRaster(dict));\n}\n\nGBufferRaster::GBufferRaster(const Dictionary& dict)\n    : GBuffer()\n{\n    parseDictionary(dict);\n\n    // Create raster program\n    Program::DefineList defines = { { \"_DEFAULT_ALPHA_TEST\", \"\" } };\n    Program::Desc desc;\n    desc.addShaderLibrary(kProgramFile).vsEntry(\"vsMain\").psEntry(\"psMain\");\n    desc.setShaderModel(shaderModel);\n    mRaster.pProgram = GraphicsProgram::create(desc, defines);\n\n    // Initialize graphics state\n    mRaster.pState = GraphicsState::create();\n    mRaster.pState->setProgram(mRaster.pProgram);\n\n    // Set default cull mode\n    setCullMode(mCullMode);\n\n    // Set depth function\n    DepthStencilState::Desc dsDesc;\n    dsDesc.setDepthFunc(DepthStencilState::Func::Equal).setDepthWriteMask(false);\n    DepthStencilState::SharedPtr pDsState = DepthStencilState::create(dsDesc);\n    mRaster.pState->setDepthStencilState(pDsState);\n\n    mpFbo = Fbo::create();\n}\n\nvoid GBufferRaster::compile(RenderContext* pContext, const CompileData& compileData)\n{\n    GBuffer::compile(pContext, compileData);\n\n    mpDepthPrePassGraph = RenderGraph::create(\"Depth Pre-Pass\");\n    mpDepthPrePass = DepthPass::create(pContext);\n    mpDepthPrePass->setDepthBufferFormat(ResourceFormat::D32Float);\n    mpDepthPrePassGraph->addPass(mpDepthPrePass, \"DepthPrePass\");\n    mpDepthPrePassGraph->markOutput(\"DepthPrePass.depth\");\n    mpDepthPrePassGraph->setScene(mpScene);\n}\n\nvoid GBufferRaster::setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene)\n{\n    GBuffer::setScene(pRenderContext, pScene);\n\n    mRaster.pVars = nullptr;\n\n    if (pScene)\n    {\n        if (pScene->getVao()->getPrimitiveTopology() != Vao::Topology::TriangleList)\n        {\n            throw std::exception(\"GBufferRaster only works with triangle list geometry due to usage of SV_Barycentrics.\");\n        }\n\n        mRaster.pProgram->addDefines(pScene->getSceneDefines());\n    }\n\n    if (mpDepthPrePassGraph) mpDepthPrePassGraph->setScene(pScene);\n}\n\nvoid GBufferRaster::setCullMode(RasterizerState::CullMode mode)\n{\n    GBuffer::setCullMode(mode);\n    RasterizerState::Desc rsDesc;\n    rsDesc.setCullMode(mCullMode);\n    mRaster.pRsState = RasterizerState::create(rsDesc);\n    assert(mRaster.pState);\n    mRaster.pState->setRasterizerState(mRaster.pRsState);\n}\n\nvoid GBufferRaster::execute(RenderContext* pRenderContext, const RenderData& renderData)\n{\n    GBuffer::execute(pRenderContext, renderData);\n\n    // Bind primary channels as render targets and clear them.\n    for (size_t i = 0; i < kGBufferChannels.size(); ++i)\n    {\n        Texture::SharedPtr pTex = renderData[kGBufferChannels[i].name]->asTexture();\n        mpFbo->attachColorTarget(pTex, uint32_t(i));\n    }\n    pRenderContext->clearFbo(mpFbo.get(), float4(0), 1.f, 0, FboAttachmentType::Color);\n\n    // If there is no scene, clear the outputs and return.\n    if (mpScene == nullptr)\n    {\n        auto clear = [&](const ChannelDesc& channel)\n        {\n            auto pTex = renderData[channel.name]->asTexture();\n            if (pTex) pRenderContext->clearUAV(pTex->getUAV().get(), float4(0.f));\n        };\n        for (const auto& channel : kGBufferExtraChannels) clear(channel);\n        auto pDepth = renderData[kDepthName]->asTexture();\n        pRenderContext->clearDsv(pDepth->getDSV().get(), 1.f, 0);\n        return;\n    }\n\n    // Set program defines.\n    mRaster.pProgram->addDefine(\"DISABLE_ALPHA_TEST\", mDisableAlphaTest ? \"1\" : \"0\");\n\n    // For optional I/O resources, set 'is_valid_<name>' defines to inform the program of which ones it can access.\n    // TODO: This should be moved to a more general mechanism using Slang.\n    mRaster.pProgram->addDefines(getValidResourceDefines(kGBufferExtraChannels, renderData));\n\n    // Create program vars.\n    if (!mRaster.pVars)\n    {\n        mRaster.pVars = GraphicsVars::create(mRaster.pProgram.get());\n    }\n\n    // Setup depth pass to use same culling mode.\n    mpDepthPrePass->setRasterizerState(mForceCullMode ? mRaster.pRsState : nullptr);\n\n    // Copy depth buffer.\n    mpDepthPrePassGraph->execute(pRenderContext);\n    mpFbo->attachDepthStencilTarget(mpDepthPrePassGraph->getOutput(\"DepthPrePass.depth\")->asTexture());\n    pRenderContext->copyResource(renderData[kDepthName].get(), mpDepthPrePassGraph->getOutput(\"DepthPrePass.depth\").get());\n\n    // Bind extra channels as UAV buffers.\n    for (const auto& channel : kGBufferExtraChannels)\n    {\n        Texture::SharedPtr pTex = renderData[channel.name]->asTexture();\n        if (pTex) pRenderContext->clearUAV(pTex->getUAV().get(), float4(0, 0, 0, 0));\n        mRaster.pVars[channel.texname] = pTex;\n    }\n\n    mRaster.pVars[\"PerFrameCB\"][\"gParams\"].setBlob(mGBufferParams);\n    mRaster.pState->setFbo(mpFbo); // Sets the viewport\n\n    Scene::RenderFlags flags = mForceCullMode ? Scene::RenderFlags::UserRasterizerState : Scene::RenderFlags::None;\n    mpScene->render(pRenderContext, mRaster.pState.get(), mRaster.pVars.get(), flags);\n\n    mGBufferParams.frameCount++;\n}\n",
			"file": "src/RenderPasses/GBuffer/GBufferRaster.cpp",
			"file_size": 8886,
			"file_write_time": 132478768524044771,
			"settings":
			{
				"buffer_size": 8886,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#ifndef FALCOR_GBUFFER_H_\n#define FALCOR_GBUFFER_H_\n\n#include \"../GBufferBase.h\"\n#include \"GBufferParams.slang\"\n#include \"RenderGraph/RenderPassHelpers.h\"\n\nusing namespace Falcor;\n\n/** Base class for the different G-buffer passes.\n*/\nclass GBuffer : public GBufferBase {\n public:\n    virtual void renderUI(Gui::Widgets& widget) override;\n    virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n    virtual Dictionary getScriptingDictionary() override;\n    virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n\n protected:\n    GBuffer();\n    virtual void parseDictionary(const Dictionary& dict) override;\n    virtual void setCullMode(RasterizerState::CullMode mode) { mCullMode = mode; }\n\n    // Constants used in derived classes\n    static const ChannelList kGBufferChannels;\n\n    // Internal state\n    GBufferParams                   mGBufferParams;\n\n    // UI variables\n    bool                            mForceCullMode = false;                         ///< Force cull mode for all geometry, otherwise set it based on the scene.\n    RasterizerState::CullMode       mCullMode = RasterizerState::CullMode::Back;    ///< Cull mode to use for when mForceCullMode is true.\n};\n\n#endif  // FALCOR_GBUFFER_H_\n",
			"file": "src/RenderPasses/GBuffer/GBuffer.h",
			"file_size": 2992,
			"file_write_time": 132478768064811882,
			"settings":
			{
				"buffer_size": 2992,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp",
			"settings":
			{
				"buffer_size": 9506,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/MegakernelPathTracer/MegakernelPathTracer.cpp",
			"settings":
			{
				"buffer_size": 8875,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.cpp",
			"settings":
			{
				"buffer_size": 11926,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.cpp",
			"settings":
			{
				"buffer_size": 15137,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp",
			"settings":
			{
				"buffer_size": 5631,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.cpp",
			"settings":
			{
				"buffer_size": 8729,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glm/glm/detail/type_float.hpp",
			"settings":
			{
				"buffer_size": 2852,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.cpp.bak",
			"settings":
			{
				"buffer_size": 13781,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.slang",
			"settings":
			{
				"buffer_size": 2625,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.cpp",
			"settings":
			{
				"buffer_size": 77433,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/FalcorExperimental.h",
			"settings":
			{
				"buffer_size": 1962,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Testing/UnitTest.h",
			"settings":
			{
				"buffer_size": 18153,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.h",
			"settings":
			{
				"buffer_size": 5848,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
			"settings":
			{
				"buffer_size": 7903,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
			"settings":
			{
				"buffer_size": 16474,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp",
			"settings":
			{
				"buffer_size": 25032,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/UsdRenderers.json",
			"settings":
			{
				"buffer_size": 342,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 296,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/AssimpImporter.cpp",
			"settings":
			{
				"buffer_size": 45604,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/SceneImporter.h",
			"settings":
			{
				"buffer_size": 2195,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/PythonImporter.h",
			"settings":
			{
				"buffer_size": 2183,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importer.h",
			"settings":
			{
				"buffer_size": 4276,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importer.cpp",
			"settings":
			{
				"buffer_size": 2992,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.h",
			"settings":
			{
				"buffer_size": 12424,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Shader.h",
			"settings":
			{
				"buffer_size": 8437,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKShader.cpp",
			"settings":
			{
				"buffer_size": 2775,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.cpp",
			"settings":
			{
				"buffer_size": 14498,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
			"settings":
			{
				"buffer_size": 26700,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.cpp",
			"settings":
			{
				"buffer_size": 8532,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Window.cpp",
			"settings":
			{
				"buffer_size": 18049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.cpp",
			"settings":
			{
				"buffer_size": 2247,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.cpp",
			"settings":
			{
				"buffer_size": 2775,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GraphicsStateObject.cpp",
			"settings":
			{
				"buffer_size": 4325,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
			"settings":
			{
				"buffer_size": 6041,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
			"settings":
			{
				"buffer_size": 5196,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeStateObject.cpp",
			"settings":
			{
				"buffer_size": 2487,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeStateObject.h",
			"settings":
			{
				"buffer_size": 3498,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GraphicsStateObject.h",
			"settings":
			{
				"buffer_size": 6436,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
			"settings":
			{
				"buffer_size": 2479,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
			"settings":
			{
				"buffer_size": 22723,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.cpp",
			"settings":
			{
				"buffer_size": 10466,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.h",
			"settings":
			{
				"buffer_size": 16345,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
			"settings":
			{
				"buffer_size": 15279,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
			"settings":
			{
				"buffer_size": 8811,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.cpp",
			"settings":
			{
				"buffer_size": 35731,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ShaderLibrary.h",
			"settings":
			{
				"buffer_size": 2275,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ShaderLibrary.cpp",
			"settings":
			{
				"buffer_size": 1914,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVersion.h",
			"settings":
			{
				"buffer_size": 10610,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_GRAMMAR_LSD_H_\n#define SRC_LAVA_LIB_GRAMMAR_LSD_H_\n\n#include <array>\n#include <memory>\n#include <string>\n#include <algorithm>\n#include <iostream>\n#include <variant>\n\n#include <boost/array.hpp>\n#include <boost/filesystem.hpp>\n#include <boost/range.hpp>\n//#include <boost/range/join.hpp>\n//#include <boost/algorithm/string/join.hpp>\n\n#ifdef DEBUG\n   // #define BOOST_SPIRIT_X3_DEBUG\n#endif\n\n#include <boost/spirit/home/x3.hpp>\n#include <boost/spirit/home/x3/support/ast/variant.hpp>\n#include <boost/spirit/home/x3/support/traits/container_traits.hpp>\n#include <boost/spirit/include/support_istream_iterator.hpp>\n#include <boost/fusion/include/adapt_struct.hpp>\n#include <boost/fusion/include/io.hpp>\n#include <boost/fusion/sequence/io.hpp>\n#include <boost/fusion/include/io.hpp>\n#include <boost/fusion/adapted/array.hpp>\n#include <boost/fusion/adapted/std_pair.hpp>\n\n#include <boost/container/static_vector.hpp>\n\n#include \"grammar_bgeo.h\"\n#include \"grammar_lsd_expr.h\"\n\n#include \"lava_utils_lib/logging.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\nnamespace lava {\n\nnamespace lsd {\n    using boost::container::static_vector;\n\n    struct NoValue {\n        bool operator==(NoValue const &) const { return true; }\n    };\n\n    typedef static_vector<uint, 3> Version;\n    \n    typedef static_vector<int, 2> Int2;\n    typedef static_vector<int, 3> Int3;\n    typedef static_vector<int, 4> Int4; \n\n    typedef static_vector<double, 2> Vector2; \n    typedef static_vector<double, 3> Vector3;\n    typedef static_vector<double, 4> Vector4; \n    typedef static_vector<double, 9> Matrix3;\n    typedef static_vector<double, 16> Matrix4;\n    typedef x3::variant<int, Int2, Int3, Int4, double, Vector2, Vector3, Vector4, std::string> PropValue;\n\nnamespace ast {\n\n    enum class Type { FLOAT, BOOL, INT, VECTOR2, VECTOR3, VECTOR4, MATRIX3, MATRIX4, STRING };\n    enum class Object { GLOBAL, MATERIAL, GEO, GEOMERTY, SEGMENT, CAMERA, LIGHT, FOG, OBJECT, INSTANCE, PLANE, IMAGE, RENDERER, UNKNOWN };\n    enum class DisplayType { NONE, IP, MD, OPENEXR, JPEG, TIFF, PNG };\n\n    struct ifthen;\n    struct setenv;\n    struct cmd_time;\n    struct cmd_version;\n    struct cmd_config;\n    struct cmd_defaults;\n    struct cmd_transform;\n    struct cmd_quit;\n    struct cmd_start;\n    struct cmd_end;\n    struct cmd_detail;\n    struct cmd_geometry;\n    struct cmd_property;\n    struct cmd_raytrace;\n    struct cmd_image;\n    struct cmd_declare;\n    struct cmd_deviceoption;\n\n    struct NoValue {\n        bool operator==(NoValue const &) const { return true; }\n    };\n\n    typedef x3::variant<\n        NoValue,\n        ifthen,\n        setenv,\n        cmd_start,\n        cmd_time,\n        cmd_version,\n        cmd_config,\n        cmd_defaults,\n        cmd_transform,\n        cmd_end,\n        cmd_quit,\n        cmd_detail,\n        cmd_geometry,\n        cmd_property,\n        cmd_raytrace,\n        cmd_image,\n        cmd_declare,\n        cmd_deviceoption\n    > Command;\n\n    // nullary commands\n    struct cmd_end { };\n    struct cmd_quit { };\n    struct cmd_raytrace { };\n\n    // non-nullary commands\n    struct ifthen{\n        expr::ast::Expr expr;\n        std::vector<Command> commands;\n    };\n\n    struct setenv {\n        std::string key;\n        std::string value;\n    };\n\n    struct cmd_time {\n        float time;\n    };\n\n    struct cmd_start {\n        Object type;\n    };\n\n    struct cmd_transform {\n        Matrix4 m;\n    };\n\n    struct cmd_version {\n        Version version;\n    };\n\n    struct cmd_defaults {\n        std::string filename;\n    };\n\n    struct cmd_config {\n        std::string filename;\n    };\n\n    struct cmd_geometry {\n        std::string geometry_object;\n    };\n\n    struct cmd_detail {\n        bool temporary;\n        std::string name;\n        std::string filename;\n        bgeo::ast::Bgeo bgeo;\n    };\n\n    struct cmd_image {\n        DisplayType display_type;\n        std::string filename;\n    };\n\n    struct cmd_property {\n        Object style;\n        std::string token;\n        std::vector<PropValue> values;\n    };\n\n    struct cmd_deviceoption {\n        Type type;\n        std::string name;\n        std::vector<PropValue> values;\n    };\n\n    struct cmd_declare {\n        Object style;\n        Type type;\n        std::string token;\n        std::vector<PropValue> values;\n    };\n\n}  // namespace ast\n\nstatic inline std::ostream& operator<<(std::ostream& os, const std::vector<std::string>& v) {\n    std::copy(v.begin(), v.end(), std::ostream_iterator<std::string>(os, \" \"));\n    return os;\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Int2& m) {\n    os << \"Int2[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<int>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Int3& m) {\n    os << \"Int3[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<int>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Int4& m) {\n    os << \"Int4[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<int>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Vector2& m) {\n    os << \"Vector2[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Vector3& m) {\n    os << \"Vector3[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Vector4& m) {\n    os << \"Vector4[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Matrix3& m) {\n    os << \"Matrix3[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Matrix4& m) {\n    os << \"Matrix4[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, Version v) {\n    return os << \"Version: \" << v[0] << \".\" << v[1] << \".\" << v[2];\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, std::vector<PropValue> v) {\n    std::copy(v.begin(), v.end(), std::ostream_iterator<PropValue>(os, \" \"));\n    return os;\n};\n\nusing Type = ast::Type;\nstatic inline std::ostream& operator<<(std::ostream& os, Type t) {\n    switch(t) {\n        case Type::INT: return os << \"int\";\n        case Type::BOOL: return os << \"bool\";\n        case Type::FLOAT: return os << \"float\";\n        case Type::STRING: return os << \"string\";\n        case Type::VECTOR2: return os << \"vector2\";\n        case Type::VECTOR3: return os << \"vector3\";\n        case Type::VECTOR4: return os << \"vector4\";\n        case Type::MATRIX3: return os << \"matrix3\";\n        case Type::MATRIX4: return os << \"matrix4\";\n        default: os << \"unknown\";\n    }\n    return os;\n};\n\nusing Object = ast::Object;\nstatic inline std::ostream& operator<<(std::ostream& os, Object o) {\n    switch(o) {\n        case Object::GLOBAL: return os << \"global\";\n        case Object::GEO: return os << \"geo\";\n        case Object::GEOMERTY: return os << \"geometry\";\n        case Object::MATERIAL: return os << \"material\";\n        case Object::SEGMENT: return os << \"segment\";\n        case Object::CAMERA: return os << \"camera\";\n        case Object::LIGHT: return os << \"light\";\n        case Object::FOG: return os << \"fog\";\n        case Object::OBJECT: return os << \"object\";\n        case Object::INSTANCE: return os << \"instance\";\n        case Object::PLANE: return os << \"plane\";\n        case Object::IMAGE: return os << \"image\";\n        case Object::RENDERER: return os << \"renderer\";\n        default: os << \"unknown\";\n    }\n    return os;\n};\n\n}  // namespace lsd\n\n}  // namespace lava\n\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::ifthen, expr, commands)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::setenv, key, value)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_end)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_quit)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_raytrace)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_time, time)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_start, type)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_transform, m)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_image, display_type, filename)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_defaults, filename)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_config, filename)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_version, version)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_detail, temporary, name, filename, bgeo)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_geometry, geometry_object)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_property, style, token, values)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_deviceoption, type, name, values)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_declare, style, type, token, values)\n\nnamespace lava { \n\nclass SessionLSD;\n\nnamespace lsd { \n\nstruct Visitor: public boost::static_visitor<> {\n public:\n    Visitor(std::unique_ptr<SessionLSD>& pSession);\n\n    virtual void operator()(ast::NoValue const& c) const {};\n    virtual void operator()(ast::ifthen const& c) const;\n    virtual void operator()(ast::setenv const& c) const;\n    virtual void operator()(ast::cmd_image const& c) const;\n    virtual void operator()(ast::cmd_end const& c) const;\n    virtual void operator()(ast::cmd_quit const& c) const;\n    virtual void operator()(ast::cmd_start const& c) const;\n    virtual void operator()(ast::cmd_time const& c) const;\n    virtual void operator()(ast::cmd_detail const& c) const;\n    virtual void operator()(ast::cmd_version const& c) const;\n    virtual void operator()(ast::cmd_config const& c) const;\n    virtual void operator()(ast::cmd_defaults const& c) const;\n    virtual void operator()(ast::cmd_transform const& c) const;\n    virtual void operator()(ast::cmd_geometry const& c) const;\n    virtual void operator()(ast::cmd_property const& c) const;\n    virtual void operator()(ast::cmd_deviceoption const& c) const;\n    virtual void operator()(ast::cmd_declare const& c) const;\n    virtual void operator()(ast::cmd_raytrace const& c) const;\n\n protected:\n    std::unique_ptr<SessionLSD> mpSession;\n};\n\n\nstruct EchoVisitor: public Visitor {\n public:\n    EchoVisitor(std::unique_ptr<SessionLSD>& pSession);\n    EchoVisitor(std::unique_ptr<SessionLSD>& pSession, std::ostream& os);\n\n    void operator()(ast::NoValue const& c) const override {};\n    void operator()(ast::ifthen const& c) const override;\n    void operator()(ast::setenv const& c) const override;\n    void operator()(ast::cmd_image const& c) const override;\n    void operator()(ast::cmd_end const& c) const override;\n    void operator()(ast::cmd_quit const& c) const override;\n    void operator()(ast::cmd_start const& c) const override;\n    void operator()(ast::cmd_time const& c) const override;\n    void operator()(ast::cmd_detail const& c) const override;\n    void operator()(ast::cmd_version const& c) const override;\n    void operator()(ast::cmd_config const& c) const override;\n    void operator()(ast::cmd_defaults const& c) const override;\n    void operator()(ast::cmd_transform const& c) const override;\n    void operator()(ast::cmd_geometry const& c) const override;\n    void operator()(ast::cmd_property const& c) const override;\n    void operator()(ast::cmd_deviceoption const& c) const override;\n    void operator()(ast::cmd_declare const& c) const override;\n    void operator()(ast::cmd_raytrace const& c) const override;\n\n //private:\n    void operator()(std::vector<PropValue> const& v) const;\n    void operator()(int v) const;\n    void operator()(double v) const;\n    void operator()(std::string const& v) const;\n    void operator()(Int2 const& v) const;\n    void operator()(Int3 const& v) const;\n    void operator()(Int4 const& v) const;\n    void operator()(Vector2 const& v) const;\n    void operator()(Vector3 const& v) const;\n    void operator()(Vector4 const& v) const;\n    void operator()(PropValue const& v) const;\n\n private:\n    std::ostream& _os;\n};\n\n\nnamespace validators {\n    auto is_valid_vector2 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 2);\n    };\n\n    auto is_valid_vector3 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 3);\n    };\n\n    auto is_valid_vector4 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 4);\n    };\n\n    auto is_valid_matrix3 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 9);\n    };\n\n    auto is_valid_matrix4 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 16);\n    };\n}\n\nnamespace parser {\n    namespace ascii = boost::spirit::x3::ascii;\n    using namespace x3;\n\n    //\n    // Since a double parser also parses an integer, we will always get a double, even if the input is \"12\"\n    // In order to prevent this, we need a strict double parser\n    //\n    boost::spirit::x3::real_parser<double, boost::spirit::x3::strict_real_policies<double> > const double_ = {};\n\n    template <typename T> auto as = [](auto p) { return x3::rule<struct _, T> {} = p; };\n    //auto const uintPair = as<ast::uintPair_t> ( uint_ >> '-' >> uint_       );\n    //auto const uintObj  = as<ast::uintObj>    ( uintPair | uint_            );\n    //auto const varVec   = as<ast::varVec>     ( '[' >> uintObj % ',' >> ']' );\n\n    auto const esc_char \n        = x3::rule<struct esc_char_, char> {\"esc_char\"}\n        = '\\\\' >> char_(\"\\\"\");\n\n    auto const string \n        = x3::rule<struct string_, std::string> {\"string\"}\n        = lexeme[+graph];\n\n    auto const string_char\n        = esc_char | alnum | char_(\"$/_.:-+@!~\");\n\n    x3::rule<class unquoted_string_, std::string> const unquoted_string = \"unquoted_string\";\n    auto const unquoted_string_def = //lexeme[+(~char_(\" \\\"\\'\"))];\n        lexeme[+string_char];\n    BOOST_SPIRIT_DEFINE(unquoted_string)\n\n    x3::rule<class empty_string_> const empty_string = \"empty_string\";\n    auto const empty_string_def = (char_('\"') >> char_('\"')) | (char_('\\'') >> char_('\\''));\n    BOOST_SPIRIT_DEFINE(empty_string)\n\n    x3::rule<class quoted_string_, std::string> const quoted_string = \"quoted_string\";\n    auto const quoted_string_def = \n        x3::lexeme['\"' > *(esc_char | ~x3::char_('\"')) > '\"'] | \n        x3::lexeme['\\'' > *(esc_char | ~x3::char_('\\'')) > '\\''] | lexeme[empty_string];\n\n    BOOST_SPIRIT_DEFINE(quoted_string)\n\n    x3::rule<class any_string_, std::string> const any_string = \"any_string\";\n    auto const any_string_def = quoted_string | unquoted_string;\n    BOOST_SPIRIT_DEFINE(any_string)\n\n    x3::rule<class identifier_, std::string> const identifier = \"identifier\";\n    auto const identifier_def = lexeme[(alnum | char_('_')) >> *(alnum | char_('_'))];\n    BOOST_SPIRIT_DEFINE(identifier)\n\n    x3::rule<class prop_name_, std::string> const prop_name = \"prop_name\";\n    auto const prop_name_def = lexeme[identifier >> *(char_(\".:/\") >> identifier)];\n    BOOST_SPIRIT_DEFINE(prop_name)\n\n    x3::rule<class obj_name_, std::string> const obj_name = \"obj_name\";\n    auto const obj_name_def = lexeme[(alnum | char_(\"/_\")) >> *(alnum | char_(\"/_\"))];\n    BOOST_SPIRIT_DEFINE(obj_name)\n\n    x3::rule<class unquoted_filename_, std::string> const unquoted_filename = \"unquoted_filename\";\n    auto const unquoted_filename_def = lexeme[+string_char];\n    BOOST_SPIRIT_DEFINE(unquoted_filename)\n\n    x3::rule<class quoted_filename_filename_, std::string> const quoted_filename = \"quoted_filename\";\n    auto const quoted_filename_def = \n        x3::lexeme['\"' > *(esc_char | ~x3::char_('\"')) > '\"'] | \n        x3::lexeme['\\'' > *(esc_char | ~x3::char_('\\'')) > '\\''] | lexeme[empty_string];\n    BOOST_SPIRIT_DEFINE(quoted_filename)\n\n    x3::rule<class any_filename_, std::string> const any_filename = \"any_filename\";\n    auto const any_filename_def = quoted_filename | unquoted_filename;\n    BOOST_SPIRIT_DEFINE(any_filename)\n\n    x3::rule<class int2_, Int2> const int2 = \"int2\";\n    auto const int2_def = repeat(2) [ int_ ];\n    BOOST_SPIRIT_DEFINE(int2)\n\n    x3::rule<class int3_, Int3> const int3 = \"int3\";\n    auto const int3_def = repeat(3) [ int_ ];\n    BOOST_SPIRIT_DEFINE(int3)\n\n    x3::rule<class int4_, Int4> const int4 = \"int4\";\n    auto const int4_def = repeat(4) [ int_ ];\n    BOOST_SPIRIT_DEFINE(int4)\n\n    x3::rule<class vector2_, Vector2> const vector2 = \"vector2\";\n    auto const vector2_def = repeat(2) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(vector2)\n\n    x3::rule<class vector3_, Vector3> const vector3 = \"vector3\";\n    auto const vector3_def = repeat(3) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(vector3)\n\n    x3::rule<class vector4_, Vector4> const vector4 = \"vector4\";\n    auto const vector4_def = repeat(4) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(vector4)\n\n    x3::rule<class matrix3_, Matrix3> const matrix3 = \"matrix3\";\n    auto const matrix3_def = repeat(9) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(matrix3)\n\n    x3::rule<class matrix4_, Matrix4> const matrix4 = \"matrix4\";\n    auto const matrix4_def = repeat(16) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(matrix4)\n\n    x3::rule<class version_, Version> const version = \"version\";\n    auto const version_def = lexeme[-lexeme[\"VER\"] >> int_ >> \".\" >> int_ >> \".\" >> int_];\n    BOOST_SPIRIT_DEFINE(version)\n\n    x3::rule<class bgeo_inline_, bgeo::ast::Bgeo> const bgeo_inline = \"bgeo_inline\";\n    auto const bgeo_inline_def = bgeo::parser::input;\n    BOOST_SPIRIT_DEFINE(bgeo_inline)\n\n    x3::rule<class lsd_expr_, lsd::expr::ast::Expr> const lsd_expr = \"lsd_expr\";\n    auto const lsd_expr_def = lsd::expr::parser::input;\n    BOOST_SPIRIT_DEFINE(lsd_expr)\n\n    using boost::fusion::at_c;\n    auto assign_prop = [](auto& ctx) { \n        _val(ctx).push_back(PropValue(_attr(ctx)));\n    };\n\n    x3::rule<class prop_value_, PropValue> const prop_value = \"prop_value\";\n    auto const prop_value_def = \n        vector4 | vector3 | vector2 | double_\n      | int4 | int3 | int2 | int_\n      | any_string ;\n    BOOST_SPIRIT_DEFINE(prop_value)\n\n    auto const keyword\n        = x3::rule<class keyword>{\"keyword\"}\n        = x3::lit(\"setenv\") | lit(\"cmd_time\") | lit(\"cmd_property\") | lit(\"cmd_image\") | lit(\"cmd_transform\") | lit(\"cmd_end\") | lit(\"cmd_detail\") | lit(\"cmd_deviceoption\") | lit(\"cmd_start\")\n        | lit(\"cmd_version\") | lit(\"cmd_defaults\") | lit(\"cmd_declare\") | lit(\"cmd_config\");\n\n    x3::rule<class prop_values_, std::vector<PropValue>> const prop_values = \"prop_values\";\n    auto const prop_values_def = *(prop_value - keyword);\n    BOOST_SPIRIT_DEFINE(prop_values)\n\n    x3::rule<class image_values_, std::vector<std::string>> const image_values = \"image_values\";\n    auto const image_values_def = *(quoted_string);\n    BOOST_SPIRIT_DEFINE(image_values)\n\n\n    struct ObjectsTable : x3::symbols<ast::Object> {\n        ObjectsTable() {\n            add (\"global\"   , ast::Object::GLOBAL)\n                (\"geo\"      , ast::Object::GEO)\n                (\"geometry\" , ast::Object::GEO)\n                (\"material\" , ast::Object::GEOMERTY)\n                (\"segment\"  , ast::Object::SEGMENT)\n                (\"camera\"   , ast::Object::CAMERA)\n                (\"light\"    , ast::Object::LIGHT)\n                (\"fog\"      , ast::Object::FOG)\n                (\"object\"   , ast::Object::OBJECT)\n                (\"instance\" , ast::Object::INSTANCE)\n                (\"plane\"    , ast::Object::PLANE)\n                (\"image\"    , ast::Object::IMAGE)\n                (\"renderer\" , ast::Object::RENDERER);\n        }\n    } const object;\n\n    struct PropTypesTable : x3::symbols<ast::Type> {\n        PropTypesTable() {\n            add (\"float\"    , ast::Type::FLOAT)\n                (\"bool\"     , ast::Type::BOOL)\n                (\"int\"      , ast::Type::INT)\n                (\"vector2\"  , ast::Type::VECTOR2)\n                (\"vector3\"  , ast::Type::VECTOR3)\n                (\"vector4\"  , ast::Type::VECTOR4)\n                (\"matrix3\"  , ast::Type::MATRIX3)\n                (\"matrix4\"  , ast::Type::MATRIX4)\n                (\"string\"   , ast::Type::STRING);\n        }\n    } const prop_type;\n\n        struct DisplayTypesTable : x3::symbols<ast::DisplayType> {\n        DisplayTypesTable() {\n            add (\"\\\"ip\\\"\"       , ast::DisplayType::IP)\n                (\"\\\"md\\\"\"       , ast::DisplayType::MD)\n                (\"\\\"JPEG\\\"\"     , ast::DisplayType::JPEG)\n                (\"\\\"PNG\\\"\"      , ast::DisplayType::PNG)\n                (\"\\\"OpenEXR\\\"\"  , ast::DisplayType::OPENEXR)\n                (\"\\\"TIFF\\\"\"     , ast::DisplayType::TIFF)\n                ;\n        }\n    } const display_type;\n\n    //x3::rule<class object_, ast::Object> const object = \"object\";\n    //auto const object_def = lexeme[\"global\" | \"geo\" | \"geometry\"];\n    //BOOST_SPIRIT_DEFINE(object)\n\n    using boost::fusion::at_c;\n    //auto assign_objtype = [](auto& ctx) { _val(ctx).type = _attr(ctx); };\n    //auto assign_time = [](auto& ctx) { _val(ctx).time = _attr(ctx); };\n    //auto assign_version = [](auto& ctx) { \n    //    _val(ctx).version[0] = at_c<0>(_attr(ctx)); \n    //    _val(ctx).version[1] = at_c<1>(_attr(ctx));\n    //    _val(ctx).version[2] = at_c<2>(_attr(ctx));\n    //};\n    //auto assign_comment = [](auto& ctx) {};\n    //auto assign_prop_values = [](auto& ctx) { std::cout << \"PROP: \" << _attr(ctx); };\n    //auto assign_bgeo = [](auto& ctx) { \n    //    std::cout << \"BGEO!!!\";\n    //    _val(ctx).bgeo = _attr(ctx); \n    //};\n\n    static auto const skipper = lexeme[ \n        \"/*\" >> *(char_ - \"*/\") >> \"*/\"\n        | \"//\" >> *~char_(\"\\r\\n\")\n        | '#' >> *~char_(\"\\r\\n\")\n        | blank\n    ] | blank;\n\n    auto const setenv\n        = x3::rule<class setenv, ast::setenv>{\"setenv\"}\n        = \"setenv\" >> identifier >> \"=\" >> any_string >> eps;\n\n    auto const cmd_image\n        = x3::rule<class cmd_image, ast::cmd_image>{\"cmd_image\"}\n        = \"cmd_image\" >> lit(\"\\\"-f\\\"\") >> display_type >> any_filename >> eps\n        | \"cmd_image\" >> display_type >> attr(\"\") >> eps\n        | \"cmd_image\" >> attr(ast::DisplayType::NONE) >> any_filename >> eps;\n\n    auto const cmd_property\n        = x3::rule<class cmd_property, ast::cmd_property>{\"cmd_property\"}\n        = \"cmd_property\" >> object >> identifier >> prop_values;\n    \n    auto const cmd_deviceoption\n        = x3::rule<class cmd_deviceoption, ast::cmd_deviceoption>{\"cmd_deviceoption\"}\n        = \"cmd_deviceoption\" >> prop_type >> prop_name >> prop_values;\n\n    auto const cmd_declare\n        = x3::rule<class cmd_declare, ast::cmd_declare>{\"cmd_declare\"}\n        = \"cmd_declare\" >> object >> prop_type >> prop_name >> prop_values;\n\n    auto const cmd_transform\n        = x3::rule<class cmd_transform, ast::cmd_transform>{\"cmd_transform\"}\n        = \"cmd_transform\" >> matrix4 >> eps;\n\n    auto const cmd_start\n        = x3::rule<class cmd_start, ast::cmd_start>{\"cmd_start\"}\n        = \"cmd_start\" >> object >> eps;\n\n    auto const cmd_time\n        = x3::rule<class cmd_time, ast::cmd_time>{\"cmd_time\"}\n        = \"cmd_time\" >> float_ >> eps;\n\n    auto const cmd_version\n        = x3::rule<class cmd_version, ast::cmd_version>{\"cmd_version\"}\n        = \"cmd_version\" >> version >> eps;\n\n    auto const cmd_config\n        = x3::rule<class cmd_config, ast::cmd_config>{\"cmd_config\"}\n        = \"cmd_config\" >> any_filename >> eps;\n\n    auto const cmd_defaults\n        = x3::rule<class cmd_defaults, ast::cmd_defaults>{\"cmd_defaults\"}\n        = \"cmd_defaults\" >> any_filename >> eps;\n\n    auto const cmd_detail\n        = x3::rule<class cmd_detail, ast::cmd_detail>{\"cmd_detail\"}\n        = \"cmd_detail\" >> lit(\"-T\") >> attr(true) >> obj_name >> any_filename >> attr(bgeo::ast::Bgeo())\n        | \"cmd_detail\" >> attr(false) >> obj_name >> \"stdin\" >> attr(\"stdin\") >> bgeo_inline\n        | \"cmd_detail\" >> attr(false) >> obj_name >> any_filename >> attr(bgeo::ast::Bgeo());\n\n    auto const cmd_geometry\n        = x3::rule<class cmd_geometry, ast::cmd_geometry>{\"cmd_geometry\"}\n        = \"cmd_geometry\" >> obj_name >> eps;\n\n    auto const cmd_raytrace\n        = x3::rule<class cmd_raytrace, ast::cmd_raytrace>{\"cmd_raytrace\"}\n        = \"cmd_raytrace\" >> eps;\n\n    auto const cmd_quit\n        = x3::rule<class cmd_quit, ast::cmd_quit>{\"cmd_quit\"}\n        = \"cmd_quit\" >> eps;\n\n    auto const cmd_end\n        = x3::rule<class cmd_end, ast::cmd_end>{\"cmd_end\"}\n        = \"cmd_end\" >> eps;\n\n    auto const cmd = setenv | cmd_image | cmd_time | cmd_version | cmd_config | cmd_defaults | cmd_end | cmd_quit | cmd_start | \n        cmd_transform | cmd_detail | cmd_geometry | cmd_property | cmd_raytrace | cmd_declare | cmd_deviceoption;\n    \n    auto const ifthen\n        = x3::rule<class ifthen, ast::ifthen>{\"ifthen\"}\n        = \"if\" >> lsd_expr >> \"then\" >> (+cmd)  >> \"endif\";\n\n    auto const input  = skip(skipper | char_(\"\\n\\t\")) [*(cmd | ifthen) % eol];\n\n}}  // namespace lsd::parser\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_GRAMMAR_LSD_H_",
			"file": "src/lava_lib/readers/grammar_lsd.h",
			"file_size": 25009,
			"file_write_time": 132457257089790980,
			"settings":
			{
				"buffer_size": 25009,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.slang",
			"settings":
			{
				"buffer_size": 2541,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/slang.cpp",
			"settings":
			{
				"buffer_size": 123225,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.cpp",
			"settings":
			{
				"buffer_size": 57291,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Video/VideoEncoder.cpp",
			"settings":
			{
				"buffer_size": 15920,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/slang.h",
			"settings":
			{
				"buffer_size": 133488,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.h",
			"settings":
			{
				"buffer_size": 13546,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.cpp",
			"settings":
			{
				"buffer_size": 18183,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Formats.cpp",
			"settings":
			{
				"buffer_size": 20658,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuTimer.cpp",
			"settings":
			{
				"buffer_size": 4521,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RasterizerState.cpp",
			"settings":
			{
				"buffer_size": 2331,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.cpp",
			"settings":
			{
				"buffer_size": 5434,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
			"settings":
			{
				"buffer_size": 5086,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.cpp",
			"settings":
			{
				"buffer_size": 17858,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/CopyContext.cpp",
			"settings":
			{
				"buffer_size": 6896,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/CopyContext.h",
			"settings":
			{
				"buffer_size": 8168,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.cpp",
			"settings":
			{
				"buffer_size": 3635,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VertexLayout.cpp",
			"settings":
			{
				"buffer_size": 1912,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.cpp",
			"settings":
			{
				"buffer_size": 2452,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ComputeProgram.cpp",
			"settings":
			{
				"buffer_size": 2688,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/SparseResourceManager.h",
			"settings":
			{
				"buffer_size": 3702,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/SparseResourceManager.cpp",
			"settings":
			{
				"buffer_size": 11359,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/grammar_lsd.h",
			"settings":
			{
				"buffer_size": 26056,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/LTX_Bitmap.cpp",
			"settings":
			{
				"buffer_size": 22023,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "media/textures/uv_checkers/4096x4096 Texel Density Texture 1.png.ltx",
			"settings":
			{
				"buffer_size": 1747560,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/LTX_BitmapAlgo.h",
			"settings":
			{
				"buffer_size": 1262,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/OpenImageIO/src/include/OpenImageIO/imagebuf.h",
			"settings":
			{
				"buffer_size": 73307,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/OpenImageIO/src/include/OpenImageIO/imageio.h",
			"settings":
			{
				"buffer_size": 136015,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/OpenImageIO/src/include/OpenImageIO/typedesc.h",
			"settings":
			{
				"buffer_size": 28075,
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4742,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/pxr/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 399,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/pxr/imaging/plugin/hdLava/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2448,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/pxr/imaging/plugin/hdLava/plugInfo.json.old",
			"settings":
			{
				"buffer_size": 604,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/pxr/imaging/plugin/hdLava/plugInfo.json.in",
			"settings":
			{
				"buffer_size": 604,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/pxr/imaging/plugin/hdLava/lavaApi.h",
			"settings":
			{
				"buffer_size": 2707,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/pxr/imaging/plugin/hdLava/lavaApi.cpp",
			"settings":
			{
				"buffer_size": 5839,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/bin/lava_app_init.sh",
			"settings":
			{
				"buffer_size": 324,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 567,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/LTX_BitmapAlgo.cpp",
			"settings":
			{
				"buffer_size": 10518,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "media/textures/uv_checkers/4096x4096 Texel Density Texture 2.png.ltx",
			"settings":
			{
				"buffer_size": 1747560,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/LTX_Bitmap.h",
			"settings":
			{
				"buffer_size": 5610,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 5729,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1069,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/LTX_BitmapUtils.h",
			"settings":
			{
				"buffer_size": 569,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/LTX_BitmapUtils.cpp",
			"settings":
			{
				"buffer_size": 2247,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/Bitmap.cpp",
			"settings":
			{
				"buffer_size": 14903,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/Bitmap.h",
			"settings":
			{
				"buffer_size": 6797,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.h",
			"settings":
			{
				"buffer_size": 18654,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/FalcorConfig.h",
			"settings":
			{
				"buffer_size": 2544,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glm/glm/gtx/compatibility.hpp",
			"settings":
			{
				"buffer_size": 14979,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VirtualTexturePage.cpp",
			"settings":
			{
				"buffer_size": 2842,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/ThreadPool.cpp",
			"settings":
			{
				"buffer_size": 1819,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/ThreadPool.h",
			"settings":
			{
				"buffer_size": 965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VirtualTexturePage.h",
			"settings":
			{
				"buffer_size": 2727,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/vulkan/include/vulkan/vulkan_core.h",
			"settings":
			{
				"buffer_size": 541063,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/TextureLoader.cpp",
			"settings":
			{
				"buffer_size": 24309,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
			"settings":
			{
				"buffer_size": 11549,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.h",
			"settings":
			{
				"buffer_size": 9621,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
			"settings":
			{
				"buffer_size": 14266,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.cpp",
			"settings":
			{
				"buffer_size": 6247,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Sampler.cpp",
			"settings":
			{
				"buffer_size": 4282,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.cpp",
			"settings":
			{
				"buffer_size": 16476,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
			"settings":
			{
				"buffer_size": 31686,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuMemoryHeap.cpp",
			"settings":
			{
				"buffer_size": 5126,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/LowLevelContextData.h",
			"settings":
			{
				"buffer_size": 4100,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Logger.h",
			"settings":
			{
				"buffer_size": 6007,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/debug.h",
			"settings":
			{
				"buffer_size": 3123,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Formats.h",
			"settings":
			{
				"buffer_size": 14038,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
			"settings":
			{
				"buffer_size": 6259,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp",
			"settings":
			{
				"buffer_size": 2413,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "add_subdirectory( Falcor ) # core framework rendering library\nadd_subdirectory( RenderPasses ) # falcor rendering framework rendering passes plugins\n\nadd_subdirectory( lava_utils_lib ) # lava utility library\nadd_subdirectory( lava_lib ) # rendering library\nadd_subdirectory( lava_cmd ) # command line renderer\n\nadd_subdirectory( houdini ) # SOHO\n\nadd_subdirectory( pxr ) # usd hydra renderer plugin\n\n#add_subdirectory( tools ) # falcor tools\n#add_subdirectory( Samples ) # falcor samples\n#add_subdirectory( Mogwai ) # gui application\n",
			"file": "src/CMakeLists.txt",
			"file_size": 533,
			"file_write_time": 132555414204575806,
			"settings":
			{
				"buffer_size": 534,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.cpp",
			"settings":
			{
				"buffer_size": 25155,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.h",
			"settings":
			{
				"buffer_size": 11441,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
			"settings":
			{
				"buffer_size": 5608,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.cpp",
			"settings":
			{
				"buffer_size": 5362,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cpp",
			"settings":
			{
				"buffer_size": 6996,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
			"settings":
			{
				"buffer_size": 5216,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/BlendState.cpp",
			"settings":
			{
				"buffer_size": 3710,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.cpp",
			"settings":
			{
				"buffer_size": 12586,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RootSignature.cpp",
			"settings":
			{
				"buffer_size": 8993,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DepthStencilState.cpp",
			"settings":
			{
				"buffer_size": 3745,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DepthStencilState.h",
			"settings":
			{
				"buffer_size": 7560,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphExe.h",
			"settings":
			{
				"buffer_size": 4261,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphExe.cpp",
			"settings":
			{
				"buffer_size": 5259,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Renderer.h",
			"settings":
			{
				"buffer_size": 7203,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.h",
			"settings":
			{
				"buffer_size": 7389,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.h",
			"settings":
			{
				"buffer_size": 8364,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.h",
			"settings":
			{
				"buffer_size": 12691,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12Device.cpp",
			"settings":
			{
				"buffer_size": 15156,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.h",
			"settings":
			{
				"buffer_size": 3075,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.cpp",
			"settings":
			{
				"buffer_size": 25487,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Clock.cpp",
			"settings":
			{
				"buffer_size": 9897,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer.cpp",
			"settings":
			{
				"buffer_size": 13889,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/logging.h",
			"settings":
			{
				"buffer_size": 2457,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKSampler.cpp",
			"settings":
			{
				"buffer_size": 2442,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Sampler.h",
			"settings":
			{
				"buffer_size": 7908,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_tools/ltxview.cpp",
			"settings":
			{
				"buffer_size": 7123,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_tools/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1331,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Clock.h",
			"settings":
			{
				"buffer_size": 8564,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DeviceManager.h",
			"settings":
			{
				"buffer_size": 3988,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDeviceManager.cpp",
			"settings":
			{
				"buffer_size": 3062,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer.h",
			"settings":
			{
				"buffer_size": 5284,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DeviceManager.cpp",
			"settings":
			{
				"buffer_size": 5539,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.h",
			"settings":
			{
				"buffer_size": 12537,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphCompiler.h",
			"settings":
			{
				"buffer_size": 3226,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/prelude/slang-cpp-types.h",
			"settings":
			{
				"buffer_size": 37133,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
			"settings":
			{
				"buffer_size": 32140,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "SkyBox + 7 eagle models. 4K x 256spp (with MESA)\n\n8.20 s\n7.90 s\n8.01 s\n\n\n\n",
			"settings":
			{
				"buffer_size": 74,
				"line_ending": "Unix",
				"name": "SkyBox + 7 eagle models. 4K x 256spp (with MESA)"
			}
		},
		{
			"file": "src/lava_lib/display.h",
			"settings":
			{
				"buffer_size": 2601,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/display.cpp",
			"settings":
			{
				"buffer_size": 12020,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/prman/ri.h",
			"settings":
			{
				"buffer_size": 49551,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/visitor.cpp",
			"settings":
			{
				"buffer_size": 5835,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/simple_inline_ascii3.lsd",
			"settings":
			{
				"buffer_size": 7575,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/session.cpp",
			"settings":
			{
				"buffer_size": 17142,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/minecraft_01.lsd",
			"settings":
			{
				"buffer_size": 47101,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/vt_test_1.lsd",
			"settings":
			{
				"buffer_size": 74946,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/scope.h",
			"settings":
			{
				"buffer_size": 5018,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/Material.cpp",
			"settings":
			{
				"buffer_size": 21449,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/lava_cmd.cpp",
			"settings":
			{
				"buffer_size": 7915,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/logging.cpp",
			"settings":
			{
				"buffer_size": 2211,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/session.h",
			"settings":
			{
				"buffer_size": 2369,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Externals/GLM/glm/gtx/transform.hpp",
			"settings":
			{
				"buffer_size": 1665,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Externals/GLM/glm/ext/quaternion_transform.hpp",
			"settings":
			{
				"buffer_size": 1331,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Externals/GLM/glm/ext/matrix_transform.hpp",
			"settings":
			{
				"buffer_size": 6026,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Externals/GLM/glm/gtx/rotate_vector.hpp",
			"settings":
			{
				"buffer_size": 3570,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/ut_string.cpp",
			"settings":
			{
				"buffer_size": 609,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/ut_string.h",
			"settings":
			{
				"buffer_size": 298,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/imdisplay_test.py",
			"settings":
			{
				"buffer_size": 609,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/reader_lsd.h",
			"settings":
			{
				"buffer_size": 1455,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/conf/default.py",
			"settings":
			{
				"buffer_size": 3329,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/sdl_display/d_sdl.cpp",
			"settings":
			{
				"buffer_size": 8697,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/sdl_display/sdl_opengl_window.h",
			"settings":
			{
				"buffer_size": 1716,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/sdl_display/sdl_opengl_window.cpp",
			"settings":
			{
				"buffer_size": 9233,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/simple_inline_ascii4.lsd",
			"settings":
			{
				"buffer_size": 500133,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/scope.cpp",
			"settings":
			{
				"buffer_size": 8706,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/properties_container.cpp",
			"settings":
			{
				"buffer_size": 16518,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/instance_inline_ascii_1.lsd",
			"settings":
			{
				"buffer_size": 26178,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/scene_builder.cpp",
			"settings":
			{
				"buffer_size": 16796,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.cpp",
			"settings":
			{
				"buffer_size": 8785,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.h",
			"settings":
			{
				"buffer_size": 3029,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/scene_builder.h",
			"settings":
			{
				"buffer_size": 867,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/Material.h",
			"settings":
			{
				"buffer_size": 11903,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.h",
			"settings":
			{
				"buffer_size": 14477,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.h",
			"settings":
			{
				"buffer_size": 5144,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.cpp",
			"settings":
			{
				"buffer_size": 31578,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/TimeReport.cpp",
			"settings":
			{
				"buffer_size": 2736,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.h",
			"settings":
			{
				"buffer_size": 29405,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/Animatable.h",
			"settings":
			{
				"buffer_size": 3413,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/Animatable.cpp",
			"settings":
			{
				"buffer_size": 2090,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.h",
			"settings":
			{
				"buffer_size": 4605,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.cpp",
			"settings":
			{
				"buffer_size": 4754,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp",
			"settings":
			{
				"buffer_size": 43473,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.h",
			"settings":
			{
				"buffer_size": 27015,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h",
			"settings":
			{
				"buffer_size": 10485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
			"settings":
			{
				"buffer_size": 7958,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.h",
			"settings":
			{
				"buffer_size": 8675,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.cpp",
			"settings":
			{
				"buffer_size": 14274,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHRefit.cs.slang",
			"settings":
			{
				"buffer_size": 7705,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.slang",
			"settings":
			{
				"buffer_size": 4343,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/FinalizeIntegration.cs.slang",
			"settings":
			{
				"buffer_size": 4150,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
			"settings":
			{
				"buffer_size": 6241,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/BxDFTypes.slang",
			"settings":
			{
				"buffer_size": 2300,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/BxDF.slang",
			"settings":
			{
				"buffer_size": 24049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/Fresnel.slang",
			"settings":
			{
				"buffer_size": 4300,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang",
			"settings":
			{
				"buffer_size": 8184,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/MaterialShading.slang",
			"settings":
			{
				"buffer_size": 26490,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/Microfacet.slang",
			"settings":
			{
				"buffer_size": 10130,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang",
			"settings":
			{
				"buffer_size": 41105,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/TexLODTypes.slang",
			"settings":
			{
				"buffer_size": 2900,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.h",
			"settings":
			{
				"buffer_size": 3576,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.slang",
			"settings":
			{
				"buffer_size": 2868,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapData.slang",
			"settings":
			{
				"buffer_size": 2178,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang",
			"settings":
			{
				"buffer_size": 4983,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerType.slangh",
			"settings":
			{
				"buffer_size": 2577,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerInterface.slang",
			"settings":
			{
				"buffer_size": 4180,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang",
			"settings":
			{
				"buffer_size": 5874,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.slang",
			"settings":
			{
				"buffer_size": 3489,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang",
			"settings":
			{
				"buffer_size": 6084,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/BuildTriangleList.cs.slang",
			"settings":
			{
				"buffer_size": 3362,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.cpp",
			"settings":
			{
				"buffer_size": 5279,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.h",
			"settings":
			{
				"buffer_size": 3425,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.slang",
			"settings":
			{
				"buffer_size": 6643,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSamplerSetup.cs.slang",
			"settings":
			{
				"buffer_size": 3272,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Core/Window.h",
			"settings":
			{
				"buffer_size": 5592,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/AnimationController.h",
			"settings":
			{
				"buffer_size": 5078,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.h",
			"settings":
			{
				"buffer_size": 12566,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
			"settings":
			{
				"buffer_size": 27029,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollectionShared.slang",
			"settings":
			{
				"buffer_size": 5732,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.slang",
			"settings":
			{
				"buffer_size": 5394,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/AnimationController.cpp",
			"settings":
			{
				"buffer_size": 10423,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/Animation.h",
			"settings":
			{
				"buffer_size": 5117,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/Animation.cpp",
			"settings":
			{
				"buffer_size": 9568,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/InternalDictionary.h",
			"settings":
			{
				"buffer_size": 4253,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer_scripting.cpp",
			"settings":
			{
				"buffer_size": 3505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/scene_reader_base.h",
			"settings":
			{
				"buffer_size": 1126,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nPackage Control\n---------------\n\n  Version 3.4.0 Release Notes\n  \n   -----------------------------------------------------------------------\n  | NOTICE: This will be the final release of Package Control supporting  |\n  | - Sublime Text 2                                                      |\n  | - Sublime Text 3 beta builds (<3143)                                  |\n   -----------------------------------------------------------------------\n  | Please see https://sublimetext.com for an updated build               |\n   -----------------------------------------------------------------------\n  \n  New features include:\n  \n   - Support for repositories hosted on https://gitlab.com - by TheSecEng\n  \n   - An alternative TLS implementation based on the oscrypto Python\n     library, which uses native operating system TLS libraries and\n     certificate handling. See the \"downloader_precedence\" setting to enable.\n  \n   - Preferences now use the side-by-side edit mode\n  \n   - Added command palette entries to enable and disable debug mode for\n     troubleshooting and bug reports\n  \n  Bug fixes include:\n  \n   - Fixed operation on macOS 11.0 Big Sur - by TheSecEng\n  \n   - Improved handling of invalid dependencies - by deathaxe\n  \n   - Corrected handling of unsuccessful downloads with wget - by deathaxe\n  \n   - Fixed various issues with the HTTP caching - by deathaxe\n  \n   - Updated the BitBucket provider to use the 2.0 API - deathaxe\n  \n   - Packages installed via symlinks are now unlinked instead of being\n     deleted when being removed or cleaned up - by rchl\n  \n   - Improved install performance of packages with large numbers of\n     files - by BenjaminSchaaf\n  \n   - Fixed handling of auth with the wininet downloader - by NicholasBuse\n  \n   - Fixed handling BitBucket repositories without a nickname\n  \n   - Resolved deadlocks and ignored packages occuring when removing multiple\n     dependencies at once\n  \n   - Package messages are no longer printed with trailing whitespace on lines\n     with no text - by dnicolson\n",
			"settings":
			{
				"buffer_size": 2087,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "src/lava_lib/scene_reader_base.cpp",
			"settings":
			{
				"buffer_size": 622,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer_iface.h",
			"settings":
			{
				"buffer_size": 2403,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer_iface.cpp",
			"settings":
			{
				"buffer_size": 2960,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
			"settings":
			{
				"buffer_size": 3193,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"grammar_lsd.h\"\n#include \"session_lsd.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\nnamespace lava { \n\nnamespace lsd {\n\nVisitor::Visitor(std::unique_ptr<SessionLSD>& pSession): mpSession(std::move(pSession)) {\n\n} \n\nvoid Visitor::operator()(ast::ifthen const& c) const {\n    \n}\n\nvoid Visitor::operator()(ast::setenv const& c) const {\n    std::cout << \"Visitor setenv\\n\";\n    mpSession->cmdSetEnv(c.key, c.value);\n};\n\nvoid Visitor::operator()(ast::cmd_image const& c) const { \n    std::cout << \"LSDVisitor cmd_image\\n\";\n    if (c.display_type != ast::DisplayType::NONE) {\n        mpSession->loadDisplayByType(c.display_type);\n    } else {\n        mpSession->loadDisplayByFileName(c.filename);\n    }\n}\n\nvoid Visitor::operator()(ast::cmd_end const& c) const { \n    std::cout << \"LSDVisitor cmd_end\\n\";\n}\n\nvoid Visitor::operator()(ast::cmd_quit const& c) const { \n    std::cout << \"LSDVisitor cmd_quit\\n\";\n}\n\nvoid Visitor::operator()(ast::cmd_start const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_time const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_detail const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_version const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_config const& c) const {\n    mpSession->cmdConfig(c.filename);\n}\n\nvoid Visitor::operator()(ast::cmd_defaults const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_transform const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_geometry const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_property const& c) const {\n   //ast::Object style = getPropertyStyle(c.style);\n}\n\nvoid Visitor::operator()(ast::cmd_deviceoption const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_declare const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_raytrace const& c) const {\n    mpSession->cmdRaytrace();\n}\n\n}  // namespace lsd\n\n}  // namespace lava\n",
			"file": "src/lava_lib/readers/lsd_visitor.cpp",
			"file_size": 1871,
			"file_write_time": 132457254940187570,
			"settings":
			{
				"buffer_size": 1871,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"grammar_lsd.h\"\n#include \"session_lsd.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\n\nnamespace lava { \n\nnamespace lsd {\n\nEchoVisitor::EchoVisitor(std::unique_ptr<SessionLSD>& pSession): Visitor(pSession), _os(std::cout){ \n\n}\n\nEchoVisitor::EchoVisitor(std::unique_ptr<SessionLSD>& pSession, std::ostream& os): Visitor(pSession), _os(os){ \n\n}\n\nvoid EchoVisitor::operator()(int v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(double v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(std::string const& v) const {\n    _os << '\"' << v << '\"';\n}\n\nvoid EchoVisitor::operator()(Int2 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Int3 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Int4 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Vector2 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Vector3 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Vector4 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(PropValue const& v) const { \n    boost::apply_visitor(*this, v);\n}\n\nvoid EchoVisitor::operator()(std::vector<PropValue> const& v) const {\n    if (!v.empty()) {\n        _os << \"[ \";\n        for(std::vector<PropValue>::const_iterator it = v.begin(); it != (v.end() - 1); it++) {\n            boost::apply_visitor(*this, *it);\n            _os << \" \";\n        }\n        boost::apply_visitor(*this, v.back());\n        _os << \" ]\";\n    } else {\n        _os << \"!!! EMPTY !!!\";\n    }\n}\n\nvoid EchoVisitor::operator()(ast::ifthen const& c) const {\n    _os << \"\\x1b[32m\" << \"> ifthen: \" << c.expr << \"\\x1b[0m\\n\";\n\n    if( c.expr) {\n        for( auto const& cmd: c.commands) {\n            boost::apply_visitor(*this, cmd);\n        }\n    }\n}\n\nvoid EchoVisitor::operator()(ast::setenv const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> setenv: \" << c.key << \" = \" << c.value << \"\\x1b[0m\\n\"; \n};\n\nvoid EchoVisitor::operator()(ast::cmd_image const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_image: \";\n    if(c.display_type != ast::DisplayType::NONE) {\n        _os << \"type: \";\n        switch(c.display_type) {\n            case ast::DisplayType::IP:\n                _os << \"md\";\n                break;\n            case ast::DisplayType::MD:\n                _os << \"ip\";\n                break;\n            case ast::DisplayType::OPENEXR:\n                _os << \"openexr\";\n                break;\n            case ast::DisplayType::JPEG:\n                _os << \"jpeg\";\n                break;\n            case ast::DisplayType::TIFF:\n                _os << \"tiff\";\n                break;\n            case ast::DisplayType::PNG:\n                _os << \"png\";\n                break;\n            default:\n                _os << \"unknown\";\n                break;\n        }\n        _os << \" \";\n    }\n    if(!c.filename.empty()) {\n        _os << \"filename: \" << c.filename;\n    }\n    _os << \"\\x1b[0m\\n\"; \n}\n\nvoid EchoVisitor::operator()(ast::cmd_end const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_end: \" << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_quit const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_quit: \" << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_start const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_start: \" << c.type << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_time const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_time: \" << c.time << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_detail const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_detail: name: \" << c.name << \" filename: \" << c.filename << \"\\n\";\n    boost::apply_visitor(bgeo::EchoVisitor(), c.bgeo);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_version const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_version: \" << c.version << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_defaults const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_defaults: filename: \" << c.filename << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_config const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_config: filename: \" << c.filename << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_transform const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_transform: \" << c.m << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_geometry const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_geometry: geometry_object: \" << c.geometry_object << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_property const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_property: style: \" << c.style << \" token: \" << c.token << \" values: \";\n    EchoVisitor::operator()(c.values);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_deviceoption const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_deviceoption: type: \" << c.type << \" name: \" << c.name << \" values: \";\n    EchoVisitor::operator()(c.values);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_declare const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_declare: style: \" << c.style << \" token: \" << c.token << \" type: \" << c.type << \" values: \";\n    EchoVisitor::operator()(c.values);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_raytrace const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_raytrace: \" << \"\\x1b[0m\\n\";\n}\n\n}  // namespace lsd\n\n}  // namespace lava\n",
			"file": "src/lava_lib/readers/lsd_echo_visitor.cpp",
			"file_size": 5756,
			"file_write_time": 132457254875628693,
			"settings":
			{
				"buffer_size": 5756,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_SESSION_LSD_H_\n#define SRC_LAVA_LIB_SESSION_LSD_H_\n\n#include <memory>\n\n#include \"grammar_lsd.h\"\n#include \"../renderer_iface.h\"\n\nnamespace lava {\n\nclass SessionLSD {\n\n public:\n    SessionLSD(std::unique_ptr<RendererIface> pRendererIface);\n    ~SessionLSD();\n\n public:\n \tbool loadDisplayByType(const lsd::ast::DisplayType& display_type);\n \tbool loadDisplayByFileName(const std::string& file_name);\n\n \tvoid cmdSetEnv(const std::string& key, const std::string& value);\n \tvoid cmdRaytrace();\n    void cmdConfig(const std::string& file_name);\n\n private:\n \tbool initRenderData();\n\n private:\n \tstd::unique_ptr<RendererIface> mpRendererIface;\n \tstd::vector<std::string> mGraphConfigs;\n\n};\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_SESSION_LSD_H_",
			"file": "src/lava_lib/readers/session_lsd.h",
			"file_size": 762,
			"file_write_time": 132457252424072702,
			"settings":
			{
				"buffer_size": 762,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"session_lsd.h\"\n\n#include \"lava_utils_lib/ut_fsys.h\"\n#include \"lava_utils_lib/logging.h\"\n\nnamespace lava {\n\nnamespace lsd {\n\nstd::string resolveDisplayDriverByFileName(const std::string& file_name) {\n\tstd::string ext = ut::fsys::getFileExtension(file_name);\n\n    if( ext == \".exr\" ) return std::move(\"openexr\");\n    if( ext == \".jpg\" ) return std::move(\"jpeg\");\n    if( ext == \".jpeg\" ) return std::move(\"jpeg\");\n    if( ext == \".png\" ) return std::move(\"png\");\n    if( ext == \".tif\" ) return std::move(\"tiff\");\n    if( ext == \".tiff\" ) return std::move(\"tiff\");\n    return std::move(\"openexr\");\n}\n\n}  // namespace lsd\n\nSessionLSD::SessionLSD(std::unique_ptr<RendererIface> pRendererIface) { \n\tmpRendererIface = std::move(pRendererIface);\n}\n\nSessionLSD::~SessionLSD() { }\n\n\nbool SessionLSD::loadDisplayByType(const lsd::ast::DisplayType& display_type) {\n\tstd::string display_name;\n\n\tswitch(display_type) {\n\t\tcase lsd::ast::DisplayType::IP:\n\t\tcase lsd::ast::DisplayType::MD:\n\t\t\tdisplay_name = \"houdini\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::OPENEXR:\n\t\t\tdisplay_name = \"openexr\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::JPEG:\n\t\t\tdisplay_name = \"jpeg\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::TIFF:\n\t\t\tdisplay_name = \"tiff\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::PNG:\n\t\tdefault:\n\t\t\tdisplay_name = \"png\";\n\t\t\tbreak;\n\t}\n\n\treturn mpRendererIface->loadDisplay(display_name);\n}\n\nbool SessionLSD::loadDisplayByFileName(const std::string& file_name) {\n\treturn mpRendererIface->loadDisplay(lsd::resolveDisplayDriverByFileName(file_name));\n}\n\nvoid SessionLSD::cmdSetEnv(const std::string& key, const std::string& value) {\n\tmpRendererIface->setEnvVariable(key, value);\n}\n\nvoid SessionLSD::cmdConfig(const std::string& file_name) {\n\t// actual render graph configs loading postponed unitl renderer is initialized\n\tmGraphConfigs.push_back(file_name);\n}\n\n// initialize renderer and push render data\nbool SessionLSD::initRenderData() {\n\tLLOG_DBG << \"initRenderData\";\n\tif(!mpRendererIface->initRenderer()) return false;\n\n\tfor(auto const& graph_conf_file: mGraphConfigs) {\n\t\tif(!mpRendererIface->loadScript(graph_conf_file)) return false;\n\t}\n\n\treturn true;\n}\n\nbool SessionLSD::cmdRaytrace() {\n\tLLOG_DBG << \"cmdRaytrace\";\n\t\n\t// push postponed data\n\tif(!initRenderData()) {\n\t\tthrow std::runtime_error(\"cmdRaytrace failed!\");\n\t}\n\n\tmpRendererIface->renderFrame();\n}\n\n}  // namespace lava",
			"file": "src/lava_lib/readers/session_lsd.cpp",
			"file_size": 2312,
			"file_write_time": 132457252701107573,
			"settings":
			{
				"buffer_size": 2376,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <vector>\n#include <fstream>\n#include <iterator>\n#include <regex>\n\n#include <boost/spirit/include/support_istream_iterator.hpp>\n\n#include \"reader_lsd.h\"\n#include \"grammar_lsd.h\"\n\n#include \"lava_utils_lib/logging.h\"\n\nnamespace x3 = boost::spirit::x3;\n\nnamespace lava {\n\n\nReaderLSD::ReaderLSD(): ReaderBase(), mInitialized(false) { }\n\nReaderLSD::~ReaderLSD() { }\n\nvoid ReaderLSD::init(std::unique_ptr<RendererIface> pRendererInterface, bool echo) {\n    auto pSession = std::make_unique<SessionLSD>(std::move(pRendererInterface));\n\n    if (!echo) {\n        // standard LSD visitor\n        mpVisitor = std::make_unique<lsd::Visitor>(pSession);\n    } else {\n        // LSD visitor with parsed console echo (for debug purposes)\n        mpVisitor = std::make_unique<lsd::EchoVisitor>(pSession);\n    }\n\n    mInitialized = true;\n\n    LLOG_DBG << \"ReaderLSD::init done\";\n}\n\nbool ReaderLSD::isInitialized() {\n    return mInitialized;\n}\n\nconst char *ReaderLSD::formatName() const{\n    return \"Lava LSD\";\n}\n\nbool ReaderLSD::checkExtension(const char *name) {\n    if (strcmp(name, \".lsd\")) return true;\n    return false;\n}\n\nvoid ReaderLSD::getFileExtensions(std::vector<std::string> &extensions) const{\n    extensions.insert(extensions.end(), _lsd_extensions.begin(), _lsd_extensions.end());\n}\n\nbool ReaderLSD::checkMagicNumber(unsigned magic) {\n  return true;\n}\n\nbool ReaderLSD::parseStream(std::istream& in) {\n    in.unsetf(std::ios_base::skipws);\n    boost::spirit::istream_iterator iter(in), end;\n\n    std::vector<lsd::ast::Command> commands; // ast tree\n    bool result = x3::parse(iter, end, lsd::parser::input, commands); \n\n    if (!result) {\n        LLOG_ERR << \"Parsing LSD scene failed !!!\" << std::endl;\n        return false;\n    }\n\n    if (iter != end) {\n        //unparsed = std::string(iter, end);\n        LLOG_DBG << \"Remaining unparsed: \" << std::string(iter, end);\n        return true;\n    }\n\n    for (auto& cmd : commands) {\n        boost::apply_visitor(*mpVisitor, cmd);\n    }\n\n    return true;\n}\n\nbool ReaderLSD::parseLine(const std::string& line, std::string& unparsed) {\n    unparsed = \"\";\n    auto iter = line.begin(), end = line.end();\n    \n    std::vector<lsd::ast::Command> commands; // ast tree\n    bool result = x3::parse(iter, end, lsd::parser::input, commands);\n\n    if (!result) {\n        LLOG_ERR << \"Parsing LSD scene failed !!!\" << std::endl;\n        return false;\n    }\n\n    if (iter != end) {\n        unparsed = std::string(iter, end);\n        //LOG_DBG << \"Parsed: \" << (100.0 * std::distance(line.begin(), iter) / line.size()) << \"%\";\n        //LOG_DBG << \"Remaining unparsed: \" << unparsed << \"\\n\";\n        return true;\n    }\n\n    for (auto& cmd : commands) {\n        boost::apply_visitor(*mpVisitor, cmd);\n    }\n\n    return true;\n}\n\n// factory methods\nstd::vector<std::string> *ReaderLSD::myExtensions() {\n    return &_lsd_extensions;\n}\n\nReaderBase::SharedPtr ReaderLSD::myConstructor() {\n    return ReaderBase::SharedPtr(new ReaderLSD());\n}\n\n}  // namespace lava",
			"file": "src/lava_lib/readers/reader_lsd.cpp",
			"file_size": 2997,
			"file_write_time": 132457255870731555,
			"settings":
			{
				"buffer_size": 2997,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_LOADER_LSD_H_\n#define SRC_LAVA_LIB_LOADER_LSD_H_\n\n//#include <boost/lambda/bind.hpp>\n//#include <boost/spirit/include/qi.hpp>\n//#include <boost/spirit/include/classic.hpp>\n\n#include <memory>\n\n#include \"../scene_reader_base.h\"\n#include \"session_lsd.h\"\n#include \"grammar_lsd.h\"\n\n\nnamespace lava {\n\nstatic std::vector<std::string> _lsd_extensions = {\".lsd\",\".lsd.gz\",\".lsd.zip\"};\n\ntypedef std::string::const_iterator It;\n\nclass ReaderLSD: public ReaderBase {\n public:\n \tReaderLSD();\n \t~ReaderLSD() override;\n\n    virtual void    init(std::unique_ptr<RendererIface> pRendererInterface, bool echo) override;\n\n    const char*     formatName() const override;\n    bool            checkExtension(const char *name) override;\n    void            getFileExtensions(std::vector<std::string> &extensions) const override;\n\n    // Method to check if the given magic number matches the magic number. Return true on a match.\n    bool            checkMagicNumber(unsigned magic) override;\n\n private:\n    virtual bool    isInitialized() override;\n \tvirtual bool    parseStream(std::istream& in) override;\n    virtual bool    parseLine(const std::string& line, std::string& unparsed) override;\n\n private:\n    std::unique_ptr<lsd::Visitor>   mpVisitor;\n    bool mInitialized;\n\n public:\n    // factory methods\n    static ReaderBase::SharedPtr        myConstructor();\n    static std::vector<std::string>*    myExtensions();\n};\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_LOADER_LSD_H_\n",
			"file": "src/lava_lib/readers/reader_lsd.h",
			"file_size": 1486,
			"file_write_time": 132457255612895963,
			"settings":
			{
				"buffer_size": 1486,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/max/dev/Lava",
		"/home/max/dev/Lava/build_scripts",
		"/home/max/dev/Lava/cmake",
		"/home/max/dev/Lava/cmake/modules",
		"/home/max/dev/Lava/contrib",
		"/home/max/dev/Lava/contrib/houdini",
		"/home/max/dev/Lava/contrib/linux",
		"/home/max/dev/Lava/media",
		"/home/max/dev/Lava/src",
		"/home/max/dev/Lava/src/Falcor",
		"/home/max/dev/Lava/src/Falcor/Core",
		"/home/max/dev/Lava/src/Falcor/Core/API",
		"/home/max/dev/Lava/src/Falcor/Core/API/Vulkan",
		"/home/max/dev/Lava/src/Falcor/Core/Program",
		"/home/max/dev/Lava/src/Falcor/Experimental",
		"/home/max/dev/Lava/src/Falcor/Experimental/Scene",
		"/home/max/dev/Lava/src/Falcor/Experimental/Scene/Lights",
		"/home/max/dev/Lava/src/Falcor/RenderGraph",
		"/home/max/dev/Lava/src/Falcor/RenderPasses",
		"/home/max/dev/Lava/src/Falcor/Scene",
		"/home/max/dev/Lava/src/Falcor/Scene/Lights",
		"/home/max/dev/Lava/src/Falcor/Scene/Material",
		"/home/max/dev/Lava/src/Falcor/Scene/ParticleSystem",
		"/home/max/dev/Lava/src/Falcor/Utils",
		"/home/max/dev/Lava/src/Falcor/Utils/Debug",
		"/home/max/dev/Lava/src/Falcor/Utils/Image",
		"/home/max/dev/Lava/src/Falcor/Utils/Math",
		"/home/max/dev/Lava/src/Falcor/Utils/SampleGenerators",
		"/home/max/dev/Lava/src/Falcor/Utils/Scripting",
		"/home/max/dev/Lava/src/houdini",
		"/home/max/dev/Lava/src/lava_cmd",
		"/home/max/dev/Lava/src/lava_cmd/bin",
		"/home/max/dev/Lava/src/lava_cmd/conf",
		"/home/max/dev/Lava/src/lava_lib",
		"/home/max/dev/Lava/src/lava_lib/reader_lsd",
		"/home/max/dev/Lava/src/lava_utils_lib",
		"/home/max/dev/Lava/src/pxr",
		"/home/max/dev/Lava/src/pxr/imaging",
		"/home/max/dev/Lava/src/pxr/imaging/plugin",
		"/home/max/dev/Lava/src/pxr/imaging/plugin/hdLava",
		"/home/max/dev/Lava/src/RenderPasses",
		"/home/max/dev/Lava/src/RenderPasses/AccumulatePass",
		"/home/max/dev/Lava/src/RenderPasses/ForwardLightingPass",
		"/home/max/dev/Lava/src/RenderPasses/GBuffer",
		"/home/max/dev/Lava/src/RenderPasses/GBuffer/GBuffer",
		"/home/max/dev/Lava/src/RenderPasses/SkyBox",
		"/home/max/dev/Lava/src/RenderPasses/TexturesResolvePass",
		"/home/max/dev/Lava/third_party",
		"/home/max/dev/Lava/third_party/OpenImageIO"
	],
	"file_history":
	[
		"/home/max/dev/Lava/src/Falcor/Utils/Image/DDSHeader.h",
		"/home/max/Desktop/mantra_vex.txt",
		"/home/max/dev/Lava/src/Falcor/Utils/Image/LTX_Bitmap.cpp.bak2",
		"/home/max/dev/Lava/cmake/modules/FindTIFF.cmake",
		"/home/max/dev/Lava/src/CMakeLists.txt",
		"/home/max/dev/Lava/build_scripts/build_lava.sh",
		"/home/max/dev/Falcor/Media/textures/npot_sized/feathers_1293_1701.png.ltx",
		"/home/max/dev/Falcor/Media/textures/npot_sized/feathers_1293_1701.png",
		"/home/max/dev/Falcor/src/lava_cmd/conf/default.py.bak",
		"/home/max/dev/Falcor/Media/textures/tiled_rocks_2048x2048.jpg.ltx",
		"/home/max/dev/Falcor/Media/textures/car_1024x1024.hdr.ltx",
		"/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Formats.cpp",
		"/home/max/dev/Falcor/cmake/modules/FindZLIB.cmake",
		"/home/max/dev/Falcor/src/Falcor/Utils/Image/LTXHeader.h",
		"/home/max/dev/Falcor/third_party/assimp/include/assimp/LTX_Bitmap.h",
		"/home/max/dev/Falcor/src/lava_cmd/lava_cmd.cpp",
		"/opt/hfs17.5.460/houdini/soho/python2.7/RIBapiprman.py",
		"/opt/hfs17.5.460/houdini/soho/python2.7/RIBapi.py",
		"/opt/hfs17.5.460/houdini/soho/python2.7/RIB.py",
		"/opt/hfs17.5.460/houdini/soho/python2.7/RIBprman17.0.py",
		"/home/max/dev/Falcor/third_party/ri_display/d_houdini.cpp",
		"/opt/hfs17.5.460/houdini/soho/python2.7/RIBmisc.py",
		"/opt/hfs17.5.460/houdini/soho/python2.7/RIBframe.py",
		"/home/max/dev/Falcor/src/lava_cmd/bin/lava_app_init.sh",
		"/home/max/dev/Falcor/src/houdini/soho/parameters/lava.ds",
		"/home/max/dev/Falcor/src/lava_cmd/bin/lava",
		"/home/max/dev/Falcor/third_party/ri_display/CMakeLists.txt",
		"/home/max/dev/Falcor/src/houdini/soho/parameters/SOHOparameters",
		"/home/max/dev/Falcor/third_party/ri_display/d_houdini.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/visitor.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/grammar_lsd_expr.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/grammar_lsd.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Math/FalcorMath.h",
		"/home/max/dev/Falcor/src/Externals/GLM/glm/ext/matrix_float4x4.hpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/bgeo_handler.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/bgeo_handler.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/bgeo.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/session.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/visitor_echo.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/properties_container.h",
		"/home/max/dev/Falcor/src/Falcor/CMakeLists.txt",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/properties_container.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/reader_lsd.cpp",
		"/home/max/dev/Falcor/CMakeLists.txt",
		"/home/max/dev/Falcor/src/Falcor/Utils/Scripting/Console.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Scripting/Console.cpp",
		"/home/max/dev/Falcor/src/lava_lib/sdl_display/d_sdl.cpp",
		"/home/max/dev/Falcor/src/lava_lib/sdl_display/sdl_opengl_window.h",
		"/home/max/dev/Falcor/src/lava_lib/sdl_display/CMakeLists.txt",
		"/home/max/dev/Falcor/src/lava_lib/sdl_display/sdl_opengl_window.cpp",
		"/home/max/dev/Falcor/src/houdini/soho/overrides/RenderState",
		"/home/max/dev/Falcor/src/houdini/soho/overrides/RenderViewer",
		"/home/max/dev/Falcor/src/lava_lib/CMakeLists.txt",
		"/opt/lava/test/test_inline_ascii.lsd",
		"/opt/lava/test/simple_inline_ascii2.lsd",
		"/opt/hfs17.5.460/houdini/soho/python2.7/soho.py",
		"/home/max/dev/Falcor/src/houdini/soho/LSD.py",
		"/home/max/dev/Falcor/src/houdini/soho/LSDapi.py",
		"/home/max/dev/Falcor/src/houdini/soho/LSDframe.py",
		"/home/max/dev/Falcor/src/houdini/soho/LSDgeo.py",
		"/home/max/dev/Falcor/src/houdini/soho/LSDmisc.py",
		"/home/max/dev/Falcor/src/houdini/soho/LSDmantra.py",
		"/opt/hfs17.5.460/houdini/soho/python2.7/wranglers/HoudiniLightIFD.py",
		"/home/max/dev/Falcor/src/houdini/soho/overrides/ViewportCameraRender",
		"/home/max/dev/Falcor/src/houdini/soho/overrides/ViewportRender",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/backtracking.h",
		"/home/max/dev/Falcor/src/houdini/soho/overrides/RenderCOP",
		"/home/max/dev/Falcor/src/houdini/soho/overrides/RenderCommand",
		"/home/max/dev/Falcor/src/houdini/soho/LSDsettings.py",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Primitives.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Info.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/CMakeLists.txt",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Run.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Run.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/StorageTraits.cpp",
		"/home/max/dev/Falcor/third_party/bgeo_reader/bgeo/parser/Run.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/CMakeLists.txt",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Bgeo.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Detail.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Info.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/VertexMap.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/NumericData.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/PolySplitter.cpp",
		"/home/max/dev/Falcor/src/houdini/soho/python2.7/LSDgeo.py",
		"/home/max/dev/Falcor/src/Falcor/Falcor.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Timing/TimeReport.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Timing/TimeReport.cpp",
		"/home/max/dev/Falcor/src/Falcor/Utils/Math/MathConstants.slangh",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/PythonImporter.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/SceneImporter.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbeData.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightData.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/Lights/Light.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Lights/Light.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Color/ColorHelpers.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/Material/Material.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraController.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.h",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraController.h",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraData.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.h",
		"/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/DeviceManager.cpp",
		"/home/max/dev/Falcor/src/Falcor/Utils/Logger.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Logger.cpp",
		"/opt/hfs17.5.460/houdini/soho/python2.7/sohog.py",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Primitive.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Poly.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Attribute.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Primitive.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Primitive.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Mesh.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Mesh.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/PrimitiveFactory.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/PrimitiveFactory.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Primitive.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/PackedFragment.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/rtti.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/PackedDisk.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Volume.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/PrimType.h",
		"/home/max/dev/Falcor/third_party/bgeo_reader/bgeo/parser/Poly.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Mesh.cpp",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Mesh.h",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/AlembicRef.h"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/opt/houdini18.5/houdini/vex/CVex",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/Falcor/Scene/Material",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/Falcor/Scene",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/Falcor/Scene",
			"/home/max/dev/Lava/third_party/OpenImageIO/src",
			"/home/max/dev/Lava/third_party/Imath/src/Imath",
			"/home/max/dev/Lava/third_party/OpenImageIO",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/lava_lib",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/lava_lib",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Lava/src/lava_lib",
			"/home/max/dev/Lava/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor/Core/Program",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/lava_lib",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/Program",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/lava_lib/reader_bgeo",
			"/home/max/dev/Falcor/src/lava_lib/reader_lsd",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Scene",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/third_party/zlib",
			"/home/max/dev/Falcor/third_party/OpenEXR",
			"/home/max/dev/Falcor/third_party/OpenImageIO",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/third_party/slang/tests",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/RenderPasses",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"principleddiffuse_sample",
			"principleddiffuse_eval",
			"metallic",
			"sd.metallic",
			"DiffuseBrdf",
			"EPSILON",
			"mUpdates",
			"fl",
			"diffuse",
			"M_1_PI",
			"#define PI",
			"PI",
			"abs",
			"disneyDiffuseFresnel",
			"evalSpecularBrdf",
			"PackedStaticVertexData",
			"BOOST",
			"Texture require",
			"vkCreateCommandPool",
			"vkAllocateCommandBuffers",
			"RenderContext::create",
			"basecolor_texture",
			"vkCreateImage",
			"Execute graph:",
			"StaticVertexData",
			"PYBIND_MODULE",
			"tangentW",
			"Tile level",
			"Adding mesh",
			"Create texture",
			"Tile level",
			"createViewCommon image id",
			"Can't generate tangent space",
			"is missing the element texture",
			"specialization key",
			"getCSO done",
			"createSparseTextureFromFile",
			"Invalidating resource views",
			"setResourceSrvUavCommon resource id",
			"prepareForDispatch",
			"LAVA_INSTALL_DEPS_DIR",
			"LAVA_THIRD_PARTY_DIR",
			"RWStructuredBuffer",
			"SV_TARGET1",
			"mutating",
			"mutable",
			"barrier",
			"mutating",
			"RWByteAddressBuffer",
			"InterlockedOr",
			"Load",
			"Texel",
			"prepareShadingData",
			"sampleTexture",
			"Sample",
			"_MS_DISABLE_ALPHA_TEST",
			"prepareShadingData",
			"SampleLevel",
			"mSparseBindDirty",
			"VSOut",
			"discard",
			"prepareShadingData",
			"lastPageDims",
			"GpuFence",
			"SampleLevel",
			"SampleBias",
			"SampleLevel",
			"bindSamplerToMaterials",
			"setSampler",
			"Sampler",
			"Filter::Linear",
			"alphaTest",
			"early",
			"early_fragment_tests",
			"initialized",
			"prepareShadingData",
			"ExplicitLodTextureSampler",
			"alphaTest",
			"updateSparseBindInfo",
			"textureManager",
			"TextureManager",
			"clamp",
			"RWByte",
			"<<",
			"Interlocked",
			"RWByte",
			"InterlockedAdd",
			"byte",
			"Store",
			"RWByteAddressBuffer",
			"RWByte",
			"gTexelSum",
			"RWByteAddressBuffer",
			"RWByte",
			"ReflectionBasicType",
			"materialTextures",
			"int8_t",
			"byte",
			"align",
			"Store",
			"ddx",
			"CalculateLevelOfDetail",
			"ddx",
			"mFileTimeMap",
			"Creating resources",
			"Creating resources:",
			"init",
			"TODO",
			"TIME_PROFILE_BLOCK",
			"vkAllocateMemory(pDevice->getApiHandle(), &allocInfo, nullptr, &deviceMem)",
			"Popp",
			"HVERSION_MAJOR",
			"blosc compressed files are not supported",
			"mBgeo",
			"tex2Dlod",
			"fwidth",
			"dFdx",
			"StructuredBuffer",
			"\n            ",
			"Linear",
			"Sampler::create",
			"gSampler",
			"Sample",
			"Invalidating resource views",
			" Invalidating resource views",
			"VK_IMAGE_TILING_LINEAR",
			"Error when creating",
			"Error when creating Texture2D of format"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"LAVA_3RDPARTY_INSTALL_DIR",
			"LAVA_3RDPARTY_SOURCE_DIR",
			"partialPageDims",
			"mInitialized",
			"sparseResourceManager",
			"SparseResourceManager",
			"materialSparseTextures",
			"imageCreateInfo",
			"unique_points",
			"geometry_name",
			"uv_coords",
			"Mesh",
			"outColor",
			"lsd",
			"LAVA_VEX_DISABLE_AUXPLANE",
			"LAVA",
			"Lava",
			"lv_",
			"lava",
			"lv_",
			"ExprValue",
			"ctx",
			"context",
			"LSD",
			"cmd_",
			"lv_",
			"li_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"ROP_Lava",
			"Lava",
			"lava",
			"mRenderer",
			"RENDERER",
			"LAVA",
			"Lava",
			"LAVA",
			"Lava",
			"LAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"Lava",
			"mSceneVersion",
			"mModelVersion",
			"mSceneVersion",
			"mRenderer",
			"Falcor::LavaRenderer",
			"Lava",
			"LAVA",
			"Lava",
			"LAVA",
			"mSceneVersion",
			"mSettingDescriptors",
			"mLastCommittedModelVersion",
			"mRenderParam",
			"LAVA",
			"Lava",
			"LAVA",
			"Lava",
			"mpDevice",
			"kPassTempLibSuffix",
			"PROJECT_DIR",
			"spData"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Core/Program/GraphicsProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2672,
						"regions":
						{
						},
						"selection":
						[
							[
								1830,
								1830
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2358427,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										349,
										357
									],
									[
										597,
										605
									],
									[
										1044,
										1052
									],
									[
										1476,
										1484
									],
									[
										1980,
										1988
									],
									[
										2254,
										2262
									],
									[
										2622,
										2630
									],
									[
										3001,
										3009
									],
									[
										3217,
										3225
									],
									[
										3512,
										3520
									],
									[
										3650,
										3658
									],
									[
										3662,
										3670
									],
									[
										3754,
										3762
									],
									[
										3769,
										3777
									],
									[
										4100,
										4108
									],
									[
										4279,
										4287
									],
									[
										4291,
										4299
									],
									[
										4428,
										4436
									],
									[
										4443,
										4451
									],
									[
										4868,
										4876
									],
									[
										5201,
										5209
									],
									[
										5562,
										5570
									],
									[
										5623,
										5631
									],
									[
										5895,
										5903
									],
									[
										5972,
										5980
									],
									[
										6185,
										6193
									],
									[
										6240,
										6248
									],
									[
										6312,
										6320
									],
									[
										6370,
										6378
									],
									[
										6598,
										6606
									],
									[
										6677,
										6685
									],
									[
										7028,
										7036
									],
									[
										7087,
										7095
									],
									[
										7329,
										7337
									],
									[
										7364,
										7372
									],
									[
										7834,
										7842
									],
									[
										7868,
										7876
									],
									[
										7908,
										7916
									],
									[
										7978,
										7986
									],
									[
										8015,
										8023
									],
									[
										8058,
										8066
									],
									[
										8497,
										8505
									],
									[
										8541,
										8549
									],
									[
										8783,
										8791
									],
									[
										8944,
										8952
									],
									[
										9014,
										9022
									],
									[
										9068,
										9076
									],
									[
										9237,
										9245
									],
									[
										9309,
										9317
									],
									[
										9552,
										9560
									],
									[
										9641,
										9649
									],
									[
										9706,
										9714
									],
									[
										9746,
										9754
									],
									[
										10000,
										10008
									],
									[
										10165,
										10173
									],
									[
										10414,
										10422
									],
									[
										10434,
										10442
									],
									[
										10704,
										10712
									],
									[
										10808,
										10816
									],
									[
										11068,
										11076
									],
									[
										11104,
										11112
									],
									[
										11183,
										11191
									],
									[
										11365,
										11373
									],
									[
										11618,
										11626
									],
									[
										11790,
										11798
									],
									[
										11979,
										11987
									],
									[
										12243,
										12251
									],
									[
										12411,
										12419
									],
									[
										12789,
										12797
									],
									[
										13149,
										13157
									],
									[
										13384,
										13392
									],
									[
										13462,
										13470
									],
									[
										13563,
										13571
									],
									[
										13747,
										13755
									],
									[
										14081,
										14089
									],
									[
										14741,
										14749
									],
									[
										14855,
										14863
									],
									[
										14888,
										14896
									],
									[
										15338,
										15346
									],
									[
										15671,
										15679
									],
									[
										15783,
										15791
									],
									[
										16142,
										16150
									],
									[
										16368,
										16376
									],
									[
										16478,
										16486
									],
									[
										16766,
										16774
									],
									[
										16833,
										16841
									],
									[
										17026,
										17034
									],
									[
										17213,
										17221
									],
									[
										17305,
										17313
									],
									[
										17499,
										17507
									],
									[
										17602,
										17610
									],
									[
										17788,
										17796
									],
									[
										17907,
										17915
									],
									[
										18107,
										18115
									],
									[
										18211,
										18219
									],
									[
										18405,
										18413
									],
									[
										18513,
										18521
									],
									[
										18720,
										18728
									],
									[
										18823,
										18831
									],
									[
										19026,
										19034
									],
									[
										19129,
										19137
									],
									[
										19333,
										19341
									],
									[
										19436,
										19444
									],
									[
										19640,
										19648
									],
									[
										19743,
										19751
									],
									[
										19947,
										19955
									],
									[
										20050,
										20058
									],
									[
										20198,
										20206
									],
									[
										20263,
										20271
									],
									[
										20407,
										20415
									],
									[
										20564,
										20572
									],
									[
										20801,
										20809
									],
									[
										20897,
										20905
									],
									[
										20988,
										20996
									],
									[
										21181,
										21189
									],
									[
										21202,
										21210
									],
									[
										21334,
										21342
									],
									[
										21627,
										21635
									],
									[
										21648,
										21656
									],
									[
										21903,
										21911
									],
									[
										22048,
										22056
									],
									[
										22309,
										22317
									],
									[
										22359,
										22367
									],
									[
										22459,
										22467
									],
									[
										22586,
										22594
									],
									[
										22698,
										22706
									],
									[
										22748,
										22756
									],
									[
										23047,
										23055
									],
									[
										23094,
										23102
									],
									[
										23487,
										23495
									],
									[
										23800,
										23808
									],
									[
										24060,
										24068
									],
									[
										24155,
										24163
									],
									[
										24267,
										24275
									],
									[
										24484,
										24492
									],
									[
										24713,
										24721
									],
									[
										25156,
										25164
									],
									[
										25404,
										25412
									],
									[
										25851,
										25859
									],
									[
										26283,
										26291
									],
									[
										26787,
										26795
									],
									[
										27061,
										27069
									],
									[
										27429,
										27437
									],
									[
										27808,
										27816
									],
									[
										28024,
										28032
									],
									[
										28319,
										28327
									],
									[
										28457,
										28465
									],
									[
										28469,
										28477
									],
									[
										28561,
										28569
									],
									[
										28576,
										28584
									],
									[
										28907,
										28915
									],
									[
										29086,
										29094
									],
									[
										29098,
										29106
									],
									[
										29235,
										29243
									],
									[
										29250,
										29258
									],
									[
										29675,
										29683
									],
									[
										30008,
										30016
									],
									[
										30369,
										30377
									],
									[
										30430,
										30438
									],
									[
										30702,
										30710
									],
									[
										30779,
										30787
									],
									[
										30992,
										31000
									],
									[
										31047,
										31055
									],
									[
										31119,
										31127
									],
									[
										31177,
										31185
									],
									[
										31405,
										31413
									],
									[
										31484,
										31492
									],
									[
										31835,
										31843
									],
									[
										31894,
										31902
									],
									[
										32136,
										32144
									],
									[
										32171,
										32179
									],
									[
										32641,
										32649
									],
									[
										32675,
										32683
									],
									[
										32715,
										32723
									],
									[
										32785,
										32793
									],
									[
										32822,
										32830
									],
									[
										32865,
										32873
									],
									[
										33304,
										33312
									],
									[
										33348,
										33356
									],
									[
										33590,
										33598
									],
									[
										33751,
										33759
									],
									[
										33821,
										33829
									],
									[
										33875,
										33883
									],
									[
										34044,
										34052
									],
									[
										34116,
										34124
									],
									[
										34359,
										34367
									],
									[
										34448,
										34456
									],
									[
										34513,
										34521
									],
									[
										34553,
										34561
									],
									[
										34807,
										34815
									],
									[
										34972,
										34980
									],
									[
										35221,
										35229
									],
									[
										35241,
										35249
									],
									[
										35511,
										35519
									],
									[
										35615,
										35623
									],
									[
										35875,
										35883
									],
									[
										35911,
										35919
									],
									[
										35990,
										35998
									],
									[
										36172,
										36180
									],
									[
										36425,
										36433
									],
									[
										36597,
										36605
									],
									[
										36786,
										36794
									],
									[
										37050,
										37058
									],
									[
										37218,
										37226
									],
									[
										37596,
										37604
									],
									[
										37956,
										37964
									],
									[
										38191,
										38199
									],
									[
										38269,
										38277
									],
									[
										38370,
										38378
									],
									[
										38554,
										38562
									],
									[
										38888,
										38896
									],
									[
										39548,
										39556
									],
									[
										39662,
										39670
									],
									[
										39695,
										39703
									],
									[
										40145,
										40153
									],
									[
										40478,
										40486
									],
									[
										40590,
										40598
									],
									[
										40949,
										40957
									],
									[
										41175,
										41183
									],
									[
										41285,
										41293
									],
									[
										41573,
										41581
									],
									[
										41640,
										41648
									],
									[
										41833,
										41841
									],
									[
										42020,
										42028
									],
									[
										42112,
										42120
									],
									[
										42306,
										42314
									],
									[
										42409,
										42417
									],
									[
										42595,
										42603
									],
									[
										42714,
										42722
									],
									[
										42914,
										42922
									],
									[
										43018,
										43026
									],
									[
										43212,
										43220
									],
									[
										43320,
										43328
									],
									[
										43527,
										43535
									],
									[
										43630,
										43638
									],
									[
										43833,
										43841
									],
									[
										43936,
										43944
									],
									[
										44140,
										44148
									],
									[
										44243,
										44251
									],
									[
										44447,
										44455
									],
									[
										44550,
										44558
									],
									[
										44754,
										44762
									],
									[
										44857,
										44865
									],
									[
										45005,
										45013
									],
									[
										45070,
										45078
									],
									[
										45214,
										45222
									],
									[
										45371,
										45379
									],
									[
										45608,
										45616
									],
									[
										45704,
										45712
									],
									[
										45795,
										45803
									],
									[
										45988,
										45996
									],
									[
										46009,
										46017
									],
									[
										46141,
										46149
									],
									[
										46434,
										46442
									],
									[
										46455,
										46463
									],
									[
										46710,
										46718
									],
									[
										46855,
										46863
									],
									[
										47116,
										47124
									],
									[
										47166,
										47174
									],
									[
										47266,
										47274
									],
									[
										47393,
										47401
									],
									[
										47505,
										47513
									],
									[
										47555,
										47563
									],
									[
										47854,
										47862
									],
									[
										47901,
										47909
									],
									[
										48294,
										48302
									],
									[
										48607,
										48615
									],
									[
										48867,
										48875
									],
									[
										48962,
										48970
									],
									[
										49074,
										49082
									],
									[
										49291,
										49299
									],
									[
										49520,
										49528
									],
									[
										50047,
										50054
									],
									[
										50536,
										50543
									],
									[
										50948,
										50955
									],
									[
										50987,
										50994
									],
									[
										51041,
										51048
									],
									[
										51129,
										51136
									],
									[
										51222,
										51229
									],
									[
										51315,
										51322
									],
									[
										51397,
										51404
									],
									[
										51492,
										51499
									],
									[
										51594,
										51601
									],
									[
										51716,
										51723
									],
									[
										51799,
										51806
									],
									[
										51909,
										51916
									],
									[
										51994,
										52001
									],
									[
										52221,
										52228
									],
									[
										52259,
										52266
									],
									[
										52330,
										52337
									],
									[
										52617,
										52624
									],
									[
										52672,
										52679
									],
									[
										52726,
										52733
									],
									[
										52792,
										52799
									],
									[
										52858,
										52865
									],
									[
										52907,
										52914
									],
									[
										52972,
										52979
									],
									[
										53034,
										53041
									],
									[
										53093,
										53100
									],
									[
										53151,
										53158
									],
									[
										53218,
										53225
									],
									[
										53274,
										53281
									],
									[
										53323,
										53330
									],
									[
										53839,
										53846
									],
									[
										53864,
										53871
									],
									[
										54461,
										54468
									],
									[
										54481,
										54488
									],
									[
										54893,
										54900
									],
									[
										55195,
										55202
									],
									[
										55481,
										55488
									],
									[
										55920,
										55927
									],
									[
										55953,
										55960
									],
									[
										56770,
										56777
									],
									[
										57164,
										57171
									],
									[
										57192,
										57199
									],
									[
										57954,
										57961
									],
									[
										58110,
										58117
									],
									[
										58148,
										58155
									],
									[
										58190,
										58197
									],
									[
										58411,
										58418
									],
									[
										58503,
										58510
									],
									[
										58743,
										58750
									],
									[
										58802,
										58809
									],
									[
										58856,
										58863
									],
									[
										58922,
										58929
									],
									[
										58988,
										58995
									],
									[
										59041,
										59048
									],
									[
										59106,
										59113
									],
									[
										59168,
										59175
									],
									[
										59227,
										59234
									],
									[
										59285,
										59292
									],
									[
										59352,
										59359
									],
									[
										59412,
										59419
									],
									[
										59461,
										59468
									],
									[
										59708,
										59715
									],
									[
										59736,
										59743
									],
									[
										59971,
										59978
									],
									[
										59994,
										60001
									],
									[
										60261,
										60268
									],
									[
										60428,
										60435
									],
									[
										60959,
										60966
									],
									[
										61628,
										61635
									],
									[
										61982,
										61989
									],
									[
										62155,
										62162
									],
									[
										62193,
										62200
									],
									[
										62247,
										62254
									],
									[
										62342,
										62349
									],
									[
										62407,
										62414
									],
									[
										62854,
										62861
									],
									[
										62986,
										62993
									],
									[
										63655,
										63662
									],
									[
										63787,
										63794
									],
									[
										64452,
										64459
									],
									[
										64584,
										64591
									],
									[
										65168,
										65175
									],
									[
										65198,
										65205
									],
									[
										65258,
										65265
									],
									[
										65293,
										65300
									],
									[
										65712,
										65719
									],
									[
										65745,
										65752
									],
									[
										65808,
										65815
									],
									[
										65846,
										65853
									],
									[
										66243,
										66250
									],
									[
										66280,
										66287
									],
									[
										66342,
										66349
									],
									[
										66383,
										66390
									],
									[
										66805,
										66812
									],
									[
										66974,
										66981
									],
									[
										67025,
										67032
									],
									[
										67059,
										67066
									],
									[
										67081,
										67088
									],
									[
										67115,
										67122
									],
									[
										67195,
										67202
									],
									[
										67457,
										67464
									],
									[
										67486,
										67493
									],
									[
										67515,
										67522
									],
									[
										67557,
										67564
									],
									[
										67592,
										67599
									],
									[
										67626,
										67633
									],
									[
										67683,
										67690
									],
									[
										67810,
										67817
									],
									[
										67847,
										67854
									],
									[
										67884,
										67891
									],
									[
										67927,
										67934
									],
									[
										67969,
										67976
									],
									[
										68169,
										68176
									],
									[
										68204,
										68211
									],
									[
										68272,
										68279
									],
									[
										68327,
										68334
									],
									[
										68385,
										68392
									],
									[
										68440,
										68447
									],
									[
										68837,
										68844
									],
									[
										68859,
										68866
									],
									[
										68914,
										68921
									],
									[
										68936,
										68943
									],
									[
										68990,
										68997
									],
									[
										69012,
										69019
									],
									[
										69056,
										69063
									],
									[
										69078,
										69085
									],
									[
										69127,
										69134
									],
									[
										69149,
										69156
									],
									[
										69392,
										69399
									],
									[
										69443,
										69450
									],
									[
										69494,
										69501
									],
									[
										69551,
										69558
									],
									[
										69725,
										69732
									],
									[
										69888,
										69895
									],
									[
										70043,
										70050
									],
									[
										70235,
										70242
									],
									[
										70350,
										70357
									],
									[
										70441,
										70448
									],
									[
										70537,
										70544
									],
									[
										70624,
										70631
									],
									[
										70840,
										70847
									],
									[
										70951,
										70958
									],
									[
										71060,
										71067
									],
									[
										71138,
										71145
									],
									[
										71234,
										71241
									],
									[
										71314,
										71321
									],
									[
										71438,
										71445
									],
									[
										71492,
										71499
									],
									[
										71628,
										71635
									],
									[
										71737,
										71744
									],
									[
										71830,
										71837
									],
									[
										72050,
										72057
									],
									[
										72104,
										72111
									],
									[
										72217,
										72224
									],
									[
										72271,
										72278
									],
									[
										72368,
										72375
									],
									[
										72445,
										72452
									],
									[
										72720,
										72727
									],
									[
										73061,
										73068
									],
									[
										73192,
										73199
									],
									[
										73317,
										73324
									],
									[
										73442,
										73449
									],
									[
										73936,
										73943
									],
									[
										74055,
										74062
									],
									[
										74168,
										74175
									],
									[
										74281,
										74288
									],
									[
										74394,
										74401
									],
									[
										74512,
										74519
									],
									[
										74650,
										74657
									],
									[
										75000,
										75007
									],
									[
										75186,
										75193
									],
									[
										75303,
										75310
									],
									[
										75419,
										75426
									],
									[
										75672,
										75679
									],
									[
										75956,
										75963
									],
									[
										76070,
										76077
									],
									[
										76183,
										76190
									],
									[
										76433,
										76440
									],
									[
										76675,
										76682
									],
									[
										76700,
										76707
									],
									[
										76757,
										76764
									],
									[
										76789,
										76796
									],
									[
										76859,
										76866
									],
									[
										76891,
										76898
									],
									[
										77179,
										77186
									],
									[
										77216,
										77223
									],
									[
										77289,
										77296
									],
									[
										77326,
										77333
									],
									[
										77399,
										77406
									],
									[
										77436,
										77443
									],
									[
										77515,
										77522
									],
									[
										77552,
										77559
									],
									[
										77874,
										77881
									],
									[
										77907,
										77914
									],
									[
										78252,
										78259
									],
									[
										78277,
										78284
									],
									[
										78353,
										78360
									],
									[
										78377,
										78384
									],
									[
										78450,
										78457
									],
									[
										78483,
										78490
									],
									[
										78745,
										78752
									],
									[
										78787,
										78794
									],
									[
										78848,
										78855
									],
									[
										78890,
										78897
									],
									[
										78945,
										78952
									],
									[
										78987,
										78994
									],
									[
										79042,
										79049
									],
									[
										79084,
										79091
									],
									[
										79139,
										79146
									],
									[
										79181,
										79188
									],
									[
										79236,
										79243
									],
									[
										79278,
										79285
									],
									[
										79338,
										79345
									],
									[
										79380,
										79387
									],
									[
										79639,
										79646
									],
									[
										79687,
										79694
									],
									[
										79751,
										79758
									],
									[
										79799,
										79806
									],
									[
										79860,
										79867
									],
									[
										79908,
										79915
									],
									[
										79972,
										79979
									],
									[
										80020,
										80027
									],
									[
										80081,
										80088
									],
									[
										80132,
										80139
									],
									[
										80197,
										80204
									],
									[
										80244,
										80251
									],
									[
										80294,
										80301
									],
									[
										80341,
										80348
									],
									[
										80391,
										80398
									],
									[
										80438,
										80445
									],
									[
										80494,
										80501
									],
									[
										80541,
										80548
									],
									[
										80598,
										80605
									],
									[
										80645,
										80652
									],
									[
										81016,
										81023
									],
									[
										81186,
										81193
									],
									[
										81333,
										81340
									],
									[
										81478,
										81485
									],
									[
										81637,
										81644
									],
									[
										81891,
										81898
									],
									[
										82169,
										82176
									],
									[
										82492,
										82499
									],
									[
										82730,
										82737
									],
									[
										83025,
										83032
									],
									[
										83059,
										83066
									],
									[
										83147,
										83154
									],
									[
										83165,
										83172
									],
									[
										83300,
										83307
									],
									[
										83334,
										83341
									],
									[
										83700,
										83707
									],
									[
										84100,
										84107
									],
									[
										84383,
										84390
									],
									[
										84430,
										84437
									],
									[
										84721,
										84728
									],
									[
										84797,
										84804
									],
									[
										85121,
										85128
									],
									[
										85210,
										85217
									],
									[
										85296,
										85303
									],
									[
										85402,
										85409
									],
									[
										85487,
										85494
									],
									[
										85786,
										85793
									],
									[
										86048,
										86055
									],
									[
										86091,
										86098
									],
									[
										86134,
										86141
									],
									[
										86190,
										86197
									],
									[
										86239,
										86246
									],
									[
										86287,
										86294
									],
									[
										86341,
										86348
									],
									[
										86390,
										86397
									],
									[
										86436,
										86443
									],
									[
										86498,
										86505
									],
									[
										86563,
										86570
									],
									[
										86615,
										86622
									],
									[
										86673,
										86680
									],
									[
										86724,
										86731
									],
									[
										86775,
										86782
									],
									[
										86832,
										86839
									],
									[
										86888,
										86895
									],
									[
										87151,
										87158
									],
									[
										87231,
										87238
									],
									[
										87306,
										87313
									],
									[
										87740,
										87747
									],
									[
										88020,
										88027
									],
									[
										88099,
										88106
									],
									[
										88181,
										88188
									],
									[
										88525,
										88532
									],
									[
										88919,
										88926
									],
									[
										89018,
										89025
									],
									[
										89202,
										89209
									],
									[
										89403,
										89410
									],
									[
										89795,
										89802
									],
									[
										89962,
										89969
									],
									[
										90273,
										90280
									],
									[
										90317,
										90324
									],
									[
										90331,
										90338
									],
									[
										90540,
										90547
									],
									[
										90590,
										90597
									],
									[
										90604,
										90611
									],
									[
										90821,
										90828
									],
									[
										90871,
										90878
									],
									[
										90885,
										90892
									],
									[
										91109,
										91116
									],
									[
										91153,
										91160
									],
									[
										91405,
										91412
									],
									[
										91462,
										91469
									],
									[
										91476,
										91483
									],
									[
										91699,
										91706
									],
									[
										91748,
										91755
									],
									[
										91762,
										91769
									],
									[
										91980,
										91987
									],
									[
										92038,
										92045
									],
									[
										92317,
										92324
									],
									[
										92361,
										92368
									],
									[
										92693,
										92700
									],
									[
										92751,
										92758
									],
									[
										93151,
										93158
									],
									[
										93195,
										93202
									],
									[
										93439,
										93446
									],
									[
										93497,
										93504
									],
									[
										93785,
										93792
									],
									[
										93830,
										93837
									],
									[
										94114,
										94121
									],
									[
										94158,
										94165
									],
									[
										94401,
										94408
									],
									[
										94451,
										94458
									],
									[
										94702,
										94709
									],
									[
										94751,
										94758
									],
									[
										95000,
										95007
									],
									[
										95050,
										95057
									],
									[
										95448,
										95455
									],
									[
										95902,
										95909
									],
									[
										96100,
										96107
									],
									[
										96134,
										96141
									],
									[
										96340,
										96347
									],
									[
										96373,
										96380
									],
									[
										96422,
										96429
									],
									[
										96716,
										96723
									],
									[
										96800,
										96807
									],
									[
										97250,
										97257
									],
									[
										97332,
										97339
									],
									[
										97429,
										97436
									],
									[
										97791,
										97798
									],
									[
										97924,
										97931
									],
									[
										98103,
										98110
									],
									[
										98224,
										98231
									],
									[
										98618,
										98625
									],
									[
										98707,
										98714
									],
									[
										99002,
										99009
									],
									[
										99186,
										99193
									],
									[
										99382,
										99389
									],
									[
										99410,
										99417
									],
									[
										99438,
										99445
									],
									[
										99479,
										99486
									],
									[
										99513,
										99520
									],
									[
										99547,
										99554
									],
									[
										99585,
										99592
									],
									[
										99773,
										99780
									],
									[
										99898,
										99905
									],
									[
										99959,
										99966
									],
									[
										100008,
										100015
									],
									[
										100058,
										100065
									],
									[
										100184,
										100191
									],
									[
										100274,
										100281
									],
									[
										100326,
										100333
									],
									[
										100396,
										100403
									],
									[
										100530,
										100537
									],
									[
										100704,
										100711
									],
									[
										100900,
										100907
									],
									[
										101025,
										101032
									],
									[
										101086,
										101093
									],
									[
										101135,
										101142
									],
									[
										101185,
										101192
									],
									[
										101311,
										101318
									],
									[
										101401,
										101408
									],
									[
										101453,
										101460
									],
									[
										101523,
										101530
									],
									[
										101657,
										101664
									],
									[
										101831,
										101838
									],
									[
										102027,
										102034
									],
									[
										102152,
										102159
									],
									[
										102213,
										102220
									],
									[
										102262,
										102269
									],
									[
										102312,
										102319
									],
									[
										102438,
										102445
									],
									[
										102528,
										102535
									],
									[
										102580,
										102587
									],
									[
										102650,
										102657
									],
									[
										102771,
										102778
									],
									[
										102934,
										102941
									],
									[
										103164,
										103171
									],
									[
										103192,
										103199
									],
									[
										103220,
										103227
									],
									[
										103261,
										103268
									],
									[
										103295,
										103302
									],
									[
										103328,
										103335
									],
									[
										103367,
										103374
									],
									[
										103504,
										103511
									],
									[
										103675,
										103682
									],
									[
										103703,
										103710
									],
									[
										103731,
										103738
									],
									[
										103772,
										103779
									],
									[
										103806,
										103813
									],
									[
										103840,
										103847
									],
									[
										103878,
										103885
									],
									[
										104010,
										104017
									],
									[
										104148,
										104155
									],
									[
										104323,
										104330
									],
									[
										104353,
										104360
									],
									[
										104412,
										104419
									],
									[
										104440,
										104447
									],
									[
										104481,
										104488
									],
									[
										104515,
										104522
									],
									[
										104568,
										104575
									],
									[
										104606,
										104613
									],
									[
										104820,
										104827
									],
									[
										104984,
										104991
									],
									[
										105368,
										105375
									],
									[
										105462,
										105469
									],
									[
										105556,
										105563
									],
									[
										105650,
										105657
									],
									[
										105744,
										105751
									],
									[
										105838,
										105845
									],
									[
										106129,
										106136
									],
									[
										106402,
										106409
									],
									[
										106607,
										106614
									],
									[
										106679,
										106686
									],
									[
										106719,
										106726
									],
									[
										106914,
										106921
									],
									[
										107078,
										107085
									],
									[
										107287,
										107294
									],
									[
										107392,
										107399
									],
									[
										107464,
										107471
									],
									[
										107665,
										107672
									],
									[
										107987,
										107994
									],
									[
										108283,
										108290
									],
									[
										108475,
										108482
									],
									[
										108672,
										108679
									],
									[
										108877,
										108884
									],
									[
										108949,
										108956
									],
									[
										108989,
										108996
									],
									[
										109184,
										109191
									],
									[
										109348,
										109355
									],
									[
										109557,
										109564
									],
									[
										109662,
										109669
									],
									[
										109734,
										109741
									],
									[
										109937,
										109944
									],
									[
										110211,
										110218
									],
									[
										110257,
										110264
									],
									[
										110303,
										110310
									],
									[
										110362,
										110369
									],
									[
										110414,
										110421
									],
									[
										110466,
										110473
									],
									[
										110522,
										110529
									],
									[
										110798,
										110805
									],
									[
										110844,
										110851
									],
									[
										110890,
										110897
									],
									[
										110949,
										110956
									],
									[
										111001,
										111008
									],
									[
										111053,
										111060
									],
									[
										111109,
										111116
									],
									[
										111597,
										111604
									],
									[
										111691,
										111698
									],
									[
										111785,
										111792
									],
									[
										111879,
										111886
									],
									[
										111973,
										111980
									],
									[
										112067,
										112074
									],
									[
										112358,
										112365
									],
									[
										112631,
										112638
									],
									[
										112842,
										112849
									],
									[
										112914,
										112921
									],
									[
										112954,
										112961
									],
									[
										113149,
										113156
									],
									[
										113313,
										113320
									],
									[
										113534,
										113541
									],
									[
										113645,
										113652
									],
									[
										113717,
										113724
									],
									[
										113918,
										113925
									],
									[
										114117,
										114124
									],
									[
										114328,
										114335
									],
									[
										114400,
										114407
									],
									[
										114440,
										114447
									],
									[
										114635,
										114642
									],
									[
										114799,
										114806
									],
									[
										115020,
										115027
									],
									[
										115131,
										115138
									],
									[
										115203,
										115210
									],
									[
										115701,
										115708
									],
									[
										116185,
										116192
									],
									[
										116279,
										116286
									],
									[
										116373,
										116380
									],
									[
										116467,
										116474
									],
									[
										116561,
										116568
									],
									[
										116655,
										116662
									],
									[
										116946,
										116953
									],
									[
										117219,
										117226
									],
									[
										117430,
										117437
									],
									[
										117502,
										117509
									],
									[
										117542,
										117549
									],
									[
										117737,
										117744
									],
									[
										117901,
										117908
									],
									[
										118122,
										118129
									],
									[
										118233,
										118240
									],
									[
										118305,
										118312
									],
									[
										118506,
										118513
									],
									[
										118713,
										118720
									],
									[
										118924,
										118931
									],
									[
										118996,
										119003
									],
									[
										119036,
										119043
									],
									[
										119231,
										119238
									],
									[
										119395,
										119402
									],
									[
										119616,
										119623
									],
									[
										119727,
										119734
									],
									[
										119799,
										119806
									],
									[
										120297,
										120304
									],
									[
										120837,
										120844
									],
									[
										120931,
										120938
									],
									[
										121025,
										121032
									],
									[
										121119,
										121126
									],
									[
										121213,
										121220
									],
									[
										121307,
										121314
									],
									[
										121598,
										121605
									],
									[
										121871,
										121878
									],
									[
										122076,
										122083
									],
									[
										122148,
										122155
									],
									[
										122188,
										122195
									],
									[
										122383,
										122390
									],
									[
										122547,
										122554
									],
									[
										122756,
										122763
									],
									[
										122861,
										122868
									],
									[
										122933,
										122940
									],
									[
										123134,
										123141
									],
									[
										123333,
										123340
									],
									[
										123538,
										123545
									],
									[
										123610,
										123617
									],
									[
										123650,
										123657
									],
									[
										123845,
										123852
									],
									[
										124009,
										124016
									],
									[
										124218,
										124225
									],
									[
										124323,
										124330
									],
									[
										124395,
										124402
									],
									[
										124941,
										124948
									],
									[
										125314,
										125321
									],
									[
										125360,
										125367
									],
									[
										125406,
										125413
									],
									[
										125465,
										125472
									],
									[
										125517,
										125524
									],
									[
										125568,
										125575
									],
									[
										125625,
										125632
									],
									[
										125845,
										125852
									],
									[
										125891,
										125898
									],
									[
										125937,
										125944
									],
									[
										125996,
										126003
									],
									[
										126048,
										126055
									],
									[
										126099,
										126106
									],
									[
										126156,
										126163
									],
									[
										126463,
										126470
									],
									[
										126661,
										126668
									],
									[
										126935,
										126942
									],
									[
										126981,
										126988
									],
									[
										127027,
										127034
									],
									[
										127086,
										127093
									],
									[
										127138,
										127145
									],
									[
										127190,
										127197
									],
									[
										127246,
										127253
									],
									[
										127518,
										127525
									],
									[
										127723,
										127730
									],
									[
										127925,
										127932
									],
									[
										127971,
										127978
									],
									[
										128017,
										128024
									],
									[
										128076,
										128083
									],
									[
										128128,
										128135
									],
									[
										128180,
										128187
									],
									[
										128236,
										128243
									],
									[
										128508,
										128515
									],
									[
										128894,
										128901
									],
									[
										128972,
										128979
									],
									[
										129061,
										129068
									],
									[
										129455,
										129462
									],
									[
										129623,
										129630
									],
									[
										129670,
										129677
									],
									[
										129730,
										129737
									],
									[
										129840,
										129847
									],
									[
										130267,
										130274
									],
									[
										130375,
										130382
									],
									[
										130484,
										130491
									],
									[
										130599,
										130606
									],
									[
										130938,
										130945
									],
									[
										131362,
										131369
									],
									[
										131415,
										131422
									],
									[
										131469,
										131476
									],
									[
										131529,
										131536
									],
									[
										131755,
										131762
									],
									[
										131810,
										131817
									],
									[
										131865,
										131872
									],
									[
										131926,
										131933
									],
									[
										132172,
										132179
									],
									[
										132227,
										132234
									],
									[
										132282,
										132289
									],
									[
										132343,
										132350
									],
									[
										132788,
										132795
									],
									[
										132896,
										132903
									],
									[
										133005,
										133012
									],
									[
										133120,
										133127
									],
									[
										133459,
										133466
									],
									[
										133873,
										133880
									],
									[
										133926,
										133933
									],
									[
										133980,
										133987
									],
									[
										134040,
										134047
									],
									[
										134266,
										134273
									],
									[
										134321,
										134328
									],
									[
										134376,
										134383
									],
									[
										134437,
										134444
									],
									[
										134683,
										134690
									],
									[
										134738,
										134745
									],
									[
										134793,
										134800
									],
									[
										134854,
										134861
									],
									[
										135299,
										135306
									],
									[
										135407,
										135414
									],
									[
										135516,
										135523
									],
									[
										135631,
										135638
									],
									[
										135970,
										135977
									],
									[
										136384,
										136391
									],
									[
										136437,
										136444
									],
									[
										136491,
										136498
									],
									[
										136551,
										136558
									],
									[
										136777,
										136784
									],
									[
										136832,
										136839
									],
									[
										136887,
										136894
									],
									[
										136948,
										136955
									],
									[
										137194,
										137201
									],
									[
										137249,
										137256
									],
									[
										137304,
										137311
									],
									[
										137365,
										137372
									],
									[
										137810,
										137817
									],
									[
										137918,
										137925
									],
									[
										138027,
										138034
									],
									[
										138142,
										138149
									],
									[
										138481,
										138488
									],
									[
										138895,
										138902
									],
									[
										138948,
										138955
									],
									[
										139002,
										139009
									],
									[
										139062,
										139069
									],
									[
										139288,
										139295
									],
									[
										139343,
										139350
									],
									[
										139398,
										139405
									],
									[
										139459,
										139466
									],
									[
										139705,
										139712
									],
									[
										139760,
										139767
									],
									[
										139815,
										139822
									],
									[
										139876,
										139883
									],
									[
										140321,
										140328
									],
									[
										140429,
										140436
									],
									[
										140538,
										140545
									],
									[
										140653,
										140660
									],
									[
										140992,
										140999
									],
									[
										141406,
										141413
									],
									[
										141459,
										141466
									],
									[
										141513,
										141520
									],
									[
										141573,
										141580
									],
									[
										141799,
										141806
									],
									[
										141854,
										141861
									],
									[
										141909,
										141916
									],
									[
										141970,
										141977
									],
									[
										142216,
										142223
									],
									[
										142271,
										142278
									],
									[
										142326,
										142333
									],
									[
										142387,
										142394
									],
									[
										142837,
										142844
									],
									[
										142945,
										142952
									],
									[
										143054,
										143061
									],
									[
										143169,
										143176
									],
									[
										143588,
										143595
									],
									[
										144026,
										144033
									],
									[
										144079,
										144086
									],
									[
										144133,
										144140
									],
									[
										144193,
										144200
									],
									[
										144412,
										144419
									],
									[
										144616,
										144623
									],
									[
										144671,
										144678
									],
									[
										144726,
										144733
									],
									[
										144787,
										144794
									],
									[
										144848,
										144855
									],
									[
										145084,
										145091
									],
									[
										145139,
										145146
									],
									[
										145194,
										145201
									],
									[
										145255,
										145262
									],
									[
										145316,
										145323
									],
									[
										145798,
										145805
									],
									[
										145906,
										145913
									],
									[
										146015,
										146022
									],
									[
										146130,
										146137
									],
									[
										146549,
										146556
									],
									[
										146987,
										146994
									],
									[
										147040,
										147047
									],
									[
										147094,
										147101
									],
									[
										147154,
										147161
									],
									[
										147373,
										147380
									],
									[
										147566,
										147573
									],
									[
										147613,
										147620
									],
									[
										147927,
										147934
									],
									[
										147974,
										147981
									],
									[
										148257,
										148264
									],
									[
										148304,
										148311
									],
									[
										148591,
										148598
									],
									[
										148638,
										148645
									],
									[
										148888,
										148895
									],
									[
										148935,
										148942
									],
									[
										149227,
										149234
									],
									[
										149282,
										149289
									],
									[
										149337,
										149344
									],
									[
										149398,
										149405
									],
									[
										149621,
										149628
									],
									[
										149847,
										149854
									],
									[
										149894,
										149901
									],
									[
										150208,
										150215
									],
									[
										150255,
										150262
									],
									[
										150538,
										150545
									],
									[
										150585,
										150592
									],
									[
										150872,
										150879
									],
									[
										150919,
										150926
									],
									[
										151169,
										151176
									],
									[
										151216,
										151223
									],
									[
										151694,
										151701
									],
									[
										151803,
										151810
									],
									[
										151912,
										151919
									],
									[
										152027,
										152034
									],
									[
										152366,
										152373
									],
									[
										152780,
										152787
									],
									[
										152834,
										152841
									],
									[
										152888,
										152895
									],
									[
										152948,
										152955
									],
									[
										153239,
										153246
									],
									[
										153294,
										153301
									],
									[
										153349,
										153356
									],
									[
										153410,
										153417
									],
									[
										153896,
										153903
									],
									[
										154005,
										154012
									],
									[
										154114,
										154121
									],
									[
										154229,
										154236
									],
									[
										154568,
										154575
									],
									[
										154982,
										154989
									],
									[
										155036,
										155043
									],
									[
										155090,
										155097
									],
									[
										155150,
										155157
									],
									[
										155441,
										155448
									],
									[
										155496,
										155503
									],
									[
										155551,
										155558
									],
									[
										155612,
										155619
									],
									[
										156098,
										156105
									],
									[
										156207,
										156214
									],
									[
										156316,
										156323
									],
									[
										156431,
										156438
									],
									[
										156770,
										156777
									],
									[
										157184,
										157191
									],
									[
										157238,
										157245
									],
									[
										157292,
										157299
									],
									[
										157352,
										157359
									],
									[
										157643,
										157650
									],
									[
										157698,
										157705
									],
									[
										157753,
										157760
									],
									[
										157814,
										157821
									],
									[
										158299,
										158306
									],
									[
										158408,
										158415
									],
									[
										158517,
										158524
									],
									[
										158632,
										158639
									],
									[
										158971,
										158978
									],
									[
										159385,
										159392
									],
									[
										159439,
										159446
									],
									[
										159493,
										159500
									],
									[
										159553,
										159560
									],
									[
										159844,
										159851
									],
									[
										159899,
										159906
									],
									[
										159954,
										159961
									],
									[
										160015,
										160022
									],
									[
										160501,
										160508
									],
									[
										160610,
										160617
									],
									[
										160719,
										160726
									],
									[
										160834,
										160841
									],
									[
										161173,
										161180
									],
									[
										161588,
										161595
									],
									[
										161642,
										161649
									],
									[
										161696,
										161703
									],
									[
										161756,
										161763
									],
									[
										162047,
										162054
									],
									[
										162102,
										162109
									],
									[
										162157,
										162164
									],
									[
										162218,
										162225
									],
									[
										162705,
										162712
									],
									[
										162814,
										162821
									],
									[
										162923,
										162930
									],
									[
										163038,
										163045
									],
									[
										163377,
										163384
									],
									[
										163792,
										163799
									],
									[
										163846,
										163853
									],
									[
										163900,
										163907
									],
									[
										163960,
										163967
									],
									[
										164251,
										164258
									],
									[
										164306,
										164313
									],
									[
										164361,
										164368
									],
									[
										164422,
										164429
									],
									[
										164907,
										164914
									],
									[
										165015,
										165022
									],
									[
										165124,
										165131
									],
									[
										165239,
										165246
									],
									[
										165658,
										165665
									],
									[
										166096,
										166103
									],
									[
										166149,
										166156
									],
									[
										166203,
										166210
									],
									[
										166263,
										166270
									],
									[
										166482,
										166489
									],
									[
										166689,
										166696
									],
									[
										166736,
										166743
									],
									[
										167076,
										167083
									],
									[
										167123,
										167130
									],
									[
										167439,
										167446
									],
									[
										167494,
										167501
									],
									[
										167549,
										167556
									],
									[
										167610,
										167617
									],
									[
										167833,
										167840
									],
									[
										168073,
										168080
									],
									[
										168120,
										168127
									],
									[
										168460,
										168467
									],
									[
										168507,
										168514
									],
									[
										168857,
										168864
									],
									[
										168911,
										168918
									],
									[
										168965,
										168972
									],
									[
										169025,
										169032
									],
									[
										169085,
										169092
									],
									[
										169330,
										169337
									],
									[
										169384,
										169391
									],
									[
										169438,
										169445
									],
									[
										169498,
										169505
									],
									[
										169558,
										169565
									],
									[
										169893,
										169900
									],
									[
										170094,
										170101
									],
									[
										170383,
										170390
									],
									[
										170696,
										170703
									],
									[
										170897,
										170904
									],
									[
										171191,
										171198
									],
									[
										171495,
										171502
									],
									[
										171696,
										171703
									],
									[
										171982,
										171989
									],
									[
										172287,
										172294
									],
									[
										172488,
										172495
									],
									[
										172774,
										172781
									],
									[
										173085,
										173092
									],
									[
										173286,
										173293
									],
									[
										173572,
										173579
									],
									[
										173883,
										173890
									],
									[
										174084,
										174091
									],
									[
										174374,
										174381
									],
									[
										174677,
										174684
									],
									[
										174878,
										174885
									],
									[
										175167,
										175174
									],
									[
										175480,
										175487
									],
									[
										175681,
										175688
									],
									[
										175964,
										175971
									],
									[
										176274,
										176281
									],
									[
										176475,
										176482
									],
									[
										176758,
										176765
									],
									[
										177064,
										177071
									],
									[
										177265,
										177272
									],
									[
										177551,
										177558
									],
									[
										177809,
										177816
									],
									[
										177968,
										177975
									],
									[
										178014,
										178021
									],
									[
										178076,
										178083
									],
									[
										178125,
										178132
									],
									[
										178190,
										178197
									],
									[
										178242,
										178249
									],
									[
										178441,
										178448
									],
									[
										178487,
										178494
									],
									[
										178549,
										178556
									],
									[
										178598,
										178605
									],
									[
										178663,
										178670
									],
									[
										178715,
										178722
									],
									[
										178981,
										178988
									],
									[
										179039,
										179046
									],
									[
										179099,
										179106
									],
									[
										179157,
										179164
									],
									[
										179217,
										179224
									],
									[
										179275,
										179282
									],
									[
										179625,
										179632
									],
									[
										179915,
										179922
									],
									[
										179971,
										179978
									],
									[
										180352,
										180359
									],
									[
										180410,
										180417
									],
									[
										180694,
										180701
									],
									[
										180752,
										180759
									],
									[
										181108,
										181115
									],
									[
										181475,
										181482
									],
									[
										181951,
										181958
									],
									[
										182282,
										182289
									],
									[
										182515,
										182522
									],
									[
										182625,
										182632
									],
									[
										182898,
										182905
									],
									[
										183304,
										183311
									],
									[
										183362,
										183369
									],
									[
										183423,
										183430
									],
									[
										183877,
										183884
									],
									[
										184026,
										184033
									],
									[
										184106,
										184113
									],
									[
										184514,
										184521
									],
									[
										184636,
										184643
									],
									[
										184760,
										184767
									],
									[
										184820,
										184827
									],
									[
										184838,
										184845
									],
									[
										185304,
										185311
									],
									[
										185362,
										185369
									],
									[
										185654,
										185661
									],
									[
										185712,
										185719
									],
									[
										186039,
										186046
									],
									[
										186097,
										186104
									],
									[
										186395,
										186402
									],
									[
										186453,
										186460
									],
									[
										186791,
										186798
									],
									[
										186849,
										186856
									],
									[
										187250,
										187257
									],
									[
										187308,
										187315
									],
									[
										187609,
										187616
									],
									[
										187667,
										187674
									],
									[
										188047,
										188054
									],
									[
										188105,
										188112
									],
									[
										188387,
										188394
									],
									[
										188445,
										188452
									],
									[
										188840,
										188847
									],
									[
										188898,
										188905
									],
									[
										189190,
										189197
									],
									[
										189248,
										189255
									],
									[
										189573,
										189580
									],
									[
										189631,
										189638
									],
									[
										189928,
										189935
									],
									[
										189986,
										189993
									],
									[
										190429,
										190436
									],
									[
										190487,
										190494
									],
									[
										190788,
										190795
									],
									[
										190846,
										190853
									],
									[
										191209,
										191216
									],
									[
										191267,
										191274
									],
									[
										191648,
										191655
									],
									[
										191706,
										191713
									],
									[
										191990,
										191997
									],
									[
										192048,
										192055
									],
									[
										192406,
										192413
									],
									[
										192464,
										192471
									],
									[
										192757,
										192764
									],
									[
										192815,
										192822
									],
									[
										193201,
										193208
									],
									[
										193261,
										193268
									],
									[
										193318,
										193325
									],
									[
										193375,
										193382
									],
									[
										193432,
										193439
									],
									[
										193735,
										193742
									],
									[
										194025,
										194032
									],
									[
										194082,
										194089
									],
									[
										194139,
										194146
									],
									[
										194195,
										194202
									],
									[
										194617,
										194624
									],
									[
										194703,
										194710
									],
									[
										194792,
										194799
									],
									[
										194872,
										194879
									],
									[
										195180,
										195187
									],
									[
										195415,
										195422
									],
									[
										195449,
										195456
									],
									[
										195483,
										195490
									],
									[
										195523,
										195530
									],
									[
										195837,
										195844
									],
									[
										195923,
										195930
									],
									[
										196003,
										196010
									],
									[
										196083,
										196090
									],
									[
										196391,
										196398
									],
									[
										196646,
										196653
									],
									[
										196680,
										196687
									],
									[
										196714,
										196721
									],
									[
										196754,
										196761
									],
									[
										197068,
										197075
									],
									[
										197154,
										197161
									],
									[
										197234,
										197241
									],
									[
										197314,
										197321
									],
									[
										197622,
										197629
									],
									[
										197875,
										197882
									],
									[
										197909,
										197916
									],
									[
										197943,
										197950
									],
									[
										197983,
										197990
									],
									[
										198297,
										198304
									],
									[
										198383,
										198390
									],
									[
										198463,
										198470
									],
									[
										198543,
										198550
									],
									[
										198851,
										198858
									],
									[
										199104,
										199111
									],
									[
										199138,
										199145
									],
									[
										199172,
										199179
									],
									[
										199212,
										199219
									],
									[
										199526,
										199533
									],
									[
										199612,
										199619
									],
									[
										199692,
										199699
									],
									[
										199772,
										199779
									],
									[
										200080,
										200087
									],
									[
										200330,
										200337
									],
									[
										200364,
										200371
									],
									[
										200398,
										200405
									],
									[
										200438,
										200445
									],
									[
										200757,
										200764
									],
									[
										200843,
										200850
									],
									[
										200923,
										200930
									],
									[
										201003,
										201010
									],
									[
										201323,
										201330
									],
									[
										201588,
										201595
									],
									[
										201624,
										201631
									],
									[
										201660,
										201667
									],
									[
										201702,
										201709
									],
									[
										201744,
										201751
									],
									[
										202040,
										202047
									],
									[
										202126,
										202133
									],
									[
										202206,
										202213
									],
									[
										202286,
										202293
									],
									[
										202606,
										202613
									],
									[
										202800,
										202807
									],
									[
										202829,
										202836
									],
									[
										202859,
										202866
									],
									[
										203008,
										203015
									],
									[
										203238,
										203245
									],
									[
										203398,
										203405
									],
									[
										203642,
										203649
									],
									[
										203766,
										203773
									],
									[
										203877,
										203884
									],
									[
										203911,
										203918
									],
									[
										203945,
										203952
									],
									[
										203985,
										203992
									],
									[
										204174,
										204181
									],
									[
										204494,
										204501
									],
									[
										204580,
										204587
									],
									[
										204660,
										204667
									],
									[
										204740,
										204747
									],
									[
										205048,
										205055
									],
									[
										205263,
										205270
									],
									[
										205297,
										205304
									],
									[
										205331,
										205338
									],
									[
										205371,
										205378
									],
									[
										205686,
										205693
									],
									[
										205772,
										205779
									],
									[
										205852,
										205859
									],
									[
										205932,
										205939
									],
									[
										206240,
										206247
									],
									[
										206455,
										206462
									],
									[
										206489,
										206496
									],
									[
										206523,
										206530
									],
									[
										206563,
										206570
									],
									[
										206878,
										206885
									],
									[
										206964,
										206971
									],
									[
										207044,
										207051
									],
									[
										207124,
										207131
									],
									[
										207432,
										207439
									],
									[
										207647,
										207654
									],
									[
										207681,
										207688
									],
									[
										207715,
										207722
									],
									[
										207755,
										207762
									],
									[
										208069,
										208076
									],
									[
										208155,
										208162
									],
									[
										208235,
										208242
									],
									[
										208315,
										208322
									],
									[
										208623,
										208630
									],
									[
										208838,
										208845
									],
									[
										208872,
										208879
									],
									[
										208906,
										208913
									],
									[
										208946,
										208953
									],
									[
										209260,
										209267
									],
									[
										209346,
										209353
									],
									[
										209426,
										209433
									],
									[
										209506,
										209513
									],
									[
										209814,
										209821
									],
									[
										210029,
										210036
									],
									[
										210063,
										210070
									],
									[
										210097,
										210104
									],
									[
										210137,
										210144
									],
									[
										210452,
										210459
									],
									[
										210538,
										210545
									],
									[
										210618,
										210625
									],
									[
										210698,
										210705
									],
									[
										211006,
										211013
									],
									[
										211221,
										211228
									],
									[
										211255,
										211262
									],
									[
										211289,
										211296
									],
									[
										211329,
										211336
									],
									[
										211643,
										211650
									],
									[
										211729,
										211736
									],
									[
										211809,
										211816
									],
									[
										211889,
										211896
									],
									[
										212209,
										212216
									],
									[
										212423,
										212430
									],
									[
										212452,
										212459
									],
									[
										212482,
										212489
									],
									[
										212629,
										212636
									],
									[
										212748,
										212755
									],
									[
										212882,
										212889
									],
									[
										212916,
										212923
									],
									[
										212950,
										212957
									],
									[
										212990,
										212997
									],
									[
										213179,
										213186
									],
									[
										213449,
										213456
									],
									[
										213485,
										213492
									],
									[
										213521,
										213528
									],
									[
										213563,
										213570
									],
									[
										213605,
										213612
									],
									[
										213797,
										213804
									],
									[
										213828,
										213835
									],
									[
										213875,
										213882
									],
									[
										213909,
										213916
									],
									[
										213955,
										213962
									],
									[
										213988,
										213995
									],
									[
										214191,
										214198
									],
									[
										214317,
										214324
									],
									[
										214818,
										214825
									],
									[
										214916,
										214923
									],
									[
										215395,
										215402
									],
									[
										216006,
										216013
									],
									[
										216107,
										216114
									],
									[
										216514,
										216521
									],
									[
										216617,
										216624
									],
									[
										217116,
										217123
									],
									[
										217228,
										217235
									],
									[
										217740,
										217747
									],
									[
										217843,
										217850
									],
									[
										218223,
										218230
									],
									[
										218394,
										218401
									],
									[
										218433,
										218440
									],
									[
										218609,
										218616
									],
									[
										218638,
										218645
									],
									[
										218668,
										218675
									],
									[
										218819,
										218826
									],
									[
										218975,
										218982
									],
									[
										219118,
										219125
									],
									[
										219315,
										219322
									],
									[
										219546,
										219553
									],
									[
										219779,
										219786
									],
									[
										219834,
										219841
									],
									[
										219885,
										219892
									],
									[
										220387,
										220394
									],
									[
										220509,
										220516
									],
									[
										220650,
										220657
									],
									[
										221068,
										221075
									],
									[
										221171,
										221178
									],
									[
										221240,
										221247
									],
									[
										221739,
										221746
									],
									[
										221858,
										221865
									],
									[
										221979,
										221986
									],
									[
										222411,
										222418
									],
									[
										222440,
										222447
									],
									[
										222470,
										222477
									],
									[
										222619,
										222626
									],
									[
										222849,
										222856
									],
									[
										223009,
										223016
									],
									[
										223253,
										223260
									],
									[
										223377,
										223384
									],
									[
										223573,
										223580
									],
									[
										223602,
										223609
									],
									[
										223632,
										223639
									],
									[
										223798,
										223805
									],
									[
										224109,
										224116
									],
									[
										224308,
										224315
									],
									[
										224337,
										224344
									],
									[
										224367,
										224374
									],
									[
										224505,
										224512
									],
									[
										224649,
										224656
									],
									[
										224824,
										224831
									],
									[
										224853,
										224860
									],
									[
										224883,
										224890
									],
									[
										225032,
										225039
									],
									[
										225262,
										225269
									],
									[
										225422,
										225429
									],
									[
										225666,
										225673
									],
									[
										225892,
										225899
									],
									[
										225921,
										225928
									],
									[
										225951,
										225958
									],
									[
										226117,
										226124
									],
									[
										226428,
										226435
									],
									[
										226598,
										226605
									],
									[
										226627,
										226634
									],
									[
										226657,
										226664
									],
									[
										226804,
										226811
									],
									[
										226972,
										226979
									],
									[
										227001,
										227008
									],
									[
										227031,
										227038
									],
									[
										227239,
										227246
									],
									[
										227268,
										227275
									],
									[
										227298,
										227305
									],
									[
										227449,
										227456
									],
									[
										227605,
										227612
									],
									[
										227790,
										227797
									],
									[
										227819,
										227826
									],
									[
										227849,
										227856
									],
									[
										227996,
										228003
									],
									[
										228115,
										228122
									],
									[
										228373,
										228380
									],
									[
										228409,
										228416
									],
									[
										228445,
										228452
									],
									[
										228487,
										228494
									],
									[
										228529,
										228536
									],
									[
										228673,
										228680
									],
									[
										228769,
										228776
									],
									[
										228802,
										228809
									],
									[
										228830,
										228837
									],
									[
										228864,
										228871
									],
									[
										229132,
										229139
									],
									[
										229140,
										229147
									],
									[
										229169,
										229176
									],
									[
										229217,
										229224
									],
									[
										229257,
										229264
									],
									[
										229305,
										229312
									],
									[
										229339,
										229346
									],
									[
										229430,
										229437
									],
									[
										229478,
										229485
									],
									[
										229519,
										229526
									],
									[
										229597,
										229604
									],
									[
										229792,
										229799
									],
									[
										229804,
										229811
									],
									[
										230203,
										230210
									],
									[
										230287,
										230294
									],
									[
										230392,
										230399
									],
									[
										230404,
										230411
									],
									[
										230637,
										230644
									],
									[
										230645,
										230652
									],
									[
										230674,
										230681
									],
									[
										230704,
										230711
									],
									[
										230744,
										230751
									],
									[
										230775,
										230782
									],
									[
										230809,
										230816
									],
									[
										230867,
										230874
									],
									[
										230915,
										230922
									],
									[
										230956,
										230963
									],
									[
										231036,
										231043
									],
									[
										231295,
										231302
									],
									[
										231307,
										231314
									],
									[
										231520,
										231527
									],
									[
										231533,
										231540
									],
									[
										231570,
										231577
									],
									[
										231620,
										231627
									],
									[
										231649,
										231656
									],
									[
										231726,
										231733
									],
									[
										231796,
										231803
									],
									[
										231877,
										231884
									],
									[
										231955,
										231962
									],
									[
										232033,
										232040
									],
									[
										232085,
										232092
									],
									[
										232173,
										232180
									],
									[
										232237,
										232244
									],
									[
										232309,
										232316
									],
									[
										232422,
										232429
									],
									[
										232662,
										232669
									],
									[
										232674,
										232681
									],
									[
										232710,
										232717
									],
									[
										232760,
										232767
									],
									[
										232788,
										232795
									],
									[
										232864,
										232871
									],
									[
										232937,
										232944
									],
									[
										233017,
										233024
									],
									[
										233101,
										233108
									],
									[
										233178,
										233185
									],
									[
										233255,
										233262
									],
									[
										233306,
										233313
									],
									[
										233393,
										233400
									],
									[
										233456,
										233463
									],
									[
										233528,
										233535
									],
									[
										233651,
										233658
									],
									[
										233923,
										233930
									],
									[
										233945,
										233952
									],
									[
										234296,
										234303
									],
									[
										234318,
										234325
									],
									[
										234349,
										234356
									],
									[
										234780,
										234787
									],
									[
										234802,
										234809
									],
									[
										235088,
										235095
									],
									[
										235107,
										235114
									],
									[
										235449,
										235456
									],
									[
										235497,
										235504
									],
									[
										235539,
										235546
									],
									[
										235587,
										235594
									],
									[
										235641,
										235648
									],
									[
										235683,
										235690
									],
									[
										235730,
										235737
									],
									[
										235779,
										235786
									],
									[
										235827,
										235834
									],
									[
										235873,
										235880
									],
									[
										235926,
										235933
									],
									[
										235975,
										235982
									],
									[
										236013,
										236020
									],
									[
										236288,
										236295
									],
									[
										236513,
										236520
									],
									[
										236568,
										236575
									],
									[
										236622,
										236629
									],
									[
										236688,
										236695
									],
									[
										236754,
										236761
									],
									[
										236803,
										236810
									],
									[
										236868,
										236875
									],
									[
										236930,
										236937
									],
									[
										236989,
										236996
									],
									[
										237047,
										237054
									],
									[
										237114,
										237121
									],
									[
										237170,
										237177
									],
									[
										237219,
										237226
									],
									[
										237543,
										237550
									],
									[
										237966,
										237973
									],
									[
										237986,
										237993
									],
									[
										238244,
										238251
									],
									[
										238269,
										238276
									],
									[
										238424,
										238431
									],
									[
										238445,
										238452
									],
									[
										238500,
										238507
									],
									[
										238768,
										238775
									],
									[
										238825,
										238832
									],
									[
										238900,
										238907
									],
									[
										238934,
										238941
									],
									[
										239161,
										239168
									],
									[
										239218,
										239225
									],
									[
										239293,
										239300
									],
									[
										239326,
										239333
									],
									[
										239573,
										239580
									],
									[
										239607,
										239614
									],
									[
										239654,
										239661
									],
									[
										239998,
										240005
									],
									[
										240131,
										240138
									],
									[
										240409,
										240416
									],
									[
										240451,
										240458
									],
									[
										240740,
										240747
									],
									[
										240777,
										240784
									],
									[
										241049,
										241056
									],
									[
										241083,
										241090
									],
									[
										241351,
										241358
									],
									[
										241385,
										241392
									],
									[
										241703,
										241710
									],
									[
										241754,
										241761
									],
									[
										242066,
										242073
									],
									[
										242104,
										242111
									],
									[
										242394,
										242401
									],
									[
										242434,
										242441
									],
									[
										242692,
										242699
									],
									[
										242825,
										242832
									],
									[
										242961,
										242968
									],
									[
										243121,
										243128
									],
									[
										243191,
										243198
									],
									[
										243400,
										243407
									],
									[
										243476,
										243483
									],
									[
										243607,
										243614
									],
									[
										243816,
										243823
									],
									[
										243932,
										243939
									],
									[
										244216,
										244223
									],
									[
										244438,
										244445
									],
									[
										244480,
										244487
									],
									[
										244726,
										244733
									],
									[
										244767,
										244774
									],
									[
										244824,
										244831
									],
									[
										245132,
										245139
									],
									[
										245349,
										245356
									],
									[
										245386,
										245393
									],
									[
										245607,
										245614
									],
									[
										245643,
										245650
									],
									[
										245695,
										245702
									],
									[
										245986,
										245993
									],
									[
										246188,
										246195
									],
									[
										246222,
										246229
									],
									[
										246428,
										246435
									],
									[
										246461,
										246468
									],
									[
										246510,
										246517
									],
									[
										246767,
										246774
									],
									[
										246949,
										246956
									],
									[
										246983,
										246990
									],
									[
										247189,
										247196
									],
									[
										247222,
										247229
									],
									[
										247271,
										247278
									],
									[
										247578,
										247585
									],
									[
										247845,
										247852
									],
									[
										247896,
										247903
									],
									[
										248187,
										248194
									],
									[
										248237,
										248244
									],
									[
										248303,
										248310
									],
									[
										248604,
										248611
									],
									[
										248806,
										248813
									],
									[
										248844,
										248851
									],
									[
										249070,
										249077
									],
									[
										249107,
										249114
									],
									[
										249160,
										249167
									],
									[
										249439,
										249446
									],
									[
										249651,
										249658
									],
									[
										249691,
										249698
									],
									[
										249927,
										249934
									],
									[
										249966,
										249973
									],
									[
										250021,
										250028
									],
									[
										250283,
										250290
									],
									[
										250416,
										250423
									],
									[
										250552,
										250559
									],
									[
										250712,
										250719
									],
									[
										250782,
										250789
									],
									[
										250991,
										250998
									],
									[
										251067,
										251074
									],
									[
										251198,
										251205
									],
									[
										251407,
										251414
									],
									[
										251523,
										251530
									],
									[
										251807,
										251814
									],
									[
										252029,
										252036
									],
									[
										252071,
										252078
									],
									[
										252317,
										252324
									],
									[
										252358,
										252365
									],
									[
										252415,
										252422
									],
									[
										252728,
										252735
									],
									[
										252945,
										252952
									],
									[
										252982,
										252989
									],
									[
										253203,
										253210
									],
									[
										253239,
										253246
									],
									[
										253291,
										253298
									],
									[
										253587,
										253594
									],
									[
										253789,
										253796
									],
									[
										253823,
										253830
									],
									[
										254029,
										254036
									],
									[
										254062,
										254069
									],
									[
										254111,
										254118
									],
									[
										254373,
										254380
									],
									[
										254555,
										254562
									],
									[
										254589,
										254596
									],
									[
										254795,
										254802
									],
									[
										254828,
										254835
									],
									[
										254877,
										254884
									],
									[
										255189,
										255196
									],
									[
										255456,
										255463
									],
									[
										255507,
										255514
									],
									[
										255798,
										255805
									],
									[
										255848,
										255855
									],
									[
										255914,
										255921
									],
									[
										256220,
										256227
									],
									[
										256422,
										256429
									],
									[
										256460,
										256467
									],
									[
										256686,
										256693
									],
									[
										256723,
										256730
									],
									[
										256776,
										256783
									],
									[
										257060,
										257067
									],
									[
										257272,
										257279
									],
									[
										257312,
										257319
									],
									[
										257548,
										257555
									],
									[
										257587,
										257594
									],
									[
										257642,
										257649
									],
									[
										257906,
										257913
									],
									[
										257942,
										257949
									],
									[
										258058,
										258065
									],
									[
										258093,
										258100
									],
									[
										258226,
										258233
									],
									[
										258261,
										258268
									],
									[
										258397,
										258404
									],
									[
										258579,
										258586
									],
									[
										258681,
										258688
									],
									[
										258726,
										258733
									],
									[
										258918,
										258925
									],
									[
										259026,
										259033
									],
									[
										259061,
										259068
									],
									[
										259180,
										259187
									],
									[
										259379,
										259386
									],
									[
										259517,
										259524
									],
									[
										259809,
										259816
									],
									[
										260027,
										260034
									],
									[
										260069,
										260076
									],
									[
										260315,
										260322
									],
									[
										260356,
										260363
									],
									[
										260413,
										260420
									],
									[
										260731,
										260738
									],
									[
										260944,
										260951
									],
									[
										260981,
										260988
									],
									[
										261202,
										261209
									],
									[
										261238,
										261245
									],
									[
										261290,
										261297
									],
									[
										261599,
										261606
									],
									[
										261686,
										261693
									],
									[
										262151,
										262158
									],
									[
										262236,
										262243
									],
									[
										262336,
										262343
									],
									[
										262782,
										262789
									],
									[
										262980,
										262987
									],
									[
										263014,
										263021
									],
									[
										263220,
										263227
									],
									[
										263253,
										263260
									],
									[
										263302,
										263309
									],
									[
										263596,
										263603
									],
									[
										263680,
										263687
									],
									[
										264130,
										264137
									],
									[
										264212,
										264219
									],
									[
										264309,
										264316
									],
									[
										264721,
										264728
									],
									[
										264899,
										264906
									],
									[
										264933,
										264940
									],
									[
										265139,
										265146
									],
									[
										265172,
										265179
									],
									[
										265221,
										265228
									],
									[
										265527,
										265534
									],
									[
										265615,
										265622
									],
									[
										266085,
										266092
									],
									[
										266171,
										266178
									],
									[
										266272,
										266279
									],
									[
										266742,
										266749
									],
									[
										267005,
										267012
									],
									[
										267056,
										267063
									],
									[
										267347,
										267354
									],
									[
										267397,
										267404
									],
									[
										267463,
										267470
									],
									[
										267774,
										267781
									],
									[
										267972,
										267979
									],
									[
										268010,
										268017
									],
									[
										268236,
										268243
									],
									[
										268273,
										268280
									],
									[
										268326,
										268333
									],
									[
										268615,
										268622
									],
									[
										268823,
										268830
									],
									[
										268863,
										268870
									],
									[
										269099,
										269106
									],
									[
										269138,
										269145
									],
									[
										269193,
										269200
									],
									[
										269467,
										269474
									],
									[
										269645,
										269652
									],
									[
										269679,
										269686
									],
									[
										269885,
										269892
									],
									[
										269918,
										269925
									],
									[
										269967,
										269974
									],
									[
										270399,
										270406
									],
									[
										270430,
										270437
									],
									[
										271014,
										271021
									],
									[
										271036,
										271043
									],
									[
										271233,
										271240
									],
									[
										271254,
										271261
									],
									[
										272591,
										272598
									],
									[
										272615,
										272622
									],
									[
										272652,
										272659
									],
									[
										272771,
										272778
									],
									[
										272801,
										272808
									],
									[
										272848,
										272855
									],
									[
										273020,
										273027
									],
									[
										273046,
										273053
									],
									[
										273083,
										273090
									],
									[
										273806,
										273813
									],
									[
										273841,
										273848
									],
									[
										274298,
										274305
									],
									[
										274816,
										274823
									],
									[
										275117,
										275124
									],
									[
										275371,
										275378
									],
									[
										275756,
										275763
									],
									[
										275817,
										275824
									],
									[
										276068,
										276075
									],
									[
										276332,
										276339
									],
									[
										276577,
										276584
									],
									[
										277056,
										277063
									],
									[
										277448,
										277455
									],
									[
										277929,
										277936
									],
									[
										278242,
										278249
									],
									[
										278594,
										278601
									],
									[
										278913,
										278920
									],
									[
										279354,
										279361
									],
									[
										279438,
										279445
									],
									[
										279594,
										279601
									],
									[
										279692,
										279699
									],
									[
										279733,
										279740
									],
									[
										279902,
										279909
									],
									[
										280380,
										280387
									],
									[
										280441,
										280448
									],
									[
										280668,
										280675
									],
									[
										280788,
										280795
									],
									[
										281018,
										281025
									],
									[
										281079,
										281086
									],
									[
										281326,
										281333
									],
									[
										281374,
										281381
									],
									[
										281617,
										281624
									],
									[
										281837,
										281844
									],
									[
										282036,
										282043
									],
									[
										282132,
										282139
									],
									[
										282211,
										282218
									],
									[
										282505,
										282512
									],
									[
										282721,
										282728
									],
									[
										282984,
										282991
									],
									[
										283259,
										283266
									],
									[
										283510,
										283517
									],
									[
										283793,
										283800
									],
									[
										283842,
										283849
									],
									[
										283877,
										283884
									],
									[
										283925,
										283932
									],
									[
										283989,
										283996
									],
									[
										284194,
										284201
									],
									[
										284225,
										284232
									],
									[
										284282,
										284289
									],
									[
										284569,
										284576
									],
									[
										284617,
										284624
									],
									[
										285001,
										285008
									],
									[
										285403,
										285410
									],
									[
										285813,
										285820
									],
									[
										286182,
										286189
									],
									[
										286416,
										286423
									],
									[
										286612,
										286619
									],
									[
										286650,
										286657
									],
									[
										286931,
										286938
									],
									[
										287166,
										287173
									],
									[
										287401,
										287408
									],
									[
										287667,
										287674
									],
									[
										287824,
										287831
									],
									[
										288024,
										288031
									],
									[
										288280,
										288287
									],
									[
										288295,
										288302
									],
									[
										288644,
										288651
									],
									[
										288757,
										288764
									],
									[
										288805,
										288812
									],
									[
										288852,
										288859
									],
									[
										288987,
										288994
									],
									[
										289006,
										289013
									],
									[
										289164,
										289171
									],
									[
										289297,
										289304
									],
									[
										289325,
										289332
									],
									[
										289689,
										289696
									],
									[
										289735,
										289742
									],
									[
										289745,
										289752
									],
									[
										289821,
										289828
									],
									[
										289872,
										289879
									],
									[
										290218,
										290225
									],
									[
										290458,
										290465
									],
									[
										290642,
										290649
									],
									[
										290966,
										290973
									],
									[
										291192,
										291199
									],
									[
										291656,
										291663
									],
									[
										291933,
										291940
									],
									[
										292029,
										292036
									],
									[
										292403,
										292410
									],
									[
										292716,
										292723
									],
									[
										292758,
										292765
									],
									[
										293059,
										293066
									],
									[
										293193,
										293200
									],
									[
										293235,
										293242
									],
									[
										293461,
										293468
									],
									[
										293716,
										293723
									],
									[
										293941,
										293948
									],
									[
										294071,
										294078
									],
									[
										294153,
										294160
									],
									[
										294338,
										294345
									],
									[
										294430,
										294437
									],
									[
										294475,
										294482
									],
									[
										294556,
										294563
									],
									[
										294587,
										294594
									],
									[
										294749,
										294756
									],
									[
										294782,
										294789
									],
									[
										295017,
										295024
									],
									[
										295287,
										295294
									],
									[
										295521,
										295528
									],
									[
										295777,
										295784
									],
									[
										295856,
										295863
									],
									[
										296119,
										296126
									],
									[
										296406,
										296413
									],
									[
										296570,
										296577
									],
									[
										296778,
										296785
									],
									[
										297064,
										297071
									],
									[
										297397,
										297404
									],
									[
										297614,
										297621
									],
									[
										297785,
										297792
									],
									[
										298088,
										298095
									],
									[
										298395,
										298402
									],
									[
										298697,
										298704
									],
									[
										298775,
										298782
									],
									[
										299076,
										299083
									],
									[
										299339,
										299346
									],
									[
										299402,
										299409
									],
									[
										299465,
										299472
									],
									[
										299827,
										299834
									],
									[
										300192,
										300199
									],
									[
										300207,
										300214
									],
									[
										300590,
										300597
									],
									[
										300624,
										300631
									],
									[
										300852,
										300859
									],
									[
										301109,
										301116
									],
									[
										301483,
										301490
									],
									[
										301502,
										301509
									],
									[
										301871,
										301878
									],
									[
										301954,
										301961
									],
									[
										302430,
										302437
									],
									[
										302475,
										302482
									],
									[
										302626,
										302633
									],
									[
										302671,
										302678
									],
									[
										303218,
										303225
									],
									[
										303519,
										303526
									],
									[
										303752,
										303759
									],
									[
										304129,
										304136
									],
									[
										304406,
										304413
									],
									[
										304692,
										304699
									],
									[
										304743,
										304750
									],
									[
										304817,
										304824
									],
									[
										304914,
										304921
									],
									[
										304981,
										304988
									],
									[
										305225,
										305232
									],
									[
										305295,
										305302
									],
									[
										305343,
										305350
									],
									[
										305424,
										305431
									],
									[
										305548,
										305555
									],
									[
										305762,
										305769
									],
									[
										305985,
										305992
									],
									[
										306079,
										306086
									],
									[
										306198,
										306205
									],
									[
										306404,
										306411
									],
									[
										306679,
										306686
									],
									[
										306796,
										306803
									],
									[
										306854,
										306861
									],
									[
										307017,
										307024
									],
									[
										307334,
										307341
									],
									[
										307587,
										307594
									],
									[
										307843,
										307850
									],
									[
										308047,
										308054
									],
									[
										308208,
										308215
									],
									[
										308293,
										308300
									],
									[
										308495,
										308502
									],
									[
										308749,
										308756
									],
									[
										308806,
										308813
									],
									[
										308910,
										308917
									],
									[
										309041,
										309048
									],
									[
										309278,
										309285
									],
									[
										309334,
										309341
									],
									[
										309429,
										309436
									],
									[
										309559,
										309566
									],
									[
										309807,
										309814
									],
									[
										309868,
										309875
									],
									[
										309971,
										309978
									],
									[
										310106,
										310113
									],
									[
										310492,
										310499
									],
									[
										310793,
										310800
									],
									[
										311057,
										311064
									],
									[
										311260,
										311267
									],
									[
										311474,
										311481
									],
									[
										311886,
										311893
									],
									[
										312119,
										312126
									],
									[
										312429,
										312436
									],
									[
										312647,
										312654
									],
									[
										312842,
										312849
									],
									[
										313045,
										313052
									],
									[
										313198,
										313205
									],
									[
										313399,
										313406
									],
									[
										313588,
										313595
									],
									[
										313743,
										313750
									],
									[
										313937,
										313944
									],
									[
										314109,
										314116
									],
									[
										314254,
										314261
									],
									[
										314466,
										314473
									],
									[
										314655,
										314662
									],
									[
										314816,
										314823
									],
									[
										315035,
										315042
									],
									[
										315238,
										315245
									],
									[
										315270,
										315277
									],
									[
										315416,
										315423
									],
									[
										315498,
										315505
									],
									[
										315645,
										315652
									],
									[
										315844,
										315851
									],
									[
										316034,
										316041
									],
									[
										316177,
										316184
									],
									[
										316316,
										316323
									],
									[
										316491,
										316498
									],
									[
										316749,
										316756
									],
									[
										316882,
										316889
									],
									[
										316919,
										316926
									],
									[
										316986,
										316993
									],
									[
										317047,
										317054
									],
									[
										317166,
										317173
									],
									[
										317294,
										317301
									],
									[
										317368,
										317375
									],
									[
										317531,
										317538
									],
									[
										317605,
										317612
									],
									[
										317740,
										317747
									],
									[
										317824,
										317831
									],
									[
										317994,
										318001
									],
									[
										318078,
										318085
									],
									[
										318230,
										318237
									],
									[
										318392,
										318399
									],
									[
										318464,
										318471
									],
									[
										318646,
										318653
									],
									[
										318753,
										318760
									],
									[
										318902,
										318909
									],
									[
										318965,
										318972
									],
									[
										319045,
										319052
									],
									[
										319211,
										319218
									],
									[
										319374,
										319381
									],
									[
										319550,
										319557
									],
									[
										319699,
										319706
									],
									[
										319784,
										319791
									],
									[
										319974,
										319981
									],
									[
										320054,
										320061
									],
									[
										320254,
										320261
									],
									[
										320447,
										320454
									],
									[
										320519,
										320526
									],
									[
										320629,
										320636
									],
									[
										320719,
										320726
									],
									[
										320774,
										320781
									],
									[
										320852,
										320859
									],
									[
										321013,
										321020
									],
									[
										321100,
										321107
									],
									[
										321190,
										321197
									],
									[
										321272,
										321279
									],
									[
										321467,
										321474
									],
									[
										321545,
										321552
									],
									[
										321663,
										321670
									],
									[
										321806,
										321813
									],
									[
										321873,
										321880
									],
									[
										321978,
										321985
									],
									[
										322133,
										322140
									],
									[
										322357,
										322364
									],
									[
										322500,
										322507
									],
									[
										322596,
										322603
									],
									[
										322988,
										322995
									],
									[
										323234,
										323241
									],
									[
										323474,
										323481
									],
									[
										323650,
										323657
									],
									[
										323761,
										323768
									],
									[
										323782,
										323789
									],
									[
										323886,
										323893
									],
									[
										323905,
										323912
									],
									[
										323986,
										323993
									],
									[
										324032,
										324039
									],
									[
										324087,
										324094
									],
									[
										324139,
										324146
									],
									[
										324208,
										324215
									],
									[
										324285,
										324292
									],
									[
										324420,
										324427
									],
									[
										324439,
										324446
									],
									[
										324517,
										324524
									],
									[
										324563,
										324570
									],
									[
										324618,
										324625
									],
									[
										324670,
										324677
									],
									[
										324739,
										324746
									],
									[
										324816,
										324823
									],
									[
										324943,
										324950
									],
									[
										324962,
										324969
									],
									[
										325052,
										325059
									],
									[
										325098,
										325105
									],
									[
										325153,
										325160
									],
									[
										325205,
										325212
									],
									[
										325274,
										325281
									],
									[
										325351,
										325358
									],
									[
										325486,
										325493
									],
									[
										325505,
										325512
									],
									[
										325583,
										325590
									],
									[
										325632,
										325639
									],
									[
										325761,
										325768
									],
									[
										325780,
										325787
									],
									[
										325872,
										325879
									],
									[
										325993,
										326000
									],
									[
										326012,
										326019
									],
									[
										326097,
										326104
									],
									[
										326345,
										326352
									],
									[
										326396,
										326403
									],
									[
										326415,
										326422
									],
									[
										326509,
										326516
									],
									[
										326620,
										326627
									],
									[
										326639,
										326646
									],
									[
										326724,
										326731
									],
									[
										326995,
										327002
									],
									[
										327047,
										327054
									],
									[
										327066,
										327073
									],
									[
										327151,
										327158
									],
									[
										327415,
										327422
									],
									[
										327466,
										327473
									],
									[
										327485,
										327492
									],
									[
										327579,
										327586
									],
									[
										327725,
										327732
									],
									[
										327891,
										327898
									],
									[
										327910,
										327917
									],
									[
										328004,
										328011
									],
									[
										328098,
										328105
									],
									[
										328117,
										328124
									],
									[
										328201,
										328208
									],
									[
										328406,
										328413
									],
									[
										328492,
										328499
									],
									[
										328511,
										328518
									],
									[
										328593,
										328600
									],
									[
										328798,
										328805
									],
									[
										328884,
										328891
									],
									[
										328903,
										328910
									],
									[
										328984,
										328991
									],
									[
										329189,
										329196
									],
									[
										329275,
										329282
									],
									[
										329294,
										329301
									],
									[
										329373,
										329380
									],
									[
										329578,
										329585
									],
									[
										329664,
										329671
									],
									[
										329683,
										329690
									],
									[
										329768,
										329775
									],
									[
										329909,
										329916
									],
									[
										330006,
										330013
									],
									[
										330025,
										330032
									],
									[
										330108,
										330115
									],
									[
										330249,
										330256
									],
									[
										330346,
										330353
									],
									[
										330365,
										330372
									],
									[
										330456,
										330463
									],
									[
										330683,
										330690
									],
									[
										330844,
										330851
									],
									[
										330863,
										330870
									],
									[
										330957,
										330964
									],
									[
										331182,
										331189
									],
									[
										331330,
										331337
									],
									[
										331349,
										331356
									],
									[
										331445,
										331452
									],
									[
										331672,
										331679
									],
									[
										331820,
										331827
									],
									[
										331853,
										331860
									],
									[
										331960,
										331967
									],
									[
										332081,
										332088
									],
									[
										332100,
										332107
									],
									[
										332190,
										332197
									],
									[
										332338,
										332345
									],
									[
										332502,
										332509
									],
									[
										332521,
										332528
									],
									[
										332614,
										332621
									],
									[
										332712,
										332719
									],
									[
										332731,
										332738
									],
									[
										332827,
										332834
									],
									[
										333059,
										333066
									],
									[
										333203,
										333210
									],
									[
										333222,
										333229
									],
									[
										333316,
										333323
									],
									[
										333564,
										333571
									],
									[
										333679,
										333686
									],
									[
										333730,
										333737
									],
									[
										333749,
										333756
									],
									[
										333831,
										333838
									],
									[
										334060,
										334067
									],
									[
										334400,
										334407
									],
									[
										334428,
										334435
									],
									[
										334519,
										334526
									],
									[
										334682,
										334689
									],
									[
										334856,
										334863
									],
									[
										334875,
										334882
									],
									[
										334968,
										334975
									],
									[
										335086,
										335093
									],
									[
										335105,
										335112
									],
									[
										335199,
										335206
									],
									[
										335440,
										335447
									],
									[
										335667,
										335674
									],
									[
										335686,
										335693
									],
									[
										335779,
										335786
									],
									[
										335941,
										335948
									],
									[
										336107,
										336114
									],
									[
										336126,
										336133
									],
									[
										336217,
										336224
									],
									[
										336335,
										336342
									],
									[
										336354,
										336361
									],
									[
										336446,
										336453
									],
									[
										336687,
										336694
									],
									[
										336914,
										336921
									],
									[
										336933,
										336940
									],
									[
										337024,
										337031
									],
									[
										337186,
										337193
									],
									[
										337352,
										337359
									],
									[
										337371,
										337378
									],
									[
										337464,
										337471
									],
									[
										337582,
										337589
									],
									[
										337601,
										337608
									],
									[
										337695,
										337702
									],
									[
										337936,
										337943
									],
									[
										338163,
										338170
									],
									[
										338182,
										338189
									],
									[
										338275,
										338282
									],
									[
										338437,
										338444
									],
									[
										338603,
										338610
									],
									[
										338636,
										338643
									],
									[
										338743,
										338750
									],
									[
										338861,
										338868
									],
									[
										338894,
										338901
									],
									[
										339002,
										339009
									],
									[
										339243,
										339250
									],
									[
										339470,
										339477
									],
									[
										339503,
										339510
									],
									[
										339610,
										339617
									],
									[
										339772,
										339779
									],
									[
										339938,
										339945
									],
									[
										339956,
										339963
									],
									[
										340027,
										340034
									],
									[
										340099,
										340106
									],
									[
										340188,
										340195
									],
									[
										340206,
										340213
									],
									[
										340283,
										340290
									],
									[
										340347,
										340354
									],
									[
										340433,
										340440
									],
									[
										340451,
										340458
									],
									[
										340528,
										340535
									],
									[
										340646,
										340653
									],
									[
										340664,
										340671
									],
									[
										340752,
										340759
									],
									[
										340849,
										340856
									],
									[
										340867,
										340874
									],
									[
										340950,
										340957
									],
									[
										341188,
										341195
									],
									[
										341239,
										341246
									],
									[
										341257,
										341264
									],
									[
										341348,
										341355
									],
									[
										341593,
										341600
									],
									[
										341644,
										341651
									],
									[
										341662,
										341669
									],
									[
										341746,
										341753
									],
									[
										341975,
										341982
									],
									[
										342026,
										342033
									],
									[
										342044,
										342051
									],
									[
										342128,
										342135
									],
									[
										342365,
										342372
									],
									[
										342416,
										342423
									],
									[
										342434,
										342441
									],
									[
										342518,
										342525
									],
									[
										342755,
										342762
									],
									[
										342806,
										342813
									],
									[
										342824,
										342831
									],
									[
										342908,
										342915
									],
									[
										343144,
										343151
									],
									[
										343195,
										343202
									],
									[
										343213,
										343220
									],
									[
										343309,
										343316
									],
									[
										343406,
										343413
									],
									[
										343424,
										343431
									],
									[
										343504,
										343511
									],
									[
										343729,
										343736
									],
									[
										343815,
										343822
									],
									[
										343833,
										343840
									],
									[
										343911,
										343918
									],
									[
										344136,
										344143
									],
									[
										344222,
										344229
									],
									[
										344240,
										344247
									],
									[
										344324,
										344331
									],
									[
										344460,
										344467
									],
									[
										344557,
										344564
									],
									[
										344575,
										344582
									],
									[
										344657,
										344664
									],
									[
										344793,
										344800
									],
									[
										344890,
										344897
									],
									[
										344908,
										344915
									],
									[
										344997,
										345004
									],
									[
										345163,
										345170
									],
									[
										345327,
										345334
									],
									[
										345345,
										345352
									],
									[
										345437,
										345444
									],
									[
										345554,
										345561
									],
									[
										345572,
										345579
									],
									[
										345653,
										345660
									],
									[
										345873,
										345880
									],
									[
										346117,
										346124
									],
									[
										346135,
										346142
									],
									[
										346224,
										346231
									],
									[
										346359,
										346366
									],
									[
										346608,
										346615
									],
									[
										346626,
										346633
									],
									[
										346718,
										346725
									],
									[
										346936,
										346943
									],
									[
										347092,
										347099
									],
									[
										347110,
										347117
									],
									[
										347200,
										347207
									],
									[
										347435,
										347442
									],
									[
										347591,
										347598
									],
									[
										347608,
										347615
									],
									[
										347682,
										347689
									],
									[
										347699,
										347706
									],
									[
										347724,
										347731
									],
									[
										347803,
										347810
									],
									[
										347820,
										347827
									],
									[
										347902,
										347909
									],
									[
										347919,
										347926
									],
									[
										348120,
										348127
									],
									[
										348211,
										348218
									],
									[
										348262,
										348269
									],
									[
										348279,
										348286
									],
									[
										348364,
										348371
									],
									[
										348381,
										348388
									],
									[
										348406,
										348413
									],
									[
										348592,
										348599
									],
									[
										348731,
										348738
									],
									[
										348748,
										348755
									],
									[
										348831,
										348838
									],
									[
										348848,
										348855
									],
									[
										348873,
										348880
									],
									[
										349059,
										349066
									],
									[
										349198,
										349205
									],
									[
										349221,
										349228
									],
									[
										349285,
										349292
									],
									[
										349302,
										349309
									],
									[
										349327,
										349334
									],
									[
										349362,
										349369
									],
									[
										349371,
										349378
									],
									[
										349481,
										349488
									],
									[
										349504,
										349511
									],
									[
										349519,
										349526
									],
									[
										349588,
										349595
									],
									[
										349818,
										349825
									],
									[
										349842,
										349849
									],
									[
										349909,
										349916
									],
									[
										349960,
										349967
									],
									[
										349983,
										349990
									],
									[
										350056,
										350063
									],
									[
										350073,
										350080
									],
									[
										350098,
										350105
									],
									[
										350133,
										350140
									],
									[
										350142,
										350149
									],
									[
										350302,
										350309
									],
									[
										350388,
										350395
									],
									[
										350411,
										350418
									],
									[
										350488,
										350495
									],
									[
										350505,
										350512
									],
									[
										350530,
										350537
									],
									[
										350565,
										350572
									],
									[
										350574,
										350581
									],
									[
										350714,
										350721
									],
									[
										350811,
										350818
									],
									[
										350834,
										350841
									],
									[
										350908,
										350915
									],
									[
										350925,
										350932
									],
									[
										350950,
										350957
									],
									[
										350985,
										350992
									],
									[
										350994,
										351001
									],
									[
										351211,
										351218
									],
									[
										351455,
										351462
									],
									[
										351539,
										351546
									],
									[
										351623,
										351630
									],
									[
										351656,
										351663
									],
									[
										351850,
										351857
									],
									[
										351949,
										351956
									],
									[
										351981,
										351988
									],
									[
										352174,
										352181
									],
									[
										352270,
										352277
									],
									[
										352467,
										352474
									],
									[
										352696,
										352703
									],
									[
										352856,
										352863
									],
									[
										353054,
										353061
									],
									[
										353283,
										353290
									],
									[
										353444,
										353451
									],
									[
										353640,
										353647
									],
									[
										353869,
										353876
									],
									[
										354028,
										354035
									],
									[
										354234,
										354241
									],
									[
										354407,
										354414
									],
									[
										354583,
										354590
									],
									[
										354787,
										354794
									],
									[
										354960,
										354967
									],
									[
										355134,
										355141
									],
									[
										355339,
										355346
									],
									[
										355559,
										355566
									],
									[
										355698,
										355705
									],
									[
										355901,
										355908
									],
									[
										356121,
										356128
									],
									[
										356260,
										356267
									],
									[
										356457,
										356464
									],
									[
										356570,
										356577
									],
									[
										356767,
										356774
									],
									[
										356880,
										356887
									],
									[
										357073,
										357080
									],
									[
										357184,
										357191
									],
									[
										357377,
										357384
									],
									[
										357488,
										357495
									],
									[
										357684,
										357691
									],
									[
										357793,
										357800
									],
									[
										357990,
										357997
									],
									[
										358099,
										358106
									],
									[
										358123,
										358130
									],
									[
										358285,
										358292
									],
									[
										358394,
										358401
									],
									[
										358419,
										358426
									],
									[
										358582,
										358589
									],
									[
										358699,
										358706
									],
									[
										358902,
										358909
									],
									[
										359019,
										359026
									],
									[
										359222,
										359229
									],
									[
										359339,
										359346
									],
									[
										359357,
										359364
									],
									[
										359447,
										359454
									],
									[
										359607,
										359614
									],
									[
										359625,
										359632
									],
									[
										359716,
										359723
									],
									[
										359876,
										359883
									],
									[
										359895,
										359902
									],
									[
										359973,
										359980
									],
									[
										360240,
										360247
									],
									[
										360264,
										360271
									],
									[
										360445,
										360452
									],
									[
										360593,
										360600
									],
									[
										360736,
										360743
									],
									[
										360868,
										360875
									],
									[
										361114,
										361121
									],
									[
										361297,
										361304
									],
									[
										361539,
										361546
									],
									[
										361691,
										361698
									],
									[
										361762,
										361769
									],
									[
										361795,
										361802
									],
									[
										362070,
										362077
									],
									[
										362356,
										362363
									],
									[
										362602,
										362609
									],
									[
										362724,
										362731
									],
									[
										363809,
										363816
									],
									[
										366744,
										366751
									],
									[
										366763,
										366770
									],
									[
										366790,
										366797
									],
									[
										366808,
										366815
									],
									[
										367078,
										367085
									],
									[
										367099,
										367106
									],
									[
										367125,
										367132
									],
									[
										367152,
										367159
									],
									[
										367194,
										367201
									],
									[
										367217,
										367224
									],
									[
										367369,
										367376
									],
									[
										367418,
										367425
									],
									[
										367448,
										367455
									],
									[
										367557,
										367564
									],
									[
										367605,
										367612
									],
									[
										367635,
										367642
									],
									[
										367747,
										367754
									],
									[
										367798,
										367805
									],
									[
										367914,
										367921
									],
									[
										367971,
										367978
									],
									[
										368011,
										368018
									],
									[
										368125,
										368132
									],
									[
										368178,
										368185
									],
									[
										368208,
										368215
									],
									[
										368365,
										368372
									],
									[
										368491,
										368498
									],
									[
										368762,
										368769
									],
									[
										368975,
										368982
									],
									[
										369012,
										369019
									],
									[
										369233,
										369240
									],
									[
										369269,
										369276
									],
									[
										369321,
										369328
									],
									[
										369551,
										369558
									],
									[
										369639,
										369646
									],
									[
										369680,
										369687
									],
									[
										369711,
										369718
									],
									[
										369797,
										369804
									],
									[
										369957,
										369964
									],
									[
										369985,
										369992
									],
									[
										370001,
										370008
									],
									[
										370032,
										370039
									],
									[
										370066,
										370073
									],
									[
										370088,
										370095
									],
									[
										370118,
										370125
									],
									[
										370151,
										370158
									],
									[
										370172,
										370179
									],
									[
										370257,
										370264
									],
									[
										370332,
										370339
									],
									[
										370353,
										370360
									],
									[
										370375,
										370382
									],
									[
										370402,
										370409
									],
									[
										370423,
										370430
									],
									[
										370449,
										370456
									],
									[
										370703,
										370710
									],
									[
										370731,
										370738
									],
									[
										370747,
										370754
									],
									[
										370778,
										370785
									],
									[
										370812,
										370819
									],
									[
										370834,
										370841
									],
									[
										370864,
										370871
									],
									[
										370897,
										370904
									],
									[
										370918,
										370925
									],
									[
										371077,
										371084
									],
									[
										371098,
										371105
									],
									[
										371120,
										371127
									],
									[
										371147,
										371154
									],
									[
										371168,
										371175
									],
									[
										371194,
										371201
									],
									[
										371415,
										371422
									],
									[
										371457,
										371464
									],
									[
										371489,
										371496
									],
									[
										371530,
										371537
									],
									[
										371557,
										371564
									],
									[
										371592,
										371599
									],
									[
										371999,
										372006
									],
									[
										372029,
										372036
									],
									[
										372084,
										372091
									],
									[
										372113,
										372120
									],
									[
										372163,
										372170
									],
									[
										372187,
										372194
									],
									[
										372549,
										372556
									],
									[
										372730,
										372737
									],
									[
										372851,
										372858
									],
									[
										373466,
										373473
									],
									[
										373489,
										373496
									],
									[
										373676,
										373683
									],
									[
										373711,
										373718
									],
									[
										373841,
										373848
									],
									[
										373942,
										373949
									],
									[
										373975,
										373982
									],
									[
										374116,
										374123
									],
									[
										374275,
										374282
									],
									[
										374488,
										374495
									],
									[
										374701,
										374708
									],
									[
										374913,
										374920
									],
									[
										375125,
										375132
									],
									[
										375305,
										375312
									],
									[
										375489,
										375496
									],
									[
										375671,
										375678
									],
									[
										375787,
										375794
									],
									[
										375864,
										375871
									],
									[
										375963,
										375970
									],
									[
										376111,
										376118
									],
									[
										376200,
										376207
									],
									[
										376376,
										376383
									],
									[
										376602,
										376609
									],
									[
										376787,
										376794
									],
									[
										376822,
										376829
									],
									[
										376939,
										376946
									],
									[
										377101,
										377108
									],
									[
										377159,
										377166
									],
									[
										377242,
										377249
									],
									[
										377417,
										377424
									],
									[
										377532,
										377539
									],
									[
										377791,
										377798
									],
									[
										377808,
										377815
									],
									[
										377989,
										377996
									],
									[
										378018,
										378025
									],
									[
										378142,
										378149
									],
									[
										378237,
										378244
									],
									[
										378264,
										378271
									],
									[
										378399,
										378406
									],
									[
										378552,
										378559
									],
									[
										378759,
										378766
									],
									[
										378972,
										378979
									],
									[
										379082,
										379089
									],
									[
										379153,
										379160
									],
									[
										379246,
										379253
									],
									[
										379388,
										379395
									],
									[
										379471,
										379478
									],
									[
										379641,
										379648
									],
									[
										379861,
										379868
									],
									[
										380040,
										380047
									],
									[
										380069,
										380076
									],
									[
										380180,
										380187
									],
									[
										380336,
										380343
									],
									[
										380388,
										380395
									],
									[
										380447,
										380454
									],
									[
										380627,
										380634
									],
									[
										380747,
										380754
									],
									[
										381576,
										381583
									],
									[
										381598,
										381605
									],
									[
										381784,
										381791
									],
									[
										381818,
										381825
									],
									[
										381947,
										381954
									],
									[
										382047,
										382054
									],
									[
										382079,
										382086
									],
									[
										382219,
										382226
									],
									[
										382377,
										382384
									],
									[
										382589,
										382596
									],
									[
										382801,
										382808
									],
									[
										382997,
										383004
									],
									[
										383193,
										383200
									],
									[
										383404,
										383411
									],
									[
										383615,
										383622
									],
									[
										383789,
										383796
									],
									[
										384037,
										384044
									],
									[
										384152,
										384159
									],
									[
										384228,
										384235
									],
									[
										384326,
										384333
									],
									[
										384473,
										384480
									],
									[
										384561,
										384568
									],
									[
										384736,
										384743
									],
									[
										384961,
										384968
									],
									[
										385145,
										385152
									],
									[
										385179,
										385186
									],
									[
										385295,
										385302
									],
									[
										385456,
										385463
									],
									[
										385513,
										385520
									],
									[
										385662,
										385669
									],
									[
										385851,
										385858
									],
									[
										385899,
										385906
									],
									[
										385915,
										385922
									],
									[
										385946,
										385953
									],
									[
										386000,
										386007
									],
									[
										386022,
										386029
									],
									[
										386052,
										386059
									],
									[
										386105,
										386112
									],
									[
										386126,
										386133
									],
									[
										386366,
										386373
									],
									[
										386585,
										386592
									],
									[
										386607,
										386614
									],
									[
										386668,
										386675
									],
									[
										386696,
										386703
									],
									[
										386756,
										386763
									],
									[
										386783,
										386790
									],
									[
										387245,
										387252
									],
									[
										387293,
										387300
									],
									[
										387309,
										387316
									],
									[
										387340,
										387347
									],
									[
										387394,
										387401
									],
									[
										387416,
										387423
									],
									[
										387446,
										387453
									],
									[
										387499,
										387506
									],
									[
										387520,
										387527
									],
									[
										387980,
										387987
									],
									[
										388002,
										388009
									],
									[
										388063,
										388070
									],
									[
										388091,
										388098
									],
									[
										388151,
										388158
									],
									[
										388178,
										388185
									],
									[
										388438,
										388445
									],
									[
										388627,
										388634
									],
									[
										388675,
										388682
									],
									[
										388691,
										388698
									],
									[
										388722,
										388729
									],
									[
										388776,
										388783
									],
									[
										388798,
										388805
									],
									[
										388828,
										388835
									],
									[
										388881,
										388888
									],
									[
										388902,
										388909
									],
									[
										388996,
										389003
									],
									[
										389181,
										389188
									],
									[
										389226,
										389233
									],
									[
										389244,
										389251
									],
									[
										389268,
										389275
									],
									[
										389319,
										389326
									],
									[
										389343,
										389350
									],
									[
										389366,
										389373
									],
									[
										389416,
										389423
									],
									[
										389439,
										389446
									],
									[
										389608,
										389615
									],
									[
										389827,
										389834
									],
									[
										389849,
										389856
									],
									[
										389910,
										389917
									],
									[
										389938,
										389945
									],
									[
										389998,
										390005
									],
									[
										390025,
										390032
									],
									[
										390120,
										390127
									],
									[
										390305,
										390312
									],
									[
										390354,
										390361
									],
									[
										390371,
										390378
									],
									[
										390402,
										390409
									],
									[
										390457,
										390464
									],
									[
										390480,
										390487
									],
									[
										390510,
										390517
									],
									[
										390564,
										390571
									],
									[
										390586,
										390593
									],
									[
										390975,
										390982
									],
									[
										391023,
										391030
									],
									[
										391039,
										391046
									],
									[
										391070,
										391077
									],
									[
										391124,
										391131
									],
									[
										391146,
										391153
									],
									[
										391176,
										391183
									],
									[
										391229,
										391236
									],
									[
										391250,
										391257
									],
									[
										391530,
										391537
									],
									[
										391575,
										391582
									],
									[
										391593,
										391600
									],
									[
										391617,
										391624
									],
									[
										391668,
										391675
									],
									[
										391692,
										391699
									],
									[
										391715,
										391722
									],
									[
										391765,
										391772
									],
									[
										391788,
										391795
									],
									[
										392177,
										392184
									],
									[
										392199,
										392206
									],
									[
										392260,
										392267
									],
									[
										392288,
										392295
									],
									[
										392348,
										392355
									],
									[
										392375,
										392382
									],
									[
										392666,
										392673
									],
									[
										392715,
										392722
									],
									[
										392732,
										392739
									],
									[
										392763,
										392770
									],
									[
										392818,
										392825
									],
									[
										392841,
										392848
									],
									[
										392871,
										392878
									],
									[
										392925,
										392932
									],
									[
										392947,
										392954
									],
									[
										393372,
										393379
									],
									[
										393813,
										393820
									],
									[
										393834,
										393841
									],
									[
										394270,
										394277
									],
									[
										394297,
										394304
									],
									[
										394353,
										394360
									],
									[
										394916,
										394923
									],
									[
										394943,
										394950
									],
									[
										394995,
										395002
									],
									[
										395533,
										395540
									],
									[
										395589,
										395596
									],
									[
										395639,
										395646
									],
									[
										395856,
										395863
									],
									[
										396043,
										396050
									],
									[
										396193,
										396200
									],
									[
										396422,
										396429
									],
									[
										396469,
										396476
									],
									[
										396660,
										396667
									],
									[
										397219,
										397226
									],
									[
										397247,
										397254
									],
									[
										397263,
										397270
									],
									[
										397294,
										397301
									],
									[
										397328,
										397335
									],
									[
										397350,
										397357
									],
									[
										397380,
										397387
									],
									[
										397413,
										397420
									],
									[
										397434,
										397441
									],
									[
										397494,
										397501
									],
									[
										397654,
										397661
									],
									[
										397682,
										397689
									],
									[
										397698,
										397705
									],
									[
										397729,
										397736
									],
									[
										397763,
										397770
									],
									[
										397785,
										397792
									],
									[
										397815,
										397822
									],
									[
										397848,
										397855
									],
									[
										397869,
										397876
									],
									[
										398358,
										398365
									],
									[
										398397,
										398404
									],
									[
										398434,
										398441
									],
									[
										398511,
										398518
									],
									[
										398556,
										398563
									],
									[
										398593,
										398600
									],
									[
										398669,
										398676
									],
									[
										398713,
										398720
									],
									[
										398750,
										398757
									],
									[
										398816,
										398823
									],
									[
										399166,
										399173
									],
									[
										399205,
										399212
									],
									[
										399242,
										399249
									],
									[
										399319,
										399326
									],
									[
										399364,
										399371
									],
									[
										399401,
										399408
									],
									[
										399477,
										399484
									],
									[
										399521,
										399528
									],
									[
										399558,
										399565
									],
									[
										399893,
										399900
									],
									[
										400371,
										400378
									],
									[
										400743,
										400750
									],
									[
										400825,
										400832
									],
									[
										401499,
										401506
									],
									[
										401581,
										401588
									],
									[
										402254,
										402261
									],
									[
										402335,
										402342
									],
									[
										403008,
										403015
									],
									[
										403089,
										403096
									],
									[
										403947,
										403954
									],
									[
										403984,
										403991
									],
									[
										404179,
										404186
									],
									[
										404242,
										404249
									],
									[
										404298,
										404305
									],
									[
										404399,
										404406
									],
									[
										404444,
										404451
									],
									[
										404462,
										404469
									],
									[
										404581,
										404588
									],
									[
										404650,
										404657
									],
									[
										404712,
										404719
									],
									[
										404819,
										404826
									],
									[
										404870,
										404877
									],
									[
										404894,
										404901
									],
									[
										405012,
										405019
									],
									[
										405080,
										405087
									],
									[
										405141,
										405148
									],
									[
										405247,
										405254
									],
									[
										405297,
										405304
									],
									[
										405320,
										405327
									],
									[
										405439,
										405446
									],
									[
										405535,
										405542
									],
									[
										405881,
										405888
									],
									[
										406316,
										406323
									],
									[
										406950,
										406957
									],
									[
										407296,
										407303
									],
									[
										407731,
										407738
									],
									[
										408365,
										408372
									],
									[
										408492,
										408499
									],
									[
										408848,
										408855
									],
									[
										408975,
										408982
									],
									[
										409331,
										409338
									],
									[
										409352,
										409359
									],
									[
										409434,
										409441
									],
									[
										410092,
										410099
									],
									[
										410113,
										410120
									],
									[
										410195,
										410202
									],
									[
										410853,
										410860
									],
									[
										410873,
										410880
									],
									[
										410954,
										410961
									],
									[
										411612,
										411619
									],
									[
										411632,
										411639
									],
									[
										411713,
										411720
									],
									[
										412371,
										412378
									],
									[
										412450,
										412457
									],
									[
										413087,
										413094
									],
									[
										413107,
										413114
									],
									[
										413177,
										413184
									],
									[
										413298,
										413305
									],
									[
										413387,
										413394
									],
									[
										413458,
										413465
									],
									[
										413557,
										413564
									],
									[
										413833,
										413840
									],
									[
										413908,
										413915
									],
									[
										414039,
										414046
									],
									[
										414200,
										414207
									],
									[
										414285,
										414292
									],
									[
										414436,
										414443
									],
									[
										414597,
										414604
									],
									[
										414871,
										414878
									],
									[
										415174,
										415181
									],
									[
										415407,
										415414
									],
									[
										415710,
										415717
									],
									[
										415943,
										415950
									],
									[
										416246,
										416253
									],
									[
										416261,
										416268
									],
									[
										416324,
										416331
									],
									[
										416380,
										416387
									],
									[
										416481,
										416488
									],
									[
										416526,
										416533
									],
									[
										416544,
										416551
									],
									[
										416647,
										416654
									],
									[
										416668,
										416675
									],
									[
										416737,
										416744
									],
									[
										416799,
										416806
									],
									[
										416906,
										416913
									],
									[
										416957,
										416964
									],
									[
										416981,
										416988
									],
									[
										417084,
										417091
									],
									[
										417104,
										417111
									],
									[
										417172,
										417179
									],
									[
										417233,
										417240
									],
									[
										417339,
										417346
									],
									[
										417389,
										417396
									],
									[
										417412,
										417419
									],
									[
										417515,
										417522
									],
									[
										417790,
										417797
									],
									[
										418154,
										418161
									],
									[
										418521,
										418528
									],
									[
										418941,
										418948
									],
									[
										419308,
										419315
									],
									[
										419726,
										419733
									],
									[
										420084,
										420091
									],
									[
										420485,
										420492
									],
									[
										420822,
										420829
									],
									[
										421159,
										421166
									],
									[
										421496,
										421503
									],
									[
										421883,
										421890
									],
									[
										422239,
										422246
									],
									[
										422652,
										422659
									],
									[
										422733,
										422740
									],
									[
										422974,
										422981
									],
									[
										423065,
										423072
									],
									[
										423206,
										423213
									],
									[
										423296,
										423303
									],
									[
										423499,
										423506
									],
									[
										423785,
										423792
									],
									[
										424069,
										424076
									],
									[
										424166,
										424173
									],
									[
										424401,
										424408
									],
									[
										424683,
										424690
									],
									[
										425022,
										425029
									],
									[
										425321,
										425328
									],
									[
										425469,
										425476
									],
									[
										425565,
										425572
									],
									[
										425774,
										425781
									],
									[
										426085,
										426092
									],
									[
										426536,
										426543
									],
									[
										426983,
										426990
									],
									[
										427442,
										427449
									],
									[
										428000,
										428007
									],
									[
										428636,
										428643
									],
									[
										429022,
										429029
									],
									[
										429118,
										429125
									],
									[
										429482,
										429489
									],
									[
										430020,
										430027
									],
									[
										430388,
										430395
									],
									[
										430932,
										430939
									],
									[
										431228,
										431235
									],
									[
										431918,
										431925
									],
									[
										432624,
										432631
									],
									[
										433329,
										433336
									],
									[
										434062,
										434069
									],
									[
										434744,
										434751
									],
									[
										435426,
										435433
									],
									[
										435955,
										435962
									],
									[
										436043,
										436050
									],
									[
										436639,
										436646
									],
									[
										436786,
										436793
									],
									[
										436881,
										436888
									],
									[
										437192,
										437199
									],
									[
										437447,
										437454
									],
									[
										437708,
										437715
									],
									[
										437969,
										437976
									],
									[
										438211,
										438218
									],
									[
										438570,
										438577
									],
									[
										439286,
										439293
									],
									[
										440080,
										440087
									],
									[
										440901,
										440908
									],
									[
										441613,
										441620
									],
									[
										442436,
										442443
									],
									[
										443200,
										443207
									],
									[
										443967,
										443974
									],
									[
										444364,
										444371
									],
									[
										444730,
										444737
									],
									[
										445305,
										445312
									],
									[
										445748,
										445755
									],
									[
										446253,
										446260
									],
									[
										446788,
										446795
									],
									[
										447381,
										447388
									],
									[
										447829,
										447836
									],
									[
										448273,
										448280
									],
									[
										448731,
										448738
									],
									[
										449286,
										449293
									],
									[
										449919,
										449926
									],
									[
										450494,
										450501
									],
									[
										450564,
										450571
									],
									[
										451204,
										451211
									],
									[
										451281,
										451288
									],
									[
										451861,
										451868
									],
									[
										451937,
										451944
									],
									[
										452523,
										452530
									],
									[
										453029,
										453036
									],
									[
										453112,
										453119
									],
									[
										453189,
										453196
									],
									[
										453784,
										453791
									],
									[
										453849,
										453856
									],
									[
										453883,
										453890
									],
									[
										453912,
										453919
									],
									[
										454018,
										454025
									],
									[
										454089,
										454096
									],
									[
										454129,
										454136
									],
									[
										454164,
										454171
									],
									[
										454269,
										454276
									],
									[
										454339,
										454346
									],
									[
										454378,
										454385
									],
									[
										454412,
										454419
									],
									[
										454638,
										454645
									],
									[
										455143,
										455150
									],
									[
										455208,
										455215
									],
									[
										455242,
										455249
									],
									[
										455271,
										455278
									],
									[
										455377,
										455384
									],
									[
										455448,
										455455
									],
									[
										455488,
										455495
									],
									[
										455523,
										455530
									],
									[
										455628,
										455635
									],
									[
										455698,
										455705
									],
									[
										455737,
										455744
									],
									[
										455771,
										455778
									],
									[
										456081,
										456088
									],
									[
										456315,
										456322
									],
									[
										456365,
										456372
									],
									[
										456627,
										456634
									],
									[
										457096,
										457103
									],
									[
										457555,
										457562
									],
									[
										457751,
										457758
									],
									[
										457844,
										457851
									],
									[
										457866,
										457873
									],
									[
										457883,
										457890
									],
									[
										457905,
										457912
									],
									[
										457995,
										458002
									],
									[
										458046,
										458053
									],
									[
										458139,
										458146
									],
									[
										458161,
										458168
									],
									[
										458178,
										458185
									],
									[
										458200,
										458207
									],
									[
										458217,
										458224
									],
									[
										458301,
										458308
									],
									[
										458510,
										458517
									],
									[
										458575,
										458582
									],
									[
										458592,
										458599
									],
									[
										458614,
										458621
									],
									[
										458707,
										458714
									],
									[
										458765,
										458772
									],
									[
										458782,
										458789
									],
									[
										458804,
										458811
									],
									[
										458821,
										458828
									],
									[
										458908,
										458915
									],
									[
										459059,
										459066
									],
									[
										459111,
										459118
									],
									[
										459199,
										459206
									],
									[
										459270,
										459277
									],
									[
										459281,
										459288
									],
									[
										459367,
										459374
									],
									[
										459656,
										459663
									],
									[
										459786,
										459793
									],
									[
										460074,
										460081
									],
									[
										460281,
										460288
									],
									[
										460335,
										460342
									],
									[
										460368,
										460375
									],
									[
										460473,
										460480
									],
									[
										460584,
										460591
									],
									[
										460648,
										460655
									],
									[
										461073,
										461080
									],
									[
										461257,
										461264
									],
									[
										461375,
										461382
									],
									[
										461441,
										461448
									],
									[
										461494,
										461501
									],
									[
										461525,
										461532
									],
									[
										462015,
										462022
									],
									[
										462071,
										462078
									],
									[
										462106,
										462113
									],
									[
										462277,
										462284
									],
									[
										462331,
										462338
									],
									[
										462364,
										462371
									],
									[
										462518,
										462525
									],
									[
										462574,
										462581
									],
									[
										462609,
										462616
									],
									[
										462844,
										462851
									],
									[
										462953,
										462960
									],
									[
										462975,
										462982
									],
									[
										462992,
										462999
									],
									[
										463014,
										463021
									],
									[
										463137,
										463144
									],
									[
										463218,
										463225
									],
									[
										463327,
										463334
									],
									[
										463349,
										463356
									],
									[
										463366,
										463373
									],
									[
										463388,
										463395
									],
									[
										463405,
										463412
									],
									[
										463522,
										463529
									],
									[
										463806,
										463813
									],
									[
										463887,
										463894
									],
									[
										463904,
										463911
									],
									[
										463926,
										463933
									],
									[
										464052,
										464059
									],
									[
										464141,
										464148
									],
									[
										464158,
										464165
									],
									[
										464180,
										464187
									],
									[
										464197,
										464204
									],
									[
										464317,
										464324
									],
									[
										464543,
										464550
									],
									[
										464611,
										464618
									],
									[
										464732,
										464739
									],
									[
										464849,
										464856
									],
									[
										464860,
										464867
									],
									[
										464979,
										464986
									],
									[
										465343,
										465350
									],
									[
										465503,
										465510
									],
									[
										465870,
										465877
									],
									[
										466155,
										466162
									],
									[
										466226,
										466233
									],
									[
										466275,
										466282
									],
									[
										466410,
										466417
									],
									[
										466536,
										466543
									],
									[
										466616,
										466623
									],
									[
										467117,
										467124
									],
									[
										467316,
										467323
									],
									[
										467449,
										467456
									],
									[
										467545,
										467552
									],
									[
										467598,
										467605
									],
									[
										467629,
										467636
									],
									[
										468195,
										468202
									],
									[
										468268,
										468275
									],
									[
										468319,
										468326
									],
									[
										468551,
										468558
									],
									[
										468622,
										468629
									],
									[
										468671,
										468678
									],
									[
										468886,
										468893
									],
									[
										468959,
										468966
									],
									[
										469010,
										469017
									],
									[
										469277,
										469284
									],
									[
										469341,
										469348
									],
									[
										469829,
										469836
									],
									[
										469939,
										469946
									],
									[
										470221,
										470228
									],
									[
										470254,
										470261
									],
									[
										470633,
										470640
									],
									[
										471036,
										471043
									],
									[
										471317,
										471324
									],
									[
										471463,
										471470
									],
									[
										471664,
										471671
									],
									[
										471779,
										471786
									],
									[
										472034,
										472041
									],
									[
										472167,
										472174
									],
									[
										472195,
										472202
									],
									[
										472239,
										472246
									],
									[
										472270,
										472277
									],
									[
										472313,
										472320
									],
									[
										472343,
										472350
									],
									[
										472608,
										472615
									],
									[
										472663,
										472670
									],
									[
										472718,
										472725
									],
									[
										472774,
										472781
									],
									[
										472830,
										472837
									],
									[
										472885,
										472892
									],
									[
										472940,
										472947
									],
									[
										472996,
										473003
									],
									[
										473053,
										473060
									],
									[
										473111,
										473118
									],
									[
										473166,
										473173
									],
									[
										473222,
										473229
									],
									[
										473278,
										473285
									],
									[
										473333,
										473340
									],
									[
										473389,
										473396
									],
									[
										473446,
										473453
									],
									[
										473504,
										473511
									],
									[
										473559,
										473566
									],
									[
										473615,
										473622
									],
									[
										473850,
										473857
									],
									[
										473872,
										473879
									],
									[
										473889,
										473896
									],
									[
										473911,
										473918
									],
									[
										473947,
										473954
									],
									[
										473969,
										473976
									],
									[
										473986,
										473993
									],
									[
										474008,
										474015
									],
									[
										474025,
										474032
									],
									[
										474055,
										474062
									],
									[
										474072,
										474079
									],
									[
										474094,
										474101
									],
									[
										474130,
										474137
									],
									[
										474147,
										474154
									],
									[
										474169,
										474176
									],
									[
										474186,
										474193
									],
									[
										474220,
										474227
									],
									[
										474254,
										474261
									],
									[
										474265,
										474272
									],
									[
										474479,
										474486
									],
									[
										474616,
										474623
									],
									[
										474846,
										474853
									],
									[
										475033,
										475040
									],
									[
										475238,
										475245
									],
									[
										475612,
										475619
									],
									[
										475839,
										475846
									],
									[
										476071,
										476078
									],
									[
										476400,
										476407
									],
									[
										476523,
										476530
									],
									[
										476832,
										476839
									],
									[
										477014,
										477021
									],
									[
										477198,
										477205
									],
									[
										477444,
										477451
									],
									[
										477681,
										477688
									],
									[
										478053,
										478060
									],
									[
										478338,
										478345
									],
									[
										478566,
										478573
									],
									[
										478907,
										478914
									],
									[
										479234,
										479241
									],
									[
										479321,
										479328
									],
									[
										479377,
										479384
									],
									[
										479469,
										479476
									],
									[
										479487,
										479494
									],
									[
										479500,
										479507
									],
									[
										479534,
										479541
									],
									[
										479587,
										479594
									],
									[
										479601,
										479608
									],
									[
										479676,
										479683
									],
									[
										479690,
										479697
									],
									[
										479737,
										479744
									],
									[
										479949,
										479956
									],
									[
										479958,
										479965
									],
									[
										480044,
										480051
									],
									[
										480106,
										480113
									],
									[
										480143,
										480150
									],
									[
										480195,
										480202
									],
									[
										480214,
										480221
									],
									[
										480240,
										480247
									],
									[
										480270,
										480277
									],
									[
										480310,
										480317
									],
									[
										480348,
										480355
									],
									[
										480404,
										480411
									],
									[
										480463,
										480470
									],
									[
										480521,
										480528
									],
									[
										480724,
										480731
									],
									[
										480733,
										480740
									],
									[
										480793,
										480800
									],
									[
										480812,
										480819
									],
									[
										480842,
										480849
									],
									[
										480872,
										480879
									],
									[
										480909,
										480916
									],
									[
										481076,
										481083
									],
									[
										481305,
										481312
									],
									[
										481435,
										481442
									],
									[
										481532,
										481539
									],
									[
										481615,
										481622
									],
									[
										481653,
										481660
									],
									[
										481698,
										481705
									],
									[
										481761,
										481768
									],
									[
										481811,
										481818
									],
									[
										481847,
										481854
									],
									[
										481862,
										481869
									],
									[
										481876,
										481883
									],
									[
										481890,
										481897
									],
									[
										481938,
										481945
									],
									[
										482014,
										482021
									],
									[
										482178,
										482185
									],
									[
										482242,
										482249
									],
									[
										482336,
										482343
									],
									[
										482417,
										482424
									],
									[
										482538,
										482545
									],
									[
										482571,
										482578
									],
									[
										482581,
										482588
									],
									[
										482594,
										482601
									],
									[
										482755,
										482762
									],
									[
										483002,
										483009
									],
									[
										483056,
										483063
									],
									[
										483183,
										483190
									],
									[
										483531,
										483538
									],
									[
										483539,
										483546
									],
									[
										483564,
										483571
									],
									[
										483611,
										483618
									],
									[
										483631,
										483638
									],
									[
										483673,
										483680
									],
									[
										483715,
										483722
									],
									[
										483781,
										483788
									],
									[
										483847,
										483854
									],
									[
										483881,
										483888
									],
									[
										483957,
										483964
									],
									[
										484011,
										484018
									],
									[
										484079,
										484086
									],
									[
										484135,
										484142
									],
									[
										484371,
										484378
									],
									[
										484413,
										484420
									],
									[
										484701,
										484708
									],
									[
										484770,
										484777
									],
									[
										485011,
										485018
									],
									[
										485096,
										485103
									],
									[
										485288,
										485295
									],
									[
										485838,
										485845
									],
									[
										486327,
										486334
									],
									[
										486739,
										486746
									],
									[
										486778,
										486785
									],
									[
										486832,
										486839
									],
									[
										486920,
										486927
									],
									[
										487013,
										487020
									],
									[
										487106,
										487113
									],
									[
										487188,
										487195
									],
									[
										487283,
										487290
									],
									[
										487385,
										487392
									],
									[
										487507,
										487514
									],
									[
										487590,
										487597
									],
									[
										487700,
										487707
									],
									[
										487785,
										487792
									],
									[
										488012,
										488019
									],
									[
										488050,
										488057
									],
									[
										488121,
										488128
									],
									[
										488408,
										488415
									],
									[
										488463,
										488470
									],
									[
										488517,
										488524
									],
									[
										488583,
										488590
									],
									[
										488649,
										488656
									],
									[
										488698,
										488705
									],
									[
										488763,
										488770
									],
									[
										488825,
										488832
									],
									[
										488884,
										488891
									],
									[
										488942,
										488949
									],
									[
										489009,
										489016
									],
									[
										489065,
										489072
									],
									[
										489114,
										489121
									],
									[
										489630,
										489637
									],
									[
										489655,
										489662
									],
									[
										490252,
										490259
									],
									[
										490272,
										490279
									],
									[
										490684,
										490691
									],
									[
										490986,
										490993
									],
									[
										491272,
										491279
									],
									[
										491711,
										491718
									],
									[
										491744,
										491751
									],
									[
										492561,
										492568
									],
									[
										492955,
										492962
									],
									[
										492983,
										492990
									],
									[
										493745,
										493752
									],
									[
										493901,
										493908
									],
									[
										493939,
										493946
									],
									[
										493981,
										493988
									],
									[
										494202,
										494209
									],
									[
										494294,
										494301
									],
									[
										494534,
										494541
									],
									[
										494593,
										494600
									],
									[
										494647,
										494654
									],
									[
										494713,
										494720
									],
									[
										494779,
										494786
									],
									[
										494832,
										494839
									],
									[
										494897,
										494904
									],
									[
										494959,
										494966
									],
									[
										495018,
										495025
									],
									[
										495076,
										495083
									],
									[
										495143,
										495150
									],
									[
										495203,
										495210
									],
									[
										495252,
										495259
									],
									[
										495499,
										495506
									],
									[
										495527,
										495534
									],
									[
										495762,
										495769
									],
									[
										495785,
										495792
									],
									[
										496052,
										496059
									],
									[
										496219,
										496226
									],
									[
										496750,
										496757
									],
									[
										497419,
										497426
									],
									[
										497773,
										497780
									],
									[
										497946,
										497953
									],
									[
										497984,
										497991
									],
									[
										498038,
										498045
									],
									[
										498133,
										498140
									],
									[
										498198,
										498205
									],
									[
										498645,
										498652
									],
									[
										498777,
										498784
									],
									[
										499446,
										499453
									],
									[
										499578,
										499585
									],
									[
										500243,
										500250
									],
									[
										500375,
										500382
									],
									[
										500959,
										500966
									],
									[
										500989,
										500996
									],
									[
										501049,
										501056
									],
									[
										501084,
										501091
									],
									[
										501503,
										501510
									],
									[
										501536,
										501543
									],
									[
										501599,
										501606
									],
									[
										501637,
										501644
									],
									[
										502034,
										502041
									],
									[
										502071,
										502078
									],
									[
										502133,
										502140
									],
									[
										502174,
										502181
									],
									[
										502596,
										502603
									],
									[
										502765,
										502772
									],
									[
										502816,
										502823
									],
									[
										502850,
										502857
									],
									[
										502872,
										502879
									],
									[
										502906,
										502913
									],
									[
										502986,
										502993
									],
									[
										503248,
										503255
									],
									[
										503277,
										503284
									],
									[
										503306,
										503313
									],
									[
										503348,
										503355
									],
									[
										503383,
										503390
									],
									[
										503417,
										503424
									],
									[
										503474,
										503481
									],
									[
										503601,
										503608
									],
									[
										503638,
										503645
									],
									[
										503675,
										503682
									],
									[
										503718,
										503725
									],
									[
										503760,
										503767
									],
									[
										503960,
										503967
									],
									[
										503995,
										504002
									],
									[
										504063,
										504070
									],
									[
										504118,
										504125
									],
									[
										504176,
										504183
									],
									[
										504231,
										504238
									],
									[
										504628,
										504635
									],
									[
										504650,
										504657
									],
									[
										504705,
										504712
									],
									[
										504727,
										504734
									],
									[
										504781,
										504788
									],
									[
										504803,
										504810
									],
									[
										504847,
										504854
									],
									[
										504869,
										504876
									],
									[
										504918,
										504925
									],
									[
										504940,
										504947
									],
									[
										505183,
										505190
									],
									[
										505234,
										505241
									],
									[
										505285,
										505292
									],
									[
										505342,
										505349
									],
									[
										505516,
										505523
									],
									[
										505679,
										505686
									],
									[
										505834,
										505841
									],
									[
										506026,
										506033
									],
									[
										506141,
										506148
									],
									[
										506232,
										506239
									],
									[
										506328,
										506335
									],
									[
										506415,
										506422
									],
									[
										506631,
										506638
									],
									[
										506742,
										506749
									],
									[
										506851,
										506858
									],
									[
										506929,
										506936
									],
									[
										507025,
										507032
									],
									[
										507105,
										507112
									],
									[
										507229,
										507236
									],
									[
										507283,
										507290
									],
									[
										507419,
										507426
									],
									[
										507528,
										507535
									],
									[
										507621,
										507628
									],
									[
										507841,
										507848
									],
									[
										507895,
										507902
									],
									[
										508008,
										508015
									],
									[
										508062,
										508069
									],
									[
										508159,
										508166
									],
									[
										508236,
										508243
									],
									[
										508511,
										508518
									],
									[
										508852,
										508859
									],
									[
										508983,
										508990
									],
									[
										509108,
										509115
									],
									[
										509233,
										509240
									],
									[
										509727,
										509734
									],
									[
										509846,
										509853
									],
									[
										509959,
										509966
									],
									[
										510072,
										510079
									],
									[
										510185,
										510192
									],
									[
										510303,
										510310
									],
									[
										510441,
										510448
									],
									[
										510791,
										510798
									],
									[
										510977,
										510984
									],
									[
										511094,
										511101
									],
									[
										511210,
										511217
									],
									[
										511463,
										511470
									],
									[
										511747,
										511754
									],
									[
										511861,
										511868
									],
									[
										511974,
										511981
									],
									[
										512224,
										512231
									],
									[
										512466,
										512473
									],
									[
										512491,
										512498
									],
									[
										512548,
										512555
									],
									[
										512580,
										512587
									],
									[
										512650,
										512657
									],
									[
										512682,
										512689
									],
									[
										512970,
										512977
									],
									[
										513007,
										513014
									],
									[
										513080,
										513087
									],
									[
										513117,
										513124
									],
									[
										513190,
										513197
									],
									[
										513227,
										513234
									],
									[
										513306,
										513313
									],
									[
										513343,
										513350
									],
									[
										513665,
										513672
									],
									[
										513698,
										513705
									],
									[
										514043,
										514050
									],
									[
										514068,
										514075
									],
									[
										514144,
										514151
									],
									[
										514168,
										514175
									],
									[
										514241,
										514248
									],
									[
										514274,
										514281
									],
									[
										514536,
										514543
									],
									[
										514578,
										514585
									],
									[
										514639,
										514646
									],
									[
										514681,
										514688
									],
									[
										514736,
										514743
									],
									[
										514778,
										514785
									],
									[
										514833,
										514840
									],
									[
										514875,
										514882
									],
									[
										514930,
										514937
									],
									[
										514972,
										514979
									],
									[
										515027,
										515034
									],
									[
										515069,
										515076
									],
									[
										515129,
										515136
									],
									[
										515171,
										515178
									],
									[
										515430,
										515437
									],
									[
										515478,
										515485
									],
									[
										515542,
										515549
									],
									[
										515590,
										515597
									],
									[
										515651,
										515658
									],
									[
										515699,
										515706
									],
									[
										515763,
										515770
									],
									[
										515811,
										515818
									],
									[
										515872,
										515879
									],
									[
										515923,
										515930
									],
									[
										515988,
										515995
									],
									[
										516035,
										516042
									],
									[
										516085,
										516092
									],
									[
										516132,
										516139
									],
									[
										516182,
										516189
									],
									[
										516229,
										516236
									],
									[
										516285,
										516292
									],
									[
										516332,
										516339
									],
									[
										516389,
										516396
									],
									[
										516436,
										516443
									],
									[
										516807,
										516814
									],
									[
										516977,
										516984
									],
									[
										517124,
										517131
									],
									[
										517269,
										517276
									],
									[
										517428,
										517435
									],
									[
										517682,
										517689
									],
									[
										517960,
										517967
									],
									[
										518283,
										518290
									],
									[
										518521,
										518528
									],
									[
										518816,
										518823
									],
									[
										518850,
										518857
									],
									[
										518938,
										518945
									],
									[
										518956,
										518963
									],
									[
										519091,
										519098
									],
									[
										519125,
										519132
									],
									[
										519491,
										519498
									],
									[
										519891,
										519898
									],
									[
										520174,
										520181
									],
									[
										520221,
										520228
									],
									[
										520512,
										520519
									],
									[
										520588,
										520595
									],
									[
										520912,
										520919
									],
									[
										521001,
										521008
									],
									[
										521087,
										521094
									],
									[
										521193,
										521200
									],
									[
										521278,
										521285
									],
									[
										521577,
										521584
									],
									[
										521839,
										521846
									],
									[
										521882,
										521889
									],
									[
										521925,
										521932
									],
									[
										521981,
										521988
									],
									[
										522030,
										522037
									],
									[
										522078,
										522085
									],
									[
										522132,
										522139
									],
									[
										522181,
										522188
									],
									[
										522227,
										522234
									],
									[
										522289,
										522296
									],
									[
										522354,
										522361
									],
									[
										522406,
										522413
									],
									[
										522464,
										522471
									],
									[
										522515,
										522522
									],
									[
										522566,
										522573
									],
									[
										522623,
										522630
									],
									[
										522679,
										522686
									],
									[
										522942,
										522949
									],
									[
										523022,
										523029
									],
									[
										523097,
										523104
									],
									[
										523531,
										523538
									],
									[
										523811,
										523818
									],
									[
										523890,
										523897
									],
									[
										523972,
										523979
									],
									[
										524316,
										524323
									],
									[
										524710,
										524717
									],
									[
										524809,
										524816
									],
									[
										524993,
										525000
									],
									[
										525194,
										525201
									],
									[
										525586,
										525593
									],
									[
										525753,
										525760
									],
									[
										526064,
										526071
									],
									[
										526108,
										526115
									],
									[
										526122,
										526129
									],
									[
										526331,
										526338
									],
									[
										526381,
										526388
									],
									[
										526395,
										526402
									],
									[
										526612,
										526619
									],
									[
										526662,
										526669
									],
									[
										526676,
										526683
									],
									[
										526900,
										526907
									],
									[
										526944,
										526951
									],
									[
										527196,
										527203
									],
									[
										527253,
										527260
									],
									[
										527267,
										527274
									],
									[
										527490,
										527497
									],
									[
										527539,
										527546
									],
									[
										527553,
										527560
									],
									[
										527771,
										527778
									],
									[
										527829,
										527836
									],
									[
										528108,
										528115
									],
									[
										528152,
										528159
									],
									[
										528484,
										528491
									],
									[
										528542,
										528549
									],
									[
										528942,
										528949
									],
									[
										528986,
										528993
									],
									[
										529230,
										529237
									],
									[
										529288,
										529295
									],
									[
										529576,
										529583
									],
									[
										529621,
										529628
									],
									[
										529905,
										529912
									],
									[
										529949,
										529956
									],
									[
										530192,
										530199
									],
									[
										530242,
										530249
									],
									[
										530493,
										530500
									],
									[
										530542,
										530549
									],
									[
										530791,
										530798
									],
									[
										530841,
										530848
									],
									[
										531239,
										531246
									],
									[
										531693,
										531700
									],
									[
										531891,
										531898
									],
									[
										531925,
										531932
									],
									[
										532131,
										532138
									],
									[
										532164,
										532171
									],
									[
										532213,
										532220
									],
									[
										532507,
										532514
									],
									[
										532591,
										532598
									],
									[
										533041,
										533048
									],
									[
										533123,
										533130
									],
									[
										533220,
										533227
									],
									[
										533582,
										533589
									],
									[
										533715,
										533722
									],
									[
										533894,
										533901
									],
									[
										534015,
										534022
									],
									[
										534409,
										534416
									],
									[
										534498,
										534505
									],
									[
										534793,
										534800
									],
									[
										534977,
										534984
									],
									[
										535173,
										535180
									],
									[
										535201,
										535208
									],
									[
										535229,
										535236
									],
									[
										535270,
										535277
									],
									[
										535304,
										535311
									],
									[
										535338,
										535345
									],
									[
										535376,
										535383
									],
									[
										535564,
										535571
									],
									[
										535689,
										535696
									],
									[
										535750,
										535757
									],
									[
										535799,
										535806
									],
									[
										535849,
										535856
									],
									[
										535975,
										535982
									],
									[
										536065,
										536072
									],
									[
										536117,
										536124
									],
									[
										536187,
										536194
									],
									[
										536321,
										536328
									],
									[
										536495,
										536502
									],
									[
										536691,
										536698
									],
									[
										536816,
										536823
									],
									[
										536877,
										536884
									],
									[
										536926,
										536933
									],
									[
										536976,
										536983
									],
									[
										537102,
										537109
									],
									[
										537192,
										537199
									],
									[
										537244,
										537251
									],
									[
										537314,
										537321
									],
									[
										537448,
										537455
									],
									[
										537622,
										537629
									],
									[
										537818,
										537825
									],
									[
										537943,
										537950
									],
									[
										538004,
										538011
									],
									[
										538053,
										538060
									],
									[
										538103,
										538110
									],
									[
										538229,
										538236
									],
									[
										538319,
										538326
									],
									[
										538371,
										538378
									],
									[
										538441,
										538448
									],
									[
										538562,
										538569
									],
									[
										538725,
										538732
									],
									[
										538955,
										538962
									],
									[
										538983,
										538990
									],
									[
										539011,
										539018
									],
									[
										539052,
										539059
									],
									[
										539086,
										539093
									],
									[
										539119,
										539126
									],
									[
										539158,
										539165
									],
									[
										539295,
										539302
									],
									[
										539466,
										539473
									],
									[
										539494,
										539501
									],
									[
										539522,
										539529
									],
									[
										539563,
										539570
									],
									[
										539597,
										539604
									],
									[
										539631,
										539638
									],
									[
										539669,
										539676
									],
									[
										539801,
										539808
									],
									[
										539939,
										539946
									],
									[
										540114,
										540121
									],
									[
										540144,
										540151
									],
									[
										540203,
										540210
									],
									[
										540231,
										540238
									],
									[
										540272,
										540279
									],
									[
										540306,
										540313
									],
									[
										540359,
										540366
									],
									[
										540397,
										540404
									],
									[
										540611,
										540618
									],
									[
										540775,
										540782
									],
									[
										541159,
										541166
									],
									[
										541253,
										541260
									],
									[
										541347,
										541354
									],
									[
										541441,
										541448
									],
									[
										541535,
										541542
									],
									[
										541629,
										541636
									],
									[
										541920,
										541927
									],
									[
										542193,
										542200
									],
									[
										542398,
										542405
									],
									[
										542470,
										542477
									],
									[
										542510,
										542517
									],
									[
										542705,
										542712
									],
									[
										542869,
										542876
									],
									[
										543078,
										543085
									],
									[
										543183,
										543190
									],
									[
										543255,
										543262
									],
									[
										543456,
										543463
									],
									[
										543778,
										543785
									],
									[
										544074,
										544081
									],
									[
										544266,
										544273
									],
									[
										544463,
										544470
									],
									[
										544668,
										544675
									],
									[
										544740,
										544747
									],
									[
										544780,
										544787
									],
									[
										544975,
										544982
									],
									[
										545139,
										545146
									],
									[
										545348,
										545355
									],
									[
										545453,
										545460
									],
									[
										545525,
										545532
									],
									[
										545728,
										545735
									],
									[
										546002,
										546009
									],
									[
										546048,
										546055
									],
									[
										546094,
										546101
									],
									[
										546153,
										546160
									],
									[
										546205,
										546212
									],
									[
										546257,
										546264
									],
									[
										546313,
										546320
									],
									[
										546589,
										546596
									],
									[
										546635,
										546642
									],
									[
										546681,
										546688
									],
									[
										546740,
										546747
									],
									[
										546792,
										546799
									],
									[
										546844,
										546851
									],
									[
										546900,
										546907
									],
									[
										547388,
										547395
									],
									[
										547482,
										547489
									],
									[
										547576,
										547583
									],
									[
										547670,
										547677
									],
									[
										547764,
										547771
									],
									[
										547858,
										547865
									],
									[
										548149,
										548156
									],
									[
										548422,
										548429
									],
									[
										548633,
										548640
									],
									[
										548705,
										548712
									],
									[
										548745,
										548752
									],
									[
										548940,
										548947
									],
									[
										549104,
										549111
									],
									[
										549325,
										549332
									],
									[
										549436,
										549443
									],
									[
										549508,
										549515
									],
									[
										549709,
										549716
									],
									[
										549908,
										549915
									],
									[
										550119,
										550126
									],
									[
										550191,
										550198
									],
									[
										550231,
										550238
									],
									[
										550426,
										550433
									],
									[
										550590,
										550597
									],
									[
										550811,
										550818
									],
									[
										550922,
										550929
									],
									[
										550994,
										551001
									],
									[
										551492,
										551499
									],
									[
										551976,
										551983
									],
									[
										552070,
										552077
									],
									[
										552164,
										552171
									],
									[
										552258,
										552265
									],
									[
										552352,
										552359
									],
									[
										552446,
										552453
									],
									[
										552737,
										552744
									],
									[
										553010,
										553017
									],
									[
										553221,
										553228
									],
									[
										553293,
										553300
									],
									[
										553333,
										553340
									],
									[
										553528,
										553535
									],
									[
										553692,
										553699
									],
									[
										553913,
										553920
									],
									[
										554024,
										554031
									],
									[
										554096,
										554103
									],
									[
										554297,
										554304
									],
									[
										554504,
										554511
									],
									[
										554715,
										554722
									],
									[
										554787,
										554794
									],
									[
										554827,
										554834
									],
									[
										555022,
										555029
									],
									[
										555186,
										555193
									],
									[
										555407,
										555414
									],
									[
										555518,
										555525
									],
									[
										555590,
										555597
									],
									[
										556088,
										556095
									],
									[
										556628,
										556635
									],
									[
										556722,
										556729
									],
									[
										556816,
										556823
									],
									[
										556910,
										556917
									],
									[
										557004,
										557011
									],
									[
										557098,
										557105
									],
									[
										557389,
										557396
									],
									[
										557662,
										557669
									],
									[
										557867,
										557874
									],
									[
										557939,
										557946
									],
									[
										557979,
										557986
									],
									[
										558174,
										558181
									],
									[
										558338,
										558345
									],
									[
										558547,
										558554
									],
									[
										558652,
										558659
									],
									[
										558724,
										558731
									],
									[
										558925,
										558932
									],
									[
										559124,
										559131
									],
									[
										559329,
										559336
									],
									[
										559401,
										559408
									],
									[
										559441,
										559448
									],
									[
										559636,
										559643
									],
									[
										559800,
										559807
									],
									[
										560009,
										560016
									],
									[
										560114,
										560121
									],
									[
										560186,
										560193
									],
									[
										560732,
										560739
									],
									[
										561105,
										561112
									],
									[
										561151,
										561158
									],
									[
										561197,
										561204
									],
									[
										561256,
										561263
									],
									[
										561308,
										561315
									],
									[
										561359,
										561366
									],
									[
										561416,
										561423
									],
									[
										561636,
										561643
									],
									[
										561682,
										561689
									],
									[
										561728,
										561735
									],
									[
										561787,
										561794
									],
									[
										561839,
										561846
									],
									[
										561890,
										561897
									],
									[
										561947,
										561954
									],
									[
										562254,
										562261
									],
									[
										562452,
										562459
									],
									[
										562726,
										562733
									],
									[
										562772,
										562779
									],
									[
										562818,
										562825
									],
									[
										562877,
										562884
									],
									[
										562929,
										562936
									],
									[
										562981,
										562988
									],
									[
										563037,
										563044
									],
									[
										563309,
										563316
									],
									[
										563514,
										563521
									],
									[
										563716,
										563723
									],
									[
										563762,
										563769
									],
									[
										563808,
										563815
									],
									[
										563867,
										563874
									],
									[
										563919,
										563926
									],
									[
										563971,
										563978
									],
									[
										564027,
										564034
									],
									[
										564299,
										564306
									],
									[
										564685,
										564692
									],
									[
										564763,
										564770
									],
									[
										564852,
										564859
									],
									[
										565246,
										565253
									],
									[
										565414,
										565421
									],
									[
										565461,
										565468
									],
									[
										565521,
										565528
									],
									[
										565631,
										565638
									],
									[
										566058,
										566065
									],
									[
										566166,
										566173
									],
									[
										566275,
										566282
									],
									[
										566390,
										566397
									],
									[
										566729,
										566736
									],
									[
										567153,
										567160
									],
									[
										567206,
										567213
									],
									[
										567260,
										567267
									],
									[
										567320,
										567327
									],
									[
										567546,
										567553
									],
									[
										567601,
										567608
									],
									[
										567656,
										567663
									],
									[
										567717,
										567724
									],
									[
										567963,
										567970
									],
									[
										568018,
										568025
									],
									[
										568073,
										568080
									],
									[
										568134,
										568141
									],
									[
										568579,
										568586
									],
									[
										568687,
										568694
									],
									[
										568796,
										568803
									],
									[
										568911,
										568918
									],
									[
										569250,
										569257
									],
									[
										569664,
										569671
									],
									[
										569717,
										569724
									],
									[
										569771,
										569778
									],
									[
										569831,
										569838
									],
									[
										570057,
										570064
									],
									[
										570112,
										570119
									],
									[
										570167,
										570174
									],
									[
										570228,
										570235
									],
									[
										570474,
										570481
									],
									[
										570529,
										570536
									],
									[
										570584,
										570591
									],
									[
										570645,
										570652
									],
									[
										571090,
										571097
									],
									[
										571198,
										571205
									],
									[
										571307,
										571314
									],
									[
										571422,
										571429
									],
									[
										571761,
										571768
									],
									[
										572175,
										572182
									],
									[
										572228,
										572235
									],
									[
										572282,
										572289
									],
									[
										572342,
										572349
									],
									[
										572568,
										572575
									],
									[
										572623,
										572630
									],
									[
										572678,
										572685
									],
									[
										572739,
										572746
									],
									[
										572985,
										572992
									],
									[
										573040,
										573047
									],
									[
										573095,
										573102
									],
									[
										573156,
										573163
									],
									[
										573601,
										573608
									],
									[
										573709,
										573716
									],
									[
										573818,
										573825
									],
									[
										573933,
										573940
									],
									[
										574272,
										574279
									],
									[
										574686,
										574693
									],
									[
										574739,
										574746
									],
									[
										574793,
										574800
									],
									[
										574853,
										574860
									],
									[
										575079,
										575086
									],
									[
										575134,
										575141
									],
									[
										575189,
										575196
									],
									[
										575250,
										575257
									],
									[
										575496,
										575503
									],
									[
										575551,
										575558
									],
									[
										575606,
										575613
									],
									[
										575667,
										575674
									],
									[
										576112,
										576119
									],
									[
										576220,
										576227
									],
									[
										576329,
										576336
									],
									[
										576444,
										576451
									],
									[
										576783,
										576790
									],
									[
										577197,
										577204
									],
									[
										577250,
										577257
									],
									[
										577304,
										577311
									],
									[
										577364,
										577371
									],
									[
										577590,
										577597
									],
									[
										577645,
										577652
									],
									[
										577700,
										577707
									],
									[
										577761,
										577768
									],
									[
										578007,
										578014
									],
									[
										578062,
										578069
									],
									[
										578117,
										578124
									],
									[
										578178,
										578185
									],
									[
										578628,
										578635
									],
									[
										578736,
										578743
									],
									[
										578845,
										578852
									],
									[
										578960,
										578967
									],
									[
										579379,
										579386
									],
									[
										579817,
										579824
									],
									[
										579870,
										579877
									],
									[
										579924,
										579931
									],
									[
										579984,
										579991
									],
									[
										580203,
										580210
									],
									[
										580407,
										580414
									],
									[
										580462,
										580469
									],
									[
										580517,
										580524
									],
									[
										580578,
										580585
									],
									[
										580639,
										580646
									],
									[
										580875,
										580882
									],
									[
										580930,
										580937
									],
									[
										580985,
										580992
									],
									[
										581046,
										581053
									],
									[
										581107,
										581114
									],
									[
										581589,
										581596
									],
									[
										581697,
										581704
									],
									[
										581806,
										581813
									],
									[
										581921,
										581928
									],
									[
										582340,
										582347
									],
									[
										582778,
										582785
									],
									[
										582831,
										582838
									],
									[
										582885,
										582892
									],
									[
										582945,
										582952
									],
									[
										583164,
										583171
									],
									[
										583357,
										583364
									],
									[
										583404,
										583411
									],
									[
										583718,
										583725
									],
									[
										583765,
										583772
									],
									[
										584048,
										584055
									],
									[
										584095,
										584102
									],
									[
										584382,
										584389
									],
									[
										584429,
										584436
									],
									[
										584679,
										584686
									],
									[
										584726,
										584733
									],
									[
										585018,
										585025
									],
									[
										585073,
										585080
									],
									[
										585128,
										585135
									],
									[
										585189,
										585196
									],
									[
										585412,
										585419
									],
									[
										585638,
										585645
									],
									[
										585685,
										585692
									],
									[
										585999,
										586006
									],
									[
										586046,
										586053
									],
									[
										586329,
										586336
									],
									[
										586376,
										586383
									],
									[
										586663,
										586670
									],
									[
										586710,
										586717
									],
									[
										586960,
										586967
									],
									[
										587007,
										587014
									],
									[
										587485,
										587492
									],
									[
										587594,
										587601
									],
									[
										587703,
										587710
									],
									[
										587818,
										587825
									],
									[
										588157,
										588164
									],
									[
										588571,
										588578
									],
									[
										588625,
										588632
									],
									[
										588679,
										588686
									],
									[
										588739,
										588746
									],
									[
										589030,
										589037
									],
									[
										589085,
										589092
									],
									[
										589140,
										589147
									],
									[
										589201,
										589208
									],
									[
										589687,
										589694
									],
									[
										589796,
										589803
									],
									[
										589905,
										589912
									],
									[
										590020,
										590027
									],
									[
										590359,
										590366
									],
									[
										590773,
										590780
									],
									[
										590827,
										590834
									],
									[
										590881,
										590888
									],
									[
										590941,
										590948
									],
									[
										591232,
										591239
									],
									[
										591287,
										591294
									],
									[
										591342,
										591349
									],
									[
										591403,
										591410
									],
									[
										591889,
										591896
									],
									[
										591998,
										592005
									],
									[
										592107,
										592114
									],
									[
										592222,
										592229
									],
									[
										592561,
										592568
									],
									[
										592975,
										592982
									],
									[
										593029,
										593036
									],
									[
										593083,
										593090
									],
									[
										593143,
										593150
									],
									[
										593434,
										593441
									],
									[
										593489,
										593496
									],
									[
										593544,
										593551
									],
									[
										593605,
										593612
									],
									[
										594090,
										594097
									],
									[
										594199,
										594206
									],
									[
										594308,
										594315
									],
									[
										594423,
										594430
									],
									[
										594762,
										594769
									],
									[
										595176,
										595183
									],
									[
										595230,
										595237
									],
									[
										595284,
										595291
									],
									[
										595344,
										595351
									],
									[
										595635,
										595642
									],
									[
										595690,
										595697
									],
									[
										595745,
										595752
									],
									[
										595806,
										595813
									],
									[
										596292,
										596299
									],
									[
										596401,
										596408
									],
									[
										596510,
										596517
									],
									[
										596625,
										596632
									],
									[
										596964,
										596971
									],
									[
										597379,
										597386
									],
									[
										597433,
										597440
									],
									[
										597487,
										597494
									],
									[
										597547,
										597554
									],
									[
										597838,
										597845
									],
									[
										597893,
										597900
									],
									[
										597948,
										597955
									],
									[
										598009,
										598016
									],
									[
										598496,
										598503
									],
									[
										598605,
										598612
									],
									[
										598714,
										598721
									],
									[
										598829,
										598836
									],
									[
										599168,
										599175
									],
									[
										599583,
										599590
									],
									[
										599637,
										599644
									],
									[
										599691,
										599698
									],
									[
										599751,
										599758
									],
									[
										600042,
										600049
									],
									[
										600097,
										600104
									],
									[
										600152,
										600159
									],
									[
										600213,
										600220
									],
									[
										600698,
										600705
									],
									[
										600806,
										600813
									],
									[
										600915,
										600922
									],
									[
										601030,
										601037
									],
									[
										601449,
										601456
									],
									[
										601887,
										601894
									],
									[
										601940,
										601947
									],
									[
										601994,
										602001
									],
									[
										602054,
										602061
									],
									[
										602273,
										602280
									],
									[
										602480,
										602487
									],
									[
										602527,
										602534
									],
									[
										602867,
										602874
									],
									[
										602914,
										602921
									],
									[
										603230,
										603237
									],
									[
										603285,
										603292
									],
									[
										603340,
										603347
									],
									[
										603401,
										603408
									],
									[
										603624,
										603631
									],
									[
										603864,
										603871
									],
									[
										603911,
										603918
									],
									[
										604251,
										604258
									],
									[
										604298,
										604305
									],
									[
										604648,
										604655
									],
									[
										604702,
										604709
									],
									[
										604756,
										604763
									],
									[
										604816,
										604823
									],
									[
										604876,
										604883
									],
									[
										605121,
										605128
									],
									[
										605175,
										605182
									],
									[
										605229,
										605236
									],
									[
										605289,
										605296
									],
									[
										605349,
										605356
									],
									[
										605684,
										605691
									],
									[
										605885,
										605892
									],
									[
										606174,
										606181
									],
									[
										606487,
										606494
									],
									[
										606688,
										606695
									],
									[
										606982,
										606989
									],
									[
										607286,
										607293
									],
									[
										607487,
										607494
									],
									[
										607773,
										607780
									],
									[
										608078,
										608085
									],
									[
										608279,
										608286
									],
									[
										608565,
										608572
									],
									[
										608876,
										608883
									],
									[
										609077,
										609084
									],
									[
										609363,
										609370
									],
									[
										609674,
										609681
									],
									[
										609875,
										609882
									],
									[
										610165,
										610172
									],
									[
										610468,
										610475
									],
									[
										610669,
										610676
									],
									[
										610958,
										610965
									],
									[
										611271,
										611278
									],
									[
										611472,
										611479
									],
									[
										611755,
										611762
									],
									[
										612065,
										612072
									],
									[
										612266,
										612273
									],
									[
										612549,
										612556
									],
									[
										612855,
										612862
									],
									[
										613056,
										613063
									],
									[
										613342,
										613349
									],
									[
										613600,
										613607
									],
									[
										613759,
										613766
									],
									[
										613805,
										613812
									],
									[
										613867,
										613874
									],
									[
										613916,
										613923
									],
									[
										613981,
										613988
									],
									[
										614033,
										614040
									],
									[
										614232,
										614239
									],
									[
										614278,
										614285
									],
									[
										614340,
										614347
									],
									[
										614389,
										614396
									],
									[
										614454,
										614461
									],
									[
										614506,
										614513
									],
									[
										614772,
										614779
									],
									[
										614830,
										614837
									],
									[
										614890,
										614897
									],
									[
										614948,
										614955
									],
									[
										615008,
										615015
									],
									[
										615066,
										615073
									],
									[
										615416,
										615423
									],
									[
										615706,
										615713
									],
									[
										615762,
										615769
									],
									[
										616143,
										616150
									],
									[
										616201,
										616208
									],
									[
										616485,
										616492
									],
									[
										616543,
										616550
									],
									[
										616899,
										616906
									],
									[
										617266,
										617273
									],
									[
										617742,
										617749
									],
									[
										618073,
										618080
									],
									[
										618306,
										618313
									],
									[
										618416,
										618423
									],
									[
										618689,
										618696
									],
									[
										619095,
										619102
									],
									[
										619153,
										619160
									],
									[
										619214,
										619221
									],
									[
										619668,
										619675
									],
									[
										619817,
										619824
									],
									[
										619897,
										619904
									],
									[
										620305,
										620312
									],
									[
										620427,
										620434
									],
									[
										620551,
										620558
									],
									[
										620611,
										620618
									],
									[
										620629,
										620636
									],
									[
										621095,
										621102
									],
									[
										621153,
										621160
									],
									[
										621445,
										621452
									],
									[
										621503,
										621510
									],
									[
										621830,
										621837
									],
									[
										621888,
										621895
									],
									[
										622186,
										622193
									],
									[
										622244,
										622251
									],
									[
										622582,
										622589
									],
									[
										622640,
										622647
									],
									[
										623041,
										623048
									],
									[
										623099,
										623106
									],
									[
										623400,
										623407
									],
									[
										623458,
										623465
									],
									[
										623838,
										623845
									],
									[
										623896,
										623903
									],
									[
										624178,
										624185
									],
									[
										624236,
										624243
									],
									[
										624631,
										624638
									],
									[
										624689,
										624696
									],
									[
										624981,
										624988
									],
									[
										625039,
										625046
									],
									[
										625364,
										625371
									],
									[
										625422,
										625429
									],
									[
										625719,
										625726
									],
									[
										625777,
										625784
									],
									[
										626220,
										626227
									],
									[
										626278,
										626285
									],
									[
										626579,
										626586
									],
									[
										626637,
										626644
									],
									[
										627000,
										627007
									],
									[
										627058,
										627065
									],
									[
										627439,
										627446
									],
									[
										627497,
										627504
									],
									[
										627781,
										627788
									],
									[
										627839,
										627846
									],
									[
										628197,
										628204
									],
									[
										628255,
										628262
									],
									[
										628548,
										628555
									],
									[
										628606,
										628613
									],
									[
										628992,
										628999
									],
									[
										629052,
										629059
									],
									[
										629109,
										629116
									],
									[
										629166,
										629173
									],
									[
										629223,
										629230
									],
									[
										629526,
										629533
									],
									[
										629816,
										629823
									],
									[
										629873,
										629880
									],
									[
										629930,
										629937
									],
									[
										629986,
										629993
									],
									[
										630408,
										630415
									],
									[
										630494,
										630501
									],
									[
										630583,
										630590
									],
									[
										630663,
										630670
									],
									[
										630971,
										630978
									],
									[
										631206,
										631213
									],
									[
										631240,
										631247
									],
									[
										631274,
										631281
									],
									[
										631314,
										631321
									],
									[
										631628,
										631635
									],
									[
										631714,
										631721
									],
									[
										631794,
										631801
									],
									[
										631874,
										631881
									],
									[
										632182,
										632189
									],
									[
										632437,
										632444
									],
									[
										632471,
										632478
									],
									[
										632505,
										632512
									],
									[
										632545,
										632552
									],
									[
										632859,
										632866
									],
									[
										632945,
										632952
									],
									[
										633025,
										633032
									],
									[
										633105,
										633112
									],
									[
										633413,
										633420
									],
									[
										633666,
										633673
									],
									[
										633700,
										633707
									],
									[
										633734,
										633741
									],
									[
										633774,
										633781
									],
									[
										634088,
										634095
									],
									[
										634174,
										634181
									],
									[
										634254,
										634261
									],
									[
										634334,
										634341
									],
									[
										634642,
										634649
									],
									[
										634895,
										634902
									],
									[
										634929,
										634936
									],
									[
										634963,
										634970
									],
									[
										635003,
										635010
									],
									[
										635317,
										635324
									],
									[
										635403,
										635410
									],
									[
										635483,
										635490
									],
									[
										635563,
										635570
									],
									[
										635871,
										635878
									],
									[
										636121,
										636128
									],
									[
										636155,
										636162
									],
									[
										636189,
										636196
									],
									[
										636229,
										636236
									],
									[
										636548,
										636555
									],
									[
										636634,
										636641
									],
									[
										636714,
										636721
									],
									[
										636794,
										636801
									],
									[
										637114,
										637121
									],
									[
										637379,
										637386
									],
									[
										637415,
										637422
									],
									[
										637451,
										637458
									],
									[
										637493,
										637500
									],
									[
										637535,
										637542
									],
									[
										637831,
										637838
									],
									[
										637917,
										637924
									],
									[
										637997,
										638004
									],
									[
										638077,
										638084
									],
									[
										638397,
										638404
									],
									[
										638591,
										638598
									],
									[
										638620,
										638627
									],
									[
										638650,
										638657
									],
									[
										638799,
										638806
									],
									[
										639029,
										639036
									],
									[
										639189,
										639196
									],
									[
										639433,
										639440
									],
									[
										639557,
										639564
									],
									[
										639668,
										639675
									],
									[
										639702,
										639709
									],
									[
										639736,
										639743
									],
									[
										639776,
										639783
									],
									[
										639965,
										639972
									],
									[
										640285,
										640292
									],
									[
										640371,
										640378
									],
									[
										640451,
										640458
									],
									[
										640531,
										640538
									],
									[
										640839,
										640846
									],
									[
										641054,
										641061
									],
									[
										641088,
										641095
									],
									[
										641122,
										641129
									],
									[
										641162,
										641169
									],
									[
										641477,
										641484
									],
									[
										641563,
										641570
									],
									[
										641643,
										641650
									],
									[
										641723,
										641730
									],
									[
										642031,
										642038
									],
									[
										642246,
										642253
									],
									[
										642280,
										642287
									],
									[
										642314,
										642321
									],
									[
										642354,
										642361
									],
									[
										642669,
										642676
									],
									[
										642755,
										642762
									],
									[
										642835,
										642842
									],
									[
										642915,
										642922
									],
									[
										643223,
										643230
									],
									[
										643438,
										643445
									],
									[
										643472,
										643479
									],
									[
										643506,
										643513
									],
									[
										643546,
										643553
									],
									[
										643860,
										643867
									],
									[
										643946,
										643953
									],
									[
										644026,
										644033
									],
									[
										644106,
										644113
									],
									[
										644414,
										644421
									],
									[
										644629,
										644636
									],
									[
										644663,
										644670
									],
									[
										644697,
										644704
									],
									[
										644737,
										644744
									],
									[
										645051,
										645058
									],
									[
										645137,
										645144
									],
									[
										645217,
										645224
									],
									[
										645297,
										645304
									],
									[
										645605,
										645612
									],
									[
										645820,
										645827
									],
									[
										645854,
										645861
									],
									[
										645888,
										645895
									],
									[
										645928,
										645935
									],
									[
										646243,
										646250
									],
									[
										646329,
										646336
									],
									[
										646409,
										646416
									],
									[
										646489,
										646496
									],
									[
										646797,
										646804
									],
									[
										647012,
										647019
									],
									[
										647046,
										647053
									],
									[
										647080,
										647087
									],
									[
										647120,
										647127
									],
									[
										647434,
										647441
									],
									[
										647520,
										647527
									],
									[
										647600,
										647607
									],
									[
										647680,
										647687
									],
									[
										648000,
										648007
									],
									[
										648214,
										648221
									],
									[
										648243,
										648250
									],
									[
										648273,
										648280
									],
									[
										648420,
										648427
									],
									[
										648539,
										648546
									],
									[
										648673,
										648680
									],
									[
										648707,
										648714
									],
									[
										648741,
										648748
									],
									[
										648781,
										648788
									],
									[
										648970,
										648977
									],
									[
										649240,
										649247
									],
									[
										649276,
										649283
									],
									[
										649312,
										649319
									],
									[
										649354,
										649361
									],
									[
										649396,
										649403
									],
									[
										649588,
										649595
									],
									[
										649619,
										649626
									],
									[
										649666,
										649673
									],
									[
										649700,
										649707
									],
									[
										649746,
										649753
									],
									[
										649779,
										649786
									],
									[
										649982,
										649989
									],
									[
										650108,
										650115
									],
									[
										650609,
										650616
									],
									[
										650707,
										650714
									],
									[
										651186,
										651193
									],
									[
										651797,
										651804
									],
									[
										651898,
										651905
									],
									[
										652305,
										652312
									],
									[
										652408,
										652415
									],
									[
										652907,
										652914
									],
									[
										653019,
										653026
									],
									[
										653531,
										653538
									],
									[
										653634,
										653641
									],
									[
										654014,
										654021
									],
									[
										654185,
										654192
									],
									[
										654224,
										654231
									],
									[
										654400,
										654407
									],
									[
										654429,
										654436
									],
									[
										654459,
										654466
									],
									[
										654610,
										654617
									],
									[
										654766,
										654773
									],
									[
										654909,
										654916
									],
									[
										655106,
										655113
									],
									[
										655337,
										655344
									],
									[
										655570,
										655577
									],
									[
										655625,
										655632
									],
									[
										655676,
										655683
									],
									[
										656178,
										656185
									],
									[
										656300,
										656307
									],
									[
										656441,
										656448
									],
									[
										656859,
										656866
									],
									[
										656962,
										656969
									],
									[
										657031,
										657038
									],
									[
										657530,
										657537
									],
									[
										657649,
										657656
									],
									[
										657770,
										657777
									],
									[
										658202,
										658209
									],
									[
										658231,
										658238
									],
									[
										658261,
										658268
									],
									[
										658410,
										658417
									],
									[
										658640,
										658647
									],
									[
										658800,
										658807
									],
									[
										659044,
										659051
									],
									[
										659168,
										659175
									],
									[
										659364,
										659371
									],
									[
										659393,
										659400
									],
									[
										659423,
										659430
									],
									[
										659589,
										659596
									],
									[
										659900,
										659907
									],
									[
										660099,
										660106
									],
									[
										660128,
										660135
									],
									[
										660158,
										660165
									],
									[
										660296,
										660303
									],
									[
										660440,
										660447
									],
									[
										660615,
										660622
									],
									[
										660644,
										660651
									],
									[
										660674,
										660681
									],
									[
										660823,
										660830
									],
									[
										661053,
										661060
									],
									[
										661213,
										661220
									],
									[
										661457,
										661464
									],
									[
										661683,
										661690
									],
									[
										661712,
										661719
									],
									[
										661742,
										661749
									],
									[
										661908,
										661915
									],
									[
										662219,
										662226
									],
									[
										662389,
										662396
									],
									[
										662418,
										662425
									],
									[
										662448,
										662455
									],
									[
										662595,
										662602
									],
									[
										662763,
										662770
									],
									[
										662792,
										662799
									],
									[
										662822,
										662829
									],
									[
										663030,
										663037
									],
									[
										663059,
										663066
									],
									[
										663089,
										663096
									],
									[
										663240,
										663247
									],
									[
										663396,
										663403
									],
									[
										663581,
										663588
									],
									[
										663610,
										663617
									],
									[
										663640,
										663647
									],
									[
										663787,
										663794
									],
									[
										663906,
										663913
									],
									[
										664164,
										664171
									],
									[
										664200,
										664207
									],
									[
										664236,
										664243
									],
									[
										664278,
										664285
									],
									[
										664320,
										664327
									],
									[
										664464,
										664471
									],
									[
										664560,
										664567
									],
									[
										664593,
										664600
									],
									[
										664621,
										664628
									],
									[
										664655,
										664662
									],
									[
										664923,
										664930
									],
									[
										664931,
										664938
									],
									[
										664960,
										664967
									],
									[
										665008,
										665015
									],
									[
										665048,
										665055
									],
									[
										665096,
										665103
									],
									[
										665130,
										665137
									],
									[
										665221,
										665228
									],
									[
										665269,
										665276
									],
									[
										665310,
										665317
									],
									[
										665388,
										665395
									],
									[
										665583,
										665590
									],
									[
										665595,
										665602
									],
									[
										665994,
										666001
									],
									[
										666078,
										666085
									],
									[
										666183,
										666190
									],
									[
										666195,
										666202
									],
									[
										666428,
										666435
									],
									[
										666436,
										666443
									],
									[
										666465,
										666472
									],
									[
										666495,
										666502
									],
									[
										666535,
										666542
									],
									[
										666566,
										666573
									],
									[
										666600,
										666607
									],
									[
										666658,
										666665
									],
									[
										666706,
										666713
									],
									[
										666747,
										666754
									],
									[
										666827,
										666834
									],
									[
										667086,
										667093
									],
									[
										667098,
										667105
									],
									[
										667311,
										667318
									],
									[
										667324,
										667331
									],
									[
										667361,
										667368
									],
									[
										667411,
										667418
									],
									[
										667440,
										667447
									],
									[
										667517,
										667524
									],
									[
										667587,
										667594
									],
									[
										667668,
										667675
									],
									[
										667746,
										667753
									],
									[
										667824,
										667831
									],
									[
										667876,
										667883
									],
									[
										667964,
										667971
									],
									[
										668028,
										668035
									],
									[
										668100,
										668107
									],
									[
										668213,
										668220
									],
									[
										668453,
										668460
									],
									[
										668465,
										668472
									],
									[
										668501,
										668508
									],
									[
										668551,
										668558
									],
									[
										668579,
										668586
									],
									[
										668655,
										668662
									],
									[
										668728,
										668735
									],
									[
										668808,
										668815
									],
									[
										668892,
										668899
									],
									[
										668969,
										668976
									],
									[
										669046,
										669053
									],
									[
										669097,
										669104
									],
									[
										669184,
										669191
									],
									[
										669247,
										669254
									],
									[
										669319,
										669326
									],
									[
										669442,
										669449
									],
									[
										669714,
										669721
									],
									[
										669736,
										669743
									],
									[
										670087,
										670094
									],
									[
										670109,
										670116
									],
									[
										670140,
										670147
									],
									[
										670571,
										670578
									],
									[
										670593,
										670600
									],
									[
										670879,
										670886
									],
									[
										670898,
										670905
									],
									[
										671240,
										671247
									],
									[
										671288,
										671295
									],
									[
										671330,
										671337
									],
									[
										671378,
										671385
									],
									[
										671432,
										671439
									],
									[
										671474,
										671481
									],
									[
										671521,
										671528
									],
									[
										671570,
										671577
									],
									[
										671618,
										671625
									],
									[
										671664,
										671671
									],
									[
										671717,
										671724
									],
									[
										671766,
										671773
									],
									[
										671804,
										671811
									],
									[
										672079,
										672086
									],
									[
										672304,
										672311
									],
									[
										672359,
										672366
									],
									[
										672413,
										672420
									],
									[
										672479,
										672486
									],
									[
										672545,
										672552
									],
									[
										672594,
										672601
									],
									[
										672659,
										672666
									],
									[
										672721,
										672728
									],
									[
										672780,
										672787
									],
									[
										672838,
										672845
									],
									[
										672905,
										672912
									],
									[
										672961,
										672968
									],
									[
										673010,
										673017
									],
									[
										673334,
										673341
									],
									[
										673757,
										673764
									],
									[
										673777,
										673784
									],
									[
										674035,
										674042
									],
									[
										674060,
										674067
									],
									[
										674215,
										674222
									],
									[
										674236,
										674243
									],
									[
										674291,
										674298
									],
									[
										674559,
										674566
									],
									[
										674616,
										674623
									],
									[
										674691,
										674698
									],
									[
										674725,
										674732
									],
									[
										674952,
										674959
									],
									[
										675009,
										675016
									],
									[
										675084,
										675091
									],
									[
										675117,
										675124
									],
									[
										675364,
										675371
									],
									[
										675398,
										675405
									],
									[
										675445,
										675452
									],
									[
										675789,
										675796
									],
									[
										675922,
										675929
									],
									[
										676200,
										676207
									],
									[
										676242,
										676249
									],
									[
										676531,
										676538
									],
									[
										676568,
										676575
									],
									[
										676840,
										676847
									],
									[
										676874,
										676881
									],
									[
										677142,
										677149
									],
									[
										677176,
										677183
									],
									[
										677494,
										677501
									],
									[
										677545,
										677552
									],
									[
										677857,
										677864
									],
									[
										677895,
										677902
									],
									[
										678185,
										678192
									],
									[
										678225,
										678232
									],
									[
										678483,
										678490
									],
									[
										678616,
										678623
									],
									[
										678752,
										678759
									],
									[
										678912,
										678919
									],
									[
										678982,
										678989
									],
									[
										679191,
										679198
									],
									[
										679267,
										679274
									],
									[
										679398,
										679405
									],
									[
										679607,
										679614
									],
									[
										679723,
										679730
									],
									[
										680007,
										680014
									],
									[
										680229,
										680236
									],
									[
										680271,
										680278
									],
									[
										680517,
										680524
									],
									[
										680558,
										680565
									],
									[
										680615,
										680622
									],
									[
										680923,
										680930
									],
									[
										681140,
										681147
									],
									[
										681177,
										681184
									],
									[
										681398,
										681405
									],
									[
										681434,
										681441
									],
									[
										681486,
										681493
									],
									[
										681777,
										681784
									],
									[
										681979,
										681986
									],
									[
										682013,
										682020
									],
									[
										682219,
										682226
									],
									[
										682252,
										682259
									],
									[
										682301,
										682308
									],
									[
										682558,
										682565
									],
									[
										682740,
										682747
									],
									[
										682774,
										682781
									],
									[
										682980,
										682987
									],
									[
										683013,
										683020
									],
									[
										683062,
										683069
									],
									[
										683369,
										683376
									],
									[
										683636,
										683643
									],
									[
										683687,
										683694
									],
									[
										683978,
										683985
									],
									[
										684028,
										684035
									],
									[
										684094,
										684101
									],
									[
										684395,
										684402
									],
									[
										684597,
										684604
									],
									[
										684635,
										684642
									],
									[
										684861,
										684868
									],
									[
										684898,
										684905
									],
									[
										684951,
										684958
									],
									[
										685230,
										685237
									],
									[
										685442,
										685449
									],
									[
										685482,
										685489
									],
									[
										685718,
										685725
									],
									[
										685757,
										685764
									],
									[
										685812,
										685819
									],
									[
										686074,
										686081
									],
									[
										686207,
										686214
									],
									[
										686343,
										686350
									],
									[
										686503,
										686510
									],
									[
										686573,
										686580
									],
									[
										686782,
										686789
									],
									[
										686858,
										686865
									],
									[
										686989,
										686996
									],
									[
										687198,
										687205
									],
									[
										687314,
										687321
									],
									[
										687598,
										687605
									],
									[
										687820,
										687827
									],
									[
										687862,
										687869
									],
									[
										688108,
										688115
									],
									[
										688149,
										688156
									],
									[
										688206,
										688213
									],
									[
										688519,
										688526
									],
									[
										688736,
										688743
									],
									[
										688773,
										688780
									],
									[
										688994,
										689001
									],
									[
										689030,
										689037
									],
									[
										689082,
										689089
									],
									[
										689378,
										689385
									],
									[
										689580,
										689587
									],
									[
										689614,
										689621
									],
									[
										689820,
										689827
									],
									[
										689853,
										689860
									],
									[
										689902,
										689909
									],
									[
										690164,
										690171
									],
									[
										690346,
										690353
									],
									[
										690380,
										690387
									],
									[
										690586,
										690593
									],
									[
										690619,
										690626
									],
									[
										690668,
										690675
									],
									[
										690980,
										690987
									],
									[
										691247,
										691254
									],
									[
										691298,
										691305
									],
									[
										691589,
										691596
									],
									[
										691639,
										691646
									],
									[
										691705,
										691712
									],
									[
										692011,
										692018
									],
									[
										692213,
										692220
									],
									[
										692251,
										692258
									],
									[
										692477,
										692484
									],
									[
										692514,
										692521
									],
									[
										692567,
										692574
									],
									[
										692851,
										692858
									],
									[
										693063,
										693070
									],
									[
										693103,
										693110
									],
									[
										693339,
										693346
									],
									[
										693378,
										693385
									],
									[
										693433,
										693440
									],
									[
										693697,
										693704
									],
									[
										693733,
										693740
									],
									[
										693849,
										693856
									],
									[
										693884,
										693891
									],
									[
										694017,
										694024
									],
									[
										694052,
										694059
									],
									[
										694188,
										694195
									],
									[
										694370,
										694377
									],
									[
										694472,
										694479
									],
									[
										694517,
										694524
									],
									[
										694709,
										694716
									],
									[
										694817,
										694824
									],
									[
										694852,
										694859
									],
									[
										694971,
										694978
									],
									[
										695170,
										695177
									],
									[
										695308,
										695315
									],
									[
										695600,
										695607
									],
									[
										695818,
										695825
									],
									[
										695860,
										695867
									],
									[
										696106,
										696113
									],
									[
										696147,
										696154
									],
									[
										696204,
										696211
									],
									[
										696522,
										696529
									],
									[
										696735,
										696742
									],
									[
										696772,
										696779
									],
									[
										696993,
										697000
									],
									[
										697029,
										697036
									],
									[
										697081,
										697088
									],
									[
										697390,
										697397
									],
									[
										697477,
										697484
									],
									[
										697942,
										697949
									],
									[
										698027,
										698034
									],
									[
										698127,
										698134
									],
									[
										698573,
										698580
									],
									[
										698771,
										698778
									],
									[
										698805,
										698812
									],
									[
										699011,
										699018
									],
									[
										699044,
										699051
									],
									[
										699093,
										699100
									],
									[
										699387,
										699394
									],
									[
										699471,
										699478
									],
									[
										699921,
										699928
									],
									[
										700003,
										700010
									],
									[
										700100,
										700107
									],
									[
										700512,
										700519
									],
									[
										700690,
										700697
									],
									[
										700724,
										700731
									],
									[
										700930,
										700937
									],
									[
										700963,
										700970
									],
									[
										701012,
										701019
									],
									[
										701318,
										701325
									],
									[
										701406,
										701413
									],
									[
										701876,
										701883
									],
									[
										701962,
										701969
									],
									[
										702063,
										702070
									],
									[
										702533,
										702540
									],
									[
										702796,
										702803
									],
									[
										702847,
										702854
									],
									[
										703138,
										703145
									],
									[
										703188,
										703195
									],
									[
										703254,
										703261
									],
									[
										703565,
										703572
									],
									[
										703763,
										703770
									],
									[
										703801,
										703808
									],
									[
										704027,
										704034
									],
									[
										704064,
										704071
									],
									[
										704117,
										704124
									],
									[
										704406,
										704413
									],
									[
										704614,
										704621
									],
									[
										704654,
										704661
									],
									[
										704890,
										704897
									],
									[
										704929,
										704936
									],
									[
										704984,
										704991
									],
									[
										705258,
										705265
									],
									[
										705436,
										705443
									],
									[
										705470,
										705477
									],
									[
										705676,
										705683
									],
									[
										705709,
										705716
									],
									[
										705758,
										705765
									],
									[
										706190,
										706197
									],
									[
										706221,
										706228
									],
									[
										706805,
										706812
									],
									[
										706827,
										706834
									],
									[
										707024,
										707031
									],
									[
										707045,
										707052
									],
									[
										708382,
										708389
									],
									[
										708406,
										708413
									],
									[
										708443,
										708450
									],
									[
										708562,
										708569
									],
									[
										708592,
										708599
									],
									[
										708639,
										708646
									],
									[
										708811,
										708818
									],
									[
										708837,
										708844
									],
									[
										708874,
										708881
									],
									[
										709597,
										709604
									],
									[
										709632,
										709639
									],
									[
										710089,
										710096
									],
									[
										710607,
										710614
									],
									[
										710908,
										710915
									],
									[
										711162,
										711169
									],
									[
										711547,
										711554
									],
									[
										711608,
										711615
									],
									[
										711859,
										711866
									],
									[
										712123,
										712130
									],
									[
										712368,
										712375
									],
									[
										712847,
										712854
									],
									[
										713239,
										713246
									],
									[
										713720,
										713727
									],
									[
										714033,
										714040
									],
									[
										714385,
										714392
									],
									[
										714704,
										714711
									],
									[
										715145,
										715152
									],
									[
										715229,
										715236
									],
									[
										715385,
										715392
									],
									[
										715483,
										715490
									],
									[
										715524,
										715531
									],
									[
										715693,
										715700
									],
									[
										716171,
										716178
									],
									[
										716232,
										716239
									],
									[
										716459,
										716466
									],
									[
										716579,
										716586
									],
									[
										716809,
										716816
									],
									[
										716870,
										716877
									],
									[
										717117,
										717124
									],
									[
										717165,
										717172
									],
									[
										717408,
										717415
									],
									[
										717628,
										717635
									],
									[
										717827,
										717834
									],
									[
										717923,
										717930
									],
									[
										718002,
										718009
									],
									[
										718296,
										718303
									],
									[
										718512,
										718519
									],
									[
										718775,
										718782
									],
									[
										719050,
										719057
									],
									[
										719301,
										719308
									],
									[
										719584,
										719591
									],
									[
										719633,
										719640
									],
									[
										719668,
										719675
									],
									[
										719716,
										719723
									],
									[
										719780,
										719787
									],
									[
										719985,
										719992
									],
									[
										720016,
										720023
									],
									[
										720073,
										720080
									],
									[
										720360,
										720367
									],
									[
										720408,
										720415
									],
									[
										720792,
										720799
									],
									[
										721194,
										721201
									],
									[
										721604,
										721611
									],
									[
										721973,
										721980
									],
									[
										722207,
										722214
									],
									[
										722403,
										722410
									],
									[
										722441,
										722448
									],
									[
										722722,
										722729
									],
									[
										722957,
										722964
									],
									[
										723192,
										723199
									],
									[
										723458,
										723465
									],
									[
										723615,
										723622
									],
									[
										723815,
										723822
									],
									[
										724071,
										724078
									],
									[
										724086,
										724093
									],
									[
										724435,
										724442
									],
									[
										724548,
										724555
									],
									[
										724596,
										724603
									],
									[
										724643,
										724650
									],
									[
										724778,
										724785
									],
									[
										724797,
										724804
									],
									[
										724955,
										724962
									],
									[
										725088,
										725095
									],
									[
										725116,
										725123
									],
									[
										725480,
										725487
									],
									[
										725526,
										725533
									],
									[
										725536,
										725543
									],
									[
										725612,
										725619
									],
									[
										725663,
										725670
									],
									[
										726009,
										726016
									],
									[
										726249,
										726256
									],
									[
										726433,
										726440
									],
									[
										726757,
										726764
									],
									[
										726983,
										726990
									],
									[
										727447,
										727454
									],
									[
										727724,
										727731
									],
									[
										727820,
										727827
									],
									[
										728194,
										728201
									],
									[
										728507,
										728514
									],
									[
										728549,
										728556
									],
									[
										728850,
										728857
									],
									[
										728984,
										728991
									],
									[
										729026,
										729033
									],
									[
										729252,
										729259
									],
									[
										729507,
										729514
									],
									[
										729732,
										729739
									],
									[
										729862,
										729869
									],
									[
										729944,
										729951
									],
									[
										730129,
										730136
									],
									[
										730221,
										730228
									],
									[
										730266,
										730273
									],
									[
										730347,
										730354
									],
									[
										730378,
										730385
									],
									[
										730540,
										730547
									],
									[
										730573,
										730580
									],
									[
										730808,
										730815
									],
									[
										731078,
										731085
									],
									[
										731312,
										731319
									],
									[
										731568,
										731575
									],
									[
										731647,
										731654
									],
									[
										731910,
										731917
									],
									[
										732197,
										732204
									],
									[
										732361,
										732368
									],
									[
										732569,
										732576
									],
									[
										732855,
										732862
									],
									[
										733188,
										733195
									],
									[
										733405,
										733412
									],
									[
										733576,
										733583
									],
									[
										733879,
										733886
									],
									[
										734186,
										734193
									],
									[
										734488,
										734495
									],
									[
										734566,
										734573
									],
									[
										734867,
										734874
									],
									[
										735130,
										735137
									],
									[
										735193,
										735200
									],
									[
										735256,
										735263
									],
									[
										735618,
										735625
									],
									[
										735983,
										735990
									],
									[
										735998,
										736005
									],
									[
										736381,
										736388
									],
									[
										736415,
										736422
									],
									[
										736643,
										736650
									],
									[
										736900,
										736907
									],
									[
										737274,
										737281
									],
									[
										737293,
										737300
									],
									[
										737662,
										737669
									],
									[
										737745,
										737752
									],
									[
										738221,
										738228
									],
									[
										738266,
										738273
									],
									[
										738417,
										738424
									],
									[
										738462,
										738469
									],
									[
										739009,
										739016
									],
									[
										739310,
										739317
									],
									[
										739543,
										739550
									],
									[
										739920,
										739927
									],
									[
										740197,
										740204
									],
									[
										740483,
										740490
									],
									[
										740534,
										740541
									],
									[
										740608,
										740615
									],
									[
										740705,
										740712
									],
									[
										740772,
										740779
									],
									[
										741016,
										741023
									],
									[
										741086,
										741093
									],
									[
										741134,
										741141
									],
									[
										741215,
										741222
									],
									[
										741339,
										741346
									],
									[
										741553,
										741560
									],
									[
										741776,
										741783
									],
									[
										741870,
										741877
									],
									[
										741989,
										741996
									],
									[
										742195,
										742202
									],
									[
										742470,
										742477
									],
									[
										742587,
										742594
									],
									[
										742645,
										742652
									],
									[
										742808,
										742815
									],
									[
										743125,
										743132
									],
									[
										743378,
										743385
									],
									[
										743634,
										743641
									],
									[
										743838,
										743845
									],
									[
										743999,
										744006
									],
									[
										744084,
										744091
									],
									[
										744286,
										744293
									],
									[
										744540,
										744547
									],
									[
										744597,
										744604
									],
									[
										744701,
										744708
									],
									[
										744832,
										744839
									],
									[
										745069,
										745076
									],
									[
										745125,
										745132
									],
									[
										745220,
										745227
									],
									[
										745350,
										745357
									],
									[
										745598,
										745605
									],
									[
										745659,
										745666
									],
									[
										745762,
										745769
									],
									[
										745897,
										745904
									],
									[
										746283,
										746290
									],
									[
										746584,
										746591
									],
									[
										746848,
										746855
									],
									[
										747051,
										747058
									],
									[
										747265,
										747272
									],
									[
										747677,
										747684
									],
									[
										747910,
										747917
									],
									[
										748220,
										748227
									],
									[
										748438,
										748445
									],
									[
										748633,
										748640
									],
									[
										748836,
										748843
									],
									[
										748989,
										748996
									],
									[
										749190,
										749197
									],
									[
										749379,
										749386
									],
									[
										749534,
										749541
									],
									[
										749728,
										749735
									],
									[
										749900,
										749907
									],
									[
										750045,
										750052
									],
									[
										750257,
										750264
									],
									[
										750446,
										750453
									],
									[
										750607,
										750614
									],
									[
										750826,
										750833
									],
									[
										751029,
										751036
									],
									[
										751061,
										751068
									],
									[
										751207,
										751214
									],
									[
										751289,
										751296
									],
									[
										751436,
										751443
									],
									[
										751635,
										751642
									],
									[
										751825,
										751832
									],
									[
										751968,
										751975
									],
									[
										752107,
										752114
									],
									[
										752282,
										752289
									],
									[
										752540,
										752547
									],
									[
										752673,
										752680
									],
									[
										752710,
										752717
									],
									[
										752777,
										752784
									],
									[
										752838,
										752845
									],
									[
										752957,
										752964
									],
									[
										753085,
										753092
									],
									[
										753159,
										753166
									],
									[
										753322,
										753329
									],
									[
										753396,
										753403
									],
									[
										753531,
										753538
									],
									[
										753615,
										753622
									],
									[
										753785,
										753792
									],
									[
										753869,
										753876
									],
									[
										754021,
										754028
									],
									[
										754183,
										754190
									],
									[
										754255,
										754262
									],
									[
										754437,
										754444
									],
									[
										754544,
										754551
									],
									[
										754693,
										754700
									],
									[
										754756,
										754763
									],
									[
										754836,
										754843
									],
									[
										755002,
										755009
									],
									[
										755165,
										755172
									],
									[
										755341,
										755348
									],
									[
										755490,
										755497
									],
									[
										755575,
										755582
									],
									[
										755765,
										755772
									],
									[
										755845,
										755852
									],
									[
										756045,
										756052
									],
									[
										756238,
										756245
									],
									[
										756310,
										756317
									],
									[
										756420,
										756427
									],
									[
										756510,
										756517
									],
									[
										756565,
										756572
									],
									[
										756643,
										756650
									],
									[
										756804,
										756811
									],
									[
										756891,
										756898
									],
									[
										756981,
										756988
									],
									[
										757063,
										757070
									],
									[
										757258,
										757265
									],
									[
										757336,
										757343
									],
									[
										757454,
										757461
									],
									[
										757597,
										757604
									],
									[
										757664,
										757671
									],
									[
										757769,
										757776
									],
									[
										757924,
										757931
									],
									[
										758148,
										758155
									],
									[
										758291,
										758298
									],
									[
										758387,
										758394
									],
									[
										758779,
										758786
									],
									[
										759025,
										759032
									],
									[
										759265,
										759272
									],
									[
										759441,
										759448
									],
									[
										759552,
										759559
									],
									[
										759573,
										759580
									],
									[
										759677,
										759684
									],
									[
										759696,
										759703
									],
									[
										759777,
										759784
									],
									[
										759823,
										759830
									],
									[
										759878,
										759885
									],
									[
										759930,
										759937
									],
									[
										759999,
										760006
									],
									[
										760076,
										760083
									],
									[
										760211,
										760218
									],
									[
										760230,
										760237
									],
									[
										760308,
										760315
									],
									[
										760354,
										760361
									],
									[
										760409,
										760416
									],
									[
										760461,
										760468
									],
									[
										760530,
										760537
									],
									[
										760607,
										760614
									],
									[
										760734,
										760741
									],
									[
										760753,
										760760
									],
									[
										760843,
										760850
									],
									[
										760889,
										760896
									],
									[
										760944,
										760951
									],
									[
										760996,
										761003
									],
									[
										761065,
										761072
									],
									[
										761142,
										761149
									],
									[
										761277,
										761284
									],
									[
										761296,
										761303
									],
									[
										761374,
										761381
									],
									[
										761423,
										761430
									],
									[
										761552,
										761559
									],
									[
										761571,
										761578
									],
									[
										761663,
										761670
									],
									[
										761784,
										761791
									],
									[
										761803,
										761810
									],
									[
										761888,
										761895
									],
									[
										762136,
										762143
									],
									[
										762187,
										762194
									],
									[
										762206,
										762213
									],
									[
										762300,
										762307
									],
									[
										762411,
										762418
									],
									[
										762430,
										762437
									],
									[
										762515,
										762522
									],
									[
										762786,
										762793
									],
									[
										762838,
										762845
									],
									[
										762857,
										762864
									],
									[
										762942,
										762949
									],
									[
										763206,
										763213
									],
									[
										763257,
										763264
									],
									[
										763276,
										763283
									],
									[
										763370,
										763377
									],
									[
										763516,
										763523
									],
									[
										763682,
										763689
									],
									[
										763701,
										763708
									],
									[
										763795,
										763802
									],
									[
										763889,
										763896
									],
									[
										763908,
										763915
									],
									[
										763992,
										763999
									],
									[
										764197,
										764204
									],
									[
										764283,
										764290
									],
									[
										764302,
										764309
									],
									[
										764384,
										764391
									],
									[
										764589,
										764596
									],
									[
										764675,
										764682
									],
									[
										764694,
										764701
									],
									[
										764775,
										764782
									],
									[
										764980,
										764987
									],
									[
										765066,
										765073
									],
									[
										765085,
										765092
									],
									[
										765164,
										765171
									],
									[
										765369,
										765376
									],
									[
										765455,
										765462
									],
									[
										765474,
										765481
									],
									[
										765559,
										765566
									],
									[
										765700,
										765707
									],
									[
										765797,
										765804
									],
									[
										765816,
										765823
									],
									[
										765899,
										765906
									],
									[
										766040,
										766047
									],
									[
										766137,
										766144
									],
									[
										766156,
										766163
									],
									[
										766247,
										766254
									],
									[
										766474,
										766481
									],
									[
										766635,
										766642
									],
									[
										766654,
										766661
									],
									[
										766748,
										766755
									],
									[
										766973,
										766980
									],
									[
										767121,
										767128
									],
									[
										767140,
										767147
									],
									[
										767236,
										767243
									],
									[
										767463,
										767470
									],
									[
										767611,
										767618
									],
									[
										767644,
										767651
									],
									[
										767751,
										767758
									],
									[
										767872,
										767879
									],
									[
										767891,
										767898
									],
									[
										767981,
										767988
									],
									[
										768129,
										768136
									],
									[
										768293,
										768300
									],
									[
										768312,
										768319
									],
									[
										768405,
										768412
									],
									[
										768503,
										768510
									],
									[
										768522,
										768529
									],
									[
										768618,
										768625
									],
									[
										768850,
										768857
									],
									[
										768994,
										769001
									],
									[
										769013,
										769020
									],
									[
										769107,
										769114
									],
									[
										769355,
										769362
									],
									[
										769470,
										769477
									],
									[
										769521,
										769528
									],
									[
										769540,
										769547
									],
									[
										769622,
										769629
									],
									[
										769851,
										769858
									],
									[
										770191,
										770198
									],
									[
										770219,
										770226
									],
									[
										770310,
										770317
									],
									[
										770473,
										770480
									],
									[
										770647,
										770654
									],
									[
										770666,
										770673
									],
									[
										770759,
										770766
									],
									[
										770877,
										770884
									],
									[
										770896,
										770903
									],
									[
										770990,
										770997
									],
									[
										771231,
										771238
									],
									[
										771458,
										771465
									],
									[
										771477,
										771484
									],
									[
										771570,
										771577
									],
									[
										771732,
										771739
									],
									[
										771898,
										771905
									],
									[
										771917,
										771924
									],
									[
										772008,
										772015
									],
									[
										772126,
										772133
									],
									[
										772145,
										772152
									],
									[
										772237,
										772244
									],
									[
										772478,
										772485
									],
									[
										772705,
										772712
									],
									[
										772724,
										772731
									],
									[
										772815,
										772822
									],
									[
										772977,
										772984
									],
									[
										773143,
										773150
									],
									[
										773162,
										773169
									],
									[
										773255,
										773262
									],
									[
										773373,
										773380
									],
									[
										773392,
										773399
									],
									[
										773486,
										773493
									],
									[
										773727,
										773734
									],
									[
										773954,
										773961
									],
									[
										773973,
										773980
									],
									[
										774066,
										774073
									],
									[
										774228,
										774235
									],
									[
										774394,
										774401
									],
									[
										774427,
										774434
									],
									[
										774534,
										774541
									],
									[
										774652,
										774659
									],
									[
										774685,
										774692
									],
									[
										774793,
										774800
									],
									[
										775034,
										775041
									],
									[
										775261,
										775268
									],
									[
										775294,
										775301
									],
									[
										775401,
										775408
									],
									[
										775563,
										775570
									],
									[
										775729,
										775736
									],
									[
										775747,
										775754
									],
									[
										775818,
										775825
									],
									[
										775890,
										775897
									],
									[
										775979,
										775986
									],
									[
										775997,
										776004
									],
									[
										776074,
										776081
									],
									[
										776138,
										776145
									],
									[
										776224,
										776231
									],
									[
										776242,
										776249
									],
									[
										776319,
										776326
									],
									[
										776437,
										776444
									],
									[
										776455,
										776462
									],
									[
										776543,
										776550
									],
									[
										776640,
										776647
									],
									[
										776658,
										776665
									],
									[
										776741,
										776748
									],
									[
										776979,
										776986
									],
									[
										777030,
										777037
									],
									[
										777048,
										777055
									],
									[
										777139,
										777146
									],
									[
										777384,
										777391
									],
									[
										777435,
										777442
									],
									[
										777453,
										777460
									],
									[
										777537,
										777544
									],
									[
										777766,
										777773
									],
									[
										777817,
										777824
									],
									[
										777835,
										777842
									],
									[
										777919,
										777926
									],
									[
										778156,
										778163
									],
									[
										778207,
										778214
									],
									[
										778225,
										778232
									],
									[
										778309,
										778316
									],
									[
										778546,
										778553
									],
									[
										778597,
										778604
									],
									[
										778615,
										778622
									],
									[
										778699,
										778706
									],
									[
										778935,
										778942
									],
									[
										778986,
										778993
									],
									[
										779004,
										779011
									],
									[
										779100,
										779107
									],
									[
										779197,
										779204
									],
									[
										779215,
										779222
									],
									[
										779295,
										779302
									],
									[
										779520,
										779527
									],
									[
										779606,
										779613
									],
									[
										779624,
										779631
									],
									[
										779702,
										779709
									],
									[
										779927,
										779934
									],
									[
										780013,
										780020
									],
									[
										780031,
										780038
									],
									[
										780115,
										780122
									],
									[
										780251,
										780258
									],
									[
										780348,
										780355
									],
									[
										780366,
										780373
									],
									[
										780448,
										780455
									],
									[
										780584,
										780591
									],
									[
										780681,
										780688
									],
									[
										780699,
										780706
									],
									[
										780788,
										780795
									],
									[
										780954,
										780961
									],
									[
										781118,
										781125
									],
									[
										781136,
										781143
									],
									[
										781228,
										781235
									],
									[
										781345,
										781352
									],
									[
										781363,
										781370
									],
									[
										781444,
										781451
									],
									[
										781664,
										781671
									],
									[
										781908,
										781915
									],
									[
										781926,
										781933
									],
									[
										782015,
										782022
									],
									[
										782150,
										782157
									],
									[
										782399,
										782406
									],
									[
										782417,
										782424
									],
									[
										782509,
										782516
									],
									[
										782727,
										782734
									],
									[
										782883,
										782890
									],
									[
										782901,
										782908
									],
									[
										782991,
										782998
									],
									[
										783226,
										783233
									],
									[
										783382,
										783389
									],
									[
										783399,
										783406
									],
									[
										783473,
										783480
									],
									[
										783490,
										783497
									],
									[
										783515,
										783522
									],
									[
										783594,
										783601
									],
									[
										783611,
										783618
									],
									[
										783693,
										783700
									],
									[
										783710,
										783717
									],
									[
										783911,
										783918
									],
									[
										784002,
										784009
									],
									[
										784053,
										784060
									],
									[
										784070,
										784077
									],
									[
										784155,
										784162
									],
									[
										784172,
										784179
									],
									[
										784197,
										784204
									],
									[
										784383,
										784390
									],
									[
										784522,
										784529
									],
									[
										784539,
										784546
									],
									[
										784622,
										784629
									],
									[
										784639,
										784646
									],
									[
										784664,
										784671
									],
									[
										784850,
										784857
									],
									[
										784989,
										784996
									],
									[
										785012,
										785019
									],
									[
										785076,
										785083
									],
									[
										785093,
										785100
									],
									[
										785118,
										785125
									],
									[
										785153,
										785160
									],
									[
										785162,
										785169
									],
									[
										785272,
										785279
									],
									[
										785295,
										785302
									],
									[
										785310,
										785317
									],
									[
										785379,
										785386
									],
									[
										785609,
										785616
									],
									[
										785633,
										785640
									],
									[
										785700,
										785707
									],
									[
										785751,
										785758
									],
									[
										785774,
										785781
									],
									[
										785847,
										785854
									],
									[
										785864,
										785871
									],
									[
										785889,
										785896
									],
									[
										785924,
										785931
									],
									[
										785933,
										785940
									],
									[
										786093,
										786100
									],
									[
										786179,
										786186
									],
									[
										786202,
										786209
									],
									[
										786279,
										786286
									],
									[
										786296,
										786303
									],
									[
										786321,
										786328
									],
									[
										786356,
										786363
									],
									[
										786365,
										786372
									],
									[
										786505,
										786512
									],
									[
										786602,
										786609
									],
									[
										786625,
										786632
									],
									[
										786699,
										786706
									],
									[
										786716,
										786723
									],
									[
										786741,
										786748
									],
									[
										786776,
										786783
									],
									[
										786785,
										786792
									],
									[
										787002,
										787009
									],
									[
										787246,
										787253
									],
									[
										787330,
										787337
									],
									[
										787414,
										787421
									],
									[
										787447,
										787454
									],
									[
										787641,
										787648
									],
									[
										787740,
										787747
									],
									[
										787772,
										787779
									],
									[
										787965,
										787972
									],
									[
										788061,
										788068
									],
									[
										788258,
										788265
									],
									[
										788487,
										788494
									],
									[
										788647,
										788654
									],
									[
										788845,
										788852
									],
									[
										789074,
										789081
									],
									[
										789235,
										789242
									],
									[
										789431,
										789438
									],
									[
										789660,
										789667
									],
									[
										789819,
										789826
									],
									[
										790025,
										790032
									],
									[
										790198,
										790205
									],
									[
										790374,
										790381
									],
									[
										790578,
										790585
									],
									[
										790751,
										790758
									],
									[
										790925,
										790932
									],
									[
										791130,
										791137
									],
									[
										791350,
										791357
									],
									[
										791489,
										791496
									],
									[
										791692,
										791699
									],
									[
										791912,
										791919
									],
									[
										792051,
										792058
									],
									[
										792248,
										792255
									],
									[
										792361,
										792368
									],
									[
										792558,
										792565
									],
									[
										792671,
										792678
									],
									[
										792864,
										792871
									],
									[
										792975,
										792982
									],
									[
										793168,
										793175
									],
									[
										793279,
										793286
									],
									[
										793475,
										793482
									],
									[
										793584,
										793591
									],
									[
										793781,
										793788
									],
									[
										793890,
										793897
									],
									[
										793914,
										793921
									],
									[
										794076,
										794083
									],
									[
										794185,
										794192
									],
									[
										794210,
										794217
									],
									[
										794373,
										794380
									],
									[
										794490,
										794497
									],
									[
										794693,
										794700
									],
									[
										794810,
										794817
									],
									[
										795013,
										795020
									],
									[
										795130,
										795137
									],
									[
										795148,
										795155
									],
									[
										795238,
										795245
									],
									[
										795398,
										795405
									],
									[
										795416,
										795423
									],
									[
										795507,
										795514
									],
									[
										795667,
										795674
									],
									[
										795686,
										795693
									],
									[
										795764,
										795771
									],
									[
										796031,
										796038
									],
									[
										796055,
										796062
									],
									[
										796236,
										796243
									],
									[
										796384,
										796391
									],
									[
										796527,
										796534
									],
									[
										796659,
										796666
									],
									[
										796905,
										796912
									],
									[
										797088,
										797095
									],
									[
										797330,
										797337
									],
									[
										797482,
										797489
									],
									[
										797553,
										797560
									],
									[
										797586,
										797593
									],
									[
										797861,
										797868
									],
									[
										798147,
										798154
									],
									[
										798393,
										798400
									],
									[
										798515,
										798522
									],
									[
										799600,
										799607
									],
									[
										802535,
										802542
									],
									[
										802554,
										802561
									],
									[
										802581,
										802588
									],
									[
										802599,
										802606
									],
									[
										802869,
										802876
									],
									[
										802890,
										802897
									],
									[
										802916,
										802923
									],
									[
										802943,
										802950
									],
									[
										802985,
										802992
									],
									[
										803008,
										803015
									],
									[
										803160,
										803167
									],
									[
										803209,
										803216
									],
									[
										803239,
										803246
									],
									[
										803348,
										803355
									],
									[
										803396,
										803403
									],
									[
										803426,
										803433
									],
									[
										803538,
										803545
									],
									[
										803589,
										803596
									],
									[
										803705,
										803712
									],
									[
										803762,
										803769
									],
									[
										803802,
										803809
									],
									[
										803916,
										803923
									],
									[
										803969,
										803976
									],
									[
										803999,
										804006
									],
									[
										804156,
										804163
									],
									[
										804282,
										804289
									],
									[
										804553,
										804560
									],
									[
										804766,
										804773
									],
									[
										804803,
										804810
									],
									[
										805024,
										805031
									],
									[
										805060,
										805067
									],
									[
										805112,
										805119
									],
									[
										805342,
										805349
									],
									[
										805430,
										805437
									],
									[
										805471,
										805478
									],
									[
										805502,
										805509
									],
									[
										805588,
										805595
									],
									[
										805748,
										805755
									],
									[
										805776,
										805783
									],
									[
										805792,
										805799
									],
									[
										805823,
										805830
									],
									[
										805857,
										805864
									],
									[
										805879,
										805886
									],
									[
										805909,
										805916
									],
									[
										805942,
										805949
									],
									[
										805963,
										805970
									],
									[
										806048,
										806055
									],
									[
										806123,
										806130
									],
									[
										806144,
										806151
									],
									[
										806166,
										806173
									],
									[
										806193,
										806200
									],
									[
										806214,
										806221
									],
									[
										806240,
										806247
									],
									[
										806494,
										806501
									],
									[
										806522,
										806529
									],
									[
										806538,
										806545
									],
									[
										806569,
										806576
									],
									[
										806603,
										806610
									],
									[
										806625,
										806632
									],
									[
										806655,
										806662
									],
									[
										806688,
										806695
									],
									[
										806709,
										806716
									],
									[
										806868,
										806875
									],
									[
										806889,
										806896
									],
									[
										806911,
										806918
									],
									[
										806938,
										806945
									],
									[
										806959,
										806966
									],
									[
										806985,
										806992
									],
									[
										807206,
										807213
									],
									[
										807248,
										807255
									],
									[
										807280,
										807287
									],
									[
										807321,
										807328
									],
									[
										807348,
										807355
									],
									[
										807383,
										807390
									],
									[
										807790,
										807797
									],
									[
										807820,
										807827
									],
									[
										807875,
										807882
									],
									[
										807904,
										807911
									],
									[
										807954,
										807961
									],
									[
										807978,
										807985
									],
									[
										808340,
										808347
									],
									[
										808521,
										808528
									],
									[
										808642,
										808649
									],
									[
										809257,
										809264
									],
									[
										809280,
										809287
									],
									[
										809467,
										809474
									],
									[
										809502,
										809509
									],
									[
										809632,
										809639
									],
									[
										809733,
										809740
									],
									[
										809766,
										809773
									],
									[
										809907,
										809914
									],
									[
										810066,
										810073
									],
									[
										810279,
										810286
									],
									[
										810492,
										810499
									],
									[
										810704,
										810711
									],
									[
										810916,
										810923
									],
									[
										811096,
										811103
									],
									[
										811280,
										811287
									],
									[
										811462,
										811469
									],
									[
										811578,
										811585
									],
									[
										811655,
										811662
									],
									[
										811754,
										811761
									],
									[
										811902,
										811909
									],
									[
										811991,
										811998
									],
									[
										812167,
										812174
									],
									[
										812393,
										812400
									],
									[
										812578,
										812585
									],
									[
										812613,
										812620
									],
									[
										812730,
										812737
									],
									[
										812892,
										812899
									],
									[
										812950,
										812957
									],
									[
										813033,
										813040
									],
									[
										813208,
										813215
									],
									[
										813323,
										813330
									],
									[
										813582,
										813589
									],
									[
										813599,
										813606
									],
									[
										813780,
										813787
									],
									[
										813809,
										813816
									],
									[
										813933,
										813940
									],
									[
										814028,
										814035
									],
									[
										814055,
										814062
									],
									[
										814190,
										814197
									],
									[
										814343,
										814350
									],
									[
										814550,
										814557
									],
									[
										814763,
										814770
									],
									[
										814873,
										814880
									],
									[
										814944,
										814951
									],
									[
										815037,
										815044
									],
									[
										815179,
										815186
									],
									[
										815262,
										815269
									],
									[
										815432,
										815439
									],
									[
										815652,
										815659
									],
									[
										815831,
										815838
									],
									[
										815860,
										815867
									],
									[
										815971,
										815978
									],
									[
										816127,
										816134
									],
									[
										816179,
										816186
									],
									[
										816238,
										816245
									],
									[
										816418,
										816425
									],
									[
										816538,
										816545
									],
									[
										817367,
										817374
									],
									[
										817389,
										817396
									],
									[
										817575,
										817582
									],
									[
										817609,
										817616
									],
									[
										817738,
										817745
									],
									[
										817838,
										817845
									],
									[
										817870,
										817877
									],
									[
										818010,
										818017
									],
									[
										818168,
										818175
									],
									[
										818380,
										818387
									],
									[
										818592,
										818599
									],
									[
										818788,
										818795
									],
									[
										818984,
										818991
									],
									[
										819195,
										819202
									],
									[
										819406,
										819413
									],
									[
										819580,
										819587
									],
									[
										819828,
										819835
									],
									[
										819943,
										819950
									],
									[
										820019,
										820026
									],
									[
										820117,
										820124
									],
									[
										820264,
										820271
									],
									[
										820352,
										820359
									],
									[
										820527,
										820534
									],
									[
										820752,
										820759
									],
									[
										820936,
										820943
									],
									[
										820970,
										820977
									],
									[
										821086,
										821093
									],
									[
										821247,
										821254
									],
									[
										821304,
										821311
									],
									[
										821453,
										821460
									],
									[
										821642,
										821649
									],
									[
										821690,
										821697
									],
									[
										821706,
										821713
									],
									[
										821737,
										821744
									],
									[
										821791,
										821798
									],
									[
										821813,
										821820
									],
									[
										821843,
										821850
									],
									[
										821896,
										821903
									],
									[
										821917,
										821924
									],
									[
										822157,
										822164
									],
									[
										822376,
										822383
									],
									[
										822398,
										822405
									],
									[
										822459,
										822466
									],
									[
										822487,
										822494
									],
									[
										822547,
										822554
									],
									[
										822574,
										822581
									],
									[
										823036,
										823043
									],
									[
										823084,
										823091
									],
									[
										823100,
										823107
									],
									[
										823131,
										823138
									],
									[
										823185,
										823192
									],
									[
										823207,
										823214
									],
									[
										823237,
										823244
									],
									[
										823290,
										823297
									],
									[
										823311,
										823318
									],
									[
										823771,
										823778
									],
									[
										823793,
										823800
									],
									[
										823854,
										823861
									],
									[
										823882,
										823889
									],
									[
										823942,
										823949
									],
									[
										823969,
										823976
									],
									[
										824229,
										824236
									],
									[
										824418,
										824425
									],
									[
										824466,
										824473
									],
									[
										824482,
										824489
									],
									[
										824513,
										824520
									],
									[
										824567,
										824574
									],
									[
										824589,
										824596
									],
									[
										824619,
										824626
									],
									[
										824672,
										824679
									],
									[
										824693,
										824700
									],
									[
										824787,
										824794
									],
									[
										824972,
										824979
									],
									[
										825017,
										825024
									],
									[
										825035,
										825042
									],
									[
										825059,
										825066
									],
									[
										825110,
										825117
									],
									[
										825134,
										825141
									],
									[
										825157,
										825164
									],
									[
										825207,
										825214
									],
									[
										825230,
										825237
									],
									[
										825399,
										825406
									],
									[
										825618,
										825625
									],
									[
										825640,
										825647
									],
									[
										825701,
										825708
									],
									[
										825729,
										825736
									],
									[
										825789,
										825796
									],
									[
										825816,
										825823
									],
									[
										825911,
										825918
									],
									[
										826096,
										826103
									],
									[
										826145,
										826152
									],
									[
										826162,
										826169
									],
									[
										826193,
										826200
									],
									[
										826248,
										826255
									],
									[
										826271,
										826278
									],
									[
										826301,
										826308
									],
									[
										826355,
										826362
									],
									[
										826377,
										826384
									],
									[
										826766,
										826773
									],
									[
										826814,
										826821
									],
									[
										826830,
										826837
									],
									[
										826861,
										826868
									],
									[
										826915,
										826922
									],
									[
										826937,
										826944
									],
									[
										826967,
										826974
									],
									[
										827020,
										827027
									],
									[
										827041,
										827048
									],
									[
										827321,
										827328
									],
									[
										827366,
										827373
									],
									[
										827384,
										827391
									],
									[
										827408,
										827415
									],
									[
										827459,
										827466
									],
									[
										827483,
										827490
									],
									[
										827506,
										827513
									],
									[
										827556,
										827563
									],
									[
										827579,
										827586
									],
									[
										827968,
										827975
									],
									[
										827990,
										827997
									],
									[
										828051,
										828058
									],
									[
										828079,
										828086
									],
									[
										828139,
										828146
									],
									[
										828166,
										828173
									],
									[
										828457,
										828464
									],
									[
										828506,
										828513
									],
									[
										828523,
										828530
									],
									[
										828554,
										828561
									],
									[
										828609,
										828616
									],
									[
										828632,
										828639
									],
									[
										828662,
										828669
									],
									[
										828716,
										828723
									],
									[
										828738,
										828745
									],
									[
										829163,
										829170
									],
									[
										829604,
										829611
									],
									[
										829625,
										829632
									],
									[
										830061,
										830068
									],
									[
										830088,
										830095
									],
									[
										830144,
										830151
									],
									[
										830707,
										830714
									],
									[
										830734,
										830741
									],
									[
										830786,
										830793
									],
									[
										831324,
										831331
									],
									[
										831380,
										831387
									],
									[
										831430,
										831437
									],
									[
										831647,
										831654
									],
									[
										831834,
										831841
									],
									[
										831984,
										831991
									],
									[
										832213,
										832220
									],
									[
										832260,
										832267
									],
									[
										832451,
										832458
									],
									[
										833010,
										833017
									],
									[
										833038,
										833045
									],
									[
										833054,
										833061
									],
									[
										833085,
										833092
									],
									[
										833119,
										833126
									],
									[
										833141,
										833148
									],
									[
										833171,
										833178
									],
									[
										833204,
										833211
									],
									[
										833225,
										833232
									],
									[
										833285,
										833292
									],
									[
										833445,
										833452
									],
									[
										833473,
										833480
									],
									[
										833489,
										833496
									],
									[
										833520,
										833527
									],
									[
										833554,
										833561
									],
									[
										833576,
										833583
									],
									[
										833606,
										833613
									],
									[
										833639,
										833646
									],
									[
										833660,
										833667
									],
									[
										834149,
										834156
									],
									[
										834188,
										834195
									],
									[
										834225,
										834232
									],
									[
										834302,
										834309
									],
									[
										834347,
										834354
									],
									[
										834384,
										834391
									],
									[
										834460,
										834467
									],
									[
										834504,
										834511
									],
									[
										834541,
										834548
									],
									[
										834607,
										834614
									],
									[
										834957,
										834964
									],
									[
										834996,
										835003
									],
									[
										835033,
										835040
									],
									[
										835110,
										835117
									],
									[
										835155,
										835162
									],
									[
										835192,
										835199
									],
									[
										835268,
										835275
									],
									[
										835312,
										835319
									],
									[
										835349,
										835356
									],
									[
										835684,
										835691
									],
									[
										836162,
										836169
									],
									[
										836534,
										836541
									],
									[
										836616,
										836623
									],
									[
										837290,
										837297
									],
									[
										837372,
										837379
									],
									[
										838045,
										838052
									],
									[
										838126,
										838133
									],
									[
										838799,
										838806
									],
									[
										838880,
										838887
									],
									[
										839738,
										839745
									],
									[
										839775,
										839782
									],
									[
										839970,
										839977
									],
									[
										840033,
										840040
									],
									[
										840089,
										840096
									],
									[
										840190,
										840197
									],
									[
										840235,
										840242
									],
									[
										840253,
										840260
									],
									[
										840372,
										840379
									],
									[
										840441,
										840448
									],
									[
										840503,
										840510
									],
									[
										840610,
										840617
									],
									[
										840661,
										840668
									],
									[
										840685,
										840692
									],
									[
										840803,
										840810
									],
									[
										840871,
										840878
									],
									[
										840932,
										840939
									],
									[
										841038,
										841045
									],
									[
										841088,
										841095
									],
									[
										841111,
										841118
									],
									[
										841230,
										841237
									],
									[
										841326,
										841333
									],
									[
										841672,
										841679
									],
									[
										842107,
										842114
									],
									[
										842741,
										842748
									],
									[
										843087,
										843094
									],
									[
										843522,
										843529
									],
									[
										844156,
										844163
									],
									[
										844283,
										844290
									],
									[
										844639,
										844646
									],
									[
										844766,
										844773
									],
									[
										845122,
										845129
									],
									[
										845143,
										845150
									],
									[
										845225,
										845232
									],
									[
										845883,
										845890
									],
									[
										845904,
										845911
									],
									[
										845986,
										845993
									],
									[
										846644,
										846651
									],
									[
										846664,
										846671
									],
									[
										846745,
										846752
									],
									[
										847403,
										847410
									],
									[
										847423,
										847430
									],
									[
										847504,
										847511
									],
									[
										848162,
										848169
									],
									[
										848241,
										848248
									],
									[
										848878,
										848885
									],
									[
										848898,
										848905
									],
									[
										848968,
										848975
									],
									[
										849089,
										849096
									],
									[
										849178,
										849185
									],
									[
										849249,
										849256
									],
									[
										849348,
										849355
									],
									[
										849624,
										849631
									],
									[
										849699,
										849706
									],
									[
										849830,
										849837
									],
									[
										849991,
										849998
									],
									[
										850076,
										850083
									],
									[
										850227,
										850234
									],
									[
										850388,
										850395
									],
									[
										850662,
										850669
									],
									[
										850965,
										850972
									],
									[
										851198,
										851205
									],
									[
										851501,
										851508
									],
									[
										851734,
										851741
									],
									[
										852037,
										852044
									],
									[
										852052,
										852059
									],
									[
										852115,
										852122
									],
									[
										852171,
										852178
									],
									[
										852272,
										852279
									],
									[
										852317,
										852324
									],
									[
										852335,
										852342
									],
									[
										852438,
										852445
									],
									[
										852459,
										852466
									],
									[
										852528,
										852535
									],
									[
										852590,
										852597
									],
									[
										852697,
										852704
									],
									[
										852748,
										852755
									],
									[
										852772,
										852779
									],
									[
										852875,
										852882
									],
									[
										852895,
										852902
									],
									[
										852963,
										852970
									],
									[
										853024,
										853031
									],
									[
										853130,
										853137
									],
									[
										853180,
										853187
									],
									[
										853203,
										853210
									],
									[
										853306,
										853313
									],
									[
										853581,
										853588
									],
									[
										853945,
										853952
									],
									[
										854312,
										854319
									],
									[
										854732,
										854739
									],
									[
										855099,
										855106
									],
									[
										855517,
										855524
									],
									[
										855875,
										855882
									],
									[
										856276,
										856283
									],
									[
										856613,
										856620
									],
									[
										856950,
										856957
									],
									[
										857287,
										857294
									],
									[
										857674,
										857681
									],
									[
										858030,
										858037
									],
									[
										858443,
										858450
									],
									[
										858524,
										858531
									],
									[
										858765,
										858772
									],
									[
										858856,
										858863
									],
									[
										858997,
										859004
									],
									[
										859087,
										859094
									],
									[
										859290,
										859297
									],
									[
										859576,
										859583
									],
									[
										859860,
										859867
									],
									[
										859957,
										859964
									],
									[
										860192,
										860199
									],
									[
										860474,
										860481
									],
									[
										860813,
										860820
									],
									[
										861112,
										861119
									],
									[
										861260,
										861267
									],
									[
										861356,
										861363
									],
									[
										861565,
										861572
									],
									[
										861876,
										861883
									],
									[
										862327,
										862334
									],
									[
										862774,
										862781
									],
									[
										863233,
										863240
									],
									[
										863791,
										863798
									],
									[
										864427,
										864434
									],
									[
										864813,
										864820
									],
									[
										864909,
										864916
									],
									[
										865273,
										865280
									],
									[
										865811,
										865818
									],
									[
										866179,
										866186
									],
									[
										866723,
										866730
									],
									[
										867019,
										867026
									],
									[
										867709,
										867716
									],
									[
										868415,
										868422
									],
									[
										869120,
										869127
									],
									[
										869853,
										869860
									],
									[
										870535,
										870542
									],
									[
										871217,
										871224
									],
									[
										871746,
										871753
									],
									[
										871834,
										871841
									],
									[
										872430,
										872437
									],
									[
										872577,
										872584
									],
									[
										872672,
										872679
									],
									[
										872983,
										872990
									],
									[
										873238,
										873245
									],
									[
										873499,
										873506
									],
									[
										873760,
										873767
									],
									[
										874002,
										874009
									],
									[
										874361,
										874368
									],
									[
										875077,
										875084
									],
									[
										875871,
										875878
									],
									[
										876692,
										876699
									],
									[
										877404,
										877411
									],
									[
										878227,
										878234
									],
									[
										878991,
										878998
									],
									[
										879758,
										879765
									],
									[
										880155,
										880162
									],
									[
										880521,
										880528
									],
									[
										881096,
										881103
									],
									[
										881539,
										881546
									],
									[
										882044,
										882051
									],
									[
										882579,
										882586
									],
									[
										883172,
										883179
									],
									[
										883620,
										883627
									],
									[
										884064,
										884071
									],
									[
										884522,
										884529
									],
									[
										885077,
										885084
									],
									[
										885710,
										885717
									],
									[
										886285,
										886292
									],
									[
										886355,
										886362
									],
									[
										886995,
										887002
									],
									[
										887072,
										887079
									],
									[
										887652,
										887659
									],
									[
										887728,
										887735
									],
									[
										888314,
										888321
									],
									[
										888820,
										888827
									],
									[
										888903,
										888910
									],
									[
										888980,
										888987
									],
									[
										889575,
										889582
									],
									[
										889640,
										889647
									],
									[
										889674,
										889681
									],
									[
										889703,
										889710
									],
									[
										889809,
										889816
									],
									[
										889880,
										889887
									],
									[
										889920,
										889927
									],
									[
										889955,
										889962
									],
									[
										890060,
										890067
									],
									[
										890130,
										890137
									],
									[
										890169,
										890176
									],
									[
										890203,
										890210
									],
									[
										890429,
										890436
									],
									[
										890934,
										890941
									],
									[
										890999,
										891006
									],
									[
										891033,
										891040
									],
									[
										891062,
										891069
									],
									[
										891168,
										891175
									],
									[
										891239,
										891246
									],
									[
										891279,
										891286
									],
									[
										891314,
										891321
									],
									[
										891419,
										891426
									],
									[
										891489,
										891496
									],
									[
										891528,
										891535
									],
									[
										891562,
										891569
									],
									[
										891872,
										891879
									],
									[
										892106,
										892113
									],
									[
										892156,
										892163
									],
									[
										892418,
										892425
									],
									[
										892887,
										892894
									],
									[
										893346,
										893353
									],
									[
										893542,
										893549
									],
									[
										893635,
										893642
									],
									[
										893657,
										893664
									],
									[
										893674,
										893681
									],
									[
										893696,
										893703
									],
									[
										893786,
										893793
									],
									[
										893837,
										893844
									],
									[
										893930,
										893937
									],
									[
										893952,
										893959
									],
									[
										893969,
										893976
									],
									[
										893991,
										893998
									],
									[
										894008,
										894015
									],
									[
										894092,
										894099
									],
									[
										894301,
										894308
									],
									[
										894366,
										894373
									],
									[
										894383,
										894390
									],
									[
										894405,
										894412
									],
									[
										894498,
										894505
									],
									[
										894556,
										894563
									],
									[
										894573,
										894580
									],
									[
										894595,
										894602
									],
									[
										894612,
										894619
									],
									[
										894699,
										894706
									],
									[
										894850,
										894857
									],
									[
										894902,
										894909
									],
									[
										894990,
										894997
									],
									[
										895061,
										895068
									],
									[
										895072,
										895079
									],
									[
										895158,
										895165
									],
									[
										895447,
										895454
									],
									[
										895577,
										895584
									],
									[
										895865,
										895872
									],
									[
										896072,
										896079
									],
									[
										896126,
										896133
									],
									[
										896159,
										896166
									],
									[
										896264,
										896271
									],
									[
										896375,
										896382
									],
									[
										896439,
										896446
									],
									[
										896864,
										896871
									],
									[
										897048,
										897055
									],
									[
										897166,
										897173
									],
									[
										897232,
										897239
									],
									[
										897285,
										897292
									],
									[
										897316,
										897323
									],
									[
										897806,
										897813
									],
									[
										897862,
										897869
									],
									[
										897897,
										897904
									],
									[
										898068,
										898075
									],
									[
										898122,
										898129
									],
									[
										898155,
										898162
									],
									[
										898309,
										898316
									],
									[
										898365,
										898372
									],
									[
										898400,
										898407
									],
									[
										898635,
										898642
									],
									[
										898744,
										898751
									],
									[
										898766,
										898773
									],
									[
										898783,
										898790
									],
									[
										898805,
										898812
									],
									[
										898928,
										898935
									],
									[
										899009,
										899016
									],
									[
										899118,
										899125
									],
									[
										899140,
										899147
									],
									[
										899157,
										899164
									],
									[
										899179,
										899186
									],
									[
										899196,
										899203
									],
									[
										899313,
										899320
									],
									[
										899597,
										899604
									],
									[
										899678,
										899685
									],
									[
										899695,
										899702
									],
									[
										899717,
										899724
									],
									[
										899843,
										899850
									],
									[
										899932,
										899939
									],
									[
										899949,
										899956
									],
									[
										899971,
										899978
									],
									[
										899988,
										899995
									],
									[
										900108,
										900115
									],
									[
										900334,
										900341
									],
									[
										900402,
										900409
									],
									[
										900523,
										900530
									],
									[
										900640,
										900647
									],
									[
										900651,
										900658
									],
									[
										900770,
										900777
									],
									[
										901134,
										901141
									],
									[
										901294,
										901301
									],
									[
										901661,
										901668
									],
									[
										901946,
										901953
									],
									[
										902017,
										902024
									],
									[
										902066,
										902073
									],
									[
										902201,
										902208
									],
									[
										902327,
										902334
									],
									[
										902407,
										902414
									],
									[
										902908,
										902915
									],
									[
										903107,
										903114
									],
									[
										903240,
										903247
									],
									[
										903336,
										903343
									],
									[
										903389,
										903396
									],
									[
										903420,
										903427
									],
									[
										903986,
										903993
									],
									[
										904059,
										904066
									],
									[
										904110,
										904117
									],
									[
										904342,
										904349
									],
									[
										904413,
										904420
									],
									[
										904462,
										904469
									],
									[
										904677,
										904684
									],
									[
										904750,
										904757
									],
									[
										904801,
										904808
									],
									[
										905068,
										905075
									],
									[
										905132,
										905139
									],
									[
										905620,
										905627
									],
									[
										905730,
										905737
									],
									[
										906012,
										906019
									],
									[
										906045,
										906052
									],
									[
										906424,
										906431
									],
									[
										906827,
										906834
									],
									[
										907108,
										907115
									],
									[
										907254,
										907261
									],
									[
										907455,
										907462
									],
									[
										907570,
										907577
									],
									[
										907825,
										907832
									],
									[
										907958,
										907965
									],
									[
										907986,
										907993
									],
									[
										908030,
										908037
									],
									[
										908061,
										908068
									],
									[
										908104,
										908111
									],
									[
										908134,
										908141
									],
									[
										908399,
										908406
									],
									[
										908454,
										908461
									],
									[
										908509,
										908516
									],
									[
										908565,
										908572
									],
									[
										908621,
										908628
									],
									[
										908676,
										908683
									],
									[
										908731,
										908738
									],
									[
										908787,
										908794
									],
									[
										908844,
										908851
									],
									[
										908902,
										908909
									],
									[
										908957,
										908964
									],
									[
										909013,
										909020
									],
									[
										909069,
										909076
									],
									[
										909124,
										909131
									],
									[
										909180,
										909187
									],
									[
										909237,
										909244
									],
									[
										909295,
										909302
									],
									[
										909350,
										909357
									],
									[
										909406,
										909413
									],
									[
										909641,
										909648
									],
									[
										909663,
										909670
									],
									[
										909680,
										909687
									],
									[
										909702,
										909709
									],
									[
										909738,
										909745
									],
									[
										909760,
										909767
									],
									[
										909777,
										909784
									],
									[
										909799,
										909806
									],
									[
										909816,
										909823
									],
									[
										909846,
										909853
									],
									[
										909863,
										909870
									],
									[
										909885,
										909892
									],
									[
										909921,
										909928
									],
									[
										909938,
										909945
									],
									[
										909960,
										909967
									],
									[
										909977,
										909984
									],
									[
										910011,
										910018
									],
									[
										910045,
										910052
									],
									[
										910056,
										910063
									],
									[
										910270,
										910277
									],
									[
										910407,
										910414
									],
									[
										910637,
										910644
									],
									[
										910824,
										910831
									],
									[
										911029,
										911036
									],
									[
										911403,
										911410
									],
									[
										911630,
										911637
									],
									[
										911862,
										911869
									],
									[
										912191,
										912198
									],
									[
										912314,
										912321
									],
									[
										912623,
										912630
									],
									[
										912805,
										912812
									],
									[
										912989,
										912996
									],
									[
										913235,
										913242
									],
									[
										913472,
										913479
									],
									[
										913844,
										913851
									],
									[
										914129,
										914136
									],
									[
										914357,
										914364
									],
									[
										914698,
										914705
									],
									[
										915025,
										915032
									],
									[
										915112,
										915119
									],
									[
										915168,
										915175
									],
									[
										915260,
										915267
									],
									[
										915278,
										915285
									],
									[
										915291,
										915298
									],
									[
										915325,
										915332
									],
									[
										915378,
										915385
									],
									[
										915392,
										915399
									],
									[
										915467,
										915474
									],
									[
										915481,
										915488
									],
									[
										915528,
										915535
									],
									[
										915740,
										915747
									],
									[
										915749,
										915756
									],
									[
										915835,
										915842
									],
									[
										915897,
										915904
									],
									[
										915934,
										915941
									],
									[
										915986,
										915993
									],
									[
										916005,
										916012
									],
									[
										916031,
										916038
									],
									[
										916061,
										916068
									],
									[
										916101,
										916108
									],
									[
										916139,
										916146
									],
									[
										916195,
										916202
									],
									[
										916254,
										916261
									],
									[
										916312,
										916319
									],
									[
										916515,
										916522
									],
									[
										916524,
										916531
									],
									[
										916584,
										916591
									],
									[
										916603,
										916610
									],
									[
										916633,
										916640
									],
									[
										916663,
										916670
									],
									[
										916700,
										916707
									],
									[
										916867,
										916874
									],
									[
										917096,
										917103
									],
									[
										917226,
										917233
									],
									[
										917323,
										917330
									],
									[
										917406,
										917413
									],
									[
										917444,
										917451
									],
									[
										917489,
										917496
									],
									[
										917552,
										917559
									],
									[
										917602,
										917609
									],
									[
										917638,
										917645
									],
									[
										917653,
										917660
									],
									[
										917667,
										917674
									],
									[
										917681,
										917688
									],
									[
										917729,
										917736
									],
									[
										917805,
										917812
									],
									[
										917969,
										917976
									],
									[
										918033,
										918040
									],
									[
										918127,
										918134
									],
									[
										918208,
										918215
									],
									[
										918329,
										918336
									],
									[
										918362,
										918369
									],
									[
										918372,
										918379
									],
									[
										918385,
										918392
									],
									[
										918546,
										918553
									],
									[
										918793,
										918800
									],
									[
										918847,
										918854
									],
									[
										918974,
										918981
									],
									[
										919322,
										919329
									],
									[
										919330,
										919337
									],
									[
										919355,
										919362
									],
									[
										919402,
										919409
									],
									[
										919422,
										919429
									],
									[
										919464,
										919471
									],
									[
										919506,
										919513
									],
									[
										919572,
										919579
									],
									[
										919638,
										919645
									],
									[
										919672,
										919679
									],
									[
										919748,
										919755
									],
									[
										919802,
										919809
									],
									[
										919870,
										919877
									],
									[
										919926,
										919933
									],
									[
										920162,
										920169
									],
									[
										920204,
										920211
									],
									[
										920492,
										920499
									],
									[
										920561,
										920568
									],
									[
										920802,
										920809
									],
									[
										920887,
										920894
									],
									[
										921079,
										921086
									],
									[
										921629,
										921636
									],
									[
										922118,
										922125
									],
									[
										922530,
										922537
									],
									[
										922569,
										922576
									],
									[
										922623,
										922630
									],
									[
										922711,
										922718
									],
									[
										922804,
										922811
									],
									[
										922897,
										922904
									],
									[
										922979,
										922986
									],
									[
										923074,
										923081
									],
									[
										923176,
										923183
									],
									[
										923298,
										923305
									],
									[
										923381,
										923388
									],
									[
										923491,
										923498
									],
									[
										923576,
										923583
									],
									[
										923803,
										923810
									],
									[
										923841,
										923848
									],
									[
										923912,
										923919
									],
									[
										924199,
										924206
									],
									[
										924254,
										924261
									],
									[
										924308,
										924315
									],
									[
										924374,
										924381
									],
									[
										924440,
										924447
									],
									[
										924489,
										924496
									],
									[
										924554,
										924561
									],
									[
										924616,
										924623
									],
									[
										924675,
										924682
									],
									[
										924733,
										924740
									],
									[
										924800,
										924807
									],
									[
										924856,
										924863
									],
									[
										924905,
										924912
									],
									[
										925421,
										925428
									],
									[
										925446,
										925453
									],
									[
										926043,
										926050
									],
									[
										926063,
										926070
									],
									[
										926475,
										926482
									],
									[
										926777,
										926784
									],
									[
										927063,
										927070
									],
									[
										927502,
										927509
									],
									[
										927535,
										927542
									],
									[
										928352,
										928359
									],
									[
										928746,
										928753
									],
									[
										928774,
										928781
									],
									[
										929536,
										929543
									],
									[
										929692,
										929699
									],
									[
										929730,
										929737
									],
									[
										929772,
										929779
									],
									[
										929993,
										930000
									],
									[
										930085,
										930092
									],
									[
										930325,
										930332
									],
									[
										930384,
										930391
									],
									[
										930438,
										930445
									],
									[
										930504,
										930511
									],
									[
										930570,
										930577
									],
									[
										930623,
										930630
									],
									[
										930688,
										930695
									],
									[
										930750,
										930757
									],
									[
										930809,
										930816
									],
									[
										930867,
										930874
									],
									[
										930934,
										930941
									],
									[
										930994,
										931001
									],
									[
										931043,
										931050
									],
									[
										931290,
										931297
									],
									[
										931318,
										931325
									],
									[
										931553,
										931560
									],
									[
										931576,
										931583
									],
									[
										931843,
										931850
									],
									[
										932010,
										932017
									],
									[
										932541,
										932548
									],
									[
										933210,
										933217
									],
									[
										933564,
										933571
									],
									[
										933737,
										933744
									],
									[
										933775,
										933782
									],
									[
										933829,
										933836
									],
									[
										933924,
										933931
									],
									[
										933989,
										933996
									],
									[
										934436,
										934443
									],
									[
										934568,
										934575
									],
									[
										935237,
										935244
									],
									[
										935369,
										935376
									],
									[
										936034,
										936041
									],
									[
										936166,
										936173
									],
									[
										936750,
										936757
									],
									[
										936780,
										936787
									],
									[
										936840,
										936847
									],
									[
										936875,
										936882
									],
									[
										937294,
										937301
									],
									[
										937327,
										937334
									],
									[
										937390,
										937397
									],
									[
										937428,
										937435
									],
									[
										937825,
										937832
									],
									[
										937862,
										937869
									],
									[
										937924,
										937931
									],
									[
										937965,
										937972
									],
									[
										938387,
										938394
									],
									[
										938556,
										938563
									],
									[
										938607,
										938614
									],
									[
										938641,
										938648
									],
									[
										938663,
										938670
									],
									[
										938697,
										938704
									],
									[
										938777,
										938784
									],
									[
										939039,
										939046
									],
									[
										939068,
										939075
									],
									[
										939097,
										939104
									],
									[
										939139,
										939146
									],
									[
										939174,
										939181
									],
									[
										939208,
										939215
									],
									[
										939265,
										939272
									],
									[
										939392,
										939399
									],
									[
										939429,
										939436
									],
									[
										939466,
										939473
									],
									[
										939509,
										939516
									],
									[
										939551,
										939558
									],
									[
										939751,
										939758
									],
									[
										939786,
										939793
									],
									[
										939854,
										939861
									],
									[
										939909,
										939916
									],
									[
										939967,
										939974
									],
									[
										940022,
										940029
									],
									[
										940419,
										940426
									],
									[
										940441,
										940448
									],
									[
										940496,
										940503
									],
									[
										940518,
										940525
									],
									[
										940572,
										940579
									],
									[
										940594,
										940601
									],
									[
										940638,
										940645
									],
									[
										940660,
										940667
									],
									[
										940709,
										940716
									],
									[
										940731,
										940738
									],
									[
										940974,
										940981
									],
									[
										941025,
										941032
									],
									[
										941076,
										941083
									],
									[
										941133,
										941140
									],
									[
										941307,
										941314
									],
									[
										941470,
										941477
									],
									[
										941625,
										941632
									],
									[
										941817,
										941824
									],
									[
										941932,
										941939
									],
									[
										942023,
										942030
									],
									[
										942119,
										942126
									],
									[
										942206,
										942213
									],
									[
										942422,
										942429
									],
									[
										942533,
										942540
									],
									[
										942642,
										942649
									],
									[
										942720,
										942727
									],
									[
										942816,
										942823
									],
									[
										942896,
										942903
									],
									[
										943020,
										943027
									],
									[
										943074,
										943081
									],
									[
										943210,
										943217
									],
									[
										943319,
										943326
									],
									[
										943412,
										943419
									],
									[
										943632,
										943639
									],
									[
										943686,
										943693
									],
									[
										943799,
										943806
									],
									[
										943853,
										943860
									],
									[
										943950,
										943957
									],
									[
										944027,
										944034
									],
									[
										944302,
										944309
									],
									[
										944643,
										944650
									],
									[
										944774,
										944781
									],
									[
										944899,
										944906
									],
									[
										945024,
										945031
									],
									[
										945518,
										945525
									],
									[
										945637,
										945644
									],
									[
										945750,
										945757
									],
									[
										945863,
										945870
									],
									[
										945976,
										945983
									],
									[
										946094,
										946101
									],
									[
										946232,
										946239
									],
									[
										946582,
										946589
									],
									[
										946768,
										946775
									],
									[
										946885,
										946892
									],
									[
										947001,
										947008
									],
									[
										947254,
										947261
									],
									[
										947538,
										947545
									],
									[
										947652,
										947659
									],
									[
										947765,
										947772
									],
									[
										948015,
										948022
									],
									[
										948257,
										948264
									],
									[
										948282,
										948289
									],
									[
										948339,
										948346
									],
									[
										948371,
										948378
									],
									[
										948441,
										948448
									],
									[
										948473,
										948480
									],
									[
										948761,
										948768
									],
									[
										948798,
										948805
									],
									[
										948871,
										948878
									],
									[
										948908,
										948915
									],
									[
										948981,
										948988
									],
									[
										949018,
										949025
									],
									[
										949097,
										949104
									],
									[
										949134,
										949141
									],
									[
										949456,
										949463
									],
									[
										949489,
										949496
									],
									[
										949834,
										949841
									],
									[
										949859,
										949866
									],
									[
										949935,
										949942
									],
									[
										949959,
										949966
									],
									[
										950032,
										950039
									],
									[
										950065,
										950072
									],
									[
										950327,
										950334
									],
									[
										950369,
										950376
									],
									[
										950430,
										950437
									],
									[
										950472,
										950479
									],
									[
										950527,
										950534
									],
									[
										950569,
										950576
									],
									[
										950624,
										950631
									],
									[
										950666,
										950673
									],
									[
										950721,
										950728
									],
									[
										950763,
										950770
									],
									[
										950818,
										950825
									],
									[
										950860,
										950867
									],
									[
										950920,
										950927
									],
									[
										950962,
										950969
									],
									[
										951221,
										951228
									],
									[
										951269,
										951276
									],
									[
										951333,
										951340
									],
									[
										951381,
										951388
									],
									[
										951442,
										951449
									],
									[
										951490,
										951497
									],
									[
										951554,
										951561
									],
									[
										951602,
										951609
									],
									[
										951663,
										951670
									],
									[
										951714,
										951721
									],
									[
										951779,
										951786
									],
									[
										951826,
										951833
									],
									[
										951876,
										951883
									],
									[
										951923,
										951930
									],
									[
										951973,
										951980
									],
									[
										952020,
										952027
									],
									[
										952076,
										952083
									],
									[
										952123,
										952130
									],
									[
										952180,
										952187
									],
									[
										952227,
										952234
									],
									[
										952598,
										952605
									],
									[
										952768,
										952775
									],
									[
										952915,
										952922
									],
									[
										953060,
										953067
									],
									[
										953219,
										953226
									],
									[
										953473,
										953480
									],
									[
										953751,
										953758
									],
									[
										954074,
										954081
									],
									[
										954312,
										954319
									],
									[
										954607,
										954614
									],
									[
										954641,
										954648
									],
									[
										954729,
										954736
									],
									[
										954747,
										954754
									],
									[
										954882,
										954889
									],
									[
										954916,
										954923
									],
									[
										955282,
										955289
									],
									[
										955682,
										955689
									],
									[
										955965,
										955972
									],
									[
										956012,
										956019
									],
									[
										956303,
										956310
									],
									[
										956379,
										956386
									],
									[
										956703,
										956710
									],
									[
										956792,
										956799
									],
									[
										956878,
										956885
									],
									[
										956984,
										956991
									],
									[
										957069,
										957076
									],
									[
										957368,
										957375
									],
									[
										957630,
										957637
									],
									[
										957673,
										957680
									],
									[
										957716,
										957723
									],
									[
										957772,
										957779
									],
									[
										957821,
										957828
									],
									[
										957869,
										957876
									],
									[
										957923,
										957930
									],
									[
										957972,
										957979
									],
									[
										958018,
										958025
									],
									[
										958080,
										958087
									],
									[
										958145,
										958152
									],
									[
										958197,
										958204
									],
									[
										958255,
										958262
									],
									[
										958306,
										958313
									],
									[
										958357,
										958364
									],
									[
										958414,
										958421
									],
									[
										958470,
										958477
									],
									[
										958733,
										958740
									],
									[
										958813,
										958820
									],
									[
										958888,
										958895
									],
									[
										959322,
										959329
									],
									[
										959602,
										959609
									],
									[
										959681,
										959688
									],
									[
										959763,
										959770
									],
									[
										960107,
										960114
									],
									[
										960501,
										960508
									],
									[
										960600,
										960607
									],
									[
										960784,
										960791
									],
									[
										960985,
										960992
									],
									[
										961377,
										961384
									],
									[
										961544,
										961551
									],
									[
										961855,
										961862
									],
									[
										961899,
										961906
									],
									[
										961913,
										961920
									],
									[
										962122,
										962129
									],
									[
										962172,
										962179
									],
									[
										962186,
										962193
									],
									[
										962403,
										962410
									],
									[
										962453,
										962460
									],
									[
										962467,
										962474
									],
									[
										962691,
										962698
									],
									[
										962735,
										962742
									],
									[
										962987,
										962994
									],
									[
										963044,
										963051
									],
									[
										963058,
										963065
									],
									[
										963281,
										963288
									],
									[
										963330,
										963337
									],
									[
										963344,
										963351
									],
									[
										963562,
										963569
									],
									[
										963620,
										963627
									],
									[
										963899,
										963906
									],
									[
										963943,
										963950
									],
									[
										964275,
										964282
									],
									[
										964333,
										964340
									],
									[
										964733,
										964740
									],
									[
										964777,
										964784
									],
									[
										965021,
										965028
									],
									[
										965079,
										965086
									],
									[
										965367,
										965374
									],
									[
										965412,
										965419
									],
									[
										965696,
										965703
									],
									[
										965740,
										965747
									],
									[
										965983,
										965990
									],
									[
										966033,
										966040
									],
									[
										966284,
										966291
									],
									[
										966333,
										966340
									],
									[
										966582,
										966589
									],
									[
										966632,
										966639
									],
									[
										967030,
										967037
									],
									[
										967484,
										967491
									],
									[
										967682,
										967689
									],
									[
										967716,
										967723
									],
									[
										967922,
										967929
									],
									[
										967955,
										967962
									],
									[
										968004,
										968011
									],
									[
										968298,
										968305
									],
									[
										968382,
										968389
									],
									[
										968832,
										968839
									],
									[
										968914,
										968921
									],
									[
										969011,
										969018
									],
									[
										969373,
										969380
									],
									[
										969506,
										969513
									],
									[
										969685,
										969692
									],
									[
										969806,
										969813
									],
									[
										970200,
										970207
									],
									[
										970289,
										970296
									],
									[
										970584,
										970591
									],
									[
										970768,
										970775
									],
									[
										970964,
										970971
									],
									[
										970992,
										970999
									],
									[
										971020,
										971027
									],
									[
										971061,
										971068
									],
									[
										971095,
										971102
									],
									[
										971129,
										971136
									],
									[
										971167,
										971174
									],
									[
										971355,
										971362
									],
									[
										971480,
										971487
									],
									[
										971541,
										971548
									],
									[
										971590,
										971597
									],
									[
										971640,
										971647
									],
									[
										971766,
										971773
									],
									[
										971856,
										971863
									],
									[
										971908,
										971915
									],
									[
										971978,
										971985
									],
									[
										972112,
										972119
									],
									[
										972286,
										972293
									],
									[
										972482,
										972489
									],
									[
										972607,
										972614
									],
									[
										972668,
										972675
									],
									[
										972717,
										972724
									],
									[
										972767,
										972774
									],
									[
										972893,
										972900
									],
									[
										972983,
										972990
									],
									[
										973035,
										973042
									],
									[
										973105,
										973112
									],
									[
										973239,
										973246
									],
									[
										973413,
										973420
									],
									[
										973609,
										973616
									],
									[
										973734,
										973741
									],
									[
										973795,
										973802
									],
									[
										973844,
										973851
									],
									[
										973894,
										973901
									],
									[
										974020,
										974027
									],
									[
										974110,
										974117
									],
									[
										974162,
										974169
									],
									[
										974232,
										974239
									],
									[
										974353,
										974360
									],
									[
										974516,
										974523
									],
									[
										974746,
										974753
									],
									[
										974774,
										974781
									],
									[
										974802,
										974809
									],
									[
										974843,
										974850
									],
									[
										974877,
										974884
									],
									[
										974910,
										974917
									],
									[
										974949,
										974956
									],
									[
										975086,
										975093
									],
									[
										975257,
										975264
									],
									[
										975285,
										975292
									],
									[
										975313,
										975320
									],
									[
										975354,
										975361
									],
									[
										975388,
										975395
									],
									[
										975422,
										975429
									],
									[
										975460,
										975467
									],
									[
										975592,
										975599
									],
									[
										975730,
										975737
									],
									[
										975905,
										975912
									],
									[
										975935,
										975942
									],
									[
										975994,
										976001
									],
									[
										976022,
										976029
									],
									[
										976063,
										976070
									],
									[
										976097,
										976104
									],
									[
										976150,
										976157
									],
									[
										976188,
										976195
									],
									[
										976402,
										976409
									],
									[
										976566,
										976573
									],
									[
										976950,
										976957
									],
									[
										977044,
										977051
									],
									[
										977138,
										977145
									],
									[
										977232,
										977239
									],
									[
										977326,
										977333
									],
									[
										977420,
										977427
									],
									[
										977711,
										977718
									],
									[
										977984,
										977991
									],
									[
										978189,
										978196
									],
									[
										978261,
										978268
									],
									[
										978301,
										978308
									],
									[
										978496,
										978503
									],
									[
										978660,
										978667
									],
									[
										978869,
										978876
									],
									[
										978974,
										978981
									],
									[
										979046,
										979053
									],
									[
										979247,
										979254
									],
									[
										979569,
										979576
									],
									[
										979865,
										979872
									],
									[
										980057,
										980064
									],
									[
										980254,
										980261
									],
									[
										980459,
										980466
									],
									[
										980531,
										980538
									],
									[
										980571,
										980578
									],
									[
										980766,
										980773
									],
									[
										980930,
										980937
									],
									[
										981139,
										981146
									],
									[
										981244,
										981251
									],
									[
										981316,
										981323
									],
									[
										981519,
										981526
									],
									[
										981793,
										981800
									],
									[
										981839,
										981846
									],
									[
										981885,
										981892
									],
									[
										981944,
										981951
									],
									[
										981996,
										982003
									],
									[
										982048,
										982055
									],
									[
										982104,
										982111
									],
									[
										982380,
										982387
									],
									[
										982426,
										982433
									],
									[
										982472,
										982479
									],
									[
										982531,
										982538
									],
									[
										982583,
										982590
									],
									[
										982635,
										982642
									],
									[
										982691,
										982698
									],
									[
										983179,
										983186
									],
									[
										983273,
										983280
									],
									[
										983367,
										983374
									],
									[
										983461,
										983468
									],
									[
										983555,
										983562
									],
									[
										983649,
										983656
									],
									[
										983940,
										983947
									],
									[
										984213,
										984220
									],
									[
										984424,
										984431
									],
									[
										984496,
										984503
									],
									[
										984536,
										984543
									],
									[
										984731,
										984738
									],
									[
										984895,
										984902
									],
									[
										985116,
										985123
									],
									[
										985227,
										985234
									],
									[
										985299,
										985306
									],
									[
										985500,
										985507
									],
									[
										985699,
										985706
									],
									[
										985910,
										985917
									],
									[
										985982,
										985989
									],
									[
										986022,
										986029
									],
									[
										986217,
										986224
									],
									[
										986381,
										986388
									],
									[
										986602,
										986609
									],
									[
										986713,
										986720
									],
									[
										986785,
										986792
									],
									[
										987283,
										987290
									],
									[
										987767,
										987774
									],
									[
										987861,
										987868
									],
									[
										987955,
										987962
									],
									[
										988049,
										988056
									],
									[
										988143,
										988150
									],
									[
										988237,
										988244
									],
									[
										988528,
										988535
									],
									[
										988801,
										988808
									],
									[
										989012,
										989019
									],
									[
										989084,
										989091
									],
									[
										989124,
										989131
									],
									[
										989319,
										989326
									],
									[
										989483,
										989490
									],
									[
										989704,
										989711
									],
									[
										989815,
										989822
									],
									[
										989887,
										989894
									],
									[
										990088,
										990095
									],
									[
										990295,
										990302
									],
									[
										990506,
										990513
									],
									[
										990578,
										990585
									],
									[
										990618,
										990625
									],
									[
										990813,
										990820
									],
									[
										990977,
										990984
									],
									[
										991198,
										991205
									],
									[
										991309,
										991316
									],
									[
										991381,
										991388
									],
									[
										991879,
										991886
									],
									[
										992419,
										992426
									],
									[
										992513,
										992520
									],
									[
										992607,
										992614
									],
									[
										992701,
										992708
									],
									[
										992795,
										992802
									],
									[
										992889,
										992896
									],
									[
										993180,
										993187
									],
									[
										993453,
										993460
									],
									[
										993658,
										993665
									],
									[
										993730,
										993737
									],
									[
										993770,
										993777
									],
									[
										993965,
										993972
									],
									[
										994129,
										994136
									],
									[
										994338,
										994345
									],
									[
										994443,
										994450
									],
									[
										994515,
										994522
									],
									[
										994716,
										994723
									],
									[
										994915,
										994922
									],
									[
										995120,
										995127
									],
									[
										995192,
										995199
									],
									[
										995232,
										995239
									],
									[
										995427,
										995434
									],
									[
										995591,
										995598
									],
									[
										995800,
										995807
									],
									[
										995905,
										995912
									],
									[
										995977,
										995984
									],
									[
										996523,
										996530
									],
									[
										996896,
										996903
									],
									[
										996942,
										996949
									],
									[
										996988,
										996995
									],
									[
										997047,
										997054
									],
									[
										997099,
										997106
									],
									[
										997150,
										997157
									],
									[
										997207,
										997214
									],
									[
										997427,
										997434
									],
									[
										997473,
										997480
									],
									[
										997519,
										997526
									],
									[
										997578,
										997585
									],
									[
										997630,
										997637
									],
									[
										997681,
										997688
									],
									[
										997738,
										997745
									],
									[
										998045,
										998052
									],
									[
										998243,
										998250
									],
									[
										998517,
										998524
									],
									[
										998563,
										998570
									],
									[
										998609,
										998616
									],
									[
										998668,
										998675
									],
									[
										998720,
										998727
									],
									[
										998772,
										998779
									],
									[
										998828,
										998835
									],
									[
										999100,
										999107
									],
									[
										999305,
										999312
									],
									[
										999507,
										999514
									],
									[
										999553,
										999560
									],
									[
										999599,
										999606
									],
									[
										999658,
										999665
									],
									[
										999710,
										999717
									],
									[
										999762,
										999769
									],
									[
										999818,
										999825
									],
									[
										1000090,
										1000097
									],
									[
										1000476,
										1000483
									],
									[
										1000554,
										1000561
									],
									[
										1000643,
										1000650
									],
									[
										1001037,
										1001044
									],
									[
										1001205,
										1001212
									],
									[
										1001252,
										1001259
									],
									[
										1001312,
										1001319
									],
									[
										1001422,
										1001429
									],
									[
										1001849,
										1001856
									],
									[
										1001957,
										1001964
									],
									[
										1002066,
										1002073
									],
									[
										1002181,
										1002188
									],
									[
										1002520,
										1002527
									],
									[
										1002944,
										1002951
									],
									[
										1002997,
										1003004
									],
									[
										1003051,
										1003058
									],
									[
										1003111,
										1003118
									],
									[
										1003337,
										1003344
									],
									[
										1003392,
										1003399
									],
									[
										1003447,
										1003454
									],
									[
										1003508,
										1003515
									],
									[
										1003754,
										1003761
									],
									[
										1003809,
										1003816
									],
									[
										1003864,
										1003871
									],
									[
										1003925,
										1003932
									],
									[
										1004370,
										1004377
									],
									[
										1004478,
										1004485
									],
									[
										1004587,
										1004594
									],
									[
										1004702,
										1004709
									],
									[
										1005041,
										1005048
									],
									[
										1005455,
										1005462
									],
									[
										1005508,
										1005515
									],
									[
										1005562,
										1005569
									],
									[
										1005622,
										1005629
									],
									[
										1005848,
										1005855
									],
									[
										1005903,
										1005910
									],
									[
										1005958,
										1005965
									],
									[
										1006019,
										1006026
									],
									[
										1006265,
										1006272
									],
									[
										1006320,
										1006327
									],
									[
										1006375,
										1006382
									],
									[
										1006436,
										1006443
									],
									[
										1006881,
										1006888
									],
									[
										1006989,
										1006996
									],
									[
										1007098,
										1007105
									],
									[
										1007213,
										1007220
									],
									[
										1007552,
										1007559
									],
									[
										1007966,
										1007973
									],
									[
										1008019,
										1008026
									],
									[
										1008073,
										1008080
									],
									[
										1008133,
										1008140
									],
									[
										1008359,
										1008366
									],
									[
										1008414,
										1008421
									],
									[
										1008469,
										1008476
									],
									[
										1008530,
										1008537
									],
									[
										1008776,
										1008783
									],
									[
										1008831,
										1008838
									],
									[
										1008886,
										1008893
									],
									[
										1008947,
										1008954
									],
									[
										1009392,
										1009399
									],
									[
										1009500,
										1009507
									],
									[
										1009609,
										1009616
									],
									[
										1009724,
										1009731
									],
									[
										1010063,
										1010070
									],
									[
										1010477,
										1010484
									],
									[
										1010530,
										1010537
									],
									[
										1010584,
										1010591
									],
									[
										1010644,
										1010651
									],
									[
										1010870,
										1010877
									],
									[
										1010925,
										1010932
									],
									[
										1010980,
										1010987
									],
									[
										1011041,
										1011048
									],
									[
										1011287,
										1011294
									],
									[
										1011342,
										1011349
									],
									[
										1011397,
										1011404
									],
									[
										1011458,
										1011465
									],
									[
										1011903,
										1011910
									],
									[
										1012011,
										1012018
									],
									[
										1012120,
										1012127
									],
									[
										1012235,
										1012242
									],
									[
										1012574,
										1012581
									],
									[
										1012988,
										1012995
									],
									[
										1013041,
										1013048
									],
									[
										1013095,
										1013102
									],
									[
										1013155,
										1013162
									],
									[
										1013381,
										1013388
									],
									[
										1013436,
										1013443
									],
									[
										1013491,
										1013498
									],
									[
										1013552,
										1013559
									],
									[
										1013798,
										1013805
									],
									[
										1013853,
										1013860
									],
									[
										1013908,
										1013915
									],
									[
										1013969,
										1013976
									],
									[
										1014419,
										1014426
									],
									[
										1014527,
										1014534
									],
									[
										1014636,
										1014643
									],
									[
										1014751,
										1014758
									],
									[
										1015170,
										1015177
									],
									[
										1015608,
										1015615
									],
									[
										1015661,
										1015668
									],
									[
										1015715,
										1015722
									],
									[
										1015775,
										1015782
									],
									[
										1015994,
										1016001
									],
									[
										1016198,
										1016205
									],
									[
										1016253,
										1016260
									],
									[
										1016308,
										1016315
									],
									[
										1016369,
										1016376
									],
									[
										1016430,
										1016437
									],
									[
										1016666,
										1016673
									],
									[
										1016721,
										1016728
									],
									[
										1016776,
										1016783
									],
									[
										1016837,
										1016844
									],
									[
										1016898,
										1016905
									],
									[
										1017380,
										1017387
									],
									[
										1017488,
										1017495
									],
									[
										1017597,
										1017604
									],
									[
										1017712,
										1017719
									],
									[
										1018131,
										1018138
									],
									[
										1018569,
										1018576
									],
									[
										1018622,
										1018629
									],
									[
										1018676,
										1018683
									],
									[
										1018736,
										1018743
									],
									[
										1018955,
										1018962
									],
									[
										1019148,
										1019155
									],
									[
										1019195,
										1019202
									],
									[
										1019509,
										1019516
									],
									[
										1019556,
										1019563
									],
									[
										1019839,
										1019846
									],
									[
										1019886,
										1019893
									],
									[
										1020173,
										1020180
									],
									[
										1020220,
										1020227
									],
									[
										1020470,
										1020477
									],
									[
										1020517,
										1020524
									],
									[
										1020809,
										1020816
									],
									[
										1020864,
										1020871
									],
									[
										1020919,
										1020926
									],
									[
										1020980,
										1020987
									],
									[
										1021203,
										1021210
									],
									[
										1021429,
										1021436
									],
									[
										1021476,
										1021483
									],
									[
										1021790,
										1021797
									],
									[
										1021837,
										1021844
									],
									[
										1022120,
										1022127
									],
									[
										1022167,
										1022174
									],
									[
										1022454,
										1022461
									],
									[
										1022501,
										1022508
									],
									[
										1022751,
										1022758
									],
									[
										1022798,
										1022805
									],
									[
										1023276,
										1023283
									],
									[
										1023385,
										1023392
									],
									[
										1023494,
										1023501
									],
									[
										1023609,
										1023616
									],
									[
										1023948,
										1023955
									],
									[
										1024362,
										1024369
									],
									[
										1024416,
										1024423
									],
									[
										1024470,
										1024477
									],
									[
										1024530,
										1024537
									],
									[
										1024821,
										1024828
									],
									[
										1024876,
										1024883
									],
									[
										1024931,
										1024938
									],
									[
										1024992,
										1024999
									],
									[
										1025478,
										1025485
									],
									[
										1025587,
										1025594
									],
									[
										1025696,
										1025703
									],
									[
										1025811,
										1025818
									],
									[
										1026150,
										1026157
									],
									[
										1026564,
										1026571
									],
									[
										1026618,
										1026625
									],
									[
										1026672,
										1026679
									],
									[
										1026732,
										1026739
									],
									[
										1027023,
										1027030
									],
									[
										1027078,
										1027085
									],
									[
										1027133,
										1027140
									],
									[
										1027194,
										1027201
									],
									[
										1027680,
										1027687
									],
									[
										1027789,
										1027796
									],
									[
										1027898,
										1027905
									],
									[
										1028013,
										1028020
									],
									[
										1028352,
										1028359
									],
									[
										1028766,
										1028773
									],
									[
										1028820,
										1028827
									],
									[
										1028874,
										1028881
									],
									[
										1028934,
										1028941
									],
									[
										1029225,
										1029232
									],
									[
										1029280,
										1029287
									],
									[
										1029335,
										1029342
									],
									[
										1029396,
										1029403
									],
									[
										1029881,
										1029888
									],
									[
										1029990,
										1029997
									],
									[
										1030099,
										1030106
									],
									[
										1030214,
										1030221
									],
									[
										1030553,
										1030560
									],
									[
										1030967,
										1030974
									],
									[
										1031021,
										1031028
									],
									[
										1031075,
										1031082
									],
									[
										1031135,
										1031142
									],
									[
										1031426,
										1031433
									],
									[
										1031481,
										1031488
									],
									[
										1031536,
										1031543
									],
									[
										1031597,
										1031604
									],
									[
										1032083,
										1032090
									],
									[
										1032192,
										1032199
									],
									[
										1032301,
										1032308
									],
									[
										1032416,
										1032423
									],
									[
										1032755,
										1032762
									],
									[
										1033170,
										1033177
									],
									[
										1033224,
										1033231
									],
									[
										1033278,
										1033285
									],
									[
										1033338,
										1033345
									],
									[
										1033629,
										1033636
									],
									[
										1033684,
										1033691
									],
									[
										1033739,
										1033746
									],
									[
										1033800,
										1033807
									],
									[
										1034287,
										1034294
									],
									[
										1034396,
										1034403
									],
									[
										1034505,
										1034512
									],
									[
										1034620,
										1034627
									],
									[
										1034959,
										1034966
									],
									[
										1035374,
										1035381
									],
									[
										1035428,
										1035435
									],
									[
										1035482,
										1035489
									],
									[
										1035542,
										1035549
									],
									[
										1035833,
										1035840
									],
									[
										1035888,
										1035895
									],
									[
										1035943,
										1035950
									],
									[
										1036004,
										1036011
									],
									[
										1036489,
										1036496
									],
									[
										1036597,
										1036604
									],
									[
										1036706,
										1036713
									],
									[
										1036821,
										1036828
									],
									[
										1037240,
										1037247
									],
									[
										1037678,
										1037685
									],
									[
										1037731,
										1037738
									],
									[
										1037785,
										1037792
									],
									[
										1037845,
										1037852
									],
									[
										1038064,
										1038071
									],
									[
										1038271,
										1038278
									],
									[
										1038318,
										1038325
									],
									[
										1038658,
										1038665
									],
									[
										1038705,
										1038712
									],
									[
										1039021,
										1039028
									],
									[
										1039076,
										1039083
									],
									[
										1039131,
										1039138
									],
									[
										1039192,
										1039199
									],
									[
										1039415,
										1039422
									],
									[
										1039655,
										1039662
									],
									[
										1039702,
										1039709
									],
									[
										1040042,
										1040049
									],
									[
										1040089,
										1040096
									],
									[
										1040439,
										1040446
									],
									[
										1040493,
										1040500
									],
									[
										1040547,
										1040554
									],
									[
										1040607,
										1040614
									],
									[
										1040667,
										1040674
									],
									[
										1040912,
										1040919
									],
									[
										1040966,
										1040973
									],
									[
										1041020,
										1041027
									],
									[
										1041080,
										1041087
									],
									[
										1041140,
										1041147
									],
									[
										1041475,
										1041482
									],
									[
										1041676,
										1041683
									],
									[
										1041965,
										1041972
									],
									[
										1042278,
										1042285
									],
									[
										1042479,
										1042486
									],
									[
										1042773,
										1042780
									],
									[
										1043077,
										1043084
									],
									[
										1043278,
										1043285
									],
									[
										1043564,
										1043571
									],
									[
										1043869,
										1043876
									],
									[
										1044070,
										1044077
									],
									[
										1044356,
										1044363
									],
									[
										1044667,
										1044674
									],
									[
										1044868,
										1044875
									],
									[
										1045154,
										1045161
									],
									[
										1045465,
										1045472
									],
									[
										1045666,
										1045673
									],
									[
										1045956,
										1045963
									],
									[
										1046259,
										1046266
									],
									[
										1046460,
										1046467
									],
									[
										1046749,
										1046756
									],
									[
										1047062,
										1047069
									],
									[
										1047263,
										1047270
									],
									[
										1047546,
										1047553
									],
									[
										1047856,
										1047863
									],
									[
										1048057,
										1048064
									],
									[
										1048340,
										1048347
									],
									[
										1048646,
										1048653
									],
									[
										1048847,
										1048854
									],
									[
										1049133,
										1049140
									],
									[
										1049391,
										1049398
									],
									[
										1049550,
										1049557
									],
									[
										1049596,
										1049603
									],
									[
										1049658,
										1049665
									],
									[
										1049707,
										1049714
									],
									[
										1049772,
										1049779
									],
									[
										1049824,
										1049831
									],
									[
										1050023,
										1050030
									],
									[
										1050069,
										1050076
									],
									[
										1050131,
										1050138
									],
									[
										1050180,
										1050187
									],
									[
										1050245,
										1050252
									],
									[
										1050297,
										1050304
									],
									[
										1050563,
										1050570
									],
									[
										1050621,
										1050628
									],
									[
										1050681,
										1050688
									],
									[
										1050739,
										1050746
									],
									[
										1050799,
										1050806
									],
									[
										1050857,
										1050864
									],
									[
										1051207,
										1051214
									],
									[
										1051497,
										1051504
									],
									[
										1051553,
										1051560
									],
									[
										1051934,
										1051941
									],
									[
										1051992,
										1051999
									],
									[
										1052276,
										1052283
									],
									[
										1052334,
										1052341
									],
									[
										1052690,
										1052697
									],
									[
										1053057,
										1053064
									],
									[
										1053533,
										1053540
									],
									[
										1053864,
										1053871
									],
									[
										1054097,
										1054104
									],
									[
										1054207,
										1054214
									],
									[
										1054480,
										1054487
									],
									[
										1054886,
										1054893
									],
									[
										1054944,
										1054951
									],
									[
										1055005,
										1055012
									],
									[
										1055459,
										1055466
									],
									[
										1055608,
										1055615
									],
									[
										1055688,
										1055695
									],
									[
										1056096,
										1056103
									],
									[
										1056218,
										1056225
									],
									[
										1056342,
										1056349
									],
									[
										1056402,
										1056409
									],
									[
										1056420,
										1056427
									],
									[
										1056886,
										1056893
									],
									[
										1056944,
										1056951
									],
									[
										1057236,
										1057243
									],
									[
										1057294,
										1057301
									],
									[
										1057621,
										1057628
									],
									[
										1057679,
										1057686
									],
									[
										1057977,
										1057984
									],
									[
										1058035,
										1058042
									],
									[
										1058373,
										1058380
									],
									[
										1058431,
										1058438
									],
									[
										1058832,
										1058839
									],
									[
										1058890,
										1058897
									],
									[
										1059191,
										1059198
									],
									[
										1059249,
										1059256
									],
									[
										1059629,
										1059636
									],
									[
										1059687,
										1059694
									],
									[
										1059969,
										1059976
									],
									[
										1060027,
										1060034
									],
									[
										1060422,
										1060429
									],
									[
										1060480,
										1060487
									],
									[
										1060772,
										1060779
									],
									[
										1060830,
										1060837
									],
									[
										1061155,
										1061162
									],
									[
										1061213,
										1061220
									],
									[
										1061510,
										1061517
									],
									[
										1061568,
										1061575
									],
									[
										1062011,
										1062018
									],
									[
										1062069,
										1062076
									],
									[
										1062370,
										1062377
									],
									[
										1062428,
										1062435
									],
									[
										1062791,
										1062798
									],
									[
										1062849,
										1062856
									],
									[
										1063230,
										1063237
									],
									[
										1063288,
										1063295
									],
									[
										1063572,
										1063579
									],
									[
										1063630,
										1063637
									],
									[
										1063988,
										1063995
									],
									[
										1064046,
										1064053
									],
									[
										1064339,
										1064346
									],
									[
										1064397,
										1064404
									],
									[
										1064783,
										1064790
									],
									[
										1064843,
										1064850
									],
									[
										1064900,
										1064907
									],
									[
										1064957,
										1064964
									],
									[
										1065014,
										1065021
									],
									[
										1065317,
										1065324
									],
									[
										1065607,
										1065614
									],
									[
										1065664,
										1065671
									],
									[
										1065721,
										1065728
									],
									[
										1065777,
										1065784
									],
									[
										1066199,
										1066206
									],
									[
										1066285,
										1066292
									],
									[
										1066374,
										1066381
									],
									[
										1066454,
										1066461
									],
									[
										1066762,
										1066769
									],
									[
										1066997,
										1067004
									],
									[
										1067031,
										1067038
									],
									[
										1067065,
										1067072
									],
									[
										1067105,
										1067112
									],
									[
										1067419,
										1067426
									],
									[
										1067505,
										1067512
									],
									[
										1067585,
										1067592
									],
									[
										1067665,
										1067672
									],
									[
										1067973,
										1067980
									],
									[
										1068228,
										1068235
									],
									[
										1068262,
										1068269
									],
									[
										1068296,
										1068303
									],
									[
										1068336,
										1068343
									],
									[
										1068650,
										1068657
									],
									[
										1068736,
										1068743
									],
									[
										1068816,
										1068823
									],
									[
										1068896,
										1068903
									],
									[
										1069204,
										1069211
									],
									[
										1069457,
										1069464
									],
									[
										1069491,
										1069498
									],
									[
										1069525,
										1069532
									],
									[
										1069565,
										1069572
									],
									[
										1069879,
										1069886
									],
									[
										1069965,
										1069972
									],
									[
										1070045,
										1070052
									],
									[
										1070125,
										1070132
									],
									[
										1070433,
										1070440
									],
									[
										1070686,
										1070693
									],
									[
										1070720,
										1070727
									],
									[
										1070754,
										1070761
									],
									[
										1070794,
										1070801
									],
									[
										1071108,
										1071115
									],
									[
										1071194,
										1071201
									],
									[
										1071274,
										1071281
									],
									[
										1071354,
										1071361
									],
									[
										1071662,
										1071669
									],
									[
										1071912,
										1071919
									],
									[
										1071946,
										1071953
									],
									[
										1071980,
										1071987
									],
									[
										1072020,
										1072027
									],
									[
										1072339,
										1072346
									],
									[
										1072425,
										1072432
									],
									[
										1072505,
										1072512
									],
									[
										1072585,
										1072592
									],
									[
										1072905,
										1072912
									],
									[
										1073170,
										1073177
									],
									[
										1073206,
										1073213
									],
									[
										1073242,
										1073249
									],
									[
										1073284,
										1073291
									],
									[
										1073326,
										1073333
									],
									[
										1073622,
										1073629
									],
									[
										1073708,
										1073715
									],
									[
										1073788,
										1073795
									],
									[
										1073868,
										1073875
									],
									[
										1074188,
										1074195
									],
									[
										1074382,
										1074389
									],
									[
										1074411,
										1074418
									],
									[
										1074441,
										1074448
									],
									[
										1074590,
										1074597
									],
									[
										1074820,
										1074827
									],
									[
										1074980,
										1074987
									],
									[
										1075224,
										1075231
									],
									[
										1075348,
										1075355
									],
									[
										1075459,
										1075466
									],
									[
										1075493,
										1075500
									],
									[
										1075527,
										1075534
									],
									[
										1075567,
										1075574
									],
									[
										1075756,
										1075763
									],
									[
										1076076,
										1076083
									],
									[
										1076162,
										1076169
									],
									[
										1076242,
										1076249
									],
									[
										1076322,
										1076329
									],
									[
										1076630,
										1076637
									],
									[
										1076845,
										1076852
									],
									[
										1076879,
										1076886
									],
									[
										1076913,
										1076920
									],
									[
										1076953,
										1076960
									],
									[
										1077268,
										1077275
									],
									[
										1077354,
										1077361
									],
									[
										1077434,
										1077441
									],
									[
										1077514,
										1077521
									],
									[
										1077822,
										1077829
									],
									[
										1078037,
										1078044
									],
									[
										1078071,
										1078078
									],
									[
										1078105,
										1078112
									],
									[
										1078145,
										1078152
									],
									[
										1078460,
										1078467
									],
									[
										1078546,
										1078553
									],
									[
										1078626,
										1078633
									],
									[
										1078706,
										1078713
									],
									[
										1079014,
										1079021
									],
									[
										1079229,
										1079236
									],
									[
										1079263,
										1079270
									],
									[
										1079297,
										1079304
									],
									[
										1079337,
										1079344
									],
									[
										1079651,
										1079658
									],
									[
										1079737,
										1079744
									],
									[
										1079817,
										1079824
									],
									[
										1079897,
										1079904
									],
									[
										1080205,
										1080212
									],
									[
										1080420,
										1080427
									],
									[
										1080454,
										1080461
									],
									[
										1080488,
										1080495
									],
									[
										1080528,
										1080535
									],
									[
										1080842,
										1080849
									],
									[
										1080928,
										1080935
									],
									[
										1081008,
										1081015
									],
									[
										1081088,
										1081095
									],
									[
										1081396,
										1081403
									],
									[
										1081611,
										1081618
									],
									[
										1081645,
										1081652
									],
									[
										1081679,
										1081686
									],
									[
										1081719,
										1081726
									],
									[
										1082034,
										1082041
									],
									[
										1082120,
										1082127
									],
									[
										1082200,
										1082207
									],
									[
										1082280,
										1082287
									],
									[
										1082588,
										1082595
									],
									[
										1082803,
										1082810
									],
									[
										1082837,
										1082844
									],
									[
										1082871,
										1082878
									],
									[
										1082911,
										1082918
									],
									[
										1083225,
										1083232
									],
									[
										1083311,
										1083318
									],
									[
										1083391,
										1083398
									],
									[
										1083471,
										1083478
									],
									[
										1083791,
										1083798
									],
									[
										1084005,
										1084012
									],
									[
										1084034,
										1084041
									],
									[
										1084064,
										1084071
									],
									[
										1084211,
										1084218
									],
									[
										1084330,
										1084337
									],
									[
										1084464,
										1084471
									],
									[
										1084498,
										1084505
									],
									[
										1084532,
										1084539
									],
									[
										1084572,
										1084579
									],
									[
										1084761,
										1084768
									],
									[
										1085031,
										1085038
									],
									[
										1085067,
										1085074
									],
									[
										1085103,
										1085110
									],
									[
										1085145,
										1085152
									],
									[
										1085187,
										1085194
									],
									[
										1085379,
										1085386
									],
									[
										1085410,
										1085417
									],
									[
										1085457,
										1085464
									],
									[
										1085491,
										1085498
									],
									[
										1085537,
										1085544
									],
									[
										1085570,
										1085577
									],
									[
										1085773,
										1085780
									],
									[
										1085899,
										1085906
									],
									[
										1086400,
										1086407
									],
									[
										1086498,
										1086505
									],
									[
										1086977,
										1086984
									],
									[
										1087588,
										1087595
									],
									[
										1087689,
										1087696
									],
									[
										1088096,
										1088103
									],
									[
										1088199,
										1088206
									],
									[
										1088698,
										1088705
									],
									[
										1088810,
										1088817
									],
									[
										1089322,
										1089329
									],
									[
										1089425,
										1089432
									],
									[
										1089805,
										1089812
									],
									[
										1089976,
										1089983
									],
									[
										1090015,
										1090022
									],
									[
										1090191,
										1090198
									],
									[
										1090220,
										1090227
									],
									[
										1090250,
										1090257
									],
									[
										1090401,
										1090408
									],
									[
										1090557,
										1090564
									],
									[
										1090700,
										1090707
									],
									[
										1090897,
										1090904
									],
									[
										1091128,
										1091135
									],
									[
										1091361,
										1091368
									],
									[
										1091416,
										1091423
									],
									[
										1091467,
										1091474
									],
									[
										1091969,
										1091976
									],
									[
										1092091,
										1092098
									],
									[
										1092232,
										1092239
									],
									[
										1092650,
										1092657
									],
									[
										1092753,
										1092760
									],
									[
										1092822,
										1092829
									],
									[
										1093321,
										1093328
									],
									[
										1093440,
										1093447
									],
									[
										1093561,
										1093568
									],
									[
										1093993,
										1094000
									],
									[
										1094022,
										1094029
									],
									[
										1094052,
										1094059
									],
									[
										1094201,
										1094208
									],
									[
										1094431,
										1094438
									],
									[
										1094591,
										1094598
									],
									[
										1094835,
										1094842
									],
									[
										1094959,
										1094966
									],
									[
										1095155,
										1095162
									],
									[
										1095184,
										1095191
									],
									[
										1095214,
										1095221
									],
									[
										1095380,
										1095387
									],
									[
										1095691,
										1095698
									],
									[
										1095890,
										1095897
									],
									[
										1095919,
										1095926
									],
									[
										1095949,
										1095956
									],
									[
										1096087,
										1096094
									],
									[
										1096231,
										1096238
									],
									[
										1096406,
										1096413
									],
									[
										1096435,
										1096442
									],
									[
										1096465,
										1096472
									],
									[
										1096614,
										1096621
									],
									[
										1096844,
										1096851
									],
									[
										1097004,
										1097011
									],
									[
										1097248,
										1097255
									],
									[
										1097474,
										1097481
									],
									[
										1097503,
										1097510
									],
									[
										1097533,
										1097540
									],
									[
										1097699,
										1097706
									],
									[
										1098010,
										1098017
									],
									[
										1098180,
										1098187
									],
									[
										1098209,
										1098216
									],
									[
										1098239,
										1098246
									],
									[
										1098386,
										1098393
									],
									[
										1098554,
										1098561
									],
									[
										1098583,
										1098590
									],
									[
										1098613,
										1098620
									],
									[
										1098821,
										1098828
									],
									[
										1098850,
										1098857
									],
									[
										1098880,
										1098887
									],
									[
										1099031,
										1099038
									],
									[
										1099187,
										1099194
									],
									[
										1099372,
										1099379
									],
									[
										1099401,
										1099408
									],
									[
										1099431,
										1099438
									],
									[
										1099578,
										1099585
									],
									[
										1099697,
										1099704
									],
									[
										1099955,
										1099962
									],
									[
										1099991,
										1099998
									],
									[
										1100027,
										1100034
									],
									[
										1100069,
										1100076
									],
									[
										1100111,
										1100118
									],
									[
										1100255,
										1100262
									],
									[
										1100351,
										1100358
									],
									[
										1100384,
										1100391
									],
									[
										1100412,
										1100419
									],
									[
										1100446,
										1100453
									],
									[
										1100714,
										1100721
									],
									[
										1100722,
										1100729
									],
									[
										1100751,
										1100758
									],
									[
										1100799,
										1100806
									],
									[
										1100839,
										1100846
									],
									[
										1100887,
										1100894
									],
									[
										1100921,
										1100928
									],
									[
										1101012,
										1101019
									],
									[
										1101060,
										1101067
									],
									[
										1101101,
										1101108
									],
									[
										1101179,
										1101186
									],
									[
										1101374,
										1101381
									],
									[
										1101386,
										1101393
									],
									[
										1101785,
										1101792
									],
									[
										1101869,
										1101876
									],
									[
										1101974,
										1101981
									],
									[
										1101986,
										1101993
									],
									[
										1102219,
										1102226
									],
									[
										1102227,
										1102234
									],
									[
										1102256,
										1102263
									],
									[
										1102286,
										1102293
									],
									[
										1102326,
										1102333
									],
									[
										1102357,
										1102364
									],
									[
										1102391,
										1102398
									],
									[
										1102449,
										1102456
									],
									[
										1102497,
										1102504
									],
									[
										1102538,
										1102545
									],
									[
										1102618,
										1102625
									],
									[
										1102877,
										1102884
									],
									[
										1102889,
										1102896
									],
									[
										1103102,
										1103109
									],
									[
										1103115,
										1103122
									],
									[
										1103152,
										1103159
									],
									[
										1103202,
										1103209
									],
									[
										1103231,
										1103238
									],
									[
										1103308,
										1103315
									],
									[
										1103378,
										1103385
									],
									[
										1103459,
										1103466
									],
									[
										1103537,
										1103544
									],
									[
										1103615,
										1103622
									],
									[
										1103667,
										1103674
									],
									[
										1103755,
										1103762
									],
									[
										1103819,
										1103826
									],
									[
										1103891,
										1103898
									],
									[
										1104004,
										1104011
									],
									[
										1104244,
										1104251
									],
									[
										1104256,
										1104263
									],
									[
										1104292,
										1104299
									],
									[
										1104342,
										1104349
									],
									[
										1104370,
										1104377
									],
									[
										1104446,
										1104453
									],
									[
										1104519,
										1104526
									],
									[
										1104599,
										1104606
									],
									[
										1104683,
										1104690
									],
									[
										1104760,
										1104767
									],
									[
										1104837,
										1104844
									],
									[
										1104888,
										1104895
									],
									[
										1104975,
										1104982
									],
									[
										1105038,
										1105045
									],
									[
										1105110,
										1105117
									],
									[
										1105233,
										1105240
									],
									[
										1105505,
										1105512
									],
									[
										1105527,
										1105534
									],
									[
										1105878,
										1105885
									],
									[
										1105900,
										1105907
									],
									[
										1105931,
										1105938
									],
									[
										1106362,
										1106369
									],
									[
										1106384,
										1106391
									],
									[
										1106670,
										1106677
									],
									[
										1106689,
										1106696
									],
									[
										1107031,
										1107038
									],
									[
										1107079,
										1107086
									],
									[
										1107121,
										1107128
									],
									[
										1107169,
										1107176
									],
									[
										1107223,
										1107230
									],
									[
										1107265,
										1107272
									],
									[
										1107312,
										1107319
									],
									[
										1107361,
										1107368
									],
									[
										1107409,
										1107416
									],
									[
										1107455,
										1107462
									],
									[
										1107508,
										1107515
									],
									[
										1107557,
										1107564
									],
									[
										1107595,
										1107602
									],
									[
										1107870,
										1107877
									],
									[
										1108095,
										1108102
									],
									[
										1108150,
										1108157
									],
									[
										1108204,
										1108211
									],
									[
										1108270,
										1108277
									],
									[
										1108336,
										1108343
									],
									[
										1108385,
										1108392
									],
									[
										1108450,
										1108457
									],
									[
										1108512,
										1108519
									],
									[
										1108571,
										1108578
									],
									[
										1108629,
										1108636
									],
									[
										1108696,
										1108703
									],
									[
										1108752,
										1108759
									],
									[
										1108801,
										1108808
									],
									[
										1109125,
										1109132
									],
									[
										1109548,
										1109555
									],
									[
										1109568,
										1109575
									],
									[
										1109826,
										1109833
									],
									[
										1109851,
										1109858
									],
									[
										1110006,
										1110013
									],
									[
										1110027,
										1110034
									],
									[
										1110082,
										1110089
									],
									[
										1110350,
										1110357
									],
									[
										1110407,
										1110414
									],
									[
										1110482,
										1110489
									],
									[
										1110516,
										1110523
									],
									[
										1110743,
										1110750
									],
									[
										1110800,
										1110807
									],
									[
										1110875,
										1110882
									],
									[
										1110908,
										1110915
									],
									[
										1111155,
										1111162
									],
									[
										1111189,
										1111196
									],
									[
										1111236,
										1111243
									],
									[
										1111580,
										1111587
									],
									[
										1111713,
										1111720
									],
									[
										1111991,
										1111998
									],
									[
										1112033,
										1112040
									],
									[
										1112322,
										1112329
									],
									[
										1112359,
										1112366
									],
									[
										1112631,
										1112638
									],
									[
										1112665,
										1112672
									],
									[
										1112933,
										1112940
									],
									[
										1112967,
										1112974
									],
									[
										1113285,
										1113292
									],
									[
										1113336,
										1113343
									],
									[
										1113648,
										1113655
									],
									[
										1113686,
										1113693
									],
									[
										1113976,
										1113983
									],
									[
										1114016,
										1114023
									],
									[
										1114274,
										1114281
									],
									[
										1114407,
										1114414
									],
									[
										1114543,
										1114550
									],
									[
										1114703,
										1114710
									],
									[
										1114773,
										1114780
									],
									[
										1114982,
										1114989
									],
									[
										1115058,
										1115065
									],
									[
										1115189,
										1115196
									],
									[
										1115398,
										1115405
									],
									[
										1115514,
										1115521
									],
									[
										1115798,
										1115805
									],
									[
										1116020,
										1116027
									],
									[
										1116062,
										1116069
									],
									[
										1116308,
										1116315
									],
									[
										1116349,
										1116356
									],
									[
										1116406,
										1116413
									],
									[
										1116714,
										1116721
									],
									[
										1116931,
										1116938
									],
									[
										1116968,
										1116975
									],
									[
										1117189,
										1117196
									],
									[
										1117225,
										1117232
									],
									[
										1117277,
										1117284
									],
									[
										1117568,
										1117575
									],
									[
										1117770,
										1117777
									],
									[
										1117804,
										1117811
									],
									[
										1118010,
										1118017
									],
									[
										1118043,
										1118050
									],
									[
										1118092,
										1118099
									],
									[
										1118349,
										1118356
									],
									[
										1118531,
										1118538
									],
									[
										1118565,
										1118572
									],
									[
										1118771,
										1118778
									],
									[
										1118804,
										1118811
									],
									[
										1118853,
										1118860
									],
									[
										1119160,
										1119167
									],
									[
										1119427,
										1119434
									],
									[
										1119478,
										1119485
									],
									[
										1119769,
										1119776
									],
									[
										1119819,
										1119826
									],
									[
										1119885,
										1119892
									],
									[
										1120186,
										1120193
									],
									[
										1120388,
										1120395
									],
									[
										1120426,
										1120433
									],
									[
										1120652,
										1120659
									],
									[
										1120689,
										1120696
									],
									[
										1120742,
										1120749
									],
									[
										1121021,
										1121028
									],
									[
										1121233,
										1121240
									],
									[
										1121273,
										1121280
									],
									[
										1121509,
										1121516
									],
									[
										1121548,
										1121555
									],
									[
										1121603,
										1121610
									],
									[
										1121865,
										1121872
									],
									[
										1121998,
										1122005
									],
									[
										1122134,
										1122141
									],
									[
										1122294,
										1122301
									],
									[
										1122364,
										1122371
									],
									[
										1122573,
										1122580
									],
									[
										1122649,
										1122656
									],
									[
										1122780,
										1122787
									],
									[
										1122989,
										1122996
									],
									[
										1123105,
										1123112
									],
									[
										1123389,
										1123396
									],
									[
										1123611,
										1123618
									],
									[
										1123653,
										1123660
									],
									[
										1123899,
										1123906
									],
									[
										1123940,
										1123947
									],
									[
										1123997,
										1124004
									],
									[
										1124310,
										1124317
									],
									[
										1124527,
										1124534
									],
									[
										1124564,
										1124571
									],
									[
										1124785,
										1124792
									],
									[
										1124821,
										1124828
									],
									[
										1124873,
										1124880
									],
									[
										1125169,
										1125176
									],
									[
										1125371,
										1125378
									],
									[
										1125405,
										1125412
									],
									[
										1125611,
										1125618
									],
									[
										1125644,
										1125651
									],
									[
										1125693,
										1125700
									],
									[
										1125955,
										1125962
									],
									[
										1126137,
										1126144
									],
									[
										1126171,
										1126178
									],
									[
										1126377,
										1126384
									],
									[
										1126410,
										1126417
									],
									[
										1126459,
										1126466
									],
									[
										1126771,
										1126778
									],
									[
										1127038,
										1127045
									],
									[
										1127089,
										1127096
									],
									[
										1127380,
										1127387
									],
									[
										1127430,
										1127437
									],
									[
										1127496,
										1127503
									],
									[
										1127802,
										1127809
									],
									[
										1128004,
										1128011
									],
									[
										1128042,
										1128049
									],
									[
										1128268,
										1128275
									],
									[
										1128305,
										1128312
									],
									[
										1128358,
										1128365
									],
									[
										1128642,
										1128649
									],
									[
										1128854,
										1128861
									],
									[
										1128894,
										1128901
									],
									[
										1129130,
										1129137
									],
									[
										1129169,
										1129176
									],
									[
										1129224,
										1129231
									],
									[
										1129488,
										1129495
									],
									[
										1129524,
										1129531
									],
									[
										1129640,
										1129647
									],
									[
										1129675,
										1129682
									],
									[
										1129808,
										1129815
									],
									[
										1129843,
										1129850
									],
									[
										1129979,
										1129986
									],
									[
										1130161,
										1130168
									],
									[
										1130263,
										1130270
									],
									[
										1130308,
										1130315
									],
									[
										1130500,
										1130507
									],
									[
										1130608,
										1130615
									],
									[
										1130643,
										1130650
									],
									[
										1130762,
										1130769
									],
									[
										1130961,
										1130968
									],
									[
										1131099,
										1131106
									],
									[
										1131391,
										1131398
									],
									[
										1131609,
										1131616
									],
									[
										1131651,
										1131658
									],
									[
										1131897,
										1131904
									],
									[
										1131938,
										1131945
									],
									[
										1131995,
										1132002
									],
									[
										1132313,
										1132320
									],
									[
										1132526,
										1132533
									],
									[
										1132563,
										1132570
									],
									[
										1132784,
										1132791
									],
									[
										1132820,
										1132827
									],
									[
										1132872,
										1132879
									],
									[
										1133181,
										1133188
									],
									[
										1133268,
										1133275
									],
									[
										1133733,
										1133740
									],
									[
										1133818,
										1133825
									],
									[
										1133918,
										1133925
									],
									[
										1134364,
										1134371
									],
									[
										1134562,
										1134569
									],
									[
										1134596,
										1134603
									],
									[
										1134802,
										1134809
									],
									[
										1134835,
										1134842
									],
									[
										1134884,
										1134891
									],
									[
										1135178,
										1135185
									],
									[
										1135262,
										1135269
									],
									[
										1135712,
										1135719
									],
									[
										1135794,
										1135801
									],
									[
										1135891,
										1135898
									],
									[
										1136303,
										1136310
									],
									[
										1136481,
										1136488
									],
									[
										1136515,
										1136522
									],
									[
										1136721,
										1136728
									],
									[
										1136754,
										1136761
									],
									[
										1136803,
										1136810
									],
									[
										1137109,
										1137116
									],
									[
										1137197,
										1137204
									],
									[
										1137667,
										1137674
									],
									[
										1137753,
										1137760
									],
									[
										1137854,
										1137861
									],
									[
										1138324,
										1138331
									],
									[
										1138587,
										1138594
									],
									[
										1138638,
										1138645
									],
									[
										1138929,
										1138936
									],
									[
										1138979,
										1138986
									],
									[
										1139045,
										1139052
									],
									[
										1139356,
										1139363
									],
									[
										1139554,
										1139561
									],
									[
										1139592,
										1139599
									],
									[
										1139818,
										1139825
									],
									[
										1139855,
										1139862
									],
									[
										1139908,
										1139915
									],
									[
										1140197,
										1140204
									],
									[
										1140405,
										1140412
									],
									[
										1140445,
										1140452
									],
									[
										1140681,
										1140688
									],
									[
										1140720,
										1140727
									],
									[
										1140775,
										1140782
									],
									[
										1141049,
										1141056
									],
									[
										1141227,
										1141234
									],
									[
										1141261,
										1141268
									],
									[
										1141467,
										1141474
									],
									[
										1141500,
										1141507
									],
									[
										1141549,
										1141556
									],
									[
										1141981,
										1141988
									],
									[
										1142012,
										1142019
									],
									[
										1142596,
										1142603
									],
									[
										1142618,
										1142625
									],
									[
										1142815,
										1142822
									],
									[
										1142836,
										1142843
									],
									[
										1144173,
										1144180
									],
									[
										1144197,
										1144204
									],
									[
										1144234,
										1144241
									],
									[
										1144353,
										1144360
									],
									[
										1144383,
										1144390
									],
									[
										1144430,
										1144437
									],
									[
										1144602,
										1144609
									],
									[
										1144628,
										1144635
									],
									[
										1144665,
										1144672
									],
									[
										1145388,
										1145395
									],
									[
										1145423,
										1145430
									],
									[
										1145880,
										1145887
									],
									[
										1146398,
										1146405
									],
									[
										1146699,
										1146706
									],
									[
										1146953,
										1146960
									],
									[
										1147338,
										1147345
									],
									[
										1147399,
										1147406
									],
									[
										1147650,
										1147657
									],
									[
										1147914,
										1147921
									],
									[
										1148159,
										1148166
									],
									[
										1148638,
										1148645
									],
									[
										1149030,
										1149037
									],
									[
										1149511,
										1149518
									],
									[
										1149824,
										1149831
									],
									[
										1150176,
										1150183
									],
									[
										1150495,
										1150502
									],
									[
										1150936,
										1150943
									],
									[
										1151020,
										1151027
									],
									[
										1151176,
										1151183
									],
									[
										1151274,
										1151281
									],
									[
										1151315,
										1151322
									],
									[
										1151484,
										1151491
									],
									[
										1151962,
										1151969
									],
									[
										1152023,
										1152030
									],
									[
										1152250,
										1152257
									],
									[
										1152370,
										1152377
									],
									[
										1152600,
										1152607
									],
									[
										1152661,
										1152668
									],
									[
										1152908,
										1152915
									],
									[
										1152956,
										1152963
									],
									[
										1153199,
										1153206
									],
									[
										1153419,
										1153426
									],
									[
										1153618,
										1153625
									],
									[
										1153714,
										1153721
									],
									[
										1153793,
										1153800
									],
									[
										1154087,
										1154094
									],
									[
										1154303,
										1154310
									],
									[
										1154566,
										1154573
									],
									[
										1154841,
										1154848
									],
									[
										1155092,
										1155099
									],
									[
										1155375,
										1155382
									],
									[
										1155424,
										1155431
									],
									[
										1155459,
										1155466
									],
									[
										1155507,
										1155514
									],
									[
										1155571,
										1155578
									],
									[
										1155776,
										1155783
									],
									[
										1155807,
										1155814
									],
									[
										1155864,
										1155871
									],
									[
										1156151,
										1156158
									],
									[
										1156199,
										1156206
									],
									[
										1156583,
										1156590
									],
									[
										1156985,
										1156992
									],
									[
										1157395,
										1157402
									],
									[
										1157764,
										1157771
									],
									[
										1157998,
										1158005
									],
									[
										1158194,
										1158201
									],
									[
										1158232,
										1158239
									],
									[
										1158513,
										1158520
									],
									[
										1158748,
										1158755
									],
									[
										1158983,
										1158990
									],
									[
										1159249,
										1159256
									],
									[
										1159406,
										1159413
									],
									[
										1159606,
										1159613
									],
									[
										1159862,
										1159869
									],
									[
										1159877,
										1159884
									],
									[
										1160226,
										1160233
									],
									[
										1160339,
										1160346
									],
									[
										1160387,
										1160394
									],
									[
										1160434,
										1160441
									],
									[
										1160569,
										1160576
									],
									[
										1160588,
										1160595
									],
									[
										1160746,
										1160753
									],
									[
										1160879,
										1160886
									],
									[
										1160907,
										1160914
									],
									[
										1161271,
										1161278
									],
									[
										1161317,
										1161324
									],
									[
										1161327,
										1161334
									],
									[
										1161403,
										1161410
									],
									[
										1161454,
										1161461
									],
									[
										1161800,
										1161807
									],
									[
										1162040,
										1162047
									],
									[
										1162224,
										1162231
									],
									[
										1162548,
										1162555
									],
									[
										1162774,
										1162781
									],
									[
										1163238,
										1163245
									],
									[
										1163515,
										1163522
									],
									[
										1163611,
										1163618
									],
									[
										1163985,
										1163992
									],
									[
										1164298,
										1164305
									],
									[
										1164340,
										1164347
									],
									[
										1164641,
										1164648
									],
									[
										1164775,
										1164782
									],
									[
										1164817,
										1164824
									],
									[
										1165043,
										1165050
									],
									[
										1165298,
										1165305
									],
									[
										1165523,
										1165530
									],
									[
										1165653,
										1165660
									],
									[
										1165735,
										1165742
									],
									[
										1165920,
										1165927
									],
									[
										1166012,
										1166019
									],
									[
										1166057,
										1166064
									],
									[
										1166138,
										1166145
									],
									[
										1166169,
										1166176
									],
									[
										1166331,
										1166338
									],
									[
										1166364,
										1166371
									],
									[
										1166599,
										1166606
									],
									[
										1166869,
										1166876
									],
									[
										1167103,
										1167110
									],
									[
										1167359,
										1167366
									],
									[
										1167438,
										1167445
									],
									[
										1167701,
										1167708
									],
									[
										1167988,
										1167995
									],
									[
										1168152,
										1168159
									],
									[
										1168360,
										1168367
									],
									[
										1168646,
										1168653
									],
									[
										1168979,
										1168986
									],
									[
										1169196,
										1169203
									],
									[
										1169367,
										1169374
									],
									[
										1169670,
										1169677
									],
									[
										1169977,
										1169984
									],
									[
										1170279,
										1170286
									],
									[
										1170357,
										1170364
									],
									[
										1170658,
										1170665
									],
									[
										1170921,
										1170928
									],
									[
										1170984,
										1170991
									],
									[
										1171047,
										1171054
									],
									[
										1171409,
										1171416
									],
									[
										1171774,
										1171781
									],
									[
										1171789,
										1171796
									],
									[
										1172172,
										1172179
									],
									[
										1172206,
										1172213
									],
									[
										1172434,
										1172441
									],
									[
										1172691,
										1172698
									],
									[
										1173065,
										1173072
									],
									[
										1173084,
										1173091
									],
									[
										1173453,
										1173460
									],
									[
										1173536,
										1173543
									],
									[
										1174012,
										1174019
									],
									[
										1174057,
										1174064
									],
									[
										1174208,
										1174215
									],
									[
										1174253,
										1174260
									],
									[
										1174800,
										1174807
									],
									[
										1175101,
										1175108
									],
									[
										1175334,
										1175341
									],
									[
										1175711,
										1175718
									],
									[
										1175988,
										1175995
									],
									[
										1176274,
										1176281
									],
									[
										1176325,
										1176332
									],
									[
										1176399,
										1176406
									],
									[
										1176496,
										1176503
									],
									[
										1176563,
										1176570
									],
									[
										1176807,
										1176814
									],
									[
										1176877,
										1176884
									],
									[
										1176925,
										1176932
									],
									[
										1177006,
										1177013
									],
									[
										1177130,
										1177137
									],
									[
										1177344,
										1177351
									],
									[
										1177567,
										1177574
									],
									[
										1177661,
										1177668
									],
									[
										1177780,
										1177787
									],
									[
										1177986,
										1177993
									],
									[
										1178261,
										1178268
									],
									[
										1178378,
										1178385
									],
									[
										1178436,
										1178443
									],
									[
										1178599,
										1178606
									],
									[
										1178916,
										1178923
									],
									[
										1179169,
										1179176
									],
									[
										1179425,
										1179432
									],
									[
										1179629,
										1179636
									],
									[
										1179790,
										1179797
									],
									[
										1179875,
										1179882
									],
									[
										1180077,
										1180084
									],
									[
										1180331,
										1180338
									],
									[
										1180388,
										1180395
									],
									[
										1180492,
										1180499
									],
									[
										1180623,
										1180630
									],
									[
										1180860,
										1180867
									],
									[
										1180916,
										1180923
									],
									[
										1181011,
										1181018
									],
									[
										1181141,
										1181148
									],
									[
										1181389,
										1181396
									],
									[
										1181450,
										1181457
									],
									[
										1181553,
										1181560
									],
									[
										1181688,
										1181695
									],
									[
										1182074,
										1182081
									],
									[
										1182375,
										1182382
									],
									[
										1182639,
										1182646
									],
									[
										1182842,
										1182849
									],
									[
										1183056,
										1183063
									],
									[
										1183468,
										1183475
									],
									[
										1183701,
										1183708
									],
									[
										1184011,
										1184018
									],
									[
										1184229,
										1184236
									],
									[
										1184424,
										1184431
									],
									[
										1184627,
										1184634
									],
									[
										1184780,
										1184787
									],
									[
										1184981,
										1184988
									],
									[
										1185170,
										1185177
									],
									[
										1185325,
										1185332
									],
									[
										1185519,
										1185526
									],
									[
										1185691,
										1185698
									],
									[
										1185836,
										1185843
									],
									[
										1186048,
										1186055
									],
									[
										1186237,
										1186244
									],
									[
										1186398,
										1186405
									],
									[
										1186617,
										1186624
									],
									[
										1186820,
										1186827
									],
									[
										1186852,
										1186859
									],
									[
										1186998,
										1187005
									],
									[
										1187080,
										1187087
									],
									[
										1187227,
										1187234
									],
									[
										1187426,
										1187433
									],
									[
										1187616,
										1187623
									],
									[
										1187759,
										1187766
									],
									[
										1187898,
										1187905
									],
									[
										1188073,
										1188080
									],
									[
										1188331,
										1188338
									],
									[
										1188464,
										1188471
									],
									[
										1188501,
										1188508
									],
									[
										1188568,
										1188575
									],
									[
										1188629,
										1188636
									],
									[
										1188748,
										1188755
									],
									[
										1188876,
										1188883
									],
									[
										1188950,
										1188957
									],
									[
										1189113,
										1189120
									],
									[
										1189187,
										1189194
									],
									[
										1189322,
										1189329
									],
									[
										1189406,
										1189413
									],
									[
										1189576,
										1189583
									],
									[
										1189660,
										1189667
									],
									[
										1189812,
										1189819
									],
									[
										1189974,
										1189981
									],
									[
										1190046,
										1190053
									],
									[
										1190228,
										1190235
									],
									[
										1190335,
										1190342
									],
									[
										1190484,
										1190491
									],
									[
										1190547,
										1190554
									],
									[
										1190627,
										1190634
									],
									[
										1190793,
										1190800
									],
									[
										1190956,
										1190963
									],
									[
										1191132,
										1191139
									],
									[
										1191281,
										1191288
									],
									[
										1191366,
										1191373
									],
									[
										1191556,
										1191563
									],
									[
										1191636,
										1191643
									],
									[
										1191836,
										1191843
									],
									[
										1192029,
										1192036
									],
									[
										1192101,
										1192108
									],
									[
										1192211,
										1192218
									],
									[
										1192301,
										1192308
									],
									[
										1192356,
										1192363
									],
									[
										1192434,
										1192441
									],
									[
										1192595,
										1192602
									],
									[
										1192682,
										1192689
									],
									[
										1192772,
										1192779
									],
									[
										1192854,
										1192861
									],
									[
										1193049,
										1193056
									],
									[
										1193127,
										1193134
									],
									[
										1193245,
										1193252
									],
									[
										1193388,
										1193395
									],
									[
										1193455,
										1193462
									],
									[
										1193560,
										1193567
									],
									[
										1193715,
										1193722
									],
									[
										1193939,
										1193946
									],
									[
										1194082,
										1194089
									],
									[
										1194178,
										1194185
									],
									[
										1194570,
										1194577
									],
									[
										1194816,
										1194823
									],
									[
										1195056,
										1195063
									],
									[
										1195232,
										1195239
									],
									[
										1195343,
										1195350
									],
									[
										1195364,
										1195371
									],
									[
										1195468,
										1195475
									],
									[
										1195487,
										1195494
									],
									[
										1195568,
										1195575
									],
									[
										1195614,
										1195621
									],
									[
										1195669,
										1195676
									],
									[
										1195721,
										1195728
									],
									[
										1195790,
										1195797
									],
									[
										1195867,
										1195874
									],
									[
										1196002,
										1196009
									],
									[
										1196021,
										1196028
									],
									[
										1196099,
										1196106
									],
									[
										1196145,
										1196152
									],
									[
										1196200,
										1196207
									],
									[
										1196252,
										1196259
									],
									[
										1196321,
										1196328
									],
									[
										1196398,
										1196405
									],
									[
										1196525,
										1196532
									],
									[
										1196544,
										1196551
									],
									[
										1196634,
										1196641
									],
									[
										1196680,
										1196687
									],
									[
										1196735,
										1196742
									],
									[
										1196787,
										1196794
									],
									[
										1196856,
										1196863
									],
									[
										1196933,
										1196940
									],
									[
										1197068,
										1197075
									],
									[
										1197087,
										1197094
									],
									[
										1197165,
										1197172
									],
									[
										1197214,
										1197221
									],
									[
										1197343,
										1197350
									],
									[
										1197362,
										1197369
									],
									[
										1197454,
										1197461
									],
									[
										1197575,
										1197582
									],
									[
										1197594,
										1197601
									],
									[
										1197679,
										1197686
									],
									[
										1197927,
										1197934
									],
									[
										1197978,
										1197985
									],
									[
										1197997,
										1198004
									],
									[
										1198091,
										1198098
									],
									[
										1198202,
										1198209
									],
									[
										1198221,
										1198228
									],
									[
										1198306,
										1198313
									],
									[
										1198577,
										1198584
									],
									[
										1198629,
										1198636
									],
									[
										1198648,
										1198655
									],
									[
										1198733,
										1198740
									],
									[
										1198997,
										1199004
									],
									[
										1199048,
										1199055
									],
									[
										1199067,
										1199074
									],
									[
										1199161,
										1199168
									],
									[
										1199307,
										1199314
									],
									[
										1199473,
										1199480
									],
									[
										1199492,
										1199499
									],
									[
										1199586,
										1199593
									],
									[
										1199680,
										1199687
									],
									[
										1199699,
										1199706
									],
									[
										1199783,
										1199790
									],
									[
										1199988,
										1199995
									],
									[
										1200074,
										1200081
									],
									[
										1200093,
										1200100
									],
									[
										1200175,
										1200182
									],
									[
										1200380,
										1200387
									],
									[
										1200466,
										1200473
									],
									[
										1200485,
										1200492
									],
									[
										1200566,
										1200573
									],
									[
										1200771,
										1200778
									],
									[
										1200857,
										1200864
									],
									[
										1200876,
										1200883
									],
									[
										1200955,
										1200962
									],
									[
										1201160,
										1201167
									],
									[
										1201246,
										1201253
									],
									[
										1201265,
										1201272
									],
									[
										1201350,
										1201357
									],
									[
										1201491,
										1201498
									],
									[
										1201588,
										1201595
									],
									[
										1201607,
										1201614
									],
									[
										1201690,
										1201697
									],
									[
										1201831,
										1201838
									],
									[
										1201928,
										1201935
									],
									[
										1201947,
										1201954
									],
									[
										1202038,
										1202045
									],
									[
										1202265,
										1202272
									],
									[
										1202426,
										1202433
									],
									[
										1202445,
										1202452
									],
									[
										1202539,
										1202546
									],
									[
										1202764,
										1202771
									],
									[
										1202912,
										1202919
									],
									[
										1202931,
										1202938
									],
									[
										1203027,
										1203034
									],
									[
										1203254,
										1203261
									],
									[
										1203402,
										1203409
									],
									[
										1203435,
										1203442
									],
									[
										1203542,
										1203549
									],
									[
										1203663,
										1203670
									],
									[
										1203682,
										1203689
									],
									[
										1203772,
										1203779
									],
									[
										1203920,
										1203927
									],
									[
										1204084,
										1204091
									],
									[
										1204103,
										1204110
									],
									[
										1204196,
										1204203
									],
									[
										1204294,
										1204301
									],
									[
										1204313,
										1204320
									],
									[
										1204409,
										1204416
									],
									[
										1204641,
										1204648
									],
									[
										1204785,
										1204792
									],
									[
										1204804,
										1204811
									],
									[
										1204898,
										1204905
									],
									[
										1205146,
										1205153
									],
									[
										1205261,
										1205268
									],
									[
										1205312,
										1205319
									],
									[
										1205331,
										1205338
									],
									[
										1205413,
										1205420
									],
									[
										1205642,
										1205649
									],
									[
										1205982,
										1205989
									],
									[
										1206010,
										1206017
									],
									[
										1206101,
										1206108
									],
									[
										1206264,
										1206271
									],
									[
										1206438,
										1206445
									],
									[
										1206457,
										1206464
									],
									[
										1206550,
										1206557
									],
									[
										1206668,
										1206675
									],
									[
										1206687,
										1206694
									],
									[
										1206781,
										1206788
									],
									[
										1207022,
										1207029
									],
									[
										1207249,
										1207256
									],
									[
										1207268,
										1207275
									],
									[
										1207361,
										1207368
									],
									[
										1207523,
										1207530
									],
									[
										1207689,
										1207696
									],
									[
										1207708,
										1207715
									],
									[
										1207799,
										1207806
									],
									[
										1207917,
										1207924
									],
									[
										1207936,
										1207943
									],
									[
										1208028,
										1208035
									],
									[
										1208269,
										1208276
									],
									[
										1208496,
										1208503
									],
									[
										1208515,
										1208522
									],
									[
										1208606,
										1208613
									],
									[
										1208768,
										1208775
									],
									[
										1208934,
										1208941
									],
									[
										1208953,
										1208960
									],
									[
										1209046,
										1209053
									],
									[
										1209164,
										1209171
									],
									[
										1209183,
										1209190
									],
									[
										1209277,
										1209284
									],
									[
										1209518,
										1209525
									],
									[
										1209745,
										1209752
									],
									[
										1209764,
										1209771
									],
									[
										1209857,
										1209864
									],
									[
										1210019,
										1210026
									],
									[
										1210185,
										1210192
									],
									[
										1210218,
										1210225
									],
									[
										1210325,
										1210332
									],
									[
										1210443,
										1210450
									],
									[
										1210476,
										1210483
									],
									[
										1210584,
										1210591
									],
									[
										1210825,
										1210832
									],
									[
										1211052,
										1211059
									],
									[
										1211085,
										1211092
									],
									[
										1211192,
										1211199
									],
									[
										1211354,
										1211361
									],
									[
										1211520,
										1211527
									],
									[
										1211538,
										1211545
									],
									[
										1211609,
										1211616
									],
									[
										1211681,
										1211688
									],
									[
										1211770,
										1211777
									],
									[
										1211788,
										1211795
									],
									[
										1211865,
										1211872
									],
									[
										1211929,
										1211936
									],
									[
										1212015,
										1212022
									],
									[
										1212033,
										1212040
									],
									[
										1212110,
										1212117
									],
									[
										1212228,
										1212235
									],
									[
										1212246,
										1212253
									],
									[
										1212334,
										1212341
									],
									[
										1212431,
										1212438
									],
									[
										1212449,
										1212456
									],
									[
										1212532,
										1212539
									],
									[
										1212770,
										1212777
									],
									[
										1212821,
										1212828
									],
									[
										1212839,
										1212846
									],
									[
										1212930,
										1212937
									],
									[
										1213175,
										1213182
									],
									[
										1213226,
										1213233
									],
									[
										1213244,
										1213251
									],
									[
										1213328,
										1213335
									],
									[
										1213557,
										1213564
									],
									[
										1213608,
										1213615
									],
									[
										1213626,
										1213633
									],
									[
										1213710,
										1213717
									],
									[
										1213947,
										1213954
									],
									[
										1213998,
										1214005
									],
									[
										1214016,
										1214023
									],
									[
										1214100,
										1214107
									],
									[
										1214337,
										1214344
									],
									[
										1214388,
										1214395
									],
									[
										1214406,
										1214413
									],
									[
										1214490,
										1214497
									],
									[
										1214726,
										1214733
									],
									[
										1214777,
										1214784
									],
									[
										1214795,
										1214802
									],
									[
										1214891,
										1214898
									],
									[
										1214988,
										1214995
									],
									[
										1215006,
										1215013
									],
									[
										1215086,
										1215093
									],
									[
										1215311,
										1215318
									],
									[
										1215397,
										1215404
									],
									[
										1215415,
										1215422
									],
									[
										1215493,
										1215500
									],
									[
										1215718,
										1215725
									],
									[
										1215804,
										1215811
									],
									[
										1215822,
										1215829
									],
									[
										1215906,
										1215913
									],
									[
										1216042,
										1216049
									],
									[
										1216139,
										1216146
									],
									[
										1216157,
										1216164
									],
									[
										1216239,
										1216246
									],
									[
										1216375,
										1216382
									],
									[
										1216472,
										1216479
									],
									[
										1216490,
										1216497
									],
									[
										1216579,
										1216586
									],
									[
										1216745,
										1216752
									],
									[
										1216909,
										1216916
									],
									[
										1216927,
										1216934
									],
									[
										1217019,
										1217026
									],
									[
										1217136,
										1217143
									],
									[
										1217154,
										1217161
									],
									[
										1217235,
										1217242
									],
									[
										1217455,
										1217462
									],
									[
										1217699,
										1217706
									],
									[
										1217717,
										1217724
									],
									[
										1217806,
										1217813
									],
									[
										1217941,
										1217948
									],
									[
										1218190,
										1218197
									],
									[
										1218208,
										1218215
									],
									[
										1218300,
										1218307
									],
									[
										1218518,
										1218525
									],
									[
										1218674,
										1218681
									],
									[
										1218692,
										1218699
									],
									[
										1218782,
										1218789
									],
									[
										1219017,
										1219024
									],
									[
										1219173,
										1219180
									],
									[
										1219190,
										1219197
									],
									[
										1219264,
										1219271
									],
									[
										1219281,
										1219288
									],
									[
										1219306,
										1219313
									],
									[
										1219385,
										1219392
									],
									[
										1219402,
										1219409
									],
									[
										1219484,
										1219491
									],
									[
										1219501,
										1219508
									],
									[
										1219702,
										1219709
									],
									[
										1219793,
										1219800
									],
									[
										1219844,
										1219851
									],
									[
										1219861,
										1219868
									],
									[
										1219946,
										1219953
									],
									[
										1219963,
										1219970
									],
									[
										1219988,
										1219995
									],
									[
										1220174,
										1220181
									],
									[
										1220313,
										1220320
									],
									[
										1220330,
										1220337
									],
									[
										1220413,
										1220420
									],
									[
										1220430,
										1220437
									],
									[
										1220455,
										1220462
									],
									[
										1220641,
										1220648
									],
									[
										1220780,
										1220787
									],
									[
										1220803,
										1220810
									],
									[
										1220867,
										1220874
									],
									[
										1220884,
										1220891
									],
									[
										1220909,
										1220916
									],
									[
										1220944,
										1220951
									],
									[
										1220953,
										1220960
									],
									[
										1221063,
										1221070
									],
									[
										1221086,
										1221093
									],
									[
										1221101,
										1221108
									],
									[
										1221170,
										1221177
									],
									[
										1221400,
										1221407
									],
									[
										1221424,
										1221431
									],
									[
										1221491,
										1221498
									],
									[
										1221542,
										1221549
									],
									[
										1221565,
										1221572
									],
									[
										1221638,
										1221645
									],
									[
										1221655,
										1221662
									],
									[
										1221680,
										1221687
									],
									[
										1221715,
										1221722
									],
									[
										1221724,
										1221731
									],
									[
										1221884,
										1221891
									],
									[
										1221970,
										1221977
									],
									[
										1221993,
										1222000
									],
									[
										1222070,
										1222077
									],
									[
										1222087,
										1222094
									],
									[
										1222112,
										1222119
									],
									[
										1222147,
										1222154
									],
									[
										1222156,
										1222163
									],
									[
										1222296,
										1222303
									],
									[
										1222393,
										1222400
									],
									[
										1222416,
										1222423
									],
									[
										1222490,
										1222497
									],
									[
										1222507,
										1222514
									],
									[
										1222532,
										1222539
									],
									[
										1222567,
										1222574
									],
									[
										1222576,
										1222583
									],
									[
										1222793,
										1222800
									],
									[
										1223037,
										1223044
									],
									[
										1223121,
										1223128
									],
									[
										1223205,
										1223212
									],
									[
										1223238,
										1223245
									],
									[
										1223432,
										1223439
									],
									[
										1223531,
										1223538
									],
									[
										1223563,
										1223570
									],
									[
										1223756,
										1223763
									],
									[
										1223852,
										1223859
									],
									[
										1224049,
										1224056
									],
									[
										1224278,
										1224285
									],
									[
										1224438,
										1224445
									],
									[
										1224636,
										1224643
									],
									[
										1224865,
										1224872
									],
									[
										1225026,
										1225033
									],
									[
										1225222,
										1225229
									],
									[
										1225451,
										1225458
									],
									[
										1225610,
										1225617
									],
									[
										1225816,
										1225823
									],
									[
										1225989,
										1225996
									],
									[
										1226165,
										1226172
									],
									[
										1226369,
										1226376
									],
									[
										1226542,
										1226549
									],
									[
										1226716,
										1226723
									],
									[
										1226921,
										1226928
									],
									[
										1227141,
										1227148
									],
									[
										1227280,
										1227287
									],
									[
										1227483,
										1227490
									],
									[
										1227703,
										1227710
									],
									[
										1227842,
										1227849
									],
									[
										1228039,
										1228046
									],
									[
										1228152,
										1228159
									],
									[
										1228349,
										1228356
									],
									[
										1228462,
										1228469
									],
									[
										1228655,
										1228662
									],
									[
										1228766,
										1228773
									],
									[
										1228959,
										1228966
									],
									[
										1229070,
										1229077
									],
									[
										1229266,
										1229273
									],
									[
										1229375,
										1229382
									],
									[
										1229572,
										1229579
									],
									[
										1229681,
										1229688
									],
									[
										1229705,
										1229712
									],
									[
										1229867,
										1229874
									],
									[
										1229976,
										1229983
									],
									[
										1230001,
										1230008
									],
									[
										1230164,
										1230171
									],
									[
										1230281,
										1230288
									],
									[
										1230484,
										1230491
									],
									[
										1230601,
										1230608
									],
									[
										1230804,
										1230811
									],
									[
										1230921,
										1230928
									],
									[
										1230939,
										1230946
									],
									[
										1231029,
										1231036
									],
									[
										1231189,
										1231196
									],
									[
										1231207,
										1231214
									],
									[
										1231298,
										1231305
									],
									[
										1231458,
										1231465
									],
									[
										1231477,
										1231484
									],
									[
										1231555,
										1231562
									],
									[
										1231822,
										1231829
									],
									[
										1231846,
										1231853
									],
									[
										1232027,
										1232034
									],
									[
										1232175,
										1232182
									],
									[
										1232318,
										1232325
									],
									[
										1232450,
										1232457
									],
									[
										1232696,
										1232703
									],
									[
										1232879,
										1232886
									],
									[
										1233121,
										1233128
									],
									[
										1233273,
										1233280
									],
									[
										1233344,
										1233351
									],
									[
										1233377,
										1233384
									],
									[
										1233652,
										1233659
									],
									[
										1233938,
										1233945
									],
									[
										1234184,
										1234191
									],
									[
										1234306,
										1234313
									],
									[
										1235391,
										1235398
									],
									[
										1238326,
										1238333
									],
									[
										1238345,
										1238352
									],
									[
										1238372,
										1238379
									],
									[
										1238390,
										1238397
									],
									[
										1238660,
										1238667
									],
									[
										1238681,
										1238688
									],
									[
										1238707,
										1238714
									],
									[
										1238734,
										1238741
									],
									[
										1238776,
										1238783
									],
									[
										1238799,
										1238806
									],
									[
										1238951,
										1238958
									],
									[
										1239000,
										1239007
									],
									[
										1239030,
										1239037
									],
									[
										1239139,
										1239146
									],
									[
										1239187,
										1239194
									],
									[
										1239217,
										1239224
									],
									[
										1239329,
										1239336
									],
									[
										1239380,
										1239387
									],
									[
										1239496,
										1239503
									],
									[
										1239553,
										1239560
									],
									[
										1239593,
										1239600
									],
									[
										1239707,
										1239714
									],
									[
										1239760,
										1239767
									],
									[
										1239790,
										1239797
									],
									[
										1239947,
										1239954
									],
									[
										1240073,
										1240080
									],
									[
										1240344,
										1240351
									],
									[
										1240557,
										1240564
									],
									[
										1240594,
										1240601
									],
									[
										1240815,
										1240822
									],
									[
										1240851,
										1240858
									],
									[
										1240903,
										1240910
									],
									[
										1241133,
										1241140
									],
									[
										1241221,
										1241228
									],
									[
										1241262,
										1241269
									],
									[
										1241293,
										1241300
									],
									[
										1241379,
										1241386
									],
									[
										1241539,
										1241546
									],
									[
										1241567,
										1241574
									],
									[
										1241583,
										1241590
									],
									[
										1241614,
										1241621
									],
									[
										1241648,
										1241655
									],
									[
										1241670,
										1241677
									],
									[
										1241700,
										1241707
									],
									[
										1241733,
										1241740
									],
									[
										1241754,
										1241761
									],
									[
										1241839,
										1241846
									],
									[
										1241914,
										1241921
									],
									[
										1241935,
										1241942
									],
									[
										1241957,
										1241964
									],
									[
										1241984,
										1241991
									],
									[
										1242005,
										1242012
									],
									[
										1242031,
										1242038
									],
									[
										1242285,
										1242292
									],
									[
										1242313,
										1242320
									],
									[
										1242329,
										1242336
									],
									[
										1242360,
										1242367
									],
									[
										1242394,
										1242401
									],
									[
										1242416,
										1242423
									],
									[
										1242446,
										1242453
									],
									[
										1242479,
										1242486
									],
									[
										1242500,
										1242507
									],
									[
										1242659,
										1242666
									],
									[
										1242680,
										1242687
									],
									[
										1242702,
										1242709
									],
									[
										1242729,
										1242736
									],
									[
										1242750,
										1242757
									],
									[
										1242776,
										1242783
									],
									[
										1242997,
										1243004
									],
									[
										1243039,
										1243046
									],
									[
										1243071,
										1243078
									],
									[
										1243112,
										1243119
									],
									[
										1243139,
										1243146
									],
									[
										1243174,
										1243181
									],
									[
										1243581,
										1243588
									],
									[
										1243611,
										1243618
									],
									[
										1243666,
										1243673
									],
									[
										1243695,
										1243702
									],
									[
										1243745,
										1243752
									],
									[
										1243769,
										1243776
									],
									[
										1244131,
										1244138
									],
									[
										1244312,
										1244319
									],
									[
										1244433,
										1244440
									],
									[
										1245048,
										1245055
									],
									[
										1245071,
										1245078
									],
									[
										1245258,
										1245265
									],
									[
										1245293,
										1245300
									],
									[
										1245423,
										1245430
									],
									[
										1245524,
										1245531
									],
									[
										1245557,
										1245564
									],
									[
										1245698,
										1245705
									],
									[
										1245857,
										1245864
									],
									[
										1246070,
										1246077
									],
									[
										1246283,
										1246290
									],
									[
										1246495,
										1246502
									],
									[
										1246707,
										1246714
									],
									[
										1246887,
										1246894
									],
									[
										1247071,
										1247078
									],
									[
										1247253,
										1247260
									],
									[
										1247369,
										1247376
									],
									[
										1247446,
										1247453
									],
									[
										1247545,
										1247552
									],
									[
										1247693,
										1247700
									],
									[
										1247782,
										1247789
									],
									[
										1247958,
										1247965
									],
									[
										1248184,
										1248191
									],
									[
										1248369,
										1248376
									],
									[
										1248404,
										1248411
									],
									[
										1248521,
										1248528
									],
									[
										1248683,
										1248690
									],
									[
										1248741,
										1248748
									],
									[
										1248824,
										1248831
									],
									[
										1248999,
										1249006
									],
									[
										1249114,
										1249121
									],
									[
										1249373,
										1249380
									],
									[
										1249390,
										1249397
									],
									[
										1249571,
										1249578
									],
									[
										1249600,
										1249607
									],
									[
										1249724,
										1249731
									],
									[
										1249819,
										1249826
									],
									[
										1249846,
										1249853
									],
									[
										1249981,
										1249988
									],
									[
										1250134,
										1250141
									],
									[
										1250341,
										1250348
									],
									[
										1250554,
										1250561
									],
									[
										1250664,
										1250671
									],
									[
										1250735,
										1250742
									],
									[
										1250828,
										1250835
									],
									[
										1250970,
										1250977
									],
									[
										1251053,
										1251060
									],
									[
										1251223,
										1251230
									],
									[
										1251443,
										1251450
									],
									[
										1251622,
										1251629
									],
									[
										1251651,
										1251658
									],
									[
										1251762,
										1251769
									],
									[
										1251918,
										1251925
									],
									[
										1251970,
										1251977
									],
									[
										1252029,
										1252036
									],
									[
										1252209,
										1252216
									],
									[
										1252329,
										1252336
									],
									[
										1253158,
										1253165
									],
									[
										1253180,
										1253187
									],
									[
										1253366,
										1253373
									],
									[
										1253400,
										1253407
									],
									[
										1253529,
										1253536
									],
									[
										1253629,
										1253636
									],
									[
										1253661,
										1253668
									],
									[
										1253801,
										1253808
									],
									[
										1253959,
										1253966
									],
									[
										1254171,
										1254178
									],
									[
										1254383,
										1254390
									],
									[
										1254579,
										1254586
									],
									[
										1254775,
										1254782
									],
									[
										1254986,
										1254993
									],
									[
										1255197,
										1255204
									],
									[
										1255371,
										1255378
									],
									[
										1255619,
										1255626
									],
									[
										1255734,
										1255741
									],
									[
										1255810,
										1255817
									],
									[
										1255908,
										1255915
									],
									[
										1256055,
										1256062
									],
									[
										1256143,
										1256150
									],
									[
										1256318,
										1256325
									],
									[
										1256543,
										1256550
									],
									[
										1256727,
										1256734
									],
									[
										1256761,
										1256768
									],
									[
										1256877,
										1256884
									],
									[
										1257038,
										1257045
									],
									[
										1257095,
										1257102
									],
									[
										1257244,
										1257251
									],
									[
										1257433,
										1257440
									],
									[
										1257481,
										1257488
									],
									[
										1257497,
										1257504
									],
									[
										1257528,
										1257535
									],
									[
										1257582,
										1257589
									],
									[
										1257604,
										1257611
									],
									[
										1257634,
										1257641
									],
									[
										1257687,
										1257694
									],
									[
										1257708,
										1257715
									],
									[
										1257948,
										1257955
									],
									[
										1258167,
										1258174
									],
									[
										1258189,
										1258196
									],
									[
										1258250,
										1258257
									],
									[
										1258278,
										1258285
									],
									[
										1258338,
										1258345
									],
									[
										1258365,
										1258372
									],
									[
										1258827,
										1258834
									],
									[
										1258875,
										1258882
									],
									[
										1258891,
										1258898
									],
									[
										1258922,
										1258929
									],
									[
										1258976,
										1258983
									],
									[
										1258998,
										1259005
									],
									[
										1259028,
										1259035
									],
									[
										1259081,
										1259088
									],
									[
										1259102,
										1259109
									],
									[
										1259562,
										1259569
									],
									[
										1259584,
										1259591
									],
									[
										1259645,
										1259652
									],
									[
										1259673,
										1259680
									],
									[
										1259733,
										1259740
									],
									[
										1259760,
										1259767
									],
									[
										1260020,
										1260027
									],
									[
										1260209,
										1260216
									],
									[
										1260257,
										1260264
									],
									[
										1260273,
										1260280
									],
									[
										1260304,
										1260311
									],
									[
										1260358,
										1260365
									],
									[
										1260380,
										1260387
									],
									[
										1260410,
										1260417
									],
									[
										1260463,
										1260470
									],
									[
										1260484,
										1260491
									],
									[
										1260578,
										1260585
									],
									[
										1260763,
										1260770
									],
									[
										1260808,
										1260815
									],
									[
										1260826,
										1260833
									],
									[
										1260850,
										1260857
									],
									[
										1260901,
										1260908
									],
									[
										1260925,
										1260932
									],
									[
										1260948,
										1260955
									],
									[
										1260998,
										1261005
									],
									[
										1261021,
										1261028
									],
									[
										1261190,
										1261197
									],
									[
										1261409,
										1261416
									],
									[
										1261431,
										1261438
									],
									[
										1261492,
										1261499
									],
									[
										1261520,
										1261527
									],
									[
										1261580,
										1261587
									],
									[
										1261607,
										1261614
									],
									[
										1261702,
										1261709
									],
									[
										1261887,
										1261894
									],
									[
										1261936,
										1261943
									],
									[
										1261953,
										1261960
									],
									[
										1261984,
										1261991
									],
									[
										1262039,
										1262046
									],
									[
										1262062,
										1262069
									],
									[
										1262092,
										1262099
									],
									[
										1262146,
										1262153
									],
									[
										1262168,
										1262175
									],
									[
										1262557,
										1262564
									],
									[
										1262605,
										1262612
									],
									[
										1262621,
										1262628
									],
									[
										1262652,
										1262659
									],
									[
										1262706,
										1262713
									],
									[
										1262728,
										1262735
									],
									[
										1262758,
										1262765
									],
									[
										1262811,
										1262818
									],
									[
										1262832,
										1262839
									],
									[
										1263112,
										1263119
									],
									[
										1263157,
										1263164
									],
									[
										1263175,
										1263182
									],
									[
										1263199,
										1263206
									],
									[
										1263250,
										1263257
									],
									[
										1263274,
										1263281
									],
									[
										1263297,
										1263304
									],
									[
										1263347,
										1263354
									],
									[
										1263370,
										1263377
									],
									[
										1263759,
										1263766
									],
									[
										1263781,
										1263788
									],
									[
										1263842,
										1263849
									],
									[
										1263870,
										1263877
									],
									[
										1263930,
										1263937
									],
									[
										1263957,
										1263964
									],
									[
										1264248,
										1264255
									],
									[
										1264297,
										1264304
									],
									[
										1264314,
										1264321
									],
									[
										1264345,
										1264352
									],
									[
										1264400,
										1264407
									],
									[
										1264423,
										1264430
									],
									[
										1264453,
										1264460
									],
									[
										1264507,
										1264514
									],
									[
										1264529,
										1264536
									],
									[
										1264954,
										1264961
									],
									[
										1265395,
										1265402
									],
									[
										1265416,
										1265423
									],
									[
										1265852,
										1265859
									],
									[
										1265879,
										1265886
									],
									[
										1265935,
										1265942
									],
									[
										1266498,
										1266505
									],
									[
										1266525,
										1266532
									],
									[
										1266577,
										1266584
									],
									[
										1267115,
										1267122
									],
									[
										1267171,
										1267178
									],
									[
										1267221,
										1267228
									],
									[
										1267438,
										1267445
									],
									[
										1267625,
										1267632
									],
									[
										1267775,
										1267782
									],
									[
										1268004,
										1268011
									],
									[
										1268051,
										1268058
									],
									[
										1268242,
										1268249
									],
									[
										1268801,
										1268808
									],
									[
										1268829,
										1268836
									],
									[
										1268845,
										1268852
									],
									[
										1268876,
										1268883
									],
									[
										1268910,
										1268917
									],
									[
										1268932,
										1268939
									],
									[
										1268962,
										1268969
									],
									[
										1268995,
										1269002
									],
									[
										1269016,
										1269023
									],
									[
										1269076,
										1269083
									],
									[
										1269236,
										1269243
									],
									[
										1269264,
										1269271
									],
									[
										1269280,
										1269287
									],
									[
										1269311,
										1269318
									],
									[
										1269345,
										1269352
									],
									[
										1269367,
										1269374
									],
									[
										1269397,
										1269404
									],
									[
										1269430,
										1269437
									],
									[
										1269451,
										1269458
									],
									[
										1269940,
										1269947
									],
									[
										1269979,
										1269986
									],
									[
										1270016,
										1270023
									],
									[
										1270093,
										1270100
									],
									[
										1270138,
										1270145
									],
									[
										1270175,
										1270182
									],
									[
										1270251,
										1270258
									],
									[
										1270295,
										1270302
									],
									[
										1270332,
										1270339
									],
									[
										1270398,
										1270405
									],
									[
										1270748,
										1270755
									],
									[
										1270787,
										1270794
									],
									[
										1270824,
										1270831
									],
									[
										1270901,
										1270908
									],
									[
										1270946,
										1270953
									],
									[
										1270983,
										1270990
									],
									[
										1271059,
										1271066
									],
									[
										1271103,
										1271110
									],
									[
										1271140,
										1271147
									],
									[
										1271475,
										1271482
									],
									[
										1271953,
										1271960
									],
									[
										1272325,
										1272332
									],
									[
										1272407,
										1272414
									],
									[
										1273081,
										1273088
									],
									[
										1273163,
										1273170
									],
									[
										1273836,
										1273843
									],
									[
										1273917,
										1273924
									],
									[
										1274590,
										1274597
									],
									[
										1274671,
										1274678
									],
									[
										1275529,
										1275536
									],
									[
										1275566,
										1275573
									],
									[
										1275761,
										1275768
									],
									[
										1275824,
										1275831
									],
									[
										1275880,
										1275887
									],
									[
										1275981,
										1275988
									],
									[
										1276026,
										1276033
									],
									[
										1276044,
										1276051
									],
									[
										1276163,
										1276170
									],
									[
										1276232,
										1276239
									],
									[
										1276294,
										1276301
									],
									[
										1276401,
										1276408
									],
									[
										1276452,
										1276459
									],
									[
										1276476,
										1276483
									],
									[
										1276594,
										1276601
									],
									[
										1276662,
										1276669
									],
									[
										1276723,
										1276730
									],
									[
										1276829,
										1276836
									],
									[
										1276879,
										1276886
									],
									[
										1276902,
										1276909
									],
									[
										1277021,
										1277028
									],
									[
										1277117,
										1277124
									],
									[
										1277463,
										1277470
									],
									[
										1277898,
										1277905
									],
									[
										1278532,
										1278539
									],
									[
										1278878,
										1278885
									],
									[
										1279313,
										1279320
									],
									[
										1279947,
										1279954
									],
									[
										1280074,
										1280081
									],
									[
										1280430,
										1280437
									],
									[
										1280557,
										1280564
									],
									[
										1280913,
										1280920
									],
									[
										1280934,
										1280941
									],
									[
										1281016,
										1281023
									],
									[
										1281674,
										1281681
									],
									[
										1281695,
										1281702
									],
									[
										1281777,
										1281784
									],
									[
										1282435,
										1282442
									],
									[
										1282455,
										1282462
									],
									[
										1282536,
										1282543
									],
									[
										1283194,
										1283201
									],
									[
										1283214,
										1283221
									],
									[
										1283295,
										1283302
									],
									[
										1283953,
										1283960
									],
									[
										1284032,
										1284039
									],
									[
										1284669,
										1284676
									],
									[
										1284689,
										1284696
									],
									[
										1284759,
										1284766
									],
									[
										1284880,
										1284887
									],
									[
										1284969,
										1284976
									],
									[
										1285040,
										1285047
									],
									[
										1285139,
										1285146
									],
									[
										1285415,
										1285422
									],
									[
										1285490,
										1285497
									],
									[
										1285621,
										1285628
									],
									[
										1285782,
										1285789
									],
									[
										1285867,
										1285874
									],
									[
										1286018,
										1286025
									],
									[
										1286179,
										1286186
									],
									[
										1286453,
										1286460
									],
									[
										1286756,
										1286763
									],
									[
										1286989,
										1286996
									],
									[
										1287292,
										1287299
									],
									[
										1287525,
										1287532
									],
									[
										1287828,
										1287835
									],
									[
										1287843,
										1287850
									],
									[
										1287906,
										1287913
									],
									[
										1287962,
										1287969
									],
									[
										1288063,
										1288070
									],
									[
										1288108,
										1288115
									],
									[
										1288126,
										1288133
									],
									[
										1288229,
										1288236
									],
									[
										1288250,
										1288257
									],
									[
										1288319,
										1288326
									],
									[
										1288381,
										1288388
									],
									[
										1288488,
										1288495
									],
									[
										1288539,
										1288546
									],
									[
										1288563,
										1288570
									],
									[
										1288666,
										1288673
									],
									[
										1288686,
										1288693
									],
									[
										1288754,
										1288761
									],
									[
										1288815,
										1288822
									],
									[
										1288921,
										1288928
									],
									[
										1288971,
										1288978
									],
									[
										1288994,
										1289001
									],
									[
										1289097,
										1289104
									],
									[
										1289372,
										1289379
									],
									[
										1289736,
										1289743
									],
									[
										1290103,
										1290110
									],
									[
										1290523,
										1290530
									],
									[
										1290890,
										1290897
									],
									[
										1291308,
										1291315
									],
									[
										1291666,
										1291673
									],
									[
										1292067,
										1292074
									],
									[
										1292404,
										1292411
									],
									[
										1292741,
										1292748
									],
									[
										1293078,
										1293085
									],
									[
										1293465,
										1293472
									],
									[
										1293821,
										1293828
									],
									[
										1294234,
										1294241
									],
									[
										1294315,
										1294322
									],
									[
										1294556,
										1294563
									],
									[
										1294647,
										1294654
									],
									[
										1294788,
										1294795
									],
									[
										1294878,
										1294885
									],
									[
										1295081,
										1295088
									],
									[
										1295367,
										1295374
									],
									[
										1295651,
										1295658
									],
									[
										1295748,
										1295755
									],
									[
										1295983,
										1295990
									],
									[
										1296265,
										1296272
									],
									[
										1296604,
										1296611
									],
									[
										1296903,
										1296910
									],
									[
										1297051,
										1297058
									],
									[
										1297147,
										1297154
									],
									[
										1297356,
										1297363
									],
									[
										1297667,
										1297674
									],
									[
										1298118,
										1298125
									],
									[
										1298565,
										1298572
									],
									[
										1299024,
										1299031
									],
									[
										1299582,
										1299589
									],
									[
										1300218,
										1300225
									],
									[
										1300604,
										1300611
									],
									[
										1300700,
										1300707
									],
									[
										1301064,
										1301071
									],
									[
										1301602,
										1301609
									],
									[
										1301970,
										1301977
									],
									[
										1302514,
										1302521
									],
									[
										1302810,
										1302817
									],
									[
										1303500,
										1303507
									],
									[
										1304206,
										1304213
									],
									[
										1304911,
										1304918
									],
									[
										1305644,
										1305651
									],
									[
										1306326,
										1306333
									],
									[
										1307008,
										1307015
									],
									[
										1307537,
										1307544
									],
									[
										1307625,
										1307632
									],
									[
										1308221,
										1308228
									],
									[
										1308368,
										1308375
									],
									[
										1308463,
										1308470
									],
									[
										1308774,
										1308781
									],
									[
										1309029,
										1309036
									],
									[
										1309290,
										1309297
									],
									[
										1309551,
										1309558
									],
									[
										1309793,
										1309800
									],
									[
										1310152,
										1310159
									],
									[
										1310868,
										1310875
									],
									[
										1311662,
										1311669
									],
									[
										1312483,
										1312490
									],
									[
										1313195,
										1313202
									],
									[
										1314018,
										1314025
									],
									[
										1314782,
										1314789
									],
									[
										1315549,
										1315556
									],
									[
										1315946,
										1315953
									],
									[
										1316312,
										1316319
									],
									[
										1316887,
										1316894
									],
									[
										1317330,
										1317337
									],
									[
										1317835,
										1317842
									],
									[
										1318370,
										1318377
									],
									[
										1318963,
										1318970
									],
									[
										1319411,
										1319418
									],
									[
										1319855,
										1319862
									],
									[
										1320313,
										1320320
									],
									[
										1320868,
										1320875
									],
									[
										1321501,
										1321508
									],
									[
										1322076,
										1322083
									],
									[
										1322146,
										1322153
									],
									[
										1322786,
										1322793
									],
									[
										1322863,
										1322870
									],
									[
										1323443,
										1323450
									],
									[
										1323519,
										1323526
									],
									[
										1324105,
										1324112
									],
									[
										1324611,
										1324618
									],
									[
										1324694,
										1324701
									],
									[
										1324771,
										1324778
									],
									[
										1325366,
										1325373
									],
									[
										1325431,
										1325438
									],
									[
										1325465,
										1325472
									],
									[
										1325494,
										1325501
									],
									[
										1325600,
										1325607
									],
									[
										1325671,
										1325678
									],
									[
										1325711,
										1325718
									],
									[
										1325746,
										1325753
									],
									[
										1325851,
										1325858
									],
									[
										1325921,
										1325928
									],
									[
										1325960,
										1325967
									],
									[
										1325994,
										1326001
									],
									[
										1326220,
										1326227
									],
									[
										1326725,
										1326732
									],
									[
										1326790,
										1326797
									],
									[
										1326824,
										1326831
									],
									[
										1326853,
										1326860
									],
									[
										1326959,
										1326966
									],
									[
										1327030,
										1327037
									],
									[
										1327070,
										1327077
									],
									[
										1327105,
										1327112
									],
									[
										1327210,
										1327217
									],
									[
										1327280,
										1327287
									],
									[
										1327319,
										1327326
									],
									[
										1327353,
										1327360
									],
									[
										1327663,
										1327670
									],
									[
										1327897,
										1327904
									],
									[
										1327947,
										1327954
									],
									[
										1328209,
										1328216
									],
									[
										1328678,
										1328685
									],
									[
										1329137,
										1329144
									],
									[
										1329333,
										1329340
									],
									[
										1329426,
										1329433
									],
									[
										1329448,
										1329455
									],
									[
										1329465,
										1329472
									],
									[
										1329487,
										1329494
									],
									[
										1329577,
										1329584
									],
									[
										1329628,
										1329635
									],
									[
										1329721,
										1329728
									],
									[
										1329743,
										1329750
									],
									[
										1329760,
										1329767
									],
									[
										1329782,
										1329789
									],
									[
										1329799,
										1329806
									],
									[
										1329883,
										1329890
									],
									[
										1330092,
										1330099
									],
									[
										1330157,
										1330164
									],
									[
										1330174,
										1330181
									],
									[
										1330196,
										1330203
									],
									[
										1330289,
										1330296
									],
									[
										1330347,
										1330354
									],
									[
										1330364,
										1330371
									],
									[
										1330386,
										1330393
									],
									[
										1330403,
										1330410
									],
									[
										1330490,
										1330497
									],
									[
										1330641,
										1330648
									],
									[
										1330693,
										1330700
									],
									[
										1330781,
										1330788
									],
									[
										1330852,
										1330859
									],
									[
										1330863,
										1330870
									],
									[
										1330949,
										1330956
									],
									[
										1331238,
										1331245
									],
									[
										1331368,
										1331375
									],
									[
										1331656,
										1331663
									],
									[
										1331863,
										1331870
									],
									[
										1331917,
										1331924
									],
									[
										1331950,
										1331957
									],
									[
										1332055,
										1332062
									],
									[
										1332166,
										1332173
									],
									[
										1332230,
										1332237
									],
									[
										1332655,
										1332662
									],
									[
										1332839,
										1332846
									],
									[
										1332957,
										1332964
									],
									[
										1333023,
										1333030
									],
									[
										1333076,
										1333083
									],
									[
										1333107,
										1333114
									],
									[
										1333597,
										1333604
									],
									[
										1333653,
										1333660
									],
									[
										1333688,
										1333695
									],
									[
										1333859,
										1333866
									],
									[
										1333913,
										1333920
									],
									[
										1333946,
										1333953
									],
									[
										1334100,
										1334107
									],
									[
										1334156,
										1334163
									],
									[
										1334191,
										1334198
									],
									[
										1334426,
										1334433
									],
									[
										1334535,
										1334542
									],
									[
										1334557,
										1334564
									],
									[
										1334574,
										1334581
									],
									[
										1334596,
										1334603
									],
									[
										1334719,
										1334726
									],
									[
										1334800,
										1334807
									],
									[
										1334909,
										1334916
									],
									[
										1334931,
										1334938
									],
									[
										1334948,
										1334955
									],
									[
										1334970,
										1334977
									],
									[
										1334987,
										1334994
									],
									[
										1335104,
										1335111
									],
									[
										1335388,
										1335395
									],
									[
										1335469,
										1335476
									],
									[
										1335486,
										1335493
									],
									[
										1335508,
										1335515
									],
									[
										1335634,
										1335641
									],
									[
										1335723,
										1335730
									],
									[
										1335740,
										1335747
									],
									[
										1335762,
										1335769
									],
									[
										1335779,
										1335786
									],
									[
										1335899,
										1335906
									],
									[
										1336125,
										1336132
									],
									[
										1336193,
										1336200
									],
									[
										1336314,
										1336321
									],
									[
										1336431,
										1336438
									],
									[
										1336442,
										1336449
									],
									[
										1336561,
										1336568
									],
									[
										1336925,
										1336932
									],
									[
										1337085,
										1337092
									],
									[
										1337452,
										1337459
									],
									[
										1337737,
										1337744
									],
									[
										1337808,
										1337815
									],
									[
										1337857,
										1337864
									],
									[
										1337992,
										1337999
									],
									[
										1338118,
										1338125
									],
									[
										1338198,
										1338205
									],
									[
										1338699,
										1338706
									],
									[
										1338898,
										1338905
									],
									[
										1339031,
										1339038
									],
									[
										1339127,
										1339134
									],
									[
										1339180,
										1339187
									],
									[
										1339211,
										1339218
									],
									[
										1339777,
										1339784
									],
									[
										1339850,
										1339857
									],
									[
										1339901,
										1339908
									],
									[
										1340133,
										1340140
									],
									[
										1340204,
										1340211
									],
									[
										1340253,
										1340260
									],
									[
										1340468,
										1340475
									],
									[
										1340541,
										1340548
									],
									[
										1340592,
										1340599
									],
									[
										1340859,
										1340866
									],
									[
										1340923,
										1340930
									],
									[
										1341411,
										1341418
									],
									[
										1341521,
										1341528
									],
									[
										1341803,
										1341810
									],
									[
										1341836,
										1341843
									],
									[
										1342215,
										1342222
									],
									[
										1342618,
										1342625
									],
									[
										1342899,
										1342906
									],
									[
										1343045,
										1343052
									],
									[
										1343246,
										1343253
									],
									[
										1343361,
										1343368
									],
									[
										1343616,
										1343623
									],
									[
										1343749,
										1343756
									],
									[
										1343777,
										1343784
									],
									[
										1343821,
										1343828
									],
									[
										1343852,
										1343859
									],
									[
										1343895,
										1343902
									],
									[
										1343925,
										1343932
									],
									[
										1344190,
										1344197
									],
									[
										1344245,
										1344252
									],
									[
										1344300,
										1344307
									],
									[
										1344356,
										1344363
									],
									[
										1344412,
										1344419
									],
									[
										1344467,
										1344474
									],
									[
										1344522,
										1344529
									],
									[
										1344578,
										1344585
									],
									[
										1344635,
										1344642
									],
									[
										1344693,
										1344700
									],
									[
										1344748,
										1344755
									],
									[
										1344804,
										1344811
									],
									[
										1344860,
										1344867
									],
									[
										1344915,
										1344922
									],
									[
										1344971,
										1344978
									],
									[
										1345028,
										1345035
									],
									[
										1345086,
										1345093
									],
									[
										1345141,
										1345148
									],
									[
										1345197,
										1345204
									],
									[
										1345432,
										1345439
									],
									[
										1345454,
										1345461
									],
									[
										1345471,
										1345478
									],
									[
										1345493,
										1345500
									],
									[
										1345529,
										1345536
									],
									[
										1345551,
										1345558
									],
									[
										1345568,
										1345575
									],
									[
										1345590,
										1345597
									],
									[
										1345607,
										1345614
									],
									[
										1345637,
										1345644
									],
									[
										1345654,
										1345661
									],
									[
										1345676,
										1345683
									],
									[
										1345712,
										1345719
									],
									[
										1345729,
										1345736
									],
									[
										1345751,
										1345758
									],
									[
										1345768,
										1345775
									],
									[
										1345802,
										1345809
									],
									[
										1345836,
										1345843
									],
									[
										1345847,
										1345854
									],
									[
										1346061,
										1346068
									],
									[
										1346198,
										1346205
									],
									[
										1346428,
										1346435
									],
									[
										1346615,
										1346622
									],
									[
										1346820,
										1346827
									],
									[
										1347194,
										1347201
									],
									[
										1347421,
										1347428
									],
									[
										1347653,
										1347660
									],
									[
										1347982,
										1347989
									],
									[
										1348105,
										1348112
									],
									[
										1348414,
										1348421
									],
									[
										1348596,
										1348603
									],
									[
										1348780,
										1348787
									],
									[
										1349026,
										1349033
									],
									[
										1349263,
										1349270
									],
									[
										1349635,
										1349642
									],
									[
										1349920,
										1349927
									],
									[
										1350148,
										1350155
									],
									[
										1350489,
										1350496
									],
									[
										1350816,
										1350823
									],
									[
										1350903,
										1350910
									],
									[
										1350959,
										1350966
									],
									[
										1351051,
										1351058
									],
									[
										1351069,
										1351076
									],
									[
										1351082,
										1351089
									],
									[
										1351116,
										1351123
									],
									[
										1351169,
										1351176
									],
									[
										1351183,
										1351190
									],
									[
										1351258,
										1351265
									],
									[
										1351272,
										1351279
									],
									[
										1351319,
										1351326
									],
									[
										1351531,
										1351538
									],
									[
										1351540,
										1351547
									],
									[
										1351626,
										1351633
									],
									[
										1351688,
										1351695
									],
									[
										1351725,
										1351732
									],
									[
										1351777,
										1351784
									],
									[
										1351796,
										1351803
									],
									[
										1351822,
										1351829
									],
									[
										1351852,
										1351859
									],
									[
										1351892,
										1351899
									],
									[
										1351930,
										1351937
									],
									[
										1351986,
										1351993
									],
									[
										1352045,
										1352052
									],
									[
										1352103,
										1352110
									],
									[
										1352306,
										1352313
									],
									[
										1352315,
										1352322
									],
									[
										1352375,
										1352382
									],
									[
										1352394,
										1352401
									],
									[
										1352424,
										1352431
									],
									[
										1352454,
										1352461
									],
									[
										1352491,
										1352498
									],
									[
										1352658,
										1352665
									],
									[
										1352887,
										1352894
									],
									[
										1353017,
										1353024
									],
									[
										1353114,
										1353121
									],
									[
										1353197,
										1353204
									],
									[
										1353235,
										1353242
									],
									[
										1353280,
										1353287
									],
									[
										1353343,
										1353350
									],
									[
										1353393,
										1353400
									],
									[
										1353429,
										1353436
									],
									[
										1353444,
										1353451
									],
									[
										1353458,
										1353465
									],
									[
										1353472,
										1353479
									],
									[
										1353520,
										1353527
									],
									[
										1353596,
										1353603
									],
									[
										1353760,
										1353767
									],
									[
										1353824,
										1353831
									],
									[
										1353918,
										1353925
									],
									[
										1353999,
										1354006
									],
									[
										1354120,
										1354127
									],
									[
										1354153,
										1354160
									],
									[
										1354163,
										1354170
									],
									[
										1354176,
										1354183
									],
									[
										1354337,
										1354344
									],
									[
										1354584,
										1354591
									],
									[
										1354638,
										1354645
									],
									[
										1354765,
										1354772
									],
									[
										1355113,
										1355120
									],
									[
										1355121,
										1355128
									],
									[
										1355146,
										1355153
									],
									[
										1355193,
										1355200
									],
									[
										1355213,
										1355220
									],
									[
										1355255,
										1355262
									],
									[
										1355297,
										1355304
									],
									[
										1355363,
										1355370
									],
									[
										1355429,
										1355436
									],
									[
										1355463,
										1355470
									],
									[
										1355539,
										1355546
									],
									[
										1355593,
										1355600
									],
									[
										1355661,
										1355668
									],
									[
										1355717,
										1355724
									],
									[
										1355953,
										1355960
									],
									[
										1355995,
										1356002
									],
									[
										1356283,
										1356290
									],
									[
										1356352,
										1356359
									],
									[
										1356593,
										1356600
									],
									[
										1356678,
										1356685
									],
									[
										1356870,
										1356877
									],
									[
										1357126,
										1357133
									],
									[
										1357161,
										1357168
									],
									[
										1357210,
										1357217
									],
									[
										1357262,
										1357269
									],
									[
										1357314,
										1357321
									],
									[
										1357365,
										1357372
									],
									[
										1357418,
										1357425
									],
									[
										1357462,
										1357469
									],
									[
										1357521,
										1357528
									],
									[
										1357771,
										1357778
									],
									[
										1357942,
										1357949
									],
									[
										1358054,
										1358061
									],
									[
										1358164,
										1358171
									],
									[
										1358274,
										1358281
									],
									[
										1358614,
										1358621
									],
									[
										1358947,
										1358954
									],
									[
										1359182,
										1359189
									],
									[
										1359393,
										1359400
									],
									[
										1359459,
										1359466
									],
									[
										1359741,
										1359748
									],
									[
										1359962,
										1359969
									],
									[
										1360046,
										1360053
									],
									[
										1360195,
										1360202
									],
									[
										1360417,
										1360424
									],
									[
										1360436,
										1360443
									],
									[
										1360482,
										1360489
									],
									[
										1360572,
										1360579
									],
									[
										1360791,
										1360798
									],
									[
										1361032,
										1361039
									],
									[
										1361358,
										1361365
									],
									[
										1361650,
										1361657
									],
									[
										1362038,
										1362045
									],
									[
										1362359,
										1362366
									],
									[
										1363063,
										1363070
									],
									[
										1363518,
										1363525
									],
									[
										1363646,
										1363653
									],
									[
										1363774,
										1363781
									],
									[
										1363988,
										1363995
									],
									[
										1364367,
										1364374
									],
									[
										1364790,
										1364797
									],
									[
										1364932,
										1364939
									],
									[
										1365274,
										1365281
									],
									[
										1365527,
										1365534
									],
									[
										1365579,
										1365586
									],
									[
										1365756,
										1365763
									],
									[
										1365795,
										1365802
									],
									[
										1365853,
										1365860
									],
									[
										1365911,
										1365918
									],
									[
										1365960,
										1365967
									],
									[
										1366112,
										1366119
									],
									[
										1366346,
										1366353
									],
									[
										1366557,
										1366564
									],
									[
										1366859,
										1366867
									],
									[
										1367115,
										1367123
									],
									[
										1367403,
										1367411
									],
									[
										1367677,
										1367685
									],
									[
										1367928,
										1367936
									],
									[
										1368112,
										1368120
									],
									[
										1368311,
										1368319
									],
									[
										1368574,
										1368582
									],
									[
										1368668,
										1368676
									],
									[
										1368788,
										1368796
									],
									[
										1368887,
										1368895
									],
									[
										1368988,
										1368996
									],
									[
										1369224,
										1369232
									],
									[
										1369448,
										1369456
									],
									[
										1369735,
										1369743
									],
									[
										1370032,
										1370040
									],
									[
										1370238,
										1370246
									],
									[
										1370411,
										1370419
									],
									[
										1370569,
										1370577
									],
									[
										1370730,
										1370738
									],
									[
										1370905,
										1370913
									],
									[
										1371187,
										1371195
									],
									[
										1371415,
										1371423
									],
									[
										1371672,
										1371680
									],
									[
										1371973,
										1371983
									],
									[
										1372235,
										1372245
									],
									[
										1372512,
										1372522
									],
									[
										1372735,
										1372745
									],
									[
										1372960,
										1372978
									],
									[
										1373207,
										1373225
									],
									[
										1373506,
										1373524
									],
									[
										1373965,
										1373983
									],
									[
										1374244,
										1374262
									],
									[
										1374399,
										1374417
									],
									[
										1374752,
										1374770
									],
									[
										1375199,
										1375217
									],
									[
										1375373,
										1375391
									],
									[
										1375480,
										1375498
									],
									[
										1375645,
										1375663
									],
									[
										1375752,
										1375770
									],
									[
										1376192,
										1376227
									],
									[
										1376519,
										1376546
									],
									[
										1376810,
										1376837
									],
									[
										1377417,
										1377444
									],
									[
										1378071,
										1378098
									],
									[
										1378518,
										1378529
									],
									[
										1378670,
										1378681
									],
									[
										1378928,
										1378946
									],
									[
										1379414,
										1379442
									],
									[
										1379843,
										1379868
									],
									[
										1380332,
										1380342
									],
									[
										1380889,
										1380903
									],
									[
										1381182,
										1381196
									],
									[
										1381578,
										1381592
									],
									[
										1381985,
										1381999
									],
									[
										1382273,
										1382284
									],
									[
										1382531,
										1382542
									],
									[
										1382918,
										1382928
									],
									[
										1383279,
										1383287
									],
									[
										1383363,
										1383371
									],
									[
										1383576,
										1383584
									],
									[
										1383588,
										1383596
									],
									[
										1384039,
										1384047
									],
									[
										1384563,
										1384571
									],
									[
										1384882,
										1384890
									],
									[
										1385238,
										1385246
									],
									[
										1385259,
										1385267
									],
									[
										1385295,
										1385303
									],
									[
										1385341,
										1385349
									],
									[
										1385365,
										1385373
									],
									[
										1385595,
										1385603
									],
									[
										1385663,
										1385671
									],
									[
										1385731,
										1385739
									],
									[
										1385799,
										1385807
									],
									[
										1385819,
										1385827
									],
									[
										1386110,
										1386118
									],
									[
										1386131,
										1386139
									],
									[
										1386382,
										1386390
									],
									[
										1386399,
										1386407
									],
									[
										1386431,
										1386439
									],
									[
										1386724,
										1386732
									],
									[
										1387274,
										1387282
									],
									[
										1387511,
										1387519
									],
									[
										1387537,
										1387545
									],
									[
										1387597,
										1387605
									],
									[
										1387776,
										1387784
									],
									[
										1387876,
										1387884
									],
									[
										1387904,
										1387912
									],
									[
										1387970,
										1387978
									],
									[
										1388109,
										1388117
									],
									[
										1388482,
										1388498
									],
									[
										1388723,
										1388739
									],
									[
										1389093,
										1389109
									],
									[
										1389470,
										1389486
									],
									[
										1389865,
										1389881
									],
									[
										1390353,
										1390369
									],
									[
										1390515,
										1390531
									],
									[
										1390641,
										1390657
									],
									[
										1390796,
										1390812
									],
									[
										1390815,
										1390831
									],
									[
										1391119,
										1391135
									],
									[
										1391152,
										1391168
									],
									[
										1391199,
										1391215
									],
									[
										1391380,
										1391396
									],
									[
										1391440,
										1391456
									],
									[
										1391516,
										1391532
									],
									[
										1391743,
										1391759
									],
									[
										1392012,
										1392028
									],
									[
										1392235,
										1392251
									],
									[
										1392473,
										1392489
									],
									[
										1392754,
										1392770
									],
									[
										1392773,
										1392789
									],
									[
										1393052,
										1393068
									],
									[
										1393178,
										1393194
									],
									[
										1393368,
										1393384
									],
									[
										1393388,
										1393404
									],
									[
										1393580,
										1393596
									],
									[
										1393777,
										1393793
									],
									[
										1393807,
										1393823
									],
									[
										1394116,
										1394132
									],
									[
										1394341,
										1394357
									],
									[
										1394401,
										1394417
									],
									[
										1394622,
										1394638
									],
									[
										1394658,
										1394674
									],
									[
										1395141,
										1395157
									],
									[
										1395445,
										1395461
									],
									[
										1395722,
										1395738
									],
									[
										1395980,
										1395996
									],
									[
										1396243,
										1396259
									],
									[
										1396542,
										1396558
									],
									[
										1396948,
										1396964
									],
									[
										1397265,
										1397281
									],
									[
										1397492,
										1397508
									],
									[
										1397767,
										1397783
									],
									[
										1398347,
										1398363
									],
									[
										1398854,
										1398870
									],
									[
										1399023,
										1399039
									],
									[
										1399203,
										1399219
									],
									[
										1399537,
										1399553
									],
									[
										1399740,
										1399756
									],
									[
										1399907,
										1399923
									],
									[
										1400016,
										1400032
									],
									[
										1400039,
										1400055
									],
									[
										1400100,
										1400116
									],
									[
										1400251,
										1400267
									],
									[
										1400360,
										1400376
									],
									[
										1400414,
										1400430
									],
									[
										1400765,
										1400779
									],
									[
										1401107,
										1401120
									],
									[
										1401565,
										1401578
									],
									[
										1402009,
										1402022
									],
									[
										1402629,
										1402646
									],
									[
										1403168,
										1403185
									],
									[
										1403683,
										1403704
									],
									[
										1403837,
										1403858
									],
									[
										1404151,
										1404172
									],
									[
										1404405,
										1404426
									],
									[
										1404834,
										1404858
									],
									[
										1405257,
										1405276
									],
									[
										1405655,
										1405670
									],
									[
										1406036,
										1406041
									],
									[
										1406268,
										1406273
									],
									[
										1406445,
										1406450
									],
									[
										1406622,
										1406627
									],
									[
										1406926,
										1406931
									],
									[
										1407223,
										1407228
									],
									[
										1407521,
										1407526
									],
									[
										1407870,
										1407875
									],
									[
										1408064,
										1408069
									],
									[
										1408097,
										1408102
									],
									[
										1408129,
										1408134
									],
									[
										1408168,
										1408173
									],
									[
										1408202,
										1408207
									],
									[
										1408237,
										1408242
									],
									[
										1408279,
										1408284
									],
									[
										1408312,
										1408317
									],
									[
										1408344,
										1408349
									],
									[
										1408383,
										1408388
									],
									[
										1408417,
										1408422
									],
									[
										1408452,
										1408457
									],
									[
										1408600,
										1408605
									],
									[
										1408836,
										1408841
									],
									[
										1409067,
										1409072
									],
									[
										1409218,
										1409223
									],
									[
										1409407,
										1409412
									],
									[
										1409490,
										1409495
									],
									[
										1409514,
										1409519
									],
									[
										1409581,
										1409586
									],
									[
										1409892,
										1409897
									],
									[
										1409928,
										1409933
									],
									[
										1409993,
										1409998
									],
									[
										1410026,
										1410031
									],
									[
										1410064,
										1410069
									],
									[
										1410131,
										1410136
									],
									[
										1410164,
										1410169
									],
									[
										1410200,
										1410205
									],
									[
										1410265,
										1410270
									],
									[
										1410298,
										1410303
									],
									[
										1410336,
										1410341
									],
									[
										1410403,
										1410408
									],
									[
										1410436,
										1410441
									],
									[
										1410475,
										1410480
									],
									[
										1410543,
										1410548
									],
									[
										1410579,
										1410584
									],
									[
										1410620,
										1410625
									],
									[
										1410690,
										1410695
									],
									[
										1410726,
										1410731
									],
									[
										1410766,
										1410771
									],
									[
										1410835,
										1410840
									],
									[
										1410872,
										1410877
									],
									[
										1410914,
										1410919
									],
									[
										1410985,
										1410990
									],
									[
										1411045,
										1411050
									],
									[
										1411098,
										1411103
									],
									[
										1411135,
										1411140
									],
									[
										1411207,
										1411212
									],
									[
										1411246,
										1411251
									],
									[
										1411320,
										1411325
									],
									[
										1411356,
										1411361
									],
									[
										1411421,
										1411426
									],
									[
										1411454,
										1411459
									],
									[
										1411492,
										1411497
									],
									[
										1411559,
										1411564
									],
									[
										1411592,
										1411597
									],
									[
										1411628,
										1411633
									],
									[
										1411693,
										1411698
									],
									[
										1411726,
										1411731
									],
									[
										1411764,
										1411769
									],
									[
										1411831,
										1411836
									],
									[
										1412020,
										1412025
									],
									[
										1412054,
										1412059
									],
									[
										1412142,
										1412147
									],
									[
										1412178,
										1412183
									],
									[
										1412268,
										1412273
									],
									[
										1412302,
										1412307
									],
									[
										1412390,
										1412395
									],
									[
										1412426,
										1412431
									],
									[
										1412516,
										1412521
									],
									[
										1412553,
										1412558
									],
									[
										1412644,
										1412649
									],
									[
										1412683,
										1412688
									],
									[
										1412776,
										1412781
									],
									[
										1412814,
										1412819
									],
									[
										1412906,
										1412911
									],
									[
										1412946,
										1412951
									],
									[
										1413040,
										1413045
									],
									[
										1413065,
										1413070
									],
									[
										1413144,
										1413149
									],
									[
										1413175,
										1413180
									],
									[
										1413260,
										1413265
									],
									[
										1413293,
										1413298
									],
									[
										1413380,
										1413385
									],
									[
										1413414,
										1413419
									],
									[
										1413502,
										1413507
									],
									[
										1413538,
										1413543
									],
									[
										1413628,
										1413633
									],
									[
										1413662,
										1413667
									],
									[
										1413750,
										1413755
									],
									[
										1413786,
										1413791
									],
									[
										1414048,
										1414053
									],
									[
										1414151,
										1414156
									],
									[
										1414184,
										1414189
									],
									[
										1414248,
										1414253
									],
									[
										1414287,
										1414292
									],
									[
										1414370,
										1414375
									],
									[
										1414411,
										1414416
									],
									[
										1414496,
										1414501
									],
									[
										1414527,
										1414532
									],
									[
										1414557,
										1414562
									],
									[
										1414582,
										1414587
									],
									[
										1414621,
										1414626
									],
									[
										1415036,
										1415041
									],
									[
										1415454,
										1415459
									],
									[
										1415962,
										1415967
									],
									[
										1416029,
										1416034
									],
									[
										1416092,
										1416097
									],
									[
										1416155,
										1416160
									],
									[
										1416218,
										1416223
									],
									[
										1416284,
										1416289
									],
									[
										1416560,
										1416565
									],
									[
										1416922,
										1416927
									],
									[
										1416971,
										1416976
									],
									[
										1417016,
										1417021
									],
									[
										1417071,
										1417076
									],
									[
										1417116,
										1417121
									],
									[
										1417164,
										1417169
									],
									[
										1417751,
										1417756
									],
									[
										1417818,
										1417823
									],
									[
										1417881,
										1417886
									],
									[
										1417944,
										1417949
									],
									[
										1418007,
										1418012
									],
									[
										1418073,
										1418078
									],
									[
										1418349,
										1418354
									],
									[
										1418711,
										1418716
									],
									[
										1418760,
										1418765
									],
									[
										1418805,
										1418810
									],
									[
										1418860,
										1418865
									],
									[
										1418905,
										1418910
									],
									[
										1418953,
										1418958
									],
									[
										1419494,
										1419499
									],
									[
										1419859,
										1419864
									],
									[
										1419944,
										1419949
									],
									[
										1420025,
										1420030
									],
									[
										1420106,
										1420111
									],
									[
										1420187,
										1420192
									],
									[
										1420271,
										1420276
									],
									[
										1420654,
										1420659
									],
									[
										1420739,
										1420744
									],
									[
										1420820,
										1420825
									],
									[
										1420901,
										1420906
									],
									[
										1420982,
										1420987
									],
									[
										1421066,
										1421071
									],
									[
										1421436,
										1421441
									],
									[
										1421844,
										1421849
									],
									[
										1431197,
										1431202
									],
									[
										1431246,
										1431251
									],
									[
										1431291,
										1431296
									],
									[
										1431346,
										1431351
									],
									[
										1431391,
										1431396
									],
									[
										1431439,
										1431444
									],
									[
										1431722,
										1431727
									],
									[
										1431771,
										1431776
									],
									[
										1431816,
										1431821
									],
									[
										1431871,
										1431876
									],
									[
										1431916,
										1431921
									],
									[
										1431964,
										1431969
									],
									[
										1432391,
										1432396
									],
									[
										1432481,
										1432486
									],
									[
										1432567,
										1432572
									],
									[
										1432653,
										1432658
									],
									[
										1432739,
										1432744
									],
									[
										1432828,
										1432833
									],
									[
										1432914,
										1432919
									],
									[
										1433004,
										1433009
									],
									[
										1433090,
										1433095
									],
									[
										1433176,
										1433181
									],
									[
										1433262,
										1433267
									],
									[
										1433351,
										1433356
									],
									[
										1433855,
										1433860
									],
									[
										1433951,
										1433956
									],
									[
										1434005,
										1434010
									],
									[
										1434082,
										1434087
									],
									[
										1434198,
										1434203
									],
									[
										1434232,
										1434237
									],
									[
										1434269,
										1434274
									],
									[
										1434353,
										1434358
									],
									[
										1434398,
										1434403
									],
									[
										1435594,
										1435599
									],
									[
										1435643,
										1435648
									],
									[
										1435688,
										1435693
									],
									[
										1435743,
										1435748
									],
									[
										1435788,
										1435793
									],
									[
										1435836,
										1435841
									],
									[
										1435891,
										1435896
									],
									[
										1435940,
										1435945
									],
									[
										1435985,
										1435990
									],
									[
										1436030,
										1436035
									],
									[
										1436075,
										1436080
									],
									[
										1436123,
										1436128
									],
									[
										1436425,
										1436430
									],
									[
										1436495,
										1436500
									],
									[
										1436561,
										1436566
									],
									[
										1436627,
										1436632
									],
									[
										1436693,
										1436698
									],
									[
										1436762,
										1436767
									],
									[
										1437104,
										1437109
									],
									[
										1437178,
										1437183
									],
									[
										1437348,
										1437353
									],
									[
										1437839,
										1437844
									],
									[
										1437888,
										1437893
									],
									[
										1437933,
										1437938
									],
									[
										1437988,
										1437993
									],
									[
										1438033,
										1438038
									],
									[
										1438081,
										1438086
									],
									[
										1438564,
										1438569
									],
									[
										1438609,
										1438614
									],
									[
										1438871,
										1438876
									],
									[
										1439088,
										1439093
									],
									[
										1439434,
										1439439
									],
									[
										1439763,
										1439768
									],
									[
										1440109,
										1440114
									],
									[
										1440483,
										1440488
									],
									[
										1440532,
										1440537
									],
									[
										1440903,
										1440908
									],
									[
										1441221,
										1441226
									],
									[
										1441261,
										1441266
									],
									[
										1441547,
										1441552
									],
									[
										1441891,
										1441896
									],
									[
										1441940,
										1441945
									],
									[
										1442307,
										1442312
									],
									[
										1442638,
										1442643
									],
									[
										1442821,
										1442826
									],
									[
										1443092,
										1443097
									],
									[
										1443325,
										1443330
									],
									[
										1443536,
										1443541
									],
									[
										1443740,
										1443745
									],
									[
										1443804,
										1443809
									],
									[
										1443877,
										1443882
									],
									[
										1444214,
										1444219
									],
									[
										1444558,
										1444563
									],
									[
										1444921,
										1444926
									],
									[
										1445216,
										1445221
									],
									[
										1445234,
										1445239
									],
									[
										1445519,
										1445524
									],
									[
										1445908,
										1445913
									],
									[
										1446148,
										1446153
									],
									[
										1446516,
										1446521
									],
									[
										1446760,
										1446765
									],
									[
										1446995,
										1447000
									],
									[
										1447286,
										1447291
									],
									[
										1447469,
										1447474
									],
									[
										1447731,
										1447736
									],
									[
										1448043,
										1448048
									],
									[
										1448279,
										1448284
									],
									[
										1448306,
										1448311
									],
									[
										1448512,
										1448517
									],
									[
										1448555,
										1448560
									],
									[
										1448624,
										1448629
									],
									[
										1448661,
										1448666
									],
									[
										1448701,
										1448706
									],
									[
										1448754,
										1448759
									],
									[
										1448808,
										1448813
									],
									[
										1448853,
										1448858
									],
									[
										1448887,
										1448892
									],
									[
										1449082,
										1449087
									],
									[
										1449228,
										1449233
									],
									[
										1449253,
										1449258
									],
									[
										1449396,
										1449401
									],
									[
										1449427,
										1449432
									],
									[
										1449629,
										1449634
									],
									[
										1449660,
										1449665
									],
									[
										1449870,
										1449875
									],
									[
										1449901,
										1449906
									],
									[
										1450141,
										1450146
									],
									[
										1450172,
										1450177
									],
									[
										1450368,
										1450373
									],
									[
										1450660,
										1450665
									],
									[
										1450997,
										1451002
									],
									[
										1451162,
										1451167
									],
									[
										1451209,
										1451214
									],
									[
										1451320,
										1451325
									],
									[
										1451521,
										1451526
									],
									[
										1451574,
										1451579
									],
									[
										1451685,
										1451690
									],
									[
										1451745,
										1451750
									],
									[
										1451900,
										1451905
									],
									[
										1451950,
										1451955
									],
									[
										1452011,
										1452016
									],
									[
										1452167,
										1452172
									],
									[
										1452216,
										1452221
									],
									[
										1452269,
										1452274
									],
									[
										1452431,
										1452436
									],
									[
										1452476,
										1452481
									],
									[
										1452519,
										1452524
									],
									[
										1452620,
										1452625
									],
									[
										1452689,
										1452694
									],
									[
										1452931,
										1452936
									],
									[
										1453191,
										1453196
									],
									[
										1453251,
										1453256
									],
									[
										1453430,
										1453435
									],
									[
										1453498,
										1453503
									],
									[
										1453621,
										1453626
									],
									[
										1453690,
										1453695
									],
									[
										1453937,
										1453942
									],
									[
										1454010,
										1454015
									],
									[
										1454243,
										1454248
									],
									[
										1454410,
										1454415
									],
									[
										1454463,
										1454468
									],
									[
										1454506,
										1454511
									],
									[
										1454607,
										1454612
									],
									[
										1454695,
										1454700
									],
									[
										1454940,
										1454945
									],
									[
										1455249,
										1455254
									],
									[
										1455489,
										1455494
									],
									[
										1455560,
										1455565
									],
									[
										1455636,
										1455641
									],
									[
										1455683,
										1455688
									],
									[
										1455938,
										1455943
									],
									[
										1456009,
										1456014
									],
									[
										1456085,
										1456090
									],
									[
										1456227,
										1456232
									],
									[
										1456298,
										1456303
									],
									[
										1456396,
										1456401
									],
									[
										1456625,
										1456630
									],
									[
										1456684,
										1456689
									],
									[
										1456729,
										1456734
									],
									[
										1456843,
										1456848
									],
									[
										1456923,
										1456928
									],
									[
										1457082,
										1457087
									],
									[
										1457204,
										1457209
									],
									[
										1457327,
										1457332
									],
									[
										1457426,
										1457431
									],
									[
										1457531,
										1457536
									],
									[
										1457667,
										1457672
									],
									[
										1457766,
										1457771
									],
									[
										1457864,
										1457869
									],
									[
										1458019,
										1458024
									],
									[
										1458257,
										1458262
									],
									[
										1458496,
										1458501
									],
									[
										1458712,
										1458717
									],
									[
										1458817,
										1458822
									],
									[
										1459075,
										1459080
									],
									[
										1459296,
										1459301
									],
									[
										1459389,
										1459394
									],
									[
										1459724,
										1459729
									],
									[
										1459769,
										1459774
									],
									[
										1459830,
										1459835
									],
									[
										1460044,
										1460049
									],
									[
										1460089,
										1460094
									],
									[
										1460150,
										1460155
									],
									[
										1460237,
										1460242
									],
									[
										1460498,
										1460503
									],
									[
										1460543,
										1460548
									],
									[
										1460604,
										1460609
									],
									[
										1460722,
										1460727
									],
									[
										1460767,
										1460772
									],
									[
										1460828,
										1460833
									],
									[
										1460876,
										1460881
									],
									[
										1461192,
										1461197
									],
									[
										1461269,
										1461274
									],
									[
										1461334,
										1461339
									],
									[
										1461381,
										1461386
									],
									[
										1461618,
										1461623
									],
									[
										1461695,
										1461700
									],
									[
										1461760,
										1461765
									],
									[
										1461908,
										1461913
									],
									[
										1461985,
										1461990
									],
									[
										1462072,
										1462077
									],
									[
										1462300,
										1462305
									],
									[
										1462345,
										1462350
									],
									[
										1462496,
										1462501
									],
									[
										1462541,
										1462546
									],
									[
										1462703,
										1462708
									],
									[
										1462747,
										1462752
									],
									[
										1462865,
										1462870
									],
									[
										1463156,
										1463161
									],
									[
										1463201,
										1463206
									],
									[
										1463262,
										1463267
									],
									[
										1463401,
										1463406
									],
									[
										1463446,
										1463451
									],
									[
										1463507,
										1463512
									],
									[
										1463563,
										1463568
									],
									[
										1463817,
										1463822
									],
									[
										1463862,
										1463867
									],
									[
										1464034,
										1464039
									],
									[
										1464079,
										1464084
									],
									[
										1464260,
										1464265
									],
									[
										1464304,
										1464309
									],
									[
										1464411,
										1464416
									],
									[
										1464665,
										1464670
									],
									[
										1464706,
										1464711
									],
									[
										1464756,
										1464761
									],
									[
										1465037,
										1465042
									],
									[
										1465102,
										1465107
									],
									[
										1465149,
										1465154
									],
									[
										1465272,
										1465277
									],
									[
										1465353,
										1465358
									],
									[
										1465593,
										1465598
									],
									[
										1465653,
										1465658
									],
									[
										1465753,
										1465758
									],
									[
										1465803,
										1465808
									],
									[
										1466048,
										1466053
									],
									[
										1466238,
										1466243
									],
									[
										1466316,
										1466321
									],
									[
										1466366,
										1466371
									],
									[
										1466771,
										1466776
									],
									[
										1466842,
										1466847
									],
									[
										1466918,
										1466923
									],
									[
										1466965,
										1466970
									],
									[
										1467146,
										1467151
									],
									[
										1467246,
										1467251
									],
									[
										1467461,
										1467466
									],
									[
										1467532,
										1467537
									],
									[
										1467608,
										1467613
									],
									[
										1467655,
										1467660
									],
									[
										1467838,
										1467843
									],
									[
										1468006,
										1468011
									],
									[
										1468057,
										1468062
									],
									[
										1468132,
										1468137
									],
									[
										1468247,
										1468252
									],
									[
										1468611,
										1468616
									],
									[
										1468659,
										1468664
									],
									[
										1468729,
										1468734
									],
									[
										1468826,
										1468831
									],
									[
										1468936,
										1468941
									],
									[
										1469117,
										1469122
									],
									[
										1469224,
										1469229
									],
									[
										1469336,
										1469341
									],
									[
										1469479,
										1469484
									],
									[
										1469538,
										1469543
									],
									[
										1469663,
										1469668
									],
									[
										1469893,
										1469898
									],
									[
										1469979,
										1469984
									],
									[
										1470145,
										1470150
									],
									[
										1470255,
										1470260
									],
									[
										1470369,
										1470374
									],
									[
										1470451,
										1470456
									],
									[
										1470501,
										1470506
									],
									[
										1470751,
										1470756
									],
									[
										1470867,
										1470872
									],
									[
										1471109,
										1471114
									],
									[
										1471196,
										1471201
									],
									[
										1471260,
										1471265
									],
									[
										1471335,
										1471340
									],
									[
										1471388,
										1471393
									],
									[
										1471449,
										1471454
									],
									[
										1471499,
										1471504
									],
									[
										1471546,
										1471551
									],
									[
										1471598,
										1471603
									],
									[
										1471709,
										1471714
									],
									[
										1472134,
										1472139
									],
									[
										1472177,
										1472182
									],
									[
										1472232,
										1472237
									],
									[
										1472270,
										1472275
									],
									[
										1472320,
										1472325
									],
									[
										1472358,
										1472363
									],
									[
										1472408,
										1472413
									],
									[
										1472446,
										1472451
									],
									[
										1472496,
										1472501
									],
									[
										1472534,
										1472539
									],
									[
										1472584,
										1472589
									],
									[
										1472622,
										1472627
									],
									[
										1472672,
										1472677
									],
									[
										1472710,
										1472715
									],
									[
										1472760,
										1472765
									],
									[
										1472798,
										1472803
									],
									[
										1472848,
										1472853
									],
									[
										1472886,
										1472891
									],
									[
										1472936,
										1472941
									],
									[
										1472974,
										1472979
									],
									[
										1473024,
										1473029
									],
									[
										1473062,
										1473067
									],
									[
										1473146,
										1473151
									],
									[
										1473356,
										1473361
									],
									[
										1473401,
										1473406
									],
									[
										1473590,
										1473595
									],
									[
										1473733,
										1473738
									],
									[
										1474023,
										1474028
									],
									[
										1474116,
										1474121
									],
									[
										1474224,
										1474229
									],
									[
										1474505,
										1474510
									],
									[
										1474697,
										1474702
									],
									[
										1474834,
										1474839
									],
									[
										1474926,
										1474931
									],
									[
										1474971,
										1474976
									],
									[
										1475015,
										1475020
									],
									[
										1475059,
										1475064
									],
									[
										1475142,
										1475147
									],
									[
										1475250,
										1475255
									],
									[
										1475543,
										1475548
									],
									[
										1475624,
										1475629
									],
									[
										1475716,
										1475721
									],
									[
										1475776,
										1475781
									],
									[
										1475872,
										1475877
									],
									[
										1476091,
										1476096
									],
									[
										1476128,
										1476133
									],
									[
										1476182,
										1476187
									],
									[
										1476233,
										1476238
									],
									[
										1476307,
										1476312
									],
									[
										1476590,
										1476595
									],
									[
										1476671,
										1476676
									],
									[
										1476763,
										1476768
									],
									[
										1476823,
										1476828
									],
									[
										1476919,
										1476924
									],
									[
										1477159,
										1477164
									],
									[
										1477196,
										1477201
									],
									[
										1477250,
										1477255
									],
									[
										1477301,
										1477306
									],
									[
										1477375,
										1477380
									],
									[
										1477592,
										1477597
									],
									[
										1477642,
										1477647
									],
									[
										1477758,
										1477763
									],
									[
										1477852,
										1477857
									],
									[
										1478067,
										1478072
									],
									[
										1478117,
										1478122
									],
									[
										1478233,
										1478238
									],
									[
										1478327,
										1478332
									],
									[
										1478505,
										1478510
									],
									[
										1478546,
										1478551
									],
									[
										1478591,
										1478596
									],
									[
										1478644,
										1478649
									],
									[
										1478693,
										1478698
									],
									[
										1478844,
										1478849
									],
									[
										1478897,
										1478902
									],
									[
										1478951,
										1478956
									],
									[
										1479126,
										1479131
									],
									[
										1479167,
										1479172
									],
									[
										1479212,
										1479217
									],
									[
										1479265,
										1479270
									],
									[
										1479314,
										1479319
									],
									[
										1479465,
										1479470
									],
									[
										1479518,
										1479523
									],
									[
										1479572,
										1479577
									],
									[
										1479779,
										1479784
									],
									[
										1479856,
										1479861
									],
									[
										1479903,
										1479908
									],
									[
										1479963,
										1479968
									],
									[
										1480149,
										1480154
									],
									[
										1480186,
										1480191
									],
									[
										1480240,
										1480245
									],
									[
										1480291,
										1480296
									],
									[
										1480365,
										1480370
									],
									[
										1480574,
										1480579
									],
									[
										1480611,
										1480616
									],
									[
										1480665,
										1480670
									],
									[
										1480716,
										1480721
									],
									[
										1480820,
										1480825
									],
									[
										1481030,
										1481035
									],
									[
										1481075,
										1481080
									],
									[
										1481223,
										1481228
									],
									[
										1481365,
										1481370
									],
									[
										1481406,
										1481411
									],
									[
										1481448,
										1481453
									],
									[
										1481543,
										1481548
									],
									[
										1481740,
										1481745
									],
									[
										1481821,
										1481826
									],
									[
										1481931,
										1481936
									],
									[
										1481988,
										1481993
									],
									[
										1482091,
										1482096
									],
									[
										1482308,
										1482313
									],
									[
										1482350,
										1482355
									],
									[
										1482393,
										1482398
									],
									[
										1482459,
										1482464
									],
									[
										1482549,
										1482554
									],
									[
										1482810,
										1482815
									],
									[
										1482905,
										1482910
									],
									[
										1483099,
										1483104
									],
									[
										1483203,
										1483208
									],
									[
										1483330,
										1483335
									],
									[
										1483576,
										1483581
									],
									[
										1483655,
										1483660
									],
									[
										1483849,
										1483854
									],
									[
										1483935,
										1483940
									],
									[
										1484098,
										1484103
									],
									[
										1484397,
										1484402
									],
									[
										1484449,
										1484454
									],
									[
										1484494,
										1484499
									],
									[
										1484539,
										1484544
									],
									[
										1484604,
										1484609
									],
									[
										1484695,
										1484700
									],
									[
										1484926,
										1484931
									],
									[
										1484995,
										1485000
									],
									[
										1485043,
										1485048
									],
									[
										1485187,
										1485192
									],
									[
										1485243,
										1485248
									],
									[
										1485313,
										1485318
									],
									[
										1485369,
										1485374
									],
									[
										1485439,
										1485444
									],
									[
										1485524,
										1485529
									],
									[
										1485575,
										1485580
									],
									[
										1485626,
										1485631
									],
									[
										1485708,
										1485713
									],
									[
										1485759,
										1485764
									],
									[
										1485810,
										1485815
									],
									[
										1485892,
										1485897
									],
									[
										1486009,
										1486014
									],
									[
										1486123,
										1486128
									],
									[
										1486176,
										1486181
									],
									[
										1486221,
										1486226
									],
									[
										1486273,
										1486278
									],
									[
										1486322,
										1486327
									],
									[
										1486372,
										1486377
									],
									[
										1486423,
										1486428
									],
									[
										1486487,
										1486492
									],
									[
										1486538,
										1486543
									],
									[
										1486605,
										1486610
									],
									[
										1486653,
										1486658
									],
									[
										1486717,
										1486722
									],
									[
										1486760,
										1486765
									],
									[
										1486948,
										1486953
									],
									[
										1487013,
										1487018
									],
									[
										1487065,
										1487070
									],
									[
										1487149,
										1487154
									],
									[
										1487268,
										1487273
									],
									[
										1487564,
										1487569
									],
									[
										1487640,
										1487645
									],
									[
										1487731,
										1487736
									],
									[
										1487825,
										1487830
									],
									[
										1487928,
										1487933
									],
									[
										1488005,
										1488010
									],
									[
										1488138,
										1488143
									],
									[
										1488207,
										1488212
									],
									[
										1488300,
										1488305
									],
									[
										1488518,
										1488523
									],
									[
										1488583,
										1488588
									],
									[
										1488672,
										1488677
									],
									[
										1488749,
										1488754
									],
									[
										1488877,
										1488882
									],
									[
										1488948,
										1488953
									],
									[
										1489043,
										1489048
									],
									[
										1489120,
										1489125
									],
									[
										1489310,
										1489315
									],
									[
										1489393,
										1489398
									],
									[
										1489552,
										1489557
									],
									[
										1489647,
										1489652
									],
									[
										1489789,
										1489794
									],
									[
										1489866,
										1489871
									],
									[
										1490009,
										1490014
									],
									[
										1490092,
										1490097
									],
									[
										1490169,
										1490174
									],
									[
										1490261,
										1490266
									],
									[
										1490428,
										1490433
									],
									[
										1490481,
										1490486
									],
									[
										1490524,
										1490529
									],
									[
										1490625,
										1490630
									],
									[
										1490697,
										1490702
									],
									[
										1491004,
										1491009
									],
									[
										1491295,
										1491300
									],
									[
										1491360,
										1491365
									],
									[
										1491407,
										1491412
									],
									[
										1491626,
										1491631
									],
									[
										1491691,
										1491696
									],
									[
										1491833,
										1491838
									],
									[
										1491920,
										1491925
									],
									[
										1492228,
										1492233
									],
									[
										1492271,
										1492276
									],
									[
										1492326,
										1492331
									],
									[
										1492364,
										1492369
									],
									[
										1492414,
										1492419
									],
									[
										1492452,
										1492457
									],
									[
										1492502,
										1492507
									],
									[
										1492540,
										1492545
									],
									[
										1492590,
										1492595
									],
									[
										1492628,
										1492633
									],
									[
										1492678,
										1492683
									],
									[
										1492716,
										1492721
									],
									[
										1492766,
										1492771
									],
									[
										1492804,
										1492809
									],
									[
										1492855,
										1492860
									],
									[
										1493126,
										1493131
									],
									[
										1493171,
										1493176
									],
									[
										1493236,
										1493241
									],
									[
										1493438,
										1493443
									],
									[
										1493642,
										1493647
									],
									[
										1493863,
										1493868
									],
									[
										1493895,
										1493900
									],
									[
										1494167,
										1494172
									],
									[
										1494197,
										1494202
									],
									[
										1494226,
										1494231
									],
									[
										1494254,
										1494259
									],
									[
										1494268,
										1494273
									],
									[
										1494280,
										1494285
									],
									[
										1494326,
										1494331
									],
									[
										1494342,
										1494347
									],
									[
										1494375,
										1494380
									],
									[
										1494389,
										1494394
									],
									[
										1494422,
										1494427
									],
									[
										1494456,
										1494461
									],
									[
										1494486,
										1494491
									],
									[
										1494494,
										1494499
									],
									[
										1494524,
										1494529
									],
									[
										1494552,
										1494557
									],
									[
										1494560,
										1494565
									],
									[
										1494596,
										1494601
									],
									[
										1494637,
										1494642
									],
									[
										1494664,
										1494669
									],
									[
										1494678,
										1494683
									],
									[
										1494699,
										1494704
									],
									[
										1494771,
										1494776
									],
									[
										1494798,
										1494803
									],
									[
										1494812,
										1494817
									],
									[
										1494856,
										1494861
									],
									[
										1494901,
										1494906
									],
									[
										1494986,
										1494991
									],
									[
										1495024,
										1495029
									],
									[
										1495040,
										1495045
									],
									[
										1495074,
										1495079
									],
									[
										1495097,
										1495102
									],
									[
										1495135,
										1495140
									],
									[
										1495158,
										1495163
									],
									[
										1495196,
										1495201
									],
									[
										1495224,
										1495229
									],
									[
										1495243,
										1495248
									],
									[
										1495277,
										1495282
									],
									[
										1495302,
										1495307
									],
									[
										1495321,
										1495326
									],
									[
										1495350,
										1495355
									],
									[
										1495375,
										1495380
									],
									[
										1495394,
										1495399
									],
									[
										1495424,
										1495429
									],
									[
										1495449,
										1495454
									],
									[
										1495468,
										1495473
									],
									[
										1495498,
										1495503
									],
									[
										1495557,
										1495562
									],
									[
										1495621,
										1495626
									],
									[
										1495651,
										1495656
									],
									[
										1495661,
										1495666
									],
									[
										1495668,
										1495673
									],
									[
										1495693,
										1495698
									],
									[
										1495721,
										1495726
									],
									[
										1495731,
										1495736
									],
									[
										1495738,
										1495743
									],
									[
										1495809,
										1495814
									],
									[
										1495830,
										1495835
									],
									[
										1495868,
										1495873
									],
									[
										1495889,
										1495894
									],
									[
										1496005,
										1496010
									],
									[
										1496049,
										1496054
									],
									[
										1496069,
										1496074
									],
									[
										1496131,
										1496136
									],
									[
										1496158,
										1496163
									],
									[
										1496489,
										1496494
									],
									[
										1496700,
										1496705
									],
									[
										1496708,
										1496713
									],
									[
										1497035,
										1497040
									],
									[
										1497224,
										1497229
									],
									[
										1497232,
										1497237
									],
									[
										1497557,
										1497562
									],
									[
										1497565,
										1497570
									],
									[
										1497807,
										1497812
									],
									[
										1497822,
										1497827
									],
									[
										1497834,
										1497839
									],
									[
										1497907,
										1497912
									],
									[
										1497925,
										1497930
									],
									[
										1498409,
										1498414
									],
									[
										1498673,
										1498678
									],
									[
										1499068,
										1499073
									],
									[
										1499352,
										1499357
									],
									[
										1499586,
										1499591
									],
									[
										1499832,
										1499837
									],
									[
										1499845,
										1499850
									],
									[
										1499878,
										1499883
									],
									[
										1499902,
										1499907
									],
									[
										1500207,
										1500212
									],
									[
										1500220,
										1500225
									],
									[
										1500292,
										1500297
									],
									[
										1500747,
										1500752
									],
									[
										1500964,
										1500969
									],
									[
										1501017,
										1501022
									],
									[
										1501332,
										1501337
									],
									[
										1501597,
										1501602
									],
									[
										1501760,
										1501765
									],
									[
										1501979,
										1501984
									],
									[
										1502080,
										1502085
									],
									[
										1502153,
										1502158
									],
									[
										1502228,
										1502233
									],
									[
										1502328,
										1502333
									],
									[
										1502397,
										1502402
									],
									[
										1502427,
										1502432
									],
									[
										1502541,
										1502546
									],
									[
										1502556,
										1502561
									],
									[
										1502576,
										1502581
									],
									[
										1502596,
										1502601
									],
									[
										1502644,
										1502649
									],
									[
										1502749,
										1502754
									],
									[
										1502814,
										1502819
									],
									[
										1502857,
										1502862
									],
									[
										1502907,
										1502912
									],
									[
										1503062,
										1503067
									],
									[
										1503128,
										1503133
									],
									[
										1503137,
										1503142
									],
									[
										1503186,
										1503191
									],
									[
										1503297,
										1503302
									],
									[
										1503422,
										1503427
									],
									[
										1503516,
										1503521
									],
									[
										1503535,
										1503540
									],
									[
										1503596,
										1503601
									],
									[
										1503717,
										1503722
									],
									[
										1503786,
										1503791
									],
									[
										1503870,
										1503875
									],
									[
										1503920,
										1503925
									],
									[
										1503963,
										1503968
									],
									[
										1504314,
										1504319
									],
									[
										1504656,
										1504661
									],
									[
										1504733,
										1504738
									],
									[
										1505051,
										1505056
									],
									[
										1505290,
										1505295
									],
									[
										1505595,
										1505600
									],
									[
										1506039,
										1506044
									],
									[
										1506236,
										1506241
									],
									[
										1506545,
										1506550
									],
									[
										1506919,
										1506924
									],
									[
										1507244,
										1507249
									],
									[
										1507503,
										1507508
									],
									[
										1507765,
										1507770
									],
									[
										1507871,
										1507876
									],
									[
										1507904,
										1507909
									],
									[
										1507988,
										1507993
									],
									[
										1508357,
										1508362
									],
									[
										1508659,
										1508664
									],
									[
										1508955,
										1508960
									],
									[
										1509322,
										1509327
									],
									[
										1509423,
										1509428
									],
									[
										1509496,
										1509501
									],
									[
										1509614,
										1509619
									],
									[
										1509971,
										1509976
									],
									[
										1510262,
										1510267
									],
									[
										1510579,
										1510584
									],
									[
										1510844,
										1510849
									],
									[
										1511205,
										1511210
									],
									[
										1511499,
										1511504
									],
									[
										1511772,
										1511777
									],
									[
										1512037,
										1512042
									],
									[
										1512346,
										1512351
									],
									[
										1512722,
										1512727
									],
									[
										1512993,
										1512998
									],
									[
										1513249,
										1513254
									],
									[
										1513569,
										1513574
									],
									[
										1513605,
										1513610
									],
									[
										1514005,
										1514010
									],
									[
										1514338,
										1514343
									],
									[
										1514541,
										1514546
									],
									[
										1514574,
										1514579
									],
									[
										1514604,
										1514609
									],
									[
										1514631,
										1514636
									],
									[
										1514675,
										1514680
									],
									[
										1514782,
										1514787
									],
									[
										1514805,
										1514810
									],
									[
										1514870,
										1514875
									],
									[
										1514957,
										1514962
									],
									[
										1515039,
										1515044
									],
									[
										1515314,
										1515319
									],
									[
										1515517,
										1515522
									],
									[
										1515550,
										1515555
									],
									[
										1515580,
										1515585
									],
									[
										1515607,
										1515612
									],
									[
										1515735,
										1515740
									],
									[
										1515820,
										1515825
									],
									[
										1515845,
										1515850
									],
									[
										1516239,
										1516244
									],
									[
										1516487,
										1516492
									],
									[
										1516686,
										1516691
									],
									[
										1516799,
										1516804
									],
									[
										1517028,
										1517033
									],
									[
										1517172,
										1517177
									],
									[
										1517249,
										1517254
									],
									[
										1517517,
										1517522
									],
									[
										1517550,
										1517555
									],
									[
										1517580,
										1517585
									],
									[
										1517607,
										1517612
									],
									[
										1517650,
										1517655
									],
									[
										1517831,
										1517836
									],
									[
										1517858,
										1517863
									],
									[
										1517927,
										1517932
									],
									[
										1518020,
										1518025
									],
									[
										1518261,
										1518266
									],
									[
										1518296,
										1518301
									],
									[
										1518484,
										1518489
									],
									[
										1518701,
										1518706
									],
									[
										1518736,
										1518741
									],
									[
										1518904,
										1518909
									],
									[
										1519038,
										1519043
									],
									[
										1519323,
										1519328
									],
									[
										1519370,
										1519375
									],
									[
										1519503,
										1519508
									],
									[
										1519635,
										1519640
									],
									[
										1519679,
										1519684
									],
									[
										1520032,
										1520037
									],
									[
										1520355,
										1520360
									],
									[
										1520519,
										1520524
									],
									[
										1520553,
										1520558
									],
									[
										1520571,
										1520576
									],
									[
										1520852,
										1520857
									],
									[
										1521044,
										1521049
									],
									[
										1521159,
										1521164
									],
									[
										1521192,
										1521197
									],
									[
										1521222,
										1521227
									],
									[
										1521257,
										1521262
									],
									[
										1521284,
										1521289
									],
									[
										1521391,
										1521396
									],
									[
										1521443,
										1521448
									],
									[
										1521492,
										1521497
									],
									[
										1521611,
										1521616
									],
									[
										1521764,
										1521769
									],
									[
										1521942,
										1521947
									],
									[
										1521957,
										1521962
									],
									[
										1522198,
										1522203
									],
									[
										1522386,
										1522391
									],
									[
										1522403,
										1522408
									],
									[
										1522454,
										1522459
									],
									[
										1522718,
										1522723
									],
									[
										1522881,
										1522886
									],
									[
										1523040,
										1523045
									],
									[
										1523275,
										1523280
									],
									[
										1523421,
										1523426
									],
									[
										1523589,
										1523594
									],
									[
										1523731,
										1523736
									],
									[
										1523896,
										1523901
									],
									[
										1524036,
										1524041
									],
									[
										1524179,
										1524184
									],
									[
										1524318,
										1524323
									],
									[
										1524509,
										1524514
									],
									[
										1524701,
										1524706
									],
									[
										1524979,
										1524984
									],
									[
										1525009,
										1525014
									],
									[
										1525138,
										1525143
									],
									[
										1525234,
										1525239
									],
									[
										1525293,
										1525298
									],
									[
										1525381,
										1525386
									],
									[
										1525526,
										1525531
									],
									[
										1525550,
										1525555
									],
									[
										1525622,
										1525627
									],
									[
										1525784,
										1525789
									],
									[
										1525860,
										1525865
									],
									[
										1525968,
										1525973
									],
									[
										1526145,
										1526150
									],
									[
										1526188,
										1526193
									],
									[
										1526372,
										1526377
									],
									[
										1526643,
										1526648
									],
									[
										1526716,
										1526721
									],
									[
										1526779,
										1526784
									],
									[
										1526847,
										1526852
									],
									[
										1526988,
										1526993
									],
									[
										1527306,
										1527311
									],
									[
										1527504,
										1527509
									],
									[
										1527537,
										1527542
									],
									[
										1527567,
										1527572
									],
									[
										1527602,
										1527607
									],
									[
										1527629,
										1527634
									],
									[
										1527810,
										1527815
									],
									[
										1527992,
										1527997
									],
									[
										1528321,
										1528326
									],
									[
										1528354,
										1528359
									],
									[
										1528384,
										1528389
									],
									[
										1528411,
										1528416
									],
									[
										1528556,
										1528561
									],
									[
										1528618,
										1528623
									],
									[
										1528697,
										1528702
									],
									[
										1528908,
										1528913
									],
									[
										1529023,
										1529028
									],
									[
										1529095,
										1529100
									],
									[
										1529329,
										1529334
									],
									[
										1529359,
										1529364
									],
									[
										1529404,
										1529409
									],
									[
										1529453,
										1529458
									],
									[
										1529508,
										1529513
									],
									[
										1529554,
										1529559
									],
									[
										1529861,
										1529866
									],
									[
										1530083,
										1530088
									],
									[
										1530403,
										1530408
									],
									[
										1530657,
										1530662
									],
									[
										1530825,
										1530830
									],
									[
										1530855,
										1530860
									],
									[
										1531013,
										1531018
									],
									[
										1531300,
										1531305
									],
									[
										1531398,
										1531403
									],
									[
										1531568,
										1531573
									],
									[
										1531727,
										1531732
									],
									[
										1531921,
										1531926
									],
									[
										1532076,
										1532081
									],
									[
										1532357,
										1532362
									],
									[
										1532547,
										1532552
									],
									[
										1532674,
										1532679
									],
									[
										1532776,
										1532781
									],
									[
										1532936,
										1532941
									],
									[
										1533282,
										1533287
									],
									[
										1533536,
										1533541
									],
									[
										1533709,
										1533714
									],
									[
										1533869,
										1533874
									],
									[
										1533904,
										1533909
									],
									[
										1533997,
										1534002
									],
									[
										1534213,
										1534218
									],
									[
										1534436,
										1534441
									],
									[
										1534722,
										1534727
									],
									[
										1534895,
										1534900
									],
									[
										1535284,
										1535289
									],
									[
										1535297,
										1535302
									],
									[
										1535330,
										1535335
									],
									[
										1535354,
										1535359
									],
									[
										1535659,
										1535664
									],
									[
										1535672,
										1535677
									],
									[
										1535744,
										1535749
									],
									[
										1536199,
										1536204
									],
									[
										1536416,
										1536421
									],
									[
										1536469,
										1536474
									],
									[
										1536784,
										1536789
									],
									[
										1537049,
										1537054
									],
									[
										1537212,
										1537217
									],
									[
										1537431,
										1537436
									],
									[
										1537532,
										1537537
									],
									[
										1537605,
										1537610
									],
									[
										1537680,
										1537685
									],
									[
										1537780,
										1537785
									],
									[
										1537849,
										1537854
									],
									[
										1537879,
										1537884
									],
									[
										1537993,
										1537998
									],
									[
										1538008,
										1538013
									],
									[
										1538028,
										1538033
									],
									[
										1538048,
										1538053
									],
									[
										1538096,
										1538101
									],
									[
										1538201,
										1538206
									],
									[
										1538266,
										1538271
									],
									[
										1538309,
										1538314
									],
									[
										1538359,
										1538364
									],
									[
										1538514,
										1538519
									],
									[
										1538580,
										1538585
									],
									[
										1538589,
										1538594
									],
									[
										1538638,
										1538643
									],
									[
										1538749,
										1538754
									],
									[
										1538874,
										1538879
									],
									[
										1538968,
										1538973
									],
									[
										1538987,
										1538992
									],
									[
										1539048,
										1539053
									],
									[
										1539169,
										1539174
									],
									[
										1539238,
										1539243
									],
									[
										1539322,
										1539327
									],
									[
										1539372,
										1539377
									],
									[
										1539415,
										1539420
									],
									[
										1539766,
										1539771
									],
									[
										1540108,
										1540113
									],
									[
										1540185,
										1540190
									],
									[
										1540503,
										1540508
									],
									[
										1540742,
										1540747
									],
									[
										1541047,
										1541052
									],
									[
										1541491,
										1541496
									],
									[
										1541688,
										1541693
									],
									[
										1541997,
										1542002
									],
									[
										1542371,
										1542376
									],
									[
										1542696,
										1542701
									],
									[
										1542955,
										1542960
									],
									[
										1543217,
										1543222
									],
									[
										1543323,
										1543328
									],
									[
										1543356,
										1543361
									],
									[
										1543440,
										1543445
									],
									[
										1543809,
										1543814
									],
									[
										1544111,
										1544116
									],
									[
										1544407,
										1544412
									],
									[
										1544774,
										1544779
									],
									[
										1544875,
										1544880
									],
									[
										1544948,
										1544953
									],
									[
										1545066,
										1545071
									],
									[
										1545423,
										1545428
									],
									[
										1545714,
										1545719
									],
									[
										1546031,
										1546036
									],
									[
										1546296,
										1546301
									],
									[
										1546657,
										1546662
									],
									[
										1546951,
										1546956
									],
									[
										1547224,
										1547229
									],
									[
										1547489,
										1547494
									],
									[
										1547798,
										1547803
									],
									[
										1548174,
										1548179
									],
									[
										1548445,
										1548450
									],
									[
										1548701,
										1548706
									],
									[
										1549021,
										1549026
									],
									[
										1549057,
										1549062
									],
									[
										1549457,
										1549462
									],
									[
										1549790,
										1549795
									],
									[
										1549993,
										1549998
									],
									[
										1550026,
										1550031
									],
									[
										1550056,
										1550061
									],
									[
										1550083,
										1550088
									],
									[
										1550127,
										1550132
									],
									[
										1550234,
										1550239
									],
									[
										1550257,
										1550262
									],
									[
										1550322,
										1550327
									],
									[
										1550409,
										1550414
									],
									[
										1550491,
										1550496
									],
									[
										1550766,
										1550771
									],
									[
										1550969,
										1550974
									],
									[
										1551002,
										1551007
									],
									[
										1551032,
										1551037
									],
									[
										1551059,
										1551064
									],
									[
										1551187,
										1551192
									],
									[
										1551272,
										1551277
									],
									[
										1551297,
										1551302
									],
									[
										1551691,
										1551696
									],
									[
										1551939,
										1551944
									],
									[
										1552138,
										1552143
									],
									[
										1552251,
										1552256
									],
									[
										1552480,
										1552485
									],
									[
										1552624,
										1552629
									],
									[
										1552701,
										1552706
									],
									[
										1552969,
										1552974
									],
									[
										1553002,
										1553007
									],
									[
										1553032,
										1553037
									],
									[
										1553059,
										1553064
									],
									[
										1553102,
										1553107
									],
									[
										1553283,
										1553288
									],
									[
										1553310,
										1553315
									],
									[
										1553379,
										1553384
									],
									[
										1553472,
										1553477
									],
									[
										1553713,
										1553718
									],
									[
										1553748,
										1553753
									],
									[
										1553936,
										1553941
									],
									[
										1554153,
										1554158
									],
									[
										1554188,
										1554193
									],
									[
										1554356,
										1554361
									],
									[
										1554490,
										1554495
									],
									[
										1554775,
										1554780
									],
									[
										1554822,
										1554827
									],
									[
										1554955,
										1554960
									],
									[
										1555087,
										1555092
									],
									[
										1555131,
										1555136
									],
									[
										1555484,
										1555489
									],
									[
										1555807,
										1555812
									],
									[
										1555971,
										1555976
									],
									[
										1556005,
										1556010
									],
									[
										1556023,
										1556028
									],
									[
										1556304,
										1556309
									],
									[
										1556496,
										1556501
									],
									[
										1556611,
										1556616
									],
									[
										1556644,
										1556649
									],
									[
										1556674,
										1556679
									],
									[
										1556709,
										1556714
									],
									[
										1556736,
										1556741
									],
									[
										1556843,
										1556848
									],
									[
										1556895,
										1556900
									],
									[
										1556944,
										1556949
									],
									[
										1557063,
										1557068
									],
									[
										1557216,
										1557221
									],
									[
										1557394,
										1557399
									],
									[
										1557409,
										1557414
									],
									[
										1557650,
										1557655
									],
									[
										1557838,
										1557843
									],
									[
										1557855,
										1557860
									],
									[
										1557906,
										1557911
									],
									[
										1558170,
										1558175
									],
									[
										1558333,
										1558338
									],
									[
										1558492,
										1558497
									],
									[
										1558727,
										1558732
									],
									[
										1558873,
										1558878
									],
									[
										1559041,
										1559046
									],
									[
										1559183,
										1559188
									],
									[
										1559348,
										1559353
									],
									[
										1559488,
										1559493
									],
									[
										1559631,
										1559636
									],
									[
										1559770,
										1559775
									],
									[
										1559961,
										1559966
									],
									[
										1560153,
										1560158
									],
									[
										1560431,
										1560436
									],
									[
										1560461,
										1560466
									],
									[
										1560590,
										1560595
									],
									[
										1560686,
										1560691
									],
									[
										1560745,
										1560750
									],
									[
										1560833,
										1560838
									],
									[
										1560978,
										1560983
									],
									[
										1561002,
										1561007
									],
									[
										1561074,
										1561079
									],
									[
										1561236,
										1561241
									],
									[
										1561312,
										1561317
									],
									[
										1561420,
										1561425
									],
									[
										1561597,
										1561602
									],
									[
										1561640,
										1561645
									],
									[
										1561824,
										1561829
									],
									[
										1562095,
										1562100
									],
									[
										1562168,
										1562173
									],
									[
										1562231,
										1562236
									],
									[
										1562299,
										1562304
									],
									[
										1562440,
										1562445
									],
									[
										1562758,
										1562763
									],
									[
										1562956,
										1562961
									],
									[
										1562989,
										1562994
									],
									[
										1563019,
										1563024
									],
									[
										1563054,
										1563059
									],
									[
										1563081,
										1563086
									],
									[
										1563262,
										1563267
									],
									[
										1563444,
										1563449
									],
									[
										1563773,
										1563778
									],
									[
										1563806,
										1563811
									],
									[
										1563836,
										1563841
									],
									[
										1563863,
										1563868
									],
									[
										1564008,
										1564013
									],
									[
										1564070,
										1564075
									],
									[
										1564149,
										1564154
									],
									[
										1564360,
										1564365
									],
									[
										1564475,
										1564480
									],
									[
										1564547,
										1564552
									],
									[
										1564781,
										1564786
									],
									[
										1564811,
										1564816
									],
									[
										1564856,
										1564861
									],
									[
										1564905,
										1564910
									],
									[
										1564960,
										1564965
									],
									[
										1565006,
										1565011
									],
									[
										1565313,
										1565318
									],
									[
										1565535,
										1565540
									],
									[
										1565855,
										1565860
									],
									[
										1566109,
										1566114
									],
									[
										1566277,
										1566282
									],
									[
										1566307,
										1566312
									],
									[
										1566465,
										1566470
									],
									[
										1566752,
										1566757
									],
									[
										1566850,
										1566855
									],
									[
										1567020,
										1567025
									],
									[
										1567179,
										1567184
									],
									[
										1567373,
										1567378
									],
									[
										1567528,
										1567533
									],
									[
										1567809,
										1567814
									],
									[
										1567999,
										1568004
									],
									[
										1568126,
										1568131
									],
									[
										1568228,
										1568233
									],
									[
										1568388,
										1568393
									],
									[
										1568734,
										1568739
									],
									[
										1568988,
										1568993
									],
									[
										1569161,
										1569166
									],
									[
										1569321,
										1569326
									],
									[
										1569356,
										1569361
									],
									[
										1569449,
										1569454
									],
									[
										1569665,
										1569670
									],
									[
										1569888,
										1569893
									],
									[
										1570256,
										1570278
									],
									[
										1570722,
										1570744
									],
									[
										1570997,
										1571019
									],
									[
										1571295,
										1571317
									],
									[
										1571421,
										1571443
									],
									[
										1571702,
										1571724
									],
									[
										1571919,
										1571941
									],
									[
										1572140,
										1572162
									],
									[
										1572176,
										1572198
									],
									[
										1572659,
										1572681
									],
									[
										1573082,
										1573104
									],
									[
										1573357,
										1573379
									],
									[
										1573937,
										1573959
									],
									[
										1574444,
										1574466
									],
									[
										1574613,
										1574635
									],
									[
										1574793,
										1574815
									],
									[
										1575127,
										1575149
									],
									[
										1575387,
										1575409
									],
									[
										1575496,
										1575518
									],
									[
										1575780,
										1575796
									],
									[
										1576010,
										1576026
									],
									[
										1576444,
										1576464
									],
									[
										1576758,
										1576778
									],
									[
										1577057,
										1577077
									],
									[
										1577317,
										1577337
									],
									[
										1577617,
										1577620
									],
									[
										1577999,
										1578002
									],
									[
										1578305,
										1578308
									],
									[
										1578614,
										1578617
									],
									[
										1578645,
										1578648
									],
									[
										1578686,
										1578689
									],
									[
										1578706,
										1578709
									],
									[
										1578747,
										1578750
									],
									[
										1578766,
										1578769
									],
									[
										1578963,
										1578966
									],
									[
										1579282,
										1579285
									],
									[
										1579315,
										1579318
									],
									[
										1579347,
										1579350
									],
									[
										1579774,
										1579777
									],
									[
										1579786,
										1579789
									],
									[
										1579850,
										1579853
									],
									[
										1579881,
										1579884
									],
									[
										1579932,
										1579935
									],
									[
										1579944,
										1579947
									],
									[
										1580017,
										1580020
									],
									[
										1580057,
										1580060
									],
									[
										1580308,
										1580311
									],
									[
										1580357,
										1580360
									],
									[
										1580697,
										1580700
									],
									[
										1580793,
										1580796
									],
									[
										1580899,
										1580902
									],
									[
										1580995,
										1580998
									],
									[
										1581272,
										1581275
									],
									[
										1581423,
										1581426
									],
									[
										1581436,
										1581439
									],
									[
										1581452,
										1581455
									],
									[
										1581491,
										1581494
									],
									[
										1581516,
										1581519
									],
									[
										1581921,
										1581924
									],
									[
										1581935,
										1581938
									],
									[
										1581960,
										1581963
									],
									[
										1581974,
										1581977
									],
									[
										1582339,
										1582341
									],
									[
										1582593,
										1582595
									],
									[
										1582789,
										1582791
									],
									[
										1583085,
										1583087
									],
									[
										1583403,
										1583405
									],
									[
										1583566,
										1583568
									],
									[
										1583582,
										1583584
									],
									[
										1583812,
										1583814
									],
									[
										1583947,
										1583949
									],
									[
										1584161,
										1584163
									],
									[
										1584302,
										1584304
									],
									[
										1584316,
										1584318
									],
									[
										1584464,
										1584466
									],
									[
										1584933,
										1584935
									],
									[
										1585123,
										1585125
									],
									[
										1585188,
										1585190
									],
									[
										1585436,
										1585438
									],
									[
										1585518,
										1585520
									],
									[
										1585824,
										1585826
									],
									[
										1586179,
										1586181
									],
									[
										1586373,
										1586375
									],
									[
										1586441,
										1586443
									],
									[
										1586618,
										1586620
									],
									[
										1586721,
										1586723
									],
									[
										1587006,
										1587008
									],
									[
										1587093,
										1587095
									],
									[
										1587434,
										1587436
									],
									[
										1587598,
										1587600
									],
									[
										1587813,
										1587815
									],
									[
										1588106,
										1588108
									],
									[
										1588215,
										1588217
									],
									[
										1588433,
										1588435
									],
									[
										1588474,
										1588476
									],
									[
										1588678,
										1588680
									],
									[
										1588856,
										1588858
									],
									[
										1589149,
										1589151
									],
									[
										1589258,
										1589260
									],
									[
										1589476,
										1589478
									],
									[
										1589517,
										1589519
									],
									[
										1589706,
										1589708
									],
									[
										1589888,
										1589890
									],
									[
										1590016,
										1590018
									],
									[
										1590275,
										1590277
									],
									[
										1590396,
										1590398
									],
									[
										1590420,
										1590422
									],
									[
										1590454,
										1590456
									],
									[
										1590538,
										1590540
									],
									[
										1590579,
										1590581
									],
									[
										1590816,
										1590818
									],
									[
										1590833,
										1590835
									],
									[
										1590987,
										1590989
									],
									[
										1590993,
										1590995
									],
									[
										1591097,
										1591099
									],
									[
										1591197,
										1591199
									],
									[
										1591211,
										1591213
									],
									[
										1591351,
										1591353
									],
									[
										1591467,
										1591469
									],
									[
										1591475,
										1591477
									],
									[
										1591681,
										1591683
									],
									[
										1591835,
										1591837
									],
									[
										1591841,
										1591843
									],
									[
										1591945,
										1591947
									],
									[
										1592075,
										1592077
									],
									[
										1592089,
										1592091
									],
									[
										1592292,
										1592294
									],
									[
										1592308,
										1592310
									],
									[
										1592349,
										1592351
									],
									[
										1592568,
										1592570
									],
									[
										1592744,
										1592746
									],
									[
										1592917,
										1592919
									],
									[
										1592923,
										1592925
									],
									[
										1593027,
										1593029
									],
									[
										1593189,
										1593191
									],
									[
										1593432,
										1593434
									],
									[
										1593448,
										1593450
									],
									[
										1593489,
										1593491
									],
									[
										1594113,
										1594115
									],
									[
										1594511,
										1594513
									],
									[
										1594896,
										1594898
									],
									[
										1595035,
										1595037
									],
									[
										1595227,
										1595229
									],
									[
										1595496,
										1595498
									],
									[
										1595639,
										1595641
									],
									[
										1595722,
										1595724
									],
									[
										1595823,
										1595825
									],
									[
										1595923,
										1595925
									],
									[
										1595940,
										1595942
									],
									[
										1595993,
										1595995
									],
									[
										1596231,
										1596233
									],
									[
										1596473,
										1596475
									],
									[
										1596814,
										1596816
									],
									[
										1597047,
										1597049
									],
									[
										1597198,
										1597200
									],
									[
										1597217,
										1597219
									],
									[
										1597300,
										1597302
									],
									[
										1597456,
										1597458
									],
									[
										1597708,
										1597710
									],
									[
										1598053,
										1598055
									],
									[
										1598113,
										1598115
									],
									[
										1598241,
										1598243
									],
									[
										1598463,
										1598465
									],
									[
										1598502,
										1598504
									],
									[
										1598523,
										1598525
									],
									[
										1598582,
										1598584
									],
									[
										1598752,
										1598754
									],
									[
										1598912,
										1598914
									],
									[
										1599155,
										1599157
									],
									[
										1599194,
										1599196
									],
									[
										1599244,
										1599246
									],
									[
										1599409,
										1599411
									],
									[
										1599474,
										1599476
									],
									[
										1599536,
										1599538
									],
									[
										1599598,
										1599600
									],
									[
										1599665,
										1599667
									],
									[
										1599728,
										1599730
									],
									[
										1599790,
										1599792
									],
									[
										1599862,
										1599864
									],
									[
										1599930,
										1599932
									],
									[
										1599997,
										1599999
									],
									[
										1600066,
										1600068
									],
									[
										1600127,
										1600129
									],
									[
										1600201,
										1600203
									],
									[
										1600267,
										1600269
									],
									[
										1600331,
										1600333
									],
									[
										1600393,
										1600395
									],
									[
										1600596,
										1600598
									],
									[
										1600658,
										1600660
									],
									[
										1600727,
										1600729
									],
									[
										1600794,
										1600796
									],
									[
										1600865,
										1600867
									],
									[
										1600941,
										1600943
									],
									[
										1601106,
										1601108
									],
									[
										1601220,
										1601222
									],
									[
										1601309,
										1601311
									],
									[
										1601502,
										1601504
									],
									[
										1601705,
										1601707
									],
									[
										1601932,
										1601934
									],
									[
										1602160,
										1602162
									],
									[
										1602376,
										1602378
									],
									[
										1602536,
										1602538
									],
									[
										1602690,
										1602692
									],
									[
										1602863,
										1602865
									],
									[
										1603031,
										1603033
									],
									[
										1603239,
										1603241
									],
									[
										1603490,
										1603492
									],
									[
										1603747,
										1603749
									],
									[
										1603903,
										1603905
									],
									[
										1604053,
										1604055
									],
									[
										1604208,
										1604210
									],
									[
										1604450,
										1604452
									],
									[
										1604606,
										1604608
									],
									[
										1604796,
										1604798
									],
									[
										1605144,
										1605146
									],
									[
										1605304,
										1605306
									],
									[
										1605524,
										1605526
									],
									[
										1605681,
										1605683
									],
									[
										1605839,
										1605841
									],
									[
										1605992,
										1605994
									],
									[
										1606129,
										1606131
									],
									[
										1606281,
										1606283
									],
									[
										1606445,
										1606447
									],
									[
										1606599,
										1606601
									],
									[
										1606844,
										1606846
									],
									[
										1607010,
										1607012
									],
									[
										1607172,
										1607174
									],
									[
										1607384,
										1607386
									],
									[
										1607563,
										1607565
									],
									[
										1607727,
										1607729
									],
									[
										1607895,
										1607897
									],
									[
										1608085,
										1608087
									],
									[
										1608279,
										1608281
									],
									[
										1608568,
										1608570
									],
									[
										1608770,
										1608772
									],
									[
										1609033,
										1609035
									],
									[
										1609241,
										1609243
									],
									[
										1609435,
										1609437
									],
									[
										1609685,
										1609687
									],
									[
										1609896,
										1609898
									],
									[
										1609979,
										1609981
									],
									[
										1610153,
										1610155
									],
									[
										1610756,
										1610758
									],
									[
										1610799,
										1610801
									],
									[
										1610981,
										1610983
									],
									[
										1611025,
										1611027
									],
									[
										1611219,
										1611221
									],
									[
										1611358,
										1611360
									],
									[
										1611609,
										1611611
									],
									[
										1611746,
										1611748
									],
									[
										1612019,
										1612021
									],
									[
										1612188,
										1612190
									],
									[
										1612409,
										1612411
									],
									[
										1612576,
										1612578
									],
									[
										1612812,
										1612814
									],
									[
										1613030,
										1613032
									],
									[
										1613170,
										1613172
									],
									[
										1613486,
										1613488
									],
									[
										1613724,
										1613726
									],
									[
										1613768,
										1613770
									],
									[
										1613983,
										1613985
									],
									[
										1614190,
										1614192
									],
									[
										1614227,
										1614229
									],
									[
										1614266,
										1614268
									],
									[
										1614295,
										1614297
									],
									[
										1614483,
										1614485
									],
									[
										1614496,
										1614498
									],
									[
										1614595,
										1614597
									],
									[
										1614921,
										1614923
									],
									[
										1614934,
										1614936
									],
									[
										1614948,
										1614950
									],
									[
										1614964,
										1614966
									],
									[
										1615026,
										1615028
									],
									[
										1615049,
										1615051
									],
									[
										1615305,
										1615307
									],
									[
										1615318,
										1615320
									],
									[
										1615332,
										1615334
									],
									[
										1615348,
										1615350
									],
									[
										1615420,
										1615422
									],
									[
										1615453,
										1615455
									],
									[
										1615816,
										1615818
									],
									[
										1616164,
										1616166
									],
									[
										1616510,
										1616512
									],
									[
										1616712,
										1616714
									],
									[
										1616922,
										1616924
									],
									[
										1617148,
										1617150
									],
									[
										1617473,
										1617475
									],
									[
										1617767,
										1617769
									],
									[
										1618097,
										1618099
									],
									[
										1618525,
										1618527
									],
									[
										1618900,
										1618902
									],
									[
										1618947,
										1618949
									],
									[
										1619326,
										1619328
									],
									[
										1619342,
										1619344
									],
									[
										1619752,
										1619754
									],
									[
										1619774,
										1619776
									],
									[
										1620089,
										1620091
									],
									[
										1620400,
										1620402
									],
									[
										1620726,
										1620728
									],
									[
										1620822,
										1620824
									],
									[
										1621176,
										1621178
									],
									[
										1621443,
										1621445
									],
									[
										1621648,
										1621650
									],
									[
										1621852,
										1621854
									],
									[
										1621969,
										1621971
									],
									[
										1622142,
										1622144
									],
									[
										1622167,
										1622169
									],
									[
										1622352,
										1622354
									],
									[
										1622656,
										1622658
									],
									[
										1622762,
										1622764
									],
									[
										1622825,
										1622827
									],
									[
										1623243,
										1623245
									],
									[
										1623411,
										1623413
									],
									[
										1623497,
										1623499
									],
									[
										1623993,
										1623995
									],
									[
										1624096,
										1624098
									],
									[
										1624129,
										1624131
									],
									[
										1624160,
										1624162
									],
									[
										1624191,
										1624193
									],
									[
										1624407,
										1624409
									],
									[
										1624691,
										1624693
									],
									[
										1624958,
										1624960
									],
									[
										1625014,
										1625016
									],
									[
										1625074,
										1625076
									],
									[
										1625357,
										1625359
									],
									[
										1625714,
										1625716
									],
									[
										1626118,
										1626120
									],
									[
										1626377,
										1626379
									],
									[
										1626806,
										1626808
									],
									[
										1627113,
										1627115
									],
									[
										1627133,
										1627135
									],
									[
										1627163,
										1627165
									],
									[
										1627196,
										1627198
									],
									[
										1627267,
										1627269
									],
									[
										1627671,
										1627673
									],
									[
										1627713,
										1627715
									],
									[
										1628079,
										1628081
									],
									[
										1628122,
										1628124
									],
									[
										1628465,
										1628467
									],
									[
										1628734,
										1628736
									],
									[
										1629010,
										1629012
									],
									[
										1629355,
										1629357
									],
									[
										1629830,
										1629832
									],
									[
										1630145,
										1630147
									],
									[
										1630440,
										1630442
									],
									[
										1630621,
										1630623
									],
									[
										1630945,
										1630947
									],
									[
										1631341,
										1631343
									],
									[
										1631648,
										1631650
									],
									[
										1631882,
										1631884
									],
									[
										1632182,
										1632184
									],
									[
										1632425,
										1632427
									],
									[
										1632841,
										1632843
									],
									[
										1633070,
										1633072
									],
									[
										1633330,
										1633332
									],
									[
										1633511,
										1633513
									],
									[
										1633741,
										1633743
									],
									[
										1633796,
										1633798
									],
									[
										1633908,
										1633910
									],
									[
										1634051,
										1634053
									],
									[
										1634154,
										1634156
									],
									[
										1634503,
										1634505
									],
									[
										1634999,
										1635001
									],
									[
										1635425,
										1635427
									],
									[
										1635631,
										1635633
									],
									[
										1635936,
										1635938
									],
									[
										1636276,
										1636278
									],
									[
										1636521,
										1636523
									],
									[
										1636737,
										1636739
									],
									[
										1636765,
										1636767
									],
									[
										1636962,
										1636964
									],
									[
										1637191,
										1637193
									],
									[
										1637499,
										1637501
									],
									[
										1637548,
										1637550
									],
									[
										1637720,
										1637722
									],
									[
										1638101,
										1638103
									],
									[
										1638394,
										1638396
									],
									[
										1638457,
										1638459
									],
									[
										1638616,
										1638618
									],
									[
										1638717,
										1638719
									],
									[
										1638897,
										1638899
									],
									[
										1639145,
										1639147
									],
									[
										1639287,
										1639289
									],
									[
										1639338,
										1639340
									],
									[
										1639349,
										1639351
									],
									[
										1639729,
										1639731
									],
									[
										1639862,
										1639864
									],
									[
										1639869,
										1639871
									],
									[
										1639907,
										1639909
									],
									[
										1639935,
										1639937
									],
									[
										1640178,
										1640180
									],
									[
										1640338,
										1640340
									],
									[
										1640487,
										1640489
									],
									[
										1640673,
										1640675
									],
									[
										1640822,
										1640824
									],
									[
										1641011,
										1641013
									],
									[
										1641156,
										1641158
									],
									[
										1641454,
										1641456
									],
									[
										1641678,
										1641680
									],
									[
										1641708,
										1641710
									],
									[
										1641851,
										1641853
									],
									[
										1641894,
										1641896
									],
									[
										1642133,
										1642135
									],
									[
										1642322,
										1642324
									],
									[
										1642514,
										1642516
									],
									[
										1642799,
										1642801
									],
									[
										1642814,
										1642816
									],
									[
										1643076,
										1643078
									],
									[
										1643399,
										1643401
									],
									[
										1643774,
										1643776
									],
									[
										1643819,
										1643821
									],
									[
										1643951,
										1643953
									],
									[
										1644267,
										1644269
									],
									[
										1644703,
										1644705
									],
									[
										1644946,
										1644948
									],
									[
										1645390,
										1645392
									],
									[
										1645684,
										1645686
									],
									[
										1646125,
										1646127
									],
									[
										1646272,
										1646274
									],
									[
										1646476,
										1646478
									],
									[
										1646998,
										1647000
									],
									[
										1647241,
										1647243
									],
									[
										1647763,
										1647765
									],
									[
										1648006,
										1648008
									],
									[
										1648528,
										1648530
									],
									[
										1648835,
										1648837
									],
									[
										1649140,
										1649142
									],
									[
										1649183,
										1649185
									],
									[
										1649567,
										1649569
									],
									[
										1649947,
										1649949
									],
									[
										1650167,
										1650169
									],
									[
										1650313,
										1650315
									],
									[
										1650587,
										1650589
									],
									[
										1650640,
										1650642
									],
									[
										1650780,
										1650782
									],
									[
										1650971,
										1650973
									],
									[
										1651143,
										1651145
									],
									[
										1651427,
										1651429
									],
									[
										1651484,
										1651486
									],
									[
										1651602,
										1651604
									],
									[
										1651823,
										1651825
									],
									[
										1652013,
										1652015
									],
									[
										1652027,
										1652029
									],
									[
										1652049,
										1652051
									],
									[
										1652242,
										1652244
									],
									[
										1652295,
										1652297
									],
									[
										1652306,
										1652308
									],
									[
										1652448,
										1652450
									],
									[
										1652692,
										1652694
									],
									[
										1653142,
										1653144
									],
									[
										1653192,
										1653194
									],
									[
										1653423,
										1653425
									],
									[
										1653753,
										1653755
									],
									[
										1654151,
										1654153
									],
									[
										1654581,
										1654583
									],
									[
										1654796,
										1654798
									],
									[
										1654888,
										1654890
									],
									[
										1655182,
										1655184
									],
									[
										1655218,
										1655220
									],
									[
										1655378,
										1655380
									],
									[
										1655565,
										1655567
									],
									[
										1655838,
										1655840
									],
									[
										1655939,
										1655941
									],
									[
										1656024,
										1656026
									],
									[
										1656042,
										1656044
									],
									[
										1656053,
										1656055
									],
									[
										1656183,
										1656185
									],
									[
										1656289,
										1656291
									],
									[
										1656602,
										1656604
									],
									[
										1656829,
										1656831
									],
									[
										1657165,
										1657167
									],
									[
										1657381,
										1657383
									],
									[
										1657537,
										1657539
									],
									[
										1657671,
										1657673
									],
									[
										1657930,
										1657932
									],
									[
										1658013,
										1658015
									],
									[
										1658135,
										1658137
									],
									[
										1658261,
										1658263
									],
									[
										1658270,
										1658272
									],
									[
										1658321,
										1658323
									],
									[
										1658379,
										1658381
									],
									[
										1658667,
										1658669
									],
									[
										1658737,
										1658739
									],
									[
										1658809,
										1658811
									],
									[
										1658888,
										1658890
									],
									[
										1658944,
										1658946
									],
									[
										1658988,
										1658990
									],
									[
										1659012,
										1659014
									],
									[
										1659134,
										1659136
									],
									[
										1659259,
										1659261
									],
									[
										1659565,
										1659567
									],
									[
										1659685,
										1659687
									],
									[
										1659709,
										1659711
									],
									[
										1659994,
										1659996
									],
									[
										1660204,
										1660206
									],
									[
										1660414,
										1660416
									],
									[
										1660683,
										1660685
									],
									[
										1660992,
										1660994
									],
									[
										1661039,
										1661041
									],
									[
										1661248,
										1661250
									],
									[
										1661298,
										1661300
									],
									[
										1661333,
										1661335
									],
									[
										1661409,
										1661411
									],
									[
										1661434,
										1661436
									],
									[
										1661504,
										1661506
									],
									[
										1661521,
										1661523
									],
									[
										1661577,
										1661579
									],
									[
										1661631,
										1661633
									],
									[
										1661708,
										1661710
									],
									[
										1661822,
										1661824
									],
									[
										1661964,
										1661966
									],
									[
										1661990,
										1661992
									],
									[
										1662034,
										1662036
									],
									[
										1662053,
										1662055
									],
									[
										1662188,
										1662190
									],
									[
										1662203,
										1662205
									],
									[
										1662243,
										1662245
									],
									[
										1662288,
										1662290
									],
									[
										1662398,
										1662400
									],
									[
										1662610,
										1662612
									],
									[
										1662620,
										1662622
									],
									[
										1662659,
										1662661
									],
									[
										1662681,
										1662683
									],
									[
										1662709,
										1662711
									],
									[
										1662776,
										1662778
									],
									[
										1662824,
										1662826
									],
									[
										1662834,
										1662836
									],
									[
										1662928,
										1662930
									],
									[
										1662958,
										1662960
									],
									[
										1663058,
										1663060
									],
									[
										1663113,
										1663115
									],
									[
										1663214,
										1663216
									],
									[
										1663326,
										1663328
									],
									[
										1663396,
										1663398
									],
									[
										1663413,
										1663415
									],
									[
										1663500,
										1663502
									],
									[
										1663515,
										1663517
									],
									[
										1663555,
										1663557
									],
									[
										1663598,
										1663600
									],
									[
										1663692,
										1663694
									],
									[
										1663828,
										1663830
									],
									[
										1664063,
										1664065
									],
									[
										1664139,
										1664141
									],
									[
										1664239,
										1664241
									],
									[
										1664296,
										1664298
									],
									[
										1664376,
										1664378
									],
									[
										1664392,
										1664394
									],
									[
										1664436,
										1664438
									],
									[
										1664463,
										1664465
									],
									[
										1664565,
										1664567
									],
									[
										1664611,
										1664613
									],
									[
										1664628,
										1664630
									],
									[
										1664650,
										1664652
									],
									[
										1664690,
										1664692
									],
									[
										1664770,
										1664772
									],
									[
										1664883,
										1664885
									],
									[
										1664908,
										1664910
									],
									[
										1664945,
										1664947
									],
									[
										1665190,
										1665192
									],
									[
										1665231,
										1665233
									],
									[
										1665267,
										1665269
									],
									[
										1665500,
										1665502
									],
									[
										1665530,
										1665532
									],
									[
										1665783,
										1665785
									],
									[
										1666006,
										1666008
									],
									[
										1666083,
										1666085
									],
									[
										1666255,
										1666257
									],
									[
										1666331,
										1666333
									],
									[
										1666529,
										1666531
									],
									[
										1666996,
										1666998
									],
									[
										1667032,
										1667034
									],
									[
										1667250,
										1667252
									],
									[
										1667457,
										1667459
									],
									[
										1667833,
										1667835
									],
									[
										1668037,
										1668039
									],
									[
										1668136,
										1668138
									],
									[
										1668151,
										1668153
									],
									[
										1668348,
										1668350
									],
									[
										1668592,
										1668594
									],
									[
										1668933,
										1668935
									],
									[
										1669154,
										1669156
									],
									[
										1669430,
										1669432
									],
									[
										1669580,
										1669582
									],
									[
										1670009,
										1670011
									],
									[
										1670272,
										1670274
									],
									[
										1670605,
										1670607
									],
									[
										1670894,
										1670896
									],
									[
										1670939,
										1670941
									],
									[
										1671136,
										1671138
									],
									[
										1671571,
										1671573
									],
									[
										1671895,
										1671897
									],
									[
										1671917,
										1671919
									],
									[
										1672102,
										1672104
									],
									[
										1672313,
										1672315
									],
									[
										1672681,
										1672683
									],
									[
										1672714,
										1672716
									],
									[
										1673010,
										1673012
									],
									[
										1673259,
										1673261
									],
									[
										1673444,
										1673446
									],
									[
										1673610,
										1673612
									],
									[
										1673967,
										1673969
									],
									[
										1674231,
										1674233
									],
									[
										1674442,
										1674444
									],
									[
										1674738,
										1674740
									],
									[
										1674917,
										1674919
									],
									[
										1675012,
										1675014
									],
									[
										1675346,
										1675348
									],
									[
										1675593,
										1675595
									],
									[
										1675607,
										1675609
									],
									[
										1675635,
										1675637
									],
									[
										1675849,
										1675851
									],
									[
										1675860,
										1675862
									],
									[
										1676132,
										1676134
									],
									[
										1676261,
										1676263
									],
									[
										1676635,
										1676637
									],
									[
										1676676,
										1676678
									],
									[
										1676740,
										1676742
									],
									[
										1676863,
										1676865
									],
									[
										1677072,
										1677074
									],
									[
										1677102,
										1677104
									],
									[
										1677123,
										1677125
									],
									[
										1677175,
										1677177
									],
									[
										1677197,
										1677199
									],
									[
										1677240,
										1677242
									],
									[
										1677258,
										1677260
									],
									[
										1677271,
										1677273
									],
									[
										1677509,
										1677511
									],
									[
										1677592,
										1677594
									],
									[
										1677628,
										1677630
									],
									[
										1677807,
										1677809
									],
									[
										1677979,
										1677981
									],
									[
										1678019,
										1678021
									],
									[
										1678059,
										1678061
									],
									[
										1678275,
										1678277
									],
									[
										1678507,
										1678509
									],
									[
										1678812,
										1678814
									],
									[
										1678891,
										1678893
									],
									[
										1679078,
										1679080
									],
									[
										1679258,
										1679260
									],
									[
										1679529,
										1679531
									],
									[
										1679605,
										1679607
									],
									[
										1679829,
										1679831
									],
									[
										1679905,
										1679907
									],
									[
										1680091,
										1680093
									],
									[
										1680413,
										1680415
									],
									[
										1680656,
										1680658
									],
									[
										1680899,
										1680901
									],
									[
										1681143,
										1681145
									],
									[
										1681392,
										1681394
									],
									[
										1681471,
										1681473
									],
									[
										1681696,
										1681698
									],
									[
										1681843,
										1681845
									],
									[
										1681874,
										1681876
									],
									[
										1682040,
										1682042
									],
									[
										1682155,
										1682157
									],
									[
										1682332,
										1682334
									],
									[
										1682380,
										1682382
									],
									[
										1682634,
										1682636
									],
									[
										1682810,
										1682812
									],
									[
										1682924,
										1682926
									],
									[
										1682968,
										1682970
									],
									[
										1683056,
										1683058
									],
									[
										1683088,
										1683090
									],
									[
										1683290,
										1683292
									],
									[
										1683323,
										1683325
									],
									[
										1683350,
										1683352
									],
									[
										1683376,
										1683378
									],
									[
										1683562,
										1683564
									],
									[
										1683648,
										1683650
									],
									[
										1683675,
										1683677
									],
									[
										1683723,
										1683725
									],
									[
										1683746,
										1683748
									],
									[
										1683813,
										1683815
									],
									[
										1683915,
										1683917
									],
									[
										1684088,
										1684090
									],
									[
										1684121,
										1684123
									],
									[
										1684160,
										1684162
									],
									[
										1684399,
										1684401
									],
									[
										1684442,
										1684444
									],
									[
										1684573,
										1684575
									],
									[
										1684857,
										1684859
									],
									[
										1685016,
										1685018
									],
									[
										1685280,
										1685282
									],
									[
										1685324,
										1685326
									],
									[
										1685495,
										1685497
									],
									[
										1685614,
										1685616
									],
									[
										1685775,
										1685777
									],
									[
										1685839,
										1685841
									],
									[
										1686055,
										1686057
									],
									[
										1686120,
										1686122
									],
									[
										1686151,
										1686153
									],
									[
										1686269,
										1686271
									],
									[
										1686511,
										1686513
									],
									[
										1686624,
										1686626
									],
									[
										1686643,
										1686645
									],
									[
										1686719,
										1686721
									],
									[
										1686757,
										1686759
									],
									[
										1686845,
										1686847
									],
									[
										1687159,
										1687161
									],
									[
										1687361,
										1687363
									],
									[
										1687725,
										1687727
									],
									[
										1687763,
										1687765
									],
									[
										1687841,
										1687843
									],
									[
										1688001,
										1688003
									],
									[
										1688053,
										1688055
									],
									[
										1688189,
										1688191
									],
									[
										1688208,
										1688210
									],
									[
										1688242,
										1688244
									],
									[
										1688339,
										1688341
									],
									[
										1688523,
										1688525
									],
									[
										1688668,
										1688670
									],
									[
										1688819,
										1688821
									],
									[
										1689026,
										1689028
									],
									[
										1689164,
										1689166
									],
									[
										1689207,
										1689209
									],
									[
										1689272,
										1689274
									],
									[
										1689427,
										1689429
									],
									[
										1689497,
										1689499
									],
									[
										1689521,
										1689523
									],
									[
										1689565,
										1689567
									],
									[
										1689802,
										1689804
									],
									[
										1690063,
										1690065
									],
									[
										1690146,
										1690148
									],
									[
										1690246,
										1690248
									],
									[
										1690343,
										1690345
									],
									[
										1690441,
										1690443
									],
									[
										1690536,
										1690538
									],
									[
										1690664,
										1690666
									],
									[
										1690736,
										1690738
									],
									[
										1691022,
										1691024
									],
									[
										1691073,
										1691075
									],
									[
										1691108,
										1691110
									],
									[
										1691215,
										1691217
									],
									[
										1691240,
										1691242
									],
									[
										1691312,
										1691314
									],
									[
										1691329,
										1691331
									],
									[
										1691385,
										1691387
									],
									[
										1691439,
										1691441
									],
									[
										1691516,
										1691518
									],
									[
										1691630,
										1691632
									],
									[
										1691772,
										1691774
									],
									[
										1691798,
										1691800
									],
									[
										1691842,
										1691844
									],
									[
										1691861,
										1691863
									],
									[
										1691997,
										1691999
									],
									[
										1692012,
										1692014
									],
									[
										1692053,
										1692055
									],
									[
										1692099,
										1692101
									],
									[
										1692163,
										1692165
									],
									[
										1692371,
										1692373
									],
									[
										1692381,
										1692383
									],
									[
										1692420,
										1692422
									],
									[
										1692443,
										1692445
									],
									[
										1692471,
										1692473
									],
									[
										1692538,
										1692540
									],
									[
										1692586,
										1692588
									],
									[
										1692596,
										1692598
									],
									[
										1692691,
										1692693
									],
									[
										1692721,
										1692723
									],
									[
										1692821,
										1692823
									],
									[
										1692876,
										1692878
									],
									[
										1692979,
										1692981
									],
									[
										1693083,
										1693085
									],
									[
										1693155,
										1693157
									],
									[
										1693172,
										1693174
									],
									[
										1693260,
										1693262
									],
									[
										1693275,
										1693277
									],
									[
										1693316,
										1693318
									],
									[
										1693360,
										1693362
									],
									[
										1693454,
										1693456
									],
									[
										1693593,
										1693595
									],
									[
										1693645,
										1693647
									],
									[
										1693821,
										1693823
									],
									[
										1693902,
										1693904
									],
									[
										1693918,
										1693920
									],
									[
										1693962,
										1693964
									],
									[
										1693990,
										1693992
									],
									[
										1694093,
										1694095
									],
									[
										1694139,
										1694141
									],
									[
										1694156,
										1694158
									],
									[
										1694179,
										1694181
									],
									[
										1694222,
										1694224
									],
									[
										1694303,
										1694305
									],
									[
										1694416,
										1694418
									],
									[
										1694442,
										1694444
									],
									[
										1694482,
										1694484
									],
									[
										1694735,
										1694737
									],
									[
										1694784,
										1694786
									],
									[
										1694820,
										1694822
									],
									[
										1694974,
										1694976
									],
									[
										1695185,
										1695187
									],
									[
										1695205,
										1695207
									],
									[
										1695346,
										1695348
									],
									[
										1695603,
										1695605
									],
									[
										1695632,
										1695634
									],
									[
										1695676,
										1695678
									],
									[
										1695805,
										1695807
									],
									[
										1695958,
										1695960
									],
									[
										1696190,
										1696192
									],
									[
										1696420,
										1696422
									],
									[
										1696690,
										1696692
									],
									[
										1696809,
										1696811
									],
									[
										1697050,
										1697052
									],
									[
										1697218,
										1697220
									],
									[
										1697485,
										1697487
									],
									[
										1697509,
										1697511
									],
									[
										1697598,
										1697600
									],
									[
										1697659,
										1697661
									],
									[
										1697720,
										1697722
									],
									[
										1697781,
										1697783
									],
									[
										1697844,
										1697846
									],
									[
										1698075,
										1698077
									],
									[
										1698089,
										1698091
									],
									[
										1698437,
										1698439
									],
									[
										1698731,
										1698733
									],
									[
										1698901,
										1698903
									],
									[
										1698920,
										1698922
									],
									[
										1699124,
										1699126
									],
									[
										1699332,
										1699334
									],
									[
										1699388,
										1699390
									],
									[
										1699402,
										1699404
									],
									[
										1699479,
										1699481
									],
									[
										1699498,
										1699500
									],
									[
										1699610,
										1699612
									],
									[
										1699964,
										1699966
									],
									[
										1700003,
										1700005
									],
									[
										1700198,
										1700200
									],
									[
										1700261,
										1700263
									],
									[
										1700453,
										1700455
									],
									[
										1700698,
										1700700
									],
									[
										1700939,
										1700941
									],
									[
										1701126,
										1701128
									],
									[
										1701214,
										1701216
									],
									[
										1701252,
										1701254
									],
									[
										1701488,
										1701490
									],
									[
										1701531,
										1701533
									],
									[
										1701690,
										1701692
									],
									[
										1701815,
										1701817
									],
									[
										1701824,
										1701826
									],
									[
										1701874,
										1701876
									],
									[
										1701981,
										1701983
									],
									[
										1702203,
										1702205
									],
									[
										1702552,
										1702554
									],
									[
										1702622,
										1702624
									],
									[
										1702885,
										1702887
									],
									[
										1702955,
										1702957
									],
									[
										1703037,
										1703039
									],
									[
										1703115,
										1703117
									],
									[
										1703171,
										1703173
									],
									[
										1703215,
										1703217
									],
									[
										1703239,
										1703241
									],
									[
										1703416,
										1703418
									],
									[
										1703538,
										1703540
									],
									[
										1703762,
										1703764
									],
									[
										1704059,
										1704061
									],
									[
										1704264,
										1704266
									],
									[
										1704323,
										1704325
									],
									[
										1704392,
										1704394
									],
									[
										1704464,
										1704466
									],
									[
										1704605,
										1704607
									],
									[
										1704894,
										1704896
									],
									[
										1704997,
										1704999
									],
									[
										1705198,
										1705200
									],
									[
										1705471,
										1705473
									],
									[
										1705728,
										1705730
									],
									[
										1706064,
										1706066
									],
									[
										1706348,
										1706350
									],
									[
										1706656,
										1706658
									],
									[
										1707037,
										1707039
									],
									[
										1707080,
										1707082
									],
									[
										1707104,
										1707106
									],
									[
										1707526,
										1707528
									],
									[
										1707600,
										1707602
									],
									[
										1707826,
										1707828
									],
									[
										1708113,
										1708115
									],
									[
										1708408,
										1708410
									],
									[
										1708698,
										1708700
									],
									[
										1708870,
										1708872
									],
									[
										1708896,
										1708898
									],
									[
										1709219,
										1709221
									],
									[
										1709565,
										1709567
									],
									[
										1709603,
										1709605
									],
									[
										1709925,
										1709927
									],
									[
										1709970,
										1709972
									],
									[
										1710318,
										1710320
									],
									[
										1710378,
										1710380
									],
									[
										1710441,
										1710443
									],
									[
										1710505,
										1710507
									],
									[
										1710724,
										1710726
									],
									[
										1710824,
										1710826
									],
									[
										1710910,
										1710912
									],
									[
										1710942,
										1710944
									],
									[
										1711024,
										1711026
									],
									[
										1711115,
										1711117
									],
									[
										1711203,
										1711205
									],
									[
										1711525,
										1711527
									],
									[
										1711776,
										1711778
									],
									[
										1711819,
										1711821
									],
									[
										1711856,
										1711858
									],
									[
										1711892,
										1711894
									],
									[
										1712101,
										1712103
									],
									[
										1712144,
										1712146
									],
									[
										1712292,
										1712294
									],
									[
										1712335,
										1712337
									],
									[
										1712441,
										1712443
									],
									[
										1712526,
										1712528
									],
									[
										1712711,
										1712713
									],
									[
										1712823,
										1712825
									],
									[
										1713035,
										1713037
									],
									[
										1713274,
										1713276
									],
									[
										1713504,
										1713506
									],
									[
										1713547,
										1713549
									],
									[
										1713671,
										1713673
									],
									[
										1713880,
										1713882
									],
									[
										1714100,
										1714102
									],
									[
										1714143,
										1714145
									],
									[
										1714265,
										1714267
									],
									[
										1714480,
										1714482
									],
									[
										1714660,
										1714662
									],
									[
										1714772,
										1714774
									],
									[
										1715024,
										1715026
									],
									[
										1715110,
										1715112
									],
									[
										1715141,
										1715143
									],
									[
										1715331,
										1715333
									],
									[
										1715443,
										1715445
									],
									[
										1715677,
										1715679
									],
									[
										1715963,
										1715965
									],
									[
										1716106,
										1716108
									],
									[
										1716162,
										1716164
									],
									[
										1716394,
										1716396
									],
									[
										1716553,
										1716555
									],
									[
										1716694,
										1716696
									],
									[
										1716909,
										1716911
									],
									[
										1717089,
										1717091
									],
									[
										1717201,
										1717203
									],
									[
										1717502,
										1717504
									],
									[
										1717756,
										1717758
									],
									[
										1717936,
										1717938
									],
									[
										1718048,
										1718050
									],
									[
										1718414,
										1718416
									],
									[
										1718488,
										1718490
									],
									[
										1718574,
										1718576
									],
									[
										1718697,
										1718699
									],
									[
										1718776,
										1718778
									],
									[
										1718844,
										1718846
									],
									[
										1718877,
										1718879
									],
									[
										1719018,
										1719020
									],
									[
										1719172,
										1719174
									],
									[
										1719368,
										1719370
									],
									[
										1719526,
										1719528
									],
									[
										1719757,
										1719759
									],
									[
										1719825,
										1719827
									],
									[
										1719912,
										1719914
									],
									[
										1720136,
										1720138
									],
									[
										1720241,
										1720243
									],
									[
										1720289,
										1720291
									],
									[
										1720554,
										1720556
									],
									[
										1720732,
										1720734
									],
									[
										1720942,
										1720944
									],
									[
										1721012,
										1721014
									],
									[
										1721187,
										1721189
									],
									[
										1721451,
										1721453
									],
									[
										1721693,
										1721695
									],
									[
										1721933,
										1721935
									],
									[
										1722004,
										1722006
									],
									[
										1722201,
										1722203
									],
									[
										1722302,
										1722304
									],
									[
										1722651,
										1722653
									],
									[
										1722901,
										1722903
									],
									[
										1723187,
										1723189
									],
									[
										1723343,
										1723345
									],
									[
										1723696,
										1723698
									],
									[
										1723918,
										1723920
									],
									[
										1724114,
										1724116
									],
									[
										1724157,
										1724159
									],
									[
										1724190,
										1724192
									],
									[
										1724539,
										1724541
									],
									[
										1724840,
										1724842
									],
									[
										1724877,
										1724879
									],
									[
										1724985,
										1724987
									],
									[
										1725279,
										1725281
									],
									[
										1725409,
										1725411
									],
									[
										1725549,
										1725551
									],
									[
										1725776,
										1725778
									],
									[
										1725864,
										1725866
									],
									[
										1725952,
										1725954
									],
									[
										1725989,
										1725991
									],
									[
										1726155,
										1726157
									],
									[
										1726357,
										1726359
									],
									[
										1726546,
										1726548
									],
									[
										1726798,
										1726800
									],
									[
										1727132,
										1727134
									],
									[
										1727204,
										1727206
									],
									[
										1727266,
										1727268
									],
									[
										1727530,
										1727532
									],
									[
										1727672,
										1727674
									],
									[
										1727910,
										1727912
									],
									[
										1728138,
										1728140
									],
									[
										1728216,
										1728218
									],
									[
										1728303,
										1728305
									],
									[
										1728663,
										1728665
									],
									[
										1728789,
										1728791
									],
									[
										1729117,
										1729119
									],
									[
										1729170,
										1729172
									],
									[
										1729303,
										1729305
									],
									[
										1729405,
										1729407
									],
									[
										1729441,
										1729443
									],
									[
										1729708,
										1729710
									],
									[
										1729847,
										1729849
									],
									[
										1729871,
										1729873
									],
									[
										1730094,
										1730096
									],
									[
										1730108,
										1730110
									],
									[
										1730129,
										1730131
									],
									[
										1730162,
										1730164
									],
									[
										1730174,
										1730176
									],
									[
										1730201,
										1730203
									],
									[
										1730438,
										1730440
									],
									[
										1730512,
										1730514
									],
									[
										1730579,
										1730581
									],
									[
										1730590,
										1730592
									],
									[
										1730772,
										1730774
									],
									[
										1731010,
										1731012
									],
									[
										1731296,
										1731298
									],
									[
										1731404,
										1731406
									],
									[
										1731682,
										1731684
									],
									[
										1731734,
										1731736
									],
									[
										1731882,
										1731884
									],
									[
										1731918,
										1731920
									],
									[
										1732172,
										1732174
									],
									[
										1732197,
										1732199
									],
									[
										1732225,
										1732227
									],
									[
										1732248,
										1732250
									],
									[
										1732493,
										1732495
									],
									[
										1732507,
										1732509
									],
									[
										1732535,
										1732537
									],
									[
										1732565,
										1732567
									],
									[
										1732577,
										1732579
									],
									[
										1732604,
										1732606
									],
									[
										1732879,
										1732881
									],
									[
										1732952,
										1732954
									],
									[
										1732963,
										1732965
									],
									[
										1733028,
										1733030
									],
									[
										1733039,
										1733041
									],
									[
										1733216,
										1733218
									],
									[
										1733377,
										1733379
									],
									[
										1733635,
										1733637
									],
									[
										1733889,
										1733891
									],
									[
										1733914,
										1733916
									],
									[
										1733966,
										1733968
									],
									[
										1734228,
										1734230
									],
									[
										1734240,
										1734242
									],
									[
										1734362,
										1734364
									],
									[
										1734417,
										1734419
									],
									[
										1734469,
										1734471
									],
									[
										1734836,
										1734838
									],
									[
										1734848,
										1734850
									],
									[
										1735076,
										1735078
									],
									[
										1735304,
										1735306
									],
									[
										1735548,
										1735550
									],
									[
										1735817,
										1735819
									],
									[
										1736032,
										1736034
									],
									[
										1736294,
										1736296
									],
									[
										1736438,
										1736440
									],
									[
										1736484,
										1736486
									],
									[
										1736835,
										1736837
									],
									[
										1736880,
										1736882
									],
									[
										1737009,
										1737011
									],
									[
										1737055,
										1737057
									],
									[
										1737095,
										1737097
									],
									[
										1737145,
										1737147
									],
									[
										1737201,
										1737203
									],
									[
										1737252,
										1737254
									],
									[
										1737302,
										1737304
									],
									[
										1737403,
										1737405
									],
									[
										1737590,
										1737592
									],
									[
										1737918,
										1737920
									],
									[
										1737988,
										1737990
									],
									[
										1738162,
										1738164
									],
									[
										1738232,
										1738234
									],
									[
										1738804,
										1738806
									],
									[
										1739009,
										1739011
									],
									[
										1739239,
										1739241
									],
									[
										1739278,
										1739280
									],
									[
										1739362,
										1739364
									],
									[
										1739385,
										1739387
									],
									[
										1739494,
										1739496
									],
									[
										1739553,
										1739555
									],
									[
										1739575,
										1739577
									],
									[
										1739712,
										1739714
									],
									[
										1740044,
										1740046
									],
									[
										1740223,
										1740225
									],
									[
										1740232,
										1740234
									],
									[
										1740259,
										1740261
									],
									[
										1740384,
										1740386
									],
									[
										1740401,
										1740403
									],
									[
										1740482,
										1740484
									],
									[
										1740493,
										1740495
									],
									[
										1740676,
										1740678
									],
									[
										1740687,
										1740689
									],
									[
										1740884,
										1740886
									],
									[
										1740926,
										1740928
									],
									[
										1741042,
										1741044
									],
									[
										1741073,
										1741075
									],
									[
										1741188,
										1741190
									],
									[
										1741282,
										1741284
									],
									[
										1741312,
										1741314
									],
									[
										1741342,
										1741344
									],
									[
										1741510,
										1741512
									],
									[
										1741607,
										1741609
									],
									[
										1741828,
										1741830
									],
									[
										1742101,
										1742103
									],
									[
										1742153,
										1742155
									],
									[
										1742280,
										1742282
									],
									[
										1742406,
										1742408
									],
									[
										1742668,
										1742670
									],
									[
										1743045,
										1743047
									],
									[
										1743154,
										1743156
									],
									[
										1743170,
										1743172
									],
									[
										1743350,
										1743352
									],
									[
										1743358,
										1743360
									],
									[
										1743407,
										1743409
									],
									[
										1743420,
										1743422
									],
									[
										1743491,
										1743493
									],
									[
										1743811,
										1743813
									],
									[
										1743853,
										1743855
									],
									[
										1743941,
										1743943
									],
									[
										1743985,
										1743987
									],
									[
										1744131,
										1744133
									],
									[
										1744390,
										1744392
									],
									[
										1744578,
										1744580
									],
									[
										1744859,
										1744861
									],
									[
										1744908,
										1744910
									],
									[
										1744922,
										1744924
									],
									[
										1745131,
										1745133
									],
									[
										1745163,
										1745165
									],
									[
										1745243,
										1745245
									],
									[
										1745268,
										1745270
									],
									[
										1745380,
										1745382
									],
									[
										1745439,
										1745441
									],
									[
										1745445,
										1745447
									],
									[
										1745618,
										1745620
									],
									[
										1745634,
										1745636
									],
									[
										1745877,
										1745879
									],
									[
										1745976,
										1745978
									],
									[
										1746020,
										1746022
									],
									[
										1746196,
										1746198
									],
									[
										1746471,
										1746473
									],
									[
										1746617,
										1746619
									],
									[
										1746628,
										1746630
									],
									[
										1746772,
										1746774
									],
									[
										1747036,
										1747038
									],
									[
										1747082,
										1747084
									],
									[
										1747214,
										1747216
									],
									[
										1747403,
										1747405
									],
									[
										1747693,
										1747695
									],
									[
										1748015,
										1748017
									],
									[
										1748284,
										1748286
									],
									[
										1748331,
										1748333
									],
									[
										1748423,
										1748425
									],
									[
										1748607,
										1748609
									],
									[
										1748778,
										1748780
									],
									[
										1748820,
										1748822
									],
									[
										1748834,
										1748836
									],
									[
										1748865,
										1748867
									],
									[
										1748997,
										1748999
									],
									[
										1749008,
										1749010
									],
									[
										1749035,
										1749037
									],
									[
										1749046,
										1749048
									],
									[
										1749198,
										1749200
									],
									[
										1749386,
										1749388
									],
									[
										1749737,
										1749739
									],
									[
										1749789,
										1749791
									],
									[
										1749927,
										1749929
									],
									[
										1750055,
										1750057
									],
									[
										1750324,
										1750326
									],
									[
										1750503,
										1750505
									],
									[
										1750596,
										1750598
									],
									[
										1750727,
										1750729
									],
									[
										1751050,
										1751052
									],
									[
										1751097,
										1751099
									],
									[
										1751150,
										1751152
									],
									[
										1751206,
										1751208
									],
									[
										1751252,
										1751254
									],
									[
										1751357,
										1751359
									],
									[
										1751385,
										1751387
									],
									[
										1751411,
										1751413
									],
									[
										1751569,
										1751571
									],
									[
										1751745,
										1751747
									],
									[
										1751931,
										1751933
									],
									[
										1752084,
										1752086
									],
									[
										1752237,
										1752239
									],
									[
										1752522,
										1752524
									],
									[
										1752580,
										1752582
									],
									[
										1752644,
										1752646
									],
									[
										1752693,
										1752695
									],
									[
										1752788,
										1752790
									],
									[
										1752840,
										1752842
									],
									[
										1752894,
										1752896
									],
									[
										1752941,
										1752943
									],
									[
										1752991,
										1752993
									],
									[
										1753186,
										1753188
									],
									[
										1753399,
										1753401
									],
									[
										1753413,
										1753415
									],
									[
										1753435,
										1753437
									],
									[
										1753635,
										1753637
									],
									[
										1753688,
										1753690
									],
									[
										1753699,
										1753701
									],
									[
										1753841,
										1753843
									],
									[
										1754133,
										1754135
									],
									[
										1754191,
										1754193
									],
									[
										1754319,
										1754321
									],
									[
										1754638,
										1754640
									],
									[
										1754650,
										1754652
									],
									[
										1754677,
										1754679
									],
									[
										1754876,
										1754878
									],
									[
										1754887,
										1754889
									],
									[
										1755056,
										1755058
									],
									[
										1755338,
										1755340
									],
									[
										1755386,
										1755388
									],
									[
										1755531,
										1755533
									],
									[
										1755663,
										1755665
									],
									[
										1755885,
										1755887
									],
									[
										1755899,
										1755901
									],
									[
										1755927,
										1755929
									],
									[
										1756167,
										1756169
									],
									[
										1756178,
										1756180
									],
									[
										1756339,
										1756341
									],
									[
										1756617,
										1756619
									],
									[
										1756671,
										1756673
									],
									[
										1757020,
										1757022
									],
									[
										1757341,
										1757343
									],
									[
										1757409,
										1757411
									],
									[
										1757487,
										1757489
									],
									[
										1757661,
										1757663
									],
									[
										1757943,
										1757945
									],
									[
										1757995,
										1757997
									],
									[
										1758166,
										1758168
									],
									[
										1758287,
										1758289
									],
									[
										1758561,
										1758563
									],
									[
										1758607,
										1758609
									],
									[
										1759009,
										1759011
									],
									[
										1759213,
										1759215
									],
									[
										1759394,
										1759396
									],
									[
										1759730,
										1759732
									],
									[
										1759777,
										1759779
									],
									[
										1759945,
										1759947
									],
									[
										1760105,
										1760107
									],
									[
										1760136,
										1760138
									],
									[
										1760302,
										1760304
									],
									[
										1760344,
										1760346
									],
									[
										1760358,
										1760360
									],
									[
										1760386,
										1760388
									],
									[
										1760448,
										1760450
									],
									[
										1760526,
										1760528
									],
									[
										1760548,
										1760550
									],
									[
										1760705,
										1760707
									],
									[
										1760941,
										1760943
									],
									[
										1760974,
										1760976
									],
									[
										1760985,
										1760987
									],
									[
										1761143,
										1761145
									],
									[
										1761418,
										1761420
									],
									[
										1761470,
										1761472
									],
									[
										1761569,
										1761571
									],
									[
										1761624,
										1761626
									],
									[
										1761708,
										1761710
									],
									[
										1761720,
										1761722
									],
									[
										1761916,
										1761918
									],
									[
										1762043,
										1762045
									],
									[
										1762265,
										1762267
									],
									[
										1762347,
										1762349
									],
									[
										1762484,
										1762486
									],
									[
										1762527,
										1762529
									],
									[
										1762541,
										1762543
									],
									[
										1762569,
										1762571
									],
									[
										1762681,
										1762683
									],
									[
										1762692,
										1762694
									],
									[
										1763037,
										1763039
									],
									[
										1763377,
										1763379
									],
									[
										1763658,
										1763660
									],
									[
										1763975,
										1763977
									],
									[
										1764259,
										1764261
									],
									[
										1764541,
										1764543
									],
									[
										1764857,
										1764859
									],
									[
										1765029,
										1765031
									],
									[
										1765271,
										1765273
									],
									[
										1765550,
										1765552
									],
									[
										1765602,
										1765604
									],
									[
										1765765,
										1765767
									],
									[
										1766016,
										1766018
									],
									[
										1766263,
										1766265
									],
									[
										1766277,
										1766279
									],
									[
										1766305,
										1766307
									],
									[
										1766522,
										1766524
									],
									[
										1766598,
										1766600
									],
									[
										1766664,
										1766666
									],
									[
										1766675,
										1766677
									],
									[
										1766827,
										1766829
									],
									[
										1767101,
										1767103
									],
									[
										1767147,
										1767149
									],
									[
										1767254,
										1767256
									],
									[
										1767511,
										1767513
									],
									[
										1767719,
										1767721
									],
									[
										1768004,
										1768006
									],
									[
										1768046,
										1768048
									],
									[
										1768060,
										1768062
									],
									[
										1768088,
										1768090
									],
									[
										1768263,
										1768265
									],
									[
										1768274,
										1768276
									],
									[
										1768320,
										1768322
									],
									[
										1768502,
										1768504
									],
									[
										1768769,
										1768771
									],
									[
										1768814,
										1768816
									],
									[
										1768943,
										1768945
									],
									[
										1769208,
										1769210
									],
									[
										1769318,
										1769320
									],
									[
										1769449,
										1769451
									],
									[
										1769808,
										1769810
									],
									[
										1770059,
										1770061
									],
									[
										1770295,
										1770297
									],
									[
										1770338,
										1770340
									],
									[
										1770352,
										1770354
									],
									[
										1770380,
										1770382
									],
									[
										1770483,
										1770485
									],
									[
										1770656,
										1770658
									],
									[
										1770842,
										1770844
									],
									[
										1770853,
										1770855
									],
									[
										1770976,
										1770978
									],
									[
										1771070,
										1771072
									],
									[
										1771205,
										1771207
									],
									[
										1771493,
										1771495
									],
									[
										1771553,
										1771555
									],
									[
										1771689,
										1771691
									],
									[
										1771878,
										1771880
									],
									[
										1772029,
										1772031
									],
									[
										1772071,
										1772073
									],
									[
										1772519,
										1772521
									],
									[
										1772915,
										1772917
									],
									[
										1773285,
										1773287
									],
									[
										1773651,
										1773653
									],
									[
										1774025,
										1774027
									],
									[
										1774400,
										1774402
									],
									[
										1774610,
										1774612
									],
									[
										1774824,
										1774826
									],
									[
										1775101,
										1775103
									],
									[
										1775390,
										1775392
									],
									[
										1775608,
										1775610
									],
									[
										1775674,
										1775676
									],
									[
										1776011,
										1776013
									],
									[
										1776057,
										1776059
									],
									[
										1776174,
										1776176
									],
									[
										1776436,
										1776438
									],
									[
										1776723,
										1776725
									],
									[
										1776765,
										1776767
									],
									[
										1777329,
										1777331
									],
									[
										1777800,
										1777802
									],
									[
										1778234,
										1778236
									],
									[
										1778722,
										1778724
									],
									[
										1779149,
										1779151
									],
									[
										1779447,
										1779449
									],
									[
										1779747,
										1779749
									],
									[
										1780204,
										1780206
									],
									[
										1780694,
										1780696
									],
									[
										1781076,
										1781078
									],
									[
										1781277,
										1781279
									],
									[
										1781430,
										1781432
									],
									[
										1781665,
										1781667
									],
									[
										1781920,
										1781922
									],
									[
										1782083,
										1782085
									],
									[
										1782242,
										1782244
									],
									[
										1782399,
										1782401
									],
									[
										1782539,
										1782541
									],
									[
										1782568,
										1782570
									],
									[
										1782631,
										1782633
									],
									[
										1782752,
										1782754
									],
									[
										1782884,
										1782886
									],
									[
										1783009,
										1783011
									],
									[
										1783131,
										1783133
									],
									[
										1783401,
										1783403
									],
									[
										1783425,
										1783427
									],
									[
										1783594,
										1783596
									],
									[
										1783786,
										1783788
									],
									[
										1783819,
										1783821
									],
									[
										1783985,
										1783987
									],
									[
										1784165,
										1784167
									],
									[
										1784289,
										1784291
									],
									[
										1784579,
										1784581
									],
									[
										1784592,
										1784594
									],
									[
										1784647,
										1784649
									],
									[
										1784748,
										1784750
									],
									[
										1784875,
										1784877
									],
									[
										1784906,
										1784908
									],
									[
										1784973,
										1784975
									],
									[
										1785263,
										1785265
									],
									[
										1785381,
										1785383
									],
									[
										1785702,
										1785704
									],
									[
										1785823,
										1785825
									],
									[
										1785827,
										1785829
									],
									[
										1786062,
										1786064
									],
									[
										1786186,
										1786188
									],
									[
										1786387,
										1786389
									],
									[
										1786689,
										1786691
									],
									[
										1786731,
										1786733
									],
									[
										1786986,
										1786988
									],
									[
										1787438,
										1787440
									],
									[
										1787537,
										1787539
									],
									[
										1787593,
										1787595
									],
									[
										1787787,
										1787789
									],
									[
										1787979,
										1787981
									],
									[
										1788064,
										1788066
									],
									[
										1788183,
										1788185
									],
									[
										1788346,
										1788348
									],
									[
										1788615,
										1788617
									],
									[
										1788666,
										1788668
									],
									[
										1788797,
										1788799
									],
									[
										1789028,
										1789030
									],
									[
										1789269,
										1789271
									],
									[
										1789479,
										1789481
									],
									[
										1789536,
										1789538
									],
									[
										1789673,
										1789675
									],
									[
										1789960,
										1789962
									],
									[
										1790014,
										1790016
									],
									[
										1790098,
										1790100
									],
									[
										1790230,
										1790232
									],
									[
										1790404,
										1790406
									],
									[
										1790682,
										1790684
									],
									[
										1790829,
										1790831
									],
									[
										1790896,
										1790898
									],
									[
										1791115,
										1791117
									],
									[
										1791139,
										1791141
									],
									[
										1791362,
										1791364
									],
									[
										1791601,
										1791603
									],
									[
										1791644,
										1791646
									],
									[
										1791691,
										1791693
									],
									[
										1791754,
										1791756
									],
									[
										1791806,
										1791808
									],
									[
										1791972,
										1791974
									],
									[
										1792088,
										1792090
									],
									[
										1792139,
										1792141
									],
									[
										1792150,
										1792152
									],
									[
										1792243,
										1792245
									],
									[
										1792256,
										1792258
									],
									[
										1792492,
										1792494
									],
									[
										1792517,
										1792519
									],
									[
										1792604,
										1792606
									],
									[
										1792874,
										1792876
									],
									[
										1793062,
										1793064
									],
									[
										1793253,
										1793255
									],
									[
										1793303,
										1793305
									],
									[
										1793313,
										1793315
									],
									[
										1793333,
										1793335
									],
									[
										1793400,
										1793402
									],
									[
										1793448,
										1793450
									],
									[
										1793615,
										1793617
									],
									[
										1793782,
										1793784
									],
									[
										1793911,
										1793913
									],
									[
										1794175,
										1794177
									],
									[
										1794189,
										1794191
									],
									[
										1794356,
										1794358
									],
									[
										1794407,
										1794409
									],
									[
										1794450,
										1794452
									],
									[
										1794627,
										1794629
									],
									[
										1794649,
										1794651
									],
									[
										1794703,
										1794705
									],
									[
										1794749,
										1794751
									],
									[
										1794788,
										1794790
									],
									[
										1794825,
										1794827
									],
									[
										1794847,
										1794849
									],
									[
										1794881,
										1794883
									],
									[
										1795151,
										1795153
									],
									[
										1795624,
										1795626
									],
									[
										1795854,
										1795856
									],
									[
										1796377,
										1796379
									],
									[
										1796823,
										1796825
									],
									[
										1797054,
										1797056
									],
									[
										1797291,
										1797293
									],
									[
										1797505,
										1797507
									],
									[
										1797738,
										1797740
									],
									[
										1797821,
										1797823
									],
									[
										1797954,
										1797956
									],
									[
										1797990,
										1797992
									],
									[
										1798282,
										1798284
									],
									[
										1798392,
										1798394
									],
									[
										1798475,
										1798477
									],
									[
										1798594,
										1798596
									],
									[
										1798635,
										1798637
									],
									[
										1798644,
										1798646
									],
									[
										1798694,
										1798696
									],
									[
										1798718,
										1798720
									],
									[
										1798766,
										1798768
									],
									[
										1798846,
										1798848
									],
									[
										1798885,
										1798887
									],
									[
										1798897,
										1798899
									],
									[
										1798924,
										1798926
									],
									[
										1799090,
										1799092
									],
									[
										1799138,
										1799140
									],
									[
										1799181,
										1799183
									],
									[
										1799276,
										1799278
									],
									[
										1799547,
										1799549
									],
									[
										1799569,
										1799571
									],
									[
										1799584,
										1799586
									],
									[
										1799621,
										1799623
									],
									[
										1799785,
										1799787
									],
									[
										1800007,
										1800009
									],
									[
										1800047,
										1800049
									],
									[
										1800189,
										1800191
									],
									[
										1800319,
										1800321
									],
									[
										1800363,
										1800365
									],
									[
										1800483,
										1800485
									],
									[
										1800744,
										1800746
									],
									[
										1800855,
										1800857
									],
									[
										1800892,
										1800894
									],
									[
										1800930,
										1800932
									],
									[
										1800952,
										1800954
									],
									[
										1801057,
										1801059
									],
									[
										1801381,
										1801383
									],
									[
										1801407,
										1801409
									],
									[
										1801732,
										1801734
									],
									[
										1801758,
										1801760
									],
									[
										1802095,
										1802097
									],
									[
										1802121,
										1802123
									],
									[
										1802471,
										1802473
									],
									[
										1802542,
										1802544
									],
									[
										1802676,
										1802678
									],
									[
										1803104,
										1803106
									],
									[
										1803385,
										1803387
									],
									[
										1803703,
										1803705
									],
									[
										1803999,
										1804001
									],
									[
										1804284,
										1804286
									],
									[
										1804393,
										1804395
									],
									[
										1804488,
										1804490
									],
									[
										1804837,
										1804839
									],
									[
										1804911,
										1804913
									],
									[
										1805015,
										1805017
									],
									[
										1805353,
										1805355
									],
									[
										1805519,
										1805521
									],
									[
										1805924,
										1805926
									],
									[
										1805984,
										1805986
									],
									[
										1806326,
										1806328
									],
									[
										1806386,
										1806388
									],
									[
										1806625,
										1806627
									],
									[
										1806647,
										1806649
									],
									[
										1806916,
										1806918
									],
									[
										1806983,
										1806985
									],
									[
										1807361,
										1807363
									],
									[
										1807423,
										1807425
									],
									[
										1807491,
										1807493
									],
									[
										1807575,
										1807577
									],
									[
										1807678,
										1807680
									],
									[
										1807712,
										1807714
									],
									[
										1807991,
										1807993
									],
									[
										1808052,
										1808054
									],
									[
										1808138,
										1808140
									],
									[
										1808270,
										1808272
									],
									[
										1808525,
										1808527
									],
									[
										1808576,
										1808578
									],
									[
										1808619,
										1808621
									],
									[
										1808754,
										1808756
									],
									[
										1808803,
										1808805
									],
									[
										1808827,
										1808829
									],
									[
										1808870,
										1808872
									],
									[
										1809092,
										1809094
									],
									[
										1809234,
										1809236
									],
									[
										1809260,
										1809262
									],
									[
										1809332,
										1809334
									],
									[
										1809394,
										1809396
									],
									[
										1809424,
										1809426
									],
									[
										1809445,
										1809447
									],
									[
										1809482,
										1809484
									],
									[
										1809739,
										1809741
									],
									[
										1809789,
										1809791
									],
									[
										1809832,
										1809834
									],
									[
										1810019,
										1810021
									],
									[
										1810299,
										1810301
									],
									[
										1810479,
										1810481
									],
									[
										1810506,
										1810508
									],
									[
										1810536,
										1810538
									],
									[
										1810576,
										1810578
									],
									[
										1810622,
										1810624
									],
									[
										1810637,
										1810639
									],
									[
										1810800,
										1810802
									],
									[
										1810829,
										1810831
									],
									[
										1811022,
										1811024
									],
									[
										1811232,
										1811234
									],
									[
										1811482,
										1811484
									],
									[
										1811718,
										1811720
									],
									[
										1811882,
										1811884
									],
									[
										1812110,
										1812112
									],
									[
										1812408,
										1812410
									],
									[
										1812685,
										1812687
									],
									[
										1812854,
										1812856
									],
									[
										1813120,
										1813122
									],
									[
										1813262,
										1813264
									],
									[
										1813538,
										1813540
									],
									[
										1813814,
										1813816
									],
									[
										1814204,
										1814206
									],
									[
										1814408,
										1814410
									],
									[
										1814514,
										1814516
									],
									[
										1814561,
										1814563
									],
									[
										1814595,
										1814597
									],
									[
										1814775,
										1814777
									],
									[
										1814999,
										1815001
									],
									[
										1815211,
										1815213
									],
									[
										1815403,
										1815405
									],
									[
										1815446,
										1815448
									],
									[
										1815496,
										1815498
									],
									[
										1815547,
										1815549
									],
									[
										1815592,
										1815594
									],
									[
										1815751,
										1815753
									],
									[
										1815771,
										1815773
									],
									[
										1816019,
										1816021
									],
									[
										1816029,
										1816031
									],
									[
										1816068,
										1816070
									],
									[
										1816094,
										1816096
									],
									[
										1816210,
										1816212
									],
									[
										1816241,
										1816243
									],
									[
										1816312,
										1816314
									],
									[
										1816338,
										1816340
									],
									[
										1816492,
										1816494
									],
									[
										1816698,
										1816700
									],
									[
										1816708,
										1816710
									],
									[
										1816983,
										1816985
									],
									[
										1817074,
										1817076
									],
									[
										1817263,
										1817265
									],
									[
										1817379,
										1817381
									],
									[
										1817608,
										1817610
									],
									[
										1817893,
										1817895
									],
									[
										1818143,
										1818145
									],
									[
										1818227,
										1818229
									],
									[
										1818283,
										1818285
									],
									[
										1818419,
										1818421
									],
									[
										1818534,
										1818536
									],
									[
										1818678,
										1818680
									],
									[
										1818691,
										1818693
									],
									[
										1818768,
										1818770
									],
									[
										1818950,
										1818952
									],
									[
										1818963,
										1818965
									],
									[
										1819101,
										1819103
									],
									[
										1819309,
										1819311
									],
									[
										1819346,
										1819348
									],
									[
										1819424,
										1819426
									],
									[
										1819631,
										1819633
									],
									[
										1819765,
										1819767
									],
									[
										1819778,
										1819780
									],
									[
										1819909,
										1819911
									],
									[
										1819922,
										1819924
									],
									[
										1819988,
										1819990
									],
									[
										1820047,
										1820049
									],
									[
										1820109,
										1820111
									],
									[
										1820198,
										1820200
									],
									[
										1820460,
										1820462
									],
									[
										1820517,
										1820519
									],
									[
										1820807,
										1820809
									],
									[
										1820841,
										1820843
									],
									[
										1820875,
										1820877
									],
									[
										1820897,
										1820899
									],
									[
										1820935,
										1820937
									],
									[
										1820972,
										1820974
									],
									[
										1820987,
										1820989
									],
									[
										1821060,
										1821062
									],
									[
										1821105,
										1821107
									],
									[
										1821215,
										1821217
									],
									[
										1821286,
										1821288
									],
									[
										1821366,
										1821368
									],
									[
										1821600,
										1821602
									],
									[
										1821970,
										1821972
									],
									[
										1822337,
										1822339
									],
									[
										1822601,
										1822603
									],
									[
										1822861,
										1822863
									],
									[
										1822926,
										1822928
									],
									[
										1823193,
										1823195
									],
									[
										1823205,
										1823207
									],
									[
										1823477,
										1823479
									],
									[
										1823489,
										1823491
									],
									[
										1823645,
										1823647
									],
									[
										1823657,
										1823659
									],
									[
										1823887,
										1823889
									],
									[
										1823899,
										1823901
									],
									[
										1824066,
										1824068
									],
									[
										1824078,
										1824080
									],
									[
										1824388,
										1824390
									],
									[
										1824784,
										1824786
									],
									[
										1824814,
										1824816
									],
									[
										1825013,
										1825015
									],
									[
										1825026,
										1825028
									],
									[
										1825237,
										1825239
									],
									[
										1825473,
										1825475
									],
									[
										1825508,
										1825510
									],
									[
										1825776,
										1825778
									],
									[
										1825813,
										1825815
									],
									[
										1825912,
										1825914
									],
									[
										1825973,
										1825975
									],
									[
										1825993,
										1825995
									],
									[
										1826052,
										1826054
									],
									[
										1826217,
										1826219
									],
									[
										1826418,
										1826420
									],
									[
										1826601,
										1826603
									],
									[
										1826744,
										1826746
									],
									[
										1826797,
										1826799
									],
									[
										1827036,
										1827038
									],
									[
										1827156,
										1827158
									],
									[
										1827245,
										1827247
									],
									[
										1827463,
										1827465
									],
									[
										1827662,
										1827664
									],
									[
										1827675,
										1827677
									],
									[
										1827783,
										1827785
									],
									[
										1828078,
										1828080
									],
									[
										1828169,
										1828171
									],
									[
										1828200,
										1828202
									],
									[
										1828292,
										1828294
									],
									[
										1828493,
										1828495
									],
									[
										1828816,
										1828818
									],
									[
										1829049,
										1829051
									],
									[
										1829161,
										1829163
									],
									[
										1829461,
										1829463
									],
									[
										1829515,
										1829517
									],
									[
										1829575,
										1829577
									],
									[
										1829627,
										1829629
									],
									[
										1829733,
										1829735
									],
									[
										1829753,
										1829755
									],
									[
										1829928,
										1829930
									],
									[
										1830088,
										1830090
									],
									[
										1830208,
										1830210
									],
									[
										1830378,
										1830380
									],
									[
										1830428,
										1830430
									],
									[
										1830480,
										1830482
									],
									[
										1830605,
										1830607
									],
									[
										1830625,
										1830627
									],
									[
										1830679,
										1830681
									],
									[
										1830886,
										1830888
									],
									[
										1830926,
										1830928
									],
									[
										1831079,
										1831081
									],
									[
										1831091,
										1831093
									],
									[
										1831139,
										1831141
									],
									[
										1831158,
										1831160
									],
									[
										1831220,
										1831222
									],
									[
										1831292,
										1831294
									],
									[
										1831648,
										1831650
									],
									[
										1831874,
										1831876
									],
									[
										1832063,
										1832065
									],
									[
										1832245,
										1832247
									],
									[
										1832324,
										1832326
									],
									[
										1832392,
										1832394
									],
									[
										1832404,
										1832406
									],
									[
										1832429,
										1832431
									],
									[
										1832441,
										1832443
									],
									[
										1832696,
										1832698
									],
									[
										1832946,
										1832948
									],
									[
										1833280,
										1833282
									],
									[
										1833325,
										1833327
									],
									[
										1833368,
										1833370
									],
									[
										1833450,
										1833452
									],
									[
										1833745,
										1833747
									],
									[
										1833952,
										1833954
									],
									[
										1834119,
										1834121
									],
									[
										1834325,
										1834327
									],
									[
										1834554,
										1834556
									],
									[
										1834632,
										1834634
									],
									[
										1834662,
										1834664
									],
									[
										1835033,
										1835035
									],
									[
										1835238,
										1835240
									],
									[
										1835257,
										1835259
									],
									[
										1835440,
										1835442
									],
									[
										1835509,
										1835511
									],
									[
										1835564,
										1835566
									],
									[
										1835813,
										1835815
									],
									[
										1835858,
										1835860
									],
									[
										1835933,
										1835935
									],
									[
										1836417,
										1836419
									],
									[
										1836573,
										1836575
									],
									[
										1836647,
										1836649
									],
									[
										1836682,
										1836684
									],
									[
										1836720,
										1836722
									],
									[
										1836861,
										1836863
									],
									[
										1836885,
										1836887
									],
									[
										1836942,
										1836944
									],
									[
										1837137,
										1837139
									],
									[
										1837387,
										1837389
									],
									[
										1837464,
										1837466
									],
									[
										1837533,
										1837535
									],
									[
										1837594,
										1837596
									],
									[
										1837794,
										1837796
									],
									[
										1837890,
										1837892
									],
									[
										1837900,
										1837902
									],
									[
										1837941,
										1837943
									],
									[
										1838025,
										1838027
									],
									[
										1838270,
										1838272
									],
									[
										1838468,
										1838470
									],
									[
										1838655,
										1838657
									],
									[
										1838759,
										1838761
									],
									[
										1838940,
										1838942
									],
									[
										1839034,
										1839036
									],
									[
										1839089,
										1839091
									],
									[
										1839162,
										1839164
									],
									[
										1839194,
										1839196
									],
									[
										1839322,
										1839324
									],
									[
										1839518,
										1839520
									],
									[
										1839580,
										1839582
									],
									[
										1839638,
										1839640
									],
									[
										1839790,
										1839792
									],
									[
										1839824,
										1839826
									],
									[
										1840080,
										1840082
									],
									[
										1840130,
										1840132
									],
									[
										1840173,
										1840175
									],
									[
										1840244,
										1840246
									],
									[
										1840687,
										1840689
									],
									[
										1840993,
										1840995
									],
									[
										1841038,
										1841040
									],
									[
										1841120,
										1841122
									],
									[
										1841180,
										1841182
									],
									[
										1841353,
										1841355
									],
									[
										1841451,
										1841453
									],
									[
										1841509,
										1841511
									],
									[
										1841593,
										1841595
									],
									[
										1841689,
										1841691
									],
									[
										1841769,
										1841771
									],
									[
										1841840,
										1841842
									],
									[
										1842140,
										1842142
									],
									[
										1842196,
										1842198
									],
									[
										1842236,
										1842238
									],
									[
										1842280,
										1842282
									],
									[
										1842323,
										1842325
									],
									[
										1842424,
										1842426
									],
									[
										1842496,
										1842498
									],
									[
										1842789,
										1842791
									],
									[
										1843111,
										1843113
									],
									[
										1843226,
										1843228
									],
									[
										1843489,
										1843491
									],
									[
										1843695,
										1843697
									],
									[
										1844109,
										1844111
									],
									[
										1844332,
										1844334
									],
									[
										1844539,
										1844541
									],
									[
										1844744,
										1844746
									],
									[
										1844785,
										1844787
									],
									[
										1844804,
										1844806
									],
									[
										1844844,
										1844846
									],
									[
										1844898,
										1844900
									],
									[
										1844935,
										1844937
									],
									[
										1844983,
										1844985
									],
									[
										1845028,
										1845030
									],
									[
										1845126,
										1845128
									],
									[
										1845195,
										1845197
									],
									[
										1845272,
										1845274
									],
									[
										1845291,
										1845293
									],
									[
										1845348,
										1845350
									],
									[
										1845409,
										1845411
									],
									[
										1845480,
										1845482
									],
									[
										1845553,
										1845555
									],
									[
										1845625,
										1845627
									],
									[
										1845699,
										1845701
									],
									[
										1845769,
										1845771
									],
									[
										1845849,
										1845851
									],
									[
										1845904,
										1845906
									],
									[
										1845931,
										1845933
									],
									[
										1846001,
										1846003
									],
									[
										1846048,
										1846050
									],
									[
										1846071,
										1846073
									],
									[
										1846119,
										1846121
									],
									[
										1846142,
										1846144
									],
									[
										1846186,
										1846188
									],
									[
										1846195,
										1846197
									],
									[
										1846250,
										1846252
									],
									[
										1846274,
										1846276
									],
									[
										1846306,
										1846308
									],
									[
										1846336,
										1846338
									],
									[
										1846421,
										1846423
									],
									[
										1846468,
										1846470
									],
									[
										1846480,
										1846482
									],
									[
										1846507,
										1846509
									],
									[
										1846754,
										1846756
									],
									[
										1846810,
										1846812
									],
									[
										1846862,
										1846864
									],
									[
										1846950,
										1846952
									],
									[
										1847208,
										1847210
									],
									[
										1847351,
										1847353
									],
									[
										1847361,
										1847363
									],
									[
										1847635,
										1847637
									],
									[
										1847744,
										1847746
									],
									[
										1848091,
										1848093
									],
									[
										1848213,
										1848215
									],
									[
										1848476,
										1848478
									],
									[
										1848505,
										1848507
									],
									[
										1848538,
										1848540
									],
									[
										1848704,
										1848706
									],
									[
										1848787,
										1848789
									],
									[
										1848952,
										1848954
									],
									[
										1849064,
										1849066
									],
									[
										1849309,
										1849311
									],
									[
										1849385,
										1849387
									],
									[
										1849636,
										1849638
									],
									[
										1849679,
										1849681
									],
									[
										1849859,
										1849861
									],
									[
										1849910,
										1849912
									],
									[
										1850096,
										1850098
									],
									[
										1850126,
										1850128
									],
									[
										1850244,
										1850246
									],
									[
										1850294,
										1850296
									],
									[
										1850306,
										1850308
									],
									[
										1850574,
										1850576
									],
									[
										1850761,
										1850763
									],
									[
										1850850,
										1850852
									],
									[
										1850888,
										1850890
									],
									[
										1851129,
										1851131
									],
									[
										1851179,
										1851181
									],
									[
										1851230,
										1851232
									],
									[
										1851526,
										1851528
									],
									[
										1851839,
										1851841
									],
									[
										1852059,
										1852061
									],
									[
										1852114,
										1852116
									],
									[
										1852162,
										1852164
									],
									[
										1852227,
										1852229
									],
									[
										1852236,
										1852238
									],
									[
										1852401,
										1852403
									],
									[
										1852606,
										1852608
									],
									[
										1852847,
										1852849
									],
									[
										1852905,
										1852907
									],
									[
										1852951,
										1852953
									],
									[
										1852991,
										1852993
									],
									[
										1853328,
										1853330
									],
									[
										1853710,
										1853712
									],
									[
										1854059,
										1854061
									],
									[
										1854134,
										1854136
									],
									[
										1854592,
										1854594
									],
									[
										1854667,
										1854669
									],
									[
										1854998,
										1855000
									],
									[
										1855082,
										1855084
									],
									[
										1855382,
										1855384
									],
									[
										1855432,
										1855434
									],
									[
										1855477,
										1855479
									],
									[
										1855520,
										1855522
									],
									[
										1855570,
										1855572
									],
									[
										1855614,
										1855616
									],
									[
										1855823,
										1855825
									],
									[
										1855858,
										1855860
									],
									[
										1856019,
										1856021
									],
									[
										1856164,
										1856166
									],
									[
										1856272,
										1856274
									],
									[
										1856533,
										1856535
									],
									[
										1856816,
										1856818
									],
									[
										1856979,
										1856981
									],
									[
										1857396,
										1857398
									],
									[
										1857794,
										1857796
									],
									[
										1857921,
										1857923
									],
									[
										1858283,
										1858285
									],
									[
										1858403,
										1858405
									],
									[
										1858629,
										1858631
									],
									[
										1858857,
										1858859
									],
									[
										1859222,
										1859224
									],
									[
										1859396,
										1859398
									],
									[
										1859438,
										1859440
									],
									[
										1859534,
										1859536
									],
									[
										1859844,
										1859846
									],
									[
										1859894,
										1859896
									],
									[
										1860042,
										1860044
									],
									[
										1860306,
										1860308
									],
									[
										1860559,
										1860561
									],
									[
										1860676,
										1860678
									],
									[
										1860870,
										1860872
									],
									[
										1861008,
										1861010
									],
									[
										1861033,
										1861035
									],
									[
										1861073,
										1861075
									],
									[
										1861124,
										1861126
									],
									[
										1861169,
										1861171
									],
									[
										1861214,
										1861216
									],
									[
										1861258,
										1861260
									],
									[
										1861327,
										1861329
									],
									[
										1861419,
										1861421
									],
									[
										1861473,
										1861475
									],
									[
										1861502,
										1861504
									],
									[
										1861515,
										1861517
									],
									[
										1861572,
										1861574
									],
									[
										1861584,
										1861586
									],
									[
										1861792,
										1861794
									],
									[
										1861825,
										1861827
									],
									[
										1862040,
										1862042
									],
									[
										1862239,
										1862241
									],
									[
										1862272,
										1862274
									],
									[
										1862487,
										1862489
									],
									[
										1862766,
										1862768
									],
									[
										1862810,
										1862812
									],
									[
										1862922,
										1862924
									],
									[
										1863199,
										1863201
									],
									[
										1863261,
										1863263
									],
									[
										1863273,
										1863275
									],
									[
										1863553,
										1863555
									],
									[
										1863596,
										1863598
									],
									[
										1863788,
										1863790
									],
									[
										1864096,
										1864098
									],
									[
										1864279,
										1864281
									],
									[
										1864291,
										1864293
									],
									[
										1864512,
										1864514
									],
									[
										1864569,
										1864571
									],
									[
										1864691,
										1864693
									],
									[
										1864755,
										1864757
									],
									[
										1864769,
										1864771
									],
									[
										1864857,
										1864859
									],
									[
										1864920,
										1864922
									],
									[
										1864934,
										1864936
									],
									[
										1865020,
										1865022
									],
									[
										1865081,
										1865083
									],
									[
										1865095,
										1865097
									],
									[
										1865180,
										1865182
									],
									[
										1865252,
										1865254
									],
									[
										1865266,
										1865268
									],
									[
										1865362,
										1865364
									],
									[
										1865433,
										1865435
									],
									[
										1865447,
										1865449
									],
									[
										1865502,
										1865504
									],
									[
										1865532,
										1865534
									],
									[
										1865569,
										1865571
									],
									[
										1865592,
										1865594
									],
									[
										1865606,
										1865608
									],
									[
										1865695,
										1865697
									],
									[
										1865759,
										1865761
									],
									[
										1865773,
										1865775
									],
									[
										1865828,
										1865830
									],
									[
										1865864,
										1865866
									],
									[
										1865901,
										1865903
									],
									[
										1865930,
										1865932
									],
									[
										1865944,
										1865946
									],
									[
										1866035,
										1866037
									],
									[
										1866101,
										1866103
									],
									[
										1866115,
										1866117
									],
									[
										1866203,
										1866205
									],
									[
										1866277,
										1866279
									],
									[
										1866291,
										1866293
									],
									[
										1866522,
										1866524
									],
									[
										1866770,
										1866772
									],
									[
										1866987,
										1866989
									],
									[
										1867201,
										1867203
									],
									[
										1867433,
										1867435
									],
									[
										1867638,
										1867640
									],
									[
										1867729,
										1867731
									],
									[
										1867870,
										1867872
									],
									[
										1867899,
										1867901
									],
									[
										1867913,
										1867915
									],
									[
										1868034,
										1868036
									],
									[
										1868246,
										1868248
									],
									[
										1868649,
										1868651
									],
									[
										1868708,
										1868710
									],
									[
										1868856,
										1868858
									],
									[
										1868958,
										1868960
									],
									[
										1869012,
										1869014
									],
									[
										1869092,
										1869094
									],
									[
										1869130,
										1869132
									],
									[
										1869197,
										1869199
									],
									[
										1869338,
										1869340
									],
									[
										1869386,
										1869388
									],
									[
										1869435,
										1869437
									],
									[
										1869455,
										1869457
									],
									[
										1869546,
										1869548
									],
									[
										1869661,
										1869663
									],
									[
										1869709,
										1869711
									],
									[
										1869804,
										1869806
									],
									[
										1869898,
										1869900
									],
									[
										1869933,
										1869935
									],
									[
										1869999,
										1870001
									],
									[
										1870058,
										1870060
									],
									[
										1870227,
										1870229
									],
									[
										1870238,
										1870240
									],
									[
										1870257,
										1870259
									],
									[
										1870277,
										1870279
									],
									[
										1870287,
										1870289
									],
									[
										1870312,
										1870314
									],
									[
										1870323,
										1870325
									],
									[
										1870396,
										1870398
									],
									[
										1870445,
										1870447
									],
									[
										1870785,
										1870787
									],
									[
										1870947,
										1870949
									],
									[
										1870988,
										1870990
									],
									[
										1871148,
										1871150
									],
									[
										1871228,
										1871230
									],
									[
										1871248,
										1871250
									],
									[
										1871294,
										1871296
									],
									[
										1871311,
										1871313
									],
									[
										1871434,
										1871436
									],
									[
										1871483,
										1871485
									],
									[
										1871803,
										1871805
									],
									[
										1872123,
										1872125
									],
									[
										1872172,
										1872174
									],
									[
										1872476,
										1872478
									],
									[
										1872673,
										1872675
									],
									[
										1872882,
										1872884
									],
									[
										1873124,
										1873126
									],
									[
										1873441,
										1873443
									],
									[
										1873551,
										1873553
									],
									[
										1873773,
										1873775
									],
									[
										1873960,
										1873962
									],
									[
										1874000,
										1874002
									],
									[
										1874210,
										1874212
									],
									[
										1874457,
										1874459
									],
									[
										1874626,
										1874628
									],
									[
										1874721,
										1874723
									],
									[
										1874866,
										1874868
									],
									[
										1875187,
										1875189
									],
									[
										1875498,
										1875500
									],
									[
										1875819,
										1875821
									],
									[
										1875954,
										1875956
									],
									[
										1876303,
										1876305
									],
									[
										1876437,
										1876439
									],
									[
										1876798,
										1876800
									],
									[
										1877171,
										1877173
									],
									[
										1877332,
										1877334
									],
									[
										1877621,
										1877623
									],
									[
										1877748,
										1877750
									],
									[
										1878275,
										1878277
									],
									[
										1878328,
										1878330
									],
									[
										1878387,
										1878389
									],
									[
										1878530,
										1878532
									],
									[
										1878645,
										1878647
									],
									[
										1878879,
										1878881
									],
									[
										1879056,
										1879058
									],
									[
										1879206,
										1879208
									],
									[
										1879440,
										1879442
									],
									[
										1879562,
										1879564
									],
									[
										1879962,
										1879964
									],
									[
										1880095,
										1880097
									],
									[
										1880325,
										1880327
									],
									[
										1880488,
										1880490
									],
									[
										1880532,
										1880534
									],
									[
										1880575,
										1880577
									],
									[
										1880620,
										1880622
									],
									[
										1880686,
										1880688
									],
									[
										1880795,
										1880797
									],
									[
										1880969,
										1880971
									],
									[
										1881138,
										1881140
									],
									[
										1881354,
										1881356
									],
									[
										1881482,
										1881484
									],
									[
										1881494,
										1881496
									],
									[
										1881771,
										1881773
									],
									[
										1882114,
										1882116
									],
									[
										1882431,
										1882433
									],
									[
										1882544,
										1882546
									],
									[
										1882675,
										1882677
									],
									[
										1882938,
										1882940
									],
									[
										1883119,
										1883121
									],
									[
										1883131,
										1883133
									],
									[
										1883320,
										1883322
									],
									[
										1883632,
										1883634
									],
									[
										1883846,
										1883848
									],
									[
										1884283,
										1884285
									],
									[
										1884613,
										1884615
									],
									[
										1885003,
										1885005
									],
									[
										1885321,
										1885323
									],
									[
										1885619,
										1885621
									],
									[
										1886054,
										1886056
									],
									[
										1886309,
										1886311
									],
									[
										1886397,
										1886399
									],
									[
										1886451,
										1886453
									],
									[
										1886671,
										1886673
									],
									[
										1886719,
										1886721
									],
									[
										1886930,
										1886932
									],
									[
										1887337,
										1887339
									],
									[
										1887643,
										1887645
									],
									[
										1887925,
										1887927
									],
									[
										1887968,
										1887970
									],
									[
										1888012,
										1888014
									],
									[
										1888319,
										1888321
									],
									[
										1888729,
										1888731
									],
									[
										1889102,
										1889104
									],
									[
										1889202,
										1889204
									],
									[
										1889430,
										1889432
									],
									[
										1889625,
										1889627
									],
									[
										1889646,
										1889648
									],
									[
										1889862,
										1889864
									],
									[
										1890254,
										1890256
									],
									[
										1890458,
										1890460
									],
									[
										1890544,
										1890546
									],
									[
										1890790,
										1890792
									],
									[
										1890824,
										1890826
									],
									[
										1890996,
										1890998
									],
									[
										1891028,
										1891030
									],
									[
										1891066,
										1891068
									],
									[
										1891120,
										1891122
									],
									[
										1891278,
										1891280
									],
									[
										1891491,
										1891493
									],
									[
										1891607,
										1891609
									],
									[
										1891647,
										1891649
									],
									[
										1892021,
										1892023
									],
									[
										1892091,
										1892093
									],
									[
										1892099,
										1892101
									],
									[
										1892108,
										1892110
									],
									[
										1892322,
										1892324
									],
									[
										1892352,
										1892354
									],
									[
										1892630,
										1892632
									],
									[
										1892832,
										1892834
									],
									[
										1893096,
										1893098
									],
									[
										1893106,
										1893108
									],
									[
										1893470,
										1893472
									],
									[
										1893480,
										1893482
									],
									[
										1893828,
										1893830
									],
									[
										1894092,
										1894094
									],
									[
										1894166,
										1894168
									],
									[
										1894223,
										1894225
									],
									[
										1894466,
										1894468
									],
									[
										1894776,
										1894778
									],
									[
										1894802,
										1894804
									],
									[
										1895061,
										1895063
									],
									[
										1895334,
										1895336
									],
									[
										1895343,
										1895345
									],
									[
										1895504,
										1895506
									],
									[
										1895508,
										1895510
									],
									[
										1895563,
										1895565
									],
									[
										1895753,
										1895755
									],
									[
										1896022,
										1896024
									],
									[
										1896072,
										1896074
									],
									[
										1896171,
										1896173
									],
									[
										1896476,
										1896478
									],
									[
										1896606,
										1896608
									],
									[
										1896652,
										1896654
									],
									[
										1896727,
										1896729
									],
									[
										1896768,
										1896770
									],
									[
										1896801,
										1896803
									],
									[
										1896842,
										1896844
									],
									[
										1896922,
										1896924
									],
									[
										1896939,
										1896941
									],
									[
										1897059,
										1897061
									],
									[
										1897082,
										1897084
									],
									[
										1897118,
										1897120
									],
									[
										1897195,
										1897197
									],
									[
										1897438,
										1897440
									],
									[
										1897451,
										1897453
									],
									[
										1897646,
										1897648
									],
									[
										1898066,
										1898068
									],
									[
										1898246,
										1898248
									],
									[
										1898564,
										1898566
									],
									[
										1898895,
										1898897
									],
									[
										1899291,
										1899293
									],
									[
										1899321,
										1899323
									],
									[
										1899512,
										1899514
									],
									[
										1899911,
										1899913
									],
									[
										1900489,
										1900491
									],
									[
										1901059,
										1901061
									],
									[
										1901324,
										1901326
									],
									[
										1901663,
										1901665
									],
									[
										1901933,
										1901935
									],
									[
										1901967,
										1901969
									],
									[
										1902212,
										1902214
									],
									[
										1902274,
										1902276
									],
									[
										1902310,
										1902312
									],
									[
										1902650,
										1902652
									],
									[
										1902862,
										1902864
									],
									[
										1902968,
										1902970
									],
									[
										1902993,
										1902995
									],
									[
										1903078,
										1903080
									],
									[
										1903103,
										1903105
									],
									[
										1903233,
										1903235
									],
									[
										1903481,
										1903483
									],
									[
										1903534,
										1903536
									],
									[
										1903641,
										1903643
									],
									[
										1903898,
										1903900
									],
									[
										1904002,
										1904004
									],
									[
										1904075,
										1904077
									],
									[
										1904213,
										1904215
									],
									[
										1904238,
										1904240
									],
									[
										1904263,
										1904265
									],
									[
										1904278,
										1904280
									],
									[
										1904314,
										1904316
									],
									[
										1904347,
										1904349
									],
									[
										1904395,
										1904397
									],
									[
										1904420,
										1904422
									],
									[
										1904610,
										1904612
									],
									[
										1904643,
										1904645
									],
									[
										1904719,
										1904721
									],
									[
										1904791,
										1904793
									],
									[
										1904932,
										1904934
									],
									[
										1904981,
										1904983
									],
									[
										1905358,
										1905360
									],
									[
										1905772,
										1905774
									],
									[
										1906047,
										1906049
									],
									[
										1906210,
										1906212
									],
									[
										1906499,
										1906501
									],
									[
										1906795,
										1906797
									],
									[
										1907013,
										1907015
									],
									[
										1907339,
										1907341
									],
									[
										1907507,
										1907509
									],
									[
										1907624,
										1907626
									],
									[
										1907779,
										1907781
									],
									[
										1907844,
										1907846
									],
									[
										1907944,
										1907946
									],
									[
										1908090,
										1908092
									],
									[
										1908246,
										1908248
									],
									[
										1908425,
										1908427
									],
									[
										1908639,
										1908641
									],
									[
										1908829,
										1908831
									],
									[
										1909041,
										1909043
									],
									[
										1909216,
										1909218
									],
									[
										1909407,
										1909409
									],
									[
										1909689,
										1909691
									],
									[
										1909897,
										1909899
									],
									[
										1910165,
										1910167
									],
									[
										1910587,
										1910589
									],
									[
										1910776,
										1910778
									],
									[
										1910897,
										1910899
									],
									[
										1910962,
										1910964
									],
									[
										1911124,
										1911126
									],
									[
										1911190,
										1911192
									],
									[
										1911205,
										1911207
									],
									[
										1911251,
										1911253
									],
									[
										1911266,
										1911268
									],
									[
										1911376,
										1911378
									],
									[
										1911552,
										1911554
									],
									[
										1911816,
										1911818
									],
									[
										1911872,
										1911874
									],
									[
										1911889,
										1911891
									],
									[
										1911971,
										1911973
									],
									[
										1912064,
										1912066
									],
									[
										1912086,
										1912088
									],
									[
										1912245,
										1912247
									],
									[
										1912396,
										1912398
									],
									[
										1912433,
										1912435
									],
									[
										1912597,
										1912599
									],
									[
										1912899,
										1912901
									],
									[
										1912940,
										1912942
									],
									[
										1913024,
										1913026
									],
									[
										1913113,
										1913115
									],
									[
										1913247,
										1913249
									],
									[
										1913274,
										1913276
									],
									[
										1913432,
										1913434
									],
									[
										1913792,
										1913794
									],
									[
										1914075,
										1914077
									],
									[
										1914496,
										1914498
									],
									[
										1914771,
										1914773
									],
									[
										1914956,
										1914958
									],
									[
										1915183,
										1915185
									],
									[
										1915423,
										1915425
									],
									[
										1915434,
										1915436
									],
									[
										1915590,
										1915592
									],
									[
										1915707,
										1915709
									],
									[
										1915833,
										1915835
									],
									[
										1915943,
										1915945
									],
									[
										1916112,
										1916114
									],
									[
										1916319,
										1916321
									],
									[
										1916644,
										1916646
									],
									[
										1916767,
										1916769
									],
									[
										1917104,
										1917106
									],
									[
										1917318,
										1917320
									],
									[
										1917529,
										1917531
									],
									[
										1917805,
										1917807
									],
									[
										1917884,
										1917886
									],
									[
										1918143,
										1918145
									],
									[
										1918194,
										1918196
									],
									[
										1918406,
										1918408
									],
									[
										1918619,
										1918621
									],
									[
										1918882,
										1918884
									],
									[
										1919017,
										1919019
									],
									[
										1919084,
										1919086
									],
									[
										1919122,
										1919124
									],
									[
										1919306,
										1919308
									],
									[
										1919431,
										1919433
									],
									[
										1919451,
										1919453
									],
									[
										1919572,
										1919574
									],
									[
										1919749,
										1919751
									],
									[
										1919972,
										1919974
									],
									[
										1920008,
										1920010
									],
									[
										1920310,
										1920312
									],
									[
										1920579,
										1920581
									],
									[
										1920821,
										1920823
									],
									[
										1921028,
										1921030
									],
									[
										1921307,
										1921309
									],
									[
										1921351,
										1921353
									],
									[
										1921395,
										1921397
									],
									[
										1921511,
										1921513
									],
									[
										1921883,
										1921885
									],
									[
										1922241,
										1922243
									],
									[
										1922611,
										1922613
									],
									[
										1922775,
										1922777
									],
									[
										1922807,
										1922809
									],
									[
										1922841,
										1922843
									],
									[
										1923009,
										1923011
									],
									[
										1923280,
										1923282
									],
									[
										1923435,
										1923437
									],
									[
										1923631,
										1923633
									],
									[
										1923643,
										1923645
									],
									[
										1923819,
										1923821
									],
									[
										1924094,
										1924096
									],
									[
										1924380,
										1924382
									],
									[
										1924393,
										1924395
									],
									[
										1924610,
										1924612
									],
									[
										1924821,
										1924823
									],
									[
										1924975,
										1924977
									],
									[
										1924998,
										1925000
									],
									[
										1925196,
										1925198
									],
									[
										1925391,
										1925393
									],
									[
										1925770,
										1925772
									],
									[
										1925997,
										1925999
									],
									[
										1926254,
										1926256
									],
									[
										1926508,
										1926510
									],
									[
										1926771,
										1926773
									],
									[
										1926858,
										1926860
									],
									[
										1927031,
										1927033
									],
									[
										1927269,
										1927271
									],
									[
										1927477,
										1927479
									],
									[
										1927876,
										1927878
									],
									[
										1928100,
										1928102
									],
									[
										1928378,
										1928380
									],
									[
										1928524,
										1928526
									],
									[
										1928537,
										1928539
									],
									[
										1928672,
										1928674
									],
									[
										1928745,
										1928747
									],
									[
										1928791,
										1928793
									],
									[
										1928854,
										1928856
									],
									[
										1928932,
										1928934
									],
									[
										1929019,
										1929021
									],
									[
										1929171,
										1929173
									],
									[
										1929249,
										1929251
									],
									[
										1929333,
										1929335
									],
									[
										1929418,
										1929420
									],
									[
										1929498,
										1929500
									],
									[
										1929577,
										1929579
									],
									[
										1929655,
										1929657
									],
									[
										1929934,
										1929936
									],
									[
										1930076,
										1930078
									],
									[
										1930090,
										1930092
									],
									[
										1930118,
										1930120
									],
									[
										1930252,
										1930254
									],
									[
										1930412,
										1930414
									],
									[
										1930423,
										1930425
									],
									[
										1931509,
										1931511
									],
									[
										1931552,
										1931554
									],
									[
										1931594,
										1931596
									],
									[
										1931857,
										1931859
									],
									[
										1931909,
										1931911
									],
									[
										1931960,
										1931962
									],
									[
										1932282,
										1932284
									],
									[
										1932428,
										1932430
									],
									[
										1932626,
										1932628
									],
									[
										1932899,
										1932901
									],
									[
										1933008,
										1933010
									],
									[
										1933264,
										1933266
									],
									[
										1933702,
										1933704
									],
									[
										1934023,
										1934025
									],
									[
										1934306,
										1934308
									],
									[
										1934896,
										1934898
									],
									[
										1935311,
										1935313
									],
									[
										1935756,
										1935758
									],
									[
										1936142,
										1936144
									],
									[
										1936385,
										1936387
									],
									[
										1936414,
										1936416
									],
									[
										1936483,
										1936485
									],
									[
										1936666,
										1936668
									],
									[
										1936721,
										1936723
									],
									[
										1937015,
										1937017
									],
									[
										1937272,
										1937274
									],
									[
										1937515,
										1937517
									],
									[
										1937643,
										1937645
									],
									[
										1937854,
										1937856
									],
									[
										1938161,
										1938163
									],
									[
										1938301,
										1938303
									],
									[
										1938402,
										1938404
									],
									[
										1938621,
										1938623
									],
									[
										1939025,
										1939027
									],
									[
										1939226,
										1939228
									],
									[
										1939274,
										1939276
									],
									[
										1939470,
										1939472
									],
									[
										1939684,
										1939686
									],
									[
										1940033,
										1940035
									],
									[
										1940193,
										1940195
									],
									[
										1940704,
										1940706
									],
									[
										1941094,
										1941096
									],
									[
										1941409,
										1941411
									],
									[
										1941702,
										1941704
									],
									[
										1942101,
										1942103
									],
									[
										1942338,
										1942340
									],
									[
										1942627,
										1942629
									],
									[
										1942985,
										1942987
									],
									[
										1943008,
										1943010
									],
									[
										1943192,
										1943194
									],
									[
										1943514,
										1943516
									],
									[
										1943931,
										1943933
									],
									[
										1944012,
										1944014
									],
									[
										1944034,
										1944036
									],
									[
										1944207,
										1944209
									],
									[
										1944225,
										1944227
									],
									[
										1944378,
										1944380
									],
									[
										1944425,
										1944427
									],
									[
										1944897,
										1944899
									],
									[
										1945179,
										1945181
									],
									[
										1945501,
										1945503
									],
									[
										1945791,
										1945793
									],
									[
										1946044,
										1946046
									],
									[
										1946453,
										1946455
									],
									[
										1946774,
										1946776
									],
									[
										1947085,
										1947087
									],
									[
										1947302,
										1947304
									],
									[
										1947593,
										1947595
									],
									[
										1947996,
										1947998
									],
									[
										1948626,
										1948628
									],
									[
										1948655,
										1948657
									],
									[
										1948812,
										1948814
									],
									[
										1949101,
										1949103
									],
									[
										1949463,
										1949465
									],
									[
										1949560,
										1949562
									],
									[
										1949860,
										1949862
									],
									[
										1949959,
										1949961
									],
									[
										1950021,
										1950023
									],
									[
										1950238,
										1950240
									],
									[
										1950568,
										1950570
									],
									[
										1951030,
										1951032
									],
									[
										1951548,
										1951550
									],
									[
										1951946,
										1951948
									],
									[
										1952228,
										1952230
									],
									[
										1952569,
										1952571
									],
									[
										1952836,
										1952838
									],
									[
										1953005,
										1953007
									],
									[
										1953147,
										1953149
									],
									[
										1953314,
										1953316
									],
									[
										1953503,
										1953505
									],
									[
										1953636,
										1953638
									],
									[
										1953732,
										1953734
									],
									[
										1953933,
										1953935
									],
									[
										1954122,
										1954124
									],
									[
										1954255,
										1954257
									],
									[
										1954351,
										1954353
									],
									[
										1954789,
										1954791
									],
									[
										1955047,
										1955049
									],
									[
										1955218,
										1955220
									],
									[
										1955461,
										1955463
									],
									[
										1955720,
										1955722
									],
									[
										1955919,
										1955921
									],
									[
										1956204,
										1956206
									],
									[
										1956504,
										1956506
									],
									[
										1956810,
										1956812
									],
									[
										1956990,
										1956992
									],
									[
										1957409,
										1957411
									],
									[
										1957776,
										1957778
									],
									[
										1957999,
										1958001
									],
									[
										1958195,
										1958197
									],
									[
										1958219,
										1958221
									],
									[
										1958525,
										1958527
									],
									[
										1958641,
										1958643
									],
									[
										1958870,
										1958872
									],
									[
										1959221,
										1959223
									],
									[
										1959525,
										1959527
									],
									[
										1959848,
										1959850
									],
									[
										1960174,
										1960176
									],
									[
										1960733,
										1960735
									],
									[
										1961064,
										1961066
									],
									[
										1961521,
										1961523
									],
									[
										1961584,
										1961586
									],
									[
										1961633,
										1961635
									],
									[
										1962177,
										1962179
									],
									[
										1962273,
										1962275
									],
									[
										1962618,
										1962620
									],
									[
										1962848,
										1962850
									],
									[
										1963086,
										1963088
									],
									[
										1963122,
										1963124
									],
									[
										1963253,
										1963255
									],
									[
										1963286,
										1963288
									],
									[
										1963333,
										1963335
									],
									[
										1963376,
										1963378
									],
									[
										1963427,
										1963429
									],
									[
										1963482,
										1963484
									],
									[
										1963530,
										1963532
									],
									[
										1963584,
										1963586
									],
									[
										1963635,
										1963637
									],
									[
										1963685,
										1963687
									],
									[
										1963728,
										1963730
									],
									[
										1963768,
										1963770
									],
									[
										1963815,
										1963817
									],
									[
										1963859,
										1963861
									],
									[
										1963904,
										1963906
									],
									[
										1963949,
										1963951
									],
									[
										1964005,
										1964007
									],
									[
										1964061,
										1964063
									],
									[
										1964107,
										1964109
									],
									[
										1964159,
										1964161
									],
									[
										1964209,
										1964211
									],
									[
										1964254,
										1964256
									],
									[
										1964304,
										1964306
									],
									[
										1964354,
										1964356
									],
									[
										1964404,
										1964406
									],
									[
										1964448,
										1964450
									],
									[
										1964492,
										1964494
									],
									[
										1964532,
										1964534
									],
									[
										1964713,
										1964715
									],
									[
										1964969,
										1964971
									],
									[
										1965119,
										1965121
									],
									[
										1965441,
										1965443
									],
									[
										1965679,
										1965681
									],
									[
										1965838,
										1965840
									],
									[
										1966021,
										1966023
									],
									[
										1966048,
										1966050
									],
									[
										1966500,
										1966502
									],
									[
										1966810,
										1966812
									],
									[
										1967107,
										1967109
									],
									[
										1967234,
										1967236
									],
									[
										1967295,
										1967297
									],
									[
										1967400,
										1967402
									],
									[
										1967900,
										1967902
									],
									[
										1967957,
										1967959
									],
									[
										1968010,
										1968012
									],
									[
										1968071,
										1968073
									],
									[
										1968136,
										1968138
									],
									[
										1968194,
										1968196
									],
									[
										1968209,
										1968211
									],
									[
										1968513,
										1968515
									],
									[
										1968839,
										1968841
									],
									[
										1969165,
										1969167
									],
									[
										1969182,
										1969184
									],
									[
										1969488,
										1969490
									],
									[
										1969808,
										1969810
									],
									[
										1970125,
										1970127
									],
									[
										1970443,
										1970445
									],
									[
										1970507,
										1970509
									],
									[
										1970568,
										1970570
									],
									[
										1970628,
										1970630
									],
									[
										1970681,
										1970683
									],
									[
										1970731,
										1970733
									],
									[
										1970788,
										1970790
									],
									[
										1970842,
										1970844
									],
									[
										1970897,
										1970899
									],
									[
										1970952,
										1970954
									],
									[
										1971018,
										1971020
									],
									[
										1971084,
										1971086
									],
									[
										1971140,
										1971142
									],
									[
										1971202,
										1971204
									],
									[
										1971262,
										1971264
									],
									[
										1971317,
										1971319
									],
									[
										1971377,
										1971379
									],
									[
										1971437,
										1971439
									],
									[
										1971497,
										1971499
									],
									[
										1971551,
										1971553
									],
									[
										1971604,
										1971606
									],
									[
										1971658,
										1971660
									],
									[
										1971708,
										1971710
									],
									[
										1971767,
										1971769
									],
									[
										1972089,
										1972091
									],
									[
										1972419,
										1972421
									],
									[
										1972746,
										1972748
									],
									[
										1973227,
										1973229
									],
									[
										1973600,
										1973602
									],
									[
										1973935,
										1973937
									],
									[
										1974343,
										1974345
									],
									[
										1974741,
										1974743
									],
									[
										1975061,
										1975063
									],
									[
										1975393,
										1975395
									],
									[
										1975472,
										1975474
									],
									[
										1975761,
										1975763
									],
									[
										1975958,
										1975960
									],
									[
										1976037,
										1976039
									],
									[
										1976128,
										1976130
									],
									[
										1976161,
										1976163
									],
									[
										1976247,
										1976249
									],
									[
										1976280,
										1976282
									],
									[
										1976368,
										1976370
									],
									[
										1976401,
										1976403
									],
									[
										1976490,
										1976492
									],
									[
										1976521,
										1976523
									],
									[
										1976544,
										1976546
									],
									[
										1976628,
										1976630
									],
									[
										1976719,
										1976721
									],
									[
										1976752,
										1976754
									],
									[
										1976838,
										1976840
									],
									[
										1976871,
										1976873
									],
									[
										1976959,
										1976961
									],
									[
										1976992,
										1976994
									],
									[
										1977081,
										1977083
									],
									[
										1977112,
										1977114
									],
									[
										1977135,
										1977137
									],
									[
										1977222,
										1977224
									],
									[
										1977313,
										1977315
									],
									[
										1977346,
										1977348
									],
									[
										1977432,
										1977434
									],
									[
										1977465,
										1977467
									],
									[
										1977553,
										1977555
									],
									[
										1977586,
										1977588
									],
									[
										1977675,
										1977677
									],
									[
										1977706,
										1977708
									],
									[
										1977729,
										1977731
									],
									[
										1977842,
										1977844
									],
									[
										1977933,
										1977935
									],
									[
										1977966,
										1977968
									],
									[
										1978052,
										1978054
									],
									[
										1978085,
										1978087
									],
									[
										1978173,
										1978175
									],
									[
										1978206,
										1978208
									],
									[
										1978295,
										1978297
									],
									[
										1978326,
										1978328
									],
									[
										1978349,
										1978351
									],
									[
										1978422,
										1978424
									],
									[
										1978513,
										1978515
									],
									[
										1978546,
										1978548
									],
									[
										1978632,
										1978634
									],
									[
										1978665,
										1978667
									],
									[
										1978753,
										1978755
									],
									[
										1978786,
										1978788
									],
									[
										1978875,
										1978877
									],
									[
										1978906,
										1978908
									],
									[
										1978929,
										1978931
									],
									[
										1978949,
										1978951
									],
									[
										1978988,
										1978990
									],
									[
										1979008,
										1979010
									],
									[
										1979043,
										1979045
									],
									[
										1979063,
										1979065
									],
									[
										1979106,
										1979108
									],
									[
										1979126,
										1979128
									],
									[
										1979173,
										1979175
									],
									[
										1979193,
										1979195
									],
									[
										1979233,
										1979235
									],
									[
										1979253,
										1979255
									],
									[
										1979530,
										1979532
									],
									[
										1979553,
										1979555
									],
									[
										1979573,
										1979575
									],
									[
										1979858,
										1979860
									],
									[
										1979881,
										1979883
									],
									[
										1979901,
										1979903
									],
									[
										1980190,
										1980192
									],
									[
										1980213,
										1980215
									],
									[
										1980233,
										1980235
									],
									[
										1980515,
										1980517
									],
									[
										1980538,
										1980540
									],
									[
										1980558,
										1980560
									],
									[
										1980843,
										1980845
									],
									[
										1980866,
										1980868
									],
									[
										1980886,
										1980888
									],
									[
										1981171,
										1981173
									],
									[
										1981194,
										1981196
									],
									[
										1981214,
										1981216
									],
									[
										1981498,
										1981500
									],
									[
										1981521,
										1981523
									],
									[
										1981541,
										1981543
									],
									[
										1981818,
										1981820
									],
									[
										1981841,
										1981843
									],
									[
										1981861,
										1981863
									],
									[
										1982135,
										1982137
									],
									[
										1982158,
										1982160
									],
									[
										1982178,
										1982180
									],
									[
										1982457,
										1982459
									],
									[
										1982480,
										1982482
									],
									[
										1982500,
										1982502
									],
									[
										1982779,
										1982781
									],
									[
										1982802,
										1982804
									],
									[
										1982822,
										1982824
									],
									[
										1983112,
										1983114
									],
									[
										1983135,
										1983137
									],
									[
										1983155,
										1983157
									],
									[
										1983445,
										1983447
									],
									[
										1983468,
										1983470
									],
									[
										1983488,
										1983490
									],
									[
										1983768,
										1983770
									],
									[
										1983791,
										1983793
									],
									[
										1983811,
										1983813
									],
									[
										1984097,
										1984099
									],
									[
										1984120,
										1984122
									],
									[
										1984140,
										1984142
									],
									[
										1984424,
										1984426
									],
									[
										1984447,
										1984449
									],
									[
										1984467,
										1984469
									],
									[
										1984746,
										1984748
									],
									[
										1984769,
										1984771
									],
									[
										1984789,
										1984791
									],
									[
										1985073,
										1985075
									],
									[
										1985096,
										1985098
									],
									[
										1985116,
										1985118
									],
									[
										1985400,
										1985402
									],
									[
										1985423,
										1985425
									],
									[
										1985443,
										1985445
									],
									[
										1985727,
										1985729
									],
									[
										1985750,
										1985752
									],
									[
										1985770,
										1985772
									],
									[
										1986048,
										1986050
									],
									[
										1986071,
										1986073
									],
									[
										1986091,
										1986093
									],
									[
										1986367,
										1986369
									],
									[
										1986390,
										1986392
									],
									[
										1986410,
										1986412
									],
									[
										1986688,
										1986690
									],
									[
										1986711,
										1986713
									],
									[
										1986731,
										1986733
									],
									[
										1987005,
										1987007
									],
									[
										1987028,
										1987030
									],
									[
										1987048,
										1987050
									],
									[
										1987326,
										1987328
									],
									[
										1987349,
										1987351
									],
									[
										1987369,
										1987371
									],
									[
										1987646,
										1987648
									],
									[
										1987669,
										1987671
									],
									[
										1987689,
										1987691
									],
									[
										1987735,
										1987737
									],
									[
										1987755,
										1987757
									],
									[
										1987798,
										1987800
									],
									[
										1987818,
										1987820
									],
									[
										1987860,
										1987862
									],
									[
										1987880,
										1987882
									],
									[
										1987915,
										1987917
									],
									[
										1987935,
										1987937
									],
									[
										1987967,
										1987969
									],
									[
										1987987,
										1987989
									],
									[
										1988023,
										1988025
									],
									[
										1988043,
										1988045
									],
									[
										1988080,
										1988082
									],
									[
										1988100,
										1988102
									],
									[
										1988148,
										1988150
									],
									[
										1988168,
										1988170
									],
									[
										1988212,
										1988214
									],
									[
										1988232,
										1988234
									],
									[
										1988274,
										1988276
									],
									[
										1988294,
										1988296
									],
									[
										1988331,
										1988333
									],
									[
										1988351,
										1988353
									],
									[
										1988393,
										1988395
									],
									[
										1988413,
										1988415
									],
									[
										1988455,
										1988457
									],
									[
										1988475,
										1988477
									],
									[
										1988517,
										1988519
									],
									[
										1988537,
										1988539
									],
									[
										1988573,
										1988575
									],
									[
										1988593,
										1988595
									],
									[
										1988629,
										1988631
									],
									[
										1988649,
										1988651
									],
									[
										1988691,
										1988693
									],
									[
										1988711,
										1988713
									],
									[
										1988743,
										1988745
									],
									[
										1988763,
										1988765
									],
									[
										1988804,
										1988806
									],
									[
										1988824,
										1988826
									],
									[
										1989105,
										1989107
									],
									[
										1989128,
										1989130
									],
									[
										1989148,
										1989150
									],
									[
										1989437,
										1989439
									],
									[
										1989460,
										1989462
									],
									[
										1989480,
										1989482
									],
									[
										1989773,
										1989775
									],
									[
										1989796,
										1989798
									],
									[
										1989816,
										1989818
									],
									[
										1990102,
										1990104
									],
									[
										1990125,
										1990127
									],
									[
										1990145,
										1990147
									],
									[
										1990434,
										1990436
									],
									[
										1990457,
										1990459
									],
									[
										1990477,
										1990479
									],
									[
										1990765,
										1990767
									],
									[
										1990788,
										1990790
									],
									[
										1990808,
										1990810
									],
									[
										1991089,
										1991091
									],
									[
										1991112,
										1991114
									],
									[
										1991132,
										1991134
									],
									[
										1991410,
										1991412
									],
									[
										1991433,
										1991435
									],
									[
										1991453,
										1991455
									],
									[
										1991735,
										1991737
									],
									[
										1991758,
										1991760
									],
									[
										1991778,
										1991780
									],
									[
										1992061,
										1992063
									],
									[
										1992084,
										1992086
									],
									[
										1992104,
										1992106
									],
									[
										1992387,
										1992389
									],
									[
										1992410,
										1992412
									],
									[
										1992430,
										1992432
									],
									[
										1992724,
										1992726
									],
									[
										1992747,
										1992749
									],
									[
										1992767,
										1992769
									],
									[
										1993061,
										1993063
									],
									[
										1993084,
										1993086
									],
									[
										1993104,
										1993106
									],
									[
										1993388,
										1993390
									],
									[
										1993411,
										1993413
									],
									[
										1993431,
										1993433
									],
									[
										1993721,
										1993723
									],
									[
										1993744,
										1993746
									],
									[
										1993764,
										1993766
									],
									[
										1994052,
										1994054
									],
									[
										1994075,
										1994077
									],
									[
										1994095,
										1994097
									],
									[
										1994378,
										1994380
									],
									[
										1994401,
										1994403
									],
									[
										1994421,
										1994423
									],
									[
										1994709,
										1994711
									],
									[
										1994732,
										1994734
									],
									[
										1994752,
										1994754
									],
									[
										1995040,
										1995042
									],
									[
										1995063,
										1995065
									],
									[
										1995083,
										1995085
									],
									[
										1995371,
										1995373
									],
									[
										1995394,
										1995396
									],
									[
										1995414,
										1995416
									],
									[
										1995696,
										1995698
									],
									[
										1995719,
										1995721
									],
									[
										1995739,
										1995741
									],
									[
										1996020,
										1996022
									],
									[
										1996043,
										1996045
									],
									[
										1996063,
										1996065
									],
									[
										1996349,
										1996351
									],
									[
										1996372,
										1996374
									],
									[
										1996392,
										1996394
									],
									[
										1996672,
										1996674
									],
									[
										1996695,
										1996697
									],
									[
										1996715,
										1996717
									],
									[
										1996997,
										1996999
									],
									[
										1997020,
										1997022
									],
									[
										1997040,
										1997042
									],
									[
										1997318,
										1997320
									],
									[
										1997341,
										1997343
									],
									[
										1997412,
										1997414
									],
									[
										1997486,
										1997488
									],
									[
										1997540,
										1997542
									],
									[
										1998074,
										1998076
									],
									[
										1998097,
										1998099
									],
									[
										1998642,
										1998644
									],
									[
										1998665,
										1998667
									],
									[
										1998730,
										1998732
									],
									[
										1998786,
										1998788
									],
									[
										1998851,
										1998853
									],
									[
										1998927,
										1998929
									],
									[
										1998996,
										1998998
									],
									[
										1999063,
										1999065
									],
									[
										1999131,
										1999133
									],
									[
										1999191,
										1999193
									],
									[
										1999261,
										1999263
									],
									[
										1999325,
										1999327
									],
									[
										1999392,
										1999394
									],
									[
										1999458,
										1999460
									],
									[
										1999520,
										1999522
									],
									[
										1999571,
										1999573
									],
									[
										1999634,
										1999636
									],
									[
										1999698,
										1999700
									],
									[
										1999749,
										1999751
									],
									[
										1999835,
										1999837
									],
									[
										1999923,
										1999925
									],
									[
										1999997,
										1999999
									],
									[
										2000071,
										2000073
									],
									[
										2000152,
										2000154
									],
									[
										2000233,
										2000235
									],
									[
										2000314,
										2000316
									],
									[
										2000378,
										2000380
									],
									[
										2000448,
										2000450
									],
									[
										2000518,
										2000520
									],
									[
										2000582,
										2000584
									],
									[
										2000644,
										2000646
									],
									[
										2000708,
										2000710
									],
									[
										2000753,
										2000755
									],
									[
										2000789,
										2000791
									],
									[
										2000870,
										2000872
									],
									[
										2000935,
										2000937
									],
									[
										2001010,
										2001012
									],
									[
										2001045,
										2001047
									],
									[
										2001080,
										2001082
									],
									[
										2001150,
										2001152
									],
									[
										2001219,
										2001221
									],
									[
										2001294,
										2001296
									],
									[
										2001373,
										2001375
									],
									[
										2001447,
										2001449
									],
									[
										2001524,
										2001526
									],
									[
										2001597,
										2001599
									],
									[
										2001675,
										2001677
									],
									[
										2001738,
										2001740
									],
									[
										2001778,
										2001780
									],
									[
										2001809,
										2001811
									],
									[
										2001875,
										2001877
									],
									[
										2001950,
										2001952
									],
									[
										2002015,
										2002017
									],
									[
										2002080,
										2002082
									],
									[
										2002142,
										2002144
									],
									[
										2002211,
										2002213
									],
									[
										2002283,
										2002285
									],
									[
										2002348,
										2002350
									],
									[
										2002407,
										2002409
									],
									[
										2002476,
										2002478
									],
									[
										2002534,
										2002536
									],
									[
										2002597,
										2002599
									],
									[
										2002660,
										2002662
									],
									[
										2002718,
										2002720
									],
									[
										2002769,
										2002771
									],
									[
										2002816,
										2002818
									],
									[
										2002905,
										2002907
									],
									[
										2002938,
										2002940
									],
									[
										2003022,
										2003024
									],
									[
										2003055,
										2003057
									],
									[
										2003141,
										2003143
									],
									[
										2003174,
										2003176
									],
									[
										2003261,
										2003263
									],
									[
										2003292,
										2003294
									],
									[
										2003315,
										2003317
									],
									[
										2003371,
										2003373
									],
									[
										2003438,
										2003440
									],
									[
										2003518,
										2003520
									],
									[
										2003591,
										2003593
									],
									[
										2003656,
										2003658
									],
									[
										2003709,
										2003711
									],
									[
										2003735,
										2003737
									],
									[
										2003771,
										2003773
									],
									[
										2003829,
										2003831
									],
									[
										2003889,
										2003891
									],
									[
										2003941,
										2003943
									],
									[
										2004008,
										2004010
									],
									[
										2004091,
										2004093
									],
									[
										2004169,
										2004171
									],
									[
										2004251,
										2004253
									],
									[
										2004337,
										2004339
									],
									[
										2004407,
										2004409
									],
									[
										2004470,
										2004472
									],
									[
										2004540,
										2004542
									],
									[
										2004605,
										2004607
									],
									[
										2004660,
										2004662
									],
									[
										2004715,
										2004717
									],
									[
										2004773,
										2004775
									],
									[
										2004835,
										2004837
									],
									[
										2004896,
										2004898
									],
									[
										2004956,
										2004958
									],
									[
										2005009,
										2005011
									],
									[
										2005061,
										2005063
									],
									[
										2005084,
										2005086
									],
									[
										2005119,
										2005121
									],
									[
										2005180,
										2005182
									],
									[
										2005244,
										2005246
									],
									[
										2005526,
										2005528
									],
									[
										2005813,
										2005815
									],
									[
										2005975,
										2005977
									],
									[
										2006540,
										2006542
									],
									[
										2006781,
										2006783
									],
									[
										2006943,
										2006945
									],
									[
										2006975,
										2006977
									],
									[
										2007117,
										2007119
									],
									[
										2007140,
										2007142
									],
									[
										2007231,
										2007233
									],
									[
										2007673,
										2007675
									],
									[
										2007925,
										2007927
									],
									[
										2008020,
										2008022
									],
									[
										2008081,
										2008083
									],
									[
										2008422,
										2008424
									],
									[
										2008584,
										2008586
									],
									[
										2009131,
										2009133
									],
									[
										2009372,
										2009374
									],
									[
										2009534,
										2009536
									],
									[
										2009566,
										2009568
									],
									[
										2009708,
										2009710
									],
									[
										2009731,
										2009733
									],
									[
										2009822,
										2009824
									],
									[
										2010264,
										2010266
									],
									[
										2010516,
										2010518
									],
									[
										2010611,
										2010613
									],
									[
										2010672,
										2010674
									],
									[
										2011018,
										2011020
									],
									[
										2011239,
										2011241
									],
									[
										2011789,
										2011791
									],
									[
										2012030,
										2012032
									],
									[
										2012192,
										2012194
									],
									[
										2012224,
										2012226
									],
									[
										2012366,
										2012368
									],
									[
										2012389,
										2012391
									],
									[
										2012480,
										2012482
									],
									[
										2012977,
										2012979
									],
									[
										2013229,
										2013231
									],
									[
										2013324,
										2013326
									],
									[
										2013385,
										2013387
									],
									[
										2013728,
										2013730
									],
									[
										2013949,
										2013951
									],
									[
										2014496,
										2014498
									],
									[
										2014737,
										2014739
									],
									[
										2014899,
										2014901
									],
									[
										2014931,
										2014933
									],
									[
										2015073,
										2015075
									],
									[
										2015096,
										2015098
									],
									[
										2015187,
										2015189
									],
									[
										2015684,
										2015686
									],
									[
										2015936,
										2015938
									],
									[
										2016031,
										2016033
									],
									[
										2016092,
										2016094
									],
									[
										2016498,
										2016500
									],
									[
										2016558,
										2016560
									],
									[
										2016637,
										2016639
									],
									[
										2016697,
										2016699
									],
									[
										2016776,
										2016778
									],
									[
										2016793,
										2016795
									],
									[
										2016833,
										2016835
									],
									[
										2016912,
										2016914
									],
									[
										2016966,
										2016968
									],
									[
										2017045,
										2017047
									],
									[
										2017096,
										2017098
									],
									[
										2017175,
										2017177
									],
									[
										2017227,
										2017229
									],
									[
										2017306,
										2017308
									],
									[
										2017321,
										2017323
									],
									[
										2017359,
										2017361
									],
									[
										2017438,
										2017440
									],
									[
										2017496,
										2017498
									],
									[
										2017576,
										2017578
									],
									[
										2017631,
										2017633
									],
									[
										2017711,
										2017713
									],
									[
										2017760,
										2017762
									],
									[
										2017840,
										2017842
									],
									[
										2017890,
										2017892
									],
									[
										2017970,
										2017972
									],
									[
										2018023,
										2018025
									],
									[
										2018096,
										2018098
									],
									[
										2018142,
										2018144
									],
									[
										2018215,
										2018217
									],
									[
										2018267,
										2018269
									],
									[
										2018340,
										2018342
									],
									[
										2018389,
										2018391
									],
									[
										2018462,
										2018464
									],
									[
										2018510,
										2018512
									],
									[
										2018583,
										2018585
									],
									[
										2018624,
										2018626
									],
									[
										2018697,
										2018699
									],
									[
										2018735,
										2018737
									],
									[
										2018808,
										2018810
									],
									[
										2018853,
										2018855
									],
									[
										2018926,
										2018928
									],
									[
										2018968,
										2018970
									],
									[
										2019041,
										2019043
									],
									[
										2019084,
										2019086
									],
									[
										2019157,
										2019159
									],
									[
										2019200,
										2019202
									],
									[
										2019273,
										2019275
									],
									[
										2019327,
										2019329
									],
									[
										2019400,
										2019402
									],
									[
										2019454,
										2019456
									],
									[
										2019527,
										2019529
									],
									[
										2019571,
										2019573
									],
									[
										2019644,
										2019646
									],
									[
										2019694,
										2019696
									],
									[
										2019767,
										2019769
									],
									[
										2019815,
										2019817
									],
									[
										2019888,
										2019890
									],
									[
										2019931,
										2019933
									],
									[
										2020004,
										2020006
									],
									[
										2020052,
										2020054
									],
									[
										2020125,
										2020127
									],
									[
										2020173,
										2020175
									],
									[
										2020246,
										2020248
									],
									[
										2020288,
										2020290
									],
									[
										2020361,
										2020363
									],
									[
										2020402,
										2020404
									],
									[
										2020475,
										2020477
									],
									[
										2020517,
										2020519
									],
									[
										2020590,
										2020592
									],
									[
										2020628,
										2020630
									],
									[
										2020701,
										2020703
									],
									[
										2020748,
										2020750
									],
									[
										2020821,
										2020823
									],
									[
										2020866,
										2020868
									],
									[
										2020939,
										2020941
									],
									[
										2020980,
										2020982
									],
									[
										2021053,
										2021055
									],
									[
										2021102,
										2021104
									],
									[
										2021311,
										2021313
									],
									[
										2021517,
										2021519
									],
									[
										2021702,
										2021704
									],
									[
										2021750,
										2021752
									],
									[
										2021968,
										2021970
									],
									[
										2022167,
										2022169
									],
									[
										2022376,
										2022378
									],
									[
										2022626,
										2022628
									],
									[
										2022775,
										2022777
									],
									[
										2022930,
										2022932
									],
									[
										2023118,
										2023120
									],
									[
										2023138,
										2023140
									],
									[
										2023200,
										2023202
									],
									[
										2023236,
										2023238
									],
									[
										2023259,
										2023261
									],
									[
										2023279,
										2023281
									],
									[
										2023341,
										2023343
									],
									[
										2023377,
										2023379
									],
									[
										2023400,
										2023402
									],
									[
										2023420,
										2023422
									],
									[
										2023481,
										2023483
									],
									[
										2023517,
										2023519
									],
									[
										2023540,
										2023542
									],
									[
										2023560,
										2023562
									],
									[
										2023614,
										2023616
									],
									[
										2023650,
										2023652
									],
									[
										2023673,
										2023675
									],
									[
										2023693,
										2023695
									],
									[
										2023744,
										2023746
									],
									[
										2023780,
										2023782
									],
									[
										2023803,
										2023805
									],
									[
										2023823,
										2023825
									],
									[
										2023879,
										2023881
									],
									[
										2023915,
										2023917
									],
									[
										2023938,
										2023940
									],
									[
										2023958,
										2023960
									],
									[
										2024014,
										2024016
									],
									[
										2024050,
										2024052
									],
									[
										2024073,
										2024075
									],
									[
										2024093,
										2024095
									],
									[
										2024160,
										2024162
									],
									[
										2024196,
										2024198
									],
									[
										2024219,
										2024221
									],
									[
										2024239,
										2024241
									],
									[
										2024306,
										2024308
									],
									[
										2024342,
										2024344
									],
									[
										2024365,
										2024367
									],
									[
										2024385,
										2024387
									],
									[
										2024442,
										2024444
									],
									[
										2024478,
										2024480
									],
									[
										2024501,
										2024503
									],
									[
										2024521,
										2024523
									],
									[
										2024584,
										2024586
									],
									[
										2024620,
										2024622
									],
									[
										2024643,
										2024645
									],
									[
										2024663,
										2024665
									],
									[
										2024724,
										2024726
									],
									[
										2024760,
										2024762
									],
									[
										2024783,
										2024785
									],
									[
										2024803,
										2024805
									],
									[
										2024859,
										2024861
									],
									[
										2024895,
										2024897
									],
									[
										2024918,
										2024920
									],
									[
										2024938,
										2024940
									],
									[
										2024999,
										2025001
									],
									[
										2025035,
										2025037
									],
									[
										2025058,
										2025060
									],
									[
										2025078,
										2025080
									],
									[
										2025139,
										2025141
									],
									[
										2025175,
										2025177
									],
									[
										2025198,
										2025200
									],
									[
										2025218,
										2025220
									],
									[
										2025273,
										2025275
									],
									[
										2025309,
										2025311
									],
									[
										2025332,
										2025334
									],
									[
										2025352,
										2025354
									],
									[
										2025405,
										2025407
									],
									[
										2025441,
										2025443
									],
									[
										2025464,
										2025466
									],
									[
										2025484,
										2025486
									],
									[
										2025539,
										2025541
									],
									[
										2025575,
										2025577
									],
									[
										2025598,
										2025600
									],
									[
										2025618,
										2025620
									],
									[
										2025669,
										2025671
									],
									[
										2025705,
										2025707
									],
									[
										2025728,
										2025730
									],
									[
										2025748,
										2025750
									],
									[
										2025802,
										2025804
									],
									[
										2025838,
										2025840
									],
									[
										2025861,
										2025863
									],
									[
										2025881,
										2025883
									],
									[
										2025943,
										2025945
									],
									[
										2025979,
										2025981
									],
									[
										2026002,
										2026004
									],
									[
										2026022,
										2026024
									],
									[
										2026088,
										2026090
									],
									[
										2026124,
										2026126
									],
									[
										2026147,
										2026149
									],
									[
										2026167,
										2026169
									],
									[
										2026226,
										2026228
									],
									[
										2026262,
										2026264
									],
									[
										2026285,
										2026287
									],
									[
										2026305,
										2026307
									],
									[
										2026362,
										2026364
									],
									[
										2026399,
										2026401
									],
									[
										2026422,
										2026424
									],
									[
										2026442,
										2026444
									],
									[
										2026502,
										2026504
									],
									[
										2026539,
										2026541
									],
									[
										2026562,
										2026564
									],
									[
										2026582,
										2026584
									],
									[
										2026641,
										2026643
									],
									[
										2026678,
										2026680
									],
									[
										2026701,
										2026703
									],
									[
										2026721,
										2026723
									],
									[
										2026773,
										2026775
									],
									[
										2026810,
										2026812
									],
									[
										2026833,
										2026835
									],
									[
										2026853,
										2026855
									],
									[
										2026902,
										2026904
									],
									[
										2026939,
										2026941
									],
									[
										2026962,
										2026964
									],
									[
										2026982,
										2026984
									],
									[
										2027035,
										2027037
									],
									[
										2027072,
										2027074
									],
									[
										2027095,
										2027097
									],
									[
										2027115,
										2027117
									],
									[
										2027169,
										2027171
									],
									[
										2027206,
										2027208
									],
									[
										2027229,
										2027231
									],
									[
										2027249,
										2027251
									],
									[
										2027303,
										2027305
									],
									[
										2027340,
										2027342
									],
									[
										2027363,
										2027365
									],
									[
										2027383,
										2027385
									],
									[
										2027448,
										2027450
									],
									[
										2027485,
										2027487
									],
									[
										2027508,
										2027510
									],
									[
										2027528,
										2027530
									],
									[
										2027593,
										2027595
									],
									[
										2027630,
										2027632
									],
									[
										2027653,
										2027655
									],
									[
										2027673,
										2027675
									],
									[
										2027728,
										2027730
									],
									[
										2027765,
										2027767
									],
									[
										2027788,
										2027790
									],
									[
										2027808,
										2027810
									],
									[
										2027869,
										2027871
									],
									[
										2027906,
										2027908
									],
									[
										2027929,
										2027931
									],
									[
										2027949,
										2027951
									],
									[
										2028008,
										2028010
									],
									[
										2028045,
										2028047
									],
									[
										2028068,
										2028070
									],
									[
										2028088,
										2028090
									],
									[
										2028142,
										2028144
									],
									[
										2028179,
										2028181
									],
									[
										2028202,
										2028204
									],
									[
										2028222,
										2028224
									],
									[
										2028281,
										2028283
									],
									[
										2028318,
										2028320
									],
									[
										2028341,
										2028343
									],
									[
										2028361,
										2028363
									],
									[
										2028420,
										2028422
									],
									[
										2028457,
										2028459
									],
									[
										2028480,
										2028482
									],
									[
										2028500,
										2028502
									],
									[
										2028553,
										2028555
									],
									[
										2028590,
										2028592
									],
									[
										2028613,
										2028615
									],
									[
										2028633,
										2028635
									],
									[
										2028685,
										2028687
									],
									[
										2028722,
										2028724
									],
									[
										2028745,
										2028747
									],
									[
										2028765,
										2028767
									],
									[
										2028822,
										2028824
									],
									[
										2028859,
										2028861
									],
									[
										2028882,
										2028884
									],
									[
										2028902,
										2028904
									],
									[
										2028953,
										2028955
									],
									[
										2028990,
										2028992
									],
									[
										2029013,
										2029015
									],
									[
										2029033,
										2029035
									],
									[
										2029086,
										2029088
									],
									[
										2029123,
										2029125
									],
									[
										2029146,
										2029148
									],
									[
										2029166,
										2029168
									],
									[
										2029215,
										2029217
									],
									[
										2029252,
										2029254
									],
									[
										2029275,
										2029277
									],
									[
										2029295,
										2029297
									],
									[
										2029347,
										2029349
									],
									[
										2029384,
										2029386
									],
									[
										2029407,
										2029409
									],
									[
										2029427,
										2029429
									],
									[
										2029487,
										2029489
									],
									[
										2029524,
										2029526
									],
									[
										2029547,
										2029549
									],
									[
										2029567,
										2029569
									],
									[
										2029631,
										2029633
									],
									[
										2029668,
										2029670
									],
									[
										2029691,
										2029693
									],
									[
										2029711,
										2029713
									],
									[
										2029759,
										2029761
									],
									[
										2029789,
										2029791
									],
									[
										2029812,
										2029814
									],
									[
										2029832,
										2029834
									],
									[
										2029886,
										2029888
									],
									[
										2029916,
										2029918
									],
									[
										2029939,
										2029941
									],
									[
										2029959,
										2029961
									],
									[
										2030010,
										2030012
									],
									[
										2030040,
										2030042
									],
									[
										2030063,
										2030065
									],
									[
										2030083,
										2030085
									],
									[
										2030133,
										2030135
									],
									[
										2030163,
										2030165
									],
									[
										2030186,
										2030188
									],
									[
										2030206,
										2030208
									],
									[
										2030249,
										2030251
									],
									[
										2030279,
										2030281
									],
									[
										2030302,
										2030304
									],
									[
										2030322,
										2030324
									],
									[
										2030362,
										2030364
									],
									[
										2030392,
										2030394
									],
									[
										2030415,
										2030417
									],
									[
										2030435,
										2030437
									],
									[
										2030479,
										2030481
									],
									[
										2030509,
										2030511
									],
									[
										2030532,
										2030534
									],
									[
										2030552,
										2030554
									],
									[
										2030597,
										2030599
									],
									[
										2030627,
										2030629
									],
									[
										2030650,
										2030652
									],
									[
										2030670,
										2030672
									],
									[
										2030726,
										2030728
									],
									[
										2030756,
										2030758
									],
									[
										2030779,
										2030781
									],
									[
										2030799,
										2030801
									],
									[
										2030849,
										2030851
									],
									[
										2030879,
										2030881
									],
									[
										2030902,
										2030904
									],
									[
										2030922,
										2030924
									],
									[
										2030967,
										2030969
									],
									[
										2030997,
										2030999
									],
									[
										2031020,
										2031022
									],
									[
										2031040,
										2031042
									],
									[
										2031090,
										2031092
									],
									[
										2031120,
										2031122
									],
									[
										2031143,
										2031145
									],
									[
										2031163,
										2031165
									],
									[
										2031213,
										2031215
									],
									[
										2031243,
										2031245
									],
									[
										2031266,
										2031268
									],
									[
										2031286,
										2031288
									],
									[
										2031330,
										2031332
									],
									[
										2031360,
										2031362
									],
									[
										2031383,
										2031385
									],
									[
										2031403,
										2031405
									],
									[
										2031447,
										2031449
									],
									[
										2031477,
										2031479
									],
									[
										2031500,
										2031502
									],
									[
										2031520,
										2031522
									],
									[
										2031570,
										2031572
									],
									[
										2031600,
										2031602
									],
									[
										2031623,
										2031625
									],
									[
										2031643,
										2031645
									],
									[
										2031683,
										2031685
									],
									[
										2031713,
										2031715
									],
									[
										2031736,
										2031738
									],
									[
										2031756,
										2031758
									],
									[
										2031803,
										2031805
									],
									[
										2031833,
										2031835
									],
									[
										2031856,
										2031858
									],
									[
										2031876,
										2031878
									],
									[
										2031919,
										2031921
									],
									[
										2031949,
										2031951
									],
									[
										2031972,
										2031974
									],
									[
										2031992,
										2031994
									],
									[
										2032043,
										2032045
									],
									[
										2032073,
										2032075
									],
									[
										2032096,
										2032098
									],
									[
										2032116,
										2032118
									],
									[
										2032171,
										2032173
									],
									[
										2032201,
										2032203
									],
									[
										2032224,
										2032226
									],
									[
										2032326,
										2032328
									],
									[
										2032349,
										2032351
									],
									[
										2032461,
										2032463
									],
									[
										2032484,
										2032486
									],
									[
										2032590,
										2032592
									],
									[
										2032613,
										2032615
									],
									[
										2032722,
										2032724
									],
									[
										2032745,
										2032747
									],
									[
										2032853,
										2032855
									],
									[
										2032876,
										2032878
									],
									[
										2032985,
										2032987
									],
									[
										2033008,
										2033010
									],
									[
										2033118,
										2033120
									],
									[
										2033141,
										2033143
									],
									[
										2033245,
										2033247
									],
									[
										2033268,
										2033270
									],
									[
										2033371,
										2033373
									],
									[
										2033394,
										2033396
									],
									[
										2033479,
										2033481
									],
									[
										2033502,
										2033504
									],
									[
										2033587,
										2033589
									],
									[
										2033610,
										2033612
									],
									[
										2033721,
										2033723
									],
									[
										2033744,
										2033746
									],
									[
										2033845,
										2033847
									],
									[
										2033868,
										2033870
									],
									[
										2033973,
										2033975
									],
									[
										2033996,
										2033998
									],
									[
										2034096,
										2034098
									],
									[
										2034119,
										2034121
									],
									[
										2034226,
										2034228
									],
									[
										2034249,
										2034251
									],
									[
										2034342,
										2034344
									],
									[
										2034365,
										2034367
									],
									[
										2034453,
										2034455
									],
									[
										2034476,
										2034478
									],
									[
										2034586,
										2034588
									],
									[
										2034609,
										2034611
									],
									[
										2034716,
										2034718
									],
									[
										2034739,
										2034741
									],
									[
										2034844,
										2034846
									],
									[
										2034867,
										2034869
									],
									[
										2034970,
										2034972
									],
									[
										2034993,
										2034995
									],
									[
										2035083,
										2035085
									],
									[
										2035106,
										2035108
									],
									[
										2035129,
										2035131
									],
									[
										2035202,
										2035204
									],
									[
										2035225,
										2035227
									],
									[
										2035324,
										2035326
									],
									[
										2035347,
										2035349
									],
									[
										2035438,
										2035440
									],
									[
										2035461,
										2035463
									],
									[
										2035560,
										2035562
									],
									[
										2035583,
										2035585
									],
									[
										2035684,
										2035686
									],
									[
										2035707,
										2035709
									],
									[
										2035825,
										2035827
									],
									[
										2035848,
										2035850
									],
									[
										2035947,
										2035949
									],
									[
										2035970,
										2035972
									],
									[
										2036078,
										2036080
									],
									[
										2036101,
										2036103
									],
									[
										2036228,
										2036230
									],
									[
										2036251,
										2036253
									],
									[
										2036371,
										2036373
									],
									[
										2036394,
										2036396
									],
									[
										2036519,
										2036521
									],
									[
										2036542,
										2036544
									],
									[
										2036656,
										2036658
									],
									[
										2036679,
										2036681
									],
									[
										2036699,
										2036701
									],
									[
										2036754,
										2036756
									],
									[
										2036790,
										2036792
									],
									[
										2036813,
										2036815
									],
									[
										2036833,
										2036835
									],
									[
										2036887,
										2036889
									],
									[
										2036923,
										2036925
									],
									[
										2036946,
										2036948
									],
									[
										2037066,
										2037068
									],
									[
										2037089,
										2037091
									],
									[
										2037218,
										2037220
									],
									[
										2037241,
										2037243
									],
									[
										2037354,
										2037356
									],
									[
										2037377,
										2037379
									],
									[
										2037423,
										2037425
									],
									[
										2037521,
										2037523
									],
									[
										2037544,
										2037546
									],
									[
										2037652,
										2037654
									],
									[
										2037675,
										2037677
									],
									[
										2037805,
										2037807
									],
									[
										2037828,
										2037830
									],
									[
										2037962,
										2037964
									],
									[
										2037985,
										2037987
									],
									[
										2038005,
										2038007
									],
									[
										2038054,
										2038056
									],
									[
										2038084,
										2038086
									],
									[
										2038107,
										2038109
									],
									[
										2038127,
										2038129
									],
									[
										2038179,
										2038181
									],
									[
										2038209,
										2038211
									],
									[
										2038232,
										2038234
									],
									[
										2038320,
										2038322
									],
									[
										2038343,
										2038345
									],
									[
										2038471,
										2038473
									],
									[
										2038494,
										2038496
									],
									[
										2038627,
										2038629
									],
									[
										2038650,
										2038652
									],
									[
										2038786,
										2038788
									],
									[
										2038809,
										2038811
									],
									[
										2038978,
										2038980
									],
									[
										2039001,
										2039003
									],
									[
										2039116,
										2039118
									],
									[
										2039139,
										2039141
									],
									[
										2039226,
										2039228
									],
									[
										2039249,
										2039251
									],
									[
										2039375,
										2039377
									],
									[
										2039398,
										2039400
									],
									[
										2039527,
										2039529
									],
									[
										2039550,
										2039552
									],
									[
										2039675,
										2039677
									],
									[
										2039698,
										2039700
									],
									[
										2039828,
										2039830
									],
									[
										2039851,
										2039853
									],
									[
										2039982,
										2039984
									],
									[
										2040005,
										2040007
									],
									[
										2040109,
										2040111
									],
									[
										2040132,
										2040134
									],
									[
										2040248,
										2040250
									],
									[
										2040271,
										2040273
									],
									[
										2040377,
										2040379
									],
									[
										2040400,
										2040402
									],
									[
										2040506,
										2040508
									],
									[
										2040529,
										2040531
									],
									[
										2040632,
										2040634
									],
									[
										2040655,
										2040657
									],
									[
										2040765,
										2040767
									],
									[
										2040788,
										2040790
									],
									[
										2040901,
										2040903
									],
									[
										2040924,
										2040926
									],
									[
										2041030,
										2041032
									],
									[
										2041053,
										2041055
									],
									[
										2041093,
										2041095
									],
									[
										2041165,
										2041167
									],
									[
										2041188,
										2041190
									],
									[
										2041295,
										2041297
									],
									[
										2041318,
										2041320
									],
									[
										2041408,
										2041410
									],
									[
										2041431,
										2041433
									],
									[
										2041535,
										2041537
									],
									[
										2041558,
										2041560
									],
									[
										2041666,
										2041668
									],
									[
										2041689,
										2041691
									],
									[
										2041789,
										2041791
									],
									[
										2041812,
										2041814
									],
									[
										2041832,
										2041834
									],
									[
										2041882,
										2041884
									],
									[
										2041912,
										2041914
									],
									[
										2041935,
										2041937
									],
									[
										2041955,
										2041957
									],
									[
										2042014,
										2042016
									],
									[
										2042051,
										2042053
									],
									[
										2042074,
										2042076
									],
									[
										2042094,
										2042096
									],
									[
										2042155,
										2042157
									],
									[
										2042191,
										2042193
									],
									[
										2042214,
										2042216
									],
									[
										2042307,
										2042309
									],
									[
										2042330,
										2042332
									],
									[
										2042452,
										2042454
									],
									[
										2042475,
										2042477
									],
									[
										2042613,
										2042615
									],
									[
										2042636,
										2042638
									],
									[
										2042722,
										2042724
									],
									[
										2042745,
										2042747
									],
									[
										2042870,
										2042872
									],
									[
										2042893,
										2042895
									],
									[
										2042997,
										2042999
									],
									[
										2043020,
										2043022
									],
									[
										2043137,
										2043139
									],
									[
										2043160,
										2043162
									],
									[
										2043280,
										2043282
									],
									[
										2043303,
										2043305
									],
									[
										2043413,
										2043415
									],
									[
										2043436,
										2043438
									],
									[
										2043471,
										2043473
									],
									[
										2043551,
										2043553
									],
									[
										2043574,
										2043576
									],
									[
										2043688,
										2043690
									],
									[
										2043711,
										2043713
									],
									[
										2043831,
										2043833
									],
									[
										2043854,
										2043856
									],
									[
										2043958,
										2043960
									],
									[
										2043981,
										2043983
									],
									[
										2044091,
										2044093
									],
									[
										2044114,
										2044116
									],
									[
										2044218,
										2044220
									],
									[
										2044241,
										2044243
									],
									[
										2044267,
										2044269
									],
									[
										2044344,
										2044346
									],
									[
										2044367,
										2044369
									],
									[
										2044477,
										2044479
									],
									[
										2044500,
										2044502
									],
									[
										2044612,
										2044614
									],
									[
										2044635,
										2044637
									],
									[
										2044760,
										2044762
									],
									[
										2044783,
										2044785
									],
									[
										2044897,
										2044899
									],
									[
										2044920,
										2044922
									],
									[
										2045049,
										2045051
									],
									[
										2045072,
										2045074
									],
									[
										2045215,
										2045217
									],
									[
										2045238,
										2045240
									],
									[
										2045379,
										2045381
									],
									[
										2045402,
										2045404
									],
									[
										2045531,
										2045533
									],
									[
										2045554,
										2045556
									],
									[
										2045690,
										2045692
									],
									[
										2045713,
										2045715
									],
									[
										2045849,
										2045851
									],
									[
										2045872,
										2045874
									],
									[
										2046008,
										2046010
									],
									[
										2046031,
										2046033
									],
									[
										2046133,
										2046135
									],
									[
										2046156,
										2046158
									],
									[
										2046262,
										2046264
									],
									[
										2046285,
										2046287
									],
									[
										2046400,
										2046402
									],
									[
										2046423,
										2046425
									],
									[
										2046513,
										2046515
									],
									[
										2046536,
										2046538
									],
									[
										2046581,
										2046583
									],
									[
										2046677,
										2046679
									],
									[
										2046700,
										2046702
									],
									[
										2046841,
										2046843
									],
									[
										2047015,
										2047017
									],
									[
										2047219,
										2047221
									],
									[
										2047262,
										2047264
									],
									[
										2047482,
										2047484
									],
									[
										2047734,
										2047736
									],
									[
										2047988,
										2047990
									],
									[
										2048261,
										2048263
									],
									[
										2048517,
										2048519
									],
									[
										2048725,
										2048727
									],
									[
										2048967,
										2048969
									],
									[
										2049117,
										2049119
									],
									[
										2049310,
										2049312
									],
									[
										2049486,
										2049488
									],
									[
										2049746,
										2049748
									],
									[
										2050124,
										2050126
									],
									[
										2050322,
										2050324
									],
									[
										2050384,
										2050386
									],
									[
										2050585,
										2050587
									],
									[
										2050647,
										2050649
									],
									[
										2050707,
										2050709
									],
									[
										2050913,
										2050915
									],
									[
										2051014,
										2051016
									],
									[
										2051036,
										2051038
									],
									[
										2051072,
										2051074
									],
									[
										2051396,
										2051398
									],
									[
										2051639,
										2051641
									],
									[
										2051897,
										2051899
									],
									[
										2052074,
										2052076
									],
									[
										2052256,
										2052258
									],
									[
										2052540,
										2052542
									],
									[
										2052680,
										2052682
									],
									[
										2052698,
										2052700
									],
									[
										2052843,
										2052845
									],
									[
										2053098,
										2053100
									],
									[
										2053116,
										2053118
									],
									[
										2053280,
										2053282
									],
									[
										2053418,
										2053420
									],
									[
										2053436,
										2053438
									],
									[
										2053508,
										2053510
									],
									[
										2053594,
										2053596
									],
									[
										2053646,
										2053648
									],
									[
										2053729,
										2053731
									],
									[
										2053781,
										2053783
									],
									[
										2053865,
										2053867
									],
									[
										2054086,
										2054088
									],
									[
										2054336,
										2054338
									],
									[
										2054725,
										2054727
									],
									[
										2054784,
										2054786
									],
									[
										2054906,
										2054908
									],
									[
										2055200,
										2055202
									],
									[
										2055224,
										2055226
									],
									[
										2055349,
										2055351
									],
									[
										2055620,
										2055622
									],
									[
										2055843,
										2055845
									],
									[
										2055867,
										2055869
									],
									[
										2055992,
										2055994
									],
									[
										2056260,
										2056262
									],
									[
										2056483,
										2056485
									],
									[
										2056507,
										2056509
									],
									[
										2056632,
										2056634
									],
									[
										2056901,
										2056903
									],
									[
										2057204,
										2057206
									],
									[
										2057377,
										2057379
									],
									[
										2057580,
										2057582
									],
									[
										2057817,
										2057819
									],
									[
										2057858,
										2057860
									],
									[
										2058175,
										2058177
									],
									[
										2058190,
										2058192
									],
									[
										2058284,
										2058286
									],
									[
										2058300,
										2058302
									],
									[
										2059067,
										2059069
									],
									[
										2059087,
										2059089
									],
									[
										2059103,
										2059105
									],
									[
										2059811,
										2059813
									],
									[
										2059826,
										2059828
									],
									[
										2060646,
										2060648
									],
									[
										2061750,
										2061752
									],
									[
										2062094,
										2062096
									],
									[
										2062226,
										2062228
									],
									[
										2062271,
										2062273
									],
									[
										2062504,
										2062506
									],
									[
										2062820,
										2062822
									],
									[
										2062840,
										2062842
									],
									[
										2062856,
										2062858
									],
									[
										2063258,
										2063260
									],
									[
										2063291,
										2063293
									],
									[
										2063662,
										2063664
									],
									[
										2063944,
										2063946
									],
									[
										2064378,
										2064380
									],
									[
										2064803,
										2064805
									],
									[
										2065200,
										2065202
									],
									[
										2065686,
										2065688
									],
									[
										2065863,
										2065865
									],
									[
										2065990,
										2065992
									],
									[
										2066146,
										2066148
									],
									[
										2066483,
										2066485
									],
									[
										2066652,
										2066654
									],
									[
										2066666,
										2066668
									],
									[
										2066694,
										2066696
									],
									[
										2066915,
										2066917
									],
									[
										2066926,
										2066928
									],
									[
										2067117,
										2067119
									],
									[
										2067214,
										2067216
									],
									[
										2067501,
										2067503
									],
									[
										2067705,
										2067707
									],
									[
										2068006,
										2068008
									],
									[
										2068119,
										2068121
									],
									[
										2068200,
										2068202
									],
									[
										2068434,
										2068436
									],
									[
										2068550,
										2068552
									],
									[
										2068614,
										2068616
									],
									[
										2068882,
										2068884
									],
									[
										2069166,
										2069168
									],
									[
										2069326,
										2069328
									],
									[
										2069910,
										2069912
									],
									[
										2070097,
										2070099
									],
									[
										2070293,
										2070295
									],
									[
										2070338,
										2070340
									],
									[
										2070762,
										2070764
									],
									[
										2071170,
										2071172
									],
									[
										2071799,
										2071801
									],
									[
										2072271,
										2072273
									],
									[
										2072451,
										2072453
									],
									[
										2072610,
										2072612
									],
									[
										2072719,
										2072721
									],
									[
										2072931,
										2072933
									],
									[
										2073137,
										2073139
									],
									[
										2073385,
										2073387
									],
									[
										2073553,
										2073555
									],
									[
										2073703,
										2073705
									],
									[
										2073845,
										2073847
									],
									[
										2073926,
										2073928
									],
									[
										2073998,
										2074000
									],
									[
										2074107,
										2074109
									],
									[
										2074117,
										2074119
									],
									[
										2074143,
										2074145
									],
									[
										2074176,
										2074178
									],
									[
										2074378,
										2074380
									],
									[
										2074439,
										2074441
									],
									[
										2074674,
										2074676
									],
									[
										2074747,
										2074749
									],
									[
										2074961,
										2074963
									],
									[
										2075022,
										2075024
									],
									[
										2075280,
										2075282
									],
									[
										2075353,
										2075355
									],
									[
										2075591,
										2075593
									],
									[
										2075652,
										2075654
									],
									[
										2075911,
										2075913
									],
									[
										2075984,
										2075986
									],
									[
										2076147,
										2076149
									],
									[
										2076237,
										2076239
									],
									[
										2076283,
										2076285
									],
									[
										2076559,
										2076561
									],
									[
										2076691,
										2076693
									],
									[
										2076908,
										2076910
									],
									[
										2077077,
										2077079
									],
									[
										2077208,
										2077210
									],
									[
										2077325,
										2077327
									],
									[
										2077401,
										2077403
									],
									[
										2077629,
										2077631
									],
									[
										2077794,
										2077796
									],
									[
										2077857,
										2077859
									],
									[
										2078051,
										2078053
									],
									[
										2078138,
										2078140
									],
									[
										2078528,
										2078530
									],
									[
										2078847,
										2078849
									],
									[
										2079180,
										2079182
									],
									[
										2079330,
										2079332
									],
									[
										2079386,
										2079388
									],
									[
										2079458,
										2079460
									],
									[
										2079515,
										2079517
									],
									[
										2079709,
										2079711
									],
									[
										2079949,
										2079951
									],
									[
										2079992,
										2079994
									],
									[
										2080016,
										2080018
									],
									[
										2080301,
										2080303
									],
									[
										2080445,
										2080447
									],
									[
										2080466,
										2080468
									],
									[
										2080629,
										2080631
									],
									[
										2080639,
										2080641
									],
									[
										2080750,
										2080752
									],
									[
										2080774,
										2080776
									],
									[
										2080924,
										2080926
									],
									[
										2081132,
										2081134
									],
									[
										2081270,
										2081272
									],
									[
										2081386,
										2081388
									],
									[
										2081511,
										2081513
									],
									[
										2081806,
										2081808
									],
									[
										2081854,
										2081856
									],
									[
										2081985,
										2081987
									],
									[
										2082158,
										2082160
									],
									[
										2082402,
										2082404
									],
									[
										2082419,
										2082421
									],
									[
										2082478,
										2082480
									],
									[
										2082572,
										2082574
									],
									[
										2082660,
										2082662
									],
									[
										2082716,
										2082718
									],
									[
										2082793,
										2082795
									],
									[
										2082816,
										2082818
									],
									[
										2082834,
										2082836
									],
									[
										2082901,
										2082903
									],
									[
										2082913,
										2082915
									],
									[
										2082937,
										2082939
									],
									[
										2083018,
										2083020
									],
									[
										2083388,
										2083390
									],
									[
										2083642,
										2083644
									],
									[
										2084146,
										2084148
									],
									[
										2084585,
										2084587
									],
									[
										2084720,
										2084722
									],
									[
										2084773,
										2084775
									],
									[
										2084783,
										2084785
									],
									[
										2084989,
										2084991
									],
									[
										2085015,
										2085017
									],
									[
										2085298,
										2085300
									],
									[
										2085488,
										2085490
									],
									[
										2085703,
										2085705
									],
									[
										2085882,
										2085884
									],
									[
										2086024,
										2086026
									],
									[
										2086341,
										2086343
									],
									[
										2086434,
										2086436
									],
									[
										2086654,
										2086656
									],
									[
										2086703,
										2086705
									],
									[
										2086723,
										2086725
									],
									[
										2086908,
										2086910
									],
									[
										2087029,
										2087031
									],
									[
										2087291,
										2087293
									],
									[
										2087676,
										2087678
									],
									[
										2087921,
										2087923
									],
									[
										2088118,
										2088120
									],
									[
										2088469,
										2088471
									],
									[
										2088676,
										2088678
									],
									[
										2088737,
										2088739
									],
									[
										2088914,
										2088916
									],
									[
										2089027,
										2089029
									],
									[
										2089286,
										2089288
									],
									[
										2089299,
										2089301
									],
									[
										2089438,
										2089440
									],
									[
										2089483,
										2089485
									],
									[
										2089560,
										2089562
									],
									[
										2089582,
										2089584
									],
									[
										2089595,
										2089597
									],
									[
										2089902,
										2089904
									],
									[
										2090006,
										2090008
									],
									[
										2090103,
										2090105
									],
									[
										2090141,
										2090143
									],
									[
										2090182,
										2090184
									],
									[
										2090202,
										2090204
									],
									[
										2090218,
										2090220
									],
									[
										2090298,
										2090300
									],
									[
										2090525,
										2090527
									],
									[
										2090650,
										2090652
									],
									[
										2090677,
										2090679
									],
									[
										2090733,
										2090735
									],
									[
										2090765,
										2090767
									],
									[
										2090857,
										2090859
									],
									[
										2091046,
										2091048
									],
									[
										2091344,
										2091346
									],
									[
										2091404,
										2091406
									],
									[
										2091483,
										2091485
									],
									[
										2091608,
										2091610
									],
									[
										2091676,
										2091678
									],
									[
										2091786,
										2091788
									],
									[
										2091990,
										2091992
									],
									[
										2092016,
										2092018
									],
									[
										2092082,
										2092084
									],
									[
										2092512,
										2092514
									],
									[
										2092536,
										2092538
									],
									[
										2092555,
										2092557
									],
									[
										2092641,
										2092643
									],
									[
										2092655,
										2092657
									],
									[
										2092701,
										2092703
									],
									[
										2092938,
										2092940
									],
									[
										2093015,
										2093017
									],
									[
										2093211,
										2093213
									],
									[
										2093260,
										2093262
									],
									[
										2093405,
										2093407
									],
									[
										2093477,
										2093479
									],
									[
										2093643,
										2093645
									],
									[
										2093653,
										2093655
									],
									[
										2093779,
										2093781
									],
									[
										2093817,
										2093819
									],
									[
										2093849,
										2093851
									],
									[
										2093887,
										2093889
									],
									[
										2093976,
										2093978
									],
									[
										2093988,
										2093990
									],
									[
										2094023,
										2094025
									],
									[
										2094222,
										2094224
									],
									[
										2094240,
										2094242
									],
									[
										2094480,
										2094482
									],
									[
										2094736,
										2094738
									],
									[
										2094747,
										2094749
									],
									[
										2094904,
										2094906
									],
									[
										2095038,
										2095040
									],
									[
										2095077,
										2095079
									],
									[
										2095137,
										2095139
									],
									[
										2095164,
										2095166
									],
									[
										2095236,
										2095238
									],
									[
										2095275,
										2095277
									],
									[
										2095377,
										2095379
									],
									[
										2095480,
										2095482
									],
									[
										2095741,
										2095743
									],
									[
										2095756,
										2095758
									],
									[
										2095893,
										2095895
									],
									[
										2096058,
										2096060
									],
									[
										2096192,
										2096194
									],
									[
										2096236,
										2096238
									],
									[
										2096262,
										2096264
									],
									[
										2096296,
										2096298
									],
									[
										2096551,
										2096553
									],
									[
										2096812,
										2096814
									],
									[
										2096980,
										2096982
									],
									[
										2097234,
										2097236
									],
									[
										2097489,
										2097491
									],
									[
										2097612,
										2097614
									],
									[
										2097837,
										2097839
									],
									[
										2098000,
										2098002
									],
									[
										2098062,
										2098064
									],
									[
										2098280,
										2098282
									],
									[
										2098398,
										2098400
									],
									[
										2098699,
										2098701
									],
									[
										2098742,
										2098744
									],
									[
										2098866,
										2098868
									],
									[
										2098926,
										2098928
									],
									[
										2098996,
										2098998
									],
									[
										2099004,
										2099006
									],
									[
										2099024,
										2099026
									],
									[
										2099086,
										2099088
									],
									[
										2099094,
										2099096
									],
									[
										2099175,
										2099177
									],
									[
										2099183,
										2099185
									],
									[
										2099203,
										2099205
									],
									[
										2099264,
										2099266
									],
									[
										2099272,
										2099274
									],
									[
										2099511,
										2099513
									],
									[
										2099649,
										2099651
									],
									[
										2099821,
										2099823
									],
									[
										2099930,
										2099932
									],
									[
										2100131,
										2100133
									],
									[
										2100308,
										2100310
									],
									[
										2100338,
										2100340
									],
									[
										2100576,
										2100578
									],
									[
										2100848,
										2100850
									],
									[
										2101156,
										2101158
									],
									[
										2101286,
										2101288
									],
									[
										2101332,
										2101334
									],
									[
										2101381,
										2101383
									],
									[
										2101482,
										2101484
									],
									[
										2101508,
										2101510
									],
									[
										2101522,
										2101524
									],
									[
										2101646,
										2101648
									],
									[
										2101667,
										2101669
									],
									[
										2101710,
										2101712
									],
									[
										2101728,
										2101730
									],
									[
										2101780,
										2101782
									],
									[
										2101787,
										2101789
									],
									[
										2101799,
										2101801
									],
									[
										2101810,
										2101812
									],
									[
										2101833,
										2101835
									],
									[
										2101844,
										2101846
									],
									[
										2101880,
										2101882
									],
									[
										2101894,
										2101896
									],
									[
										2101905,
										2101907
									],
									[
										2101927,
										2101929
									],
									[
										2101947,
										2101949
									],
									[
										2101966,
										2101968
									],
									[
										2101990,
										2101992
									],
									[
										2102055,
										2102057
									],
									[
										2102160,
										2102162
									],
									[
										2102171,
										2102173
									],
									[
										2102205,
										2102207
									],
									[
										2102273,
										2102275
									],
									[
										2102403,
										2102405
									],
									[
										2102410,
										2102412
									],
									[
										2102432,
										2102434
									],
									[
										2102453,
										2102455
									],
									[
										2102663,
										2102665
									],
									[
										2102670,
										2102672
									],
									[
										2102973,
										2102975
									],
									[
										2103105,
										2103107
									],
									[
										2103577,
										2103579
									],
									[
										2103642,
										2103644
									],
									[
										2103717,
										2103719
									],
									[
										2103825,
										2103827
									],
									[
										2104089,
										2104091
									],
									[
										2104130,
										2104132
									],
									[
										2104137,
										2104139
									],
									[
										2104195,
										2104197
									],
									[
										2104502,
										2104504
									],
									[
										2104683,
										2104685
									],
									[
										2104876,
										2104878
									],
									[
										2104943,
										2104945
									],
									[
										2105129,
										2105131
									],
									[
										2105464,
										2105466
									],
									[
										2105565,
										2105567
									],
									[
										2105688,
										2105690
									],
									[
										2105945,
										2105947
									],
									[
										2105994,
										2105996
									],
									[
										2106032,
										2106034
									],
									[
										2106424,
										2106426
									],
									[
										2106809,
										2106811
									],
									[
										2107000,
										2107002
									],
									[
										2107182,
										2107184
									],
									[
										2107448,
										2107450
									],
									[
										2107681,
										2107683
									],
									[
										2107926,
										2107928
									],
									[
										2108073,
										2108075
									],
									[
										2108329,
										2108331
									],
									[
										2108357,
										2108359
									],
									[
										2108589,
										2108591
									],
									[
										2108606,
										2108608
									],
									[
										2108613,
										2108615
									],
									[
										2108697,
										2108699
									],
									[
										2108715,
										2108717
									],
									[
										2108796,
										2108798
									],
									[
										2108825,
										2108827
									],
									[
										2108901,
										2108903
									],
									[
										2108918,
										2108920
									],
									[
										2108925,
										2108927
									],
									[
										2109011,
										2109013
									],
									[
										2109029,
										2109031
									],
									[
										2109119,
										2109121
									],
									[
										2109324,
										2109326
									],
									[
										2109381,
										2109383
									],
									[
										2109654,
										2109656
									],
									[
										2109683,
										2109685
									],
									[
										2109759,
										2109761
									],
									[
										2109776,
										2109778
									],
									[
										2109783,
										2109785
									],
									[
										2109906,
										2109908
									],
									[
										2109927,
										2109929
									],
									[
										2109970,
										2109972
									],
									[
										2110016,
										2110018
									],
									[
										2110038,
										2110040
									],
									[
										2110136,
										2110138
									],
									[
										2110148,
										2110150
									],
									[
										2110336,
										2110338
									],
									[
										2110346,
										2110348
									],
									[
										2110434,
										2110436
									],
									[
										2110456,
										2110458
									],
									[
										2110641,
										2110643
									],
									[
										2110745,
										2110747
									],
									[
										2111079,
										2111081
									],
									[
										2111283,
										2111285
									],
									[
										2111332,
										2111334
									],
									[
										2111423,
										2111425
									],
									[
										2111588,
										2111590
									],
									[
										2111596,
										2111598
									],
									[
										2111993,
										2111995
									],
									[
										2112003,
										2112005
									],
									[
										2112095,
										2112097
									],
									[
										2112117,
										2112119
									],
									[
										2112299,
										2112301
									],
									[
										2112536,
										2112538
									],
									[
										2112558,
										2112560
									],
									[
										2112638,
										2112640
									],
									[
										2112658,
										2112660
									],
									[
										2112668,
										2112670
									],
									[
										2112847,
										2112849
									],
									[
										2112884,
										2112886
									],
									[
										2112894,
										2112896
									],
									[
										2112970,
										2112972
									],
									[
										2113009,
										2113011
									],
									[
										2113227,
										2113229
									],
									[
										2113403,
										2113405
									],
									[
										2113439,
										2113441
									],
									[
										2113449,
										2113451
									],
									[
										2113603,
										2113605
									],
									[
										2113779,
										2113781
									],
									[
										2113824,
										2113826
									],
									[
										2113834,
										2113836
									],
									[
										2113998,
										2114000
									],
									[
										2114026,
										2114028
									],
									[
										2114110,
										2114112
									],
									[
										2114127,
										2114129
									],
									[
										2114134,
										2114136
									],
									[
										2114182,
										2114184
									],
									[
										2114307,
										2114309
									],
									[
										2114317,
										2114319
									],
									[
										2114430,
										2114432
									],
									[
										2114498,
										2114500
									],
									[
										2114553,
										2114555
									],
									[
										2114569,
										2114571
									],
									[
										2114727,
										2114729
									],
									[
										2114913,
										2114915
									],
									[
										2114969,
										2114971
									],
									[
										2115033,
										2115035
									],
									[
										2115250,
										2115252
									],
									[
										2115644,
										2115646
									],
									[
										2115735,
										2115737
									],
									[
										2115753,
										2115755
									],
									[
										2115818,
										2115820
									],
									[
										2115828,
										2115830
									],
									[
										2115843,
										2115845
									],
									[
										2115907,
										2115909
									],
									[
										2115917,
										2115919
									],
									[
										2116081,
										2116083
									],
									[
										2116260,
										2116262
									],
									[
										2116335,
										2116337
									],
									[
										2116495,
										2116497
									],
									[
										2116543,
										2116545
									],
									[
										2116812,
										2116814
									],
									[
										2116854,
										2116856
									],
									[
										2116906,
										2116908
									],
									[
										2117067,
										2117069
									],
									[
										2117281,
										2117283
									],
									[
										2117375,
										2117377
									],
									[
										2117443,
										2117445
									],
									[
										2117677,
										2117679
									],
									[
										2117914,
										2117916
									],
									[
										2118029,
										2118031
									],
									[
										2118152,
										2118154
									],
									[
										2118238,
										2118240
									],
									[
										2118261,
										2118263
									],
									[
										2118355,
										2118357
									],
									[
										2118366,
										2118368
									],
									[
										2118407,
										2118409
									],
									[
										2118473,
										2118475
									],
									[
										2118518,
										2118520
									],
									[
										2118754,
										2118756
									],
									[
										2118811,
										2118813
									],
									[
										2118923,
										2118925
									],
									[
										2119184,
										2119186
									],
									[
										2119236,
										2119238
									],
									[
										2119414,
										2119416
									],
									[
										2119638,
										2119640
									],
									[
										2119732,
										2119734
									],
									[
										2119800,
										2119802
									],
									[
										2120039,
										2120041
									],
									[
										2120268,
										2120270
									],
									[
										2120374,
										2120376
									],
									[
										2120398,
										2120400
									],
									[
										2120519,
										2120521
									],
									[
										2120669,
										2120671
									],
									[
										2120708,
										2120710
									],
									[
										2121039,
										2121041
									],
									[
										2121072,
										2121074
									],
									[
										2121162,
										2121164
									],
									[
										2121416,
										2121418
									],
									[
										2121450,
										2121452
									],
									[
										2121561,
										2121563
									],
									[
										2121771,
										2121773
									],
									[
										2121850,
										2121852
									],
									[
										2121950,
										2121952
									],
									[
										2122028,
										2122030
									],
									[
										2122309,
										2122311
									],
									[
										2122355,
										2122357
									],
									[
										2122401,
										2122403
									],
									[
										2122450,
										2122452
									],
									[
										2122562,
										2122564
									],
									[
										2122763,
										2122765
									],
									[
										2122849,
										2122851
									],
									[
										2122890,
										2122892
									],
									[
										2122938,
										2122940
									],
									[
										2123097,
										2123099
									],
									[
										2123110,
										2123112
									],
									[
										2123227,
										2123229
									],
									[
										2123241,
										2123243
									],
									[
										2123454,
										2123456
									],
									[
										2123609,
										2123611
									],
									[
										2123687,
										2123689
									],
									[
										2123924,
										2123926
									],
									[
										2124155,
										2124157
									],
									[
										2124212,
										2124214
									],
									[
										2124230,
										2124232
									],
									[
										2124253,
										2124255
									],
									[
										2124389,
										2124391
									],
									[
										2124690,
										2124692
									],
									[
										2124860,
										2124862
									],
									[
										2124911,
										2124913
									],
									[
										2125182,
										2125184
									],
									[
										2125200,
										2125202
									],
									[
										2125400,
										2125402
									],
									[
										2125569,
										2125571
									],
									[
										2125686,
										2125688
									],
									[
										2125751,
										2125753
									],
									[
										2125861,
										2125863
									],
									[
										2125874,
										2125876
									],
									[
										2125943,
										2125945
									],
									[
										2125998,
										2126000
									],
									[
										2126055,
										2126057
									],
									[
										2126094,
										2126096
									],
									[
										2126107,
										2126109
									],
									[
										2126396,
										2126398
									],
									[
										2126799,
										2126801
									],
									[
										2127033,
										2127035
									],
									[
										2127123,
										2127125
									],
									[
										2127313,
										2127315
									],
									[
										2127325,
										2127327
									],
									[
										2127402,
										2127404
									],
									[
										2127459,
										2127461
									],
									[
										2127686,
										2127688
									],
									[
										2128057,
										2128059
									],
									[
										2128179,
										2128181
									],
									[
										2128368,
										2128370
									],
									[
										2128598,
										2128600
									],
									[
										2128842,
										2128844
									],
									[
										2128914,
										2128916
									],
									[
										2129135,
										2129137
									],
									[
										2129748,
										2129750
									],
									[
										2129944,
										2129946
									],
									[
										2130184,
										2130186
									],
									[
										2130443,
										2130445
									],
									[
										2130456,
										2130458
									],
									[
										2130803,
										2130805
									],
									[
										2130816,
										2130818
									],
									[
										2131181,
										2131183
									],
									[
										2131419,
										2131421
									],
									[
										2131738,
										2131740
									],
									[
										2131746,
										2131748
									],
									[
										2131898,
										2131900
									],
									[
										2131912,
										2131914
									],
									[
										2131982,
										2131984
									],
									[
										2132111,
										2132113
									],
									[
										2132150,
										2132152
									],
									[
										2132229,
										2132231
									],
									[
										2132374,
										2132376
									],
									[
										2132521,
										2132523
									],
									[
										2132693,
										2132695
									],
									[
										2132917,
										2132919
									],
									[
										2133020,
										2133022
									],
									[
										2133105,
										2133107
									],
									[
										2133351,
										2133353
									],
									[
										2133431,
										2133433
									],
									[
										2133493,
										2133495
									],
									[
										2133561,
										2133563
									],
									[
										2133737,
										2133739
									],
									[
										2134161,
										2134163
									],
									[
										2134501,
										2134503
									],
									[
										2134514,
										2134516
									],
									[
										2134560,
										2134562
									],
									[
										2134590,
										2134592
									],
									[
										2134603,
										2134605
									],
									[
										2134649,
										2134651
									],
									[
										2134771,
										2134773
									],
									[
										2134784,
										2134786
									],
									[
										2134912,
										2134914
									],
									[
										2134957,
										2134959
									],
									[
										2134970,
										2134972
									],
									[
										2135036,
										2135038
									],
									[
										2135175,
										2135177
									],
									[
										2135207,
										2135209
									],
									[
										2135684,
										2135686
									],
									[
										2135721,
										2135723
									],
									[
										2135820,
										2135822
									],
									[
										2135976,
										2135978
									],
									[
										2136197,
										2136199
									],
									[
										2136337,
										2136339
									],
									[
										2136667,
										2136669
									],
									[
										2137033,
										2137035
									],
									[
										2137426,
										2137428
									],
									[
										2137460,
										2137462
									],
									[
										2137522,
										2137524
									],
									[
										2137559,
										2137561
									],
									[
										2137752,
										2137754
									],
									[
										2138047,
										2138049
									],
									[
										2138469,
										2138471
									],
									[
										2138673,
										2138675
									],
									[
										2138882,
										2138884
									],
									[
										2139086,
										2139088
									],
									[
										2139222,
										2139224
									],
									[
										2139240,
										2139242
									],
									[
										2139499,
										2139501
									],
									[
										2139592,
										2139594
									],
									[
										2139838,
										2139840
									],
									[
										2139893,
										2139895
									],
									[
										2140101,
										2140103
									],
									[
										2140322,
										2140324
									],
									[
										2140473,
										2140475
									],
									[
										2140578,
										2140580
									],
									[
										2140625,
										2140627
									],
									[
										2140959,
										2140961
									],
									[
										2141255,
										2141257
									],
									[
										2141507,
										2141509
									],
									[
										2141697,
										2141699
									],
									[
										2141710,
										2141712
									],
									[
										2141761,
										2141763
									],
									[
										2141806,
										2141808
									],
									[
										2141819,
										2141821
									],
									[
										2142186,
										2142188
									],
									[
										2142558,
										2142560
									],
									[
										2142596,
										2142598
									],
									[
										2142661,
										2142663
									],
									[
										2142689,
										2142691
									],
									[
										2142727,
										2142729
									],
									[
										2142781,
										2142783
									],
									[
										2143264,
										2143266
									],
									[
										2143461,
										2143463
									],
									[
										2143652,
										2143654
									],
									[
										2143858,
										2143860
									],
									[
										2143962,
										2143964
									],
									[
										2144015,
										2144017
									],
									[
										2144328,
										2144330
									],
									[
										2144354,
										2144356
									],
									[
										2144518,
										2144520
									],
									[
										2144610,
										2144612
									],
									[
										2144808,
										2144810
									],
									[
										2144865,
										2144867
									],
									[
										2144879,
										2144881
									],
									[
										2144910,
										2144912
									],
									[
										2145031,
										2145033
									],
									[
										2145278,
										2145280
									],
									[
										2145408,
										2145410
									],
									[
										2145640,
										2145642
									],
									[
										2146156,
										2146158
									],
									[
										2146310,
										2146312
									],
									[
										2146531,
										2146533
									],
									[
										2146682,
										2146684
									],
									[
										2146830,
										2146832
									],
									[
										2147275,
										2147277
									],
									[
										2147691,
										2147693
									],
									[
										2148278,
										2148280
									],
									[
										2148545,
										2148547
									],
									[
										2148661,
										2148663
									],
									[
										2148683,
										2148685
									],
									[
										2148753,
										2148755
									],
									[
										2148805,
										2148807
									],
									[
										2148971,
										2148973
									],
									[
										2149183,
										2149185
									],
									[
										2149217,
										2149219
									],
									[
										2149599,
										2149601
									],
									[
										2149828,
										2149830
									],
									[
										2150062,
										2150064
									],
									[
										2150139,
										2150141
									],
									[
										2150260,
										2150262
									],
									[
										2150706,
										2150708
									],
									[
										2150894,
										2150896
									],
									[
										2150915,
										2150917
									],
									[
										2151068,
										2151070
									],
									[
										2151240,
										2151242
									],
									[
										2151368,
										2151370
									],
									[
										2151546,
										2151548
									],
									[
										2151615,
										2151617
									],
									[
										2151733,
										2151735
									],
									[
										2151767,
										2151769
									],
									[
										2151849,
										2151851
									],
									[
										2152095,
										2152097
									],
									[
										2152397,
										2152399
									],
									[
										2152544,
										2152546
									],
									[
										2152681,
										2152683
									],
									[
										2152718,
										2152720
									],
									[
										2152931,
										2152933
									],
									[
										2153062,
										2153064
									],
									[
										2153132,
										2153134
									],
									[
										2153252,
										2153254
									],
									[
										2153429,
										2153431
									],
									[
										2153829,
										2153831
									],
									[
										2154039,
										2154041
									],
									[
										2154188,
										2154190
									],
									[
										2154270,
										2154272
									],
									[
										2154312,
										2154314
									],
									[
										2154353,
										2154355
									],
									[
										2154363,
										2154365
									],
									[
										2154410,
										2154412
									],
									[
										2154422,
										2154424
									],
									[
										2154453,
										2154455
									],
									[
										2154485,
										2154487
									],
									[
										2154495,
										2154497
									],
									[
										2154503,
										2154505
									],
									[
										2154589,
										2154591
									],
									[
										2154651,
										2154653
									],
									[
										2154661,
										2154663
									],
									[
										2154769,
										2154771
									],
									[
										2154818,
										2154820
									],
									[
										2154828,
										2154830
									],
									[
										2155102,
										2155104
									],
									[
										2155409,
										2155411
									],
									[
										2155454,
										2155456
									],
									[
										2155689,
										2155691
									],
									[
										2155805,
										2155807
									],
									[
										2155825,
										2155827
									],
									[
										2156132,
										2156134
									],
									[
										2156386,
										2156388
									],
									[
										2156582,
										2156584
									],
									[
										2156878,
										2156880
									],
									[
										2157196,
										2157198
									],
									[
										2157359,
										2157361
									],
									[
										2157375,
										2157377
									],
									[
										2157605,
										2157607
									],
									[
										2157740,
										2157742
									],
									[
										2157954,
										2157956
									],
									[
										2158095,
										2158097
									],
									[
										2158109,
										2158111
									],
									[
										2158257,
										2158259
									],
									[
										2158726,
										2158728
									],
									[
										2158916,
										2158918
									],
									[
										2158981,
										2158983
									],
									[
										2159229,
										2159231
									],
									[
										2159311,
										2159313
									],
									[
										2159617,
										2159619
									],
									[
										2159972,
										2159974
									],
									[
										2160166,
										2160168
									],
									[
										2160234,
										2160236
									],
									[
										2160411,
										2160413
									],
									[
										2160514,
										2160516
									],
									[
										2160799,
										2160801
									],
									[
										2160886,
										2160888
									],
									[
										2161227,
										2161229
									],
									[
										2161391,
										2161393
									],
									[
										2161606,
										2161608
									],
									[
										2161899,
										2161901
									],
									[
										2162008,
										2162010
									],
									[
										2162226,
										2162228
									],
									[
										2162267,
										2162269
									],
									[
										2162471,
										2162473
									],
									[
										2162649,
										2162651
									],
									[
										2162942,
										2162944
									],
									[
										2163051,
										2163053
									],
									[
										2163269,
										2163271
									],
									[
										2163310,
										2163312
									],
									[
										2163499,
										2163501
									],
									[
										2163681,
										2163683
									],
									[
										2163809,
										2163811
									],
									[
										2164068,
										2164070
									],
									[
										2164189,
										2164191
									],
									[
										2164213,
										2164215
									],
									[
										2164247,
										2164249
									],
									[
										2164331,
										2164333
									],
									[
										2164372,
										2164374
									],
									[
										2164609,
										2164611
									],
									[
										2164626,
										2164628
									],
									[
										2164780,
										2164782
									],
									[
										2164786,
										2164788
									],
									[
										2164890,
										2164892
									],
									[
										2164990,
										2164992
									],
									[
										2165004,
										2165006
									],
									[
										2165144,
										2165146
									],
									[
										2165260,
										2165262
									],
									[
										2165268,
										2165270
									],
									[
										2165474,
										2165476
									],
									[
										2165628,
										2165630
									],
									[
										2165634,
										2165636
									],
									[
										2165738,
										2165740
									],
									[
										2165868,
										2165870
									],
									[
										2165882,
										2165884
									],
									[
										2166085,
										2166087
									],
									[
										2166101,
										2166103
									],
									[
										2166142,
										2166144
									],
									[
										2166361,
										2166363
									],
									[
										2166537,
										2166539
									],
									[
										2166710,
										2166712
									],
									[
										2166716,
										2166718
									],
									[
										2166820,
										2166822
									],
									[
										2166982,
										2166984
									],
									[
										2167225,
										2167227
									],
									[
										2167241,
										2167243
									],
									[
										2167282,
										2167284
									],
									[
										2167906,
										2167908
									],
									[
										2168304,
										2168306
									],
									[
										2168689,
										2168691
									],
									[
										2168828,
										2168830
									],
									[
										2169020,
										2169022
									],
									[
										2169289,
										2169291
									],
									[
										2169432,
										2169434
									],
									[
										2169515,
										2169517
									],
									[
										2169616,
										2169618
									],
									[
										2169716,
										2169718
									],
									[
										2169733,
										2169735
									],
									[
										2169786,
										2169788
									],
									[
										2170024,
										2170026
									],
									[
										2170266,
										2170268
									],
									[
										2170607,
										2170609
									],
									[
										2170840,
										2170842
									],
									[
										2170991,
										2170993
									],
									[
										2171010,
										2171012
									],
									[
										2171093,
										2171095
									],
									[
										2171249,
										2171251
									],
									[
										2171501,
										2171503
									],
									[
										2171846,
										2171848
									],
									[
										2171906,
										2171908
									],
									[
										2172034,
										2172036
									],
									[
										2172256,
										2172258
									],
									[
										2172295,
										2172297
									],
									[
										2172316,
										2172318
									],
									[
										2172375,
										2172377
									],
									[
										2172545,
										2172547
									],
									[
										2172705,
										2172707
									],
									[
										2172948,
										2172950
									],
									[
										2172987,
										2172989
									],
									[
										2173037,
										2173039
									],
									[
										2173202,
										2173204
									],
									[
										2173267,
										2173269
									],
									[
										2173329,
										2173331
									],
									[
										2173391,
										2173393
									],
									[
										2173458,
										2173460
									],
									[
										2173521,
										2173523
									],
									[
										2173583,
										2173585
									],
									[
										2173655,
										2173657
									],
									[
										2173723,
										2173725
									],
									[
										2173790,
										2173792
									],
									[
										2173859,
										2173861
									],
									[
										2173920,
										2173922
									],
									[
										2173994,
										2173996
									],
									[
										2174060,
										2174062
									],
									[
										2174124,
										2174126
									],
									[
										2174186,
										2174188
									],
									[
										2174389,
										2174391
									],
									[
										2174451,
										2174453
									],
									[
										2174520,
										2174522
									],
									[
										2174587,
										2174589
									],
									[
										2174658,
										2174660
									],
									[
										2174734,
										2174736
									],
									[
										2174899,
										2174901
									],
									[
										2175013,
										2175015
									],
									[
										2175102,
										2175104
									],
									[
										2175295,
										2175297
									],
									[
										2175498,
										2175500
									],
									[
										2175725,
										2175727
									],
									[
										2175953,
										2175955
									],
									[
										2176169,
										2176171
									],
									[
										2176329,
										2176331
									],
									[
										2176483,
										2176485
									],
									[
										2176656,
										2176658
									],
									[
										2176824,
										2176826
									],
									[
										2177032,
										2177034
									],
									[
										2177283,
										2177285
									],
									[
										2177540,
										2177542
									],
									[
										2177696,
										2177698
									],
									[
										2177846,
										2177848
									],
									[
										2178001,
										2178003
									],
									[
										2178243,
										2178245
									],
									[
										2178399,
										2178401
									],
									[
										2178589,
										2178591
									],
									[
										2178937,
										2178939
									],
									[
										2179097,
										2179099
									],
									[
										2179317,
										2179319
									],
									[
										2179474,
										2179476
									],
									[
										2179632,
										2179634
									],
									[
										2179785,
										2179787
									],
									[
										2179922,
										2179924
									],
									[
										2180074,
										2180076
									],
									[
										2180238,
										2180240
									],
									[
										2180392,
										2180394
									],
									[
										2180637,
										2180639
									],
									[
										2180803,
										2180805
									],
									[
										2180965,
										2180967
									],
									[
										2181177,
										2181179
									],
									[
										2181356,
										2181358
									],
									[
										2181520,
										2181522
									],
									[
										2181688,
										2181690
									],
									[
										2181878,
										2181880
									],
									[
										2182072,
										2182074
									],
									[
										2182361,
										2182363
									],
									[
										2182563,
										2182565
									],
									[
										2182826,
										2182828
									],
									[
										2183034,
										2183036
									],
									[
										2183228,
										2183230
									],
									[
										2183478,
										2183480
									],
									[
										2183689,
										2183691
									],
									[
										2183772,
										2183774
									],
									[
										2183946,
										2183948
									],
									[
										2184549,
										2184551
									],
									[
										2184592,
										2184594
									],
									[
										2184774,
										2184776
									],
									[
										2184818,
										2184820
									],
									[
										2185012,
										2185014
									],
									[
										2185151,
										2185153
									],
									[
										2185402,
										2185404
									],
									[
										2185539,
										2185541
									],
									[
										2185812,
										2185814
									],
									[
										2185981,
										2185983
									],
									[
										2186202,
										2186204
									],
									[
										2186369,
										2186371
									],
									[
										2186605,
										2186607
									],
									[
										2186823,
										2186825
									],
									[
										2186963,
										2186965
									],
									[
										2187279,
										2187281
									],
									[
										2187517,
										2187519
									],
									[
										2187561,
										2187563
									],
									[
										2187776,
										2187778
									],
									[
										2187983,
										2187985
									],
									[
										2188020,
										2188022
									],
									[
										2188059,
										2188061
									],
									[
										2188088,
										2188090
									],
									[
										2188276,
										2188278
									],
									[
										2188289,
										2188291
									],
									[
										2188388,
										2188390
									],
									[
										2188714,
										2188716
									],
									[
										2188727,
										2188729
									],
									[
										2188741,
										2188743
									],
									[
										2188757,
										2188759
									],
									[
										2188819,
										2188821
									],
									[
										2188842,
										2188844
									],
									[
										2189098,
										2189100
									],
									[
										2189111,
										2189113
									],
									[
										2189125,
										2189127
									],
									[
										2189141,
										2189143
									],
									[
										2189213,
										2189215
									],
									[
										2189246,
										2189248
									],
									[
										2189609,
										2189611
									],
									[
										2189957,
										2189959
									],
									[
										2190303,
										2190305
									],
									[
										2190505,
										2190507
									],
									[
										2190715,
										2190717
									],
									[
										2190941,
										2190943
									],
									[
										2191266,
										2191268
									],
									[
										2191560,
										2191562
									],
									[
										2191890,
										2191892
									],
									[
										2192318,
										2192320
									],
									[
										2192693,
										2192695
									],
									[
										2192740,
										2192742
									],
									[
										2193119,
										2193121
									],
									[
										2193135,
										2193137
									],
									[
										2193545,
										2193547
									],
									[
										2193567,
										2193569
									],
									[
										2193882,
										2193884
									],
									[
										2194193,
										2194195
									],
									[
										2194519,
										2194521
									],
									[
										2194615,
										2194617
									],
									[
										2194969,
										2194971
									],
									[
										2195236,
										2195238
									],
									[
										2195441,
										2195443
									],
									[
										2195645,
										2195647
									],
									[
										2195762,
										2195764
									],
									[
										2195935,
										2195937
									],
									[
										2195960,
										2195962
									],
									[
										2196145,
										2196147
									],
									[
										2196449,
										2196451
									],
									[
										2196555,
										2196557
									],
									[
										2196618,
										2196620
									],
									[
										2197036,
										2197038
									],
									[
										2197204,
										2197206
									],
									[
										2197290,
										2197292
									],
									[
										2197786,
										2197788
									],
									[
										2197889,
										2197891
									],
									[
										2197922,
										2197924
									],
									[
										2197953,
										2197955
									],
									[
										2197984,
										2197986
									],
									[
										2198200,
										2198202
									],
									[
										2198484,
										2198486
									],
									[
										2198751,
										2198753
									],
									[
										2198807,
										2198809
									],
									[
										2198867,
										2198869
									],
									[
										2199150,
										2199152
									],
									[
										2199507,
										2199509
									],
									[
										2199911,
										2199913
									],
									[
										2200170,
										2200172
									],
									[
										2200599,
										2200601
									],
									[
										2200906,
										2200908
									],
									[
										2200926,
										2200928
									],
									[
										2200956,
										2200958
									],
									[
										2200989,
										2200991
									],
									[
										2201060,
										2201062
									],
									[
										2201464,
										2201466
									],
									[
										2201506,
										2201508
									],
									[
										2201872,
										2201874
									],
									[
										2201915,
										2201917
									],
									[
										2202258,
										2202260
									],
									[
										2202527,
										2202529
									],
									[
										2202803,
										2202805
									],
									[
										2203148,
										2203150
									],
									[
										2203623,
										2203625
									],
									[
										2203938,
										2203940
									],
									[
										2204233,
										2204235
									],
									[
										2204414,
										2204416
									],
									[
										2204738,
										2204740
									],
									[
										2205134,
										2205136
									],
									[
										2205441,
										2205443
									],
									[
										2205675,
										2205677
									],
									[
										2205975,
										2205977
									],
									[
										2206218,
										2206220
									],
									[
										2206634,
										2206636
									],
									[
										2206863,
										2206865
									],
									[
										2207123,
										2207125
									],
									[
										2207304,
										2207306
									],
									[
										2207534,
										2207536
									],
									[
										2207589,
										2207591
									],
									[
										2207701,
										2207703
									],
									[
										2207844,
										2207846
									],
									[
										2207947,
										2207949
									],
									[
										2208296,
										2208298
									],
									[
										2208792,
										2208794
									],
									[
										2209218,
										2209220
									],
									[
										2209424,
										2209426
									],
									[
										2209729,
										2209731
									],
									[
										2210069,
										2210071
									],
									[
										2210314,
										2210316
									],
									[
										2210578,
										2210580
									],
									[
										2210679,
										2210681
									],
									[
										2211076,
										2211078
									],
									[
										2211396,
										2211398
									],
									[
										2211657,
										2211659
									],
									[
										2212113,
										2212115
									],
									[
										2212329,
										2212331
									],
									[
										2212374,
										2212376
									],
									[
										2212417,
										2212419
									],
									[
										2212491,
										2212493
									],
									[
										2212795,
										2212797
									],
									[
										2213138,
										2213140
									],
									[
										2213168,
										2213170
									],
									[
										2213501,
										2213503
									],
									[
										2213837,
										2213839
									],
									[
										2214107,
										2214109
									],
									[
										2214325,
										2214327
									],
									[
										2214565,
										2214567
									],
									[
										2214642,
										2214644
									],
									[
										2214661,
										2214663
									],
									[
										2214896,
										2214898
									],
									[
										2215299,
										2215301
									],
									[
										2215747,
										2215749
									],
									[
										2215788,
										2215790
									],
									[
										2215947,
										2215949
									],
									[
										2216103,
										2216105
									],
									[
										2216316,
										2216318
									],
									[
										2216329,
										2216331
									],
									[
										2216343,
										2216345
									],
									[
										2216357,
										2216359
									],
									[
										2216408,
										2216410
									],
									[
										2216433,
										2216435
									],
									[
										2216501,
										2216503
									],
									[
										2216831,
										2216833
									],
									[
										2217090,
										2217092
									],
									[
										2217345,
										2217347
									],
									[
										2217364,
										2217366
									],
									[
										2217770,
										2217772
									],
									[
										2217969,
										2217971
									],
									[
										2218075,
										2218077
									],
									[
										2218212,
										2218214
									],
									[
										2218285,
										2218287
									],
									[
										2218455,
										2218457
									],
									[
										2218826,
										2218828
									],
									[
										2219090,
										2219092
									],
									[
										2219121,
										2219123
									],
									[
										2219151,
										2219153
									],
									[
										2219468,
										2219470
									],
									[
										2219697,
										2219699
									],
									[
										2219717,
										2219719
									],
									[
										2219878,
										2219880
									],
									[
										2220140,
										2220142
									],
									[
										2220241,
										2220243
									],
									[
										2220433,
										2220435
									],
									[
										2220653,
										2220655
									],
									[
										2220838,
										2220840
									],
									[
										2220949,
										2220951
									],
									[
										2221052,
										2221054
									],
									[
										2221413,
										2221415
									],
									[
										2221641,
										2221643
									],
									[
										2221868,
										2221870
									],
									[
										2222149,
										2222151
									],
									[
										2222385,
										2222387
									],
									[
										2222596,
										2222598
									],
									[
										2222934,
										2222936
									],
									[
										2223283,
										2223285
									],
									[
										2223554,
										2223556
									],
									[
										2223869,
										2223871
									],
									[
										2224023,
										2224025
									],
									[
										2224164,
										2224166
									],
									[
										2224383,
										2224385
									],
									[
										2224576,
										2224578
									],
									[
										2224689,
										2224691
									],
									[
										2224800,
										2224802
									],
									[
										2225192,
										2225194
									],
									[
										2225504,
										2225506
									],
									[
										2225561,
										2225563
									],
									[
										2225863,
										2225865
									],
									[
										2225881,
										2225883
									],
									[
										2225894,
										2225896
									],
									[
										2225931,
										2225933
									],
									[
										2226000,
										2226002
									],
									[
										2226026,
										2226028
									],
									[
										2226097,
										2226099
									],
									[
										2226155,
										2226157
									],
									[
										2226203,
										2226205
									],
									[
										2226417,
										2226419
									],
									[
										2226435,
										2226437
									],
									[
										2226448,
										2226450
									],
									[
										2226650,
										2226652
									],
									[
										2226860,
										2226862
									],
									[
										2227162,
										2227164
									],
									[
										2227246,
										2227248
									],
									[
										2227716,
										2227718
									],
									[
										2227975,
										2227977
									],
									[
										2228317,
										2228319
									],
									[
										2228330,
										2228332
									],
									[
										2228501,
										2228503
									],
									[
										2228512,
										2228514
									],
									[
										2228916,
										2228918
									],
									[
										2229415,
										2229417
									],
									[
										2229705,
										2229707
									],
									[
										2229895,
										2229897
									],
									[
										2229908,
										2229910
									],
									[
										2230079,
										2230081
									],
									[
										2230090,
										2230092
									],
									[
										2230163,
										2230165
									],
									[
										2230245,
										2230247
									],
									[
										2230295,
										2230297
									],
									[
										2230566,
										2230568
									],
									[
										2231042,
										2231044
									],
									[
										2231380,
										2231382
									],
									[
										2231742,
										2231744
									],
									[
										2232164,
										2232166
									],
									[
										2232293,
										2232295
									],
									[
										2232337,
										2232339
									],
									[
										2232388,
										2232390
									],
									[
										2232410,
										2232412
									],
									[
										2232514,
										2232516
									],
									[
										2232574,
										2232576
									],
									[
										2232738,
										2232740
									],
									[
										2232943,
										2232945
									],
									[
										2233125,
										2233127
									],
									[
										2233139,
										2233141
									],
									[
										2233350,
										2233352
									],
									[
										2233453,
										2233455
									],
									[
										2233525,
										2233527
									],
									[
										2233572,
										2233574
									],
									[
										2233608,
										2233610
									],
									[
										2233657,
										2233659
									],
									[
										2234144,
										2234146
									],
									[
										2234315,
										2234317
									],
									[
										2234435,
										2234437
									],
									[
										2234542,
										2234544
									],
									[
										2234846,
										2234848
									],
									[
										2235076,
										2235078
									],
									[
										2235097,
										2235099
									],
									[
										2235189,
										2235191
									],
									[
										2235354,
										2235356
									],
									[
										2235542,
										2235544
									],
									[
										2235586,
										2235588
									],
									[
										2235601,
										2235603
									],
									[
										2235679,
										2235681
									],
									[
										2235696,
										2235698
									],
									[
										2235726,
										2235728
									],
									[
										2235753,
										2235755
									],
									[
										2235770,
										2235772
									],
									[
										2235817,
										2235819
									],
									[
										2235922,
										2235924
									],
									[
										2235987,
										2235989
									],
									[
										2236084,
										2236086
									],
									[
										2236282,
										2236284
									],
									[
										2236403,
										2236405
									],
									[
										2236536,
										2236538
									],
									[
										2236682,
										2236684
									],
									[
										2236699,
										2236701
									],
									[
										2236813,
										2236815
									],
									[
										2236830,
										2236832
									],
									[
										2236905,
										2236907
									],
									[
										2237168,
										2237170
									],
									[
										2237228,
										2237230
									],
									[
										2237393,
										2237395
									],
									[
										2237540,
										2237542
									],
									[
										2237679,
										2237681
									],
									[
										2237910,
										2237912
									],
									[
										2238096,
										2238098
									],
									[
										2238231,
										2238233
									],
									[
										2238591,
										2238593
									],
									[
										2238903,
										2238905
									],
									[
										2238998,
										2239000
									],
									[
										2239018,
										2239020
									],
									[
										2239072,
										2239074
									],
									[
										2239414,
										2239416
									],
									[
										2239466,
										2239468
									],
									[
										2239505,
										2239507
									],
									[
										2239647,
										2239649
									],
									[
										2239902,
										2239904
									],
									[
										2239961,
										2239963
									],
									[
										2240002,
										2240004
									],
									[
										2240083,
										2240085
									],
									[
										2240243,
										2240245
									],
									[
										2240345,
										2240347
									],
									[
										2240611,
										2240613
									],
									[
										2240685,
										2240687
									],
									[
										2240718,
										2240720
									],
									[
										2240830,
										2240832
									],
									[
										2241154,
										2241156
									],
									[
										2241189,
										2241191
									],
									[
										2241657,
										2241659
									],
									[
										2241704,
										2241706
									],
									[
										2241905,
										2241907
									],
									[
										2241922,
										2241924
									],
									[
										2241958,
										2241960
									],
									[
										2242206,
										2242208
									],
									[
										2242419,
										2242421
									],
									[
										2242602,
										2242604
									],
									[
										2242685,
										2242687
									],
									[
										2242722,
										2242724
									],
									[
										2242790,
										2242792
									],
									[
										2242830,
										2242832
									],
									[
										2242870,
										2242872
									],
									[
										2242913,
										2242915
									],
									[
										2242945,
										2242947
									],
									[
										2243087,
										2243089
									],
									[
										2243103,
										2243105
									],
									[
										2243190,
										2243192
									],
									[
										2243231,
										2243233
									],
									[
										2243241,
										2243243
									],
									[
										2243290,
										2243292
									],
									[
										2243302,
										2243304
									],
									[
										2243333,
										2243335
									],
									[
										2243365,
										2243367
									],
									[
										2243375,
										2243377
									],
									[
										2243383,
										2243385
									],
									[
										2243436,
										2243438
									],
									[
										2243728,
										2243730
									],
									[
										2243738,
										2243740
									],
									[
										2243748,
										2243750
									],
									[
										2243879,
										2243881
									],
									[
										2243951,
										2243953
									],
									[
										2244092,
										2244094
									],
									[
										2244464,
										2244466
									],
									[
										2244734,
										2244736
									],
									[
										2244789,
										2244791
									],
									[
										2244841,
										2244843
									],
									[
										2244893,
										2244895
									],
									[
										2244945,
										2244947
									],
									[
										2244996,
										2244998
									],
									[
										2245046,
										2245048
									],
									[
										2245096,
										2245098
									],
									[
										2245146,
										2245148
									],
									[
										2245197,
										2245199
									],
									[
										2245249,
										2245251
									],
									[
										2245301,
										2245303
									],
									[
										2245353,
										2245355
									],
									[
										2245406,
										2245408
									],
									[
										2245460,
										2245462
									],
									[
										2245514,
										2245516
									],
									[
										2245568,
										2245570
									],
									[
										2245778,
										2245780
									],
									[
										2245864,
										2245866
									],
									[
										2245939,
										2245941
									],
									[
										2246342,
										2246344
									],
									[
										2246396,
										2246398
									],
									[
										2246600,
										2246602
									],
									[
										2246643,
										2246645
									],
									[
										2246761,
										2246763
									],
									[
										2246800,
										2246802
									],
									[
										2246815,
										2246817
									],
									[
										2246943,
										2246945
									],
									[
										2246989,
										2246991
									],
									[
										2247272,
										2247274
									],
									[
										2247471,
										2247473
									],
									[
										2247667,
										2247669
									],
									[
										2247827,
										2247829
									],
									[
										2247981,
										2247983
									],
									[
										2248187,
										2248189
									],
									[
										2248314,
										2248316
									],
									[
										2248349,
										2248351
									],
									[
										2248377,
										2248379
									],
									[
										2248512,
										2248514
									],
									[
										2248561,
										2248563
									],
									[
										2248688,
										2248690
									],
									[
										2248988,
										2248990
									],
									[
										2249255,
										2249257
									],
									[
										2249465,
										2249467
									],
									[
										2249847,
										2249849
									],
									[
										2250031,
										2250033
									],
									[
										2250216,
										2250218
									],
									[
										2250385,
										2250387
									],
									[
										2250507,
										2250509
									],
									[
										2250609,
										2250611
									],
									[
										2250698,
										2250700
									],
									[
										2250883,
										2250885
									],
									[
										2250929,
										2250931
									],
									[
										2251029,
										2251031
									],
									[
										2251396,
										2251398
									],
									[
										2251442,
										2251444
									],
									[
										2251498,
										2251500
									],
									[
										2251773,
										2251775
									],
									[
										2251819,
										2251821
									],
									[
										2251842,
										2251844
									],
									[
										2252085,
										2252087
									],
									[
										2252410,
										2252412
									],
									[
										2252432,
										2252434
									],
									[
										2252468,
										2252470
									],
									[
										2252712,
										2252714
									],
									[
										2252834,
										2252836
									],
									[
										2253018,
										2253020
									],
									[
										2253200,
										2253202
									],
									[
										2253223,
										2253225
									],
									[
										2253445,
										2253447
									],
									[
										2253575,
										2253577
									],
									[
										2253700,
										2253702
									],
									[
										2253762,
										2253764
									],
									[
										2253930,
										2253932
									],
									[
										2254034,
										2254036
									],
									[
										2254106,
										2254108
									],
									[
										2254172,
										2254174
									],
									[
										2254255,
										2254257
									],
									[
										2254759,
										2254761
									],
									[
										2254778,
										2254780
									],
									[
										2254825,
										2254827
									],
									[
										2255207,
										2255209
									],
									[
										2255261,
										2255263
									],
									[
										2255492,
										2255494
									],
									[
										2255794,
										2255796
									],
									[
										2255972,
										2255974
									],
									[
										2256164,
										2256166
									],
									[
										2256185,
										2256187
									],
									[
										2256228,
										2256230
									],
									[
										2256249,
										2256251
									],
									[
										2256437,
										2256439
									],
									[
										2256492,
										2256494
									],
									[
										2256627,
										2256629
									],
									[
										2256703,
										2256705
									],
									[
										2256722,
										2256724
									],
									[
										2256759,
										2256761
									],
									[
										2256780,
										2256782
									],
									[
										2256819,
										2256821
									],
									[
										2256839,
										2256841
									],
									[
										2256877,
										2256879
									],
									[
										2256956,
										2256958
									],
									[
										2256994,
										2256996
									],
									[
										2257114,
										2257116
									],
									[
										2257149,
										2257151
									],
									[
										2257368,
										2257370
									],
									[
										2257626,
										2257628
									],
									[
										2257861,
										2257863
									],
									[
										2258038,
										2258040
									],
									[
										2258212,
										2258214
									],
									[
										2258441,
										2258443
									],
									[
										2258619,
										2258621
									],
									[
										2258634,
										2258636
									],
									[
										2258890,
										2258892
									],
									[
										2258949,
										2258951
									],
									[
										2259242,
										2259244
									],
									[
										2259286,
										2259288
									],
									[
										2259588,
										2259590
									],
									[
										2259605,
										2259607
									],
									[
										2259804,
										2259806
									],
									[
										2259817,
										2259819
									],
									[
										2259861,
										2259863
									],
									[
										2259975,
										2259977
									],
									[
										2260043,
										2260045
									],
									[
										2260063,
										2260065
									],
									[
										2260236,
										2260238
									],
									[
										2260463,
										2260465
									],
									[
										2260681,
										2260683
									],
									[
										2261057,
										2261059
									],
									[
										2261151,
										2261153
									],
									[
										2261221,
										2261223
									],
									[
										2261396,
										2261398
									],
									[
										2261941,
										2261943
									],
									[
										2261960,
										2261962
									],
									[
										2262007,
										2262009
									],
									[
										2262258,
										2262260
									],
									[
										2262456,
										2262458
									],
									[
										2262540,
										2262542
									],
									[
										2262631,
										2262633
									],
									[
										2262657,
										2262659
									],
									[
										2262716,
										2262718
									],
									[
										2262759,
										2262761
									],
									[
										2262810,
										2262812
									],
									[
										2262853,
										2262855
									],
									[
										2262919,
										2262921
									],
									[
										2262963,
										2262965
									],
									[
										2262981,
										2262983
									],
									[
										2262995,
										2262997
									],
									[
										2263228,
										2263230
									],
									[
										2263243,
										2263245
									],
									[
										2263269,
										2263271
									],
									[
										2263291,
										2263293
									],
									[
										2263348,
										2263350
									],
									[
										2263364,
										2263366
									],
									[
										2263404,
										2263406
									],
									[
										2263420,
										2263422
									],
									[
										2263612,
										2263614
									],
									[
										2263895,
										2263897
									],
									[
										2264011,
										2264013
									],
									[
										2264383,
										2264385
									],
									[
										2264689,
										2264691
									],
									[
										2264885,
										2264887
									],
									[
										2265178,
										2265180
									],
									[
										2265269,
										2265271
									],
									[
										2265467,
										2265469
									],
									[
										2265714,
										2265716
									],
									[
										2265759,
										2265761
									],
									[
										2265779,
										2265781
									],
									[
										2265824,
										2265826
									],
									[
										2265846,
										2265848
									],
									[
										2265891,
										2265893
									],
									[
										2265915,
										2265917
									],
									[
										2265960,
										2265962
									],
									[
										2265982,
										2265984
									],
									[
										2266027,
										2266029
									],
									[
										2266053,
										2266055
									],
									[
										2266099,
										2266101
									],
									[
										2266302,
										2266304
									],
									[
										2266347,
										2266349
									],
									[
										2266368,
										2266370
									],
									[
										2266413,
										2266415
									],
									[
										2266435,
										2266437
									],
									[
										2266480,
										2266482
									],
									[
										2266503,
										2266505
									],
									[
										2266548,
										2266550
									],
									[
										2266571,
										2266573
									],
									[
										2266616,
										2266618
									],
									[
										2266640,
										2266642
									],
									[
										2266686,
										2266688
									],
									[
										2266922,
										2266924
									],
									[
										2266964,
										2266966
									],
									[
										2267165,
										2267167
									],
									[
										2267424,
										2267426
									],
									[
										2267472,
										2267474
									],
									[
										2267722,
										2267724
									],
									[
										2267818,
										2267820
									],
									[
										2268032,
										2268034
									],
									[
										2268239,
										2268241
									],
									[
										2268542,
										2268544
									],
									[
										2268587,
										2268589
									],
									[
										2268748,
										2268750
									],
									[
										2268932,
										2268934
									],
									[
										2269193,
										2269195
									],
									[
										2269312,
										2269314
									],
									[
										2269531,
										2269533
									],
									[
										2269735,
										2269737
									],
									[
										2269886,
										2269888
									],
									[
										2270114,
										2270116
									],
									[
										2270310,
										2270312
									],
									[
										2270407,
										2270409
									],
									[
										2270430,
										2270432
									],
									[
										2270600,
										2270602
									],
									[
										2270751,
										2270753
									],
									[
										2270970,
										2270972
									],
									[
										2271247,
										2271249
									],
									[
										2271417,
										2271419
									],
									[
										2271550,
										2271552
									],
									[
										2271794,
										2271796
									],
									[
										2271996,
										2271998
									],
									[
										2272163,
										2272165
									],
									[
										2272424,
										2272426
									],
									[
										2272582,
										2272584
									],
									[
										2272766,
										2272768
									],
									[
										2273110,
										2273112
									],
									[
										2273417,
										2273419
									],
									[
										2273525,
										2273527
									],
									[
										2273609,
										2273611
									],
									[
										2273693,
										2273695
									],
									[
										2273804,
										2273806
									],
									[
										2273900,
										2273902
									],
									[
										2274009,
										2274011
									],
									[
										2274092,
										2274094
									],
									[
										2274202,
										2274204
									],
									[
										2274331,
										2274333
									],
									[
										2274420,
										2274422
									],
									[
										2274541,
										2274543
									],
									[
										2274648,
										2274650
									],
									[
										2274757,
										2274759
									],
									[
										2274866,
										2274868
									],
									[
										2274979,
										2274981
									],
									[
										2275260,
										2275262
									],
									[
										2275522,
										2275524
									],
									[
										2276008,
										2276010
									],
									[
										2276384,
										2276386
									],
									[
										2276807,
										2276809
									],
									[
										2277129,
										2277131
									],
									[
										2277441,
										2277443
									],
									[
										2277682,
										2277684
									],
									[
										2277984,
										2277986
									],
									[
										2278198,
										2278200
									],
									[
										2278745,
										2278747
									],
									[
										2279012,
										2279014
									],
									[
										2279039,
										2279041
									],
									[
										2279050,
										2279052
									],
									[
										2279122,
										2279124
									],
									[
										2279354,
										2279356
									],
									[
										2279655,
										2279657
									],
									[
										2279970,
										2279972
									],
									[
										2280230,
										2280232
									],
									[
										2280273,
										2280275
									],
									[
										2280336,
										2280338
									],
									[
										2280360,
										2280362
									],
									[
										2280387,
										2280389
									],
									[
										2280403,
										2280405
									],
									[
										2280525,
										2280527
									],
									[
										2280552,
										2280554
									],
									[
										2280661,
										2280663
									],
									[
										2280827,
										2280829
									],
									[
										2280854,
										2280856
									],
									[
										2281172,
										2281174
									],
									[
										2281532,
										2281534
									],
									[
										2281853,
										2281855
									],
									[
										2282249,
										2282251
									],
									[
										2282405,
										2282407
									],
									[
										2282460,
										2282462
									],
									[
										2282686,
										2282688
									],
									[
										2283110,
										2283112
									],
									[
										2283328,
										2283330
									],
									[
										2283511,
										2283513
									],
									[
										2283753,
										2283755
									],
									[
										2283988,
										2283990
									],
									[
										2284180,
										2284182
									],
									[
										2284328,
										2284330
									],
									[
										2284483,
										2284485
									],
									[
										2284804,
										2284806
									],
									[
										2285067,
										2285069
									],
									[
										2285284,
										2285286
									],
									[
										2285507,
										2285509
									],
									[
										2285718,
										2285720
									],
									[
										2285756,
										2285758
									],
									[
										2286067,
										2286069
									],
									[
										2286485,
										2286487
									],
									[
										2286818,
										2286820
									],
									[
										2287053,
										2287055
									],
									[
										2287454,
										2287456
									],
									[
										2287679,
										2287681
									],
									[
										2287759,
										2287761
									],
									[
										2287962,
										2287964
									],
									[
										2288060,
										2288062
									],
									[
										2288202,
										2288204
									],
									[
										2288424,
										2288426
									],
									[
										2288526,
										2288528
									],
									[
										2288741,
										2288743
									],
									[
										2289024,
										2289026
									],
									[
										2289319,
										2289321
									],
									[
										2289551,
										2289553
									],
									[
										2289829,
										2289831
									],
									[
										2290091,
										2290093
									],
									[
										2290193,
										2290195
									],
									[
										2290482,
										2290484
									],
									[
										2290672,
										2290674
									],
									[
										2290944,
										2290946
									],
									[
										2291299,
										2291301
									],
									[
										2291456,
										2291458
									],
									[
										2291683,
										2291685
									],
									[
										2291852,
										2291854
									],
									[
										2292138,
										2292140
									],
									[
										2292506,
										2292508
									],
									[
										2292678,
										2292680
									],
									[
										2292928,
										2292930
									],
									[
										2293139,
										2293141
									],
									[
										2293179,
										2293181
									],
									[
										2293219,
										2293221
									],
									[
										2293473,
										2293475
									],
									[
										2293729,
										2293731
									],
									[
										2294026,
										2294028
									],
									[
										2294392,
										2294394
									],
									[
										2294843,
										2294845
									],
									[
										2295219,
										2295221
									],
									[
										2295290,
										2295292
									],
									[
										2295559,
										2295561
									],
									[
										2295630,
										2295632
									],
									[
										2295845,
										2295847
									],
									[
										2295918,
										2295920
									],
									[
										2295989,
										2295991
									],
									[
										2296147,
										2296149
									],
									[
										2296210,
										2296212
									],
									[
										2296275,
										2296277
									],
									[
										2296439,
										2296441
									],
									[
										2296708,
										2296710
									],
									[
										2296751,
										2296753
									],
									[
										2296898,
										2296900
									],
									[
										2296985,
										2296987
									],
									[
										2297045,
										2297047
									],
									[
										2297151,
										2297153
									],
									[
										2297159,
										2297161
									],
									[
										2297246,
										2297248
									],
									[
										2297254,
										2297256
									],
									[
										2297365,
										2297367
									],
									[
										2297373,
										2297375
									],
									[
										2297461,
										2297463
									],
									[
										2297469,
										2297471
									],
									[
										2297527,
										2297529
									],
									[
										2297538,
										2297540
									],
									[
										2297693,
										2297695
									],
									[
										2297714,
										2297716
									],
									[
										2297823,
										2297825
									],
									[
										2297886,
										2297888
									],
									[
										2298067,
										2298069
									],
									[
										2298341,
										2298343
									],
									[
										2298462,
										2298464
									],
									[
										2298567,
										2298569
									],
									[
										2298586,
										2298588
									],
									[
										2298605,
										2298607
									],
									[
										2298624,
										2298626
									],
									[
										2299001,
										2299003
									],
									[
										2299133,
										2299135
									],
									[
										2299152,
										2299154
									],
									[
										2299171,
										2299173
									],
									[
										2299190,
										2299192
									],
									[
										2299404,
										2299406
									],
									[
										2299552,
										2299554
									],
									[
										2300019,
										2300021
									],
									[
										2300067,
										2300069
									],
									[
										2300118,
										2300120
									],
									[
										2300269,
										2300271
									],
									[
										2300342,
										2300344
									],
									[
										2300439,
										2300441
									],
									[
										2300634,
										2300636
									],
									[
										2300796,
										2300798
									],
									[
										2300995,
										2300997
									],
									[
										2301151,
										2301153
									],
									[
										2301166,
										2301168
									],
									[
										2301357,
										2301359
									],
									[
										2301537,
										2301539
									],
									[
										2301630,
										2301632
									],
									[
										2301754,
										2301756
									],
									[
										2301831,
										2301833
									],
									[
										2301846,
										2301848
									],
									[
										2302098,
										2302100
									],
									[
										2302253,
										2302255
									],
									[
										2302328,
										2302330
									],
									[
										2302525,
										2302527
									],
									[
										2302538,
										2302540
									],
									[
										2302803,
										2302805
									],
									[
										2302978,
										2302980
									],
									[
										2303213,
										2303215
									],
									[
										2303257,
										2303259
									],
									[
										2303363,
										2303365
									],
									[
										2303534,
										2303536
									],
									[
										2303695,
										2303697
									],
									[
										2303780,
										2303782
									],
									[
										2304057,
										2304059
									],
									[
										2304159,
										2304161
									],
									[
										2304212,
										2304214
									],
									[
										2304346,
										2304348
									],
									[
										2304440,
										2304442
									],
									[
										2304464,
										2304466
									],
									[
										2304572,
										2304574
									],
									[
										2304854,
										2304856
									],
									[
										2305275,
										2305281
									],
									[
										2305601,
										2305607
									],
									[
										2305853,
										2305859
									],
									[
										2306071,
										2306077
									],
									[
										2306319,
										2306325
									],
									[
										2306461,
										2306467
									],
									[
										2306625,
										2306631
									],
									[
										2306758,
										2306764
									],
									[
										2306920,
										2306926
									],
									[
										2307053,
										2307059
									],
									[
										2307337,
										2307343
									],
									[
										2307567,
										2307573
									],
									[
										2307797,
										2307803
									],
									[
										2308083,
										2308089
									],
									[
										2308315,
										2308321
									],
									[
										2308641,
										2308647
									],
									[
										2308893,
										2308899
									],
									[
										2309111,
										2309117
									],
									[
										2309341,
										2309347
									],
									[
										2309677,
										2309683
									],
									[
										2309874,
										2309880
									],
									[
										2310043,
										2310049
									],
									[
										2310186,
										2310192
									],
									[
										2310489,
										2310496
									],
									[
										2310540,
										2310547
									],
									[
										2310631,
										2310638
									],
									[
										2310666,
										2310673
									],
									[
										2310972,
										2310979
									],
									[
										2311356,
										2311363
									],
									[
										2311742,
										2311749
									],
									[
										2312233,
										2312240
									],
									[
										2312367,
										2312374
									],
									[
										2313043,
										2313050
									],
									[
										2313321,
										2313328
									],
									[
										2313724,
										2313731
									],
									[
										2314250,
										2314257
									],
									[
										2314451,
										2314458
									],
									[
										2314818,
										2314825
									],
									[
										2315188,
										2315195
									],
									[
										2315665,
										2315672
									],
									[
										2315761,
										2315768
									],
									[
										2316208,
										2316215
									],
									[
										2316530,
										2316537
									],
									[
										2316896,
										2316903
									],
									[
										2317518,
										2317525
									],
									[
										2317611,
										2317618
									],
									[
										2317929,
										2317936
									],
									[
										2318304,
										2318311
									],
									[
										2318578,
										2318585
									],
									[
										2318925,
										2318932
									],
									[
										2319243,
										2319250
									],
									[
										2319697,
										2319704
									],
									[
										2320205,
										2320212
									],
									[
										2320458,
										2320465
									],
									[
										2320656,
										2320663
									],
									[
										2320826,
										2320833
									],
									[
										2321202,
										2321209
									],
									[
										2321272,
										2321279
									],
									[
										2321693,
										2321700
									],
									[
										2321763,
										2321770
									],
									[
										2321999,
										2322006
									],
									[
										2322069,
										2322076
									],
									[
										2322438,
										2322445
									],
									[
										2322721,
										2322728
									],
									[
										2322764,
										2322771
									],
									[
										2322956,
										2322963
									],
									[
										2323048,
										2323055
									],
									[
										2323370,
										2323377
									],
									[
										2323728,
										2323735
									],
									[
										2323779,
										2323786
									],
									[
										2323870,
										2323877
									],
									[
										2323905,
										2323912
									],
									[
										2324211,
										2324218
									],
									[
										2324595,
										2324602
									],
									[
										2324981,
										2324988
									],
									[
										2325472,
										2325479
									],
									[
										2325606,
										2325613
									],
									[
										2326282,
										2326289
									],
									[
										2326560,
										2326567
									],
									[
										2326963,
										2326970
									],
									[
										2327489,
										2327496
									],
									[
										2327690,
										2327697
									],
									[
										2328057,
										2328064
									],
									[
										2328427,
										2328434
									],
									[
										2328904,
										2328911
									],
									[
										2329000,
										2329007
									],
									[
										2329447,
										2329454
									],
									[
										2329769,
										2329776
									],
									[
										2330135,
										2330142
									],
									[
										2330757,
										2330764
									],
									[
										2330850,
										2330857
									],
									[
										2331168,
										2331175
									],
									[
										2331543,
										2331550
									],
									[
										2331817,
										2331824
									],
									[
										2332164,
										2332171
									],
									[
										2332482,
										2332489
									],
									[
										2332936,
										2332943
									],
									[
										2333448,
										2333455
									],
									[
										2333701,
										2333708
									],
									[
										2333899,
										2333906
									],
									[
										2334069,
										2334076
									],
									[
										2334445,
										2334452
									],
									[
										2334515,
										2334522
									],
									[
										2334936,
										2334943
									],
									[
										2335006,
										2335013
									],
									[
										2335242,
										2335249
									],
									[
										2335312,
										2335319
									],
									[
										2335681,
										2335688
									],
									[
										2335964,
										2335971
									],
									[
										2336007,
										2336014
									],
									[
										2336199,
										2336206
									],
									[
										2336291,
										2336298
									],
									[
										2336613,
										2336620
									],
									[
										2336874,
										2336885
									],
									[
										2337090,
										2337101
									],
									[
										2337207,
										2337218
									],
									[
										2337222,
										2337233
									],
									[
										2337304,
										2337315
									],
									[
										2337319,
										2337330
									],
									[
										2337399,
										2337410
									],
									[
										2337414,
										2337425
									],
									[
										2337686,
										2337697
									],
									[
										2337701,
										2337712
									],
									[
										2337788,
										2337799
									],
									[
										2337803,
										2337814
									],
									[
										2337888,
										2337899
									],
									[
										2337903,
										2337914
									],
									[
										2338097,
										2338108
									],
									[
										2338112,
										2338123
									],
									[
										2338327,
										2338338
									],
									[
										2338368,
										2338379
									],
									[
										2338409,
										2338420
									],
									[
										2338458,
										2338469
									],
									[
										2338485,
										2338496
									],
									[
										2338497,
										2338508
									],
									[
										2338729,
										2338740
									],
									[
										2338744,
										2338755
									],
									[
										2338818,
										2338829
									],
									[
										2338833,
										2338844
									],
									[
										2338926,
										2338937
									],
									[
										2338941,
										2338952
									],
									[
										2339144,
										2339155
									],
									[
										2339360,
										2339371
									],
									[
										2339477,
										2339488
									],
									[
										2339492,
										2339503
									],
									[
										2339574,
										2339585
									],
									[
										2339589,
										2339600
									],
									[
										2339669,
										2339680
									],
									[
										2339684,
										2339695
									],
									[
										2339878,
										2339889
									],
									[
										2340166,
										2340177
									],
									[
										2340184,
										2340195
									],
									[
										2340245,
										2340256
									],
									[
										2340537,
										2340548
									],
									[
										2340591,
										2340602
									],
									[
										2340674,
										2340685
									],
									[
										2341089,
										2341100
									],
									[
										2341272,
										2341283
									],
									[
										2341593,
										2341604
									],
									[
										2342203,
										2342214
									],
									[
										2342459,
										2342470
									],
									[
										2342663,
										2342674
									],
									[
										2342984,
										2342995
									],
									[
										2343038,
										2343049
									],
									[
										2343121,
										2343132
									],
									[
										2343536,
										2343547
									],
									[
										2343719,
										2343730
									],
									[
										2344040,
										2344051
									],
									[
										2344650,
										2344661
									],
									[
										2344906,
										2344917
									],
									[
										2345110,
										2345121
									],
									[
										2345413,
										2345421
									],
									[
										2345431,
										2345439
									],
									[
										2345485,
										2345493
									],
									[
										2345568,
										2345576
									],
									[
										2345967,
										2345975
									],
									[
										2346579,
										2346587
									],
									[
										2346874,
										2346882
									],
									[
										2347057,
										2347065
									],
									[
										2347378,
										2347386
									],
									[
										2347972,
										2347980
									],
									[
										2348039,
										2348047
									],
									[
										2348057,
										2348065
									],
									[
										2348283,
										2348291
									],
									[
										2348583,
										2348591
									],
									[
										2348651,
										2348659
									],
									[
										2348669,
										2348677
									],
									[
										2348686,
										2348694
									],
									[
										2348774,
										2348782
									],
									[
										2348907,
										2348915
									],
									[
										2349325,
										2349333
									],
									[
										2349624,
										2349632
									],
									[
										2349887,
										2349895
									],
									[
										2349901,
										2349909
									],
									[
										2349948,
										2349956
									],
									[
										2349959,
										2349967
									],
									[
										2349990,
										2349998
									],
									[
										2349999,
										2350007
									],
									[
										2350256,
										2350264
									],
									[
										2350377,
										2350385
									],
									[
										2350392,
										2350400
									],
									[
										2350505,
										2350513
									],
									[
										2350559,
										2350567
									],
									[
										2350675,
										2350683
									],
									[
										2350721,
										2350729
									],
									[
										2351071,
										2351079
									],
									[
										2351096,
										2351104
									],
									[
										2351120,
										2351128
									],
									[
										2351532,
										2351540
									],
									[
										2351664,
										2351672
									],
									[
										2351834,
										2351842
									],
									[
										2352032,
										2352040
									],
									[
										2352081,
										2352089
									],
									[
										2352148,
										2352156
									],
									[
										2352163,
										2352171
									],
									[
										2352205,
										2352213
									],
									[
										2352254,
										2352262
									],
									[
										2352322,
										2352330
									],
									[
										2352795,
										2352803
									],
									[
										2353275,
										2353283
									],
									[
										2353347,
										2353355
									],
									[
										2353732,
										2353740
									],
									[
										2353979,
										2353987
									],
									[
										2354051,
										2354059
									],
									[
										2354062,
										2354070
									],
									[
										2354255,
										2354263
									],
									[
										2354269,
										2354277
									],
									[
										2354539,
										2354547
									],
									[
										2354568,
										2354576
									],
									[
										2355036,
										2355044
									],
									[
										2355169,
										2355177
									],
									[
										2355526,
										2355534
									],
									[
										2355775,
										2355797
									],
									[
										2355819,
										2355841
									],
									[
										2355998,
										2356020
									],
									[
										2356413,
										2356435
									],
									[
										2356913,
										2356935
									],
									[
										2357152,
										2357176
									],
									[
										2357198,
										2357222
									],
									[
										2357371,
										2357395
									],
									[
										2357807,
										2357831
									],
									[
										2358330,
										2358354
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								2357023,
								2357023
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 55,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 889650.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Falcor/Experimental/Scene/Material/BxDFConfig.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2433,
						"regions":
						{
						},
						"selection":
						[
							[
								2011,
								2011
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 159.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Falcor/Utils/Math/Common.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 249,
						"regions":
						{
						},
						"selection":
						[
							[
								132,
								132
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Falcor/Utils/Math/MathConstants.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6718,
						"regions":
						{
						},
						"selection":
						[
							[
								4069,
								4069
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 753.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/RenderPasses/PixelInspectorPass/PixelInspector.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5572,
						"regions":
						{
						},
						"selection":
						[
							[
								2822,
								2822
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 675.0,
						"zoom_level": 1.0
					},
					"stack_index": 129,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Falcor/Utils/Sampling/SampleGeneratorInterface.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1913,
						"regions":
						{
						},
						"selection":
						[
							[
								1882,
								1882
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 129.0,
						"zoom_level": 1.0
					},
					"stack_index": 137,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "third_party/slang/docs/wave-intrinsics.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13145,
						"regions":
						{
						},
						"selection":
						[
							[
								7649,
								7649
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4899.0,
						"zoom_level": 1.0
					},
					"stack_index": 139,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "third_party/slang/docs/design/existential-types.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13823,
						"regions":
						{
						},
						"selection":
						[
							[
								11211,
								11211
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4161.0,
						"zoom_level": 1.0
					},
					"stack_index": 140,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "third_party/slang/tests/diagnostics/methods/mutating-method-on-rvalue.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 315,
						"regions":
						{
						},
						"selection":
						[
							[
								120,
								120
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 142,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "third_party/slang/docs/language-reference/05-expressions.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13131,
						"regions":
						{
						},
						"selection":
						[
							[
								6009,
								6009
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 141,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "third_party/slang/tests/slang-extension/atomic-int64-byte-address-buffer.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1689,
						"regions":
						{
						},
						"selection":
						[
							[
								1043,
								1043
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 93.0,
						"zoom_level": 1.0
					},
					"stack_index": 144,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7141,
						"regions":
						{
						},
						"selection":
						[
							[
								4873,
								4873
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 838.0,
						"zoom_level": 1.0
					},
					"stack_index": 158,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "third_party/slang/external/glslang/Test/130.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4610,
						"regions":
						{
						},
						"selection":
						[
							[
								3968,
								3968
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2301.0,
						"zoom_level": 1.0
					},
					"stack_index": 167,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "third_party/slang/external/glslang/Test/spv.extPostDepthCoverage.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 148,
						"regions":
						{
						},
						"selection":
						[
							[
								97,
								97
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 168,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "third_party/slang/external/glslang/Test/hlsl.structbuffer.rwbyte.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 302,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 143,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "third_party/slang/external/glslang/Test/hlsl.rw.atomics.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8983,
						"regions":
						{
						},
						"selection":
						[
							[
								908,
								908
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 757.0,
						"zoom_level": 1.0
					},
					"stack_index": 183,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "third_party/slang/tests/compute/byte-address-buffer.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1075,
						"regions":
						{
						},
						"selection":
						[
							[
								872,
								872
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 184,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "third_party/slang/tests/compute/atomics-buffer.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1127,
						"regions":
						{
						},
						"selection":
						[
							[
								793,
								793
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 185,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "third_party/slang/external/glslang/Test/hlsl.structbuffer.atomics.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 649,
						"regions":
						{
						},
						"selection":
						[
							[
								513,
								513
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 182,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "third_party/slang/docs/language-reference/04-types.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14365,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 193,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "third_party/slang/docs/target-compatibility.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15768,
						"regions":
						{
						},
						"selection":
						[
							[
								12468,
								12468
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2856.0,
						"zoom_level": 1.0
					},
					"stack_index": 186,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "third_party/slang/tests/hlsl-intrinsic/sampler-feedback/sampler-feedback-basic.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1882,
						"regions":
						{
						},
						"selection":
						[
							[
								1061,
								1061
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 205,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "third_party/slang/external/glslang/Test/remap.hlsl.sample.basic.strip.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3018,
						"regions":
						{
						},
						"selection":
						[
							[
								43,
								43
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 161,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/lava_lib/reader_bgeo/check_bgeo/check_bgeo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4335,
						"regions":
						{
						},
						"selection":
						[
							[
								1933,
								1933
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 222,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/compression.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1308,
						"regions":
						{
						},
						"selection":
						[
							[
								1308,
								1308
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 219,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "third_party/slang/external/glslang/Test/hlsl.sample.dx9.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1056,
						"regions":
						{
						},
						"selection":
						[
							[
								784,
								784
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 207,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "third_party/slang/external/glslang/glslang/HLSL/hlslParseables.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86255,
						"regions":
						{
						},
						"selection":
						[
							[
								37390,
								37390
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16887.0,
						"zoom_level": 1.0
					},
					"stack_index": 138,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "src/Falcor/Scene/ParticleSystem/ParticleEmit.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2562,
						"regions":
						{
						},
						"selection":
						[
							[
								1925,
								1925
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 203,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "third_party/zlib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8099,
						"regions":
						{
						},
						"selection":
						[
							[
								6746,
								6746
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2966.0,
						"zoom_level": 1.0
					},
					"stack_index": 237,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "third_party/OpenEXR/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2957,
						"regions":
						{
						},
						"selection":
						[
							[
								2653,
								2653
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 126,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "third_party/OpenImageIO/src/cmake/checked_find_package.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8273,
						"regions":
						{
						},
						"selection":
						[
							[
								2735,
								2735
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1198.0,
						"zoom_level": 1.0
					},
					"stack_index": 239,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "third_party/OpenImageIO/build/CMakeFiles/Makefile.cmake",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15226,
						"regions":
						{
						},
						"selection":
						[
							[
								811,
								811
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 240,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "third_party/slang/tools/render-test/cpu-compute-util.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29059,
						"regions":
						{
						},
						"selection":
						[
							[
								1038,
								1038
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13217.0,
						"zoom_level": 1.0
					},
					"stack_index": 247,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "third_party/slang/prelude/slang-cpp-prelude.h.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55593,
						"regions":
						{
						},
						"selection":
						[
							[
								17281,
								17281
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 8474.0,
						"zoom_level": 1.0
					},
					"stack_index": 250,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "third_party/slang/external/glslang/SPIRV/doc.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 147268,
						"regions":
						{
						},
						"selection":
						[
							[
								27355,
								27355
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14883.0,
						"zoom_level": 1.0
					},
					"stack_index": 255,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "third_party/slang/docs/design/capabilities.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16403,
						"regions":
						{
						},
						"selection":
						[
							[
								14338,
								14338
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 4006.0,
						"zoom_level": 1.0
					},
					"stack_index": 162,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 376395,
						"regions":
						{
						},
						"selection":
						[
							[
								225755,
								225755
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 90890.0,
						"zoom_level": 1.0
					},
					"stack_index": 257,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "third_party/slang/external/glslang/glslang/Include/intermediate.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58157,
						"regions":
						{
						},
						"selection":
						[
							[
								41310,
								41310
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26573.0,
						"zoom_level": 1.0
					},
					"stack_index": 256,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "third_party/slang/external/glslang/glslang/MachineIndependent/intermOut.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88410,
						"regions":
						{
						},
						"selection":
						[
							[
								58240,
								58240
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15512.0,
						"zoom_level": 1.0
					},
					"stack_index": 258,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "third_party/slang/external/glslang/glslang/MachineIndependent/Versions.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21615,
						"regions":
						{
						},
						"selection":
						[
							[
								7033,
								7033
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1827.0,
						"zoom_level": 1.0
					},
					"stack_index": 259,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetection.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2338,
						"regions":
						{
						},
						"selection":
						[
							[
								2096,
								2096
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 114.0,
						"zoom_level": 1.0
					},
					"stack_index": 135,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "third_party/slang/external/glslang/Test/hlsl.calculatelod.dx10.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1440,
						"regions":
						{
						},
						"selection":
						[
							[
								855,
								855
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 206,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "third_party/slang/source/slang/core.meta.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 77741,
						"regions":
						{
						},
						"selection":
						[
							[
								39870,
								39870
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16345.0,
						"zoom_level": 1.0
					},
					"stack_index": 249,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "third_party/slang/external/glslang/glslang/HLSL/hlslParseHelper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 435519,
						"regions":
						{
						},
						"selection":
						[
							[
								325573,
								325573
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 126985.0,
						"zoom_level": 1.0
					},
					"stack_index": 272,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 153518,
						"regions":
						{
						},
						"selection":
						[
							[
								28876,
								28876
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12592.0,
						"zoom_level": 1.0
					},
					"stack_index": 274,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "third_party/slang/external/glslang/Test/spv.computeShaderDerivatives.comp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2689,
						"regions":
						{
						},
						"selection":
						[
							[
								1272,
								1272
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 386.0,
						"zoom_level": 1.0
					},
					"stack_index": 275,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "src/Falcor/Scene/Raytracing.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5519,
						"regions":
						{
						},
						"selection":
						[
							[
								3538,
								3538
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "src/RenderPasses/WhittedRayTracer/WhittedRayTracer.rt.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24096,
						"regions":
						{
						},
						"selection":
						[
							[
								11182,
								11182
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1017.0,
						"zoom_level": 1.0
					},
					"stack_index": 136,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "third_party/slang/external/glslang/Test/150.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4746,
						"regions":
						{
						},
						"selection":
						[
							[
								2872,
								2872
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 276,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 478375,
						"regions":
						{
						},
						"selection":
						[
							[
								28833,
								28833
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16107.0,
						"zoom_level": 1.0
					},
					"stack_index": 226,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "src/RenderPasses/MegakernelPathTracer/PathTracer.rt.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7848,
						"regions":
						{
						},
						"selection":
						[
							[
								2170,
								2170
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 862.0,
						"zoom_level": 1.0
					},
					"stack_index": 278,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "src/Falcor/Core/API/Vulkan/VKFormats.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10869,
						"regions":
						{
						},
						"selection":
						[
							[
								10869,
								10869
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1989.0,
						"zoom_level": 1.0
					},
					"stack_index": 234,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24975,
						"regions":
						{
						},
						"selection":
						[
							[
								2359,
								2359
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 300.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5061,
						"regions":
						{
						},
						"selection":
						[
							[
								1948,
								1948
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 245,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8727,
						"regions":
						{
						},
						"selection":
						[
							[
								5330,
								5330
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2346.0,
						"zoom_level": 1.0
					},
					"stack_index": 244,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "src/Falcor/Core/API/Buffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19243,
						"regions":
						{
						},
						"selection":
						[
							[
								5713,
								5713
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4203.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 67639,
						"regions":
						{
						},
						"selection":
						[
							[
								22997,
								22997
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12564.0,
						"zoom_level": 1.0
					},
					"stack_index": 122,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "src/Falcor/Core/API/Resource.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7695,
						"regions":
						{
						},
						"selection":
						[
							[
								5416,
								5416
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2453.0,
						"zoom_level": 1.0
					},
					"stack_index": 153,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9756,
						"regions":
						{
						},
						"selection":
						[
							[
								2814,
								2814
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1810.0,
						"zoom_level": 1.0
					},
					"stack_index": 270,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6803,
						"regions":
						{
						},
						"selection":
						[
							[
								3161,
								3161
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 246,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "src/Falcor/Scene/Lights/Lights.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8431,
						"regions":
						{
						},
						"selection":
						[
							[
								2548,
								2548
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "src/Falcor/Experimental/Scene/Lights/LightHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11731,
						"regions":
						{
						},
						"selection":
						[
							[
								11731,
								11731
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3671.0,
						"zoom_level": 1.0
					},
					"stack_index": 373,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "src/Falcor/Experimental/Scene/Lights/MeshLightData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2590,
						"regions":
						{
						},
						"selection":
						[
							[
								2563,
								2563
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 342,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "src/Falcor/Experimental/Scene/Lights/UpdateTriangleVertices.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3167,
						"regions":
						{
						},
						"selection":
						[
							[
								3167,
								3167
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 371,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSamplerSharedDefinitions.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2024,
						"regions":
						{
						},
						"selection":
						[
							[
								2024,
								2024
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 370,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22640,
						"regions":
						{
						},
						"selection":
						[
							[
								22640,
								22640
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7683.0,
						"zoom_level": 1.0
					},
					"stack_index": 369,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHTypes.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8077,
						"regions":
						{
						},
						"selection":
						[
							[
								8077,
								8077
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2345.0,
						"zoom_level": 1.0
					},
					"stack_index": 372,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "src/Falcor/Scene/SceneTypes.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7254,
						"regions":
						{
						},
						"selection":
						[
							[
								4634,
								4634
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3208.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "src/Falcor/Utils/Math/PackedFormats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3763,
						"regions":
						{
						},
						"selection":
						[
							[
								3053,
								3053
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 444.0,
						"zoom_level": 1.0
					},
					"stack_index": 325,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "src/Falcor/Utils/Math/Vector.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4190,
						"regions":
						{
						},
						"selection":
						[
							[
								1959,
								1959
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 42.0,
						"zoom_level": 1.0
					},
					"stack_index": 287,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "src/Falcor/Utils/HostDeviceShared.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4264,
						"regions":
						{
						},
						"selection":
						[
							[
								1722,
								1722
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 346.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "src/Falcor/Scene/Raster.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5014,
						"regions":
						{
						},
						"selection":
						[
							[
								2216,
								2216
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1242.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "src/RenderPasses/TexturesResolvePass/TexturesResolveCommon.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3045,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "src/RenderPasses/TexturesResolvePass/TexturesResolveData.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1048,
						"regions":
						{
						},
						"selection":
						[
							[
								1048,
								1048
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 127,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2931,
						"regions":
						{
						},
						"selection":
						[
							[
								1930,
								1930
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 252.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"type": "text"
				},
				{
					"buffer": 76,
					"file": "src/Falcor/Utils/Algorithm/BitonicSort.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4470,
						"regions":
						{
						},
						"selection":
						[
							[
								1885,
								1885
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 77,
					"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9541,
						"regions":
						{
						},
						"selection":
						[
							[
								2099,
								2099
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1436.0,
						"zoom_level": 1.0
					},
					"stack_index": 227,
					"type": "text"
				},
				{
					"buffer": 78,
					"file": "src/Falcor/Scene/ShadingData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4617,
						"regions":
						{
						},
						"selection":
						[
							[
								3613,
								3613
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 79,
					"file": "src/Falcor/Scene/TextureSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5580,
						"regions":
						{
						},
						"selection":
						[
							[
								2090,
								2090
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 228.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 80,
					"file": "src/Falcor/Utils/Helpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15157,
						"regions":
						{
						},
						"selection":
						[
							[
								6377,
								6377
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2337.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 81,
					"file": "src/Falcor/Scene/Scene.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21645,
						"regions":
						{
						},
						"selection":
						[
							[
								21636,
								21636
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 252.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 82,
					"file": "src/Falcor/Scene/Shading.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13881,
						"regions":
						{
						},
						"selection":
						[
							[
								13424,
								13424
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5702.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 83,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3583,
						"regions":
						{
						},
						"selection":
						[
							[
								2980,
								2980
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 84,
					"file": "src/Falcor/Scene/HitInfo.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3645,
						"regions":
						{
						},
						"selection":
						[
							[
								3645,
								3645
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 108.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 85,
					"file": "src/Falcor/Scene/Material/MaterialDefines.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6159,
						"regions":
						{
						},
						"selection":
						[
							[
								2976,
								2976
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 648.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 86,
					"file": "src/Falcor/Scene/Material/MaterialData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3860,
						"regions":
						{
						},
						"selection":
						[
							[
								2969,
								2969
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 818.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 87,
					"file": "src/Falcor/Scene/Material/BRDF.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11702,
						"regions":
						{
						},
						"selection":
						[
							[
								10912,
								10912
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4651.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 88,
					"file": "src/houdini/soho/python2.7/LSDsettings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31531,
						"regions":
						{
						},
						"selection":
						[
							[
								27114,
								27114
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10958.0,
						"zoom_level": 1.0
					},
					"stack_index": 329,
					"type": "text"
				},
				{
					"buffer": 89,
					"file": "src/houdini/soho/python2.7/LSDapi.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8282,
						"regions":
						{
						},
						"selection":
						[
							[
								5068,
								5068
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2575.0,
						"zoom_level": 1.0
					},
					"stack_index": 328,
					"type": "text"
				},
				{
					"buffer": 90,
					"file": "src/houdini/soho/python2.7/wranglers/HoudiniLightLSD.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19684,
						"regions":
						{
						},
						"selection":
						[
							[
								9083,
								9083
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3555.0,
						"zoom_level": 1.0
					},
					"stack_index": 326,
					"type": "text"
				},
				{
					"buffer": 91,
					"file": "/opt/houdini17.5/houdini/soho/python2.7/IFDframe.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64638,
						"regions":
						{
						},
						"selection":
						[
							[
								31526,
								31526
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12179.0,
						"zoom_level": 1.0
					},
					"stack_index": 417,
					"type": "text"
				},
				{
					"buffer": 92,
					"file": "src/houdini/soho/overrides/RendererTable",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 177,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 415,
					"type": "text"
				},
				{
					"buffer": 93,
					"file": "src/Falcor/Core/API/DescriptorSet.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5856,
						"regions":
						{
						},
						"selection":
						[
							[
								2930,
								2930
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 523.0,
						"zoom_level": 1.0
					},
					"stack_index": 313,
					"type": "text"
				},
				{
					"buffer": 94,
					"file": "src/Falcor/Core/API/DescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2808,
						"regions":
						{
						},
						"selection":
						[
							[
								2463,
								2463
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 261,
					"type": "text"
				},
				{
					"buffer": 95,
					"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86481,
						"regions":
						{
						},
						"selection":
						[
							[
								15068,
								15068
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5763.0,
						"zoom_level": 1.0
					},
					"stack_index": 190,
					"type": "text"
				},
				{
					"buffer": 96,
					"file": "src/Falcor/Core/Program/ProgramReflection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 54847,
						"regions":
						{
						},
						"selection":
						[
							[
								30079,
								30079
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15109.0,
						"zoom_level": 1.0
					},
					"stack_index": 191,
					"type": "text"
				},
				{
					"buffer": 97,
					"file": "src/Falcor/Core/Framework.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13061,
						"regions":
						{
						},
						"selection":
						[
							[
								5931,
								5931
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2422.0,
						"zoom_level": 1.0
					},
					"stack_index": 164,
					"type": "text"
				},
				{
					"buffer": 98,
					"file": "src/Falcor/RenderGraph/RenderPassLibrary.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11769,
						"regions":
						{
						},
						"selection":
						[
							[
								6775,
								6775
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2881.0,
						"zoom_level": 1.0
					},
					"stack_index": 396,
					"type": "text"
				},
				{
					"buffer": 99,
					"file": "src/lava_lib/reader_bgeo/bgeo/PackedFragment.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1087,
						"regions":
						{
						},
						"selection":
						[
							[
								549,
								549
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 412,
					"type": "text"
				},
				{
					"buffer": 100,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1924,
						"regions":
						{
						},
						"selection":
						[
							[
								410,
								410
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 400,
					"type": "text"
				},
				{
					"buffer": 101,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1041,
						"regions":
						{
						},
						"selection":
						[
							[
								1041,
								1041
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 399,
					"type": "text"
				},
				{
					"buffer": 102,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3143,
						"regions":
						{
						},
						"selection":
						[
							[
								1290,
								1290
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 407,
					"type": "text"
				},
				{
					"buffer": 103,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedFragment.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2368,
						"regions":
						{
						},
						"selection":
						[
							[
								444,
								444
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 403,
					"type": "text"
				},
				{
					"buffer": 104,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1377,
						"regions":
						{
						},
						"selection":
						[
							[
								789,
								789
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 409,
					"type": "text"
				},
				{
					"buffer": 105,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/util.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3965,
						"regions":
						{
						},
						"selection":
						[
							[
								1341,
								1341
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1027.0,
						"zoom_level": 1.0
					},
					"stack_index": 416,
					"type": "text"
				},
				{
					"buffer": 106,
					"file": "src/lava_lib/reader_bgeo/bgeo/BgeoHeader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3185,
						"regions":
						{
						},
						"selection":
						[
							[
								389,
								389
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1360.0,
						"zoom_level": 1.0
					},
					"stack_index": 225,
					"type": "text"
				},
				{
					"buffer": 107,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7133,
						"regions":
						{
						},
						"selection":
						[
							[
								461,
								461
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 62.0,
						"zoom_level": 1.0
					},
					"stack_index": 408,
					"type": "text"
				},
				{
					"buffer": 108,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5615,
						"regions":
						{
						},
						"selection":
						[
							[
								4697,
								4697
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1938.0,
						"zoom_level": 1.0
					},
					"stack_index": 404,
					"type": "text"
				},
				{
					"buffer": 109,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1812,
						"regions":
						{
						},
						"selection":
						[
							[
								1766,
								1766
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 410,
					"type": "text"
				},
				{
					"buffer": 110,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Poly.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1391,
						"regions":
						{
						},
						"selection":
						[
							[
								481,
								481
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 335,
					"type": "text"
				},
				{
					"buffer": 111,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Poly.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3804,
						"regions":
						{
						},
						"selection":
						[
							[
								3628,
								3628
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2193.0,
						"zoom_level": 1.0
					},
					"stack_index": 338,
					"type": "text"
				},
				{
					"buffer": 112,
					"file": "src/lava_lib/reader_bgeo/bgeo/Poly.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1612,
						"regions":
						{
						},
						"selection":
						[
							[
								827,
								827
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 333,
					"type": "text"
				},
				{
					"buffer": 113,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexArrayBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1191,
						"regions":
						{
						},
						"selection":
						[
							[
								717,
								717
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 334,
					"type": "text"
				},
				{
					"buffer": 114,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1170,
						"regions":
						{
						},
						"selection":
						[
							[
								1170,
								1170
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 398,
					"type": "text"
				},
				{
					"buffer": 115,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1723,
						"regions":
						{
						},
						"selection":
						[
							[
								1597,
								1597
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 406,
					"type": "text"
				},
				{
					"buffer": 116,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexMap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1392,
						"regions":
						{
						},
						"selection":
						[
							[
								1392,
								1392
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 337,
					"type": "text"
				},
				{
					"buffer": 117,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexArrayBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1131,
						"regions":
						{
						},
						"selection":
						[
							[
								364,
								364
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 411,
					"type": "text"
				},
				{
					"buffer": 118,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5251,
						"regions":
						{
						},
						"selection":
						[
							[
								4349,
								4349
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1966.0,
						"zoom_level": 1.0
					},
					"stack_index": 405,
					"type": "text"
				},
				{
					"buffer": 119,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7443,
						"regions":
						{
						},
						"selection":
						[
							[
								1205,
								1205
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 402,
					"type": "text"
				},
				{
					"buffer": 120,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitives.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1188,
						"regions":
						{
						},
						"selection":
						[
							[
								966,
								966
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 401,
					"type": "text"
				},
				{
					"buffer": 121,
					"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4150,
						"regions":
						{
						},
						"selection":
						[
							[
								2809,
								2809
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 392,
					"type": "text"
				},
				{
					"buffer": 122,
					"file": "src/Falcor/Core/API/ComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3000,
						"regions":
						{
						},
						"selection":
						[
							[
								1867,
								1867
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 268,
					"type": "text"
				},
				{
					"buffer": 123,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3050,
						"regions":
						{
						},
						"selection":
						[
							[
								2269,
								2269
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 393,
					"type": "text"
				},
				{
					"buffer": 124,
					"file": "src/Falcor/RenderGraph/RenderPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2487,
						"regions":
						{
						},
						"selection":
						[
							[
								1784,
								1784
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"type": "text"
				},
				{
					"buffer": 125,
					"file": "src/Falcor/Utils/Scripting/Dictionary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4757,
						"regions":
						{
						},
						"selection":
						[
							[
								1878,
								1878
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 350,
					"type": "text"
				},
				{
					"buffer": 126,
					"file": "src/Falcor/RenderGraph/RenderPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7427,
						"regions":
						{
						},
						"selection":
						[
							[
								5569,
								5569
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 127,
					"file": "src/Falcor/RenderGraph/RenderPassReflection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9565,
						"regions":
						{
						},
						"selection":
						[
							[
								7517,
								7517
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1481.0,
						"zoom_level": 1.0
					},
					"stack_index": 310,
					"type": "text"
				},
				{
					"buffer": 128,
					"file": "src/Falcor/RenderGraph/RenderPassReflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12090,
						"regions":
						{
						},
						"selection":
						[
							[
								5544,
								5544
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1321.0,
						"zoom_level": 1.0
					},
					"stack_index": 311,
					"type": "text"
				},
				{
					"buffer": 129,
					"file": "src/RenderPasses/SkyBox/SkyBox.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3632,
						"regions":
						{
						},
						"selection":
						[
							[
								2807,
								2807
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 130,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7499,
						"regions":
						{
						},
						"selection":
						[
							[
								2200,
								2200
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 76.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 131,
					"file": "src/RenderPasses/AccumulatePass/AccumulatePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11965,
						"regions":
						{
						},
						"selection":
						[
							[
								9290,
								9290
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1728.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 132,
					"file": "src/Falcor/Utils/Debug/PixelDebug.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9625,
						"regions":
						{
						},
						"selection":
						[
							[
								3863,
								3863
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 284.0,
						"zoom_level": 1.0
					},
					"stack_index": 284,
					"type": "text"
				},
				{
					"buffer": 133,
					"file": "src/Falcor/Raytracing/ShaderTable.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5792,
						"regions":
						{
						},
						"selection":
						[
							[
								2893,
								2893
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 861.0,
						"zoom_level": 1.0
					},
					"stack_index": 433,
					"type": "text"
				},
				{
					"buffer": 134,
					"file": "src/Falcor/Core/State/ComputeState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3454,
						"regions":
						{
						},
						"selection":
						[
							[
								2074,
								2074
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 298.0,
						"zoom_level": 1.0
					},
					"stack_index": 120,
					"type": "text"
				},
				{
					"buffer": 135,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17887,
						"regions":
						{
						},
						"selection":
						[
							[
								2885,
								2885
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 488.0,
						"zoom_level": 1.0
					},
					"stack_index": 286,
					"type": "text"
				},
				{
					"buffer": 136,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4245,
						"regions":
						{
						},
						"selection":
						[
							[
								2258,
								2258
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 224.0,
						"zoom_level": 1.0
					},
					"stack_index": 204,
					"type": "text"
				},
				{
					"buffer": 137,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3328,
						"regions":
						{
						},
						"selection":
						[
							[
								2400,
								2400
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 417.0,
						"zoom_level": 1.0
					},
					"stack_index": 343,
					"type": "text"
				},
				{
					"buffer": 138,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4266,
						"regions":
						{
						},
						"selection":
						[
							[
								2994,
								2994
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 344,
					"type": "text"
				},
				{
					"buffer": 139,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15255,
						"regions":
						{
						},
						"selection":
						[
							[
								2267,
								2267
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 963.0,
						"zoom_level": 1.0
					},
					"stack_index": 131,
					"type": "text"
				},
				{
					"buffer": 140,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewerParams.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6133,
						"regions":
						{
						},
						"selection":
						[
							[
								6133,
								6133
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 132,
					"type": "text"
				},
				{
					"buffer": 141,
					"file": "src/RenderPasses/CSM/CSM.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36004,
						"regions":
						{
						},
						"selection":
						[
							[
								5159,
								5159
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3111.0,
						"zoom_level": 1.0
					},
					"stack_index": 277,
					"type": "text"
				},
				{
					"buffer": 142,
					"file": "src/RenderPasses/CSM/CSM.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8949,
						"regions":
						{
						},
						"selection":
						[
							[
								2042,
								2042
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2198.0,
						"zoom_level": 1.0
					},
					"stack_index": 318,
					"type": "text"
				},
				{
					"buffer": 143,
					"file": "src/RenderPasses/CSM/CascadedShadowMap.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11750,
						"regions":
						{
						},
						"selection":
						[
							[
								2985,
								2985
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 133,
					"type": "text"
				},
				{
					"buffer": 144,
					"file": "src/RenderPasses/CSM/VisibilityPass.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2981,
						"regions":
						{
						},
						"selection":
						[
							[
								2976,
								2976
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 134,
					"type": "text"
				},
				{
					"buffer": 145,
					"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6309,
						"regions":
						{
						},
						"selection":
						[
							[
								3290,
								3290
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 422,
					"type": "text"
				},
				{
					"buffer": 146,
					"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3143,
						"regions":
						{
						},
						"selection":
						[
							[
								1898,
								1898
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 423,
					"type": "text"
				},
				{
					"buffer": 147,
					"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4322,
						"regions":
						{
						},
						"selection":
						[
							[
								2016,
								2016
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 424,
					"type": "text"
				},
				{
					"buffer": 148,
					"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11713,
						"regions":
						{
						},
						"selection":
						[
							[
								5061,
								5061
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1756.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 149,
					"file": "build_scripts/build_lava.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3406,
						"regions":
						{
						},
						"selection":
						[
							[
								2581,
								2581
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Bash.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 150,
					"file": "src/lava_cmd/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1331,
						"regions":
						{
						},
						"selection":
						[
							[
								1097,
								1097
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 113,
					"type": "text"
				},
				{
					"buffer": 151,
					"file": "third_party/zlib/Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13845,
						"regions":
						{
						},
						"selection":
						[
							[
								10427,
								10427
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6642.0,
						"zoom_level": 1.0
					},
					"stack_index": 125,
					"type": "text"
				},
				{
					"buffer": 152,
					"file": "src/Falcor/Core/State/GraphicsState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10063,
						"regions":
						{
						},
						"selection":
						[
							[
								3799,
								3799
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 437.0,
						"zoom_level": 1.0
					},
					"stack_index": 285,
					"type": "text"
				},
				{
					"buffer": 153,
					"file": "src/RenderPasses/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3880,
						"regions":
						{
						},
						"selection":
						[
							[
								3795,
								3795
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 174,
					"type": "text"
				},
				{
					"buffer": 154,
					"file": "src/RenderPasses/TexturesResolvePass/TexturesResolvePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4229,
						"regions":
						{
						},
						"selection":
						[
							[
								2359,
								2359
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 489.0,
						"zoom_level": 1.0
					},
					"stack_index": 145,
					"type": "text"
				},
				{
					"buffer": 155,
					"file": "src/RenderPasses/DepthPass/DepthPass.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2057,
						"regions":
						{
						},
						"selection":
						[
							[
								1749,
								1749
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 154,
					"type": "text"
				},
				{
					"buffer": 156,
					"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16583,
						"regions":
						{
						},
						"selection":
						[
							[
								1835,
								1835
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 421,
					"type": "text"
				},
				{
					"buffer": 157,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9929,
						"regions":
						{
						},
						"selection":
						[
							[
								9104,
								9104
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3180.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 158,
					"file": "src/Falcor/Core/Program/ShaderVar.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15515,
						"regions":
						{
						},
						"selection":
						[
							[
								12048,
								12048
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4691.0,
						"zoom_level": 1.0
					},
					"stack_index": 148,
					"type": "text"
				},
				{
					"buffer": 159,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4631,
						"regions":
						{
						},
						"selection":
						[
							[
								4548,
								4548
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 345.0,
						"zoom_level": 1.0
					},
					"stack_index": 181,
					"type": "text"
				},
				{
					"buffer": 160,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5266,
						"regions":
						{
						},
						"selection":
						[
							[
								5010,
								5010
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1020.0,
						"zoom_level": 1.0
					},
					"stack_index": 288,
					"type": "text"
				},
				{
					"buffer": 161,
					"file": "src/Falcor/RenderGraph/RenderPassHelpers.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5170,
						"regions":
						{
						},
						"selection":
						[
							[
								4671,
								4671
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 947.0,
						"zoom_level": 1.0
					},
					"stack_index": 312,
					"type": "text"
				},
				{
					"buffer": 162,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10529,
						"regions":
						{
						},
						"selection":
						[
							[
								7040,
								7040
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1828.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 163,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6722,
						"regions":
						{
						},
						"selection":
						[
							[
								6326,
								6326
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1893.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 164,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"default_dir": "/home/max/dev/Falcor/src/Externals/xoshiro",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 159,
					"type": "text"
				},
				{
					"buffer": 165,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferParams.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2511,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 166,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3026,
						"regions":
						{
						},
						"selection":
						[
							[
								2830,
								2830
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 690.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 167,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5513,
						"regions":
						{
						},
						"selection":
						[
							[
								5332,
								5332
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1426.0,
						"zoom_level": 1.0
					},
					"stack_index": 163,
					"type": "text"
				},
				{
					"buffer": 168,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3235,
						"regions":
						{
						},
						"selection":
						[
							[
								2232,
								2232
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 169,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3668,
						"regions":
						{
						},
						"selection":
						[
							[
								2393,
								2393
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 208.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 170,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2938,
						"regions":
						{
						},
						"selection":
						[
							[
								2938,
								2938
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 386,
					"type": "text"
				},
				{
					"buffer": 171,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6595,
						"regions":
						{
						},
						"selection":
						[
							[
								6595,
								6595
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1461.0,
						"zoom_level": 1.0
					},
					"stack_index": 385,
					"type": "text"
				},
				{
					"buffer": 172,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3381,
						"regions":
						{
						},
						"selection":
						[
							[
								3381,
								3381
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 384,
					"type": "text"
				},
				{
					"buffer": 173,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3086,
						"regions":
						{
						},
						"selection":
						[
							[
								2675,
								2675
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 387,
					"type": "text"
				},
				{
					"buffer": 174,
					"file": "src/RenderPasses/GBuffer/GBufferBase.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4099,
						"regions":
						{
						},
						"selection":
						[
							[
								3261,
								3261
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 400.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 175,
					"file": "src/RenderPasses/GBuffer/GBufferBase.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7435,
						"regions":
						{
						},
						"selection":
						[
							[
								6620,
								6620
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2146.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 176,
					"file": "src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2647,
						"regions":
						{
						},
						"selection":
						[
							[
								2237,
								2237
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 112.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 177,
					"file": "src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3159,
						"regions":
						{
						},
						"selection":
						[
							[
								2566,
								2566
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 166.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 178,
					"file": "src/Falcor/Scene/VertexAttrib.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2497,
						"regions":
						{
						},
						"selection":
						[
							[
								2297,
								2297
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 311.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 179,
					"file": "src/RenderPasses/GBuffer/GBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8886,
						"regions":
						{
						},
						"selection":
						[
							[
								1932,
								1932
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 388,
					"type": "text"
				},
				{
					"buffer": 180,
					"file": "src/RenderPasses/GBuffer/GBuffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2992,
						"regions":
						{
						},
						"selection":
						[
							[
								2992,
								2992
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 389,
					"type": "text"
				},
				{
					"buffer": 181,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9506,
						"regions":
						{
						},
						"selection":
						[
							[
								9506,
								9506
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2634.0,
						"zoom_level": 1.0
					},
					"stack_index": 383,
					"type": "text"
				},
				{
					"buffer": 182,
					"file": "src/RenderPasses/MegakernelPathTracer/MegakernelPathTracer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8875,
						"regions":
						{
						},
						"selection":
						[
							[
								1865,
								1865
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 420,
					"type": "text"
				},
				{
					"buffer": 183,
					"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11926,
						"regions":
						{
						},
						"selection":
						[
							[
								2181,
								2181
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 419,
					"type": "text"
				},
				{
					"buffer": 184,
					"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15137,
						"regions":
						{
						},
						"selection":
						[
							[
								7396,
								7396
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1985.0,
						"zoom_level": 1.0
					},
					"stack_index": 128,
					"type": "text"
				},
				{
					"buffer": 185,
					"file": "src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5631,
						"regions":
						{
						},
						"selection":
						[
							[
								3384,
								3384
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 607.0,
						"zoom_level": 1.0
					},
					"stack_index": 282,
					"type": "text"
				},
				{
					"buffer": 186,
					"file": "src/RenderPasses/SkyBox/SkyBox.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8729,
						"regions":
						{
						},
						"selection":
						[
							[
								5692,
								5692
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1836.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 187,
					"file": "third_party/slang/external/glm/glm/detail/type_float.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2852,
						"regions":
						{
						},
						"selection":
						[
							[
								1628,
								1628
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 123.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 188,
					"file": "src/Falcor/Scene/Camera/Camera.cpp.bak",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13781,
						"regions":
						{
						},
						"selection":
						[
							[
								4869,
								4869
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 360,
					"type": "text"
				},
				{
					"buffer": 189,
					"file": "src/RenderPasses/SkyBox/SkyBox.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2625,
						"regions":
						{
						},
						"selection":
						[
							[
								2614,
								2614
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 190,
					"file": "src/Falcor/Scene/Scene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 77433,
						"regions":
						{
						},
						"selection":
						[
							[
								11273,
								11273
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3198.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 191,
					"file": "src/Falcor/FalcorExperimental.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1962,
						"regions":
						{
						},
						"selection":
						[
							[
								1962,
								1962
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 324,
					"type": "text"
				},
				{
					"buffer": 192,
					"file": "src/Falcor/Testing/UnitTest.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18153,
						"regions":
						{
						},
						"selection":
						[
							[
								2118,
								2118
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 353,
					"type": "text"
				},
				{
					"buffer": 193,
					"file": "src/Falcor/Utils/Scripting/Scripting.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5848,
						"regions":
						{
						},
						"selection":
						[
							[
								4270,
								4270
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 346,
					"type": "text"
				},
				{
					"buffer": 194,
					"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7903,
						"regions":
						{
						},
						"selection":
						[
							[
								2029,
								2029
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 96.0,
						"zoom_level": 1.0
					},
					"stack_index": 345,
					"type": "text"
				},
				{
					"buffer": 195,
					"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16474,
						"regions":
						{
						},
						"selection":
						[
							[
								2118,
								2118
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 84.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				},
				{
					"buffer": 196,
					"file": "src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25032,
						"regions":
						{
						},
						"selection":
						[
							[
								13208,
								13208
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4180.0,
						"zoom_level": 1.0
					},
					"stack_index": 390,
					"type": "text"
				},
				{
					"buffer": 197,
					"file": "src/houdini/UsdRenderers.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 342,
						"regions":
						{
						},
						"selection":
						[
							[
								341,
								341
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"type": "text"
				},
				{
					"buffer": 198,
					"file": "src/houdini/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 296,
						"regions":
						{
						},
						"selection":
						[
							[
								275,
								275
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"type": "text"
				},
				{
					"buffer": 199,
					"file": "src/Falcor/Scene/Importers/AssimpImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 45604,
						"regions":
						{
						},
						"selection":
						[
							[
								34953,
								34953
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14675.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 200,
					"file": "src/Falcor/Scene/Importers/SceneImporter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2195,
						"regions":
						{
						},
						"selection":
						[
							[
								1893,
								1893
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 357,
					"type": "text"
				},
				{
					"buffer": 201,
					"file": "src/Falcor/Scene/Importers/PythonImporter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2183,
						"regions":
						{
						},
						"selection":
						[
							[
								1899,
								1899
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 356,
					"type": "text"
				},
				{
					"buffer": 202,
					"file": "src/Falcor/Scene/Importer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4276,
						"regions":
						{
						},
						"selection":
						[
							[
								4276,
								4276
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 256.0,
						"zoom_level": 1.0
					},
					"stack_index": 359,
					"type": "text"
				},
				{
					"buffer": 203,
					"file": "src/Falcor/Scene/Importer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2992,
						"regions":
						{
						},
						"selection":
						[
							[
								2991,
								2991
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 358,
					"type": "text"
				},
				{
					"buffer": 204,
					"file": "src/Falcor/Core/Program/Program.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12424,
						"regions":
						{
						},
						"selection":
						[
							[
								12258,
								12258
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3986.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"type": "text"
				},
				{
					"buffer": 205,
					"file": "src/Falcor/Core/API/Shader.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8437,
						"regions":
						{
						},
						"selection":
						[
							[
								5182,
								5182
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2912.0,
						"zoom_level": 1.0
					},
					"stack_index": 160,
					"type": "text"
				},
				{
					"buffer": 206,
					"file": "src/Falcor/Core/API/Vulkan/VKShader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2775,
						"regions":
						{
						},
						"selection":
						[
							[
								1836,
								1836
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 212,
					"type": "text"
				},
				{
					"buffer": 207,
					"file": "src/Falcor/Core/Program/ProgramVars.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14498,
						"regions":
						{
						},
						"selection":
						[
							[
								13763,
								13763
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4428.0,
						"zoom_level": 1.0
					},
					"stack_index": 214,
					"type": "text"
				},
				{
					"buffer": 208,
					"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26700,
						"regions":
						{
						},
						"selection":
						[
							[
								2747,
								2747
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4938.0,
						"zoom_level": 1.0
					},
					"stack_index": 228,
					"type": "text"
				},
				{
					"buffer": 209,
					"file": "src/Falcor/Core/State/GraphicsState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8532,
						"regions":
						{
						},
						"selection":
						[
							[
								4800,
								4800
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1300.0,
						"zoom_level": 1.0
					},
					"stack_index": 289,
					"type": "text"
				},
				{
					"buffer": 210,
					"file": "src/Falcor/Core/Window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18049,
						"regions":
						{
						},
						"selection":
						[
							[
								18049,
								18049
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7293.0,
						"zoom_level": 1.0
					},
					"stack_index": 377,
					"type": "text"
				},
				{
					"buffer": 211,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2247,
						"regions":
						{
						},
						"selection":
						[
							[
								2238,
								2238
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 189,
					"type": "text"
				},
				{
					"buffer": 212,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2775,
						"regions":
						{
						},
						"selection":
						[
							[
								2766,
								2766
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 197,
					"type": "text"
				},
				{
					"buffer": 213,
					"file": "src/Falcor/Core/API/GraphicsStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4325,
						"regions":
						{
						},
						"selection":
						[
							[
								4144,
								4144
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 315,
					"type": "text"
				},
				{
					"buffer": 214,
					"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6041,
						"regions":
						{
						},
						"selection":
						[
							[
								2909,
								2909
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 243,
					"type": "text"
				},
				{
					"buffer": 215,
					"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5196,
						"regions":
						{
						},
						"selection":
						[
							[
								2321,
								2321
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 909.0,
						"zoom_level": 1.0
					},
					"stack_index": 260,
					"type": "text"
				},
				{
					"buffer": 216,
					"file": "src/Falcor/Core/API/ComputeStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2487,
						"regions":
						{
						},
						"selection":
						[
							[
								2237,
								2237
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 339,
					"type": "text"
				},
				{
					"buffer": 217,
					"file": "src/Falcor/Core/API/ComputeStateObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3498,
						"regions":
						{
						},
						"selection":
						[
							[
								2870,
								2870
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 341,
					"type": "text"
				},
				{
					"buffer": 218,
					"file": "src/Falcor/Core/API/GraphicsStateObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6436,
						"regions":
						{
						},
						"selection":
						[
							[
								3354,
								3354
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 699.0,
						"zoom_level": 1.0
					},
					"stack_index": 170,
					"type": "text"
				},
				{
					"buffer": 219,
					"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2479,
						"regions":
						{
						},
						"selection":
						[
							[
								2215,
								2215
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 160.0,
						"zoom_level": 1.0
					},
					"stack_index": 434,
					"type": "text"
				},
				{
					"buffer": 220,
					"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22723,
						"regions":
						{
						},
						"selection":
						[
							[
								9825,
								9825
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3276.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 221,
					"file": "src/Falcor/Core/Platform/OS.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10466,
						"regions":
						{
						},
						"selection":
						[
							[
								6372,
								6372
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2354.0,
						"zoom_level": 1.0
					},
					"stack_index": 231,
					"type": "text"
				},
				{
					"buffer": 222,
					"file": "src/Falcor/Core/Platform/OS.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16345,
						"regions":
						{
						},
						"selection":
						[
							[
								5497,
								5497
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1810.0,
						"zoom_level": 1.0
					},
					"stack_index": 230,
					"type": "text"
				},
				{
					"buffer": 223,
					"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15279,
						"regions":
						{
						},
						"selection":
						[
							[
								1907,
								1907
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 340,
					"type": "text"
				},
				{
					"buffer": 224,
					"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8811,
						"regions":
						{
						},
						"selection":
						[
							[
								7851,
								7851
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1630.0,
						"zoom_level": 1.0
					},
					"stack_index": 119,
					"type": "text"
				},
				{
					"buffer": 225,
					"file": "src/Falcor/Core/Program/Program.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35731,
						"regions":
						{
						},
						"selection":
						[
							[
								31561,
								31561
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14618.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"type": "text"
				},
				{
					"buffer": 226,
					"file": "src/Falcor/Core/Program/ShaderLibrary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2275,
						"regions":
						{
						},
						"selection":
						[
							[
								2088,
								2088
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 209,
					"type": "text"
				},
				{
					"buffer": 227,
					"file": "src/Falcor/Core/Program/ShaderLibrary.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1914,
						"regions":
						{
						},
						"selection":
						[
							[
								1910,
								1910
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 208,
					"type": "text"
				},
				{
					"buffer": 228,
					"file": "src/Falcor/Core/Program/ProgramVersion.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10610,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 210,
					"type": "text"
				},
				{
					"buffer": 229,
					"file": "src/lava_lib/readers/grammar_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25009,
						"regions":
						{
						},
						"selection":
						[
							[
								7052,
								7052
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4182.0,
						"zoom_level": 1.0
					},
					"stack_index": 427,
					"type": "text"
				},
				{
					"buffer": 230,
					"file": "src/Falcor/Utils/UI/Gui.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2541,
						"regions":
						{
						},
						"selection":
						[
							[
								2097,
								2097
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 394,
					"type": "text"
				},
				{
					"buffer": 231,
					"file": "third_party/slang/source/slang/slang.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 123225,
						"regions":
						{
						},
						"selection":
						[
							[
								62930,
								62930
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 32855.0,
						"zoom_level": 1.0
					},
					"stack_index": 273,
					"type": "text"
				},
				{
					"buffer": 232,
					"file": "src/Falcor/Utils/UI/Gui.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 57291,
						"regions":
						{
						},
						"selection":
						[
							[
								55499,
								55499
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20359.0,
						"zoom_level": 1.0
					},
					"stack_index": 348,
					"type": "text"
				},
				{
					"buffer": 233,
					"file": "src/Falcor/Utils/Video/VideoEncoder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15920,
						"regions":
						{
						},
						"selection":
						[
							[
								15574,
								15574
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6630.0,
						"zoom_level": 1.0
					},
					"stack_index": 347,
					"type": "text"
				},
				{
					"buffer": 234,
					"file": "third_party/slang/slang.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 133488,
						"regions":
						{
						},
						"selection":
						[
							[
								88592,
								88592
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 37324.0,
						"zoom_level": 1.0
					},
					"stack_index": 192,
					"type": "text"
				},
				{
					"buffer": 235,
					"file": "src/Falcor/Core/API/FBO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13546,
						"regions":
						{
						},
						"selection":
						[
							[
								9617,
								9617
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2694.0,
						"zoom_level": 1.0
					},
					"stack_index": 291,
					"type": "text"
				},
				{
					"buffer": 236,
					"file": "src/Falcor/Core/API/FBO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18183,
						"regions":
						{
						},
						"selection":
						[
							[
								9617,
								9617
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3153.0,
						"zoom_level": 1.0
					},
					"stack_index": 290,
					"type": "text"
				},
				{
					"buffer": 237,
					"file": "src/Falcor/Core/API/Formats.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20658,
						"regions":
						{
						},
						"selection":
						[
							[
								5325,
								5325
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1245.0,
						"zoom_level": 1.0
					},
					"stack_index": 233,
					"type": "text"
				},
				{
					"buffer": 238,
					"file": "src/Falcor/Core/API/GpuTimer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4521,
						"regions":
						{
						},
						"selection":
						[
							[
								4494,
								4494
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 298,
					"type": "text"
				},
				{
					"buffer": 239,
					"file": "src/Falcor/Core/API/RasterizerState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2331,
						"regions":
						{
						},
						"selection":
						[
							[
								1913,
								1913
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 379,
					"type": "text"
				},
				{
					"buffer": 240,
					"file": "src/Falcor/Core/API/Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5434,
						"regions":
						{
						},
						"selection":
						[
							[
								3414,
								3414
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 910.0,
						"zoom_level": 1.0
					},
					"stack_index": 121,
					"type": "text"
				},
				{
					"buffer": 241,
					"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5086,
						"regions":
						{
						},
						"selection":
						[
							[
								4696,
								4696
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 926.0,
						"zoom_level": 1.0
					},
					"stack_index": 265,
					"type": "text"
				},
				{
					"buffer": 242,
					"file": "src/Falcor/Core/API/Texture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17858,
						"regions":
						{
						},
						"selection":
						[
							[
								16342,
								16342
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5387.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 243,
					"file": "src/Falcor/Core/API/CopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6896,
						"regions":
						{
						},
						"selection":
						[
							[
								4066,
								4066
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 334.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 244,
					"file": "src/Falcor/Core/API/CopyContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8168,
						"regions":
						{
						},
						"selection":
						[
							[
								2007,
								2007
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 138.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 245,
					"file": "src/Falcor/Core/API/VAO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3635,
						"regions":
						{
						},
						"selection":
						[
							[
								3608,
								3608
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 170.0,
						"zoom_level": 1.0
					},
					"stack_index": 308,
					"type": "text"
				},
				{
					"buffer": 246,
					"file": "src/Falcor/Core/API/VertexLayout.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1912,
						"regions":
						{
						},
						"selection":
						[
							[
								1912,
								1912
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 378,
					"type": "text"
				},
				{
					"buffer": 247,
					"file": "src/Falcor/Core/Framework.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2452,
						"regions":
						{
						},
						"selection":
						[
							[
								1793,
								1793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 317,
					"type": "text"
				},
				{
					"buffer": 248,
					"file": "src/Falcor/Core/Program/ComputeProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2688,
						"regions":
						{
						},
						"selection":
						[
							[
								2657,
								2657
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 213,
					"type": "text"
				},
				{
					"buffer": 249,
					"file": "src/Falcor/Core/API/SparseResourceManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3702,
						"regions":
						{
						},
						"selection":
						[
							[
								307,
								307
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 250,
					"file": "src/Falcor/Core/API/SparseResourceManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11359,
						"regions":
						{
						},
						"selection":
						[
							[
								5682,
								5682
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3234.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 251,
					"file": "src/lava_lib/reader_lsd/grammar_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26056,
						"regions":
						{
						},
						"selection":
						[
							[
								26056,
								26056
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4590.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 252,
					"file": "src/Falcor/Utils/Image/LTX_Bitmap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22023,
						"regions":
						{
						},
						"selection":
						[
							[
								7572,
								7572
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3726.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 253,
					"file": "media/textures/uv_checkers/4096x4096 Texel Density Texture 1.png.ltx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1747560,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 254,
					"file": "src/Falcor/Utils/Image/LTX_BitmapAlgo.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1262,
						"regions":
						{
						},
						"selection":
						[
							[
								1146,
								1146
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 255,
					"file": "third_party/OpenImageIO/src/include/OpenImageIO/imagebuf.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 73307,
						"regions":
						{
						},
						"selection":
						[
							[
								1724,
								1724
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5482.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 256,
					"file": "third_party/OpenImageIO/src/include/OpenImageIO/imageio.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 136015,
						"regions":
						{
						},
						"selection":
						[
							[
								9439,
								9439
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4233.0,
						"zoom_level": 1.0
					},
					"stack_index": 157,
					"type": "text"
				},
				{
					"buffer": 257,
					"file": "third_party/OpenImageIO/src/include/OpenImageIO/typedesc.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28075,
						"regions":
						{
						},
						"selection":
						[
							[
								2590,
								2590
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 353.0,
						"zoom_level": 1.0
					},
					"stack_index": 236,
					"type": "text"
				},
				{
					"buffer": 258,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4742,
						"regions":
						{
						},
						"selection":
						[
							[
								1135,
								1135
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 432.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 259,
					"file": "src/pxr/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 399,
						"regions":
						{
						},
						"selection":
						[
							[
								186,
								186
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 112,
					"type": "text"
				},
				{
					"buffer": 260,
					"file": "src/pxr/imaging/plugin/hdLava/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2448,
						"regions":
						{
						},
						"selection":
						[
							[
								2008,
								2008
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1026.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"type": "text"
				},
				{
					"buffer": 261,
					"file": "src/pxr/imaging/plugin/hdLava/plugInfo.json.old",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 604,
						"regions":
						{
						},
						"selection":
						[
							[
								374,
								374
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"type": "text"
				},
				{
					"buffer": 262,
					"file": "src/pxr/imaging/plugin/hdLava/plugInfo.json.in",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 604,
						"regions":
						{
						},
						"selection":
						[
							[
								425,
								425
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"type": "text"
				},
				{
					"buffer": 263,
					"file": "src/pxr/imaging/plugin/hdLava/lavaApi.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2707,
						"regions":
						{
						},
						"selection":
						[
							[
								848,
								848
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 702.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"type": "text"
				},
				{
					"buffer": 264,
					"file": "src/pxr/imaging/plugin/hdLava/lavaApi.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5839,
						"regions":
						{
						},
						"selection":
						[
							[
								5100,
								5100
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2821.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"type": "text"
				},
				{
					"buffer": 265,
					"file": "src/lava_cmd/bin/lava_app_init.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 324,
						"regions":
						{
						},
						"selection":
						[
							[
								305,
								305
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Bash.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 123,
					"type": "text"
				},
				{
					"buffer": 266,
					"file": "src/lava_utils_lib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 567,
						"regions":
						{
						},
						"selection":
						[
							[
								245,
								245
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 238,
					"type": "text"
				},
				{
					"buffer": 267,
					"file": "src/Falcor/Utils/Image/LTX_BitmapAlgo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10518,
						"regions":
						{
						},
						"selection":
						[
							[
								6354,
								6354
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1566.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 268,
					"file": "media/textures/uv_checkers/4096x4096 Texel Density Texture 2.png.ltx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1747560,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/LaTeX/LaTeX.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 269,
					"file": "src/Falcor/Utils/Image/LTX_Bitmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5610,
						"regions":
						{
						},
						"selection":
						[
							[
								1427,
								1427
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 270,
					"file": "src/Falcor/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5729,
						"regions":
						{
						},
						"selection":
						[
							[
								4352,
								4352
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 271,
					"file": "src/lava_lib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1069,
						"regions":
						{
						},
						"selection":
						[
							[
								221,
								221
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 111,
					"type": "text"
				},
				{
					"buffer": 272,
					"file": "src/Falcor/Utils/Image/LTX_BitmapUtils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 569,
						"regions":
						{
						},
						"selection":
						[
							[
								264,
								264
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 273,
					"file": "src/Falcor/Utils/Image/LTX_BitmapUtils.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2247,
						"regions":
						{
						},
						"selection":
						[
							[
								1535,
								1535
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 274,
					"file": "src/Falcor/Utils/Image/Bitmap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14903,
						"regions":
						{
						},
						"selection":
						[
							[
								4829,
								4829
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1450.0,
						"zoom_level": 1.0
					},
					"stack_index": 235,
					"type": "text"
				},
				{
					"buffer": 275,
					"file": "src/Falcor/Utils/Image/Bitmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6797,
						"regions":
						{
						},
						"selection":
						[
							[
								5404,
								5404
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 241,
					"type": "text"
				},
				{
					"buffer": 276,
					"file": "src/Falcor/Core/API/Texture.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18654,
						"regions":
						{
						},
						"selection":
						[
							[
								15603,
								15603
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4685.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 277,
					"file": "src/Falcor/Core/FalcorConfig.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2544,
						"regions":
						{
						},
						"selection":
						[
							[
								2456,
								2456
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 59.0,
						"zoom_level": 1.0
					},
					"stack_index": 292,
					"type": "text"
				},
				{
					"buffer": 278,
					"file": "third_party/slang/external/glm/glm/gtx/compatibility.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14979,
						"regions":
						{
						},
						"selection":
						[
							[
								9088,
								9088
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1239.0,
						"zoom_level": 1.0
					},
					"stack_index": 293,
					"type": "text"
				},
				{
					"buffer": 279,
					"file": "src/Falcor/Core/API/VirtualTexturePage.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2842,
						"regions":
						{
						},
						"selection":
						[
							[
								1739,
								1739
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 83.0,
						"zoom_level": 1.0
					},
					"stack_index": 146,
					"type": "text"
				},
				{
					"buffer": 280,
					"file": "src/Falcor/Utils/ThreadPool.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1819,
						"regions":
						{
						},
						"selection":
						[
							[
								846,
								846
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 281,
					"file": "src/Falcor/Utils/ThreadPool.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 965,
						"regions":
						{
						},
						"selection":
						[
							[
								473,
								473
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 282,
					"file": "src/Falcor/Core/API/VirtualTexturePage.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2727,
						"regions":
						{
						},
						"selection":
						[
							[
								2193,
								2193
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 324.0,
						"zoom_level": 1.0
					},
					"stack_index": 147,
					"type": "text"
				},
				{
					"buffer": 283,
					"file": "third_party/slang/external/vulkan/include/vulkan/vulkan_core.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 541063,
						"regions":
						{
						},
						"selection":
						[
							[
								1807,
								1807
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 348.0,
						"zoom_level": 1.0
					},
					"stack_index": 242,
					"type": "text"
				},
				{
					"buffer": 284,
					"file": "src/Falcor/Core/API/TextureLoader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24309,
						"regions":
						{
						},
						"selection":
						[
							[
								22589,
								22589
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10012.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 285,
					"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11549,
						"regions":
						{
						},
						"selection":
						[
							[
								4223,
								4223
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1539.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 286,
					"file": "src/Falcor/Core/API/ResourceViews.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9621,
						"regions":
						{
						},
						"selection":
						[
							[
								9208,
								9208
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2269.0,
						"zoom_level": 1.0
					},
					"stack_index": 266,
					"type": "text"
				},
				{
					"buffer": 287,
					"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14266,
						"regions":
						{
						},
						"selection":
						[
							[
								7385,
								7385
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2484.0,
						"zoom_level": 1.0
					},
					"stack_index": 118,
					"type": "text"
				},
				{
					"buffer": 288,
					"file": "src/Falcor/Core/API/ResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6247,
						"regions":
						{
						},
						"selection":
						[
							[
								4196,
								4196
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1037.0,
						"zoom_level": 1.0
					},
					"stack_index": 232,
					"type": "text"
				},
				{
					"buffer": 289,
					"file": "src/Falcor/Core/API/Sampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4282,
						"regions":
						{
						},
						"selection":
						[
							[
								3350,
								3350
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 676.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 290,
					"file": "src/Falcor/Core/API/Device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16476,
						"regions":
						{
						},
						"selection":
						[
							[
								5560,
								5560
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1642.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 291,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31686,
						"regions":
						{
						},
						"selection":
						[
							[
								7083,
								7083
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1906.0,
						"zoom_level": 1.0
					},
					"stack_index": 262,
					"type": "text"
				},
				{
					"buffer": 292,
					"file": "src/Falcor/Core/API/GpuMemoryHeap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5126,
						"regions":
						{
						},
						"selection":
						[
							[
								1910,
								1910
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 335.0,
						"zoom_level": 1.0
					},
					"stack_index": 271,
					"type": "text"
				},
				{
					"buffer": 293,
					"file": "src/Falcor/Core/API/LowLevelContextData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4100,
						"regions":
						{
						},
						"selection":
						[
							[
								2278,
								2278
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 637.0,
						"zoom_level": 1.0
					},
					"stack_index": 267,
					"type": "text"
				},
				{
					"buffer": 294,
					"file": "src/Falcor/Utils/Logger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6007,
						"regions":
						{
						},
						"selection":
						[
							[
								5468,
								5468
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1579.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"type": "text"
				},
				{
					"buffer": 295,
					"file": "src/Falcor/Utils/Debug/debug.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3123,
						"regions":
						{
						},
						"selection":
						[
							[
								525,
								525
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 189.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"type": "text"
				},
				{
					"buffer": 296,
					"file": "src/Falcor/Core/API/Formats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14038,
						"regions":
						{
						},
						"selection":
						[
							[
								10239,
								10239
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4900.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 297,
					"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6259,
						"regions":
						{
						},
						"selection":
						[
							[
								2407,
								2407
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 110.0,
						"zoom_level": 1.0
					},
					"stack_index": 216,
					"type": "text"
				},
				{
					"buffer": 298,
					"file": "src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2413,
						"regions":
						{
						},
						"selection":
						[
							[
								1893,
								1893
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 124,
					"type": "text"
				},
				{
					"buffer": 299,
					"file": "src/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 534,
						"regions":
						{
						},
						"selection":
						[
							[
								400,
								400
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 114,
					"type": "text"
				},
				{
					"buffer": 300,
					"file": "src/Mogwai/Mogwai.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25155,
						"regions":
						{
						},
						"selection":
						[
							[
								16051,
								16051
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6536.0,
						"zoom_level": 1.0
					},
					"stack_index": 294,
					"type": "text"
				},
				{
					"buffer": 301,
					"file": "src/Falcor/Core/API/RenderContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11441,
						"regions":
						{
						},
						"selection":
						[
							[
								4874,
								4874
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1072.0,
						"zoom_level": 1.0
					},
					"stack_index": 166,
					"type": "text"
				},
				{
					"buffer": 302,
					"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5608,
						"regions":
						{
						},
						"selection":
						[
							[
								4120,
								4120
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 589.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 303,
					"file": "src/Falcor/Core/API/RenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5362,
						"regions":
						{
						},
						"selection":
						[
							[
								1911,
								1911
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 420.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 304,
					"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6996,
						"regions":
						{
						},
						"selection":
						[
							[
								3344,
								3344
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 522.0,
						"zoom_level": 1.0
					},
					"stack_index": 281,
					"type": "text"
				},
				{
					"buffer": 305,
					"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5216,
						"regions":
						{
						},
						"selection":
						[
							[
								2990,
								2990
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1863.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"type": "text"
				},
				{
					"buffer": 306,
					"file": "src/Falcor/Core/API/BlendState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3710,
						"regions":
						{
						},
						"selection":
						[
							[
								1898,
								1898
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 169,
					"type": "text"
				},
				{
					"buffer": 307,
					"file": "src/Falcor/Core/API/Buffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12586,
						"regions":
						{
						},
						"selection":
						[
							[
								3961,
								3961
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1132.0,
						"zoom_level": 1.0
					},
					"stack_index": 130,
					"type": "text"
				},
				{
					"buffer": 308,
					"file": "src/Falcor/Core/API/RootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8993,
						"regions":
						{
						},
						"selection":
						[
							[
								8146,
								8146
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2392.0,
						"zoom_level": 1.0
					},
					"stack_index": 280,
					"type": "text"
				},
				{
					"buffer": 309,
					"file": "src/Falcor/Core/API/DepthStencilState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3745,
						"regions":
						{
						},
						"selection":
						[
							[
								1904,
								1904
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 33.0,
						"zoom_level": 1.0
					},
					"stack_index": 172,
					"type": "text"
				},
				{
					"buffer": 310,
					"file": "src/Falcor/Core/API/DepthStencilState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7560,
						"regions":
						{
						},
						"selection":
						[
							[
								3908,
								3908
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1095.0,
						"zoom_level": 1.0
					},
					"stack_index": 171,
					"type": "text"
				},
				{
					"buffer": 311,
					"file": "src/Falcor/RenderGraph/RenderGraphExe.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4261,
						"regions":
						{
						},
						"selection":
						[
							[
								2457,
								2457
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 298.0,
						"zoom_level": 1.0
					},
					"stack_index": 178,
					"type": "text"
				},
				{
					"buffer": 312,
					"file": "src/Falcor/RenderGraph/RenderGraphExe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5259,
						"regions":
						{
						},
						"selection":
						[
							[
								2778,
								2778
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 177,
					"type": "text"
				},
				{
					"buffer": 313,
					"file": "src/Falcor/Core/Renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7203,
						"regions":
						{
						},
						"selection":
						[
							[
								2728,
								2728
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2150.0,
						"zoom_level": 1.0
					},
					"stack_index": 305,
					"type": "text"
				},
				{
					"buffer": 314,
					"file": "src/Falcor/Core/Sample.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7389,
						"regions":
						{
						},
						"selection":
						[
							[
								6595,
								6595
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1513.0,
						"zoom_level": 1.0
					},
					"stack_index": 306,
					"type": "text"
				},
				{
					"buffer": 315,
					"file": "src/Mogwai/Mogwai.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8364,
						"regions":
						{
						},
						"selection":
						[
							[
								7403,
								7403
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2550.0,
						"zoom_level": 1.0
					},
					"stack_index": 299,
					"type": "text"
				},
				{
					"buffer": 316,
					"file": "src/Falcor/Core/API/Device.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12691,
						"regions":
						{
						},
						"selection":
						[
							[
								12379,
								12379
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4772.0,
						"zoom_level": 1.0
					},
					"stack_index": 179,
					"type": "text"
				},
				{
					"buffer": 317,
					"file": "src/Falcor/Core/API/D3D12/D3D12Device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15156,
						"regions":
						{
						},
						"selection":
						[
							[
								9567,
								9567
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3457.0,
						"zoom_level": 1.0
					},
					"stack_index": 269,
					"type": "text"
				},
				{
					"buffer": 318,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3075,
						"regions":
						{
						},
						"selection":
						[
							[
								2532,
								2532
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 212.0,
						"zoom_level": 1.0
					},
					"stack_index": 263,
					"type": "text"
				},
				{
					"buffer": 319,
					"file": "src/Falcor/Core/Sample.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25487,
						"regions":
						{
						},
						"selection":
						[
							[
								7657,
								7657
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2900.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"type": "text"
				},
				{
					"buffer": 320,
					"file": "src/Falcor/Utils/Timing/Clock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9897,
						"regions":
						{
						},
						"selection":
						[
							[
								7458,
								7458
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3468.0,
						"zoom_level": 1.0
					},
					"stack_index": 349,
					"type": "text"
				},
				{
					"buffer": 321,
					"file": "src/lava_lib/renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13889,
						"regions":
						{
						},
						"selection":
						[
							[
								6948,
								6948
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3685.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"type": "text"
				},
				{
					"buffer": 322,
					"file": "src/lava_utils_lib/logging.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2457,
						"regions":
						{
						},
						"selection":
						[
							[
								987,
								987
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"type": "text"
				},
				{
					"buffer": 323,
					"file": "src/Falcor/Core/API/Vulkan/VKSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2442,
						"regions":
						{
						},
						"selection":
						[
							[
								2006,
								2006
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 165,
					"type": "text"
				},
				{
					"buffer": 324,
					"file": "src/Falcor/Core/API/Sampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7908,
						"regions":
						{
						},
						"selection":
						[
							[
								4532,
								4532
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1144.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"type": "text"
				},
				{
					"buffer": 325,
					"file": "src/lava_tools/ltxview.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7123,
						"regions":
						{
						},
						"selection":
						[
							[
								2664,
								2664
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2484.0,
						"zoom_level": 1.0
					},
					"stack_index": 176,
					"type": "text"
				},
				{
					"buffer": 326,
					"file": "src/lava_tools/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1331,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 175,
					"type": "text"
				},
				{
					"buffer": 327,
					"file": "src/Falcor/Utils/Timing/Clock.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8564,
						"regions":
						{
						},
						"selection":
						[
							[
								2715,
								2715
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 433.0,
						"zoom_level": 1.0
					},
					"stack_index": 215,
					"type": "text"
				},
				{
					"buffer": 328,
					"file": "src/Falcor/Core/API/DeviceManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3988,
						"regions":
						{
						},
						"selection":
						[
							[
								3033,
								3033
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 450.0,
						"zoom_level": 1.0
					},
					"stack_index": 297,
					"type": "text"
				},
				{
					"buffer": 329,
					"file": "src/Falcor/Core/API/Vulkan/VKDeviceManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3062,
						"regions":
						{
						},
						"selection":
						[
							[
								2117,
								2117
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 552.0,
						"zoom_level": 1.0
					},
					"stack_index": 264,
					"type": "text"
				},
				{
					"buffer": 330,
					"file": "src/lava_lib/renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5284,
						"regions":
						{
						},
						"selection":
						[
							[
								5036,
								5036
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"type": "text"
				},
				{
					"buffer": 331,
					"file": "src/Falcor/Core/API/DeviceManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5539,
						"regions":
						{
						},
						"selection":
						[
							[
								2979,
								2979
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 285.0,
						"zoom_level": 1.0
					},
					"stack_index": 295,
					"type": "text"
				},
				{
					"buffer": 332,
					"file": "src/Falcor/RenderGraph/RenderGraph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12537,
						"regions":
						{
						},
						"selection":
						[
							[
								5983,
								5983
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1660.0,
						"zoom_level": 1.0
					},
					"stack_index": 173,
					"type": "text"
				},
				{
					"buffer": 333,
					"file": "src/Falcor/RenderGraph/RenderGraphCompiler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3226,
						"regions":
						{
						},
						"selection":
						[
							[
								1895,
								1895
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 22.0,
						"zoom_level": 1.0
					},
					"stack_index": 395,
					"type": "text"
				},
				{
					"buffer": 334,
					"file": "third_party/slang/prelude/slang-cpp-types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37133,
						"regions":
						{
						},
						"selection":
						[
							[
								12529,
								12529
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6927.0,
						"zoom_level": 1.0
					},
					"stack_index": 248,
					"type": "text"
				},
				{
					"buffer": 335,
					"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32140,
						"regions":
						{
						},
						"selection":
						[
							[
								16268,
								16268
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6281.0,
						"zoom_level": 1.0
					},
					"stack_index": 180,
					"type": "text"
				},
				{
					"buffer": 336,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 74,
						"regions":
						{
						},
						"selection":
						[
							[
								73,
								73
							]
						],
						"settings":
						{
							"auto_name": "SkyBox + 7 eagle models. 4K x 256spp (with MESA)",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 330,
					"type": "text"
				},
				{
					"buffer": 337,
					"file": "src/lava_lib/display.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2601,
						"regions":
						{
						},
						"selection":
						[
							[
								930,
								930
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 314,
					"type": "text"
				},
				{
					"buffer": 338,
					"file": "src/lava_lib/display.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12020,
						"regions":
						{
						},
						"selection":
						[
							[
								7160,
								7160
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2987.0,
						"zoom_level": 1.0
					},
					"stack_index": 307,
					"type": "text"
				},
				{
					"buffer": 339,
					"file": "third_party/prman/ri.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49551,
						"regions":
						{
						},
						"selection":
						[
							[
								2889,
								2889
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 857.0,
						"zoom_level": 1.0
					},
					"stack_index": 418,
					"type": "text"
				},
				{
					"buffer": 340,
					"file": "src/lava_lib/reader_lsd/visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5835,
						"regions":
						{
						},
						"selection":
						[
							[
								4688,
								4688
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3132.0,
						"zoom_level": 1.0
					},
					"stack_index": 149,
					"type": "text"
				},
				{
					"buffer": 341,
					"file": "/opt/lava/test/simple_inline_ascii3.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7575,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2193.0,
						"zoom_level": 1.0
					},
					"stack_index": 332,
					"type": "text"
				},
				{
					"buffer": 342,
					"file": "src/lava_lib/reader_lsd/session.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17142,
						"regions":
						{
						},
						"selection":
						[
							[
								7034,
								7034
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3240.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 343,
					"file": "/opt/lava/test/minecraft_01.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47101,
						"regions":
						{
						},
						"selection":
						[
							[
								16414,
								16414
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 217,
					"type": "text"
				},
				{
					"buffer": 344,
					"file": "/opt/lava/test/vt_test_1.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 74946,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 218,
					"type": "text"
				},
				{
					"buffer": 345,
					"file": "src/lava_lib/reader_lsd/scope.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5018,
						"regions":
						{
						},
						"selection":
						[
							[
								3449,
								3449
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1198.0,
						"zoom_level": 1.0
					},
					"stack_index": 223,
					"type": "text"
				},
				{
					"buffer": 346,
					"file": "src/Falcor/Scene/Material/Material.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21449,
						"regions":
						{
						},
						"selection":
						[
							[
								7200,
								7200
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9324.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 347,
					"file": "src/lava_cmd/lava_cmd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7915,
						"regions":
						{
						},
						"selection":
						[
							[
								3964,
								3964
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1137.0,
						"zoom_level": 1.0
					},
					"stack_index": 117,
					"type": "text"
				},
				{
					"buffer": 348,
					"file": "src/lava_utils_lib/logging.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2211,
						"regions":
						{
						},
						"selection":
						[
							[
								477,
								477
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"type": "text"
				},
				{
					"buffer": 349,
					"file": "src/lava_lib/reader_lsd/session.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2369,
						"regions":
						{
						},
						"selection":
						[
							[
								1682,
								1682
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 301,
					"type": "text"
				},
				{
					"buffer": 350,
					"file": "src/Externals/GLM/glm/gtx/transform.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1665,
						"regions":
						{
						},
						"selection":
						[
							[
								1322,
								1322
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 183.0,
						"zoom_level": 1.0
					},
					"stack_index": 321,
					"type": "text"
				},
				{
					"buffer": 351,
					"file": "src/Externals/GLM/glm/ext/quaternion_transform.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1331,
						"regions":
						{
						},
						"selection":
						[
							[
								1198,
								1198
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 132.0,
						"zoom_level": 1.0
					},
					"stack_index": 320,
					"type": "text"
				},
				{
					"buffer": 352,
					"file": "src/Externals/GLM/glm/ext/matrix_transform.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6026,
						"regions":
						{
						},
						"selection":
						[
							[
								3023,
								3023
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 353,
					"file": "src/Externals/GLM/glm/gtx/rotate_vector.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3570,
						"regions":
						{
						},
						"selection":
						[
							[
								1430,
								1430
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 676.0,
						"zoom_level": 1.0
					},
					"stack_index": 322,
					"type": "text"
				},
				{
					"buffer": 354,
					"file": "src/lava_utils_lib/ut_string.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 609,
						"regions":
						{
						},
						"selection":
						[
							[
								573,
								573
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 391,
					"type": "text"
				},
				{
					"buffer": 355,
					"file": "src/lava_utils_lib/ut_string.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 298,
						"regions":
						{
						},
						"selection":
						[
							[
								229,
								229
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 336,
					"type": "text"
				},
				{
					"buffer": 356,
					"file": "/opt/lava/test/imdisplay_test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 609,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								184
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 414,
					"type": "text"
				},
				{
					"buffer": 357,
					"file": "src/lava_lib/reader_lsd/reader_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1455,
						"regions":
						{
						},
						"selection":
						[
							[
								182,
								182
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 300,
					"type": "text"
				},
				{
					"buffer": 358,
					"file": "src/lava_cmd/conf/default.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3329,
						"regions":
						{
						},
						"selection":
						[
							[
								1258,
								1258
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 580.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 359,
					"file": "src/lava_lib/sdl_display/d_sdl.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8697,
						"regions":
						{
						},
						"selection":
						[
							[
								4933,
								4933
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2193.0,
						"zoom_level": 1.0
					},
					"stack_index": 302,
					"type": "text"
				},
				{
					"buffer": 360,
					"file": "src/lava_lib/sdl_display/sdl_opengl_window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1716,
						"regions":
						{
						},
						"selection":
						[
							[
								354,
								354
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 309,
					"type": "text"
				},
				{
					"buffer": 361,
					"file": "src/lava_lib/sdl_display/sdl_opengl_window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9233,
						"regions":
						{
						},
						"selection":
						[
							[
								565,
								565
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 303,
					"type": "text"
				},
				{
					"buffer": 362,
					"file": "/opt/lava/test/simple_inline_ascii4.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 500133,
						"regions":
						{
						},
						"selection":
						[
							[
								50770,
								50770
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6188.0,
						"zoom_level": 1.0
					},
					"stack_index": 296,
					"type": "text"
				},
				{
					"buffer": 363,
					"file": "src/lava_lib/reader_lsd/scope.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8706,
						"regions":
						{
						},
						"selection":
						[
							[
								6125,
								6125
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2438.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 364,
					"file": "src/lava_lib/reader_lsd/properties_container.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16518,
						"regions":
						{
						},
						"selection":
						[
							[
								2678,
								2678
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1769.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 365,
					"file": "/opt/lava/test/instance_inline_ascii_1.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26178,
						"regions":
						{
						},
						"selection":
						[
							[
								24738,
								24738
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4845.0,
						"zoom_level": 1.0
					},
					"stack_index": 319,
					"type": "text"
				},
				{
					"buffer": 366,
					"file": "src/lava_lib/scene_builder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16796,
						"regions":
						{
						},
						"selection":
						[
							[
								5523,
								5523
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 116,
					"type": "text"
				},
				{
					"buffer": 367,
					"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8785,
						"regions":
						{
						},
						"selection":
						[
							[
								2610,
								2610
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 603.0,
						"zoom_level": 1.0
					},
					"stack_index": 221,
					"type": "text"
				},
				{
					"buffer": 368,
					"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3029,
						"regions":
						{
						},
						"selection":
						[
							[
								1514,
								1514
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 220,
					"type": "text"
				},
				{
					"buffer": 369,
					"file": "src/lava_lib/scene_builder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 867,
						"regions":
						{
						},
						"selection":
						[
							[
								259,
								259
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 151,
					"type": "text"
				},
				{
					"buffer": 370,
					"file": "src/Falcor/Scene/Material/Material.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11903,
						"regions":
						{
						},
						"selection":
						[
							[
								11703,
								11703
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1583.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 371,
					"file": "src/Falcor/Scene/SceneBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14477,
						"regions":
						{
						},
						"selection":
						[
							[
								3393,
								3393
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 485.0,
						"zoom_level": 1.0
					},
					"stack_index": 115,
					"type": "text"
				},
				{
					"buffer": 372,
					"file": "src/Falcor/Core/API/VAO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5144,
						"regions":
						{
						},
						"selection":
						[
							[
								2580,
								2580
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 457.0,
						"zoom_level": 1.0
					},
					"stack_index": 397,
					"type": "text"
				},
				{
					"buffer": 373,
					"file": "src/Falcor/Scene/SceneBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31578,
						"regions":
						{
						},
						"selection":
						[
							[
								19791,
								19791
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7183.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"type": "text"
				},
				{
					"buffer": 374,
					"file": "src/Falcor/Utils/Timing/TimeReport.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2736,
						"regions":
						{
						},
						"selection":
						[
							[
								2502,
								2502
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 211,
					"type": "text"
				},
				{
					"buffer": 375,
					"file": "src/Falcor/Scene/Scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29405,
						"regions":
						{
						},
						"selection":
						[
							[
								15902,
								15902
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7470.0,
						"zoom_level": 1.0
					},
					"stack_index": 152,
					"type": "text"
				},
				{
					"buffer": 376,
					"file": "src/Falcor/Scene/Animation/Animatable.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3413,
						"regions":
						{
						},
						"selection":
						[
							[
								2354,
								2354
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 85.0,
						"zoom_level": 1.0
					},
					"stack_index": 323,
					"type": "text"
				},
				{
					"buffer": 377,
					"file": "src/Falcor/Scene/Animation/Animatable.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2090,
						"regions":
						{
						},
						"selection":
						[
							[
								1775,
								1775
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 381,
					"type": "text"
				},
				{
					"buffer": 378,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4605,
						"regions":
						{
						},
						"selection":
						[
							[
								3035,
								3035
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 779.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 379,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4754,
						"regions":
						{
						},
						"selection":
						[
							[
								4315,
								4315
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 856.0,
						"zoom_level": 1.0
					},
					"stack_index": 327,
					"type": "text"
				},
				{
					"buffer": 380,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43473,
						"regions":
						{
						},
						"selection":
						[
							[
								18177,
								18177
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5862.0,
						"zoom_level": 1.0
					},
					"stack_index": 361,
					"type": "text"
				},
				{
					"buffer": 381,
					"file": "src/Falcor/Utils/UI/Gui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27015,
						"regions":
						{
						},
						"selection":
						[
							[
								1945,
								1945
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 355,
					"type": "text"
				},
				{
					"buffer": 382,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10485,
						"regions":
						{
						},
						"selection":
						[
							[
								1927,
								1927
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 867.0,
						"zoom_level": 1.0
					},
					"stack_index": 364,
					"type": "text"
				},
				{
					"buffer": 383,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7958,
						"regions":
						{
						},
						"selection":
						[
							[
								6285,
								6285
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 362,
					"type": "text"
				},
				{
					"buffer": 384,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8675,
						"regions":
						{
						},
						"selection":
						[
							[
								3153,
								3153
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 363,
					"type": "text"
				},
				{
					"buffer": 385,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14274,
						"regions":
						{
						},
						"selection":
						[
							[
								10876,
								10876
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3922.0,
						"zoom_level": 1.0
					},
					"stack_index": 283,
					"type": "text"
				},
				{
					"buffer": 386,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHRefit.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7705,
						"regions":
						{
						},
						"selection":
						[
							[
								7705,
								7705
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1801.0,
						"zoom_level": 1.0
					},
					"stack_index": 368,
					"type": "text"
				},
				{
					"buffer": 387,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4343,
						"regions":
						{
						},
						"selection":
						[
							[
								3285,
								3285
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 713.0,
						"zoom_level": 1.0
					},
					"stack_index": 279,
					"type": "text"
				},
				{
					"buffer": 388,
					"file": "src/Falcor/Experimental/Scene/Lights/FinalizeIntegration.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4150,
						"regions":
						{
						},
						"selection":
						[
							[
								4150,
								4150
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 186.0,
						"zoom_level": 1.0
					},
					"stack_index": 367,
					"type": "text"
				},
				{
					"buffer": 389,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6241,
						"regions":
						{
						},
						"selection":
						[
							[
								2485,
								2485
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"stack_index": 365,
					"type": "text"
				},
				{
					"buffer": 390,
					"file": "src/Falcor/Experimental/Scene/Material/BxDFTypes.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2300,
						"regions":
						{
						},
						"selection":
						[
							[
								2300,
								2300
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 252,
					"type": "text"
				},
				{
					"buffer": 391,
					"file": "src/Falcor/Experimental/Scene/Material/BxDF.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24049,
						"regions":
						{
						},
						"selection":
						[
							[
								24049,
								24049
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1047.0,
						"zoom_level": 1.0
					},
					"stack_index": 251,
					"type": "text"
				},
				{
					"buffer": 392,
					"file": "src/Falcor/Experimental/Scene/Material/Fresnel.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4300,
						"regions":
						{
						},
						"selection":
						[
							[
								4300,
								4300
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 697.0,
						"zoom_level": 1.0
					},
					"stack_index": 376,
					"type": "text"
				},
				{
					"buffer": 393,
					"file": "src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8184,
						"regions":
						{
						},
						"selection":
						[
							[
								6156,
								6156
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2991.0,
						"zoom_level": 1.0
					},
					"stack_index": 156,
					"type": "text"
				},
				{
					"buffer": 394,
					"file": "src/Falcor/Experimental/Scene/Material/MaterialShading.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26490,
						"regions":
						{
						},
						"selection":
						[
							[
								24755,
								24755
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2913.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 395,
					"file": "src/Falcor/Experimental/Scene/Material/Microfacet.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10130,
						"regions":
						{
						},
						"selection":
						[
							[
								10130,
								10130
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2600.0,
						"zoom_level": 1.0
					},
					"stack_index": 375,
					"type": "text"
				},
				{
					"buffer": 396,
					"file": "src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41105,
						"regions":
						{
						},
						"selection":
						[
							[
								5976,
								5976
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 108.0,
						"zoom_level": 1.0
					},
					"stack_index": 253,
					"type": "text"
				},
				{
					"buffer": 397,
					"file": "src/Falcor/Experimental/Scene/Material/TexLODTypes.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2900,
						"regions":
						{
						},
						"selection":
						[
							[
								1851,
								1851
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 254,
					"type": "text"
				},
				{
					"buffer": 398,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3576,
						"regions":
						{
						},
						"selection":
						[
							[
								2524,
								2524
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 88.0,
						"zoom_level": 1.0
					},
					"stack_index": 198,
					"type": "text"
				},
				{
					"buffer": 399,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2868,
						"regions":
						{
						},
						"selection":
						[
							[
								2868,
								2868
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 200,
					"type": "text"
				},
				{
					"buffer": 400,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2178,
						"regions":
						{
						},
						"selection":
						[
							[
								2178,
								2178
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 201,
					"type": "text"
				},
				{
					"buffer": 401,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4983,
						"regions":
						{
						},
						"selection":
						[
							[
								4983,
								4983
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 441.0,
						"zoom_level": 1.0
					},
					"stack_index": 199,
					"type": "text"
				},
				{
					"buffer": 402,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerType.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2577,
						"regions":
						{
						},
						"selection":
						[
							[
								2030,
								2030
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 196,
					"type": "text"
				},
				{
					"buffer": 403,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerInterface.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4180,
						"regions":
						{
						},
						"selection":
						[
							[
								4180,
								4180
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 195,
					"type": "text"
				},
				{
					"buffer": 404,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5874,
						"regions":
						{
						},
						"selection":
						[
							[
								5874,
								5874
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 849.0,
						"zoom_level": 1.0
					},
					"stack_index": 194,
					"type": "text"
				},
				{
					"buffer": 405,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3489,
						"regions":
						{
						},
						"selection":
						[
							[
								3489,
								3489
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 406,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6084,
						"regions":
						{
						},
						"selection":
						[
							[
								2476,
								2476
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 399.0,
						"zoom_level": 1.0
					},
					"stack_index": 155,
					"type": "text"
				},
				{
					"buffer": 407,
					"file": "src/Falcor/Experimental/Scene/Lights/BuildTriangleList.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3362,
						"regions":
						{
						},
						"selection":
						[
							[
								1753,
								1753
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 366,
					"type": "text"
				},
				{
					"buffer": 408,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5279,
						"regions":
						{
						},
						"selection":
						[
							[
								3799,
								3799
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 717.0,
						"zoom_level": 1.0
					},
					"stack_index": 188,
					"type": "text"
				},
				{
					"buffer": 409,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3425,
						"regions":
						{
						},
						"selection":
						[
							[
								3186,
								3186
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 100.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 410,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6643,
						"regions":
						{
						},
						"selection":
						[
							[
								6643,
								6643
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 202,
					"type": "text"
				},
				{
					"buffer": 411,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSamplerSetup.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3272,
						"regions":
						{
						},
						"selection":
						[
							[
								3272,
								3272
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 412,
					"file": "src/Falcor/Core/Window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5592,
						"regions":
						{
						},
						"selection":
						[
							[
								2379,
								2379
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 382,
					"type": "text"
				},
				{
					"buffer": 413,
					"file": "src/Falcor/Scene/Animation/AnimationController.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5078,
						"regions":
						{
						},
						"selection":
						[
							[
								2004,
								2004
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 351,
					"type": "text"
				},
				{
					"buffer": 414,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12566,
						"regions":
						{
						},
						"selection":
						[
							[
								1975,
								1975
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 648.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 415,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27029,
						"regions":
						{
						},
						"selection":
						[
							[
								14257,
								14257
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5092.0,
						"zoom_level": 1.0
					},
					"stack_index": 187,
					"type": "text"
				},
				{
					"buffer": 416,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollectionShared.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5732,
						"regions":
						{
						},
						"selection":
						[
							[
								5732,
								5732
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1155.0,
						"zoom_level": 1.0
					},
					"stack_index": 374,
					"type": "text"
				},
				{
					"buffer": 417,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5394,
						"regions":
						{
						},
						"selection":
						[
							[
								2319,
								2319
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 671.0,
						"zoom_level": 1.0
					},
					"stack_index": 229,
					"type": "text"
				},
				{
					"buffer": 418,
					"file": "src/Falcor/Scene/Animation/AnimationController.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10423,
						"regions":
						{
						},
						"selection":
						[
							[
								1986,
								1986
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 136.0,
						"zoom_level": 1.0
					},
					"stack_index": 352,
					"type": "text"
				},
				{
					"buffer": 419,
					"file": "src/Falcor/Scene/Animation/Animation.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5117,
						"regions":
						{
						},
						"selection":
						[
							[
								1828,
								1828
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 354,
					"type": "text"
				},
				{
					"buffer": 420,
					"file": "src/Falcor/Scene/Animation/Animation.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9568,
						"regions":
						{
						},
						"selection":
						[
							[
								2114,
								2114
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 380,
					"type": "text"
				},
				{
					"buffer": 421,
					"file": "src/Falcor/Utils/InternalDictionary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4253,
						"regions":
						{
						},
						"selection":
						[
							[
								3347,
								3347
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 715.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"type": "text"
				},
				{
					"buffer": 422,
					"file": "src/lava_lib/renderer_scripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3505,
						"regions":
						{
						},
						"selection":
						[
							[
								3505,
								3505
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 331,
					"type": "text"
				},
				{
					"buffer": 423,
					"file": "src/lava_lib/scene_reader_base.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1126,
						"regions":
						{
						},
						"selection":
						[
							[
								417,
								417
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 426,
					"type": "text"
				},
				{
					"buffer": 424,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2087,
						"regions":
						{
						},
						"selection":
						[
							[
								2087,
								2087
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 425,
					"type": "text"
				},
				{
					"buffer": 425,
					"file": "src/lava_lib/scene_reader_base.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 622,
						"regions":
						{
						},
						"selection":
						[
							[
								578,
								578
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 413,
					"type": "text"
				},
				{
					"buffer": 426,
					"file": "src/lava_lib/renderer_iface.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2403,
						"regions":
						{
						},
						"selection":
						[
							[
								1183,
								1183
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 340.0,
						"zoom_level": 1.0
					},
					"stack_index": 304,
					"type": "text"
				},
				{
					"buffer": 427,
					"file": "src/lava_lib/renderer_iface.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2960,
						"regions":
						{
						},
						"selection":
						[
							[
								496,
								496
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1188.0,
						"zoom_level": 1.0
					},
					"stack_index": 150,
					"type": "text"
				},
				{
					"buffer": 428,
					"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3193,
						"regions":
						{
						},
						"selection":
						[
							[
								1199,
								1199
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 224,
					"type": "text"
				},
				{
					"buffer": 429,
					"file": "src/lava_lib/readers/lsd_visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1871,
						"regions":
						{
						},
						"selection":
						[
							[
								42,
								42
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 430,
					"type": "text"
				},
				{
					"buffer": 430,
					"file": "src/lava_lib/readers/lsd_echo_visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5756,
						"regions":
						{
						},
						"selection":
						[
							[
								42,
								42
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 431,
					"type": "text"
				},
				{
					"buffer": 431,
					"file": "src/lava_lib/readers/session_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 762,
						"regions":
						{
						},
						"selection":
						[
							[
								274,
								274
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 432,
					"type": "text"
				},
				{
					"buffer": 432,
					"file": "src/lava_lib/readers/session_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2376,
						"regions":
						{
						},
						"selection":
						[
							[
								2157,
								2157
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 773.0,
						"zoom_level": 1.0
					},
					"stack_index": 316,
					"type": "text"
				},
				{
					"buffer": 433,
					"file": "src/lava_lib/readers/reader_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2997,
						"regions":
						{
						},
						"selection":
						[
							[
								793,
								793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 428,
					"type": "text"
				},
				{
					"buffer": 434,
					"file": "src/lava_lib/readers/reader_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1486,
						"regions":
						{
						},
						"selection":
						[
							[
								1210,
								1210
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 429,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 31.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 31.0
	},
	"output.unsaved_changes":
	{
		"height": 120.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 385.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
