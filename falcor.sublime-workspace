{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"lig",
				"light_color"
			],
			[
				"LL",
				"LLOG_DBG"
			],
			[
				"Dis",
				"DistantLight"
			],
			[
				"li",
				"light_color"
			],
			[
				"LO",
				"LLOG_DBG"
			],
			[
				"LLO",
				"LLOG_DBG"
			],
			[
				"st",
				"Style"
			],
			[
				"to",
				"to_string"
			],
			[
				"return",
				"Returning"
			],
			[
				"Vec",
				"Vector4"
			],
			[
				"ligh",
				"light_name"
			],
			[
				"def",
				"default_value"
			],
			[
				"Pro",
				"PropertiesContainer"
			],
			[
				"ligt",
				"light_dir"
			],
			[
				"sta",
				"static_cast"
			],
			[
				"getP",
				"getPropertyValue"
			],
			[
				"pSha",
				"pShaderProps"
			],
			[
				"sub",
				"subContainer"
			],
			[
				"pS",
				"pShaderProp"
			],
			[
				"S",
				"Style"
			],
			[
				"pLi",
				"pLightScope"
			],
			[
				"im",
				"imageSamples"
			],
			[
				"key",
				"keyword"
			],
			[
				"val",
				"values"
			],
			[
				"inde",
				"indentStream"
			],
			[
				"in",
				"indent"
			],
			[
				"pr",
				"prop"
			],
			[
				"i",
				"indent"
			],
			[
				"prin",
				"printSummary"
			],
			[
				"V",
				"Vector2"
			],
			[
				"sha",
				"shader"
			],
			[
				"LOG",
				"LLOG_ERR"
			],
			[
				"un",
				"unordered_map\tstandard header (since c++11)"
			],
			[
				"mp",
				"mpSubContainer"
			],
			[
				"prop",
				"property"
			],
			[
				"P",
				"PropertiesContainer"
			],
			[
				"De",
				"DeviceLocalUID"
			],
			[
				"enu",
				"enumerated"
			],
			[
				"dev",
				"deviceMap"
			],
			[
				"d",
				"device_manager"
			],
			[
				"E",
				"EXIT_SUCCESS"
			],
			[
				"c",
				"count"
			],
			[
				"res",
				"resizeSwapChain"
			],
			[
				"mpD",
				"mpDevice"
			],
			[
				"cu",
				"cur_i"
			],
			[
				"sepa",
				"separate_points"
			],
			[
				"siz",
				"size"
			],
			[
				"face",
				"face_count"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"pos",
				"positions"
			],
			[
				"FALCOR_",
				"FALCOR_D3D12"
			],
			[
				"run",
				"runtime"
			],
			[
				"share",
				"shared_ptr"
			],
			[
				"Fa",
				"FALCOR_D3D12"
			],
			[
				"end",
				"endif"
			],
			[
				"FACL",
				"FALCOR_D3D12"
			],
			[
				"tr",
				"transformList"
			],
			[
				"Lig",
				"Light"
			],
			[
				"Shader",
				"ShaderVar"
			],
			[
				"light",
				"lights"
			],
			[
				"segm",
				"segments"
			],
			[
				"m",
				"mTransforms"
			],
			[
				"mat",
				"mat4x4"
			],
			[
				"mTr",
				"mTransforms"
			],
			[
				"rer",
				"return"
			],
			[
				"va",
				"values"
			],
			[
				"vi",
				"viewInvMat"
			],
			[
				"po",
				"posW"
			],
			[
				"frmae",
				"frame_data"
			],
			[
				"Sce",
				"Scene"
			],
			[
				"mpS",
				"mpSceneBuilder"
			],
			[
				"shu",
				"shutter_length"
			],
			[
				"mS",
				"mpSceneBuilder"
			],
			[
				"Fram",
				"FrameData"
			],
			[
				"image",
				"imageWidth"
			],
			[
				"frame",
				"frame_data"
			],
			[
				"get",
				"getPropertyValue"
			],
			[
				"LLOG",
				"LLOG_ERR"
			],
			[
				"ima",
				"imageWidth"
			],
			[
				"fra",
				"frame_data"
			],
			[
				"Rend",
				"RendererIface"
			],
			[
				"di",
				"displayType"
			],
			[
				"dis",
				"display_data"
			],
			[
				"disp",
				"display"
			],
			[
				"D",
				"Display"
			],
			[
				"load",
				"loadDisplay"
			],
			[
				"displ",
				"display_type"
			],
			[
				"str",
				"string"
			],
			[
				"Disp",
				"Display"
			],
			[
				"DIS",
				"DisplayType"
			],
			[
				"DIs",
				"DisplayType"
			],
			[
				"Displ",
				"DisplayType"
			],
			[
				"la",
				"lava_utils_lib"
			],
			[
				"prep",
				"prepareDisplayData"
			],
			[
				"came",
				"cameraZoom"
			],
			[
				"mF",
				"mFrameData"
			],
			[
				"fmr",
				"mFrameData"
			],
			[
				"as",
				"ast"
			],
			[
				"con",
				"const"
			],
			[
				"fil",
				"file_name"
			],
			[
				"L",
				"LLOG_ERR"
			],
			[
				"sc",
				"script"
			],
			[
				"fi",
				"file_name"
			],
			[
				"pus",
				"push"
			],
			[
				"uin",
				"uint2"
			],
			[
				"compi",
				"compileData"
			],
			[
				"com",
				"compileData"
			],
			[
				"rend",
				"renderFrame"
			],
			[
				"Re",
				"Renderer"
			],
			[
				"de",
				"defaultResourceProps"
			],
			[
				"cop",
				"copyResource"
			],
			[
				"exc",
				"execute"
			],
			[
				"att",
				"attachDepthStencilTarget"
			],
			[
				"ece",
				"execute"
			],
			[
				"ec",
				"execute"
			],
			[
				"GB",
				"GBufferRaster"
			],
			[
				"Ren",
				"RenderPass"
			],
			[
				"dep",
				"depthFormat"
			],
			[
				"he",
				"height"
			],
			[
				"up",
				"updateOffscreenFBO"
			],
			[
				"Render",
				"RenderContext"
			],
			[
				"pR",
				"pRenderContext"
			],
			[
				"sa",
				"samples"
			],
			[
				"p",
				"pObj"
			],
			[
				"mGe",
				"mGeometryName"
			],
			[
				"pu",
				"pushBgeo"
			],
			[
				"Dev",
				"DeviceManager"
			],
			[
				"pBo",
				"pBoneWeights"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Falcor/Core/Program/GraphicsProgram.cpp",
			"settings":
			{
				"buffer_size": 2672,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 23 files for \"override\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/LSD.py:\n  448  \n  449                  pccam = cam\n  450:                 if light.wrangleInt(wrangler, 'pc_camera_override', now, [0])[0]:\n  451                      cam_path = light.wrangleString(\n  452                              wrangler, 'pc_camera', now, [\"\"])[0]\n\n/home/max/dev/Falcor/src/houdini/soho/LSDframe.py:\n  744          par = [1.0]\n  745      if not fromlight and not cubemap:\n  746:         if cam.wrangleInt(wrangler, 'override_camerares', now, [0])[0]:\n  747              orgres = res\n  748              orgpar = par\n  ...\n  758                  frac = 'specific'\n  759              if frac == 'specific':\n  760:                 res = cam.wrangleInt(wrangler, 'res_override', now, orgres)\n  761:                 par = cam.wrangleFloat(wrangler, 'aspect_override', now, orgpar)\n  762  \n  763      uvrender = False\n  ...\n 1335              'shop_materialpath', npts,\n 1336              shader_types=['shop_surfacepath', 'shop_displacepath', 'lv_matteshader'],\n 1337:             override='material_override' )\n 1338  \n 1339      cmd_comment('Point instance object %s' % obj.getName() )\n\n/home/max/dev/Falcor/src/houdini/soho/LSDgeo.py:\n  130      if obj is None:\n  131          return 'compact'\n  132:     return obj.getDefaultedString('lv_materialoverride', now, ['compact'])[0]\n  133  \n  134  _invalidChars = re.compile('[^-a-zA-Z0-9.,_:]')\n  135  \n  136  def hashPathOverride(path, over):\n  137:     # Given a SHOP path and an override value, create a hash which is\n  138      # a \"nice\" name for mantra.  Mantra uses this algorithm exactly to\n  139      # perform it's mapping\n  140      over = over.replace(' ', '')        # Remove spaces\n  141      if not over or over == '{}' or over == '{,}':\n  142:         return path                     # An empty override uses the path\n  143      return path + '+' + _invalidChars.sub('', over)\n  144  \n  ...\n  147          return path\n  148  \n  149:     # Evaluate the override into a python dict\n  150      try:\n  151          over_dict = eval(over)\n  ...\n  159  \n  160  \n  161: def processOverrideProperty(soppath, shoppath, overrides, now):\n  162      if shoppath:\n  163:         hashpath = hashPathOverride(shoppath, overrides)\n  164          referenceMaterialOverride(soppath, shoppath, hashpath)\n  165          if theSavedProperties.get(hashpath, None) == None:\n  166              try:\n  167:                 dict = eval(overrides)\n  168              except:\n  169                  dict = None\n  ...\n  274              odict = {}\n  275              if len(shop_id)>0:\n  276:                 for override in shop_id:\n  277:                     odict[override] = theOverrideFormatStr % override\n  278                  if odict:\n  279:                     # Stash override dict for later use by property overrides\n  280                      shops.setdefault(shop_hash, {})\n  281                      shops[shop_hash]['properties'] = odict\n  ...\n  330  \n  331  def saveMaterial(now, fullpath):\n  332:     # If the material has overrides (from the Material SOP), we must\n  333:     # update each material override instance.  There could be as many\n  334      # one per primitive for a given detail.\n  335      if hasMaterialOverrides(fullpath):\n  ...\n  341                      saveProperties(None, detail, gdp, now)\n  342      # It's possible that we don't need to output the base material\n  343:     # (ie. not an override) when only overrides are used; however,\n  344      # we ignore this and always output the base material.  Note that\n  345      # this could affect the computed displacement bound.\n  ...\n  443      opropmap = {}\n  444      for style in ['geo:global', 'geo:prim', 'geo:point']:\n  445:         # First process material overrides.\n  446          attr = gdp.attribute(style, 'shop_materialpath')\n  447          if attr >= 0:\n  448              creator_path = creator_obj.path()   # Only set path if required\n  449:             over = gdp.attribute(style, 'material_override')\n  450              if over >= 0:\n  451:                 # Here, there are material overrides.  Therefore, it's\n  452                  # possible that a unique material might be needed for\n  453:                 # each and every primitive.  If the override attribute\n  454                  # is unique on each primitive, it gets pretty ugly\n  455                  # fast.\n  ...\n  558                  cmd_property('geometry', 'basepath', [status.CreatorPath])\n  559              if status.HasPrimProps:\n  560:                 cmd_property( 'geometry', 'materialoverride',\n  561                      [_getMaterialOverride(obj, now)])\n  562              if status.OverridePropMap:\n  563:                 cmd_property('geometry', 'overridepropmap',\n  564                      [repr(status.OverridePropMap)])\n  565              sys.stdout.flush()\n  ...\n  699                      cmd_start('geo')\n  700                      if status.HasPrimProps:\n  701:                         cmd_property( 'geometry', 'materialoverride',\n  702                              [_getMaterialOverride(obj, eval_time)])\n  703                      if status.OverridePropMap:\n  704:                         cmd_property('geometry', 'overridepropmap',\n  705                              [repr(status.OverridePropMap)])\n  706  \n  ...\n  959          'instancefile',\n  960          'shop_materialpath',\n  961:         'material_override'\n  962      ]\n  963  \n  ...\n 1011  \n 1012  \n 1013: def getPointInstanceSHOPHash( geo, pt, attrib_handle, override_handle ):\n 1014      shop_path_hash = geo.value(attrib_handle, pt)[0]\n 1015      if shop_path_hash is None or \\\n 1016         len(shop_path_hash) == 0 or \\\n 1017:        override_handle is None:\n 1018          return (shop_path_hash,None)\n 1019  \n 1020:     if override_handle < 0:\n 1021          return (shop_path_hash,None)\n 1022:     overrides = eval(geo.value(override_handle, pt)[0])\n 1023:     if overrides is None or len(overrides) == 0:\n 1024          return (shop_path_hash,None)\n 1025  \n 1026:     return (shop_path_hash + '+' + '+'.join( sorted(overrides.keys()) ), overrides)\n 1027  \n 1028: def getPointInstanceSHOPs(pt_shaders, now, geo, attrib_name, npts, shader_types = None, override = None ):\n 1029      if shader_types is None:\n 1030          shader_types = [attrib_name]\n ....\n 1034          return\n 1035  \n 1036:     override_handle = geo.attribute( 'geo:point', override ) if override is not None else -1\n 1037  \n 1038      # Collect unique SHOPs from the point attribute\n 1039      unique_shops = set()\n 1040      for pt in xrange(npts):\n 1041:         (shop_hash,overrides) = getPointInstanceSHOPHash(geo, pt, attrib_handle, override_handle)\n 1042          if shop_hash:\n 1043              unique_shops.add( shop_hash )\n ....\n 1051          odict = {}\n 1052          if len(shop_id)>0:\n 1053:             for override in shop_id:\n 1054:                 odict[override] = theOverrideFormatStr % override\n 1055          over = soho.PropertyOverride(odict)\n 1056          for shader_type in shader_types:\n\n/home/max/dev/Falcor/src/houdini/soho/LSDmantra.py:\n  140      Image(\"image\", \"opacitylimit\", \"float\", \"lv_opacitylimit\")\n  141      Image(\"image\", \"opacitythresh\", \"float\", \"lv_opacitythresh\")\n  142:     Image(\"image\", \"overridecheckpointname\", \"bool\", \"lv_overridecheckpointname\")\n  143      Image(\"image\", \"randomseed\", \"int\", \"lv_randomseed\")\n  144      Image(\"image\", \"readcheckpoint\", \"bool\", \"lv_readcheckpoint\")\n  ...\n  212      Object(\"osd_quality\", \"float\", \"lv_osd_quality\")\n  213      Object(\"osd_vtxinterp\", \"int\", \"lv_osd_vtxinterp\")\n  214:     Object(\"overridedetail\", \"bool\", \"lv_overridedetail\")\n  215      Object(\"pack_mergefragments\", \"bool\", \"lv_pack_mergefragments\")\n  216      Object(\"pack_refineoptions\", \"string\", \"lv_pack_refineoptions\")\n\n/home/max/dev/Falcor/src/houdini/soho/LSDmisc.py:\n  173          hipvar = \"\"\n  174      hipvar = rop.getDefaultedString('lv_hippath', now, [hipvar])[0]\n  175:     # Setting the HIP variable in a conditional so users can override\n  176      # the HIP variable in the .ifd file.\n  177      cmd_setenv('HIP', '$HIP_OVERRIDE')\n  ...\n  234          # Normally, we want to rely on the lv_inlinestorage parameter (which\n  235          # defaults to False).  For convenience we can set this variable to\n  236:         # override the setting.  Note that this may impact performance since\n  237          # Houdini and mantra are able to multi-thread saving/loading\n  238          # geometry.  This should be used for debugging only.\n\n/home/max/dev/Falcor/src/houdini/soho/LSDsettings.py:\n  366      return (bundles, materials)\n  367  \n  368: def getMaterialsFromOverrideSet(override_set, materials, unique_materials):\n  369      # Look for named material SHOPs.\n  370      try:\n  371:         material = override_set[\"material\"][\"name\"]\n  372          # Material may be specified in a short format (just a string), but it\n  373          # may be in UT_Option format, ie, a dict that has 'type' and 'value'.\n  ...\n  381      # Look for CVEX script SHOPs.\n  382      try:\n  383:         for category in override_set.values():\n  384              for value in category.values():\n  385                  try:\n  ...\n  408          styles = stylesheet.get(\"styles\", [])\n  409          for entry in styles:\n  410:             if entry.has_key(\"overrides\"):\n  411:                 getMaterialsFromOverrideSet(entry[\"overrides\"], materials, unique_materials)\n  412              if entry.has_key(\"target\"):\n  413                  try:\n  ...\n  419                      continue\n  420  \n  421:         # Output SHOPs referenced in shared override sets.\n  422:         override_sets = stylesheet.get(\"overrideDefinitions\", {})\n  423:         for entry in override_sets.values():\n  424              getMaterialsFromOverrideSet(entry, materials, unique_materials)\n  425  \n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderCommand:\n    1: #include \"$HH/soho/overrides/RenderCommand\"\n    2  \n    3: // Viewport overrides for Lava\n    4  {\n    5:     override.inherit\tCommonCommand\n    6:     override.name\tLava\n    7  \n    8      // Force the render to go to the \"ip\" device\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderCOP:\n    1: #include \"$HH/soho/overrides/RenderCOP\"\n    2  \n    3: // Viewport overrides for Lava\n    4  {\n    5:     override.inherit\tCommonCommand\n    6:     override.name\tLava\n    7  \n    8      // Force the render to go to the \"ip\" device\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RendererTable:\n    1: #include \"$HH/soho/overrides/RendererTable\"\n    2  \n    3  // Lava\n    4  {\n    5:     override.name   Lava\n    6      shopstyle       [ \"Lava\" ]\n    7      soho_script     [ \"LSD.py\" ]\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderState:\n    1: #include \"$HH/soho/overrides/RenderState\"\n    2  \n    3: // Viewport overrides for Lava\n    4  {\n    5:     override.inherit\tCommonView\n    6:     override.name\tLava\n    7  \n    8      // Force the render to go to the \"ip\" device\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderViewer:\n    1: #include \"$HH/soho/overrides/RenderViewer\"\n    2  \n    3: // Viewport overrides for Lava\n    4  {\n    5:     override.inherit\tCommonView\n    6:     override.name\tLava\n    7  \n    8      // Force the render to go to the \"ip\" device\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/ViewportRender:\n    1: asdfasdf#include \"$HH/soho/overrides/ViewportRender\"\n    2  \n    3: // Viewport overrides for Lava\n    4  {\n    5:     override.inherit\tCommonView\n    6:     override.name\tLava\n    7  \n    8      // Force the render to go to the \"ip\" device\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/arnold.ds:\n  938      // Image parameters\n  939      collection {\n  940:         name    override_resolution\n  941          label   \"Override Res\"\n  942          parmtag { spare_category    \"Output\" }\n  943          parm    {\n  944:             name    override_camerares\n  945              label   \"Override Camera Resolution\"\n  946              parmtag { spare_category    \"Output\" }\n  ...\n  964              \"specific\"  \"User Specified Resolution\"\n  965              }\n  966:             hidewhen \"{ override_camerares == 0 }\"\n  967          }\n  968          parm {\n  969:             name    res_override\n  970              label   Resolution\n  971              parmtag { spare_category    \"Output\" }\n  ...\n  973              type    intvector2\n  974              default { 640 480 }\n  975:             hidewhen \"{ override_camerares == 0 } { res_fraction != specific }\"\n  976              joinnext\n  977          }\n  978          parm {\n  979:             name    res_overrideMenu\n  980              label   \"Choose Resolution\"\n  981              parmtag { spare_category    \"Output\" }\n  982              type    button\n  983              nolabel\n  984:             callback    \"opparm . res_override ( `arg(\\\"$script_value\\\", 0)` `arg(\\\"$script_value\\\", 1)` aspect_override ( `arg(\\\"$script_value\\\", 2)` )\"\n  985:             hidewhen \"{ override_camerares == 0 } { res_fraction != specific }\"\n  986              menumini    {\n  987              RESOLUTION_MENU\n  ...\n  989          }\n  990          parm {\n  991:             name    aspect_override\n  992              label   \"Pixel Aspect Ratio\"\n  993              parmtag { spare_category \"Output\" }\n  ...\n  996              default { 1 }\n  997              range   { 0.05 2 }\n  998:             hidewhen \"{ override_camerares == 0 }\"\n  999          }\n 1000          parm {\n ....\n 1002              label   \"Separator\"\n 1003              type    separator\n 1004:             hidewhen \"{ override_camerares == 0 }\"\n 1005          }\n 1006      }\n ....\n 1074          type    toggle\n 1075          default { 0 }\n 1076:         help    \"Parameters have been overridden by one of the configuration files in $HH/soho/overrides.\"\n 1077          range   { 0 1 }\n 1078          invisible\n ....\n 1183      parm {\n 1184          SOHO_TOGGLE(ar_trace_opaque_first, \"Trace Opaque First\", \"Sampling\", 0)\n 1185:         help \"Will override the diffuse samples value (ar_GI_diffuse_samples) for the SSS irradiance evaluations\"\n 1186      }\n 1187      parm {\n ....\n 2391      }\n 2392      \n 2393: #include \"override_parms.ds\"\n 2394  #include \"object_parms.ds\"\n 2395  #include \"instance_parms.ds\"\n ....\n 2410                  ar_picture \\\n 2411                  vm_picture \\\n 2412:                 override_camerares \\\n 2413                  res_fraction \\\n 2414:                 override_resolution \\\n 2415                  overscan_resolution \\\n 2416                  ar_picture_format \\\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/camera_parms.ds:\n  132  \n  133  \tparm {\n  134: \t    name\t\"ar_mb_xform_keys_override\"\n  135  \t    label\t\"Override Transform Keys\"\n  136  \t    type\ttoggle\n  ...\n  147  \t    default\t{ \"2\" }\n  148  \t    help\t\"Number of motion keys for matrix transformation. Transformation motion blur is calculated based on a linear interpolation of an object transform matrix, between successive motion keys. Increasing this value will add extra steps, which can improve the blurred result, especially for rotating objects. The default is 2, which results in straight lines of blur between shutter start and shutter end.\"\n  149: \t    disablewhen\t\"{ ar_mb_xform_keys_override == 0 }\"\n  150  \t    range\t{ 1! 20 }\n  151  \t    export\tnone\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/hairgen_parms.ds:\n  214      }\n  215  \tparm {\n  216: \t    name\t\"ar_mb_xform_keys_override\"\n  217  \t    label\t\"Transform Keys Override\"\n  218  \t    type\ttoggle\n  ...\n  231  \t    default\t{ \"2\" }\n  232  \t    help\t\"Number of motion keys for matrix transformation. Transformation motion blur is calculated based on a linear interpolation of an object transform matrix, between successive motion keys. Increasing this value will add extra steps, which can improve the blurred result, especially for rotating objects. The default is 2, which results in straight lines of blur between shutter start and shutter end.\"\n  233: \t    disablewhen\t\"{ ar_mb_xform_keys_override == 0 }\"\n  234  \t    range\t{ 1! 20 }\n  235  \t    export\tnone\n  ...\n  237  \t}\n  238  \tparm {\n  239: \t    name\t\"ar_mb_dform_keys_override\"\n  240  \t    label\t\"Deform Keys Override\"\n  241  \t    type\ttoggle\n  ...\n  254  \t    default\t{ \"2\" }\n  255  \t    help\t\"Number of motion keys for object points. Just like with transformation motion keys, increasing this value allows curved motion paths to be rendered more accurately, at the expense of using more memory.\"\n  256: \t    disablewhen\t\"{ ar_mb_dform_keys_override == 0 } { ar_mb_velocity_enable == 1 ar_mb_acceleration_enable != 1 }\"\n  257  \t    range\t{ 1! 20 }\n  258  \t    export\tnone\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/instance_parms.ds:\n   68      }\n   69      parm {\n   70:         name    \"ar_mb_xform_keys_override\"\n   71          label   \"Transform Keys Override\"\n   72          type    toggle\n   ..\n   85          default { \"2\" }\n   86          help    \"Number of motion keys for matrix transformation. Transformation motion blur is calculated based on a linear interpolation of an object transform matrix, between successive motion keys. Increasing this value will add extra steps, which can improve the blurred result, especially for rotating objects. The default is 2, which results in straight lines of blur between shutter start and shutter end.\"\n   87:         disablewhen \"{ ar_mb_xform_keys_override == 0 }\"\n   88          range   { 1! 20 }\n   89          export  none\n   ..\n   97  \n   98      parm {\n   99:         name    \"ar_visibility_override\"\n  100          label   \"Visibility Override\"\n  101          type    toggle\n  ...\n  113          default { \"1\" }\n  114          help    \"Toggle object visibility for camera rays (i.e. primary or view rays).\"\n  115:         disablewhen \"{ ar_visibility_override == 0 }\"\n  116          range   { 0 1 }\n  117          export  none\n  ...\n  124          default { \"1\" }\n  125          help    \"Toggle object visibility for shadow rays fired in the direct lighting calculations.\"\n  126:         disablewhen \"{ ar_visibility_override == 0 }\"\n  127          range   { 0 1 }\n  128          export  none\n  ...\n  135          default { \"1\" }\n  136          help    \"Toggle object visibility for indirect diffuse transmission rays.\"\n  137:         disablewhen \"{ ar_visibility_override == 0 }\"\n  138          range   { 0 1 }\n  139          export  none\n  ...\n  146          default { \"1\" }\n  147          help    \"Toggle object visibility for indirect specular transmission rays.\"\n  148:         disablewhen \"{ ar_visibility_override == 0 }\"\n  149          range   { 0 1 }\n  150          export  none\n  ...\n  157          default { \"1\" }\n  158          help    \"Toggle object visibility for indirect diffuse reflection rays.\"\n  159:         disablewhen \"{ ar_visibility_override == 0 }\"\n  160          range   { 0 1 }\n  161          export  none\n  ...\n  168          default { \"1\" }\n  169          help    \"Toggle object visibility for indirect specular reflection rays.\"\n  170:         disablewhen \"{ ar_visibility_override == 0 }\"\n  171          range   { 0 1 }\n  172          export  none\n  ...\n  179          default { \"1\" }\n  180          help    \"Toggle object visibility for indirect volume scattering rays.\"\n  181:         disablewhen \"{ ar_visibility_override == 0 }\"\n  182          range   { 0 1 }\n  183          export  none\n  ...\n  185      }\n  186      parm {\n  187:         name    \"ar_receive_shadows_override\"\n  188          label   \"Receive Shadows Override\"\n  189          type    toggle\n  ...\n  202          default { \"1\" }\n  203          help    \"Enable/disable received shadows over the object.\"\n  204:         disablewhen \"{ ar_receive_shadows_override == 0 }\"\n  205          range   { 0 1 }\n  206          export  none\n  ...\n  208      }\n  209      parm {\n  210:         name    \"ar_self_shadows_override\"\n  211          label   \"Self Shadows Override\"\n  212          type    toggle\n  ...\n  225          default { \"1\" }\n  226          help    \"Enable/disable self-shadowing over the object.\"\n  227:         disablewhen \"{ ar_self_shadows_override == 0 }\"\n  228          range   { 0 1 }\n  229          export  none\n  ...\n  231      }\n  232      parm {\n  233:         name    \"ar_opaque_override\"\n  234          label   \"Opaque Override\"\n  235          type    toggle\n  ...\n  248          default { \"1\" }\n  249          help    \"By default, Arnold will assume that objects are opaque, which lets the renderer take certain shortcuts and optimizations for maximum ray tracing speed. When this option is unchecked, the object is assumed as \\\"possibly transparent\\\", and Arnold will perform extra computations to support transparency and transparent shadows, according to the shader's opacity settings.\"\n  250:         disablewhen \"{ ar_opaque_override == 0 }\"\n  251          range   { 0 1 }\n  252          export  none\n  ...\n  254      }\n  255      parm {\n  256:         name    \"ar_matte_override\"\n  257          label   \"Matte Override\"\n  258          type    toggle\n  ...\n  268          type    toggle\n  269          default { \"0\" }\n  270:         disablewhen \"{ ar_matte_override == 0 }\"\n  271          help    \"Output black and zero alpha for camera rays to create a holdout.\"\n  272          range   { 0 1 }\n  ...\n  331      }\n  332      parm {\n  333:         name    \"ar_trace_sets_override\"\n  334          label   \"Trace Sets Override\"\n  335          type    toggle\n  ...\n  345          type    string\n  346          default { \"\" }\n  347:         disablewhen \"{ ar_trace_sets_override == 0 }\"\n  348          menutoggle  {\n  349          }\n  ...\n  358  \n  359      parm {\n  360:         name    \"ar_invert_normals_override\"\n  361          label   \"Invert Normals Override\"\n  362          type    toggle\n  ...\n  375          default { \"0\" }\n  376          help    \"Invert normals\"\n  377:         disablewhen \"{ ar_invert_normals_override == 0 }\"\n  378          range   { 0 1 }\n  379          export  none\n  ...\n  381      }\n  382      parm {\n  383:         name    \"ar_sidedness_override\"\n  384          label   \"Sidedeness Override\"\n  385          type    toggle\n  ...\n  398          default { \"1\" }\n  399          help    \"Toggle object double-sidedness for camera rays (i.e. primary or view rays).\"\n  400:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  401          range   { 0 1 }\n  402          export  none\n  ...\n  409          default { \"1\" }\n  410          help    \"Toggle object double-sidedness for shadow rays fired in the direct lighting calculations.\"\n  411:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  412          range   { 0 1 }\n  413          export  none\n  ...\n  420          default { \"1\" }\n  421          help    \"Toggle object double-sidedness for indirect diffuse transmission rays.\"\n  422:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  423          range   { 0 1 }\n  424          export  none\n  ...\n  431          default { \"1\" }\n  432          help    \"Toggle object double-sidedness for indirect specular transmission rays.\"\n  433:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  434          range   { 0 1 }\n  435          export  none\n  ...\n  442          default { \"1\" }\n  443          help    \"Toggle object double-sidedness for indirect diffuse reflection rays.\"\n  444:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  445          range   { 0 1 }\n  446          export  none\n  ...\n  453          default { \"1\" }\n  454          help    \"Toggle object double-sidedness for indirect specular reflection rays.\"\n  455:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  456          range   { 0 1 }\n  457          export  none\n  ...\n  464          default { \"1\" }\n  465          help    \"Toggle object double-sidedness for indirect volume scattering rays.\"\n  466:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  467          range   { 0 1 }\n  468          export  none\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/object_parms.ds:\n  919      }\n  920  \tparm {\n  921: \t    name\t\"ar_mb_xform_keys_override\"\n  922  \t    label\t\"Transform Keys Override\"\n  923  \t    type\ttoggle\n  ...\n  936  \t    default\t{ \"2\" }\n  937  \t    help\t\"Number of motion keys for matrix transformation. Transformation motion blur is calculated based on a linear interpolation of an object transform matrix, between successive motion keys. Increasing this value will add extra steps, which can improve the blurred result, especially for rotating objects. The default is 2, which results in straight lines of blur between shutter start and shutter end.\"\n  938: \t    disablewhen\t\"{ ar_mb_xform_keys_override == 0 }\"\n  939  \t    range\t{ 1! 20 }\n  940  \t    export\tnone\n  ...\n  942  \t}\n  943  \tparm {\n  944: \t    name\t\"ar_mb_dform_keys_override\"\n  945  \t    label\t\"Deform Keys Override\"\n  946  \t    type\ttoggle\n  ...\n  959  \t    default\t{ \"2\" }\n  960  \t    help\t\"Number of motion keys for object points. Just like with transformation motion keys, increasing this value allows curved motion paths to be rendered more accurately, at the expense of using more memory.\"\n  961: \t    disablewhen\t\"{ ar_mb_dform_keys_override == 0 } { ar_mb_velocity_enable == 1 ar_mb_acceleration_enable != 1 }\"\n  962  \t    range\t{ 1! 20 }\n  963  \t    export\tnone\n  ...\n 1030  \t}\n 1031  \n 1032: // These parameters are commented because it is not possible to override the\n 1033  // geometry shutter per object as of Arnold 4.1.0.0. See tickets #34 and #210.\n 1034  // \n\n/home/max/dev/Falcor/src/houdini/soho/parameters/override_parms.ds:\n    2  \n    3  collection {\n    4:     name \"ar_override_parms\"\n    5      label \"Arnold\"\n    6      parmtag { spare_category \"Arnold\" }\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/procedural_parms.ds:\n   47      }\n   48      parm {\n   49:         name    \"ar_mb_xform_keys_override\"\n   50          label   \"Transform Keys Override\"\n   51          type    toggle\n   ..\n   64          default { \"2\" }\n   65          help    \"Number of motion keys for matrix transformation. Transformation motion blur is calculated based on a linear interpolation of an object transform matrix, between successive motion keys. Increasing this value will add extra steps, which can improve the blurred result, especially for rotating objects. The default is 2, which results in straight lines of blur between shutter start and shutter end.\"\n   66:         disablewhen \"{ ar_mb_xform_keys_override == 0 }\"\n   67          range   { 1! 20 }\n   68          export  none\n   ..\n   76  \n   77      parm {\n   78:         name    \"ar_visibility_override\"\n   79          label   \"Visibility Override\"\n   80          type    toggle\n   ..\n   92          default { \"1\" }\n   93          help    \"Toggle object visibility for camera rays (i.e. primary or view rays).\"\n   94:         disablewhen \"{ ar_visibility_override == 0 }\"\n   95          range   { 0 1 }\n   96          export  none\n   ..\n  103          default { \"1\" }\n  104          help    \"Toggle object visibility for shadow rays fired in the direct lighting calculations.\"\n  105:         disablewhen \"{ ar_visibility_override == 0 }\"\n  106          range   { 0 1 }\n  107          export  none\n  ...\n  114          default { \"1\" }\n  115          help    \"Toggle object visibility for indirect diffuse transmission rays.\"\n  116:         disablewhen \"{ ar_visibility_override == 0 }\"\n  117          range   { 0 1 }\n  118          export  none\n  ...\n  125          default { \"1\" }\n  126          help    \"Toggle object visibility for indirect specular transmission rays.\"\n  127:         disablewhen \"{ ar_visibility_override == 0 }\"\n  128          range   { 0 1 }\n  129          export  none\n  ...\n  136          default { \"1\" }\n  137          help    \"Toggle object visibility for indirect diffuse reflection rays.\"\n  138:         disablewhen \"{ ar_visibility_override == 0 }\"\n  139          range   { 0 1 }\n  140          export  none\n  ...\n  147          default { \"1\" }\n  148          help    \"Toggle object visibility for indirect specular reflection rays.\"\n  149:         disablewhen \"{ ar_visibility_override == 0 }\"\n  150          range   { 0 1 }\n  151          export  none\n  ...\n  158          default { \"1\" }\n  159          help    \"Toggle object visibility for indirect volume scattering rays.\"\n  160:         disablewhen \"{ ar_visibility_override == 0 }\"\n  161          range   { 0 1 }\n  162          export  none\n  ...\n  164      }\n  165      parm {\n  166:         name    \"ar_receive_shadows_override\"\n  167          label   \"Receive Shadows Override\"\n  168          type    toggle\n  ...\n  181          default { \"1\" }\n  182          help    \"Enable/disable received shadows over the object.\"\n  183:         disablewhen \"{ ar_receive_shadows_override == 0 }\"\n  184          range   { 0 1 }\n  185          export  none\n  ...\n  187      }\n  188      parm {\n  189:         name    \"ar_self_shadows_override\"\n  190          label   \"Self Shadows Override\"\n  191          type    toggle\n  ...\n  204          default { \"1\" }\n  205          help    \"Enable/disable self-shadowing over the object.\"\n  206:         disablewhen \"{ ar_self_shadows_override == 0 }\"\n  207          range   { 0 1 }\n  208          export  none\n  ...\n  210      }\n  211      parm {\n  212:         name    \"ar_opaque_override\"\n  213          label   \"Opaque Override\"\n  214          type    toggle\n  ...\n  227          default { \"1\" }\n  228          help    \"By default, Arnold will assume that objects are opaque, which lets the renderer take certain shortcuts and optimizations for maximum ray tracing speed. When this option is unchecked, the object is assumed as \\\"possibly transparent\\\", and Arnold will perform extra computations to support transparency and transparent shadows, according to the shader's opacity settings.\"\n  229:         disablewhen \"{ ar_opaque_override == 0 }\"\n  230          range   { 0 1 }\n  231          export  none\n  ...\n  233      }\n  234      parm {\n  235:         name    \"ar_matte_override\"\n  236          label   \"Matte Override\"\n  237          type    toggle\n  ...\n  247          type    toggle\n  248          default { \"0\" }\n  249:         disablewhen \"{ ar_matte_override == 0 }\"\n  250          help    \"Output black and zero alpha for camera rays to create a holdout.\"\n  251          range   { 0 1 }\n  ...\n  310      }\n  311      parm {\n  312:         name    \"ar_trace_sets_override\"\n  313          label   \"Trace Sets Override\"\n  314          type    toggle\n  ...\n  324          type    string\n  325          default { \"\" }\n  326:         disablewhen \"{ ar_trace_sets_override == 0 }\"\n  327          menutoggle  {\n  328          }\n  ...\n  363  \n  364      parm {\n  365:         name    \"ar_invert_normals_override\"\n  366          label   \"Invert Normals Override\"\n  367          type    toggle\n  ...\n  380          default { \"0\" }\n  381          help    \"Invert normals\"\n  382:         disablewhen \"{ ar_invert_normals_override == 0 }\"\n  383          range   { 0 1 }\n  384          export  none\n  ...\n  386      }\n  387      parm {\n  388:         name    \"ar_sidedness_override\"\n  389          label   \"Sidedeness Override\"\n  390          type    toggle\n  ...\n  403          default { \"1\" }\n  404          help    \"Toggle object double-sidedness for camera rays (i.e. primary or view rays).\"\n  405:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  406          range   { 0 1 }\n  407          export  none\n  ...\n  414          default { \"1\" }\n  415          help    \"Toggle object double-sidedness for shadow rays fired in the direct lighting calculations.\"\n  416:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  417          range   { 0 1 }\n  418          export  none\n  ...\n  425          default { \"1\" }\n  426          help    \"Toggle object double-sidedness for indirect diffuse transmission rays.\"\n  427:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  428          range   { 0 1 }\n  429          export  none\n  ...\n  436          default { \"1\" }\n  437          help    \"Toggle object double-sidedness for indirect specular transmission rays.\"\n  438:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  439          range   { 0 1 }\n  440          export  none\n  ...\n  447          default { \"1\" }\n  448          help    \"Toggle object double-sidedness for indirect diffuse reflection rays.\"\n  449:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  450          range   { 0 1 }\n  451          export  none\n  ...\n  458          default { \"1\" }\n  459          help    \"Toggle object double-sidedness for indirect specular reflection rays.\"\n  460:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  461          range   { 0 1 }\n  462          export  none\n  ...\n  469          default { \"1\" }\n  470          help    \"Toggle object double-sidedness for indirect volume scattering rays.\"\n  471:         disablewhen \"{ ar_sidedness_override == 0 }\"\n  472          range   { 0 1 }\n  473          export  none\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/vrcamera_parms.ds:\n   31  \n   32  \tparm {\n   33: \t    name\t\"ar_mb_xform_keys_override\"\n   34  \t    label\t\"Override Transform Keys\"\n   35  \t    type\ttoggle\n   ..\n   46  \t    default\t{ \"2\" }\n   47  \t    help\t\"Number of motion keys for matrix transformation. Transformation motion blur is calculated based on a linear interpolation of an object transform matrix, between successive motion keys. Increasing this value will add extra steps, which can improve the blurred result, especially for rotating objects. The default is 2, which results in straight lines of blur between shutter start and shutter end.\"\n   48: \t    disablewhen\t\"{ ar_mb_xform_keys_override == 0 }\"\n   49  \t    range\t{ 1! 20 }\n   50  \t    export\tnone\n\n177 matches across 20 files\n\n\nSearching 22 files for \"pre_ifdGen\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/LSD.py:\n   28  from LSDapi import *\n   29  \n   30: LSDhooks.call(\"pre_ifdGen\")\n   31  \n   32  clockstart = time.time()\n\n1 match in 1 file\n\n\nSearching 12290 files for \"pre_ifdGen\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/LSD.py:\n   28  from LSDapi import *\n   29  \n   30: LSDhooks.call(\"pre_ifdGen\")\n   31  \n   32  clockstart = time.time()\n\n/opt/hfs17.5.460/houdini/help/images.zip:\n    File too large, skipping\n\n/opt/hfs17.5.460/houdini/soho/python2.7/IFD.py:\n   28  from IFDapi import *\n   29  \n   30: IFDhooks.call(\"pre_ifdGen\")\n   31  \n   32  clockstart = time.time()\n\n2 matches across 2 files\n\n\nSearching 22 files for \"lv_uvunwrapres\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/LSDframe.py:\n  194      'lv_uvtype'         :SohoParm('lv_uvtype', 'string', ['udim'], False),\n  195      'lv_uvhidecage'     : SohoParm('lv_uvhidecage', 'bool', [True], False),\n  196:     'lv_uvunwrapres'    :SohoParm('lv_uvunwrapres', 'int', [1024, 1024], False),\n  197      'lv_isuvrendering'  :SohoParm('lv_isuvrendering', 'bool', [False], False),\n  198      'lv_uv_unwrap_method' :SohoParm('lv_uv_unwrap_method', 'int', [0], False),\n  ...\n  769          uvnum = uvlist['lv_uvobjects'].Value[0]\n  770          mkpath = uvlist['lv_uvmkpath'].Value[0]\n  771:         res = uvlist['lv_uvunwrapres'].Value\n  772          hidecage = uvlist['lv_uvhidecage'].Value[0]\n  773  \n\n/home/max/dev/Falcor/src/houdini/soho/LSDmantra.py:\n  143      Image(\"image\", \"randomseed\", \"int\", \"lv_randomseed\")\n  144      Image(\"image\", \"readcheckpoint\", \"bool\", \"lv_readcheckpoint\")\n  145:     Image(\"image\", \"resolution\", \"int\", \"lv_uvunwrapres\")\n  146      Image(\"image\", \"samplelock\", \"bool\", \"lv_samplelock\")\n  147      Image(\"image\", \"samples\", \"int\", \"lv_samples\", skipdefault=False)\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/LSDlava.ds:\n  763      }\n  764      parm {\n  765:         SOHO_PARM(lv_uvunwrapres, \"UV Unwrap Resolution\",\n  766  \t\tRENDERING_RENDER_LABEL, int, 2, 1024 1024)\n  767          LAVA_PROP(\"image\", \"resolution\")\n\n5 matches across 3 files\n\n\nSearching 115 files for \"vm_uvunwrapres\" (case sensitive)\n\n/opt/houdini17.5/houdini/soho/parameters/IFDmantra.ds:\n  763      }\n  764      parm {\n  765:         SOHO_PARM(vm_uvunwrapres, \"UV Unwrap Resolution\",\n  766  \t\tRENDERING_RENDER_LABEL, int, 2, 1024 1024)\n  767          MANTRA_PROP(\"image\", \"resolution\")\n\n/opt/houdini17.5/houdini/soho/python2.7/IFDframe.py:\n  194      'vm_uvtype'         :SohoParm('vm_uvtype', 'string', ['udim'], False),\n  195      'vm_uvhidecage'     : SohoParm('vm_uvhidecage', 'bool', [True], False),\n  196:     'vm_uvunwrapres'    :SohoParm('vm_uvunwrapres', 'int', [1024, 1024], False),\n  197      'vm_isuvrendering'  :SohoParm('vm_isuvrendering', 'bool', [False], False),\n  198      'vm_uv_unwrap_method' :SohoParm('vm_uv_unwrap_method', 'int', [0], False),\n  ...\n  769          uvnum = uvlist['vm_uvobjects'].Value[0]\n  770          mkpath = uvlist['vm_uvmkpath'].Value[0]\n  771:         res = uvlist['vm_uvunwrapres'].Value\n  772          hidecage = uvlist['vm_uvhidecage'].Value[0]\n  773  \n\n/opt/houdini17.5/houdini/soho/python2.7/IFDmantra.py:\n  143      Image(\"image\", \"randomseed\", \"int\", \"vm_randomseed\")\n  144      Image(\"image\", \"readcheckpoint\", \"bool\", \"vm_readcheckpoint\")\n  145:     Image(\"image\", \"resolution\", \"int\", \"vm_uvunwrapres\")\n  146      Image(\"image\", \"samplelock\", \"bool\", \"vm_samplelock\")\n  147      Image(\"image\", \"samples\", \"int\", \"vm_samples\", skipdefault=False)\n\n5 matches across 3 files\n\n\nSearching 22 files for \"-C\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/LSDlava.ds:\n  324  #endif\n  325      parm {\n  326:     \tSOHO_TOGGLE(lv_dcmcompositing, \"DCM Pre-Composite Samples\", DEEP_OUTPUT_LABEL, 0)\n  327  \tdisablewhen\t\"{ lv_deepresolver != camera }\"\n  328  \tLAVA_PROP(\"dcm\", \"compositing\")\n  ...\n  471  #endif\n  472      parm {\n  473:     \tSOHO_TOGGLE(lv_dsmcompositing, \"DSM Pre-Composite Samples\",\n  474  \t\tDEEP_OUTPUT_LABEL, 1)\n  475  \tdisablewhen\t\"{ lv_deepresolver != shadow }\"\n  ...\n 2850  \t    SOHO_STRING(lv_subdstyle, \"Subdivision Style\", \"Geometry\", \"lava_catclark\")\n 2851  \t    menu {\n 2852: \t\t\"lava_catclark\"\t\"Lava Catmull-Clark\"\n 2853: \t\t\"osd_catclark\"\t\"OpenSubdiv Catmull-Clark\"\n 2854  \t    }\n 2855  \t    hidewhen \"{ lv_rendersubd == 0 }\"\n\n4 matches in 1 file\n\n\nSearching 93 files for \"viewmantra\" (case sensitive)\n\n/opt/hfs17.5.460/houdini/soho/overrides/RendererTable:\n   13      shopstyle\t\t[ \"VMantra\" ]\n   14      soho_script\t\t[ \"IFD.py\" ]\n   15:     soho_pipecmd\t[ $viewmantra ]\n   16  }\n   17  \n\n1 match in 1 file\n\n\nSearching 12268 files for \"viewmantra\" (case sensitive)\n\n/opt/hfs17.5.460/houdini/config/Help/index/MAIN_3bo7zc3fvp41lxmp.seg:\n    <binary>\n\n/opt/hfs17.5.460/houdini/help/images.zip:\n    File too large, skipping\n\n/opt/hfs17.5.460/houdini/soho/overrides/RendererTable:\n   13      shopstyle\t\t[ \"VMantra\" ]\n   14      soho_script\t\t[ \"IFD.py\" ]\n   15:     soho_pipecmd\t[ $viewmantra ]\n   16  }\n   17  \n\n3 matches across 2 files\n\n\nSearching 17 files for \"lsd\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/LSD.py:\n   28  from LSDapi import *\n   29  \n   30: LSDhooks.call(\"pre_lsdGen\")\n   31  \n   32  clockstart = time.time()\n   ..\n  559                  LSDhooks.call('post_mainimage', parmlist, objparms, now, sub_camera)\n  560  \n  561: LSDhooks.call(\"post_lsdGen\")\n  562  LSDsettings.clearLists()\n  563  \n\n2 matches in 1 file\n\n\nSearching 17 files for \"lv_picture\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/LSDframe.py:\n   46          self.Object = obj\n   47          self.Face = -1\n   48:         self.BasePath = obj.getDefaultedString('lv_picture', now, [''])[0]\n   49  \n   50      def setFace(self, dir):\n   ..\n  179  \n  180      # Some parameters for backward compatibility with H9.0\n  181:     'h9channel' : SohoParm('lv_picture_plane%d', 'string', [''], False,\n  182                                  key='h9channel'),\n  183  }\n  ...\n  245          # The hook has output the light display for us\n  246          return True\n  247:     filename = light.wrangleString(wrangler, 'lv_picture', now, [''])[0]\n  248      if not filename:\n  249          return False\n  ...\n  390      if LSDhooks.call('pre_cameraDisplay', wrangler, cam, now):\n  391          return True\n  392:     filename = cam.wrangleString(wrangler, 'lv_picture', now, ['ip'])[0]\n  393      plist       = cam.wrangle(wrangler, displayParms, now)\n  394      device      = plist['lv_device'].Value[0]\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderCommand:\n    7  \n    8      // Force the render to go to the \"ip\" device\n    9:     lv_picture\t\t\t[ $over_file ]\n   10      lv_device\t\t\t[ $over_device ]\n   11  }\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderCOP:\n    7  \n    8      // Force the render to go to the \"ip\" device\n    9:     lv_picture\t\t[ $imagefile ]\n   10      lv_device\t\t[ Houdini ]\n   11  }\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderState:\n    7  \n    8      // Force the render to go to the \"ip\" device\n    9:     lv_picture\t\t\t[ \"ip\" ]\n   10      lv_device\t\t\t[ \"\" ]\n   11      lv_image_mplay_socketport\t[ \"$socket\" ]\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderViewer:\n    7  \n    8      // Force the render to go to the \"ip\" device\n    9:     lv_picture\t\t\t[ \"ip\" ]\n   10      lv_device\t\t\t[ \"\" ]\n   11      lv_image_mplay_socketport\t[ \"$socket\" ]\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/ViewportCameraRender:\n    7  \n    8      // Force the render to go to the \"ip\" device\n    9:     lv_picture\t\t[ \"ip\" ]\n   10      lv_image_mplay_framemode [ \"append\" ]\n   11      lv_image_mplay_rendermode [ \"current\" ]\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/ViewportRender:\n    7  \n    8      // Force the render to go to the \"ip\" device\n    9:     lv_picture\t\t[ \"ip\" ]\n   10      lv_image_mplay_framemode  [ \"append\" ]\n   11      lv_image_mplay_rendermode [ \"current\" ]\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/LSDlava.ds:\n  165      //\n  166      collection {\n  167: \tname\tlv_picture_group\n  168  \tlabel\t\"Output Picture\"\n  169  \tparmtag\t{ spare_category\tOUTPUT_LABEL }\n  ...\n  172  \t{\n  173  \t    // NOTE:  This parameter is copied/specialized in IFDlava.ds\n  174: \t    SOHO_IMAGE(lv_picture, \"Output Picture\", OUTPUT_LABEL, \"ip\")\n  175  \t    parmtag\t{ filechooser_mode\t\"write\" }\n  176  \t    menureplace {\n  ...\n  191  \tmenu {\n  192  \t    \"no\"\t\t\"Overwrite existing frames\"\n  193: \t    \"exist:lv_picture\"\t\"Skip files that exist\"\n  194: \t    \"valid:lv_picture\"\t\"Skip frames that are valid images\"\n  195  \t}\n  196      }\n  ...\n  905  \tparm {\n  906  \t    SOHO_TOGGLE(\"lv_usefile_plane#\", \"Different File\", EXTRA_IMAGE_LABEL, 0)\n  907: \t    hidewhen \"{ \\\"lv_disable_plane#\\\" == 1 } { \\\"lv_variable_plane#\\\" == \\\"\\\" } { \\\"lv_picture\\\" == \\\"ip\\\" }\"\n  908  \t    nolabel\n  909  \t    joinnext\n  ...\n  912  \t    SOHO_IMAGE(\"lv_filename_plane#\", \"Different File\", EXTRA_IMAGE_LABEL, \"\")\n  913  \t    parmtag\t{ filechooser_mode\t\"write\" }\n  914: \t    hidewhen \"{ \\\"lv_disable_plane#\\\" == 1 } { \\\"lv_variable_plane#\\\" == \\\"\\\" } { \\\"lv_picture\\\" == \\\"ip\\\" }\"\n  915  \t    disablewhen \"{ \\\"lv_usefile_plane#\\\" == 0 }\"\n  916  \t    menureplace {\n  ...\n 1391  \t    size        1\n 1392  \t    type        string\n 1393: \t    default     { \"`chs(\\\"lv_picture\\\")`.lava_checkpoint\" }\n 1394  \t    hidewhen    \"{ lv_overridecheckpointname == 0 }\"\n 1395  \t    LAVA_PROP(\"image\", \"checkpointname\")\n ....\n 3788  \tparmtag\t{ spare_category\t\"__spare_parmlist\" }\n 3789  \tparmtag\t{ spare_parmlist\tR\"(\n 3790: \t    lv_picture_group\n 3791  \t    soho_skip_frame\n 3792  \t    lv_pfilter\n\n18 matches across 8 files\n\n\nSearching 17 files for \"lv_device\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/LSDframe.py:\n  144  \n  145  displayParms = {\n  146:     'lv_device'  :SohoParm('lv_device',   'string',     [''], False),\n  147      'lv_foptions':SohoParm('lv_foptions', 'string',     [''], False),\n  148      'lv_numaux'  :SohoParm('lv_numaux',   'int',        [0], False),\n  ...\n  392      filename = cam.wrangleString(wrangler, 'lv_picture', now, ['ip'])[0]\n  393      plist       = cam.wrangle(wrangler, displayParms, now)\n  394:     device      = plist['lv_device'].Value[0]\n  395      foptions    = plist['lv_foptions'].Value[0]\n  396      numaux      = plist['lv_numaux'].Value[0]\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderCommand:\n    8      // Force the render to go to the \"ip\" device\n    9      lv_picture\t\t\t[ $over_file ]\n   10:     lv_device\t\t\t[ $over_device ]\n   11  }\n   12  \n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderCOP:\n    8      // Force the render to go to the \"ip\" device\n    9      lv_picture\t\t[ $imagefile ]\n   10:     lv_device\t\t[ Houdini ]\n   11  }\n   12  \n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderState:\n    8      // Force the render to go to the \"ip\" device\n    9      lv_picture\t\t\t[ \"ip\" ]\n   10:     lv_device\t\t\t[ \"\" ]\n   11      lv_image_mplay_socketport\t[ \"$socket\" ]\n   12      lv_stylesheets\t\t[ \"$stylesheets\" ]\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/RenderViewer:\n    8      // Force the render to go to the \"ip\" device\n    9      lv_picture\t\t\t[ \"ip\" ]\n   10:     lv_device\t\t\t[ \"\" ]\n   11      lv_image_mplay_socketport\t[ \"$socket\" ]\n   12      lv_stylesheets\t\t[ \"$stylesheets\" ]\n\n/home/max/dev/Falcor/src/houdini/soho/overrides/ViewportCameraRender:\n   10      lv_image_mplay_framemode [ \"append\" ]\n   11      lv_image_mplay_rendermode [ \"current\" ]\n   12:     lv_device\t\t[ \"\" ]\n   13  }\n   14  \n\n/home/max/dev/Falcor/src/houdini/soho/overrides/ViewportRender:\n   11      lv_image_mplay_rendermode [ \"current\" ]\n   12      lv_rendersource\t[ \"SceneView\" ]\n   13:     lv_device\t\t[ \"\" ]\n   14  }\n   15  \n\n/home/max/dev/Falcor/src/houdini/soho/parameters/LSDlava.ds:\n  182  \tparm {\n  183  \t    // NOTE:  This parameter is copied/specialized in IFDlava.ds\n  184: \t    SOHO_STRING(lv_device, \"Output Device\", OUTPUT_LABEL, \"\")\n  185              VEX_IMAGE_FORMAT_MENU\n  186  \t    LAVA_PROP(\"image\", \"device\")\n\n10 matches across 8 files\n\n\nSearching 17 files for \"lsd\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/LSD.py:\n   28  from LSDapi import *\n   29  \n   30: LSDhooks.call(\"pre_lsdGen\")\n   31  \n   32  clockstart = time.time()\n   ..\n  559                  LSDhooks.call('post_mainimage', parmlist, objparms, now, sub_camera)\n  560  \n  561: LSDhooks.call(\"post_lsdGen\")\n  562  LSDsettings.clearLists()\n  563  \n\n2 matches in 1 file\n\n\nSearching 17 files for \"isPreviewMode\"\n\n/home/max/dev/Falcor/src/houdini/soho/LSDframe.py:\n  405          return False\n  406  \n  407:     is_preview = LSDmisc.isPreviewMode()\n  408  \n  409      plist           = cam.wrangle(wrangler, stereoParms, now)\n  ...\n  953  \n  954      # Tiled renders\n  955:     is_preview      = LSDmisc.isPreviewMode()\n  956      plist           = cam.wrangle(wrangler, tilingParms, now)\n  957      is_tiled        = plist['lv_tile_render'].Value[0]\n\n/home/max/dev/Falcor/src/houdini/soho/LSDmisc.py:\n  257          delta -= (offset - 1) * 0.5 * shutter\n  258     \n  259:     if shadowtype == 'depthmap' and not isPreviewMode():\n  260          shadowblur = obj.getDefaultedInt('shadowmotionblur', now, [1])[0]\n  261          if shadowblur == False:\n  ...\n  413      return handle\n  414  \n  415: def isPreviewMode():\n  416      mode = soho.getDefaultedString('state:previewmode', ['default'])[0]\n  417      return mode != 'default'\n\n4 matches across 2 files\n\n\nSearching 17 files for \"lava_class\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/parameters/lava.ds:\n  110  \n  111  #define LAVA_PROP(CLASS, NAME)\t\\\n  112: \tparmtag\t{ lava_class\tCLASS } \\\n  113  \tparmtag\t{ lava_name\tNAME }\n  114  \n\n1 match in 1 file\n\n\nSearching 93 files for \"mantra_class\" (case sensitive)\n\n/opt/houdini17.5/houdini/soho/parameters/IFDmantra.ds:\n  110  \n  111  #define MANTRA_PROP(CLASS, NAME)\t\\\n  112: \tparmtag\t{ mantra_class\tCLASS } \\\n  113  \tparmtag\t{ mantra_name\tNAME }\n  114  \n\n1 match in 1 file\n\n\nSearching 368 files for \"float3x3\" (case sensitive)\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/ext.hpp:\n   41  #include \"./ext/matrix_float3x2.hpp\"\n   42  #include \"./ext/matrix_float3x2_precision.hpp\"\n   43: #include \"./ext/matrix_float3x3.hpp\"\n   44: #include \"./ext/matrix_float3x3_precision.hpp\"\n   45  #include \"./ext/matrix_float3x4.hpp\"\n   46  #include \"./ext/matrix_float3x4_precision.hpp\"\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/ext/matrix_float3x3.hpp:\n    1  /// @ref core\n    2: /// @file glm/ext/matrix_float3x3.hpp\n    3  \n    4  #pragma once\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/ext/matrix_float3x3_precision.hpp:\n    1  /// @ref core\n    2: /// @file glm/ext/matrix_float3x3_precision.hpp\n    3  \n    4  #pragma once\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/gtx/compatibility.hpp:\n  106  \ttypedef mat<2, 4, float, highp>\t\tfloat2x4;\t\t//!< \\brief single-qualifier floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)\n  107  \ttypedef mat<3, 2, float, highp>\t\tfloat3x2;\t\t//!< \\brief single-qualifier floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)\n  108: \ttypedef mat<3, 3, float, highp>\t\tfloat3x3;\t\t//!< \\brief single-qualifier floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)\n  109  \ttypedef mat<3, 4, float, highp>\t\tfloat3x4;\t\t//!< \\brief single-qualifier floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)\n  110  \ttypedef mat<4, 2, float, highp>\t\tfloat4x2;\t\t//!< \\brief single-qualifier floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/mat3x3.hpp:\n    5  #include \"./ext/matrix_double3x3.hpp\"\n    6  #include \"./ext/matrix_double3x3_precision.hpp\"\n    7: #include \"./ext/matrix_float3x3.hpp\"\n    8: #include \"./ext/matrix_float3x3_precision.hpp\"\n    9  \n\n7 matches across 5 files\n\n\nSearching 8 files for \"mplay_label\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/python2.7/LSDmantra.py:\n  362      ImageOption(\"IPlay.gamma\", \"float\", \"lv_image_mplay_gamma\")\n  363      ImageOption(\"IPlay.houdiniportnum\", \"int\", \"mplay:port\")\n  364:     ImageOption(\"IPlay.label\", \"string\", \"lv_image_mplay_label\")\n  365      ImageOption(\"IPlay.lut\", \"string\", \"lv_image_mplay_lut\")\n  366      ImageOption(\"IPlay.sockethost\", \"string\", \"lv_image_mplay_sockethost\")\n\n1 match in 1 file\n\n\nSearching 8 files for \"IPlay.\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/python2.7/LSDframe.py:\n  416          file_suffix = None\n  417      if is_left_cam:\n  418:         cmd_declare('plane', 'string', 'IPlay.s3dleftplane', ['C'])\n  419      else:\n  420:         cmd_declare('plane', 'string', 'IPlay.s3dleftplane', [''])\n  421  \n  422      if is_right_cam:\n  423:         cmd_declare('plane', 'string', 'IPlay.s3drightplane', ['C'])\n  424      else:\n  425:         cmd_declare('plane', 'string', 'IPlay.s3drightplane', [''])\n  426      filename = insertFileSuffix(filename, file_suffix)\n  427  \n\n/home/max/dev/Falcor/src/houdini/soho/python2.7/LSDmantra.py:\n  358      ImageOption(\"Cineon.cinspace\", \"string\", \"lv_image_cineon_space\")\n  359      ImageOption(\"Cineon.cinwhite\", \"int\", \"lv_image_cineon_whitepoint\")\n  360:     ImageOption(\"IPlay.bgimage\", \"string\", \"lv_image_mplay_bgimage\")\n  361:     ImageOption(\"IPlay.direction\", \"string\", \"lv_image_mplay_direction\")\n  362:     ImageOption(\"IPlay.gamma\", \"float\", \"lv_image_mplay_gamma\")\n  363:     ImageOption(\"IPlay.houdiniportnum\", \"int\", \"mplay:port\")\n  364:     ImageOption(\"IPlay.label\", \"string\", \"lv_image_mplay_label\")\n  365:     ImageOption(\"IPlay.lut\", \"string\", \"lv_image_mplay_lut\")\n  366:     ImageOption(\"IPlay.sockethost\", \"string\", \"lv_image_mplay_sockethost\")\n  367:     ImageOption(\"IPlay.socketport\", \"int\", \"lv_image_mplay_socketport\")\n  368      ImageOption(\"JPEG.quality\", \"int\", \"lv_image_jpeg_quality\")\n  369      ImageOption(\"OpenEXR.attributes\", \"string\", \"lv_image_exr_attributes\")\n\n/home/max/dev/Falcor/src/houdini/soho/python2.7/LSDsettings.py:\n  777          else:\n  778              rendermode = 'replace'\n  779:     cmd_declare('plane', 'string', 'IPlay.rendermode', [rendermode])\n  780      frange = '%d %d' % (int(frange[0]), int(frange[1]))\n  781:     cmd_declare('plane', 'string', 'IPlay.framerange', [frange])\n  782:     cmd_declare('plane', 'float', 'IPlay.currentframe', [curframe])\n  783      rendersource = soho.getDefaultedString('lv_rendersource',\n  784                              [soho.getOutputDriver().getName()])\n  785:     cmd_declare('plane', 'string', 'IPlay.rendersource', rendersource)\n  786  \n  787  def outputImageFormatOptions(wrangler, cam, now):\n\n16 matches across 3 files\n\n\nSearching 8 files for \"LSDmantra\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/python2.7/LSDsettings.py:\n  810  \n  811  def initializeFeatures():\n  812:     LSDmantra.initializeFeatures(sys.modules[__name__])\n  813  \n\n1 match in 1 file\n\n\nSearching 86 files for \"unsupported primitive type\" (case sensitive)\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Primitive.cpp:\n  110      //}\n  111  \n  112:     std::cerr << \"Warning: unsupported primitive type: \" << type << std::endl;\n  113      return new Primitive(detail);\n  114  }\n\n1 match in 1 file\n\n\nSearching 86 files for \"unsupported run type\" (case sensitive)\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Run.cpp:\n  112      else\n  113      {\n  114:         std::cerr << \"Warning: unsupported run type: \"\n  115                    << Primitive::toString(runPrimitive->getType()) << std::endl;\n  116          BGEO_CHECK(parser.skipNextObject());\n\n1 match in 1 file\n\n\nSearching 90 files for \"getTemplatePrimitive\" (case sensitive)\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Run.cpp:\n   22  Run::Run(const Bgeo& bgeo, const parser::Run& run): m_bgeo(bgeo), m_run(run) { }\n   23  \n   24: Bgeo::PrimitivePtr Run::getTemplatePrimitive() const {\n   25      assert(m_run.runPrimitive);\n   26      return factory::create(m_bgeo, *m_run.runPrimitive);\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Run.h:\n   30      Run(const Bgeo& bgeo, const parser::Run& run);\n   31  \n   32:     Bgeo::PrimitivePtr getTemplatePrimitive() const;\n   33  \n   34  private:\n\n2 matches across 2 files\n\n\nSearching 90 files for \"create\" (case sensitive)\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Bgeo.cpp:\n  180      assert(parserPrimitive);\n  181  \n  182:     primptr = factory::create(*this, *parserPrimitive, m_pimpl->embeddedGeoMap, index);\n  183      return primptr;\n  184  }\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/NumericData.h:\n   30  public:\n   31      template <typename T>\n   32:     static NumericData create(int64 elementCount, int32 size,\n   33                                const std::vector<T>& tuples);\n   34  \n   35      template <typename T>\n   36:     static NumericData create(int64 elementCount, int32 size,\n   37                                const std::vector<int32>& packing, int pageSize,\n   38                                const std::vector<bool>& constantPageFlags,\n   ..\n  154  \n  155  template <typename T>\n  156: /*static*/ NumericData NumericData::create(int64 elementCount, int32 size,\n  157                                             const std::vector<T>& tuples)\n  158  {\n  ...\n  168  \n  169  template <typename T>\n  170: /*static*/ NumericData NumericData::create(int64 elementCount, int32 size,\n  171                                             const std::vector<int32>& packing,\n  172                                             int pageSize,\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Primitive.cpp:\n   59  }\n   60  \n   61: Primitive* Primitive::create(const UT_String& type, const Detail& detail) {\n   62      if (type == \"Poly\")\n   63      {\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Primitive.h:\n   46      };\n   47  \n   48:     static Primitive* create(const UT_String& type, const Detail& detail);\n   49  \n   50      Primitive(const Detail& detail);\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Primitives.cpp:\n   56                  //std::cout <<\"type = \" << type <<std::endl;\n   57  \n   58:                 primitive = Primitive::create(type, detail);\n   59                  assert(primitive);\n   60                  primitive->loadType(parser);\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/Run.cpp:\n   61      UT_String runTypeString;\n   62      parseArrayValueForKey(parser, \"runtype\", runTypeString);\n   63:     runPrimitive = create(runTypeString, detail);\n   64      assert(runPrimitive);\n   65  \n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/PrimitiveFactory.cpp:\n   61  } // namespace anonymous\n   62  \n   63: Bgeo::PrimitivePtr create(const Bgeo& bgeo, const parser::Primitive& parserPrimitive) {\n   64:     return create(bgeo, parserPrimitive, {}, 0);\n   65  }\n   66  \n   67  // FIXME: clean up the factory method by abstracting out construction of the\n   68  // parser and bgeo primitives.\n   69: Bgeo::PrimitivePtr create(const Bgeo& bgeo, const parser::Primitive& parserPrimitive, EmbeddedGeoMap& embeddedGeoMap, size_t index) {\n   70      switch(parserPrimitive.getType())\n   71      {\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/PrimitiveFactory.h:\n   27  \n   28  typedef std::map<UT_String, std::shared_ptr<Bgeo>> EmbeddedGeoMap;\n   29: Bgeo::PrimitivePtr create(const Bgeo& bgeo, const parser::Primitive& parserPrimitive);\n   30: Bgeo::PrimitivePtr create(const Bgeo& bgeo, const parser::Primitive& parserPrimitive, EmbeddedGeoMap& embeddedGeoMap, size_t index);\n   31  \n   32  }\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Run.cpp:\n   24  Bgeo::PrimitivePtr Run::getTemplatePrimitive() const {\n   25      assert(m_run.runPrimitive);\n   26:     //return factory::create(m_bgeo, *m_run.runPrimitive);\n   27      return nullptr;\n   28  }\n\n15 matches across 9 files\n\n\nSearching 55 files for \"createVao\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp:\n  273      }\n  274  \n  275:     Vao::SharedPtr SceneBuilder::createVao(std::shared_ptr<Device> pDevice, uint16_t drawCount) {\n  276          for (auto& mesh : mMeshes) assert(mesh.topology == mMeshes[0].topology);\n  277          const size_t vertexCount = (uint32_t)mBuffersData.staticData.size();\n  ...\n  400          uint32_t drawCount = createMeshData(mpScene.get());\n  401          assert(drawCount <= UINT16_MAX);\n  402:         mpScene->mpVao = createVao(mpDevice, drawCount);\n  403          calculateMeshBoundingBoxes(mpScene.get());\n  404          createAnimationController(mpScene.get());\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.h:\n  226  \n  227      uint32_t addMaterial(const Material::SharedPtr& pMaterial, bool removeDuplicate);\n  228:     Vao::SharedPtr createVao(std::shared_ptr<Device> pDevice, uint16_t drawCount);\n  229  \n  230      uint32_t createMeshData(Scene* pScene);\n\n3 matches across 2 files\n\n\nSearching 34 files for \"mCompilerDeps\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraph.cpp:\n  335  \n  336      try {\n  337:         mpExe = RenderGraphCompiler::compile(*this, pContext, mCompilerDeps);\n  338          mRecompile = false;\n  339          return true;\n  ...\n  345  \n  346  void RenderGraph::execute(RenderContext* pContext) {\n  347:     LOG_DBG(\"RenderGraph::execute dims %u %u\", mCompilerDeps.defaultResourceProps.dims[0], mCompilerDeps.defaultResourceProps.dims[1]);\n  348      std::string log;\n  349      if (!compile(pContext, log)) {\n  ...\n  356      c.pGraphDictionary = mpPassDictionary;\n  357      c.pRenderContext = pContext;\n  358:     c.defaultTexDims = mCompilerDeps.defaultResourceProps.dims;\n  359:     c.defaultTexFormat = mCompilerDeps.defaultResourceProps.format;\n  360      mpExe->execute(c);\n  361  }\n  ...\n  416  \n  417      if (pResource) {\n  418:         mCompilerDeps.externalResources[name] = pResource;\n  419      } else {\n  420:         if (mCompilerDeps.externalResources.find(name) == mCompilerDeps.externalResources.end()) {\n  421              logWarning(\"RenderGraph::setInput() - Trying to remove an external resource named `\" + name + \"` but the resource wasn't registered before. Ignoring call\");\n  422              return;\n  423          }\n  424:         mCompilerDeps.externalResources.erase(name);\n  425      }\n  426  \n  ...\n  519  \n  520      // Store the values\n  521:     mCompilerDeps.defaultResourceProps.format = pColor->getFormat();\n  522:     mCompilerDeps.defaultResourceProps.dims = { pTargetFbo->getWidth(), pTargetFbo->getHeight() };\n  523  \n  524      // Invalidate the graph. Render-passes might change their reflection based on the resize information\n  ...\n  528  void RenderGraph::resize(uint width, uint height, const ResourceFormat& format) {\n  529      // Store the values\n  530:     mCompilerDeps.defaultResourceProps.format = format;\n  531:     mCompilerDeps.defaultResourceProps.dims = { width, height };\n  532  \n  533      // Invalidate the graph. Render-passes might change their reflection based on the resize information\n  ...\n  536  \n  537  uint2 RenderGraph::dims() {\n  538:     return mCompilerDeps.defaultResourceProps.dims;\n  539  }\n  540  \n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraph.h:\n  266          RenderGraphExe::SharedPtr mpExe;\n  267          bool mRecompile = false;\n  268:         RenderGraphCompiler::Dependencies mCompilerDeps;\n  269  \n  270          std::shared_ptr<Device> mpDevice;\n\n15 matches across 2 files\n\n\nSearching 34 files for \"onResize\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraph.cpp:\n   53      mpPassDictionary = Dictionary::create();\n   54      gRenderGraphs.push_back(this);\n   55:     //onResize(gpFramework->getTargetFbo().get());\n   56  }\n   57  \n   ..\n  511  }\n  512  \n  513: void RenderGraph::onResize(const Fbo* pTargetFbo) {\n  514      // Store the back-buffer values\n  515      const Texture* pColor = pTargetFbo ? pTargetFbo->getColorTexture(0).get() : nullptr;\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraph.h:\n  150          /** Call this when the swap-chain was resized\n  151          */\n  152:         void onResize(const Fbo* pTargetFbo);\n  153  \n  154          /** Force size for offscreen rendering\n\n3 matches across 2 files\n\n\nSearching 470 files for \"glm\" (case sensitive)\n\n/home/max/dev/Falcor/src/lava_lib/reader_lsd/scope.cpp:\n   40  Transformable::Transformable(ScopeBase::SharedPtr pParent):ScopeBase(pParent) {\n   41  \tmTransformList.clear();\n   42: \tmTransformList.push_back(glm::mat4( 1.0 ));\n   43  }\n   44  \n\n/home/max/dev/Falcor/src/lava_lib/reader_lsd/scope.h:\n    8  #include <vector>\n    9  \n   10: #include \"Externals/GLM/glm/mat4x4.hpp\"\n   11  \n   12  #include \"../scene_reader_base.h\"\n   ..\n   51   public:\n   52      using SharedPtr = std::shared_ptr<Transformable>;\n   53:     using TransformList = std::vector<glm::mat4x4>;\n   54  \n   55      Transformable(ScopeBase::SharedPtr pParent);\n\n/home/max/dev/Falcor/src/lava_lib/reader_lsd/session.cpp:\n  330  \t\tit->first,\n  331  \t\tpObj->getTransformList()[0],\n  332: \t\tglm::mat4(1),\n  333  \t\tFalcor::SceneBuilder::kInvalidNode // just a node with no parent\n  334  \t};\n\n/home/max/dev/Falcor/src/lava_lib/renderer_iface.h:\n    5  #include <map>\n    6  \n    7: #include \"Externals/GLM/glm/mat4x4.hpp\"\n    8  \n    9  #include \"display.h\"\n   ..\n   38          double      cameraNearPlane = 0.01;\n   39          double      cameraFarPlane  = 1000.0;\n   40:         glm::mat4   cameraTransform;\n   41          double      cameraFocalLength = 1.0;\n   42          double      cameraFrameHeight = 1.0;\n\n6 matches across 4 files\n\n\nSearching 368 files for \"float3x3\" (case sensitive)\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/ext.hpp:\n   41  #include \"./ext/matrix_float3x2.hpp\"\n   42  #include \"./ext/matrix_float3x2_precision.hpp\"\n   43: #include \"./ext/matrix_float3x3.hpp\"\n   44: #include \"./ext/matrix_float3x3_precision.hpp\"\n   45  #include \"./ext/matrix_float3x4.hpp\"\n   46  #include \"./ext/matrix_float3x4_precision.hpp\"\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/ext/matrix_float3x3.hpp:\n    1  /// @ref core\n    2: /// @file glm/ext/matrix_float3x3.hpp\n    3  \n    4  #pragma once\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/ext/matrix_float3x3_precision.hpp:\n    1  /// @ref core\n    2: /// @file glm/ext/matrix_float3x3_precision.hpp\n    3  \n    4  #pragma once\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/gtx/compatibility.hpp:\n  106  \ttypedef mat<2, 4, float, highp>\t\tfloat2x4;\t\t//!< \\brief single-qualifier floating-point matrix with 2 x 4 components. (From GLM_GTX_compatibility extension)\n  107  \ttypedef mat<3, 2, float, highp>\t\tfloat3x2;\t\t//!< \\brief single-qualifier floating-point matrix with 3 x 2 components. (From GLM_GTX_compatibility extension)\n  108: \ttypedef mat<3, 3, float, highp>\t\tfloat3x3;\t\t//!< \\brief single-qualifier floating-point matrix with 3 x 3 components. (From GLM_GTX_compatibility extension)\n  109  \ttypedef mat<3, 4, float, highp>\t\tfloat3x4;\t\t//!< \\brief single-qualifier floating-point matrix with 3 x 4 components. (From GLM_GTX_compatibility extension)\n  110  \ttypedef mat<4, 2, float, highp>\t\tfloat4x2;\t\t//!< \\brief single-qualifier floating-point matrix with 4 x 2 components. (From GLM_GTX_compatibility extension)\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/mat3x3.hpp:\n    5  #include \"./ext/matrix_double3x3.hpp\"\n    6  #include \"./ext/matrix_double3x3_precision.hpp\"\n    7: #include \"./ext/matrix_float3x3.hpp\"\n    8: #include \"./ext/matrix_float3x3_precision.hpp\"\n    9  \n\n7 matches across 5 files\n\n\nSearching 458 files for \"float3\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n  271                  //    LOG_WARN(\"map structured buffer if struct size %u\", mStructSize);\n  272                  //    if (mFormat == ResourceFormat::RGB32Float) {\n  273:                         // due to glsl std120/std430 float3 (12 bytes ) aligned to 16 bytes\n  274                  //        mpStagingResource = Buffer::createStructured(mStructSize, mElementCount, Buffer::BindFlags::None, Buffer::CpuAccess::Read, nullptr); \n  275                  //    } else {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h:\n  371  \n  372      // Additional formats that may be supported on some hardware.\n  373:     CASE(float3,    ResourceFormat::RGB32Float);\n  374  \n  375  #undef CASE\n  ...\n  429  \n  430      // Additional formats that may be supported on some hardware.\n  431:     CASE(float3,    ResourceFormat::RGB32Float);\n  432      \n  433  #undef CASE\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n  103          pCtx->resourceBarrier(pView->getResource(), Resource::State::CopyDest);\n  104          VkClearColorValue colVal;\n  105:         assert(sizeof(ClearType) <= sizeof(colVal.float32));\n  106:         std::memcpy(colVal.float32, &clearVal, sizeof(clearVal)); // VkClearColorValue is a union, so should work regardless of the ClearType\n  107          VkImageSubresourceRange range;\n  108          const auto& viewInfo = pView->getViewInfo();\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  819      c_to_prog(float,  Float);\n  820      c_to_prog(float2, Float2);\n  821:     c_to_prog(float3, Float3);\n  822      c_to_prog(float4, Float4);\n  823  \n  ...\n 1098  set_constant_by_offset(float);\n 1099  set_constant_by_offset(float2);\n 1100: set_constant_by_offset(float3);\n 1101  set_constant_by_offset(float4);\n 1102  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/VariablesBufferUI.cpp:\n   98              break;\n   99          case ReflectionBasicType::Type::Float3:\n  100:             to_gui_widget(var, float3);\n  101              break;\n  102          case ReflectionBasicType::Type::Float4:\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n  782      array elements. It is *not* necessarily the same as\n  783      the size of the array elements. For example an array\n  784:     of `float3`s in a constant buffer may have a stride\n  785      of 16 bytes, but each element is only 12 bytes.\n  786      */\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.h:\n   70  or an overload of `operator=`:\n   71  \n   72:     someField = float3(0);\n   73  \n   74      pObj[\"someTexture\"].setTexture(pMyTexture);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/BuildTriangleList.cs.slang:\n   40  }\n   41  \n   42: RWByteAddressBuffer gVertexPosOutput;       ///< Vertex positions in world space for all mesh light triangles. Size: triangleCount * 3 * sizeof(float3).\n   43  RWByteAddressBuffer gTexCoordsOutput;       ///< Texture coordinates for all mesh light triangles. Size: triangleCount * 3 * sizeof(float2).\n   44  \n   ..\n   59  \n   60      // Store vertex data.\n   61:     float3 p[3];\n   62      float2 texC[3];\n   63      gScene.getVertexPositionsW(gMeshInstanceID, triangleIndex, p);\n   ..\n   73      // Store triangle data.\n   74      float triangleArea;\n   75:     float3 faceNormal = gScene.computeFaceNormalAndAreaW(gMeshInstanceID, p, triangleArea);\n   76  \n   77      gTriangleData[triIdx].lightIdx = gLightIdx;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang:\n  125      const float2 uv = vsIn.uv;        // Interpolated texture coordinate.\n  126      const uint lightIdx = vsIn.lightIdx;\n  127:     float3 color = gScene.materialResources[gLightCollection.meshData[lightIdx].materialID].emissive.SampleLevel(gPointSampler, uv, 0.f).rgb;  // Sampler at mip 0\n  128  \n  129      // Compute weighted color. TODO: For now assume full coverage (= 1.0 in weight).\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.slang:\n   53      struct NullEmissiveSampler : IEmissiveLightSampler\n   54      {\n   55:         bool sampleLight(const float3 posW, const float3 normalW, inout SampleGenerator sg, out TriangleLightSample ls)\n   56          {\n   57              return false;\n   58          }\n   59  \n   60:         float evalPdf(float3 posW, float3 normalW, const TriangleHit hit)\n   61          {\n   62              return 0.f;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang:\n   53      \\return True if a sample was generated, false otherwise.\n   54  */\n   55: bool sampleTriangle(const float3 posW, uint triangleIndex, float2 u, out TriangleLightSample ls)\n   56  {\n   57      ls = {};\n   ..\n   59  \n   60      // Sample the triangle uniformly.\n   61:     const float3 barycentrics = sample_triangle(u);\n   62      ls.posW = gScene.lightCollection.getPosition(triangleIndex, barycentrics);\n   63  \n   64      // Compute light vector and squared distance.\n   65:     float3 toLight = ls.posW - posW; // Unnormalized light vector\n   66      const float distSqr = max(FLT_MIN, dot(toLight, toLight)); // Clamp to avoid NaNs below\n   67      ls.distance = sqrt(distSqr);\n   ..\n   98      \\return Probability density with respect to solid angle at the shading point.\n   99  */\n  100: float evalTrianglePdf(const float3 posW, const TriangleHit hit)\n  101  {\n  102      // Compute light vector and squared distance.\n  103:     float3 toLight = hit.posW - posW; // Unnormalized light vector\n  104      const float distSqr = dot(toLight, toLight);\n  105      if (distSqr <= FLT_MIN) return 0.f; // Avoid NaNs below\n  106:     float3 L = toLight / sqrt(distSqr);\n  107  \n  108      // Cosine of angle between the light's normal and the light vector (flip L since it points towards the light).\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerInterface.slang:\n   37  {\n   38      uint    triangleIndex;      ///< Index of the sampled triangle.\n   39:     float3  posW;               ///< Sampled point on the light source in world space.\n   40:     float3  normalW;            ///< Normal of the sampled point on the light source in world space.\n   41:     float3  dir;                ///< Normalized direction from the shading point to the sampled point on the light source in world space.\n   42      float   distance;           ///< Distance from the shading point to the sampled point.\n   43:     float3  Le;                 ///< Emitted radiance. This is zero if the light is back-facing or sample is invalid.\n   44      float   pdf;                ///< Probability density with respect to solid angle from the shading point. The range is [0,inf] (inclusive), where pdf == 0.0 indicates an invalid sample.\n   45  };\n   ..\n   51  {\n   52      uint    triangleIndex;      ///< Index of the triangle.\n   53:     float3  posW;               ///< Sampled point on the triangle in world space.\n   54:     float3  normalW;            ///< Face normal of the triangle in world space, flipped for back-facing hits.\n   55  };\n   56  \n   ..\n   66          \\return True if a sample was generated, false otherwise.\n   67      */\n   68:     bool sampleLight(const float3 posW, const float3 normalW, inout SampleGenerator sg, out TriangleLightSample ls);\n   69  \n   70      /** Evaluate the PDF at a shading point given a hit point on an emissive triangle.\n   ..\n   74          \\return Probability density with respect to solid angle at the shading point.\n   75      */\n   76:     float evalPdf(float3 posW, float3 normalW, const TriangleHit hit);\n   77  };\n   78  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang:\n   52          \\return True if a sample was generated, false otherwise.\n   53      */\n   54:     bool sampleLight(const float3 posW, const float3 normalW, inout SampleGenerator sg, out TriangleLightSample ls)\n   55      {\n   56          if (gScene.lightCollection.isEmpty()) return false;\n   ..\n   77          \\return Probability density with respect to solid angle at the shading point.\n   78      */\n   79:     float evalPdf(float3 posW, float3 normalW, const TriangleHit hit)\n   80      {\n   81          if (gScene.lightCollection.isEmpty()) return 0;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EnvProbe.slang:\n   55  struct EnvProbeSamplingResult\n   56  {\n   57:     float3 wi;          ///< Sampled direction towards the light in world space. TODO: Rename dir.\n   58      float pdf;          ///< Probability density function for the sampled direction with respect to solid angle.\n   59  };\n   ..\n   61  /** Evaluates the radiance coming from world space direction 'dir'.\n   62  */\n   63: float3 evalEnvProbe(const EnvProbe probe, float3 dir, float lod = 0.f)\n   64  {\n   65      // Get (u,v) coord in latitude-longitude map format.\n   ..\n   76      \\return Probability density function evaluated for direction 'dir'.\n   77  */\n   78: float evalEnvProbePdf(const EnvProbe probe, float3 dir)\n   79  {\n   80      float2 uv = ndir_to_oct_equal_area_unorm(dir);\n   ..\n  146      // Compute final sample position and map to direction.\n  147      float2 uv = ((float2)pos + p) * probe.importanceInvDim;     // Final sample in [0,1)^2.\n  148:     float3 dir = oct_to_ndir_equal_area_unorm(uv);\n  149  \n  150      // Compute final pdf.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EnvProbeSetup.cs.slang:\n   62  \n   63              // Convert p to (u,v) coordinate in latitude-longitude map.\n   64:             float3 dir = oct_to_ndir_equal_area_unorm(p);\n   65              float2 uv = world_to_latlong_map(dir);          \n   66  \n   67              // Accumulate the radiance from this sample.\n   68:             float3 radiance = gEnvMap.SampleLevel(gEnvSampler, uv, 0).rgb;\n   69              L += luminance(radiance);\n   70          }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/FinalizeIntegration.cs.slang:\n   55      const MeshLightData lightData = gMeshData[gTriangleData[triIdx].lightIdx];\n   56      const MaterialData materialData = gScene.getMaterial(lightData.materialID);\n   57:     float3 averageEmissiveColor = materialData.emissive;\n   58  \n   59      if (gScene.isEmissiveTextured(lightData.materialID))\n   ..\n   65          float4 texelSum = asfloat(gTexelSum.Load4(triIdx * 16u));\n   66          float weight = texelSum.a;\n   67:         averageEmissiveColor = weight > 0.f ? texelSum.rgb / weight : float3(1.0f);\n   68      }\n   69:     float3 averageRadiance = averageEmissiveColor * materialData.emissiveFactor;\n   70  \n   71      // Pre-compute the luminous flux emitted, which is what we use during sampling to set probabilities.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.h:\n   77          struct InternalNode {\n   78              NodeType nodeType = NodeType::Internal;\n   79:             float3 aabbMin;\n   80  \n   81              float luminousFlux = 0.f;\n   82:             float3 aabbMax;\n   83  \n   84              float cosConeAngle = kInvalidCosConeAngle; // If cosConeAngle == kInvalidCosConeAngle, the cone should not be used.\n   85:             float3 coneDirection = { 0.f, 0.f, 0.f };\n   86  \n   87              uint32_t leftNodeOffset = kInvalidOffset;\n   ..\n   91          struct LeafNode {\n   92              NodeType nodeType = NodeType::Leaf;\n   93:             float3 aabbMin;\n   94  \n   95              float luminousFlux = 0.f;\n   96:             float3 aabbMax;\n   97  \n   98              float cosConeAngle = kInvalidCosConeAngle;  // If cosConeAngle == kInvalidCosConeAngle, the cone should not be used.\n   99:             float3 coneDirection = { 0.f, 0.f, 0.f };\n  100  \n  101              uint32_t triangleCount = 0;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.slang:\n   45      }\n   46  \n   47:     float3 getNodeConeDirection(uint offset)\n   48      {\n   49          return asfloat(nodes.Load3(offset + kNodeConeDirectionOffset));\n   ..\n   55      }\n   56  \n   57:     void getNodeAABB(uint offset, out float3 aabbMin, out float3 aabbMax)\n   58      {\n   59          aabbMin = asfloat(nodes.Load3(offset + kNodeAABBMinOffset));\n   ..\n  104      }\n  105  \n  106:     float3 getNodeConeDirection(uint offset)\n  107      {\n  108          return asfloat(nodes.Load3(offset + kNodeConeDirectionOffset));\n  109      }\n  110  \n  111:     void setNodeConeDirection(uint offset, float3 dir)\n  112      {\n  113          nodes.Store3(offset + kNodeConeDirectionOffset, asuint(dir));\n  ...\n  119      }\n  120  \n  121:     void getNodeAABB(uint offset, out float3 aabbMin, out float3 aabbMax)\n  122      {\n  123          aabbMin = asfloat(nodes.Load3(offset + kNodeAABBMinOffset));\n  ...\n  125      }\n  126  \n  127:     void setNodeAABB(uint offset, float3 aabbMin, float3 aabbMax)\n  128      {\n  129          nodes.Store3(offset + kNodeAABBMinOffset, asuint(aabbMin));\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp:\n   55          \\return The cosine of the spread angle for the new cone.\n   56      */\n   57:     float computeCosConeAngle(const float3& coneDir, const float cosTheta, const float3& otherConeDir, const float cosOtherTheta) {\n   58          float cosResult = kInvalidCosConeAngle;\n   59          if (cosTheta != kInvalidCosConeAngle && cosOtherTheta != kInvalidCosConeAngle) {\n   ..\n   80          those given by coneUnion().\n   81      */\n   82:     float3 coneUnionOld(float3 aDir, float aCosTheta, float3 bDir, float bCosTheta, float& cosResult) {\n   83:         float3 dir = aDir + bDir;\n   84:         if (aCosTheta == kInvalidCosConeAngle || bCosTheta == kInvalidCosConeAngle || dir == float3(0.0f)) {\n   85              cosResult = kInvalidCosConeAngle;\n   86:             return float3(0.0f);\n   87          }\n   88  \n   ..\n   99          them. Algorithm 1 in the 2018 Sony EGSR light sampling paper.\n  100      */\n  101:     float3 coneUnion(float3 aDir, float aCosTheta, float3 bDir, float bCosTheta, float& cosResult) {\n  102          if (aCosTheta == kInvalidCosConeAngle || bCosTheta == kInvalidCosConeAngle) {\n  103              cosResult = kInvalidCosConeAngle;\n  104:             return float3(0.0f);\n  105          }\n  106  \n  ...\n  126          if (oTheta > glm::pi<float>()) {\n  127              cosResult = kInvalidCosConeAngle;\n  128:             return float3(0.0f);\n  129          }\n  130  \n  ...\n  132          // both cones.\n  133          const float rTheta = oTheta - aTheta;\n  134:         const float3 rDir = glm::cross(aDir, bDir);\n  135:         float3 dir;\n  136          if (glm::dot(rDir, rDir) < 1e-8) {\n  137              // The two vectors are effectively pointing in opposite directions.\n  ...\n  142              const float a = -1.f / (sign + aDir.z);\n  143              const float b = aDir.x * aDir.y * a;\n  144:             dir = float3(1.f + sign * aDir.x * aDir.x * a, sign * b, -sign * aDir.x);\n  145              // The spread angle needs to be pi/2 to encompass aDir and\n  146              // bDir, then aTheta / 2 more on top of that. (Recall that\n  ...\n  161          // TODO: write a unit test.\n  162          // Testing code: make sure both a and b are inside the result.\n  163:         auto checkInside = [&](float3 d, float theta) {\n  164                                 // Make sure that sum of the angle between\n  165                                 // the two cone vectors and the spread angle\n  ...\n  379      }\n  380  \n  381:     float3 LightBVHBuilder::computeLightingConesInternal(uint32_t nodesCurrentByteOffset, AlignedAllocator& alignedAllocator, float& cosConeAngle) {\n  382          const uintptr_t currentNodeBytePointer = reinterpret_cast<uintptr_t>(alignedAllocator.getStartPointer()) + nodesCurrentByteOffset;\n  383  \n  ...\n  388  \n  389              float leftNodeCosConeAngle = kInvalidCosConeAngle;\n  390:             float3 leftNodeConeDirection = computeLightingConesInternal(currentNode->leftNodeOffset, alignedAllocator, leftNodeCosConeAngle);\n  391              float rightNodeCosConeAngle = kInvalidCosConeAngle;\n  392:             float3 rightNodeConeDirection = computeLightingConesInternal(currentNode->rightNodeOffset, alignedAllocator, rightNodeCosConeAngle);\n  393  \n  394              // TODO: Asserts in coneUnion\n  395:     //            float3 coneDirection = coneUnion(leftNodeConeDirection, leftNodeCosConeAngle,\n  396:             float3 coneDirection = coneUnionOld(leftNodeConeDirection, leftNodeCosConeAngle,\n  397                  rightNodeConeDirection, rightNodeCosConeAngle, cosConeAngle);\n  398              currentNode->cosConeAngle = cosConeAngle;\n  ...\n  407      }\n  408  \n  409:     float3 LightBVHBuilder::computeLightingCone(const Range& triangleRange, const BuildingData& data, float& cosTheta) {\n  410:         float3 coneDirection = float3(0.0f);\n  411          cosTheta = kInvalidCosConeAngle;\n  412  \n  413          // We use the average normal as cone direction and grow the cone to include all light normals.\n  414          // TODO: Switch to a more sophisticated algorithm to compute tighter bounding cones.\n  415:         float3 coneDirectionSum = float3(0.0f);\n  416          for (uint32_t triangleIdx = triangleRange.begin; triangleIdx < triangleRange.end; ++triangleIdx) {\n  417              coneDirectionSum += data.trianglesData[triangleIdx].coneDirection;\n  ...\n  430      LightBVHBuilder::SplitResult LightBVHBuilder::computeSplitWithEqual(const BuildingData& /*data*/, const Range& triangleRange, const BBox& nodeBounds, const Options& /*parameters*/) {\n  431          // Find the largest dimension.\n  432:         const float3 dimensions = nodeBounds.dimensions();\n  433          const uint32_t dimension = dimensions[2u] >= dimensions[0u] && dimensions[2u] >= dimensions[1u] ?\n  434              2u : (dimensions[1u] >= dimensions[0u] ? 1u : 0u);\n  ...\n  536          if (parameters.splitAlongLargest) {\n  537              // Find the largest dimension.\n  538:             const float3 dimensions = nodeBounds.dimensions();\n  539              const uint32_t largestDimension = dimensions[2u] >= dimensions[0u] && dimensions[2u] >= dimensions[1u] ?\n  540                  2u : (dimensions[1u] >= dimensions[0u] && dimensions[1u] >= dimensions[2u] ? 1u : 0u);\n  ...\n  595  \n  596          // Find the largest dimension.\n  597:         const float3 dimensions = nodeBounds.dimensions();\n  598          const uint32_t largestDimension = dimensions[2u] >= dimensions[0u] && dimensions[2u] >= dimensions[1u] ?\n  599              2u : (dimensions[1u] >= dimensions[0u] && dimensions[1u] >= dimensions[2u] ? 1u : 0u);\n  ...\n  603              uint32_t triangleCount = 0u;\n  604              float flux = 0.0f;\n  605:             float3 coneDirection = float3(0.0f);\n  606              float cosConeAngle = 1.0f;\n  607  \n  ...\n  674                  if (glm::length(total.coneDirection) >= FLT_MIN) {\n  675                      cosTheta = 1.f;\n  676:                     const float3 coneDir = glm::normalize(total.coneDirection);\n  677                      for (std::size_t j = 0u; j <= i; ++j) {\n  678                          cosTheta = computeCosConeAngle(coneDir, cosTheta, bins[j].coneDirection, bins[j].cosConeAngle);\n  ...\n  692                  if (glm::length(total.coneDirection) >= FLT_MIN) {\n  693                      cosTheta = 1.f;\n  694:                     const float3 coneDir = glm::normalize(total.coneDirection);\n  695                      for (std::size_t j = i; j <= costs.size(); ++j)\n  696                      {\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h:\n  109          struct TriangleSortData {\n  110              BBox bounds;                                ///< World-space bounding box for the light source(s).\n  111:             float3 center = {};                         ///< Center point.\n  112:             float3 coneDirection = {};                  ///< Light emission normal direction.\n  113              float cosConeAngle = 1.f;                   ///< Cosine normal bounding cone (half) angle.\n  114              float flux = 0.f;                           ///< Precomputed triangle flux (note, this takes doublesidedness into account).\n  ...\n  154              \\return  direction of the lighting cone for the node loacted at nodesCurrentByteOffset.\n  155          */\n  156:         float3 computeLightingConesInternal(uint32_t nodesCurrentByteOffset, AlignedAllocator& alignedAllocator, float& cosConeAngle);\n  157  \n  158          /** Compute lighting cone for a range of triangles.\n  ...\n  162              \\return Direction of the lighting cone.\n  163          */\n  164:         static float3 computeLightingCone(const Range& triangleRange, const BuildingData& data, float& cosTheta);\n  165  \n  166          // See the documentation of SplitHeuristicFunction.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHRefit.cs.slang:\n   52      const uint triangleCount = gLightBVH.getNodeTriangleCount(nodeOffset);\n   53  \n   54:     float3 aabbMin = float3(FLT_MAX);\n   55:     float3 aabbMax = float3(-FLT_MAX);\n   56:     float3 normalsSum = float3(0.0f);\n   57      for (uint triangleIndicesIndex = 0u; triangleIndicesIndex < triangleCount; ++triangleIndicesIndex)\n   58      {\n   ..\n   60          for (uint vertexIndex = 0u; vertexIndex < 3u; ++vertexIndex)\n   61          {\n   62:             const float3 p = gLights.getVtxPos(triangleIndex * 3 + vertexIndex);\n   63              aabbMin = min(aabbMin, p);\n   64              aabbMax = max(aabbMax, p);\n   ..\n   70  \n   71      const float coneDirectionLength = length(normalsSum);\n   72:     const float3 coneDirection = normalsSum / coneDirectionLength;\n   73      float cosConeAngle = kInvalidCosConeAngle;\n   74  \n   ..\n   79          {\n   80              const uint triangleIndex = gLightBVH.getNodeTriangleIndex(nodeOffset, triangleIndicesIndex);\n   81:             const float3 normal = gLights.getTriangleData(triangleIndex).normal;\n   82              const float cosDiffAngle = dot(coneDirection, normal);\n   83              cosConeAngle = min(cosConeAngle, cosDiffAngle);\n   ..\n  107      const uint rightChildOffset = gLightBVH.getNodeRightByteOffset(nodeOffset);\n  108  \n  109:     float3 leftAabbMin, leftAabbMax;\n  110      gLightBVH.getNodeAABB(leftChildOffset, leftAabbMin, leftAabbMax);\n  111:     float3 rightAabbMin, rightAabbMax;\n  112      gLightBVH.getNodeAABB(rightChildOffset, rightAabbMin, rightAabbMax);\n  113  \n  114:     const float3 aabbMin = min(leftAabbMin, rightAabbMin);\n  115:     const float3 aabbMax = max(leftAabbMax, rightAabbMax);\n  116      gLightBVH.setNodeAABB(nodeOffset, aabbMin, aabbMax);\n  117  \n  118:     float3 coneDirectionSum = gLightBVH.getNodeConeDirection(leftChildOffset) + gLightBVH.getNodeConeDirection(rightChildOffset);\n  119      const float coneDirectionLength = length(coneDirectionSum);\n  120:     const float3 coneDirection = coneDirectionSum / coneDirectionLength;\n  121      const float cosLeftConeAngle = gLightBVH.getNodeCosConeAngle(leftChildOffset);\n  122      const float cosRightConeAngle = gLightBVH.getNodeCosConeAngle(rightChildOffset);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang:\n   70          \\return True if a sample was generated, false otherwise.\n   71      */\n   72:     bool sampleLight(const float3 posW, const float3 normalW, inout SampleGenerator sg, out TriangleLightSample ls)\n   73      {\n   74          if (gScene.lightCollection.isEmpty()) return false;\n   ..\n   95          \\return Probability density with respect to solid angle at the shading point.\n   96      */\n   97:     float evalPdf(float3 posW, float3 normalW, const TriangleHit hit)\n   98      {\n   99          if (gScene.lightCollection.isEmpty()) return 0;\n  ...\n  149      }\n  150  \n  151:     float distanceToAabb(const float3 aabbMin, const float3 aabbMax, const float3 origin)\n  152      {\n  153          // TODO: Store the AABB as center/extent instead of min/max in the tree.\n  154:         const float3 center = (aabbMin + aabbMax) * 0.5f;\n  155          const float distance = sqrt(dot(origin - center, origin - center));\n  156          return distance;// > 1e-3f ? distance : distance + 1e-3f;\n  ...\n  166          \\return Conservative bound on dot(N,L) for L towards any point in the AABB.\n  167      */\n  168:     float boundCosineTerm(const float3 posW, const float3 normalW, const float3 aabbMin, const float3 aabbMax, out float cosThetaCone)\n  169      {\n  170          // TODO: Store the AABB as center/extent instead of min/max in the tree.\n  171:         const float3 center = (aabbMax + aabbMin) * 0.5f;\n  172:         const float3 origin = posW;\n  173:         float3 coneDir;\n  174  \n  175          float sinThetaCone = 0.f;\n  ...\n  179          case SolidAngleBoundMethod::Sphere:\n  180              // Radius of a bounding sphere that encompasses the bounding box.\n  181:             const float3 extent = (aabbMax - aabbMin) * 0.5f;\n  182              const float radius = sqrt(dot(extent, extent));\n  183              boundSphereSubtendedConeAngle(center - origin, radius, sinThetaCone, cosThetaCone);\n  ...\n  193          }\n  194  \n  195:         const float3 L = normalize(center - origin);\n  196          const float cosThetaL = clamp(dot(normalW, L), -1.f, 1.f);    // Cosine of the angle between normal and vector to AABB center.\n  197          const float sinThetaL = sqrt(max(0.f, 1.f - cosThetaL * cosThetaL));\n  ...\n  206          \\return Relative importance of this node.\n  207      */\n  208:     float computeImportance(const float3 posW, const float3 normalW, const uint nodeByteOffset)\n  209      {\n  210:         float3 aabbMin, aabbMax;\n  211          _lightBVH.getNodeAABB(nodeByteOffset, aabbMin, aabbMax);\n  212  \n  ...\n  238          // We might want to add that to support non-diffuse emitters or switch to another representation altogether.\n  239          const float cosConeAngle = _lightBVH.getNodeCosConeAngle(nodeByteOffset);\n  240:         const float3 dirToAabb = ((aabbMin + aabbMax) * 0.5f - posW) / distance;     // TODO: dirToAabb won't be normalized for very short distances, as the computation of distance has a clamp.\n  241          if (cosConeAngle != kInvalidCosConeAngle && cosConeAngle > 0.f) // theta_o + theta_e < pi. (Note: assumes theta_e = pi/2!)\n  242          {\n  243              float sinConeAngle = sqrt(max(0.f, 1.f - cosConeAngle * cosConeAngle));\n  244  \n  245:             const float3 coneDirection = _lightBVH.getNodeConeDirection(nodeByteOffset);    // Normalized direction of dominant light direction in world space.\n  246              const float cosTheta = dot(coneDirection, -dirToAabb);            // theta = Angle between dominant light dir\n  247              const float sinTheta = sqrt(max(0.f, 1.f - cosTheta * cosTheta));\n  ...\n  262          // We clamp the distance to the AABB by half its radius, as\n  263          // \"[t]he center of the cluster is not representative of the emitter positions over short distances.\" -- Conty Estévez and Kulla, Importance Sampling of Many Lights with Adaptive Tree Splitting.\n  264:         const float3 aabbExtent = aabbMax - aabbMin;\n  265          const float halfRadius = max(aabbExtent.x, max(aabbExtent.y, aabbExtent.z)) * 0.5f;\n  266          distance = max(halfRadius, distance);\n  ...\n  278          \\return True if a leaf node was sampled, false otherwise.\n  279      */\n  280:     bool traverseTree(const float3 posW, const float3 normalW, const uint rootNodeByteOffset, inout float u, out float pdf, out uint leafNodeByteOffset)\n  281      {\n  282          // TODO: Figure out a way to use literal constants for the byte offsets to make it easier to read/extend.\n  ...\n  328          \\return True if we found any triangle(s) to sample, false otherwise.\n  329      */\n  330:     float computeTriangleImportance(const float3 posW, const float3 normalW, const uint triangleIndex)\n  331      {\n  332:         float3 p[3];\n  333          gScene.lightCollection.getVtxPositions(triangleIndex, p);\n  334  \n  ...\n  361          \\return True if a triangle was sampled, false otherwise.\n  362      */\n  363:     bool pickTriangle(const float3 posW, const float3 normalW, const uint leafNodeByteOffset, const float u, out float pdf, out uint triangleIndex)\n  364      {\n  365          const uint triangleCount = _lightBVH.getNodeTriangleCount(leafNodeByteOffset);\n  ...\n  410          \\return True if a triangle was sampled, false otherwise.\n  411      */\n  412:     bool sampleLightViaBVH(const float3 posW, const float3 normalW, const uint rootNodeByteOffset, float u, out float pdf, out uint triangleIndex)\n  413      {\n  414          // Traverse BVH to select a leaf node with N triangles based on estimated probabilities during traversal.\n  ...\n  431          \\param[out] currentByteOffset The offset at which the given node is located.\n  432      */\n  433:     float evalBVHTraversalPdf(const float3 posW, const float3 normalW, uint64_t bitmask, out uint currentByteOffset)\n  434      {\n  435          float traversalPdf = 1.0f;\n  ...\n  477          \\return Probability density for selecting the given triangle.\n  478      */\n  479:     float evalNodeSamplingPdf(const float3 posW, const float3 normalW, const uint triangleCount, const uint currentByteOffset, const uint triangleIndex)\n  480      {\n  481          float triangleSelectionPdf = 1.0f;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n  258          // Create GPU buffers.\n  259          assert(mTriangleCount > 0);\n  260:         const size_t bufSize = mTriangleCount * 3 * sizeof(float3);\n  261          const size_t uvBufSize = mTriangleCount * 3 * sizeof(float2);\n  262  \n  ...\n  536          assert(mStagingBufferValid);\n  537          const void* mappedData = mpStagingBuffer->map(Buffer::MapType::Read);\n  538:         const float3* vertexPos = reinterpret_cast<const float3*>(mappedData);\n  539          const float2* vertexTexCrd = reinterpret_cast<const float2*>(reinterpret_cast<uintptr_t>(mappedData) + mpMeshLightsVertexPos->getSize());\n  540          assert(mpTriangleData);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.h:\n   81      */\n   82      struct MeshLightVertex {\n   83:         float3 pos;     ///< World-space position.\n   84          float2 uv;      ///< Texture coordinates in emissive texture (if textured).\n   85      };\n   ..\n   93  \n   94          // Pre-computed quantities.\n   95:         float3          normal = float3(0);                 ///< Triangle's face normal in world space.\n   96:         float3          averageRadiance = float3(0);        ///< Average radiance emitted over triangle. For textured emissive the radiance varies over the surface.\n   97          float           luminousFlux = 0.f;                 ///< Pre-integrated luminous flux (lumens) emitted per side of the triangle for double-sided emitters (total flux is 2x this value).\n   98          float           area = 0.f;                         ///< Triangle area in world space units.\n   ..\n  100          /** Returns the center of the triangle in world space.\n  101          */\n  102:         float3 getCenter() const {\n  103              return (vtx[0].pos + vtx[1].pos + vtx[2].pos) / 3.0f;\n  104          }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.slang:\n   46      uint                                _pad[2];\n   47  \n   48:     ByteAddressBuffer                   meshLightsVertexPos;    ///< Vertex positions in world space for all mesh light triangles. Size: triangleCount * 3 * sizeof(float3).\n   49      ByteAddressBuffer                   meshLightsTexCoords;    ///< Texture coordinates for all mesh light triangles. Size: triangleCount * 3 * sizeof(float2).\n   50      StructuredBuffer<uint>              perMeshInstanceOffset;  ///< Per-mesh instance offset into emissive triangles array. Size: meshInstanceCount * sizeof(uint).\n   ..\n   94          Note that the vertex buffer is non-indexed.\n   95      */\n   96:     float3 getVtxPos(uint vtxIdx)\n   97      {\n   98:         uint address = (vtxIdx * 3) * 4;    // The data is float3 (3*4B per vertex).\n   99          return asfloat(meshLightsVertexPos.Load3(address));\n  100      }\n  ...\n  113          \\param[out] p Position of vertex 0,1,2 in world space.\n  114      */\n  115:     void getVtxPositions(uint triIdx, out float3 p[3])\n  116      {\n  117          p[0] = getVtxPos(triIdx * 3 + 0);\n  ...\n  125          \\return Interpolated position in world space.\n  126      */\n  127:     float3 getPosition(uint triIdx, float3 barycentrics)\n  128      {\n  129          return getVtxPos(triIdx * 3 + 0) * barycentrics[0] +\n  ...\n  137          \\return Interpolated texture coordinate.\n  138      */\n  139:     float2 getTexCoord(uint triIdx, float3 barycentrics)\n  140      {\n  141          return getVtxTexCoord(triIdx * 3 + 0) * barycentrics[0] +\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollectionShared.slang:\n   36  struct EmissiveTriangle\n   37  {\n   38:     float3  normal;             ///< Face normal in world space.\n   39      float   area;               ///< Triangle area in world space.\n   40:     float3  averageRadiance;    ///< Average emitted radiance over the triangle.\n   41      float   flux;               ///< Pre-integrated luminous flux for triangle in lumens.\n   42      uint    lightIdx;           ///< Index into global mesh lights array.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightHelpers.slang:\n   53  struct AnalyticLightSample\n   54  {\n   55:     float3  posW;           ///< Sampled point on the light source in world space (for local lights only).\n   56:     float3  normalW;        ///< Normal of the sampled point on the light source in world space (normalized).\n   57:     float3  dir;            ///< Direction from the shading point to the sampled point on the light in world space (normalized).\n   58      float   distance;       ///< Distance from the shading point to sampled point on the light.\n   59:     float3  Li;             ///< Incident radiance at the shading point (unshadowed). Note: Already divided by the pdf.\n   60      float   pdf;            ///< Probability density function with respect to solid angle at the shading point.\n   61  };\n   ..\n   65      \\return True if the sample is valid, false otherwise.\n   66  */\n   67: bool finalizeAreaLightSample(const float3 shadingPosW, const LightData light, inout AnalyticLightSample ls)\n   68  {\n   69      // Compute direction and distance to light.\n   70      // The distance is clamped to a small epsilon to avoid div-by-zero below.\n   71:     float3 toLight = ls.posW - shadingPosW;\n   72      float distSqr = max(dot(toLight, toLight), kMinLightDistSqr);\n   73      ls.distance = sqrt(distSqr);\n   ..\n   92      \\return True if a sample was generated, false otherwise.\n   93  */\n   94: bool sampleRectAreaLight(const float3 shadingPosW, const LightData light, inout SampleGenerator sg, out AnalyticLightSample ls)\n   95  {\n   96      // Pick a random sample on the quad.\n   97      // The quad is from (-1,-1,0) to (1,1,0) in object space, but may be scaled by its transform matrix.\n   98      float2 u = sampleNext2D(sg);\n   99:     float3 pos = float3(u.x * 2.f - 1.f, u.y * 2.f - 1.f, 0.f);\n  100  \n  101      // Apply model to world transformation matrix.\n  ...\n  104      // Setup world space normal.\n  105      // TODO: Should use light.dirW.\n  106:     float3 tangentW = mul(float4(1.f, 0.f, 0.f, 0.f), light.transMat).xyz;\n  107:     float3 bitangentW = mul(float4(0.f, 1.f, 0.f, 0.f), light.transMat).xyz;\n  108      // TODO: normalW is not correctly oriented for mesh instances that have flipped triangle winding.\n  109      ls.normalW = normalize(cross(tangentW, bitangentW));\n  ...\n  119      \\return True if a sample was generated, false otherwise.\n  120  */\n  121: bool sampleSphereAreaLight(const float3 shadingPosW, const LightData light, inout SampleGenerator sg, out AnalyticLightSample ls)\n  122  {\n  123      // Sample a random point on the sphere.\n  124      // TODO: We should pick a random point on the hemisphere facing the shading point.\n  125      float2 u = sampleNext2D(sg);\n  126:     float3 pos = sample_sphere(u);\n  127  \n  128      // Apply model to world transformation matrix.\n  ...\n  142      \\return True if a sample was generated, false otherwise.\n  143  */\n  144: bool sampleDiscAreaLight(const float3 shadingPosW, const LightData light, inout SampleGenerator sg, out AnalyticLightSample ls)\n  145  {\n  146      // Sample a random point on the disk.\n  147      // TODO: Fix spelling disagreement between disc vs disk.\n  148      float2 u = sampleNext2D(sg);\n  149:     float3 pos = float3(sample_disk(u), 0.f);\n  150  \n  151      // Transform to world space.\n  ...\n  164      \\return True if a sample was generated, false otherwise.\n  165  */\n  166: bool sampleDirectionalLight(const float3 shadingPosW, const LightData light, out AnalyticLightSample ls)\n  167  {\n  168      // A directional light doesn't have a position. Just clear to zero.\n  169:     ls.posW = float3(0, 0, 0);\n  170  \n  171      // For a directional light, the normal is always along its light direction.\n  ...\n  191      \\return True if a sample was generated, false otherwise.\n  192  */\n  193: bool samplePointLight(const float3 shadingPosW, const LightData light, out AnalyticLightSample ls)\n  194  {\n  195      // Get the position and normal.\n  ...\n  199      // Compute direction and distance to light.\n  200      // The distance is clamped to a small epsilon to avoid div-by-zero below.\n  201:     float3 toLight = ls.posW - shadingPosW;\n  202      float distSqr = max(dot(toLight, toLight), kMinLightDistSqr);\n  203      ls.distance = sqrt(distSqr);\n  ...\n  222      \\return True if a sample was generated, false otherwise.\n  223  */\n  224: bool sampleLight(const float3 shadingPosW, const LightData light, inout SampleGenerator sg, out AnalyticLightSample ls)\n  225  {\n  226      // Sample the light based on its type: point, directional, or area.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/UpdateTriangleVertices.cs.slang:\n   36  }\n   37  \n   38: RWByteAddressBuffer gVertexPosOutput;       ///< Vertex positions in world space for all mesh light triangles. Size: triangleCount * 3 * sizeof(float3).\n   39  StructuredBuffer<MeshLightData> gMeshData;  ///< Per-mesh data for emissive meshes. Size: meshCount * sizeof(MeshLightData).\n   40  \n   ..\n   61  \n   62      // Update vertex data.\n   63:     float3 p[3];\n   64      gScene.getVertexPositionsW(meshInstanceID, triangleIndex, p);\n   65  \n   ..\n   72      // Update triangle data.\n   73      float triangleArea;\n   74:     float3 faceNormal = gScene.computeFaceNormalAndAreaW(meshInstanceID, p, triangleArea);\n   75  \n   76      gTriangleData[triIdx].normal = faceNormal;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n   85          \\return Returns f(wo, wi) * dot(wi, n).\n   86      */\n   87:     float3 eval(float3 wo, float3 wi);\n   88  \n   89      /** Samples the BxDF.\n   ..\n   96          \\return Returns true if successful.\n   97      */\n   98:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg);\n   99  \n  100      /** Evaluates the BxDF directional pdf for sampling incident direction wi.\n  ...\n  103          \\return Returns the pdf with respect to solid angle for sampling incident direction wi.\n  104      */\n  105:     float evalPdf(float3 wo, float3 wi);\n  106  }\n  107  \n  ...\n  111  struct DiffuseReflectionLambert : IBxDF\n  112  {\n  113:     float3 albedo;  ///< Diffuse albedo.\n  114  \n  115:     float3 eval(float3 wo, float3 wi)\n  116      {\n  117:         if (wo.z <= 0 || wi.z <= 0) return float3(0);\n  118  \n  119          return M_1_PI * albedo * wi.z;\n  120      }\n  121  \n  122:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  123      {\n  124          if (wo.z <= 0) return false;\n  ...\n  130      }\n  131  \n  132:     float evalPdf(float3 wo, float3 wi)\n  133      {\n  134          if (wo.z <= 0 || wi.z <= 0) return 0;\n  ...\n  143  struct DiffuseReflectionDisney : IBxDF\n  144  {\n  145:     float3 albedo;          ///< Diffuse albedo.\n  146      float linearRoughness;  ///< Roughness before remapping.\n  147  \n  148:     float3 eval(float3 wo, float3 wi)\n  149      {\n  150:         if (wo.z <= 0 || wi.z <= 0) return float3(0);\n  151  \n  152          return evalWeight(wo, wi) * M_1_PI * wi.z;\n  153      }\n  154  \n  155:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  156      {\n  157          if (wo.z <= 0) return false;\n  ...\n  163      }\n  164  \n  165:     float evalPdf(float3 wo, float3 wi)\n  166      {\n  167          if (wo.z <= 0 || wi.z <= 0) return 0;\n  ...\n  173  \n  174      // Returns f(wo, wi) * pi.\n  175:     float3 evalWeight(float3 wo, float3 wi)\n  176      {\n  177:         float3 h = normalize(wo + wi);\n  178          float wiDotH = dot(wi, h);\n  179          float fd90 = 0.5 + 2 * wiDotH * wiDotH * linearRoughness;\n  ...\n  191  struct DiffuseReflectionFrostbite : IBxDF\n  192  {\n  193:     float3 albedo;          ///< Diffuse albedo.\n  194      float linearRoughness;  ///< Roughness before remapping.\n  195  \n  196:     float3 eval(float3 wo, float3 wi)\n  197      {\n  198:         if (wo.z <= 0 || wi.z <= 0) return float3(0);\n  199  \n  200          return evalWeight(wo, wi) * M_1_PI * wi.z;\n  201      }\n  202  \n  203:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  204      {\n  205          if (wo.z <= 0) return false;\n  ...\n  211      }\n  212  \n  213:     float evalPdf(float3 wo, float3 wi)\n  214      {\n  215          if (wo.z <= 0 || wi.z <= 0) return 0;\n  ...\n  221  \n  222      // Returns f(wo, wi) * pi.\n  223:     float3 evalWeight(float3 wo, float3 wi)\n  224      {\n  225:         float3 h = normalize(wo + wi);\n  226          float wiDotH = dot(wi, h);\n  227          float energyBias = lerp(0, 0.5, linearRoughness);\n  ...\n  239  struct SpecularReflectionMicrofacet : IBxDF\n  240  {\n  241:     float3 albedo;  ///< Specular albedo.\n  242      float alpha;    ///< GGX width parameter.\n  243  \n  244:     float3 eval(float3 wo, float3 wi)\n  245      {\n  246:         if (wo.z <= kMinCosTheta || wi.z <= kMinCosTheta) return float3(0);\n  247  \n  248:         float3 h = normalize(wo + wi);\n  249          float woDotH = dot(wo, h);\n  250  \n  ...\n  255          float G = evalMaskingSmithGGXCorrelated(alpha, wo.z, wi.z);\n  256  #endif\n  257:         float3 F = evalFresnelSchlick(albedo, 1, woDotH);\n  258          return F * D * G * 0.25 / wo.z;\n  259      }\n  260  \n  261:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  262      {\n  263          if (wo.z <= kMinCosTheta) return false;\n  ...\n  265          // Sample the GGX distribution to find a microfacet normal (half vector).\n  266  #if EnableVNDFSampling\n  267:         float3 h = sampleGGX_VNDF(alpha, wo, sampleNext2D(sg), pdf);    // pdf = G1(wo) * D(h) * max(0,dot(wo,h)) / wo.z\n  268  #else\n  269:         float3 h = sampleGGX_NDF(alpha, sampleNext2D(sg), pdf);         // pdf = D(h) * h.z\n  270  #endif\n  271  \n  ...\n  290          float GOverG1wo = G * (1.f + evalLambdaGGX(alpha * alpha, wo.z));\n  291  #endif\n  292:         float3 F = evalFresnelSchlick(albedo, 1, woDotH);\n  293  \n  294          pdf /= (4 * woDotH); // Jacobian of the reflection operator.\n  ...\n  302      }\n  303  \n  304:     float evalPdf(float3 wo, float3 wi)\n  305      {\n  306          if (wo.z <= kMinCosTheta || wi.z <= kMinCosTheta) return 0;\n  307  \n  308:         float3 h = normalize(wo + wi);\n  309          float woDotH = dot(wo, h);\n  310  #if EnableVNDFSampling\n  ...\n  324      float eta;      ///< Relative index of refraction (e.g. etaI / etaT).\n  325  \n  326:     float3 eval(float3 wo, float3 wi)\n  327      {\n  328:         if (wo.z <= kMinCosTheta || abs(wi.z) <= kMinCosTheta) return float3(0);\n  329  \n  330          bool isReflection = wi.z > 0;\n  331  \n  332:         float3 h =\n  333              isReflection ?\n  334              normalize(wo + wi) :\n  ...\n  358      }\n  359  \n  360:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  361      {\n  362          if (wo.z <= kMinCosTheta) return false;\n  ...\n  364          // Sample the GGX distribution of (visible) normals. This is our half vector.\n  365  #if EnableVNDFSampling\n  366:         float3 h = sampleGGX_VNDF(alpha, wo, sampleNext2D(sg), pdf);    // pdf = G1(wo) * D(h) * max(0,dot(wo,h)) / wo.z\n  367  #else\n  368:         float3 h = sampleGGX_NDF(alpha, sampleNext2D(sg), pdf);         // pdf = D(h) * h.z\n  369  #endif\n  370  \n  ...\n  425      }\n  426  \n  427:     float evalPdf(float3 wo, float3 wi)\n  428      {\n  429          if (wo.z <= kMinCosTheta || abs(wi.z) <= kMinCosTheta) return 0;\n  ...\n  431          bool isReflection = wi.z > 0;\n  432  \n  433:         float3 h =\n  434              isReflection ?\n  435              normalize(wo + wi) :\n  ...\n  524      }\n  525  \n  526:     float3 eval(float3 wo, float3 wi)\n  527      {\n  528:         float3 result = 0;\n  529          if (pDiffuseReflection > 0) result += (1 - specularTransmission) * diffuseReflection.eval(wo, wi);\n  530          if (pSpecularReflection > 0) result += (1 - specularTransmission) * specularReflection.eval(wo, wi);\n  ...\n  541          \\return Returns f(wo, wi) * dot(wi, n).\n  542      */\n  543:     float3 eval(float3 wo, float3 wi, uint lobes)\n  544      {\n  545          // TODO: This won't work correctly for transmission since the lobes are not separated.\n  546:         float3 result = 0;\n  547          if (pDiffuseReflection > 0 && (lobes & (uint)LobeType::DiffuseReflection) != 0) result += (1 - specularTransmission) * diffuseReflection.eval(wo, wi);\n  548          if (pSpecularReflection > 0 && (lobes & (uint)LobeType::SpecularReflection) != 0) result += (1 - specularTransmission) * specularReflection.eval(wo, wi);\n  ...\n  551      }\n  552  \n  553:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  554      {\n  555          float uSelect = sampleNext1D(sg);\n  ...\n  586      }\n  587  \n  588:     float evalPdf(float3 wo, float3 wi)\n  589      {\n  590          float pdf = 0;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/Fresnel.slang:\n   38      \\return Fresnel term.\n   39  */\n   40: float3 evalFresnelSchlick(float3 f0, float3 f90, float cosTheta)\n   41  {\n   42      return f0 + (f90 - f0) * pow(max(1 - cosTheta, 0), 5); // Clamp to avoid NaN if cosTheta = 1+epsilon\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang:\n   59  struct GeometryParams\n   60  {\n   61:     float3 posW;                ///< World-space position.\n   62:     float3 V;                   ///< Normalized view direction in world space.\n   63      float2 uv;                  ///< Texture coordinate at hit point, or 0 if not available.\n   64:     float3 faceN;               ///< Face normal in world space.\n   65  \n   66      // Surface frame in world space. The axes (T,B,N) form a right-handed orthonormal basis.\n   67      // The normal and bitangent are normally provided by the framework, while tangent is computed based on those.\n   68:     float3 N;                   ///< Shading normal (z-axis in local frame).\n   69:     float3 B;                   ///< Shading bitangent (y-axis in local frame).\n   70:     float3 T;                   ///< Shading tangent (x-axis in local frame).\n   71  };\n   72  \n   ..\n  101      \\return GeometryParams struct.\n  102  */\n  103: GeometryParams prepareGeometryParams(float3 worldPos, float3 viewDir, float3 normal, float3 bitangent, float3 faceNormal, float2 texCrd = float2(0, 0))\n  104  {\n  105      GeometryParams geoParams;\n  ...\n  171  /** Helper function to transform vector v from the local surface frame to world space.\n  172  */\n  173: float3 fromLocal(float3 v, ShadingData sd)\n  174  {\n  175      return sd.T * v.x + sd.B * v.y + sd.N * v.z;\n  ...\n  178  /** Helper function to transform vector v from the local surface frame to world space.\n  179  */\n  180: float3 fromLocal(float3 v, GeometryParams sd)\n  181  {\n  182      return sd.T * v.x + sd.B * v.y + sd.N * v.z;\n  ...\n  185  /** Helper function to transform world space vector v to the local surface frame.\n  186  */\n  187: float3 toLocal(float3 v, ShadingData sd)\n  188  {\n  189:     return float3(dot(v, sd.T), dot(v, sd.B), dot(v, sd.N));\n  190  }\n  191  \n  192  /** Helper function to transform world space vector v to the local surface frame.\n  193  */\n  194: float3 toLocal(float3 v, GeometryParams sd)\n  195  {\n  196:     return float3(dot(v, sd.T), dot(v, sd.B), dot(v, sd.N));\n  197  }\n  198  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n   58  struct BSDFSample\n   59  {\n   60:     float3  wi;             ///< Incident direction in world space (normalized).\n   61      float   pdf;            ///< pdf with respect to solid angle for sampling incident direction wi.\n   62:     float3  weight;         ///< Sample weight f(wo, wi) * dot(wi, n) / pdf(wi).\n   63      uint    lobe;           ///< Sampled lobe. This is a combination of LobeType flags (see BxDF.slang).\n   64  };\n   ..\n   78      \\return (f_d + f_r) * saturate(dot(N,L))\n   79  */\n   80: float3 evalBSDFCosine(const ShadingData sd, float3 L, uint lobes = (uint)LobeType::All)\n   81  {\n   82:     float3 wo = toLocal(sd.V, sd);\n   83:     float3 wi = toLocal(L, sd);\n   84  \n   85      FalcorBSDF bsdf;\n   ..\n  101  bool sampleBSDF(const ShadingData sd, inout SampleGenerator sg, out BSDFSample result)\n  102  {\n  103:     float3 wo = toLocal(sd.V, sd);\n  104:     float3 wi;\n  105  \n  106      FalcorBSDF bsdf;\n  ...\n  117      \\return Probability density with respect to solid angle from the shading point.\n  118  */\n  119: float evalPdfBSDF(const ShadingData sd, const float3 L)\n  120  {\n  121:     float3 wo = toLocal(sd.V, sd);\n  122:     float3 wi = toLocal(L, sd);\n  123  \n  124      FalcorBSDF bsdf;\n  ...\n  136  bool sampleBSDF_Reference(const ShadingData sd, inout SampleGenerator sg, out BSDFSample result)\n  137  {\n  138:     float3 wo = toLocal(sd.V, sd);\n  139:     float3 wi = sample_cosine_hemisphere_concentric(sampleNext2D(sg), result.pdf); // pdf = cos(theta) / pi\n  140  \n  141      if (result.pdf == 0.f) return false;\n  ...\n  171      \\return f_d\n  172  */\n  173: float3 evalDiffuseLambert(const ShadingData sd)\n  174  {\n  175      return sd.diffuse.rgb * (1 / M_PI);\n  ...\n  185      \\return f_d\n  186  */\n  187: float3 evalDiffuseDisney(const ShadingData sd, float NdotL, float NdotV, float LdotH)\n  188  {\n  189      float fd90 = 0.5 + 2 * LdotH * LdotH * sd.linearRoughness;\n  ...\n  204      \\return f_d\n  205  */\n  206: float3 evalDiffuseFrostbite(const ShadingData sd, float NdotL, float NdotV, float LdotH)\n  207  {\n  208      float energyBias = lerp(0, 0.5, sd.linearRoughness);\n  ...\n  223      \\return f_d\n  224  */\n  225: float3 evalDiffuse(const ShadingData sd, float NdotL, float NdotV, float LdotH)\n  226  {\n  227  #if DiffuseBrdf == DiffuseBrdfLambert\n  ...\n  282      \\return f_r\n  283  */\n  284: float3 evalSpecular(const ShadingData sd, float NdotL, float NdotV, float NdotH, float LdotH)\n  285  {\n  286      float alpha = max(kMinGGXAlpha, sd.ggxAlpha);    // TODO: Derive appropriate epsilon\n  ...\n  291      float G = evalMaskingSmithGGXCorrelated_PreDivided(alpha, NdotL, NdotV);\n  292  #endif\n  293:     float3 F = evalFresnelSchlick(sd.specular, 1, LdotH);\n  294      return D * G * F;   // Note: G already includes 1/(4*NdotL*NdotV) factor.\n  295  }\n  ...\n  302      \\return f_d + f_r\n  303  */\n  304: float3 evalBSDF(const ShadingData sd, float3 L, uint lobes = (uint)LobeType::All)\n  305  {\n  306      // Check that L and V are in the positive hemisphere.\n  307      // The G term on the correlated form is not robust for NdotL = NdotV = 0.0.\n  308      float NdotL = dot(sd.N, L);\n  309:     if (min(sd.NdotV, NdotL) < kMinCosTheta) return float3(0, 0, 0);\n  310  \n  311      // Pre-compute half vector and dot products.\n  312      // TODO: Using saturate() here to be sure all dot products are within bounds.\n  313      // Some can be replaced by clamps on the upper end only (since we check NdotV and NdotL above) or removed altogether.\n  314:     float3 H = normalize(sd.V + L);\n  315      float NdotH = saturate(dot(sd.N, H));\n  316      float LdotH = saturate(dot(L, H));\n  ...\n  319  \n  320      // Evaluate diffuse and specular terms to compute total throughput.\n  321:     float3 thp = 0;\n  322      if ((lobes & (uint)LobeType::DiffuseReflection) != 0) thp += evalDiffuse(sd, NdotL, NdotV, LdotH);\n  323      if ((lobes & (uint)LobeType::SpecularReflection) != 0) thp += evalSpecular(sd, NdotL, NdotV, NdotH, LdotH);\n  ...\n  333      \\return (f_d + f_r) * saturate(dot(N,L))\n  334  */\n  335: float3 evalBSDFCosine(const ShadingData sd, float3 L, uint lobes = (uint)LobeType::All)\n  336  {\n  337      return evalBSDF(sd, L, lobes) * saturate(dot(sd.N, L));\n  ...\n  350      \\return Sampled direction in world space.\n  351  */\n  352: float3 sampleHemisphereCosine(ShadingData sd, float2 u, out float pdf)\n  353  {\n  354:     float3 dir = sample_cosine_hemisphere_concentric(u, pdf);\n  355      return fromLocal(dir, sd);\n  356  }\n  ...\n  368      \\return Sampled direction in world space.\n  369  */\n  370: float3 sampleNdfGGX_Walter(const ShadingData sd, const float2 u, const float alpha, out float pdf, out float VdotH, out float NdotH)\n  371  {\n  372      // Draw sample from D(H) * NdotH.\n  ...\n  378  \n  379      // Convert half vector to world space.\n  380:     float3 H = float3(sinThetaH * cos(phiH), sinThetaH * sin(phiH), cosThetaH);\n  381      H = fromLocal(H, sd);\n  382  \n  ...\n  385  \n  386      // Compute incident direction L by reflecting V about H.\n  387:     float3 L = normalize(2.f * VdotH * H - sd.V);   // Note: L is already of unit length, but normalize to reduce the risk of round-off errors.\n  388  \n  389      // Evaluate the pdf.\n  ...\n  408      \\return Probability density with respect to solid angle from the shading point.\n  409  */\n  410: float evalPdfDiffuse(const ShadingData sd, const float3 L)\n  411  {\n  412      // We're using cosine-weighted sampling over the hemisphere.\n  ...\n  433      {\n  434          result.pdf = 0.f;\n  435:         result.weight = float3(0);\n  436          return;\n  437      }\n  ...\n  447      \\return Probability density with respect to solid angle from the shading point.\n  448  */\n  449: float evalPdfSpecular(const ShadingData sd, const float3 L)\n  450  {\n  451      // We're never generating samples for back-facing V or L.\n  ...\n  456      }\n  457  \n  458:     float3 H = normalize(sd.V + L);\n  459      float NdotH = saturate(dot(sd.N, H));\n  460      float VdotH = saturate(dot(sd.V, H));\n  ...\n  483      {\n  484          result.pdf = 0.f;\n  485:         result.weight = float3(0);\n  486          return;\n  487      }\n  ...\n  500      float G = evalMaskingSmithGGXCorrelated_PreDivided(alpha, NdotL, NdotV);\n  501  #endif\n  502:     float3 F = evalFresnelSchlick(sd.specular, 1, VdotH);\n  503      result.weight = F * (G * NdotL * VdotH * 4.f) / NdotH;\n  504      //result.weight = evalBSDFCosine(sd, result.wi, (uint)LobeType::SpecularReflection) / result.pdf;\n  ...\n  511      \\return Probability density with respect to solid angle from the shading point.\n  512  */\n  513: float evalPdfBSDF(const ShadingData sd, const float3 L)\n  514  {\n  515      float pDiffuse = 0.5f; // TODO: Better probabilities\n  ...\n  580  {\n  581      float pdf;\n  582:     float3 dir = sampleHemisphereCosine(sd, sampleNext2D(sg), pdf); // pdf = cos(theta) / pi\n  583  \n  584      // Check that L and V are in the positive hemisphere, reset pdf to zero otherwise.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/Microfacet.slang:\n   71      \\return Sampled half vector in local space.\n   72  */\n   73: float3 sampleGGX_NDF(float alpha, float2 u, out float pdf)\n   74  {\n   75      float alphaSqr = alpha * alpha;\n   ..\n   80  \n   81      pdf = evalPdfGGX_NDF(alpha, cosTheta);\n   82:     return float3(cos(phi) * r, sin(phi) * r, cosTheta);\n   83  }\n   84  \n   ..\n   91      \\return D_V(h) = G1(wo) * D(h) * max(0,dot(wo,h)) / wo.z\n   92  */\n   93: float evalPdfGGX_VNDF(float alpha, float3 wo, float3 h)\n   94  {\n   95      float G1 = evalG1GGX(alpha * alpha, wo.z);\n   ..\n  108      \\return Sampled half vector in local space, in the positive hemisphere.\n  109  */\n  110: float3 sampleGGX_VNDF(float alpha, float3 wo, float2 u, out float pdf)\n  111  {\n  112      float alpha_x = alpha, alpha_y = alpha;\n  113  \n  114      // Transform the view vector to the hemisphere configuration.\n  115:     float3 Vh = normalize(float3(alpha_x * wo.x, alpha_y * wo.y, wo.z));\n  116  \n  117      // Construct orthonormal basis (Vh,T1,T2).\n  118:     float3 T1 = (Vh.z < 0.9999f) ? normalize(cross(float3(0, 0, 1), Vh)) : float3(1, 0, 0); // TODO: fp32 precision\n  119:     float3 T2 = cross(Vh, T1);\n  120  \n  121      // Parameterization of the projected area of the hemisphere.\n  ...\n  128  \n  129      // Reproject onto hemisphere.\n  130:     float3 Nh = t1 * T1 + t2 * T2 + sqrt(max(0.f, 1.f - t1 * t1 - t2 * t2)) * Vh;\n  131  \n  132      // Transform the normal back to the ellipsoid configuration. This is our half vector.\n  133:     float3 h = normalize(float3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.f, Nh.z)));\n  134  \n  135      pdf = evalPdfGGX_VNDF(alpha, wo, h);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang:\n   78      */\n   79      // should really remove this one, but may be good to have for other users, or code readers?!!!\n   80:     float computeLOD(in float triLODConstant, in float hitT, in float3 rayDir, in float3 normal, in float textureWidth, in float textureHeight)     // Note: call propagate() before computeLOD()\n   81      {\n   82          float lambda = triLODConstant; // constant per triangle\n   ..\n  103          \\param[in] normal Normal at the hit point.\n  104      */\n  105:     float computeLOD(in float triLODConstant, in float hitT, in float3 rayDir, in float3 normal)\n  106      {\n  107          float lambda = triLODConstant; // constant per triangle\n  ...\n  147      \\return Triangle LOD value.\n  148  */\n  149: float computeRayConeTriangleLODValue(in float3 vertices[3], in float2 txcoords[3], in float3x3 worldMat, out float3 normalizedNormalW)\n  150  {\n  151      float2 tx10 = txcoords[1] - txcoords[0];\n  ...\n  155      // we need the area of the triangle, which is length(triangleNormal) in worldspace, and I\n  156      // could not figure out a way with fewer than two 3x3 mtx multiplies for ray cones.\n  157:     float3 edge10 = mul(vertices[1] - vertices[0], worldMat);\n  158:     float3 edge20 = mul(vertices[2] - vertices[0], worldMat);\n  159  \n  160:     float3 triangleNormal = cross(edge10, edge20);              // in world space, by design\n  161      float oneDivPa = 1.0 / length(triangleNormal);\n  162      normalizedNormalW = triangleNormal * oneDivPa;              // normalize face normal with oneDivPa\n  ...\n  171      \\return Spread angle at hit point.\n  172  */\n  173: float computeScreenSpaceSurfaceSpreadAngle(in float3 positionW, in float3 normalW, in float betaFactorK1 = 1.0, in float betaFactorK2 = 0.0)\n  174  {\n  175:     float3 dNdx = ddx(normalW);\n  176:     float3 dNdy = ddy(normalW);\n  177:     float3 dPdx = ddx(positionW);\n  178:     float3 dPdy = ddy(positionW);\n  179      \n  180     float beta = sqrt(dot(dNdx, dNdx) + dot(dNdy, dNdy)) * sign(dot(dNdx, dPdx) + dot(dNdy, dPdy));\n  ...\n  195  struct RayDiff\n  196  {\n  197:     float3 dOdx;\n  198:     float3 dOdy;\n  199:     float3 dDdx;\n  200:     float3 dDdy;\n  201  \n  202:     float3 getdOdx() { return dOdx; }   // these are not super-useful right now, but TODO to add FP16 version later on\n  203:     float3 getdOdy() { return dOdy; }\n  204:     float3 getdDdx() { return dDdx; }\n  205:     float3 getdDdy() { return dDdy; }\n  206  \n  207      /** Propagate the ray differential t distances away\n  ...\n  211          \\param[in] N The normal at the hit point.\n  212      */\n  213:     RayDiff propagate(in float3 O, in float3 D, in float t, in float3 N)\n  214      {\n  215  #ifdef CLASSIC_IGEHY\n  216:         float3 dOdx = getdOdx() + t * getdDdx();    // part of Igehy Equation 10\n  217:         float3 dOdy = getdOdy() + t * getdDdy();\n  218  \n  219          float rcpDN = 1.0 / dot(D, N);              // Igehy Equation 10 and 12\n  ...\n  223          dOdy += D * dtdy;\n  224  #else\n  225:         float3 dOdx = getdOdx(); // when not using CLASSIC_IGEHY, there is no propagate step, so we leave the ray diff unchanged.\n  226:         float3 dOdy = getdOdy();\n  227  #endif\n  228          return RayDiff.create(dOdx, dOdy, getdDdx(), getdDdy());\n  ...\n  235          \\param[in] dDdy The differential ray direction in y.\n  236      */\n  237:     static RayDiff create(in float3 dOdx, in float3 dOdy, in float3 dDdx, in float3 dDdy)\n  238      {\n  239          RayDiff rd;\n  ...\n  255  \n  256      the getRayDirectionDifferentials() function differentiates normalize(getCameraRayDir()), where getCameraRayDir() is:\n  257:     float3 getCameraRayDir(uint2 pixel, uint2 frameDim)\n  258      {\n  259          float2 p = (pixel.xy + float2(0.5f, 0.5f)) / frameDim.xy; // Pixel center on image plane in [0,1] where (0,0) is top-left\n  ...\n  262      }\n  263  */\n  264: void getRayDirectionDifferentials(in float3 nonNormalizedCameraRaydir, in float3 cameraRight, in float3 cameraUp, in float2 viewportDims, out float3 dDdx, out float3 dDdy)\n  265  {\n  266      // Igehy Equation 8, adapted to getRayDirection() above\n  ...\n  287      \\param[out] dUVdy Differential texture coordinates in y.\n  288  */\n  289: void computeDifferentialsBarysAndUVs(in RayDiff rayDiff, in float3 rayDir, in float3 verticesW[3], in float2 txcoords[3],\n  290:     in float3 triangleEdge10, in float3 triangleEdge20, in float3 faceNormalW, in float hitT,\n  291      out float2 dBarydx, out float2 dBarydy, out float2 dUVdx, out float2 dUVdy)\n  292  {\n  293  #ifdef CLASSIC_IGEHY\n  294:     float3 Nu = cross(verticesW[2] - verticesW[1], faceNormalW);    // Igehy \"Normal-Interpolated Triangles\", page 182 SIGGRAPH 1999\n  295:     float3 Nv = cross(-triangleEdge20, faceNormalW);\n  296  \n  297      float4 Lu = float4(Nu, -dot(Nu, verticesW[1]));                  // plane equations for the triangle edges\n  ...\n  307  \n  308  #else        // optimized implementation from Section 20.3.2.2 from Ray Tracing Gems\n  309:     float3 Cu = cross(triangleEdge20, rayDir);\n  310:     float3 Cv = cross(rayDir, triangleEdge10);\n  311  \n  312      float k = dot(Cu, triangleEdge10)\n  313      float oneDivK = abs(k) > 0.0001f ? rcp(k) : 0.0f;\n  314  \n  315:     float3 qx = rayDiff.getdOdx() + hitT * rayDiff.getdDdx();\n  316:     float3 qy = rayDiff.getdOdy() + hitT * rayDiff.getdDdy();\n  317  \n  318      dBarydx.y = dot(Cu, qx) * oneDivK;                // du / dx\n  ...\n  344      \\param[in] normals The triangle's three normalized normals in world space.\n  345  */\n  346: void reflectRayDifferential(inout RayDiff rayDiff, in float3 rayDir, in float3 nonNormalizedInterpolatedNormalW,\n  347:     in float3 normalizedInterpolatedNormalW, in float2 dBarydx, in float2 dBarydy,\n  348:     in float3 triangleEdge10, in float3 triangleEdge20, in float3 normals[3])\n  349  {\n  350      // differential normal (see \"Normal-Interpolated Triangles\" in Igehy's paper)\n  351      float NN = dot(nonNormalizedInterpolatedNormalW, nonNormalizedInterpolatedNormalW); // normal must be unnormalized! (otherwise NN would be 1)\n  352      float rcpNN = 1.0 / (NN * sqrt(NN));\n  353:     float3 n02 = normals[0] - normals[2];\n  354:     float3 n12 = normals[1] - normals[2];\n  355:     float3 dndx = dBarydx.x * n02 + dBarydx.y * n12;\n  356:     float3 dndy = dBarydy.x * n02 + dBarydy.y * n12;\n  357:     float3 dNdx = (dndx * NN - nonNormalizedInterpolatedNormalW * dot(nonNormalizedInterpolatedNormalW, dndx)) * rcpNN;\n  358:     float3 dNdy = (dndy * NN - nonNormalizedInterpolatedNormalW * dot(nonNormalizedInterpolatedNormalW, dndy)) * rcpNN;\n  359  \n  360      // differential of reflected ray direction (perfect specular reflection) -- Equation 14 and 15 in Igehy's paper\n  ...\n  363      float DN = dot(rayDir, normalizedInterpolatedNormalW);\n  364  #ifdef CLASSIC_IGEHY\n  365:     float3 dOdx = rayDiff.getdOdx();\n  366:     float3 dOdy = rayDiff.getdOdy();\n  367  #else   \n  368      float dBarydx_z = -dBarydx.x - dBarydx.y;   // we usually only need u,v and not w=1-u-v, but here we need it\n  ...\n  372      // but in the rest of the paper we used P = u * P_0 + v * P_1 + w * P_2,\n  373      // which means that in Equation 22, du/dx is dBaryDx.y (that is dv/dx) and dv/dx is dBarydx_z (that dw/dx)\n  374:     float3 dOdx = triangleEdge10 * dBarydx.y + triangleEdge20 * dBarydx_z;\n  375:     float3 dOdy = triangleEdge10 * dBarydy.y + triangleEdge20 * dBarydy_z;\n  376  #endif\n  377:     float3 dDdx = rayDiff.getdDdx() - 2.0 * (dNdx * DN + normalizedInterpolatedNormalW * dDNdx);\n  378:     float3 dDdy = rayDiff.getdDdy() - 2.0 * (dNdy * DN + normalizedInterpolatedNormalW * dDNdy);\n  379      rayDiff = RayDiff.create(dOdx, dOdy, dDdx, dDdy);\n  380  }\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/InteriorListHelpers.slang:\n   58      */\n   59      [mutating]\n   60:     bool handleAnyHit(uint materialID, float3 faceNormalW)\n   61      {\n   62          const uint nestedPriority = gScene.materials[materialID].getNestedPriority();\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/LoadShadingData.slang:\n   65  /** Returns the primary ray's direction.\n   66  */\n   67: float3 getPrimaryRayDir(uint2 pixel, uint2 frameDim, const Camera camera)\n   68  {\n   69  #if !USE_VBUFFER\n   ..\n   94      sd = {};\n   95  \n   96:     float3 rayDir = getPrimaryRayDir(pixel, frameDim, camera);\n   97      bool valid = false;\n   98  \n   ..\n  122      {\n  123          // Load geometry and material parameters from G-buffer.\n  124:         float3 normal = gWorldShadingNormal[pixel].xyz;\n  125:         float3 bitangent = isValid(gWorldShadingBitangent) ? gWorldShadingBitangent[pixel].xyz : perp_stark(normal);\n  126:         float3 faceNormal = gWorldFaceNormal[pixel].xyz;\n  127          GeometryParams geoParams = prepareGeometryParams(worldPos.xyz, -rayDir, normal, bitangent, faceNormal);\n  128  \n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathData.slang:\n   34  {\n   35      float4 rayParams;           ///< Shadow ray normalized direction (xyz) and distance (w).\n   36:     float3 Lr;                  ///< Unoccluded contribution from the shadow ray (xyz).\n   37      float _pad;\n   38  };\n   ..\n   66  \n   67      // Scatter ray\n   68:     float3  origin;             ///< Origin of the shadow/scatter rays. Note: This field is only loaded if MIS is enabled.\n   69:     float3  transmissionOrigin; ///< Origin of the scatter ray after a transmission event. Note: This is write only.\n   70:     float3  dir;                ///< Scatter ray normalized direction.\n   71:     float3  thp;                ///< Path throughput.\n   72      float   pdf;                ///< Pdf for generating the scatter ray. Note: This field is only loaded/stored if MIS is enabled.\n   73:     float3  normal;             ///< Shading normal at the scatter ray origin. Note: This field is only loaded/stored if MIS is enabled.\n   74      HitInfo hit;                ///< Hit information for the scatter ray. This is populated by the tracing pass. Only valid if the flag 'scatterHit' is set.\n   75  \n   76      // Common data\n   77:     float3  L;                  ///< Accumulated path contribution. Note: This field is only used in the wavefront code. TODO: Move it out or make sure it's used by megakernel.\n   78  \n   79      InteriorList interiorList;  ///< Interior list. Keeping track of a stack of materials with medium properties.\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathTracerHelpers.slang:\n   40  __exported import RenderPasses.Shared.PathTracer.PathTracerParams;\n   41  \n   42: static const float3 kDefaultBackgroundColor = float3(0, 0, 0);\n   43  static const float kRayTMax = FLT_MAX;\n   44  \n   ..\n   57  {\n   58      // Light sample\n   59:     float3  dir;            ///< Direction from the shading point to the light sample in world space (normalized). This is used for BRDF evaluation.\n   60      float   distance;       ///< Distance from the shading point to the light sample.\n   61:     float3  Li;             ///< Incident radiance at the shading point (unshadowed). Note: Already divided by the pdf and multiplied by MIS weight.\n   62      float   pdf;            ///< Probability density function with respect to solid angle (pdf == 0 for invalid samples).\n   63  \n   64      // Shadow ray parameters\n   65:     float3  rayDir;         ///< Ray direction for visibility evaluation (normalized). This may differ from 'dir' due to ray offsets.\n   66      float   rayDistance;    ///< Ray distance for visibility evaluation. This may differ from 'distance' due to ray offsets.\n   67  };\n   ..\n   74      \\return Color (rgb).\n   75  */\n   76: float3 evalBackground(const EnvProbe envProbe, float3 dir)\n   77  {\n   78      return kUseEnvBackground ? evalEnvProbe(envProbe, dir) : kDefaultBackgroundColor;\n   ..\n  163      \\return Probability density with respect to solid angle from the shading point.\n  164  */\n  165: float evalPdfScatter(const ShadingData sd, const float3 dir)\n  166  {\n  167      if (kUseBRDFSampling)\n  ...\n  192      \\return True if a sample was generated, false otherwise.\n  193  */\n  194: bool sampleSceneLights(const PathTracerParams params, const EnvProbe envProbe, const EmissiveLightSampler emissiveSampler, const ShadingData sd, const float3 rayOrigin, const uint numSamples, inout SampleGenerator sg, out SceneLightSample ls)\n  195  {\n  196      // Set relative probabilities of the different sampling techniques.\n  ...\n  232              // Evaluate emitted radiance from the sampled direction.\n  233              // TODO: Move this into EnvProbe.slang\n  234:             float3 Le = evalEnvProbe(envProbe, lightSample.wi);\n  235  \n  236              // Evaluate MIS with BRDF sampling as the other sampling strategy.\n  ...\n  247              ls.rayDistance = ls.distance = kRayTMax;\n  248              ls.pdf = pdf;\n  249:             ls.Li = pdf > 0.f ? Le * misWeight / (pdf * numSamples) : float3(0);\n  250  \n  251              return true;\n  ...\n  309              // Compute offset light sample position to reduce self-intersections at the light.\n  310              // We compute the shadow ray parameters based on the offset position.\n  311:             float3 offsetPos = computeRayOrigin(lightSample.posW, lightSample.normalW);\n  312:             float3 toLight = offsetPos - rayOrigin;\n  313              ls.rayDistance = length(toLight);\n  314              ls.rayDir = normalize(toLight);\n  ...\n  318              ls.distance = lightSample.distance;\n  319              ls.pdf = pdf;\n  320:             ls.Li = pdf > 0.f ? lightSample.Le * misWeight / (pdf * numSamples) : float3(0);\n  321  \n  322              return true;\n  ...\n  348      if (valid && any(ls.Li > 0.f))\n  349      {\n  350:         float3 Lr = evalBSDFCosine(sd, ls.dir) * ls.Li * path.thp;\n  351          if (any(Lr > 0.f))\n  352          {\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/Animation.cpp:\n   59          float factor = keyframeDuration != 0 ? (float)(localTime / keyframeDuration) : 1;\n   60  \n   61:         float3 translation = lerp(start.translation, end.translation, factor);\n   62:         float3 scaling = lerp(start.scaling, end.scaling, factor);\n   63          glm::quat rotation = slerp(start.rotation, end.rotation, factor);\n   64  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/Animation.h:\n   42          {\n   43              double time = 0;\n   44:             float3 translation = float3(0, 0, 0);\n   45:             float3 scaling = float3(1, 1, 1);\n   46              glm::quat rotation = glm::quat(1, 0, 0, 0);\n   47          };\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/Skinning.slang:\n  117      }\n  118  \n  119:     float3 getCurrentPosition(uint vertexId)\n  120      {\n  121          return gData.skinnedVertices[getStaticVertexID(vertexId)].position;\n  ...\n  144  \n  145      s.position = mul(float4(s.position, 1.f), boneMat).xyz;\n  146:     s.bitangent = mul(s.bitangent, (float3x3) boneMat);\n  147:     s.normal = mul(s.normal, (float3x3) transpose(invTransposeMat));\n  148  \n  149      // Store the result\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.cpp:\n  143                  }\n  144  \n  145:                 mFrustumPlanes[i].xyz = float3(plane);\n  146                  mFrustumPlanes[i].sign = glm::sign(mFrustumPlanes[i].xyz);\n  147                  mFrustumPlanes[i].negW = -plane.w;\n  ...\n  208          // See method 4b: https://fgiesen.wordpress.com/2010/10/17/view-frustum-culling/\n  209          for (int plane = 0; plane < 6; plane++) {\n  210:             float3 signedExtent = box.extent * mFrustumPlanes[plane].sign;\n  211              float dr = glm::dot(box.center + signedExtent, mFrustumPlanes[plane].xyz);\n  212              isInside = isInside && (dr > mFrustumPlanes[plane].negW);\n  ...\n  275              if (g.var(\"Depth Range\", depth, 0.f, FLT_MAX, 0.1f)) setDepthRange(depth.x, depth.y);\n  276  \n  277:             float3 pos = getPosition();\n  278              if (g.var(\"Position\", pos, -FLT_MAX, FLT_MAX, 0.001f)) setPosition(pos);\n  279  \n  280:             float3 target = getTarget();\n  281              if (g.var(\"Target\", target, -FLT_MAX, FLT_MAX, 0.001f)) setTarget(target);\n  282  \n  283:             float3 up = getUpVector();\n  284              if (g.var(\"Up\", up, -FLT_MAX, FLT_MAX, 0.001f)) setUpVector(up);\n  285  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.h:\n  120          /** Get the camera's world space position.\n  121          */\n  122:         const float3& getPosition() const { return mData.posW; }\n  123  \n  124          /** Get the camera's world space up vector.\n  125          */\n  126:         const float3& getUpVector() const {return mData.up;}\n  127  \n  128          /** Get the camera's world space target position.\n  129          */\n  130:         const float3& getTarget() const { return mData.target; }\n  131  \n  132          /** Set the camera's world space position.\n  133          */\n  134:         void setPosition(const float3& posW) { mData.posW = posW; mDirty = true; }\n  135  \n  136          /** Set the camera's world space up vector.\n  137          */\n  138:         void setUpVector(const float3& up) { mData.up = up; mDirty = true; }\n  139  \n  140          /** Set the camera's world space target position.\n  141          */\n  142:         void setTarget(const float3& target) { mData.target = target; mDirty = true; }\n  143  \n  144          /** Set the camera's depth range.\n  ...\n  276  \n  277          struct {\n  278:             float3 xyz;     ///< Camera frustum plane position\n  279              float negW;     ///< Camera frustum plane, sign of the coordinates\n  280:             float3 sign;    ///< Camera frustum plane position\n  281          } mutable mFrustumPlanes[6];\n  282  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.slang:\n   31  struct CameraRay\n   32  {\n   33:     float3 origin;\n   34      float tMin;\n   35:     float3 dir;\n   36      float tMax;\n   37  \n   ..\n   46      CameraData data;\n   47  \n   48:     float3 getPosition() { return data.posW; }\n   49      float4x4 getViewProj() { return data.viewProjMat; }\n   50  \n   ..\n   76          \\return Returns the non-normalized ray direction\n   77      */\n   78:     float3 computeNonNormalizedRayDirPinhole(uint2 pixel, uint2 frameDim)\n   79      {\n   80          // Compute sample position in screen space in [0,1] with origin at the top-left corner.\n   ..\n  108          ray.dir = ndc.x * data.cameraU + ndc.y * data.cameraV + data.cameraW;\n  109          float2 apertureSample = sample_disk(u); // Sample lies in the unit disk [-1,1]^2\n  110:         float3 rayTarget = ray.origin + ray.dir;\n  111          ray.origin += data.apertureRadius * (apertureSample.x * normalize(data.cameraU) + apertureSample.y * normalize(data.cameraV));\n  112          ray.dir = normalize(rayTarget - ray.origin);\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraController.cpp:\n   42  }\n   43  \n   44: void OrbiterCameraController::setModelParams(const float3& center, float radius, float distanceInRadius) {\n   45      mModelCenter = center;\n   46      mModelRadius = radius;\n   ..\n   69          case MouseEvent::Type::Move:\n   70              if(mIsLeftButtonDown) {\n   71:                 float3 curVec = project2DCrdToUnitSphere(convertCamPosRange(mouseEvent.pos));\n   72                  glm::quat q = createQuaternionFromVectors(mLastVector, curVec);\n   73                  glm::mat3x3 rot = (glm::mat3x3)q;\n   ..\n   92          mpCamera->setTarget(mModelCenter);\n   93  \n   94:         float3 camPos = mModelCenter;\n   95:         camPos += (float3(0,0,1) * mRotation) * mModelRadius * mCameraDistance;\n   96          mpCamera->setPosition(camPos);\n   97  \n   98:         float3 up(0, 1, 0);\n   99          up = up * mRotation;\n  100          mpCamera->setUpVector(up);\n  ...\n  160      if(mpCamera) {\n  161          if(mShouldRotate) {\n  162:             float3 camPos = mpCamera->getPosition();\n  163:             float3 camTarget = mpCamera->getTarget();\n  164:             float3 camUp = b6DoF ? mpCamera->getUpVector() : float3(0, 1, 0);;\n  165  \n  166:             float3 viewDir = glm::normalize(camTarget - camPos);\n  167              if(mIsLeftButtonDown) {\n  168:                 float3 sideway = glm::cross(viewDir, normalize(camUp));\n  169  \n  170                  // Rotate around x-axis\n  ...\n  197  \n  198          if(mMovement.any()) {\n  199:             float3 movement(0, 0, 0);\n  200              movement.z += mMovement.test(Direction::Forward) ? 1 : 0;\n  201              movement.z += mMovement.test(Direction::Backward) ? -1 : 0;\n  ...\n  205              movement.y += mMovement.test(Direction::Down) ? -1 : 0;\n  206  \n  207:             float3 camPos = mpCamera->getPosition();\n  208:             float3 camTarget = mpCamera->getTarget();\n  209:             float3 camUp = mpCamera->getUpVector();\n  210  \n  211:             float3 viewDir = normalize(camTarget - camPos);\n  212:             float3 sideway = glm::cross(viewDir, normalize(camUp));\n  213  \n  214              float elapsedTime = (float)mTimer.delta();\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraController.h:\n   96              \\param[in] InitialDistanceInRadius The initial distance of the camera from the model, measured in the model's radius.\n   97          */\n   98:         void setModelParams(const float3& center, float radius, float initialDistanceInRadius);\n   99  \n  100          /** Update the camera position and orientation.\n  ...\n  104  \n  105      private:\n  106:         float3 mModelCenter;\n  107          float mModelRadius;\n  108          float mCameraDistance;\n  ...\n  110  \n  111          glm::mat3x3 mRotation;\n  112:         float3 mLastVector;\n  113          bool mIsLeftButtonDown = false;\n  114          bool mShouldRotate = false;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraData.slang:\n   42      float4x4 prevViewProjMatNoJitter;   ///< Camera view-projection matrix associated to previous frame. No jittering is applied!\n   43  \n   44:     float3   posW                   = float3(0, 0, 0);  ///< Camera world-space position.\n   45      float    focalLength            = 21.0f;            ///< Camera focal length in mm. Default is 59 degree vertical, 90 horizontal FOV at 16:9 aspect ratio.\n   46:     float3   up                     = float3(0, 1, 0);  ///< Camera world-space up vector.\n   47      float    aspectRatio            = 1.7777f;          ///< 16:9 aspect-ratio.\n   48:     float3   target                 = float3(0, 0, -1); ///< Camera target point in world-space.\n   49      float    nearZ                  = 0.1f;             ///< Camera near plane.\n   50:     float3   cameraU                = float3(0, 0, 1);  ///< Camera base vector U. Normalized it indicates the right image plane vector. The length is dependent on the FOV.\n   51      float    farZ                   = 1000.0f;          ///< Camera far plane.\n   52:     float3   cameraV                = float3(0, 1, 0);  ///< Camera base vector V. Normalized it indicates the up image plane vector. The length is dependent on the FOV.\n   53      float    jitterX                = 0.0f;             ///< Eventual camera jitter along the x axis expressed as a subpixel offset divided by screen width (positive value shifts the image right).\n   54:     float3   cameraW                = float3(1, 0, 0);  ///< Camera base vector W. Normalized it indicates the forward direction. The length is the camera focal distance.\n   55      float    jitterY                = 0.0f;             ///< Eventual camera jitter along the y axis expressed as a subpixel offset divided by screen height (positive value shifts the image up).\n   56  \n   ..\n   60      float    shutterSpeed           = 0.004f;           ///< Camera shutter speed in seconds.\n   61      float    ISOSpeed               = 100.0f;           ///< Camera film speed based on ISO standards.\n   62:     float3    _padding;\n   63  };\n   64  \n\n/home/max/dev/Falcor/src/Falcor/Scene/HitInfo.slang:\n   52      /** Return the barycentric weights.\n   53      */\n   54:     float3 getBarycentricWeights()\n   55      {\n   56:         return float3(1.f - barycentrics.x - barycentrics.y, barycentrics.x, barycentrics.y);\n   57      }\n   58  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.cpp:\n   66          }\n   67  \n   68:         float3 aiCast(const aiColor3D& ai) {\n   69:             return float3(ai.r, ai.g, ai.b);\n   70          }\n   71  \n   72:         float3 aiCast(const aiVector3D& val) {\n   73:             return float3(val.x, val.y, val.z);\n   74          }\n   75  \n   ..\n  350          bool createDirLight(ImporterData& data, const aiLight* pAiLight) {\n  351              DirectionalLight::SharedPtr pLight = DirectionalLight::create();\n  352:             float3 direction = normalize(aiCast(pAiLight->mDirection));\n  353              pLight->setWorldDirection(direction);\n  354              glm::mat4 base;\n  ...\n  359          bool createPointLight(ImporterData& data, const aiLight* pAiLight) {\n  360              PointLight::SharedPtr pLight = PointLight::create();\n  361:             float3 position = aiCast(pAiLight->mPosition);\n  362:             float3 lookAt = normalize(aiCast(pAiLight->mDirection));\n  363:             float3 up = normalize(aiCast(pAiLight->mUp));\n  364              pLight->setWorldPosition(position);\n  365              pLight->setWorldDirection(lookAt);\n  ...\n  367              pLight->setPenumbraAngle(pAiLight->mAngleOuterCone - pAiLight->mAngleInnerCone);\n  368  \n  369:             float3 right = cross(up, lookAt);\n  370              glm::mat4 base;\n  371              base[0] = float4(right, 0);\n  ...\n  491                  static_assert(sizeof(pAiMesh->mNormals[0]) == sizeof(mesh.pNormals[0]));\n  492                  static_assert(sizeof(pAiMesh->mBitangents[0]) == sizeof(mesh.pBitangents[0]));\n  493:                 mesh.pPositions = (float3*)pAiMesh->mVertices;\n  494:                 mesh.pNormals = (float3*)pAiMesh->mNormals;\n  495:                 mesh.pBitangents = (float3*)pAiMesh->mBitangents;\n  496                  const auto& texCrd = pAiMesh->HasTextureCoords(0) ? createTexCrdList(pAiMesh->mTextureCoords[0], pAiMesh->mNumVertices) : std::vector<float2>();\n  497                  mesh.pTexCrd = texCrd.size() ? texCrd.data() : nullptr;\n  ...\n  751              // Emissive color\n  752              if (pAiMaterial->Get(AI_MATKEY_COLOR_EMISSIVE, color) == AI_SUCCESS) {\n  753:                 float3 emissive = float3(color.r, color.g, color.b);\n  754                  pMaterial->setEmissiveColor(emissive);\n  755              }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Importers/SceneImporter.cpp:\n  213  std::vector<glm::mat4> SceneImporterImpl::parseModelInstances(const rapidjson::Value& jsonVal) {\n  214      struct ModelInstance {\n  215:         float3 scaling = float3(1, 1, 1);\n  216:         float3 position = float3(0, 0, 0);\n  217:         float3 rotation = float3(0, 0, 0);\n  218      };\n  219  \n  ...\n  370              // Don't care\n  371          } else if (key == SceneKeys::kLightIntensity) {\n  372:             float3 intensity;\n  373              if (getFloatVec<3>(value, \"Directional light intensity\", &intensity[0]) == false) {\n  374                  return false;\n  ...\n  376              pDirLight->setIntensity(intensity);\n  377          } else if (key == SceneKeys::kLightDirection) {\n  378:             float3 direction;\n  379              if (getFloatVec<3>(value, \"Directional light direction\", &direction[0]) == false)\n  380              {\n  ...\n  425              pPointLight->setPenumbraAngle(angle);\n  426          } else if (key == SceneKeys::kLightIntensity) {\n  427:             float3 intensity;\n  428              if (getFloatVec<3>(value, \"Point light intensity\", &intensity[0]) == false) {\n  429                  return false;\n  ...\n  431              pPointLight->setIntensity(intensity);\n  432          } else if (key == SceneKeys::kLightPos) {\n  433:             float3 position;\n  434              if (getFloatVec<3>(value, \"Point light position\", &position[0]) == false) {\n  435                  return false;\n  ...\n  437              pPointLight->setWorldPosition(position);\n  438          } else if (key == SceneKeys::kLightDirection) {\n  439:             float3 dir;\n  440              if (getFloatVec<3>(value, \"Point light direction\", &dir[0]) == false) {\n  441                  return false;\n  ...\n  467      auto pAreaLight = AnalyticAreaLight::create(type);\n  468  \n  469:     float3 scaling(1, 1, 1);\n  470:     float3 translation(0, 0, 0);\n  471:     float3 rotation(0, 0, 0);\n  472  \n  473      for (auto it = jsonLight.MemberBegin(); it != jsonLight.MemberEnd(); it++) {\n  ...\n  486              // Already parsed\n  487          } else if (key == SceneKeys::kLightIntensity) {\n  488:             float3 intensity;\n  489              if (getFloatVec<3>(value, \"Area light intensity\", &intensity[0]) == false) {\n  490                  return false;\n  ...\n  578          }\n  579  \n  580:         float3 position;\n  581:         float3 intensity(1.0f);\n  582          float radius = -1;\n  583          uint32_t diffuseSamples = LightProbe::kDefaultDiffSamples;\n  ...\n  661              mBuilder.setCameraSpeed(f);\n  662          } else if (key == SceneKeys::kCamPosition) {\n  663:             float3 pos;\n  664              if (getFloatVec<3>(value, \"Camera's position\", &pos[0]) == false) {\n  665                  return false;\n  ...\n  667              pCamera->setPosition(pos);\n  668          } else if (key == SceneKeys::kCamTarget) {\n  669:             float3 target;\n  670              if (getFloatVec<3>(value, \"Camera's target\", &target[0]) == false) {\n  671                  return false;\n  ...\n  673              pCamera->setTarget(target);\n  674          } else if (key == SceneKeys::kCamUp) {\n  675:             float3 up;\n  676              if (getFloatVec<3>(value, \"Camera's up vector\", &up[0]) == false) {\n  677                  return false;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/Light.cpp:\n   43      }\n   44  \n   45:     void Light::setIntensity(const float3& intensity)\n   46      {\n   47          mData.intensity = intensity;\n   ..\n   80      }\n   81  \n   82:     float3 Light::getColorForUI()\n   83      {\n   84          if ((mUiLightIntensityColor * mUiLightIntensityScale) != mData.intensity)\n   ..\n  100      }\n  101  \n  102:     void Light::setColorFromUI(const float3& uiColor)\n  103      {\n  104          mUiLightIntensityColor = uiColor;\n  ...\n  138          if (g.open())\n  139          {\n  140:             float3 color = getColorForUI();\n  141              if (g.rgbColor(\"Color\", color))\n  142              {\n  ...\n  181      }\n  182  \n  183:     void DirectionalLight::setWorldDirection(const float3& dir)\n  184      {\n  185          if (!(glm::length(dir) > 0.f)) // NaNs propagate\n  ...\n  192      }\n  193  \n  194:     void DirectionalLight::setWorldParams(const float3& center, float radius)\n  195      {\n  196          mDistance = radius;\n  ...\n  218      PointLight::~PointLight() = default;\n  219  \n  220:     void PointLight::setWorldDirection(const float3& dir)\n  221      {\n  222          if (!(glm::length(dir) > 0.f)) // NaNs propagate\n  ...\n  228      }\n  229  \n  230:     void PointLight::setWorldPosition(const float3& pos)\n  231      {\n  232          mData.posW = pos;\n  ...\n  288      {\n  289          mData.type = type;\n  290:         mData.tangent = float3(1, 0, 0);\n  291:         mData.bitangent = float3(0, 1, 0);\n  292          mData.surfaceArea = 4.0f;\n  293  \n  294:         mScaling = float3(1, 1, 1);\n  295          update();\n  296      }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/Light.h:\n   87          /** Set the light intensity.\n   88          */\n   89:         virtual void setIntensity(const float3& intensity);\n   90  \n   91          enum class Changes\n   ..\n  109          */\n  110          void setIntensityFromScript(float intensity) { setIntensityFromUI(intensity); }\n  111:         void setColorFromScript(float3 color) { setColorFromUI(color); }\n  112          float getIntensityForScript() { return getIntensityForUI(); }\n  113:         float3 getColorForScript() { return getColorForUI(); }\n  114  \n  115      protected:\n  ...\n  119  \n  120          /* UI callbacks for keeping the intensity in-sync */\n  121:         float3 getColorForUI();\n  122:         void setColorFromUI(const float3& uiColor);\n  123          float getIntensityForUI();\n  124          void setIntensityFromUI(float intensity);\n  ...\n  127  \n  128          /* These two variables track mData values for consistent UI operation.*/\n  129:         float3 mUiLightIntensityColor = float3(0.5f, 0.5f, 0.5f);\n  130          float     mUiLightIntensityScale = 1.0f;\n  131          LightData mData, mPrevData;\n  ...\n  153              \\param[in] dir Light direction. Does not have to be normalized.\n  154          */\n  155:         void setWorldDirection(const float3& dir);\n  156  \n  157          /** Set the scene parameters\n  158          */\n  159:         void setWorldParams(const float3& center, float radius);\n  160  \n  161          /** Get the light's world-space direction.\n  162          */\n  163:         const float3& getWorldDirection() const { return mData.dirW; }\n  164  \n  165          /** Get total light power (needed for light picking)\n  ...\n  170          DirectionalLight();\n  171          float mDistance = 1e3f; ///< Scene bounding radius is required to move the light position sufficiently far away\n  172:         float3 mCenter;\n  173      };\n  174  \n  ...\n  196          /** Set the light's world-space position\n  197          */\n  198:         void setWorldPosition(const float3& pos);\n  199  \n  200          /** Set the light's world-space direction.\n  201              \\param[in] dir Light direction. Does not have to be normalized.\n  202          */\n  203:         void setWorldDirection(const float3& dir);\n  204  \n  205          /** Set the cone opening half-angle for use as a spot light\n  ...\n  210          /** Get the light's world-space position\n  211          */\n  212:         const float3& getWorldPosition() const { return mData.posW; }\n  213  \n  214          /** Get the light's world-space direction\n  215          */\n  216:         const float3& getWorldDirection() const { return mData.dirW; }\n  217  \n  218          /** Get the light intensity.\n  219          */\n  220:         const float3& getIntensity() const { return mData.intensity; }\n  221  \n  222          /** Get the penumbra half-angle\n  ...\n  256              \\param[in] scale x,y,z scaling factors\n  257          */\n  258:         void setScaling(float3 scale) { mScaling = scale; }\n  259  \n  260          /** Set light source scale\n  261            */\n  262:         float3 getScaling() const { return mScaling; }\n  263  \n  264          /** Get total light power (needed for light picking)\n  ...\n  286  \n  287          bool mDirty = true;\n  288:         float3 mScaling;                ///< Scaling, controls the size of the light\n  289          glm::mat4 mTransformMatrix;     ///< Transform matrix minus scaling component\n  290      };\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightData.slang:\n   47  struct LightData\n   48  {\n   49:     float3   posW               = float3(0, 0, 0);  ///< World-space position of the center of a light source\n   50      uint32_t type               = uint(LightType::Point); ///< Type of the light source (see above)\n   51:     float3   dirW               = float3(0, -1, 0); ///< World-space orientation of the light source (normalized).\n   52      float    openingAngle       = float(M_PI);      ///< For point (spot) light: Opening half-angle of a spot light cut-off, pi by default (full sphere).\n   53:     float3   intensity          = float3(1, 1, 1);  ///< Emitted radiance of th light source\n   54      float    cosOpeningAngle    = -1.f;             ///< For point (spot) light: cos(openingAngle), -1 by default because openingAngle is pi by default\n   55:     float3   pad;\n   56      float    penumbraAngle      = 0.f;              ///< For point (spot) light: Opening half-angle of penumbra region in radians, usually does not exceed openingAngle. 0.f by default, meaning a spot light with hard cut-off\n   57  \n   58      // Extra parameters for analytic area lights\n   59:     float3   tangent            = float3(0);        ///< Tangent vector of the light shape\n   60      float    surfaceArea        = 0.f;              ///< Surface area of the light shape\n   61:     float3   bitangent          = float3(0);        ///< Bitangent vector of the light shape\n   62      float    pad1;\n   63      float4x4 transMat           = {};               ///< Transformation matrix of the light shape, from local to world space.\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbe.cpp:\n  190              float intensity = mData.intensity.r;\n  191              if (g.var(\"Intensity\", intensity, 0.0f)) {\n  192:                 mData.intensity = float3(intensity);\n  193              }\n  194  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbe.h:\n   87      /** Set the light probe's world-space position\n   88      */\n   89:     void setPosW(const float3& posW) { mData.posW = posW; }\n   90  \n   91      /** Get the light probe's world-space position\n   92      */\n   93:     const float3& getPosW() const { return mData.posW; }\n   94  \n   95      /** Set the spherical radius the light probe encompasses. Set radius to negative to sample as an infinite-distance global light probe.\n   ..\n  111      /** Set the light probe's light intensity\n  112      */\n  113:     void setIntensity(const float3& intensity) { mData.intensity = intensity; }\n  114  \n  115      /** Get the light probe's light intensity\n  116      */\n  117:     const float3& getIntensity() const { return mData.intensity; }\n  118  \n  119      /** Attach a sampler to the light probe\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbeData.slang:\n   58  struct LightProbeData\n   59  {\n   60:     float3 posW         = float3(0);\n   61      float radius        = -1.0f;\n   62:     float3 intensity    = float3(1.0f);\n   63  \n   64      LightProbeResources resources;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang:\n   43  }\n   44  \n   45: void generateBasis(float3 N, out float3 up, out float3 right, out float3 forward)\n   46  {\n   47:     up = abs(N.z) < 0.999999f ? float3(0, 0, 1) : float3(1, 0, 0);\n   48      right = normalize(cross(up, N));\n   49      forward = cross(N, right);\n   50  }\n   51  \n   52: float3 importanceSampleCosDir(float2 u, float3 N)\n   53  {\n   54:     float3 up, right, forward;\n   55      generateBasis(N, up, right, forward);\n   56  \n   ..\n   61      float phi = u2 * M_2PI;\n   62  \n   63:     float3 L = float3(r * cos(phi),\n   64                        r * sin(phi),\n   65                        sqrt(max(0.0f, 1.0f - u1)));\n   ..\n   68  }\n   69  \n   70: float3 importanceSampleGGX(float2 u, float3 N, float roughness)\n   71  {\n   72      float a = roughness * roughness;\n   ..\n   77  \n   78      // Tangent space H\n   79:     float3 tH;\n   80      tH.x = sinTheta * cos(phi);\n   81      tH.y = sinTheta * sin(phi);\n   82      tH.z = cosTheta;\n   83  \n   84:     float3 up, right, forward;\n   85      generateBasis(N, up, right, forward);\n   86  \n   ..\n   97  }\n   98  \n   99: float4 integrateDiffuseLD(float3 N)\n  100  {\n  101:     float3 accumulation = 0;\n  102      float accBrdf = 0;\n  103:     float3 V = N;\n  104      for (uint i = 0; i < gSampleCount; i++)\n  105      {\n  106          float2 u = getHammersley(i, gSampleCount);\n  107:         float3 L = importanceSampleCosDir(u, N);\n  108          float NdotL = saturate(dot(N, L));\n  109          if (NdotL > 0)\n  ...\n  121  }\n  122  \n  123: float4 integrateSpecularLD(float3 V, float3 N, float roughness)\n  124  {\n  125      // Resource Dimensions\n  ...\n  131      float cubeWidth = width / 4;\n  132  \n  133:     float3 accBrdf = 0;\n  134      float accBrdfWeight = 0;\n  135      float NdotV = saturate(dot(N, V));\n  ...\n  137      {\n  138          float2 u = getHammersley(i, gSampleCount);\n  139:         float3 H = importanceSampleGGX(u, N, roughness);\n  140:         float3 L = reflect(-N, H);\n  141          float NdotL = dot(N, L);\n  142  \n  ...\n  154  \n  155              float2 uv = dirToSphericalCrd(L);\n  156:             float3 Li = gInputTex.SampleLevel(gSampler, uv, mipLevel).rgb;\n  157              float weight = NdotL;\n  158              weight *= evalSmithGGX(NdotL, NdotV, roughness);\n  ...\n  168  }\n  169  \n  170: float4 integrateDFG(float3 N, float3 V, float roughness)\n  171  {\n  172      float NdotV = dot(N, V);\n  173:     float3 accumulation = 0;\n  174  \n  175      for(uint i = 0; i < gSampleCount; i++)\n  ...\n  178  \n  179          // Specular GGX DFG integration (stored in RG)\n  180:         float3 H = importanceSampleGGX(u, N, roughness);\n  181:         float3 L = reflect(-N, H);\n  182          float NdotH = saturate(dot(N, H));\n  183          float LdotH = saturate(dot(L, H));\n  ...\n  220  {\n  221  #ifdef _INTEGRATE_DFG\n  222:     const float3 N = float3(0, 0, 1);\n  223  \n  224      // texC.x is NdotV, calculate a valid V assuming constant N\n  225      float theta = acos(texC.x);\n  226:     const float3 V = float3(sin(theta), 0, cos(theta));\n  227  \n  228      return integrateDFG(N, V, texC.y);\n  ...\n  230  #else// _INTEGRATE_DFG else\n  231  \n  232:     float3 dir = sphericalCrdToDir(texC);\n  233  \n  234  #ifdef _INTEGRATE_DIFFUSE_LD\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/Lights.slang:\n   38  struct LightSample\n   39  {\n   40:     float3 diffuse;   // The light intensity at the surface location used for the diffuse term\n   41:     float3 specular;  // The light intensity at the surface location used for the specular term. For light probes, the diffuse and specular components are different\n   42:     float3 L;         // The direction from the surface to the light source\n   43:     float3 posW;      // The world-space position of the light\n   44      float NdotH;      // Unclamped, can be negative\n   45      float NdotL;      // Unclamped, can be negative\n   ..\n   50  void calcCommonLightProperties(ShadingData sd, inout LightSample ls)\n   51  {\n   52:     float3 H = normalize(sd.V + ls.L);\n   53      ls.NdotH = dot(sd.N, H);\n   54      ls.NdotL = dot(sd.N, ls.L);\n   ..\n   64  /** Evaluate a directional light source intensity/direction at a shading point\n   65  */\n   66: LightSample evalDirectionalLight(in LightData light, in float3 surfacePosW)\n   67  {\n   68      LightSample ls;\n   ..\n   77  /** Evaluate a point light source intensity/direction at a shading point\n   78  */\n   79: LightSample evalPointLight(in LightData light, in float3 surfacePosW)\n   80  {\n   81      LightSample ls;\n   ..\n  122  };\n  123  \n  124: float3 getDiffuseDominantDir(float3 N, float3 V, float ggxAlpha)\n  125  {\n  126      float a = 1.02341 * ggxAlpha - 1.51174;\n  ...\n  130  }\n  131  \n  132: float3 getSpecularDominantDir(float3 N, float3 R, float ggxAlpha)\n  133  {\n  134      float smoothness = 1 - ggxAlpha;\n  ...\n  137  }\n  138  \n  139: float3 evalLightProbeDiffuse(LightProbeData probe, ShadingData sd)\n  140  {\n  141:     float3 N = getDiffuseDominantDir(sd.N, sd.V, sd.ggxAlpha);\n  142  \n  143      // Interpret negative radius as global light probe with infinite distance\n  ...\n  150      else\n  151      {\n  152:         float3 intersectPosW;\n  153          intersectRaySphere(sd.posW, N, probe.posW, probe.radius, intersectPosW);\n  154          uv = dirToSphericalCrd(normalize(intersectPosW - probe.posW));\n  ...\n  158      probe.resources.diffuseTexture.GetDimensions(0, width, height, mipCount);\n  159  \n  160:     float3 diffuseLighting = probe.resources.diffuseTexture.SampleLevel(probe.resources.sampler, uv, 0).rgb;\n  161      float preintegratedDisneyBRDF = probe.sharedResources.dfgTexture.SampleLevel(probe.sharedResources.dfgSampler, float2(sd.NdotV, sd.ggxAlpha), 0).z;\n  162  \n  ...\n  164  }\n  165  \n  166: float3 evalLightProbeSpecular(LightProbeData probe, ShadingData sd, float3 L)\n  167  {\n  168      float dfgWidth, dfgHeight;\n  ...\n  172      probe.resources.specularTexture.GetDimensions(0, width, height, mipCount);\n  173  \n  174:     float3 dominantDir = getSpecularDominantDir(sd.N, L, sd.ggxAlpha);\n  175      float mipLevel = linearRoughnessToLod(sd.ggxAlpha, mipCount);\n  176  \n  ...\n  182      else\n  183      {\n  184:         float3 intersectPosW;\n  185          intersectRaySphere(sd.posW, dominantDir, probe.posW, probe.radius, intersectPosW);\n  186          uv = dirToSphericalCrd(normalize(intersectPosW - probe.posW));\n  187      }\n  188  \n  189:     float3 ld = probe.resources.specularTexture.SampleLevel(probe.resources.sampler, uv, mipLevel).rgb;\n  190  \n  191      float2 dfg = probe.sharedResources.dfgTexture.SampleLevel(probe.sharedResources.dfgSampler, float2(sd.NdotV, sd.ggxAlpha), 0).xy;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/BRDF.slang:\n   36  import Scene.Lights.Lights;\n   37  \n   38: float3 fresnelSchlick(float3 f0, float3 f90, float u)\n   39  {\n   40      return f0 + (f90 - f0) * pow(1 - u, 5);\n   ..\n   52  }\n   53  \n   54: float3 evalDiffuseDisneyBrdf(ShadingData sd, LightSample ls)\n   55  {\n   56      return disneyDiffuseFresnel(sd.NdotV, ls.NdotL, ls.LdotH, sd.linearRoughness) * M_1_PI * sd.diffuse.rgb;\n   ..\n   59  /** Lambertian diffuse\n   60  */\n   61: float3 evalDiffuseLambertBrdf(ShadingData sd, LightSample ls)\n   62  {\n   63      return sd.diffuse.rgb * (1 / M_PI);\n   ..\n   66  /** Frostbites's diffuse term. Based on https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n   67  */\n   68: float3 evalDiffuseFrostbiteBrdf(ShadingData sd, LightSample ls)\n   69  {\n   70      float energyBias = lerp(0, 0.5, sd.linearRoughness);\n   ..\n   78  }\n   79  \n   80: float3 evalDiffuseBrdf(ShadingData sd, LightSample ls)\n   81  {\n   82  #if DiffuseBrdf == DiffuseBrdfLambert\n   ..\n  107  }\n  108  \n  109: float3 evalSpecularBrdf(ShadingData sd, LightSample ls)\n  110  {\n  111      float ggxAlpha = sd.ggxAlpha;\n  ...\n  113      float D = evalGGX(ggxAlpha, ls.NdotH);\n  114      float G = evalSmithGGX(ls.NdotL, sd.NdotV, ggxAlpha);\n  115:     float3 F = fresnelSchlick(sd.specular, 1, saturate(ls.LdotH));\n  116      return D * G * F * M_1_PI;\n  117  }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/Material.cpp:\n   89                  setEmissiveTexture(nullptr);\n   90          } else {\n   91:             float3 emissiveColor = getEmissiveColor();\n   92              if (widget.var(\"Emissive color\", emissiveColor, 0.f, 1.f, 0.01f))\n   93                  setEmissiveColor(emissiveColor);\n   ..\n  208      }\n  209  \n  210:     void Material::setVolumeAbsorption(const float3& volumeAbsorption) {\n  211          if (mData.volumeAbsorption != volumeAbsorption) {\n  212              mData.volumeAbsorption = volumeAbsorption;\n  ...\n  215      }\n  216  \n  217:     void Material::setEmissiveColor(const float3& color) {\n  218          if (mData.emissive != color) {\n  219              mData.emissive = color;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/Material.h:\n  186      /** Set the volume absorption (absorption coefficient).\n  187      */\n  188:     void setVolumeAbsorption(const float3& volumeAbsorption);\n  189  \n  190      /** Get the volume absorption (absorption coefficient).\n  191      */\n  192:     const float3& getVolumeAbsorption() const { return mData.volumeAbsorption; }\n  193  \n  194      /** Set the emissive color\n  195      */\n  196:     void setEmissiveColor(const float3& color);\n  197  \n  198      /** Set the emissive factor\n  ...\n  202      /** Get the emissive color\n  203      */\n  204:     const float3& getEmissiveColor() const { return mData.emissive; }\n  205  \n  206      /** Get the emissive factor\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/MaterialData.slang:\n   59      float4   baseColor              = float4(1);        ///< Material base color (RGB) and opacity (A).\n   60      float4   specular               = float4(0);        ///< Material specular channel encoding occlusion (R), roughness (G), metallic (B) in the default MetalRough mode. In SpecGloss mode specular color (RGB) and glossiness (A).\n   61:     float3   emissive               = float3(0, 0, 0);  ///< Emissive color (RGB).\n   62      float    emissiveFactor         = 1.f;              ///< Multiplication factor for the emissive color to control light intensity.\n   63  \n   ..\n   67      uint32_t flags                  = 0;                ///< See flags in MaterialDefines.slangh\n   68  \n   69:     float3   volumeAbsorption       = float3(0, 0, 0);  ///< Volume absorption coefficient.\n   70      float    _pad0                  = 0.f;\n   71  \n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleData.slang:\n   36  struct Particle\n   37  {\n   38:     float3 pos;\n   39      float scale;\n   40:     float3 vel;    \n   41      float life;\n   42:     float3 accel;\n   43      float growth;\n   44      float rot; \n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp:\n  292      }\n  293  \n  294:     void ParticleSystem::setSpawnPos(float3 spawnPos, float3 offset) {\n  295          mEmitter.spawnPos = spawnPos;\n  296          mEmitter.spawnPosOffset = offset;\n  297      }\n  298  \n  299:     void ParticleSystem::setVelocity(float3 velocity, float3 offset) {\n  300          mEmitter.vel = velocity;\n  301          mEmitter.velOffset = offset;\n  302      }\n  303  \n  304:     void ParticleSystem::setAcceleration(float3 accel, float3 offset) {\n  305          mEmitter.accel = accel;\n  306          mEmitter.accelOffset = offset;\n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.h:\n  107              \\params[in] offset The new random offset to be applied. final value is base + randRange(-offset, offset)\n  108          */\n  109:         void setSpawnPos(float3 spawnPos, float3 offset);\n  110  \n  111          /** Sets the velocity particles spawn with.\n  ...\n  113              \\params[in] offset The new random offset to be applied. final value is base + randRange(-offset, offset)\n  114          */\n  115:         void setVelocity(float3 velocity, float3 offset);\n  116  \n  117          /** Sets the acceleration particles spawn with.\n  ...\n  119              \\params[in] offset The new random offset to be applied. final value is base + randRange(-offset, offset)\n  120          */\n  121:         void setAcceleration(float3 accel, float3 offset);\n  122  \n  123          /** Sets the scale particles spawn with.\n  ...\n  163              int32_t emitCount;\n  164              int32_t emitCountOffset;\n  165:             float3 spawnPos;\n  166:             float3 spawnPosOffset;\n  167:             float3 vel;\n  168:             float3 velOffset;\n  169:             float3 accel;\n  170:             float3 accelOffset;\n  171              float scale;\n  172              float scaleOffset;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Raster.slang:\n   33  {\n   34      // Packed vertex attributes, see PackedStaticVertexData\n   35:     float3 pos                      : POSITION;\n   36:     float3 packedNormalBitangent    : PACKED_NORMAL_BITANGENT;\n   37      float2 texC                     : TEXCOORD;\n   38  \n   39      // Other vertex attributes\n   40      uint meshInstanceID             : DRAW_ID;\n   41:     float3 prevPos                  : PREV_POSITION;\n   42  \n   43      StaticVertexData unpack()\n   ..\n   57  struct VSOut\n   58  {\n   59:     INTERPOLATION_MODE float3 normalW    : NORMAL;\n   60:     INTERPOLATION_MODE float3 bitangentW : BITANGENT;\n   61      INTERPOLATION_MODE float2 texC       : TEXCRD;\n   62:     INTERPOLATION_MODE float3 posW       : POSW;\n   63:     INTERPOLATION_MODE float3 colorV     : COLOR;\n   64      INTERPOLATION_MODE float4 prevPosH   : PREVPOSH;\n   65  \n   ..\n   84      vOut.texC = vIn.texC;\n   85      vOut.normalW = mul(vIn.unpack().normal, gScene.getInverseTransposeWorldMatrix(vIn.meshInstanceID));\n   86:     vOut.bitangentW = mul(vIn.unpack().bitangent, (float3x3)gScene.getWorldMatrix(vIn.meshInstanceID));\n   87  \n   88      float4 prevPosW = mul(float4(vIn.prevPos, 1.f), gScene.getPrevWorldMatrix(vIn.meshInstanceID));\n   ..\n   92  }\n   93  \n   94: VertexData prepareVertexData(VSOut vsOut, float3 faceNormalW)\n   95  {\n   96      VertexData v;\n   ..\n  106      This version uses implicit LOD and fetches material data directly from the scene.\n  107  */\n  108: ShadingData prepareShadingData(VSOut vsOut, uint triangleIndex, float3 viewDir)\n  109  {\n  110:     float3 faceNormal = gScene.getFaceNormalW(vsOut.meshInstanceID, triangleIndex);\n  111      VertexData v = prepareVertexData(vsOut, faceNormal);\n  112      return prepareShadingData(v, vsOut.materialID, gScene.materials[vsOut.materialID], gScene.materialResources[vsOut.materialID], viewDir);\n\n/home/max/dev/Falcor/src/Falcor/Scene/Raytracing.slang:\n   60  VertexData getVertexData(HitShaderParams hitParams, uint triangleIndex, BuiltInTriangleIntersectionAttributes attribs)\n   61  {\n   62:     float3 barycentrics = float3(1.0 - attribs.barycentrics.x - attribs.barycentrics.y, attribs.barycentrics.x, attribs.barycentrics.y);\n   63      return gScene.getVertexData(hitParams.getGlobalHitID(), triangleIndex, barycentrics);\n   64  }\n   ..\n   72  VertexData getVertexDataRayCones(HitShaderParams hitParams, uint triangleIndex, BuiltInTriangleIntersectionAttributes attribs)\n   73  {\n   74:     float3 barycentrics = float3(1.0 - attribs.barycentrics.x - attribs.barycentrics.y, attribs.barycentrics.x, attribs.barycentrics.y);\n   75      return gScene.getVertexDataRayCones(hitParams.getGlobalHitID(), triangleIndex, barycentrics);\n   76  }\n   ..\n   87      \\return Interpolated vertex attributes.\n   88  */\n   89: VertexData getVertexDataRayDiff(HitShaderParams hitParams, uint triangleIndex, BuiltInTriangleIntersectionAttributes attribs, in float3 rayDir, in float hitT,\n   90      inout RayDiff rayDiff, out float2 dUVdx, out float2 dUVdy)\n   91  {\n   92:     float3 barycentrics = float3(1.0 - attribs.barycentrics.x - attribs.barycentrics.y, attribs.barycentrics.x, attribs.barycentrics.y);\n   93      return gScene.getVertexDataRayDiff(hitParams.getGlobalHitID(), triangleIndex, barycentrics, rayDir, hitT, rayDiff, dUVdx, dUVdy);\n   94  }\n   ..\n   99      \\return Interpolated position in world space for the previous frame.\n  100  */\n  101: float3 getPrevPosW(\n  102      HitShaderParams hitParams,\n  103      uint triangleIndex,\n  104      BuiltInTriangleIntersectionAttributes attribs)\n  105  {\n  106:     float3 barycentrics = float3(1.0 - attribs.barycentrics.x - attribs.barycentrics.y, attribs.barycentrics.x, attribs.barycentrics.y);\n  107      return gScene.getPrevPosW(hitParams.getGlobalHitID(), triangleIndex, barycentrics);\n  108  }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n  326  \n  327  template<>\n  328: void Scene::AnimatedObject<Camera>::setIntoObject(const float3& pos, const float3& up, const float3& lookAt) {\n  329      pObject->setUpVector(up);\n  330      pObject->setPosition(pos);\n  ...\n  333  \n  334  template<>\n  335: void Scene::AnimatedObject<Light>::setIntoObject(const float3& pos, const float3& up, const float3& lookAt) {\n  336      DirectionalLight* pDirLight = dynamic_cast<DirectionalLight*>(pObject.get());\n  337      if (pDirLight) {\n  ...\n  359  \n  360          glm::mat4 camMat = pAnimCtrl->getGlobalMatrices()[nodeID];\n  361:         float3 pos = float3(camMat[3]);\n  362:         float3 up = float3(camMat[1]);\n  363:         float3 lookAt = float3(camMat[2]);\n  364          setIntoObject(pos, up, lookAt);\n  365          return true;\n  ...\n  549      float radius = length(mSceneBB.extent);\n  550      mCamera.pObject->setPosition(mSceneBB.center);\n  551:     mCamera.pObject->setTarget(mSceneBB.center + float3(0, 0, -1));\n  552:     mCamera.pObject->setUpVector(float3(0, 1, 0));\n  553  \n  554      if(resetDepthRange) {\n  ...\n  564  }\n  565  \n  566: void Scene::addViewpoint(const float3& position, const float3& target, const float3& up) {\n  567      Viewpoint viewpoint = { position, target, up };\n  568      mViewpoints.push_back(viewpoint);\n  ...\n 1157      // Viewpoints\n 1158      s.func_(kAddViewpoint.c_str(), ScriptBindings::overload_cast<>(&Scene::addViewpoint)); // add current camera as viewpoint\n 1159:     s.func_(kAddViewpoint.c_str(), ScriptBindings::overload_cast<const float3&, const float3&, const float3&>(&Scene::addViewpoint), \"position\"_a, \"target\"_a, \"up\"_a); // add specified viewpoint\n 1160      s.func_(kRemoveViewpoint.c_str(), &Scene::removeViewpoint); // remove the selected viewpoint\n 1161      s.func_(kSelectViewpoint.c_str(), &Scene::selectViewpoint, \"index\"_a); // select a viewpoint by index\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.h:\n  176          /** Add a new viewpoint to the list of viewpoints.\n  177          */\n  178:         void addViewpoint(const float3& position, const float3& target, const float3& up);\n  179  \n  180          /** Remove the currently active viewpoint.\n  ...\n  438              bool update(const AnimationController* pAnimCtrl, bool force);\n  439              bool hasGlobalTransform() const { return nodeID != kInvalidNode; }\n  440:             void setIntoObject(const float3& pos, const float3& up, const float3& lookAt);\n  441              bool enabled(bool force) const;\n  442          };\n  ...\n  500          // Saved Camera Viewpoints\n  501          struct Viewpoint {\n  502:             float3 position;\n  503:             float3 target;\n  504:             float3 up;\n  505          };\n  506          std::vector<Viewpoint> mViewpoints;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.slang:\n   92      };\n   93  \n   94:     float3x3 loadInverseTransposeWorldMatrix(uint matrixID)\n   95      {\n   96:         float3x3 m =\n   97          {\n   98              inverseTransposeWorldMatrices[matrixID * 4 + 0].xyz,\n   ..\n  103      }\n  104  \n  105:     float3x3 getInverseTransposeWorldMatrix(uint meshInstanceID)\n  106      {\n  107          uint matrixID = meshInstances[meshInstanceID].globalMatrixID;\n  ...\n  194          \\param[out] Face normal in object space (normalized). Front facing for counter-clockwise winding.\n  195      */\n  196:     float3 getFaceNormalInObjectSpace(uint3 vtxIndices)\n  197      {\n  198:         float3 p0 = vertices[vtxIndices[0]].position;\n  199:         float3 p1 = vertices[vtxIndices[1]].position;\n  200:         float3 p2 = vertices[vtxIndices[2]].position;\n  201          return normalize(cross(p1 - p0, p2 - p0));\n  202      }\n  ...\n  207          \\param[out] Face normal in world space (normalized).\n  208      */\n  209:     float3 getFaceNormalW(uint meshInstanceID, uint triangleIndex)\n  210      {\n  211          uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  212:         float3 p0 = vertices[vtxIndices[0]].position;\n  213:         float3 p1 = vertices[vtxIndices[1]].position;\n  214:         float3 p2 = vertices[vtxIndices[2]].position;\n  215:         float3 N = cross(p1 - p0, p2 - p0);\n  216:         float3x3 worldInvTransposeMat = getInverseTransposeWorldMatrix(meshInstanceID);\n  217          return normalize(mul(N, worldInvTransposeMat));\n  218      }\n  ...\n  225      float getFaceAreaW(uint meshInstanceID, uint triangleIndex)\n  226      {\n  227:         float3 p[3];\n  228          getVertexPositionsW(meshInstanceID, triangleIndex, p);\n  229          return 0.5f * length(cross(p[1] - p[0], p[2] - p[0]));\n  ...\n  236          \\return Face normal in world space (normalized).\n  237      */\n  238:     float3 computeFaceNormalAndAreaW(uint meshInstanceID, const float3 p[3], out float triangleArea)\n  239      {\n  240          // Compute face normal in world space.\n  241          // The length of the vector is twice the triangle area since we're in world space.\n  242          // Note that this is not true if the normal is transformed using the inverse-transpose.\n  243:         float3 e[2];\n  244          e[0] = p[1] - p[0];\n  245          e[1] = p[2] - p[0];\n  246:         float3 N = cross(e[0], e[1]);\n  247          triangleArea = 0.5f * length(N);\n  248  \n  ...\n  260          \\return Face normal in world space (normalized).\n  261      */\n  262:     float3 getFaceNormalAndAreaW(uint meshInstanceID, uint triangleIndex, out float triangleArea)\n  263      {\n  264          uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  265  \n  266          // Load vertices and transform to world space.\n  267:         float3 p[3];\n  268          [unroll]\n  269          for (int i = 0; i < 3; i++)\n  ...\n  282          \\return Interpolated vertex attributes.\n  283      */\n  284:     VertexData getVertexData(uint meshInstanceID, uint triangleIndex, float3 barycentrics)\n  285      {\n  286          const uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  ...\n  308  \n  309          float4x4 worldMat = getWorldMatrix(meshInstanceID);\n  310:         float3x3 worldInvTransposeMat = getInverseTransposeWorldMatrix(meshInstanceID);\n  311  \n  312          v.posW = mul(float4(v.posW, 1.f), worldMat).xyz;\n  313          v.normalW = mul(v.normalW, worldInvTransposeMat);\n  314          v.faceNormalW = mul(v.faceNormalW, worldInvTransposeMat);\n  315:         v.bitangentW = mul(v.bitangentW, (float3x3)worldMat);\n  316  \n  317          v.normalW = normalize(v.normalW);\n  318          v.faceNormalW = normalize(v.faceNormalW);\n  319          // Handle invalid bitangents gracefully (avoid NaN from normalization).\n  320:         v.bitangentW = dot(v.bitangentW, v.bitangentW) > 0.f ? normalize(v.bitangentW) : float3(0, 0, 0);\n  321          return v;\n  322      }\n  ...\n  337          \\return Interpolated vertex attributes.\n  338      */\n  339:     VertexData getVertexDataRayCones(uint meshInstanceID, uint triangleIndex, float3 barycentrics)\n  340      {\n  341          const uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  ...\n  343  \n  344          float2 txcoords[3];\n  345:         float3 vtxs[3];\n  346          txcoords[0] = vertices[vtxIndices[0]].texCrd;\n  347          txcoords[1] = vertices[vtxIndices[1]].texCrd;\n  ...\n  352  \n  353          float4x4 worldMat = getWorldMatrix(meshInstanceID);\n  354:         v.coneTexLODValue = computeRayConeTriangleLODValue(vtxs, txcoords, float3x3(worldMat), v.faceNormalW);\n  355  \n  356          return v;\n  ...\n  368          \\return Interpolated vertex attributes.\n  369      */\n  370:     VertexData getVertexDataRayDiff(uint meshInstanceID, uint triangleIndex, float3 barycentrics, in float3 rayDir, in float hitT,\n  371          inout RayDiff rayDiff, out float2 dUVdx, out float2 dUVdy)\n  372      {\n  ...\n  374          VertexData v = getVertexData(meshInstanceID, triangleIndex, barycentrics);\n  375  \n  376:         float3 unnormalizedN;\n  377:         float3 vtxs[3];\n  378:         float3 normals[3];\n  379          float2 txcoords[3];\n  380          float2 dBarydx, dBarydy;\n  381          float4x4 worldMat = getWorldMatrix(meshInstanceID);\n  382:         float3x3 worldInvTransposeMat = getInverseTransposeWorldMatrix(meshInstanceID);\n  383  \n  384          StaticVertexData vtx[3] = { gScene.getVertex(vtxIndices[0]), gScene.getVertex(vtxIndices[1]), gScene.getVertex(vtxIndices[2]) };\n  ...\n  398          unnormalizedN += normals[2] * barycentrics[2];\n  399  \n  400:         float3 e1 = vtxs[1] - vtxs[0];\n  401:         float3 e2 = vtxs[2] - vtxs[0];\n  402          computeDifferentialsBarysAndUVs(rayDiff, rayDir, vtxs, txcoords, e1, e2, v.faceNormalW, hitT, dBarydx, dBarydy, dUVdx, dUVdy);\n  403          reflectRayDifferential(rayDiff, rayDir, unnormalizedN, v.normalW, dBarydx, dBarydy, e1, e2, normals);\n  ...\n  412          \\return Interpolated position in world space for the previous frame.\n  413      */\n  414:     float3 getPrevPosW(uint meshInstanceID, uint triangleIndex, float3 barycentrics)\n  415      {\n  416          const uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  417:         float3 prevPos = float3(0, 0, 0);\n  418  \n  419          [unroll]\n  ...\n  432          \\param[out] p Position of vertex 0,1,2 in world space.\n  433      */\n  434:     void getVertexPositionsW(uint meshInstanceID, uint triangleIndex, out float3 p[3])\n  435      {\n  436          uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  ...\n  480          \\return Evaluated outgoing radiance on the front-facing side.\n  481      */\n  482:     float3 getEmissive(uint materialID, float2 uv, MaterialResources mr)\n  483      {\n  484          MaterialData m = materials[materialID];\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp:\n   43          class MikkTSpaceWrapper {\n   44           public:\n   45:             static std::vector<float3> generateBitangents(const float3* pPositions, const float3* pNormals, const float2* pTexCrd, const uint32_t* pIndices, size_t vertexCount, size_t indexCount)\n   46              {\n   47                  if (!pNormals || !pPositions || !pTexCrd || !pIndices) {\n   ..\n   51                      if (pTexCrd) logWarning(\"Can't generate tangent space. The mesh doesn't have texture coordinates\");\n   52                      if (pIndices) logWarning(\"Can't generate tangent space. The mesh doesn't have indices\");\n   53:                     return std::vector<float3>(vertexCount, float3(0, 0, 0));\n   54                  }\n   55  \n   ..\n   70                  {\n   71                      logError(\"Failed to generate MikkTSpace tangents\");\n   72:                     return std::vector<float3>(vertexCount, float3(0, 0, 0));\n   73                  }\n   74  \n   ..\n   77  \n   78          private:\n   79:             MikkTSpaceWrapper(const float3* pPositions, const float3* pNormals, const float2* pTexCrd, const uint32_t* pIndices, size_t vertexCount, size_t indexCount) :\n   80                  mpPositions(pPositions), mpNormals(pNormals), mpTexCrd(pTexCrd), mpIndices(pIndices), mFaceCount(indexCount / 3), mBitangents(vertexCount) {}\n   81:             const float3* mpPositions;\n   82:             const float3* mpNormals;\n   83              const float2* mpTexCrd;\n   84              const uint32_t* mpIndices;\n   85              size_t mFaceCount;\n   86:             std::vector<float3> mBitangents;\n   87              int32_t getFaceCount() const { return (int32_t)mFaceCount; }\n   88              int32_t getIndex(int32_t face, int32_t vert) { return mpIndices[face * 3 + vert]; }\n   89:             void getPosition(float position[], int32_t face, int32_t vert) { *(float3*)position = mpPositions[getIndex(face, vert)]; }\n   90:             void getNormal(float normal[], int32_t face, int32_t vert) { *(float3*)normal = mpNormals[getIndex(face, vert)]; }\n   91              void getTexCrd(float texCrd[], int32_t face, int32_t vert) { *(float2*)texCrd = mpTexCrd[getIndex(face, vert)]; }\n   92  \n   93              void setTangent(const float tangent[], float sign, int32_t face, int32_t vert) {\n   94                  int32_t index = getIndex(face, vert);\n   95:                 float3 T(*(float3*)tangent), N;\n   96                  getNormal(&N[0], face, vert);\n   97                  // bitangent = fSign * cross(vN, tangent);\n   ..\n  100          };\n  101  \n  102:         void validateTangentSpace(const float3 bitangents[], uint32_t vertexCount) {\n  103:             auto isValid = [](const float3& bitangent) {\n  104                  if (glm::any(glm::isinf(bitangent) || glm::isnan(bitangent))) return false;\n  105                  if (length(bitangent) < 1e-6f) return false;\n  ...\n  201  \n  202          // Generate tangent space if that's required\n  203:         std::vector<float3> bitangents;\n  204          if (!is_set(mFlags, Flags::UseOriginalTangentSpace) || !mesh.pBitangents) {\n  205              bitangents = MikkTSpaceWrapper::generateBitangents(mesh.pPositions, mesh.pNormals, mesh.pTexCrd, mesh.pIndices, mesh.vertexCount, mesh.indexCount);\n  ...\n  211              StaticVertexData s;\n  212              s.position = mesh.pPositions[v];\n  213:             s.normal = mesh.pNormals ? mesh.pNormals[v] : float3(0, 0, 0);\n  214              s.texCrd = mesh.pTexCrd ? mesh.pTexCrd[v] : float2(0, 0);\n  215              s.bitangent = bitangents.size() ? bitangents[v] : mesh.pBitangents[v];\n  ...\n  415          for (size_t i = 0; i < mMeshes.size(); i++) {\n  416              const auto& mesh = mMeshes[i];\n  417:             float3 boxMin(FLT_MAX);\n  418:             float3 boxMax(-FLT_MAX);\n  419  \n  420              const auto* staticData = &mBuffersData.staticData[mesh.staticVertexOffset];\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.h:\n   65          uint32_t indexCount = 0;                    // The number of indices the mesh has. Can't be zero - the scene doesn't support non-indexed meshes. If you'd like us to support non-indexed meshes, please open an issue\n   66          const uint32_t* pIndices = nullptr;         // Array of indices. The element count must match `indexCount`\n   67:         const float3* pPositions = nullptr;         // Array of vertex positions. The element count must match `vertexCount`. This field is required\n   68:         const float3* pNormals = nullptr;           // Array of vertex normals. The element count must match `vertexCount`.   This field is required\n   69:         const float3* pBitangents = nullptr;        // Array of vertex bitangent. The element count must match `vertexCount`. Optional. If set to nullptr, or if BuildFlags::UseOriginalTangentSpace is not set, the tangents will be generated using MikkTSpace\n   70          const float2* pTexCrd = nullptr;            // Array of vertex texture coordinates. The element count must match `vertexCount`. This field is required\n   71          const uint4* pBoneIDs = nullptr;            // Array of bone IDs. The element count must match `vertexCount`. This field is optional. If it's set, that means that the mesh is animated, in which case pBoneWeights can't be nullptr\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneTypes.slang:\n   63  struct StaticVertexData\n   64  {\n   65:     float3 position;\n   66      float  _pad1;\n   67  \n   68:     float3 normal;\n   69      float  _pad2;\n   70  \n   71:     float3 bitangent;\n   72      float  _pad3;\n   73  \n   ..\n   79  struct PackedStaticVertexData\n   80  {\n   81:     float3 position;\n   82:     float3 packedNormalBitangent; // 3xfp16 each\n   83      float2 texCrd;\n   84  \n   ..\n  118          v.texCrd = texCrd;\n  119  \n  120:         float3 n;\n  121          n.x = f16tof32(asuint(packedNormalBitangent.x) & 0xffff);\n  122          n.y = f16tof32(asuint(packedNormalBitangent.x) >> 16);\n  ...\n  124          v.normal = normalize(n);\n  125  \n  126:         float3 b;\n  127          b.x = f16tof32(asuint(packedNormalBitangent.y) >> 16);\n  128          b.y = f16tof32(asuint(packedNormalBitangent.z) & 0xffff);\n  ...\n  137  struct PrevVertexData\n  138  {\n  139:     float3 position;\n  140  };\n  141  \n  ...\n  150  struct VertexData\n  151  {\n  152:     float3 posW;            ///< Position in world space.\n  153      float  _pad1;\n  154  \n  155:     float3 normalW;         ///< Shading normal in world space.\n  156      float  _pad2;\n  157  \n  158:     float3 bitangentW;      ///< Shading bitangent in world space.\n  159      float  _pad3;\n  160  \n  ...\n  162      float  _pad4;\n  163  \n  164:     float3 faceNormalW;     ///< Face normal in world space.\n  165      float  _pad5;\n  166      \n\n/home/max/dev/Falcor/src/Falcor/Scene/Shading.slang:\n   34  struct ShadingResult\n   35  {\n   36:     float3 diffuseBrdf;             // The result of the diffuse BRDF\n   37:     float3 specularBrdf;            // The result of the specular BRDF\n   38:     float3 diffuse;                 // The diffuse component of the result\n   39:     float3 specular;                // The specular component of the result\n   40      float4 color;                   // The final color. Alpha holds the opacity valua\n   41  };\n\n/home/max/dev/Falcor/src/Falcor/Scene/ShadingData.slang:\n   37  struct ShadingData\n   38  {\n   39:     float3  posW;                   ///< Shading hit position in world space\n   40      float   _pad0;\n   41  \n   42:     float3  V;                      ///< Direction to the eye at shading hit\n   43      float   _pad1;\n   44  \n   45:     float3  N;                      ///< Shading normal at shading hit\n   46      float   _pad2;\n   47  \n   48:     float3  T;                      ///< Shading tangent at shading hit\n   49      float   _pad3;\n   50  \n   51:     float3  B;                      ///< Shading bitangent at shading hit\n   52      float   _pad4;\n   53  \n   ..\n   57  \n   58      // Primitive data\n   59:     float3  faceN;                  ///< Face normal in world space, always on the front-facing side.\n   60      float   _pad6;\n   61  \n   ..\n   72  \n   73  \n   74:     float3  diffuse;                ///< Diffuse albedo.\n   75      float   _pad7;\n   76  \n   77:     float3  specular;               ///< Specular albedo.\n   78      float   _pad8;\n   79      \n   80:     float3  emissive;\n   81      float   _pad9;\n   82  \n   ..\n   96          \\return Ray origin of the new ray.\n   97      */\n   98:     float3 computeNewRayOrigin(bool viewside = true)\n   99      {\n  100          return computeRayOrigin(posW, (frontFacing == viewside) ? faceN : -faceN);\n  ...\n  105  /** Convert RGB to normal\n  106  */\n  107: float3 RgbToNormal(float3 rgb)\n  108  {\n  109:     float3 n = rgb * 2 - 1;\n  110      return normalize(n);\n  111  }\n  ...\n  113  /** Convert RG to normal\n  114  */\n  115: float3 RgToNormal(float2 rg)\n  116  {\n  117:     float3 n;\n  118      n.xy = rg * 2 - 1;\n  119  \n  ...\n  134      if (mapType == NormalMapUnused) return;\n  135  \n  136:     float3 mapN = lod.sampleTexture(mr.normalMap, mr.samplerState, sd.uv).xyz;\n  137      switch(mapType)\n  138      {\n  ...\n  196  }\n  197  \n  198: void applyAlphaTest(uint matFlags, float alpha, float threshold, float3 posW)\n  199  {\n  200  #ifndef _MS_DISABLE_ALPHA_TEST\n  ...\n  209      texture level of detail, and must implement the `ITextureSampler` interface.\n  210  */\n  211: ShadingData _prepareShadingData<L:ITextureSampler>(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir, L lod, bool useNormalMap)\n  212  {\n  213      ShadingData sd = {};\n  ...\n  252      {\n  253          // R - Occlusion; G - Roughness; B - Metallic\n  254:         sd.diffuse = lerp(baseColor.rgb, float3(0), spec.b);\n  255  \n  256          // Calculate the specular reflectance for dielectrics from the IoR, as in the Disney BSDF [Burley 2015].\n  ...\n  259          float F0 = f * f;\n  260  \n  261:         sd.specular = lerp(float3(F0), baseColor.rgb, spec.b);\n  262          sd.linearRoughness = spec.g;\n  263          sd.metallic = spec.b;\n  ...\n  301  /** Prepare the hit-point data\n  302  */\n  303: ShadingData prepareShadingData(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir)\n  304  {\n  305      ImplicitLodTextureSampler lod = { };\n  ...\n  312      texture fetches.\n  313  */\n  314: ShadingData prepareShadingData(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir, float lod)\n  315  {\n  316      ExplicitLodTextureSampler explicitLOD = { lod };\n  ...\n  326      \\param[in] lodMinusTexDim Texture level-of-details for ray cones with the texture dimensions subtracted out. See TextureSampler and TexLODHelpers.\n  327  */\n  328: ShadingData prepareShadingDataUsingRayConesLOD(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 camPosW, float lodMinusTexDim)\n  329  {\n  330      ExplicitRayConesLodTextureSampler explicitRayConesLOD = { lodMinusTexDim };\n  ...\n  341      \\param[in] dUVdy Differential texture coordinates in y.\n  342  */\n  343: ShadingData prepareShadingDataUsingRayDiffsLOD(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 camPosW, float2 dUVdx, float2 dUVdy)\n  344  {\n  345      ExplicitRayDiffsLodTextureSampler explicitRayDiffsLOD = { dUVdx, dUVdy };\n  ...\n  354      values will be used for all material texture fetches.\n  355  */\n  356: ShadingData prepareShadingData(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir, float2 gradX, float2 gradY)\n  357  {\n  358      ExplicitGradientTextureSampler lod = { gradX, gradY };\n  ...\n  365  void applyIrayBentNormals(inout ShadingData sd, VertexData v)\n  366  {\n  367:     float3 Ng = v.faceNormalW;\n  368:     float3 Ns = sd.N;\n  369  \n  370      // Specular reflection in shading normal\n  371:     float3 R = reflect(-sd.V, Ns);\n  372      float a = dot(Ng, R);\n  373      if (a < 0) // Perturb normal\n  374      {\n  375          float b = max(0.001, dot(Ns, Ng));\n  376:         float3 Nss = normalize(sd.V + normalize(R - Ns * a / b));\n  377          sd.N = Nss;\n  378          sd.NdotV = dot(sd.N, sd.V);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Color/ColorHelpers.slang:\n   37      \\param RGBColor linear HDR RGB color in the ITU-R BT.709 color space\n   38  */\n   39: inline float luminance(float3 rgb)\n   40  {\n   41:     return dot(rgb, float3(0.2126f, 0.7152f, 0.0722f));\n   42  }\n   43  \n   ..\n   45      \\param RGBColor linear HDR RGB color\n   46  */\n   47: inline float3 RGBToYCgCo(float3 rgb)\n   48  {\n   49:     float Y = dot(rgb, float3(0.25f, 0.50f, 0.25f));\n   50:     float Cg = dot(rgb, float3(-0.25f, 0.50f, -0.25f));\n   51:     float Co = dot(rgb, float3(0.50f, 0.00f, -0.50f));\n   52:     return float3(Y, Cg, Co);\n   53  }\n   54  \n   ..\n   56      \\param YCgCoColor linear HDR YCgCo color\n   57  */\n   58: inline float3 YCgCoToRGB(float3 YCgCo)\n   59  {\n   60      float tmp = YCgCo.x - YCgCo.y;\n   ..\n   62      float g = YCgCo.x + YCgCo.y;\n   63      float b = tmp - YCgCo.z;\n   64:     return float3(r, g, b);\n   65  }\n   66  \n   ..\n   68      \\param RGBColor linear HDR RGB color in the ITU-R BT.709 color space\n   69  */\n   70: inline float3 RGBToYUV(float3 rgb)\n   71  {\n   72:     float3 ret;\n   73:     ret.x = dot(rgb, float3(0.2126f, 0.7152f, 0.0722f));\n   74:     ret.y = dot(rgb, float3(-0.09991f, -0.33609f, 0.436f));\n   75:     ret.z = dot(rgb, float3(0.615f, -0.55861f, -0.05639f));\n   76      return ret;\n   77  }\n   ..\n   80      \\param YUVColor linear HDR YUV color in the ITU-R BT.709 color space\n   81  */\n   82: inline float3 YUVToRGB(float3 yuv)\n   83  {\n   84:     float3 ret;\n   85:     ret.x = dot(yuv, float3(1.0f, 0.0f, 1.28033f));\n   86:     ret.y = dot(yuv, float3(1.0f, -0.21482f, -0.38059f));\n   87:     ret.z = dot(yuv, float3(1.0f, 2.12798f, 0.0f));\n   88      return ret;\n   89  }\n   ..\n  107      \\param sRGBColor sRGB input color\n  108  */\n  109: inline float3 sRGBToLinear(float3 srgb)\n  110  {\n  111:     return float3(\n  112          sRGBToLinear(srgb.x),\n  113          sRGBToLinear(srgb.y),\n  ...\n  133      \\param LinearColor linear input color\n  134  */\n  135: inline float3 linearToSRGB(float3 lin)\n  136  {\n  137:     return float3(\n  138          linearToSRGB(lin.x),\n  139          linearToSRGB(lin.y),\n\n/home/max/dev/Falcor/src/Falcor/Utils/Color/ColorMap.slang:\n   36      Values outside the [0,1] range are clamped.\n   37      \\param[in] x Scalar value.\n   38:     \\return float3 Continuous RGB color in range [0,1].\n   39  */\n   40: float3 colormapGray(float x)\n   41  {\n   42      float v = saturate(x);\n   43:     return float3(v, v, v);\n   44  }\n   45  \n   ..\n   47      Values outside the [0,1] range are clamped to the end points.\n   48      \\param[in] x Scalar value.\n   49:     \\return float3 Continuous RGB color in range [0,1].\n   50  */\n   51: float3 colormapJet(float x)\n   52  {\n   53      // Code written in Matlab to match jet.m output:\n   ..\n   58      //y = [R G B];\n   59      //y = max(0, min(1, y));\n   60:     return saturate(1.5 - abs(4 * clamp(x, 0, 1) - float3(3, 2, 1)));\n   61  }\n   62  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Color/ColorUtils.h:\n   63  {\n   64      // Transform from RGB color in Rec.709 to CIE XYZ.\n   65:     static const glm::float3x3 kColorTransform_RGBtoXYZ_Rec709 =\n   66      {\n   67          0.4123907992659595, 0.2126390058715104, 0.0193308187155918,\n   ..\n   71  \n   72      // Transform from XYZ color to RGB in Rec.709.\n   73:     static const glm::float3x3 kColorTransform_XYZtoRGB_Rec709 =\n   74      {\n   75          3.2409699419045213, -0.9692436362808798, 0.0556300796969936,\n   ..\n   79  \n   80      // Transform from CIE XYZ to LMS using the CAT02 transform.\n   81:     static const glm::float3x3 kColorTransform_XYZtoLMS_CAT02 =\n   82      {\n   83          0.7328, -0.7036, 0.0030,\n   ..\n   87  \n   88      // Transform from LMS to CIE XYZ using the inverse CAT02 transform.\n   89:     static const glm::float3x3 kColorTransform_LMStoXYZ_CAT02 =\n   90      {\n   91          1.096123820835514, 0.454369041975359, -0.009627608738429,\n   ..\n   95  \n   96      // Transform from CIE XYZ to LMS using the Bradford transform.\n   97:     static const glm::float3x3 kColorTransform_XYZtoLMS_Bradford =\n   98      {\n   99          0.8951, -0.7502, 0.0389,\n  ...\n  103  \n  104      // Transform from LMS to CIE XYZ using the inverse Bradford transform.\n  105:     static const glm::float3x3 kColorTransform_LMStoXYZ_Bradford =\n  106      {\n  107          0.98699290546671214, 0.43230526972339445, -0.00852866457517732,\n  ...\n  112      /** Transforms an RGB color in Rec.709 to CIE XYZ.\n  113      */\n  114:     static float3 RGBtoXYZ_Rec709(float3 c)\n  115      {\n  116          return kColorTransform_RGBtoXYZ_Rec709 * c;\n  ...\n  119      /** Transforms an XYZ color to RGB in Rec.709.\n  120      */\n  121:     static float3 XYZtoRGB_Rec709(float3 c)\n  122      {\n  123          return kColorTransform_XYZtoRGB_Rec709 * c;\n  ...\n  126      /** Converts (chromaticities, luminance) to XYZ color.\n  127      */\n  128:     static float3 xyYtoXYZ(float x, float y, float Y)\n  129      {\n  130:         return float3(x * Y / y, Y, (1.f - x - y) * Y / y);\n  131      }\n  132  \n  ...\n  140          \\return CIE XYZ color.\n  141      */\n  142:     static float3 colorTemperatureToXYZ(float T, float Y = 1.f)\n  143      {\n  144          if (T < 1667.f || T > 25000.f)\n  145          {\n  146              logError(\"colorTemperatureToXYZ() - T is out of range\");\n  147:             return float3(0, 0, 0);\n  148          }\n  149  \n  ...\n  198          \\return 3x3 matrix M, which transforms linear RGB in Rec.709 using c' = M * c.\n  199      */\n  200:     static glm::float3x3 calculateWhiteBalanceTransformRGB_Rec709(float T)\n  201      {\n  202:         static const glm::float3x3 MA = kColorTransform_XYZtoLMS_CAT02 * kColorTransform_RGBtoXYZ_Rec709;    // RGB -> LMS\n  203:         static const glm::float3x3 invMA = kColorTransform_XYZtoRGB_Rec709 * kColorTransform_LMStoXYZ_CAT02; // LMS -> RGB\n  204  \n  205          // Compute destination reference white in LMS space.\n  206:         static const float3 wd = kColorTransform_XYZtoLMS_CAT02 * colorTemperatureToXYZ(6500.f);\n  207  \n  208          // Compute source reference white in LMS space.\n  209:         const float3 ws = kColorTransform_XYZtoLMS_CAT02 * colorTemperatureToXYZ(T);\n  210  \n  211          // Derive final 3x3 transform in RGB space.\n  212:         float3 scale = wd / ws;\n  213:         glm::float3x3 D = glm::diagonal3x3(scale);\n  214  \n  215          return invMA * D * MA;\n\n/home/max/dev/Falcor/src/Falcor/Utils/Helpers.slang:\n   34      Spherical map sampling\n   35  *******************************************************************/\n   36: float2 dirToSphericalCrd(float3 direction)\n   37  {\n   38:     float3 p = normalize(direction);\n   39      float2 uv;\n   40      uv.x = (1 + atan2(-p.z, p.x) / M_PI) * 0.5;\n   ..\n   43  }\n   44  \n   45: float3 sphericalCrdToDir(float2 uv)\n   46  {\n   47      float phi = M_PI * uv.y;\n   48      float theta = M_2PI * uv.x - (M_PI / 2.0f);\n   49  \n   50:     float3 dir;\n   51      dir.x = sin(phi) * sin(theta);\n   52      dir.y = cos(phi);\n   ..\n   90      \\return Ray origin of the new ray.\n   91  */\n   92: float3 computeRayOrigin(float3 pos, float3 normal)\n   93  {\n   94      const float origin = 1.f / 32.f;\n   ..\n   98      // Per-component integer offset to bit representation of fp32 position.\n   99      int3 iOff = int3(normal * iScale);\n  100:     float3 iPos = asfloat(asint(pos) + (pos < 0.f ? -iOff : iOff));\n  101  \n  102      // Select per-component between small fixed offset or above variable offset depending on distance to origin.\n  103:     float3 fOff = normal * fScale;\n  104      return abs(pos) < origin ? pos + fOff : iPos;\n  105  }\n  ...\n  115      \\return True if the ray intersects the sphere.\n  116  */\n  117: bool intersectRaySphere(float3 rayOrigin, float3 rayDir, float3 sphereCenter, float sphereRadius, out float3 intersectionPos)\n  118  {\n  119      // Implementation is taken from Chapter 7 of Ray-Tracing Gems\n  120:     float3 f = rayOrigin - sphereCenter;\n  121      float a = dot(rayDir, rayDir);\n  122      float b = dot(-f, rayDir);\n  ...\n  159  // TODO: this function is broken an may return negative values.\n  160  // Issue #780\n  161: float getMetallic(float3 diffuse, float3 spec)\n  162  {\n  163      // This is based on the way that UE4 and Substance Painter 2 converts base+metallic+specular level to diffuse/spec colors\n  ...\n  221  }\n  222  \n  223: float sineHash3D(float3 p)\n  224  {\n  225      return sineHash(float2(sineHash(p.xy), p.z));\n  226  }\n  227  \n  228: float calculateHashedAlpha(float3 hashInputCoord, float hashScale, bool useAnisotropy)\n  229  {\n  230      // Provide a decent default to our alpha threshold\n  ...\n  236  \n  237          // Find the discretized derivatives of our coordinates\n  238:         float3 anisoDeriv = max(abs(ddx(hashInputCoord)), abs(ddy(hashInputCoord)));\n  239:         float3 anisoScales = float3(0.707f / (hashScale * anisoDeriv.x),\n  240                                      0.707f / (hashScale * anisoDeriv.y),\n  241                                      0.707f / (hashScale * anisoDeriv.z));\n  242          // Find log-discretized noise scales\n  243:         float3 scaleFlr = float3(exp2(floor(log2(anisoScales.x))),\n  244                                   exp2(floor(log2(anisoScales.y))),\n  245                                   exp2(floor(log2(anisoScales.z))));\n  246:         float3 scaleCeil = float3(exp2(ceil(log2(anisoScales.x))),\n  247                                    exp2(ceil(log2(anisoScales.y))),\n  248                                    exp2(ceil(log2(anisoScales.z))));\n  ...\n  251                                sineHash3D(floor(scaleCeil * hashInputCoord)));\n  252          // Factor to linearly interpolate with\n  253:         float3 fractLoc = float3(frac(log2(anisoScales.x)),\n  254                                   frac(log2(anisoScales.y)),\n  255                                   frac(log2(anisoScales.z)));\n  256          float2 toCorners = float2(length(fractLoc),\n  257:                                   length(float3(1.0f, 1.0f, 1.0f) - fractLoc));\n  258          float lerpFactor = toCorners.x / (toCorners.x + toCorners.y);\n  259          // Interpolate alpha threshold from noise at two scales\n  ...\n  261          // Pass into CDF to compute uniformly distrib threshold\n  262          float a = min(lerpFactor, 1 - lerpFactor);\n  263:         float3 cases = float3(x * x / (2 * a * (1 - a)), (x - 0.5 * a) / (1 - a), 1.0 - ((1 - x) * (1 - x) / (2 * a * (1 - a))));\n  264          // Find our final, uniformly distributed alpha threshold\n  265          alphaCompare = (x < (1 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\n  ...\n  283          float a = min(lerpFactor, 1 - lerpFactor);\n  284          // Pass into CDF to compute uniformly distrib threshold\n  285:         float3 cases = float3(x * x / (2 * a * (1 - a)), (x - 0.5 * a) / (1 - a), 1.0 - ((1 - x) * (1 - x) / (2 * a * (1 - a))));\n  286          // Find our final, uniformly distributed alpha threshold\n  287          alphaCompare = (x < (1 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\n  ...\n  299      \\todo calculateHashedAlpha requires ddx/ddy, so cannot be used in RT mode.\n  300  */\n  301: bool evalAlphaTest(uint matFlags, float alpha, float threshold, float3 posW)\n  302  {\n  303      if (EXTRACT_ALPHA_MODE(matFlags) != AlphaModeMask) return false;\n\n/home/max/dev/Falcor/src/Falcor/Utils/HostDeviceShared.slangh:\n   43  \n   44  using uint = uint32_t;\n   45: using float3x3 = glm::float3x3;\n   46: using float3x4 = glm::float3x4;\n   47  using float4x4 = glm::float4x4;\n   48  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Image/Bitmap.cpp:\n  228          switch(bpp) {\n  229              case 128:\n  230:                 pBmp->mFormat = ResourceFormat::RGBA32Float;    // 4xfloat32 HDR format\n  231                  break;\n  232              case 96:\n  233:                 pBmp->mFormat = isRGB32fSupported(pDevice) ? ResourceFormat::RGB32Float : ResourceFormat::RGBA32Float;     // 3xfloat32 HDR format\n  234                  break;\n  235              case 64:\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/AABB.h:\n   35      struct BoundingBox\n   36      {\n   37:         float3 center; ///< Center position of the bounding box\n   38:         float3 extent; ///< Half length of each side. Essentially the coordinates to the max corner relative to the center.\n   39  \n   40          /** Checks whether two bounding boxes are equivalent in position and size\n   ..\n   51          BoundingBox transform(const glm::mat4& mat) const\n   52          {\n   53:             float3 min = center - extent;\n   54:             float3 max = center + extent;\n   55  \n   56:             float3 xa = float3(mat[0] * min.x);\n   57:             float3 xb = float3(mat[0] * max.x);\n   58:             float3 xMin = glm::min(xa, xb);\n   59:             float3 xMax = glm::max(xa, xb);\n   60  \n   61:             float3 ya = float3(mat[1] * min.y);\n   62:             float3 yb = float3(mat[1] * max.y);\n   63:             float3 yMin = glm::min(ya, yb);\n   64:             float3 yMax = glm::max(ya, yb);\n   65  \n   66:             float3 za = float3(mat[2] * min.z);\n   67:             float3 zb = float3(mat[2] * max.z);\n   68:             float3 zMin = glm::min(za, zb);\n   69:             float3 zMax = glm::max(za, zb);\n   70  \n   71  \n   72:             float3 newMin = xMin + yMin + zMin + float3(mat[3]);\n   73:             float3 newMax = xMax + yMax + zMax + float3(mat[3]);\n   74  \n   75              return BoundingBox::fromMinMax(newMin, newMax);\n   ..\n   79              \\return Minimum position\n   80          */\n   81:         float3 getMinPos() const\n   82          {\n   83              return center - extent;\n   ..\n   87              \\return Maximum position\n   88          */\n   89:         float3 getMaxPos() const\n   90          {\n   91              return center + extent;\n   ..\n   95              \\return X,Y and Z lengths of the bounding box\n   96          */\n   97:         float3 getSize() const\n   98          {\n   99              return extent * 2.0f;\n  ...\n  105              \\return A bounding box\n  106          */\n  107:         static BoundingBox fromMinMax(const float3& min, const float3& max)\n  108          {\n  109              BoundingBox box;\n  110:             box.center = (max + min) * float3(0.5f);\n  111:             box.extent = (max - min) * float3(0.5f);\n  112              return box;\n  113          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/AABB.slang:\n   32  struct AABB\n   33  {\n   34:     float3 minPoint;    ///< Minimum point.\n   35:     float3 maxPoint;    ///< Maximum point. If any minPoint > maxPoint the box is invalid.\n   36  \n   37      /** Set box to single point.\n   38      */\n   39:     [mutating] void set(float3 p)\n   40      {\n   41          minPoint = p;\n   ..\n   46          Note if min > max in any component the box is invalid.\n   47      */\n   48:     [mutating] void set(float3 _min, float3 _max)\n   49      {\n   50          minPoint = _min;\n   ..\n   69      /** Grows the box to include the point p.\n   70      */\n   71:     [mutating] void include(float3 p)\n   72      {\n   73          minPoint = min(minPoint, p);\n   ..\n   86          \\return True if p is in the box (inclusive test), false if outside or box invalid.\n   87      */\n   88:     bool contains(float3 p)\n   89      {\n   90          return valid() && all(p >= minPoint && p <= maxPoint);\n   ..\n   94          \\return Center of the box if valid, undefined otherwise.\n   95      */\n   96:     float3 center()\n   97      {\n   98          return (minPoint + maxPoint) * 0.5f;\n   ..\n  102          \\return Size of the box if valid, undefined otherwise.\n  103      */\n  104:     float3 extent()\n  105      {\n  106          return maxPoint - minPoint;\n  ...\n  112      float area()\n  113      {\n  114:         float3 e = extent();\n  115          return (e.x * e.y + e.x * e.z + e.y * e.z) * 2.f;\n  116      }\n  ...\n  121      float volume()\n  122      {\n  123:         float3 e = extent();\n  124          return e.x * e.y * e.z;\n  125      }\n  ...\n  147          \\return Minimum distance between between point and box, or 0 if the point lies inside. The result is undefined if the box is invalid.\n  148      */\n  149:     float minDistance(float3 p)\n  150      {\n  151:         float3 d1 = minPoint - p;\n  152:         float3 d2 = p - maxPoint;\n  153:         float3 d = max(max(d1, d2), 0.f);\n  154          return length(d);\n  155      }\n  ...\n  162      float minDistance(const AABB other)\n  163      {\n  164:         float3 d1 = minPoint - other.maxPoint;\n  165:         float3 d2 = other.minPoint - maxPoint;\n  166:         float3 d = max(max(d1, d2), 0.f);\n  167          return length(d);\n  168      }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/BBox.h:\n   38      struct BBox\n   39      {\n   40:         float3 minPoint = float3(std::numeric_limits<float>::infinity());     // +inf\n   41:         float3 maxPoint = float3(-std::numeric_limits<float>::infinity());    // -inf\n   42  \n   43          BBox() {}\n   44:         BBox(const glm::float3& p) : minPoint(p), maxPoint(p) {}\n   45  \n   46          /** Returns true if bounding box is valid (all dimensions zero or larger). */\n   ..\n   48  \n   49          /** Returns the dimensions of the bounding box. */\n   50:         float3 dimensions() const { return maxPoint - minPoint; }\n   51  \n   52          /** Returns the centroid of the bounding box. */\n   53:         float3 centroid() const { return (minPoint + maxPoint) * 0.5f; }\n   54  \n   55          /** Returns the surface area of the bounding box. */\n   56          float surfaceArea() const\n   57          {\n   58:             const float3 dims = dimensions();\n   59              return 2.0f * (dims.x * dims.y + dims.y * dims.z + dims.x * dims.z);\n   60          }\n   ..\n   71              }\n   72  \n   73:             const float3 dims = glm::max(float3(epsilon), dimensions());\n   74              return dims.x * dims.y * dims.z;\n   75          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/FalcorMath.h:\n   44          \\param[in] to The destination vector\n   45      */\n   46:     inline glm::quat createQuaternionFromVectors(const float3& from, const float3& to)\n   47      {\n   48          glm::quat quat;\n   49:         float3 nFrom = glm::normalize(from);\n   50:         float3 nTo = glm::normalize(to);\n   51  \n   52          float dot = glm::dot(nFrom, nTo);\n   ..\n   56              float angle = acosf(dot);\n   57  \n   58:             float3 cross = glm::cross(nFrom, nTo);\n   59:             float3 axis = glm::normalize(cross);\n   60  \n   61              quat = glm::angleAxis(angle, axis);\n   ..\n   71          \\return World space ray direction coming from the camera position in the direction of the mouse position\n   72      */\n   73:     inline float3 mousePosToWorldRay(const float2& mousePos, const glm::mat4& viewMat, const glm::mat4& projMat)\n   74      {\n   75          // Convert from [0, 1] to [-1, 1] range\n   ..\n  102          \\return 3x3 rotation matrix.\n  103      */\n  104:     inline glm::mat3 createMatrixFromBasis(const float3& forward, const float3& up)\n  105      {\n  106:         float3 f = glm::normalize(forward);\n  107:         float3 s = glm::normalize(glm::cross(up, forward));\n  108:         float3 u = glm::cross(f, s);\n  109  \n  110          return glm::mat3(s, u, f);\n  ...\n  117          \\return 3x3 rotation matrix.\n  118      */\n  119:     inline glm::mat3 createMatrixFromLookAt(const float3& position, const float3& target, const float3& up)\n  120      {\n  121          return createMatrixFromBasis(target - position, up);\n  ...\n  125          \\param xy The 2D coordinate. if x and y are in the [0,1) range, then a z value can be calculate. Otherwise, xy is normalized and z is zero.\n  126      */\n  127:     inline float3 project2DCrdToUnitSphere(float2 xy)\n  128      {\n  129          float xyLengthSquared = glm::dot(xy, xy);\n  ...\n  138              xy = glm::normalize(xy);\n  139          }\n  140:         return float3(xy.x, xy.y, z);\n  141      }\n  142  \n  ...\n  194      }\n  195  \n  196:     inline float3 hammersleyUniform(uint32_t i, uint32_t n)\n  197      {\n  198          float2 uv((float)i / (float)n, radicalInverse(i));\n  ...\n  202          float t = 1.0f - uv.x;\n  203          float s = sqrt(1.0f - t * t);\n  204:         return float3(s * cos(phi), s * sin(phi), t);\n  205      }\n  206  \n  207:     inline float3 hammersleyCosine(uint32_t i, uint32_t n)\n  208      {\n  209          float2 uv((float)i / (float)n, radicalInverse(i));\n  ...\n  213          float t = sqrt(1.0f - uv.x);\n  214          float s = sqrt(1.0f - t * t);\n  215:         return float3(s * cos(phi), s * sin(phi), t);\n  216      }\n  217  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/MathHelpers.slang:\n   61      \\return Spherical coordinates (theta,phi).\n   62  */\n   63: float2 cartesian_to_spherical_unorm(float3 p)\n   64  {\n   65      p = normalize(p);\n   ..\n   76      \\return Spherical coordinates (theta,phi).\n   77  */\n   78: float2 cartesian_to_spherical_rad(float3 p)\n   79  {\n   80      p = normalize(p);\n   ..\n   90      \\return Position in latitude-longitude map in [0,1] for each component.\n   91  */\n   92: float2 world_to_latlong_map(float3 dir)\n   93  {\n   94:     float3 p = normalize(dir);\n   95      float2 uv;\n   96      uv.x = atan2(p.x, -p.z) * M_1_2PI + 0.5f;\n   ..\n  126      \\return Position in octahedral map in [-1,1] for each component.\n  127  */\n  128: float2 ndir_to_oct_snorm(float3 n)\n  129  {\n  130      // Project the sphere onto the octahedron (|x|+|y|+|z| = 1) and then onto the xy-plane.\n  ...\n  138      \\return Position in octahedral map in [0,1] for each component.\n  139  */\n  140: float2 ndir_to_oct_unorm(float3 n)\n  141  {\n  142      return ndir_to_oct_snorm(n) * 0.5f + 0.5f;\n  ...\n  147      \\return Normalized direction.\n  148  */\n  149: float3 oct_to_ndir_snorm(float2 p)\n  150  {\n  151:     float3 n = float3(p.xy, 1.0 - abs(p.x) - abs(p.y));\n  152      n.xy = (n.z < 0.0) ? oct_wrap(n.xy) : n.xy;\n  153      return normalize(n);\n  ...\n  158      \\return Normalized direction.\n  159  */\n  160: float3 oct_to_ndir_unorm(float2 p)\n  161  {\n  162      return oct_to_ndir_snorm(p * 2.f - 1.f);\n  ...\n  167      \\return Position in octahedral map in [0,1] for each component.\n  168  */\n  169: float2 ndir_to_oct_equal_area_unorm(float3 n)\n  170  {\n  171      // Use atan2 to avoid explicit div-by-zero check in atan(y/x).\n  ...\n  189      \\return Normalized direction.\n  190  */\n  191: float3 oct_to_ndir_equal_area_unorm(float2 p)\n  192  {\n  193      p = p * 2.f - 1.f;\n  ...\n  207      float z = sign(d) * (1.f - r*r);\n  208  \n  209:     return float3(x, y, z);\n  210  }\n  211  \n  ...\n  234      \\return Sampled point on the unit sphere.\n  235  */\n  236: float3 sample_sphere(float2 u)\n  237  {\n  238      float phi = M_2PI * u.y;\n  239      float cosTheta = 1.0f - 2.0f * u.x;\n  240      float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));\n  241:     return float3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);\n  242  }\n  243  \n  ...\n  269      \\return Sampled direction in the local frame (+z axis up).\n  270  */\n  271: float3 sample_cosine_hemisphere_concentric(float2 u, out float pdf)\n  272  {\n  273      float2 d = sample_disk_concentric(u);\n  274      float z = sqrt(max(0.f, 1.f - dot(d, d)));\n  275      pdf = z * M_1_PI;\n  276:     return float3(d, z);\n  277  }\n  278  \n  ...\n  282      \\return Sampled direction in the local frame (+z axis up).\n  283  */\n  284: float3 sample_cosine_hemisphere_polar(float2 u, out float pdf)\n  285  {\n  286:     float3 p;\n  287      float r = sqrt(u.x);\n  288      float phi = M_2PI * u.y;\n  ...\n  299      \\return Sampled direction in the local frame (+z axis up).\n  300  */\n  301: float3 sample_cosine_hemisphere_polar(float2 u)\n  302  {\n  303      float pdf;\n  ...\n  309      \\return Barycentric coordinates (1-u-v,u,v) of the sampled point.\n  310  */\n  311: float3 sample_triangle(float2 u)\n  312  {\n  313      float su = sqrt(u.x);\n  314      float2 b = float2(1.f - su, u.y * su);\n  315:     return float3(1.f - b.x - b.y, b.x, b.y);\n  316  }\n  317  \n  ...\n  324  /** Inverts a 3x3 matrix.\n  325  */\n  326: float3x3 inverse(float3x3 M)\n  327  {\n  328:     float3x3 inv;\n  329      float invdet = 1.0f / determinant(M);\n  330      inv[0][0] = (M[1][1] * M[2][2] - M[2][1] * M[1][2]) * invdet;\n  ...\n  343      This can be used to invent a tangent frame for meshes that don't have real tangents/bitangents.\n  344  */\n  345: float3 perp_stark(float3 u)\n  346  {\n  347      // TODO: Validate this and look at numerical precision etc. Are there better ways to do it?\n  348:     float3 a = abs(u);\n  349      uint uyx = (a.x - a.y) < 0 ? 1 : 0;\n  350      uint uzx = (a.x - a.z) < 0 ? 1 : 0;\n  ...\n  353      uint ym = (1 ^ xm) & uzy;\n  354      uint zm = 1 ^ (xm | ym);  // 1 ^ (xm & ym)\n  355:     float3 v = cross(u, float3(xm, ym, zm));\n  356      return v;\n  357  }\n  ...\n  367      \\param[out] cosTheta Cosine of the angle from the central direction to the cone edge. If the AABB can't be bounded we return -1 (max cone).\n  368  */\n  369: void boundBoxSubtendedConeAngleCenter(const float3 origin, const float3 aabbMin, const float3 aabbMax,\n  370:                                       out float3 coneDir, out float sinTheta, out float cosTheta)\n  371  {\n  372:     const float3 center = (aabbMax + aabbMin) * 0.5f;\n  373:     const float3 extent = (aabbMax - aabbMin) * 0.5f;\n  374:     const float3 dir = center - origin;         // dir = Central cone direction (unnormalized)\n  375      const float extSqr = dot(extent, extent);   // extSqr = squared maximum extent\n  376      const float distSqr = dot(dir, dir);        // distSqr = squared distance to AABB center\n  ...\n  380      // AABB has eight corners, located at p = center +- e[i] for i=1..4.\n  381      // We use the absolute value of the dot product below to avoid having to test all eight.\n  382:     float3 e[4];\n  383:     e[0] = float3(extent.x, extent.y, extent.z);\n  384:     e[1] = float3(extent.x, extent.y, -extent.z);\n  385:     e[2] = float3(extent.x, -extent.y, extent.z);\n  386:     e[3] = float3(extent.x, -extent.y, -extent.z);\n  387  \n  388      cosTheta = 1.f;\n  ...\n  435      \\param[out] cosTheta cosine of the angle.\n  436  */\n  437: void boundBoxSubtendedConeAngleAverage(float3 origin, float3 aabbMin, float3 aabbMax,\n  438:                                        out float3 coneDir, out float sinTheta, out float cosTheta)\n  439  {\n  440      if (all(origin >= aabbMin && origin <= aabbMax))\n  441      {\n  442          // |origin| is inside the AABB.\n  443:         coneDir = float3(0.f, 0.f, 0.f);\n  444          sinTheta = 0.f;\n  445          cosTheta = -1.f;\n  ...\n  448  \n  449      // Compute the average vector to each of the bounding box corners.\n  450:     float3 dirSum = float3(0.f, 0.f, 0.f);\n  451      // Workaround slang/fxc bug (https://github.com/NVIDIAGameWorks/Falcor/issues/164). This can go away when we always use dxc.\n  452  #if 0\n  ...\n  457  #endif\n  458      {\n  459:         const float3 corner = float3((i & 1) ? aabbMin.x : aabbMax.x,\n  460                                       (i & 2) ? aabbMin.y : aabbMax.y,\n  461                                       (i & 4) ? aabbMin.z : aabbMax.z);\n  ...\n  474  #endif\n  475      {\n  476:         const float3 corner = float3((i & 1) ? aabbMin.x : aabbMax.x,\n  477                                       (i & 2) ? aabbMin.y : aabbMax.y,\n  478                                       (i & 4) ? aabbMin.z : aabbMax.z);\n  ...\n  492      \\param[out] cosTheta cosine of that angle.\n  493  */\n  494: void boundSphereSubtendedConeAngle(float3 center, float radius, out float sinTheta, out float cosTheta)\n  495  {\n  496      const float centerDistance2 = dot(center, center);\n  ...\n  517      \\return Squared minimum distance between p and the triangle.\n  518  */\n  519: float computeSquaredMinDistanceToTriangle(const float3 vertices[3], const float3 p)\n  520  {\n  521      // Project p onto the plane of the triangle (the result is independent of triangle winding).\n  522:     const float3 n = normalize(cross(vertices[1] - vertices[0], vertices[2] - vertices[0]));\n  523      const float projDistance = dot(n, (p - vertices[0]));\n  524:     const float3 pProj = p - projDistance * n;\n  525  \n  526      // Edge tests to compute signed distance to each edge.\n  527      // Positive result means the projected point is \"inside\" the edge.\n  528      // With flipped winding, the edges are flipped but n is also flipped so it still works.\n  529:     const float3 edges[3] = {\n  530          normalize(vertices[1] - vertices[0]),\n  531          normalize(vertices[2] - vertices[1]),\n  ...\n  537      for (uint i = 0u; i < 3u; ++i)\n  538      {\n  539:         const float3 edgeN = cross(n, edges[i]);\n  540          const float edgeProjDistance = dot(edgeN, pProj - vertices[i]);\n  541          if (edgeProjDistance >= 0.0f)\n  ...\n  545          else\n  546          {\n  547:             const float3 vec = pProj - vertices[i];\n  548              sqrPlanarDistance = min(edgeProjDistance * edgeProjDistance, sqrPlanarDistance);\n  549          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/PackedFormats.slang:\n   31  /** Encode a normal packed as 2x 16-bit snorms in the octahedral mapping.\n   32  */\n   33: uint encodeNormal2x16(float3 normal)\n   34  {\n   35      float2 octNormal = ndir_to_oct_snorm(normal);\n   ..\n   39  /** Decode a normal packed as 2x 16-bit snorms in the octahedral mapping.\n   40  */\n   41: float3 decodeNormal2x16(uint packedNormal)\n   42  {\n   43      float2 octNormal = unpackSnorm2x16(packedNormal);\n   ..\n   47  /** Encode a normal packed as 3x 16-bit snorms. Note: The high 16 bits of the second dword are unused.\n   48  */\n   49: uint2 encodeNormal3x16(float3 normal)\n   50  {\n   51      uint2 packedNormal;\n   ..\n   57  /** Decode a normal packed as 3x 16-bit snorms. Note: The high 16 bits of the second dword are unused.\n   58  */\n   59: float3 decodeNormal3x16(uint2 packedNormal)\n   60  {\n   61:     float3 normal;\n   62      normal.xy = unpackSnorm2x16(packedNormal.x);\n   63      normal.z = unpackSnorm16(packedNormal.y);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/SphericalHarmonics.slang:\n   42      \\return Evaluated SH basis function.\n   43  */\n   44: float eval_SH(uint idx, float3 p)\n   45  {\n   46      // Standard real SH basis. See https://en.wikipedia.org/wiki/Table_of_spherical_harmonics\n   ..\n   80      \\return Evaluated SH basis function.\n   81  */\n   82: float eval_SH(int l, int m, float3 p)\n   83  {\n   84      return eval_SH(get_SH_index(l, m), p);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/Vector.h:\n   35  {\n   36      using float2 = glm::vec2;\n   37:     using float3 = glm::vec3;\n   38      using float4 = glm::vec4;\n   39  \n   ..\n   51  \n   52      inline std::string to_string(const float2& v) { return \"float2(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \")\"; }\n   53:     inline std::string to_string(const float3& v) { return \"float3(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \")\"; }\n   54      inline std::string to_string(const float4& v) { return \"float4(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \",\" + std::to_string(v.w) + \")\"; }\n   55  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Sampling/SampleGenerator.slang:\n   86  }\n   87  \n   88: float3 sampleNext3D(inout SampleGenerator sg)\n   89  {\n   90:     float3 sample;\n   91:     // Don't use the float3 initializer to ensure consistent order of evaluation.\n   92      sample.x = sampleNext1D(sg);\n   93      sample.y = sampleNext1D(sg);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Scripting/ScriptBindings.cpp:\n   98          addVecType<bool4, bool, bool, bool, bool>(m, \"bool4\");\n   99  \n  100:         // float2, float3, float4\n  101          addVecType<float2, float, float>(m, \"float2\");\n  102:         addVecType<float3, float, float, float>(m, \"float3\");\n  103          addVecType<float4, float, float, float, float>(m, \"float4\");\n  104  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Scripting/Scripting.cpp:\n   70                  falcorDict[name] = float2(floatVec[0], floatVec[1]); break;\n   71              case 3:\n   72:                 falcorDict[name] = float3(floatVec[0], floatVec[1], floatVec[2]); break;\n   73              case 4:\n   74                  falcorDict[name] = float4(floatVec[0], floatVec[1], floatVec[2], floatVec[3]); break;\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/DebugDrawer.cpp:\n   38  }\n   39  \n   40: void DebugDrawer::addLine(const float3& a, const float3& b) {\n   41      if (mVertexData.capacity() - mVertexData.size() >= 2) {\n   42          mVertexData.push_back({a, mCurrentColor});\n   ..\n   54  \n   55  void DebugDrawer::addBoundingBox(const BoundingBox& aabb) {\n   56:     float3 min = aabb.center - aabb.extent;\n   57:     float3 max = aabb.center + aabb.extent;\n   58  \n   59:     Quad bottomFace = { min, float3(max.x, min.y, min.z), float3(max.x, min.y, max.z), float3(min.x, min.y, max.z) };\n   60      addQuad(bottomFace);\n   61  \n   62:     Quad topFace = { float3(min.x, max.y, min.z), float3(max.x, max.y, min.z), max, float3(min.x, max.y, max.z) };\n   63      addQuad(topFace);\n   64  \n   ..\n   69  }\n   70  \n   71: DebugDrawer::Quad buildQuad(const float3& center, const float3& up, const float3& right) {\n   72      // Length of each quad side\n   73      static const float size = 0.08f;\n   74  \n   75      // Half widths based on size constant\n   76:     float3 upOffset = glm::normalize(up) * size / 2.0f;\n   77:     float3 rightOffset = glm::normalize(right) * size / 2.0f;\n   78  \n   79      // CCW from top left\n   ..\n   89  //     DebugDrawer::Quad createQuadForFrame(const ObjectPath::Frame& currFrame, const ObjectPath::Frame& nextFrame)\n   90  //     {\n   91: //         float3 forward = nextFrame.position - currFrame.position;\n   92: //         float3 right = glm::cross(forward, currFrame.up);\n   93: //         float3 up = glm::cross(right, forward);\n   94  //\n   95  //         return buildQuad(currFrame.position, up, right);\n   ..\n   99  //     DebugDrawer::Quad createQuadForFrame(const ObjectPath::Frame& prevFrame, const ObjectPath::Frame& currFrame, const ObjectPath::Frame& nextFrame)\n  100  //     {\n  101: //         float3 lastToCurrFoward = currFrame.position - prevFrame.position;\n  102: //         float3 lastToCurrRight = glm::normalize(glm::cross(lastToCurrFoward, prevFrame.up));\n  103: //         float3 lastToCurrUp = glm::normalize(glm::cross(lastToCurrRight, lastToCurrFoward));\n  104  //\n  105: //         float3 currToNextFoward = nextFrame.position - currFrame.position;\n  106  //\n  107  //         // If curr and next are the same, use the direction from prev to curr\n  ...\n  111  //         }\n  112  //\n  113: //         float3 currToNextRight = glm::normalize(glm::cross(currToNextFoward, currFrame.up));\n  114: //         float3 currToNextUp = glm::normalize(glm::cross(currToNextRight, currToNextFoward));\n  115  //\n  116  //         // Half vector between two direction normals\n  117: //         float3 midUp = (lastToCurrUp + currToNextUp) / 2.0f;\n  118: //         float3 midRight = (lastToCurrRight + currToNextRight) / 2.0f;\n  119  //\n  120  //         return buildQuad(currFrame.position, midUp, midRight);\n  ...\n  199      VertexBufferLayout::SharedPtr pBufferLayout = VertexBufferLayout::create();\n  200      pBufferLayout->addElement(\"POSITION\", 0, ResourceFormat::RGB32Float, 1, 0);\n  201:     pBufferLayout->addElement(\"COLOR\", sizeof(float3), ResourceFormat::RGB32Float, 1, 1);\n  202  \n  203      VertexLayout::SharedPtr pVertexLayout = VertexLayout::create();\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/DebugDrawer.h:\n   51      static const uint32_t kPathDetail = 10;         ///< Segments between keyframes\n   52  \n   53:     using Quad = std::array<float3, 4>;\n   54  \n   55      /** Create a new object for drawing debug geometry.\n   ..\n   61      /** Sets the color for following geometry\n   62      */\n   63:     void setColor(const float3& color) { mCurrentColor = color; }\n   64  \n   65      /** Adds a line segment\n   66      */\n   67:     void addLine(const float3& a, const float3& b);\n   68  \n   69      /** Adds a quad described by four corner points\n   ..\n   97      DebugDrawer(std::shared_ptr<Device> pDevice, uint32_t maxVertices);\n   98  \n   99:     float3 mCurrentColor;\n  100  \n  101      struct LineVertex {\n  102:         float3 position;\n  103:         float3 color;\n  104      };\n  105  \n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.cpp:\n  112          bool addButton(const char label[], bool sameLine = false);\n  113          bool addRadioButtons(const Gui::RadioButtonGroup& buttons, uint32_t& activeID);\n  114:         bool addDirectionWidget(const char label[], float3& direction);\n  115          bool addCheckbox(const char label[], bool& var, bool sameLine = false);\n  116          bool addCheckbox(const char label[], int& var, bool sameLine = false);\n  ...\n  126          void addTooltip(const char tip[], bool sameLine = true);\n  127  \n  128:         bool addRgbColor(const char label[], float3& var, bool sameLine = false);\n  129          bool addRgbaColor(const char label[], float4& var, bool sameLine = false);\n  130  \n  ...\n  471      }\n  472  \n  473:     bool GuiImpl::addDirectionWidget(const char label[], float3& direction) {\n  474:         float3 dir = direction;\n  475          bool b = addVecVar(label, dir, -1.f, 1.f, 0.001f, false, \"%.3f\");\n  476          direction = glm::normalize(dir);\n  ...\n  574      }\n  575  \n  576:     bool GuiImpl::addRgbColor(const char label[], float3& var, bool sameLine) {\n  577          if (sameLine) ImGui::SameLine();\n  578          return ImGui::ColorEdit3(label, glm::value_ptr(var));\n  ...\n 1021      }\n 1022  \n 1023:     bool Gui::Widgets::direction(const char label[], float3& direction) {\n 1024          return mpGui ? mpGui->mpWrapper->addDirectionWidget(label, direction) : false;\n 1025      }\n ....\n 1101      add_vecVar_type(uint4);\n 1102      add_vecVar_type(float2);\n 1103:     add_vecVar_type(float3);\n 1104      add_vecVar_type(float4);\n 1105  \n ....\n 1122      add_vecSlider_type(uint4);\n 1123      add_vecSlider_type(float2);\n 1124:     add_vecSlider_type(float3);\n 1125      add_vecSlider_type(float4);\n 1126  \n ....\n 1147      }\n 1148  \n 1149:     bool Gui::Widgets::rgbColor(const char label[], float3& var, bool sameLine) {\n 1150          return mpGui ? mpGui->mpWrapper->addRgbColor(label, var, sameLine) : false;\n 1151      }\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.h:\n  154                  \\return true if the value changed, otherwise false\n  155              */\n  156:             bool direction(const char label[], float3& direction);\n  157  \n  158              /** Adds a UI widget for multiple checkboxes.\n  ...\n  221                  \\return true if the value changed, otherwise false\n  222              */\n  223:             bool rgbColor(const char label[], float3& var, bool sameLine = false);\n  224  \n  225              /** Adds an RGBA color UI widget.\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.cpp:\n   65      bool init = false;\n   66      TextRenderer::Flags flags = TextRenderer::Flags::Shadowed;\n   67:     float3 color = float3(1, 1, 1);\n   68      Buffer::SharedPtr pVb;\n   69      RasterPass::SharedPtr pPass;\n   ..\n  132  \n  133  \n  134: const float3& TextRenderer::getColor() { return gTextData.color; }\n  135  \n  136: void TextRenderer::setColor(const float3& color) { gTextData.color = color; }\n  137  \n  138  TextRenderer::Flags TextRenderer::getFlags() { return gTextData.flags; }\n  ...\n  187  void TextRenderer::render(RenderContext* pRenderContext, const std::string& text, const Fbo::SharedPtr& pDstFbo, float2 pos) {\n  188      if (is_set(gTextData.flags, TextRenderer::Flags::Shadowed)) {\n  189:         float3 oldColor = getColor();\n  190:         setColor(float3(0));\n  191          renderText(pRenderContext, text, pDstFbo, pos + float2(1));\n  192          setColor(oldColor);\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.h:\n   66          \\return current color The text color\n   67      */\n   68:     static const float3& getColor();\n   69  \n   70      /** Set the color of the text being rendered\n   71          \\param[in] color The text color\n   72      */\n   73:     static void setColor(const float3& color);\n   74  \n   75      /** Get the active flags\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.slang:\n   30  {\n   31  \tfloat4x4 gvpTransform;\n   32: \tfloat3 gFontColor;\n   33  };\n   34  \n\n1173 matches across 99 files\n\n\nSearching 458 files for \"float3\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n  271                  //    LOG_WARN(\"map structured buffer if struct size %u\", mStructSize);\n  272                  //    if (mFormat == ResourceFormat::RGB32Float) {\n  273:                         // due to glsl std120/std430 float3 (12 bytes ) aligned to 16 bytes\n  274                  //        mpStagingResource = Buffer::createStructured(mStructSize, mElementCount, Buffer::BindFlags::None, Buffer::CpuAccess::Read, nullptr); \n  275                  //    } else {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h:\n  371  \n  372      // Additional formats that may be supported on some hardware.\n  373:     CASE(float3,    ResourceFormat::RGB32Float);\n  374  \n  375  #undef CASE\n  ...\n  429  \n  430      // Additional formats that may be supported on some hardware.\n  431:     CASE(float3,    ResourceFormat::RGB32Float);\n  432      \n  433  #undef CASE\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n  103          pCtx->resourceBarrier(pView->getResource(), Resource::State::CopyDest);\n  104          VkClearColorValue colVal;\n  105:         assert(sizeof(ClearType) <= sizeof(colVal.float32));\n  106:         std::memcpy(colVal.float32, &clearVal, sizeof(clearVal)); // VkClearColorValue is a union, so should work regardless of the ClearType\n  107          VkImageSubresourceRange range;\n  108          const auto& viewInfo = pView->getViewInfo();\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  819      c_to_prog(float,  Float);\n  820      c_to_prog(float2, Float2);\n  821:     c_to_prog(float3, Float3);\n  822      c_to_prog(float4, Float4);\n  823  \n  ...\n 1098  set_constant_by_offset(float);\n 1099  set_constant_by_offset(float2);\n 1100: set_constant_by_offset(float3);\n 1101  set_constant_by_offset(float4);\n 1102  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/VariablesBufferUI.cpp:\n   98              break;\n   99          case ReflectionBasicType::Type::Float3:\n  100:             to_gui_widget(var, float3);\n  101              break;\n  102          case ReflectionBasicType::Type::Float4:\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n  782      array elements. It is *not* necessarily the same as\n  783      the size of the array elements. For example an array\n  784:     of `float3`s in a constant buffer may have a stride\n  785      of 16 bytes, but each element is only 12 bytes.\n  786      */\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.h:\n   70  or an overload of `operator=`:\n   71  \n   72:     someField = float3(0);\n   73  \n   74      pObj[\"someTexture\"].setTexture(pMyTexture);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/BuildTriangleList.cs.slang:\n   40  }\n   41  \n   42: RWByteAddressBuffer gVertexPosOutput;       ///< Vertex positions in world space for all mesh light triangles. Size: triangleCount * 3 * sizeof(float3).\n   43  RWByteAddressBuffer gTexCoordsOutput;       ///< Texture coordinates for all mesh light triangles. Size: triangleCount * 3 * sizeof(float2).\n   44  \n   ..\n   59  \n   60      // Store vertex data.\n   61:     float3 p[3];\n   62      float2 texC[3];\n   63      gScene.getVertexPositionsW(gMeshInstanceID, triangleIndex, p);\n   ..\n   73      // Store triangle data.\n   74      float triangleArea;\n   75:     float3 faceNormal = gScene.computeFaceNormalAndAreaW(gMeshInstanceID, p, triangleArea);\n   76  \n   77      gTriangleData[triIdx].lightIdx = gLightIdx;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang:\n  125      const float2 uv = vsIn.uv;        // Interpolated texture coordinate.\n  126      const uint lightIdx = vsIn.lightIdx;\n  127:     float3 color = gScene.materialResources[gLightCollection.meshData[lightIdx].materialID].emissive.SampleLevel(gPointSampler, uv, 0.f).rgb;  // Sampler at mip 0\n  128  \n  129      // Compute weighted color. TODO: For now assume full coverage (= 1.0 in weight).\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.slang:\n   53      struct NullEmissiveSampler : IEmissiveLightSampler\n   54      {\n   55:         bool sampleLight(const float3 posW, const float3 normalW, inout SampleGenerator sg, out TriangleLightSample ls)\n   56          {\n   57              return false;\n   58          }\n   59  \n   60:         float evalPdf(float3 posW, float3 normalW, const TriangleHit hit)\n   61          {\n   62              return 0.f;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang:\n   53      \\return True if a sample was generated, false otherwise.\n   54  */\n   55: bool sampleTriangle(const float3 posW, uint triangleIndex, float2 u, out TriangleLightSample ls)\n   56  {\n   57      ls = {};\n   ..\n   59  \n   60      // Sample the triangle uniformly.\n   61:     const float3 barycentrics = sample_triangle(u);\n   62      ls.posW = gScene.lightCollection.getPosition(triangleIndex, barycentrics);\n   63  \n   64      // Compute light vector and squared distance.\n   65:     float3 toLight = ls.posW - posW; // Unnormalized light vector\n   66      const float distSqr = max(FLT_MIN, dot(toLight, toLight)); // Clamp to avoid NaNs below\n   67      ls.distance = sqrt(distSqr);\n   ..\n   98      \\return Probability density with respect to solid angle at the shading point.\n   99  */\n  100: float evalTrianglePdf(const float3 posW, const TriangleHit hit)\n  101  {\n  102      // Compute light vector and squared distance.\n  103:     float3 toLight = hit.posW - posW; // Unnormalized light vector\n  104      const float distSqr = dot(toLight, toLight);\n  105      if (distSqr <= FLT_MIN) return 0.f; // Avoid NaNs below\n  106:     float3 L = toLight / sqrt(distSqr);\n  107  \n  108      // Cosine of angle between the light's normal and the light vector (flip L since it points towards the light).\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerInterface.slang:\n   37  {\n   38      uint    triangleIndex;      ///< Index of the sampled triangle.\n   39:     float3  posW;               ///< Sampled point on the light source in world space.\n   40:     float3  normalW;            ///< Normal of the sampled point on the light source in world space.\n   41:     float3  dir;                ///< Normalized direction from the shading point to the sampled point on the light source in world space.\n   42      float   distance;           ///< Distance from the shading point to the sampled point.\n   43:     float3  Le;                 ///< Emitted radiance. This is zero if the light is back-facing or sample is invalid.\n   44      float   pdf;                ///< Probability density with respect to solid angle from the shading point. The range is [0,inf] (inclusive), where pdf == 0.0 indicates an invalid sample.\n   45  };\n   ..\n   51  {\n   52      uint    triangleIndex;      ///< Index of the triangle.\n   53:     float3  posW;               ///< Sampled point on the triangle in world space.\n   54:     float3  normalW;            ///< Face normal of the triangle in world space, flipped for back-facing hits.\n   55  };\n   56  \n   ..\n   66          \\return True if a sample was generated, false otherwise.\n   67      */\n   68:     bool sampleLight(const float3 posW, const float3 normalW, inout SampleGenerator sg, out TriangleLightSample ls);\n   69  \n   70      /** Evaluate the PDF at a shading point given a hit point on an emissive triangle.\n   ..\n   74          \\return Probability density with respect to solid angle at the shading point.\n   75      */\n   76:     float evalPdf(float3 posW, float3 normalW, const TriangleHit hit);\n   77  };\n   78  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang:\n   52          \\return True if a sample was generated, false otherwise.\n   53      */\n   54:     bool sampleLight(const float3 posW, const float3 normalW, inout SampleGenerator sg, out TriangleLightSample ls)\n   55      {\n   56          if (gScene.lightCollection.isEmpty()) return false;\n   ..\n   77          \\return Probability density with respect to solid angle at the shading point.\n   78      */\n   79:     float evalPdf(float3 posW, float3 normalW, const TriangleHit hit)\n   80      {\n   81          if (gScene.lightCollection.isEmpty()) return 0;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EnvProbe.slang:\n   55  struct EnvProbeSamplingResult\n   56  {\n   57:     float3 wi;          ///< Sampled direction towards the light in world space. TODO: Rename dir.\n   58      float pdf;          ///< Probability density function for the sampled direction with respect to solid angle.\n   59  };\n   ..\n   61  /** Evaluates the radiance coming from world space direction 'dir'.\n   62  */\n   63: float3 evalEnvProbe(const EnvProbe probe, float3 dir, float lod = 0.f)\n   64  {\n   65      // Get (u,v) coord in latitude-longitude map format.\n   ..\n   76      \\return Probability density function evaluated for direction 'dir'.\n   77  */\n   78: float evalEnvProbePdf(const EnvProbe probe, float3 dir)\n   79  {\n   80      float2 uv = ndir_to_oct_equal_area_unorm(dir);\n   ..\n  146      // Compute final sample position and map to direction.\n  147      float2 uv = ((float2)pos + p) * probe.importanceInvDim;     // Final sample in [0,1)^2.\n  148:     float3 dir = oct_to_ndir_equal_area_unorm(uv);\n  149  \n  150      // Compute final pdf.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EnvProbeSetup.cs.slang:\n   62  \n   63              // Convert p to (u,v) coordinate in latitude-longitude map.\n   64:             float3 dir = oct_to_ndir_equal_area_unorm(p);\n   65              float2 uv = world_to_latlong_map(dir);          \n   66  \n   67              // Accumulate the radiance from this sample.\n   68:             float3 radiance = gEnvMap.SampleLevel(gEnvSampler, uv, 0).rgb;\n   69              L += luminance(radiance);\n   70          }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/FinalizeIntegration.cs.slang:\n   55      const MeshLightData lightData = gMeshData[gTriangleData[triIdx].lightIdx];\n   56      const MaterialData materialData = gScene.getMaterial(lightData.materialID);\n   57:     float3 averageEmissiveColor = materialData.emissive;\n   58  \n   59      if (gScene.isEmissiveTextured(lightData.materialID))\n   ..\n   65          float4 texelSum = asfloat(gTexelSum.Load4(triIdx * 16u));\n   66          float weight = texelSum.a;\n   67:         averageEmissiveColor = weight > 0.f ? texelSum.rgb / weight : float3(1.0f);\n   68      }\n   69:     float3 averageRadiance = averageEmissiveColor * materialData.emissiveFactor;\n   70  \n   71      // Pre-compute the luminous flux emitted, which is what we use during sampling to set probabilities.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.h:\n   77          struct InternalNode {\n   78              NodeType nodeType = NodeType::Internal;\n   79:             float3 aabbMin;\n   80  \n   81              float luminousFlux = 0.f;\n   82:             float3 aabbMax;\n   83  \n   84              float cosConeAngle = kInvalidCosConeAngle; // If cosConeAngle == kInvalidCosConeAngle, the cone should not be used.\n   85:             float3 coneDirection = { 0.f, 0.f, 0.f };\n   86  \n   87              uint32_t leftNodeOffset = kInvalidOffset;\n   ..\n   91          struct LeafNode {\n   92              NodeType nodeType = NodeType::Leaf;\n   93:             float3 aabbMin;\n   94  \n   95              float luminousFlux = 0.f;\n   96:             float3 aabbMax;\n   97  \n   98              float cosConeAngle = kInvalidCosConeAngle;  // If cosConeAngle == kInvalidCosConeAngle, the cone should not be used.\n   99:             float3 coneDirection = { 0.f, 0.f, 0.f };\n  100  \n  101              uint32_t triangleCount = 0;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.slang:\n   45      }\n   46  \n   47:     float3 getNodeConeDirection(uint offset)\n   48      {\n   49          return asfloat(nodes.Load3(offset + kNodeConeDirectionOffset));\n   ..\n   55      }\n   56  \n   57:     void getNodeAABB(uint offset, out float3 aabbMin, out float3 aabbMax)\n   58      {\n   59          aabbMin = asfloat(nodes.Load3(offset + kNodeAABBMinOffset));\n   ..\n  104      }\n  105  \n  106:     float3 getNodeConeDirection(uint offset)\n  107      {\n  108          return asfloat(nodes.Load3(offset + kNodeConeDirectionOffset));\n  109      }\n  110  \n  111:     void setNodeConeDirection(uint offset, float3 dir)\n  112      {\n  113          nodes.Store3(offset + kNodeConeDirectionOffset, asuint(dir));\n  ...\n  119      }\n  120  \n  121:     void getNodeAABB(uint offset, out float3 aabbMin, out float3 aabbMax)\n  122      {\n  123          aabbMin = asfloat(nodes.Load3(offset + kNodeAABBMinOffset));\n  ...\n  125      }\n  126  \n  127:     void setNodeAABB(uint offset, float3 aabbMin, float3 aabbMax)\n  128      {\n  129          nodes.Store3(offset + kNodeAABBMinOffset, asuint(aabbMin));\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp:\n   55          \\return The cosine of the spread angle for the new cone.\n   56      */\n   57:     float computeCosConeAngle(const float3& coneDir, const float cosTheta, const float3& otherConeDir, const float cosOtherTheta) {\n   58          float cosResult = kInvalidCosConeAngle;\n   59          if (cosTheta != kInvalidCosConeAngle && cosOtherTheta != kInvalidCosConeAngle) {\n   ..\n   80          those given by coneUnion().\n   81      */\n   82:     float3 coneUnionOld(float3 aDir, float aCosTheta, float3 bDir, float bCosTheta, float& cosResult) {\n   83:         float3 dir = aDir + bDir;\n   84:         if (aCosTheta == kInvalidCosConeAngle || bCosTheta == kInvalidCosConeAngle || dir == float3(0.0f)) {\n   85              cosResult = kInvalidCosConeAngle;\n   86:             return float3(0.0f);\n   87          }\n   88  \n   ..\n   99          them. Algorithm 1 in the 2018 Sony EGSR light sampling paper.\n  100      */\n  101:     float3 coneUnion(float3 aDir, float aCosTheta, float3 bDir, float bCosTheta, float& cosResult) {\n  102          if (aCosTheta == kInvalidCosConeAngle || bCosTheta == kInvalidCosConeAngle) {\n  103              cosResult = kInvalidCosConeAngle;\n  104:             return float3(0.0f);\n  105          }\n  106  \n  ...\n  126          if (oTheta > glm::pi<float>()) {\n  127              cosResult = kInvalidCosConeAngle;\n  128:             return float3(0.0f);\n  129          }\n  130  \n  ...\n  132          // both cones.\n  133          const float rTheta = oTheta - aTheta;\n  134:         const float3 rDir = glm::cross(aDir, bDir);\n  135:         float3 dir;\n  136          if (glm::dot(rDir, rDir) < 1e-8) {\n  137              // The two vectors are effectively pointing in opposite directions.\n  ...\n  142              const float a = -1.f / (sign + aDir.z);\n  143              const float b = aDir.x * aDir.y * a;\n  144:             dir = float3(1.f + sign * aDir.x * aDir.x * a, sign * b, -sign * aDir.x);\n  145              // The spread angle needs to be pi/2 to encompass aDir and\n  146              // bDir, then aTheta / 2 more on top of that. (Recall that\n  ...\n  161          // TODO: write a unit test.\n  162          // Testing code: make sure both a and b are inside the result.\n  163:         auto checkInside = [&](float3 d, float theta) {\n  164                                 // Make sure that sum of the angle between\n  165                                 // the two cone vectors and the spread angle\n  ...\n  379      }\n  380  \n  381:     float3 LightBVHBuilder::computeLightingConesInternal(uint32_t nodesCurrentByteOffset, AlignedAllocator& alignedAllocator, float& cosConeAngle) {\n  382          const uintptr_t currentNodeBytePointer = reinterpret_cast<uintptr_t>(alignedAllocator.getStartPointer()) + nodesCurrentByteOffset;\n  383  \n  ...\n  388  \n  389              float leftNodeCosConeAngle = kInvalidCosConeAngle;\n  390:             float3 leftNodeConeDirection = computeLightingConesInternal(currentNode->leftNodeOffset, alignedAllocator, leftNodeCosConeAngle);\n  391              float rightNodeCosConeAngle = kInvalidCosConeAngle;\n  392:             float3 rightNodeConeDirection = computeLightingConesInternal(currentNode->rightNodeOffset, alignedAllocator, rightNodeCosConeAngle);\n  393  \n  394              // TODO: Asserts in coneUnion\n  395:     //            float3 coneDirection = coneUnion(leftNodeConeDirection, leftNodeCosConeAngle,\n  396:             float3 coneDirection = coneUnionOld(leftNodeConeDirection, leftNodeCosConeAngle,\n  397                  rightNodeConeDirection, rightNodeCosConeAngle, cosConeAngle);\n  398              currentNode->cosConeAngle = cosConeAngle;\n  ...\n  407      }\n  408  \n  409:     float3 LightBVHBuilder::computeLightingCone(const Range& triangleRange, const BuildingData& data, float& cosTheta) {\n  410:         float3 coneDirection = float3(0.0f);\n  411          cosTheta = kInvalidCosConeAngle;\n  412  \n  413          // We use the average normal as cone direction and grow the cone to include all light normals.\n  414          // TODO: Switch to a more sophisticated algorithm to compute tighter bounding cones.\n  415:         float3 coneDirectionSum = float3(0.0f);\n  416          for (uint32_t triangleIdx = triangleRange.begin; triangleIdx < triangleRange.end; ++triangleIdx) {\n  417              coneDirectionSum += data.trianglesData[triangleIdx].coneDirection;\n  ...\n  430      LightBVHBuilder::SplitResult LightBVHBuilder::computeSplitWithEqual(const BuildingData& /*data*/, const Range& triangleRange, const BBox& nodeBounds, const Options& /*parameters*/) {\n  431          // Find the largest dimension.\n  432:         const float3 dimensions = nodeBounds.dimensions();\n  433          const uint32_t dimension = dimensions[2u] >= dimensions[0u] && dimensions[2u] >= dimensions[1u] ?\n  434              2u : (dimensions[1u] >= dimensions[0u] ? 1u : 0u);\n  ...\n  536          if (parameters.splitAlongLargest) {\n  537              // Find the largest dimension.\n  538:             const float3 dimensions = nodeBounds.dimensions();\n  539              const uint32_t largestDimension = dimensions[2u] >= dimensions[0u] && dimensions[2u] >= dimensions[1u] ?\n  540                  2u : (dimensions[1u] >= dimensions[0u] && dimensions[1u] >= dimensions[2u] ? 1u : 0u);\n  ...\n  595  \n  596          // Find the largest dimension.\n  597:         const float3 dimensions = nodeBounds.dimensions();\n  598          const uint32_t largestDimension = dimensions[2u] >= dimensions[0u] && dimensions[2u] >= dimensions[1u] ?\n  599              2u : (dimensions[1u] >= dimensions[0u] && dimensions[1u] >= dimensions[2u] ? 1u : 0u);\n  ...\n  603              uint32_t triangleCount = 0u;\n  604              float flux = 0.0f;\n  605:             float3 coneDirection = float3(0.0f);\n  606              float cosConeAngle = 1.0f;\n  607  \n  ...\n  674                  if (glm::length(total.coneDirection) >= FLT_MIN) {\n  675                      cosTheta = 1.f;\n  676:                     const float3 coneDir = glm::normalize(total.coneDirection);\n  677                      for (std::size_t j = 0u; j <= i; ++j) {\n  678                          cosTheta = computeCosConeAngle(coneDir, cosTheta, bins[j].coneDirection, bins[j].cosConeAngle);\n  ...\n  692                  if (glm::length(total.coneDirection) >= FLT_MIN) {\n  693                      cosTheta = 1.f;\n  694:                     const float3 coneDir = glm::normalize(total.coneDirection);\n  695                      for (std::size_t j = i; j <= costs.size(); ++j)\n  696                      {\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h:\n  109          struct TriangleSortData {\n  110              BBox bounds;                                ///< World-space bounding box for the light source(s).\n  111:             float3 center = {};                         ///< Center point.\n  112:             float3 coneDirection = {};                  ///< Light emission normal direction.\n  113              float cosConeAngle = 1.f;                   ///< Cosine normal bounding cone (half) angle.\n  114              float flux = 0.f;                           ///< Precomputed triangle flux (note, this takes doublesidedness into account).\n  ...\n  154              \\return  direction of the lighting cone for the node loacted at nodesCurrentByteOffset.\n  155          */\n  156:         float3 computeLightingConesInternal(uint32_t nodesCurrentByteOffset, AlignedAllocator& alignedAllocator, float& cosConeAngle);\n  157  \n  158          /** Compute lighting cone for a range of triangles.\n  ...\n  162              \\return Direction of the lighting cone.\n  163          */\n  164:         static float3 computeLightingCone(const Range& triangleRange, const BuildingData& data, float& cosTheta);\n  165  \n  166          // See the documentation of SplitHeuristicFunction.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHRefit.cs.slang:\n   52      const uint triangleCount = gLightBVH.getNodeTriangleCount(nodeOffset);\n   53  \n   54:     float3 aabbMin = float3(FLT_MAX);\n   55:     float3 aabbMax = float3(-FLT_MAX);\n   56:     float3 normalsSum = float3(0.0f);\n   57      for (uint triangleIndicesIndex = 0u; triangleIndicesIndex < triangleCount; ++triangleIndicesIndex)\n   58      {\n   ..\n   60          for (uint vertexIndex = 0u; vertexIndex < 3u; ++vertexIndex)\n   61          {\n   62:             const float3 p = gLights.getVtxPos(triangleIndex * 3 + vertexIndex);\n   63              aabbMin = min(aabbMin, p);\n   64              aabbMax = max(aabbMax, p);\n   ..\n   70  \n   71      const float coneDirectionLength = length(normalsSum);\n   72:     const float3 coneDirection = normalsSum / coneDirectionLength;\n   73      float cosConeAngle = kInvalidCosConeAngle;\n   74  \n   ..\n   79          {\n   80              const uint triangleIndex = gLightBVH.getNodeTriangleIndex(nodeOffset, triangleIndicesIndex);\n   81:             const float3 normal = gLights.getTriangleData(triangleIndex).normal;\n   82              const float cosDiffAngle = dot(coneDirection, normal);\n   83              cosConeAngle = min(cosConeAngle, cosDiffAngle);\n   ..\n  107      const uint rightChildOffset = gLightBVH.getNodeRightByteOffset(nodeOffset);\n  108  \n  109:     float3 leftAabbMin, leftAabbMax;\n  110      gLightBVH.getNodeAABB(leftChildOffset, leftAabbMin, leftAabbMax);\n  111:     float3 rightAabbMin, rightAabbMax;\n  112      gLightBVH.getNodeAABB(rightChildOffset, rightAabbMin, rightAabbMax);\n  113  \n  114:     const float3 aabbMin = min(leftAabbMin, rightAabbMin);\n  115:     const float3 aabbMax = max(leftAabbMax, rightAabbMax);\n  116      gLightBVH.setNodeAABB(nodeOffset, aabbMin, aabbMax);\n  117  \n  118:     float3 coneDirectionSum = gLightBVH.getNodeConeDirection(leftChildOffset) + gLightBVH.getNodeConeDirection(rightChildOffset);\n  119      const float coneDirectionLength = length(coneDirectionSum);\n  120:     const float3 coneDirection = coneDirectionSum / coneDirectionLength;\n  121      const float cosLeftConeAngle = gLightBVH.getNodeCosConeAngle(leftChildOffset);\n  122      const float cosRightConeAngle = gLightBVH.getNodeCosConeAngle(rightChildOffset);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang:\n   70          \\return True if a sample was generated, false otherwise.\n   71      */\n   72:     bool sampleLight(const float3 posW, const float3 normalW, inout SampleGenerator sg, out TriangleLightSample ls)\n   73      {\n   74          if (gScene.lightCollection.isEmpty()) return false;\n   ..\n   95          \\return Probability density with respect to solid angle at the shading point.\n   96      */\n   97:     float evalPdf(float3 posW, float3 normalW, const TriangleHit hit)\n   98      {\n   99          if (gScene.lightCollection.isEmpty()) return 0;\n  ...\n  149      }\n  150  \n  151:     float distanceToAabb(const float3 aabbMin, const float3 aabbMax, const float3 origin)\n  152      {\n  153          // TODO: Store the AABB as center/extent instead of min/max in the tree.\n  154:         const float3 center = (aabbMin + aabbMax) * 0.5f;\n  155          const float distance = sqrt(dot(origin - center, origin - center));\n  156          return distance;// > 1e-3f ? distance : distance + 1e-3f;\n  ...\n  166          \\return Conservative bound on dot(N,L) for L towards any point in the AABB.\n  167      */\n  168:     float boundCosineTerm(const float3 posW, const float3 normalW, const float3 aabbMin, const float3 aabbMax, out float cosThetaCone)\n  169      {\n  170          // TODO: Store the AABB as center/extent instead of min/max in the tree.\n  171:         const float3 center = (aabbMax + aabbMin) * 0.5f;\n  172:         const float3 origin = posW;\n  173:         float3 coneDir;\n  174  \n  175          float sinThetaCone = 0.f;\n  ...\n  179          case SolidAngleBoundMethod::Sphere:\n  180              // Radius of a bounding sphere that encompasses the bounding box.\n  181:             const float3 extent = (aabbMax - aabbMin) * 0.5f;\n  182              const float radius = sqrt(dot(extent, extent));\n  183              boundSphereSubtendedConeAngle(center - origin, radius, sinThetaCone, cosThetaCone);\n  ...\n  193          }\n  194  \n  195:         const float3 L = normalize(center - origin);\n  196          const float cosThetaL = clamp(dot(normalW, L), -1.f, 1.f);    // Cosine of the angle between normal and vector to AABB center.\n  197          const float sinThetaL = sqrt(max(0.f, 1.f - cosThetaL * cosThetaL));\n  ...\n  206          \\return Relative importance of this node.\n  207      */\n  208:     float computeImportance(const float3 posW, const float3 normalW, const uint nodeByteOffset)\n  209      {\n  210:         float3 aabbMin, aabbMax;\n  211          _lightBVH.getNodeAABB(nodeByteOffset, aabbMin, aabbMax);\n  212  \n  ...\n  238          // We might want to add that to support non-diffuse emitters or switch to another representation altogether.\n  239          const float cosConeAngle = _lightBVH.getNodeCosConeAngle(nodeByteOffset);\n  240:         const float3 dirToAabb = ((aabbMin + aabbMax) * 0.5f - posW) / distance;     // TODO: dirToAabb won't be normalized for very short distances, as the computation of distance has a clamp.\n  241          if (cosConeAngle != kInvalidCosConeAngle && cosConeAngle > 0.f) // theta_o + theta_e < pi. (Note: assumes theta_e = pi/2!)\n  242          {\n  243              float sinConeAngle = sqrt(max(0.f, 1.f - cosConeAngle * cosConeAngle));\n  244  \n  245:             const float3 coneDirection = _lightBVH.getNodeConeDirection(nodeByteOffset);    // Normalized direction of dominant light direction in world space.\n  246              const float cosTheta = dot(coneDirection, -dirToAabb);            // theta = Angle between dominant light dir\n  247              const float sinTheta = sqrt(max(0.f, 1.f - cosTheta * cosTheta));\n  ...\n  262          // We clamp the distance to the AABB by half its radius, as\n  263          // \"[t]he center of the cluster is not representative of the emitter positions over short distances.\" -- Conty Estévez and Kulla, Importance Sampling of Many Lights with Adaptive Tree Splitting.\n  264:         const float3 aabbExtent = aabbMax - aabbMin;\n  265          const float halfRadius = max(aabbExtent.x, max(aabbExtent.y, aabbExtent.z)) * 0.5f;\n  266          distance = max(halfRadius, distance);\n  ...\n  278          \\return True if a leaf node was sampled, false otherwise.\n  279      */\n  280:     bool traverseTree(const float3 posW, const float3 normalW, const uint rootNodeByteOffset, inout float u, out float pdf, out uint leafNodeByteOffset)\n  281      {\n  282          // TODO: Figure out a way to use literal constants for the byte offsets to make it easier to read/extend.\n  ...\n  328          \\return True if we found any triangle(s) to sample, false otherwise.\n  329      */\n  330:     float computeTriangleImportance(const float3 posW, const float3 normalW, const uint triangleIndex)\n  331      {\n  332:         float3 p[3];\n  333          gScene.lightCollection.getVtxPositions(triangleIndex, p);\n  334  \n  ...\n  361          \\return True if a triangle was sampled, false otherwise.\n  362      */\n  363:     bool pickTriangle(const float3 posW, const float3 normalW, const uint leafNodeByteOffset, const float u, out float pdf, out uint triangleIndex)\n  364      {\n  365          const uint triangleCount = _lightBVH.getNodeTriangleCount(leafNodeByteOffset);\n  ...\n  410          \\return True if a triangle was sampled, false otherwise.\n  411      */\n  412:     bool sampleLightViaBVH(const float3 posW, const float3 normalW, const uint rootNodeByteOffset, float u, out float pdf, out uint triangleIndex)\n  413      {\n  414          // Traverse BVH to select a leaf node with N triangles based on estimated probabilities during traversal.\n  ...\n  431          \\param[out] currentByteOffset The offset at which the given node is located.\n  432      */\n  433:     float evalBVHTraversalPdf(const float3 posW, const float3 normalW, uint64_t bitmask, out uint currentByteOffset)\n  434      {\n  435          float traversalPdf = 1.0f;\n  ...\n  477          \\return Probability density for selecting the given triangle.\n  478      */\n  479:     float evalNodeSamplingPdf(const float3 posW, const float3 normalW, const uint triangleCount, const uint currentByteOffset, const uint triangleIndex)\n  480      {\n  481          float triangleSelectionPdf = 1.0f;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n  258          // Create GPU buffers.\n  259          assert(mTriangleCount > 0);\n  260:         const size_t bufSize = mTriangleCount * 3 * sizeof(float3);\n  261          const size_t uvBufSize = mTriangleCount * 3 * sizeof(float2);\n  262  \n  ...\n  536          assert(mStagingBufferValid);\n  537          const void* mappedData = mpStagingBuffer->map(Buffer::MapType::Read);\n  538:         const float3* vertexPos = reinterpret_cast<const float3*>(mappedData);\n  539          const float2* vertexTexCrd = reinterpret_cast<const float2*>(reinterpret_cast<uintptr_t>(mappedData) + mpMeshLightsVertexPos->getSize());\n  540          assert(mpTriangleData);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.h:\n   81      */\n   82      struct MeshLightVertex {\n   83:         float3 pos;     ///< World-space position.\n   84          float2 uv;      ///< Texture coordinates in emissive texture (if textured).\n   85      };\n   ..\n   93  \n   94          // Pre-computed quantities.\n   95:         float3          normal = float3(0);                 ///< Triangle's face normal in world space.\n   96:         float3          averageRadiance = float3(0);        ///< Average radiance emitted over triangle. For textured emissive the radiance varies over the surface.\n   97          float           luminousFlux = 0.f;                 ///< Pre-integrated luminous flux (lumens) emitted per side of the triangle for double-sided emitters (total flux is 2x this value).\n   98          float           area = 0.f;                         ///< Triangle area in world space units.\n   ..\n  100          /** Returns the center of the triangle in world space.\n  101          */\n  102:         float3 getCenter() const {\n  103              return (vtx[0].pos + vtx[1].pos + vtx[2].pos) / 3.0f;\n  104          }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.slang:\n   46      uint                                _pad[2];\n   47  \n   48:     ByteAddressBuffer                   meshLightsVertexPos;    ///< Vertex positions in world space for all mesh light triangles. Size: triangleCount * 3 * sizeof(float3).\n   49      ByteAddressBuffer                   meshLightsTexCoords;    ///< Texture coordinates for all mesh light triangles. Size: triangleCount * 3 * sizeof(float2).\n   50      StructuredBuffer<uint>              perMeshInstanceOffset;  ///< Per-mesh instance offset into emissive triangles array. Size: meshInstanceCount * sizeof(uint).\n   ..\n   94          Note that the vertex buffer is non-indexed.\n   95      */\n   96:     float3 getVtxPos(uint vtxIdx)\n   97      {\n   98:         uint address = (vtxIdx * 3) * 4;    // The data is float3 (3*4B per vertex).\n   99          return asfloat(meshLightsVertexPos.Load3(address));\n  100      }\n  ...\n  113          \\param[out] p Position of vertex 0,1,2 in world space.\n  114      */\n  115:     void getVtxPositions(uint triIdx, out float3 p[3])\n  116      {\n  117          p[0] = getVtxPos(triIdx * 3 + 0);\n  ...\n  125          \\return Interpolated position in world space.\n  126      */\n  127:     float3 getPosition(uint triIdx, float3 barycentrics)\n  128      {\n  129          return getVtxPos(triIdx * 3 + 0) * barycentrics[0] +\n  ...\n  137          \\return Interpolated texture coordinate.\n  138      */\n  139:     float2 getTexCoord(uint triIdx, float3 barycentrics)\n  140      {\n  141          return getVtxTexCoord(triIdx * 3 + 0) * barycentrics[0] +\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollectionShared.slang:\n   36  struct EmissiveTriangle\n   37  {\n   38:     float3  normal;             ///< Face normal in world space.\n   39      float   area;               ///< Triangle area in world space.\n   40:     float3  averageRadiance;    ///< Average emitted radiance over the triangle.\n   41      float   flux;               ///< Pre-integrated luminous flux for triangle in lumens.\n   42      uint    lightIdx;           ///< Index into global mesh lights array.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightHelpers.slang:\n   53  struct AnalyticLightSample\n   54  {\n   55:     float3  posW;           ///< Sampled point on the light source in world space (for local lights only).\n   56:     float3  normalW;        ///< Normal of the sampled point on the light source in world space (normalized).\n   57:     float3  dir;            ///< Direction from the shading point to the sampled point on the light in world space (normalized).\n   58      float   distance;       ///< Distance from the shading point to sampled point on the light.\n   59:     float3  Li;             ///< Incident radiance at the shading point (unshadowed). Note: Already divided by the pdf.\n   60      float   pdf;            ///< Probability density function with respect to solid angle at the shading point.\n   61  };\n   ..\n   65      \\return True if the sample is valid, false otherwise.\n   66  */\n   67: bool finalizeAreaLightSample(const float3 shadingPosW, const LightData light, inout AnalyticLightSample ls)\n   68  {\n   69      // Compute direction and distance to light.\n   70      // The distance is clamped to a small epsilon to avoid div-by-zero below.\n   71:     float3 toLight = ls.posW - shadingPosW;\n   72      float distSqr = max(dot(toLight, toLight), kMinLightDistSqr);\n   73      ls.distance = sqrt(distSqr);\n   ..\n   92      \\return True if a sample was generated, false otherwise.\n   93  */\n   94: bool sampleRectAreaLight(const float3 shadingPosW, const LightData light, inout SampleGenerator sg, out AnalyticLightSample ls)\n   95  {\n   96      // Pick a random sample on the quad.\n   97      // The quad is from (-1,-1,0) to (1,1,0) in object space, but may be scaled by its transform matrix.\n   98      float2 u = sampleNext2D(sg);\n   99:     float3 pos = float3(u.x * 2.f - 1.f, u.y * 2.f - 1.f, 0.f);\n  100  \n  101      // Apply model to world transformation matrix.\n  ...\n  104      // Setup world space normal.\n  105      // TODO: Should use light.dirW.\n  106:     float3 tangentW = mul(float4(1.f, 0.f, 0.f, 0.f), light.transMat).xyz;\n  107:     float3 bitangentW = mul(float4(0.f, 1.f, 0.f, 0.f), light.transMat).xyz;\n  108      // TODO: normalW is not correctly oriented for mesh instances that have flipped triangle winding.\n  109      ls.normalW = normalize(cross(tangentW, bitangentW));\n  ...\n  119      \\return True if a sample was generated, false otherwise.\n  120  */\n  121: bool sampleSphereAreaLight(const float3 shadingPosW, const LightData light, inout SampleGenerator sg, out AnalyticLightSample ls)\n  122  {\n  123      // Sample a random point on the sphere.\n  124      // TODO: We should pick a random point on the hemisphere facing the shading point.\n  125      float2 u = sampleNext2D(sg);\n  126:     float3 pos = sample_sphere(u);\n  127  \n  128      // Apply model to world transformation matrix.\n  ...\n  142      \\return True if a sample was generated, false otherwise.\n  143  */\n  144: bool sampleDiscAreaLight(const float3 shadingPosW, const LightData light, inout SampleGenerator sg, out AnalyticLightSample ls)\n  145  {\n  146      // Sample a random point on the disk.\n  147      // TODO: Fix spelling disagreement between disc vs disk.\n  148      float2 u = sampleNext2D(sg);\n  149:     float3 pos = float3(sample_disk(u), 0.f);\n  150  \n  151      // Transform to world space.\n  ...\n  164      \\return True if a sample was generated, false otherwise.\n  165  */\n  166: bool sampleDirectionalLight(const float3 shadingPosW, const LightData light, out AnalyticLightSample ls)\n  167  {\n  168      // A directional light doesn't have a position. Just clear to zero.\n  169:     ls.posW = float3(0, 0, 0);\n  170  \n  171      // For a directional light, the normal is always along its light direction.\n  ...\n  191      \\return True if a sample was generated, false otherwise.\n  192  */\n  193: bool samplePointLight(const float3 shadingPosW, const LightData light, out AnalyticLightSample ls)\n  194  {\n  195      // Get the position and normal.\n  ...\n  199      // Compute direction and distance to light.\n  200      // The distance is clamped to a small epsilon to avoid div-by-zero below.\n  201:     float3 toLight = ls.posW - shadingPosW;\n  202      float distSqr = max(dot(toLight, toLight), kMinLightDistSqr);\n  203      ls.distance = sqrt(distSqr);\n  ...\n  222      \\return True if a sample was generated, false otherwise.\n  223  */\n  224: bool sampleLight(const float3 shadingPosW, const LightData light, inout SampleGenerator sg, out AnalyticLightSample ls)\n  225  {\n  226      // Sample the light based on its type: point, directional, or area.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/UpdateTriangleVertices.cs.slang:\n   36  }\n   37  \n   38: RWByteAddressBuffer gVertexPosOutput;       ///< Vertex positions in world space for all mesh light triangles. Size: triangleCount * 3 * sizeof(float3).\n   39  StructuredBuffer<MeshLightData> gMeshData;  ///< Per-mesh data for emissive meshes. Size: meshCount * sizeof(MeshLightData).\n   40  \n   ..\n   61  \n   62      // Update vertex data.\n   63:     float3 p[3];\n   64      gScene.getVertexPositionsW(meshInstanceID, triangleIndex, p);\n   65  \n   ..\n   72      // Update triangle data.\n   73      float triangleArea;\n   74:     float3 faceNormal = gScene.computeFaceNormalAndAreaW(meshInstanceID, p, triangleArea);\n   75  \n   76      gTriangleData[triIdx].normal = faceNormal;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/BxDF.slang:\n   85          \\return Returns f(wo, wi) * dot(wi, n).\n   86      */\n   87:     float3 eval(float3 wo, float3 wi);\n   88  \n   89      /** Samples the BxDF.\n   ..\n   96          \\return Returns true if successful.\n   97      */\n   98:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg);\n   99  \n  100      /** Evaluates the BxDF directional pdf for sampling incident direction wi.\n  ...\n  103          \\return Returns the pdf with respect to solid angle for sampling incident direction wi.\n  104      */\n  105:     float evalPdf(float3 wo, float3 wi);\n  106  }\n  107  \n  ...\n  111  struct DiffuseReflectionLambert : IBxDF\n  112  {\n  113:     float3 albedo;  ///< Diffuse albedo.\n  114  \n  115:     float3 eval(float3 wo, float3 wi)\n  116      {\n  117:         if (wo.z <= 0 || wi.z <= 0) return float3(0);\n  118  \n  119          return M_1_PI * albedo * wi.z;\n  120      }\n  121  \n  122:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  123      {\n  124          if (wo.z <= 0) return false;\n  ...\n  130      }\n  131  \n  132:     float evalPdf(float3 wo, float3 wi)\n  133      {\n  134          if (wo.z <= 0 || wi.z <= 0) return 0;\n  ...\n  143  struct DiffuseReflectionDisney : IBxDF\n  144  {\n  145:     float3 albedo;          ///< Diffuse albedo.\n  146      float linearRoughness;  ///< Roughness before remapping.\n  147  \n  148:     float3 eval(float3 wo, float3 wi)\n  149      {\n  150:         if (wo.z <= 0 || wi.z <= 0) return float3(0);\n  151  \n  152          return evalWeight(wo, wi) * M_1_PI * wi.z;\n  153      }\n  154  \n  155:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  156      {\n  157          if (wo.z <= 0) return false;\n  ...\n  163      }\n  164  \n  165:     float evalPdf(float3 wo, float3 wi)\n  166      {\n  167          if (wo.z <= 0 || wi.z <= 0) return 0;\n  ...\n  173  \n  174      // Returns f(wo, wi) * pi.\n  175:     float3 evalWeight(float3 wo, float3 wi)\n  176      {\n  177:         float3 h = normalize(wo + wi);\n  178          float wiDotH = dot(wi, h);\n  179          float fd90 = 0.5 + 2 * wiDotH * wiDotH * linearRoughness;\n  ...\n  191  struct DiffuseReflectionFrostbite : IBxDF\n  192  {\n  193:     float3 albedo;          ///< Diffuse albedo.\n  194      float linearRoughness;  ///< Roughness before remapping.\n  195  \n  196:     float3 eval(float3 wo, float3 wi)\n  197      {\n  198:         if (wo.z <= 0 || wi.z <= 0) return float3(0);\n  199  \n  200          return evalWeight(wo, wi) * M_1_PI * wi.z;\n  201      }\n  202  \n  203:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  204      {\n  205          if (wo.z <= 0) return false;\n  ...\n  211      }\n  212  \n  213:     float evalPdf(float3 wo, float3 wi)\n  214      {\n  215          if (wo.z <= 0 || wi.z <= 0) return 0;\n  ...\n  221  \n  222      // Returns f(wo, wi) * pi.\n  223:     float3 evalWeight(float3 wo, float3 wi)\n  224      {\n  225:         float3 h = normalize(wo + wi);\n  226          float wiDotH = dot(wi, h);\n  227          float energyBias = lerp(0, 0.5, linearRoughness);\n  ...\n  239  struct SpecularReflectionMicrofacet : IBxDF\n  240  {\n  241:     float3 albedo;  ///< Specular albedo.\n  242      float alpha;    ///< GGX width parameter.\n  243  \n  244:     float3 eval(float3 wo, float3 wi)\n  245      {\n  246:         if (wo.z <= kMinCosTheta || wi.z <= kMinCosTheta) return float3(0);\n  247  \n  248:         float3 h = normalize(wo + wi);\n  249          float woDotH = dot(wo, h);\n  250  \n  ...\n  255          float G = evalMaskingSmithGGXCorrelated(alpha, wo.z, wi.z);\n  256  #endif\n  257:         float3 F = evalFresnelSchlick(albedo, 1, woDotH);\n  258          return F * D * G * 0.25 / wo.z;\n  259      }\n  260  \n  261:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  262      {\n  263          if (wo.z <= kMinCosTheta) return false;\n  ...\n  265          // Sample the GGX distribution to find a microfacet normal (half vector).\n  266  #if EnableVNDFSampling\n  267:         float3 h = sampleGGX_VNDF(alpha, wo, sampleNext2D(sg), pdf);    // pdf = G1(wo) * D(h) * max(0,dot(wo,h)) / wo.z\n  268  #else\n  269:         float3 h = sampleGGX_NDF(alpha, sampleNext2D(sg), pdf);         // pdf = D(h) * h.z\n  270  #endif\n  271  \n  ...\n  290          float GOverG1wo = G * (1.f + evalLambdaGGX(alpha * alpha, wo.z));\n  291  #endif\n  292:         float3 F = evalFresnelSchlick(albedo, 1, woDotH);\n  293  \n  294          pdf /= (4 * woDotH); // Jacobian of the reflection operator.\n  ...\n  302      }\n  303  \n  304:     float evalPdf(float3 wo, float3 wi)\n  305      {\n  306          if (wo.z <= kMinCosTheta || wi.z <= kMinCosTheta) return 0;\n  307  \n  308:         float3 h = normalize(wo + wi);\n  309          float woDotH = dot(wo, h);\n  310  #if EnableVNDFSampling\n  ...\n  324      float eta;      ///< Relative index of refraction (e.g. etaI / etaT).\n  325  \n  326:     float3 eval(float3 wo, float3 wi)\n  327      {\n  328:         if (wo.z <= kMinCosTheta || abs(wi.z) <= kMinCosTheta) return float3(0);\n  329  \n  330          bool isReflection = wi.z > 0;\n  331  \n  332:         float3 h =\n  333              isReflection ?\n  334              normalize(wo + wi) :\n  ...\n  358      }\n  359  \n  360:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  361      {\n  362          if (wo.z <= kMinCosTheta) return false;\n  ...\n  364          // Sample the GGX distribution of (visible) normals. This is our half vector.\n  365  #if EnableVNDFSampling\n  366:         float3 h = sampleGGX_VNDF(alpha, wo, sampleNext2D(sg), pdf);    // pdf = G1(wo) * D(h) * max(0,dot(wo,h)) / wo.z\n  367  #else\n  368:         float3 h = sampleGGX_NDF(alpha, sampleNext2D(sg), pdf);         // pdf = D(h) * h.z\n  369  #endif\n  370  \n  ...\n  425      }\n  426  \n  427:     float evalPdf(float3 wo, float3 wi)\n  428      {\n  429          if (wo.z <= kMinCosTheta || abs(wi.z) <= kMinCosTheta) return 0;\n  ...\n  431          bool isReflection = wi.z > 0;\n  432  \n  433:         float3 h =\n  434              isReflection ?\n  435              normalize(wo + wi) :\n  ...\n  524      }\n  525  \n  526:     float3 eval(float3 wo, float3 wi)\n  527      {\n  528:         float3 result = 0;\n  529          if (pDiffuseReflection > 0) result += (1 - specularTransmission) * diffuseReflection.eval(wo, wi);\n  530          if (pSpecularReflection > 0) result += (1 - specularTransmission) * specularReflection.eval(wo, wi);\n  ...\n  541          \\return Returns f(wo, wi) * dot(wi, n).\n  542      */\n  543:     float3 eval(float3 wo, float3 wi, uint lobes)\n  544      {\n  545          // TODO: This won't work correctly for transmission since the lobes are not separated.\n  546:         float3 result = 0;\n  547          if (pDiffuseReflection > 0 && (lobes & (uint)LobeType::DiffuseReflection) != 0) result += (1 - specularTransmission) * diffuseReflection.eval(wo, wi);\n  548          if (pSpecularReflection > 0 && (lobes & (uint)LobeType::SpecularReflection) != 0) result += (1 - specularTransmission) * specularReflection.eval(wo, wi);\n  ...\n  551      }\n  552  \n  553:     bool sample(float3 wo, out float3 wi, out float pdf, out float3 weight, out uint lobe, inout SampleGenerator sg)\n  554      {\n  555          float uSelect = sampleNext1D(sg);\n  ...\n  586      }\n  587  \n  588:     float evalPdf(float3 wo, float3 wi)\n  589      {\n  590          float pdf = 0;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/Fresnel.slang:\n   38      \\return Fresnel term.\n   39  */\n   40: float3 evalFresnelSchlick(float3 f0, float3 f90, float cosTheta)\n   41  {\n   42      return f0 + (f90 - f0) * pow(max(1 - cosTheta, 0), 5); // Clamp to avoid NaN if cosTheta = 1+epsilon\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang:\n   59  struct GeometryParams\n   60  {\n   61:     float3 posW;                ///< World-space position.\n   62:     float3 V;                   ///< Normalized view direction in world space.\n   63      float2 uv;                  ///< Texture coordinate at hit point, or 0 if not available.\n   64:     float3 faceN;               ///< Face normal in world space.\n   65  \n   66      // Surface frame in world space. The axes (T,B,N) form a right-handed orthonormal basis.\n   67      // The normal and bitangent are normally provided by the framework, while tangent is computed based on those.\n   68:     float3 N;                   ///< Shading normal (z-axis in local frame).\n   69:     float3 B;                   ///< Shading bitangent (y-axis in local frame).\n   70:     float3 T;                   ///< Shading tangent (x-axis in local frame).\n   71  };\n   72  \n   ..\n  101      \\return GeometryParams struct.\n  102  */\n  103: GeometryParams prepareGeometryParams(float3 worldPos, float3 viewDir, float3 normal, float3 bitangent, float3 faceNormal, float2 texCrd = float2(0, 0))\n  104  {\n  105      GeometryParams geoParams;\n  ...\n  171  /** Helper function to transform vector v from the local surface frame to world space.\n  172  */\n  173: float3 fromLocal(float3 v, ShadingData sd)\n  174  {\n  175      return sd.T * v.x + sd.B * v.y + sd.N * v.z;\n  ...\n  178  /** Helper function to transform vector v from the local surface frame to world space.\n  179  */\n  180: float3 fromLocal(float3 v, GeometryParams sd)\n  181  {\n  182      return sd.T * v.x + sd.B * v.y + sd.N * v.z;\n  ...\n  185  /** Helper function to transform world space vector v to the local surface frame.\n  186  */\n  187: float3 toLocal(float3 v, ShadingData sd)\n  188  {\n  189:     return float3(dot(v, sd.T), dot(v, sd.B), dot(v, sd.N));\n  190  }\n  191  \n  192  /** Helper function to transform world space vector v to the local surface frame.\n  193  */\n  194: float3 toLocal(float3 v, GeometryParams sd)\n  195  {\n  196:     return float3(dot(v, sd.T), dot(v, sd.B), dot(v, sd.N));\n  197  }\n  198  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/MaterialShading.slang:\n   58  struct BSDFSample\n   59  {\n   60:     float3  wi;             ///< Incident direction in world space (normalized).\n   61      float   pdf;            ///< pdf with respect to solid angle for sampling incident direction wi.\n   62:     float3  weight;         ///< Sample weight f(wo, wi) * dot(wi, n) / pdf(wi).\n   63      uint    lobe;           ///< Sampled lobe. This is a combination of LobeType flags (see BxDF.slang).\n   64  };\n   ..\n   78      \\return (f_d + f_r) * saturate(dot(N,L))\n   79  */\n   80: float3 evalBSDFCosine(const ShadingData sd, float3 L, uint lobes = (uint)LobeType::All)\n   81  {\n   82:     float3 wo = toLocal(sd.V, sd);\n   83:     float3 wi = toLocal(L, sd);\n   84  \n   85      FalcorBSDF bsdf;\n   ..\n  101  bool sampleBSDF(const ShadingData sd, inout SampleGenerator sg, out BSDFSample result)\n  102  {\n  103:     float3 wo = toLocal(sd.V, sd);\n  104:     float3 wi;\n  105  \n  106      FalcorBSDF bsdf;\n  ...\n  117      \\return Probability density with respect to solid angle from the shading point.\n  118  */\n  119: float evalPdfBSDF(const ShadingData sd, const float3 L)\n  120  {\n  121:     float3 wo = toLocal(sd.V, sd);\n  122:     float3 wi = toLocal(L, sd);\n  123  \n  124      FalcorBSDF bsdf;\n  ...\n  136  bool sampleBSDF_Reference(const ShadingData sd, inout SampleGenerator sg, out BSDFSample result)\n  137  {\n  138:     float3 wo = toLocal(sd.V, sd);\n  139:     float3 wi = sample_cosine_hemisphere_concentric(sampleNext2D(sg), result.pdf); // pdf = cos(theta) / pi\n  140  \n  141      if (result.pdf == 0.f) return false;\n  ...\n  171      \\return f_d\n  172  */\n  173: float3 evalDiffuseLambert(const ShadingData sd)\n  174  {\n  175      return sd.diffuse.rgb * (1 / M_PI);\n  ...\n  185      \\return f_d\n  186  */\n  187: float3 evalDiffuseDisney(const ShadingData sd, float NdotL, float NdotV, float LdotH)\n  188  {\n  189      float fd90 = 0.5 + 2 * LdotH * LdotH * sd.linearRoughness;\n  ...\n  204      \\return f_d\n  205  */\n  206: float3 evalDiffuseFrostbite(const ShadingData sd, float NdotL, float NdotV, float LdotH)\n  207  {\n  208      float energyBias = lerp(0, 0.5, sd.linearRoughness);\n  ...\n  223      \\return f_d\n  224  */\n  225: float3 evalDiffuse(const ShadingData sd, float NdotL, float NdotV, float LdotH)\n  226  {\n  227  #if DiffuseBrdf == DiffuseBrdfLambert\n  ...\n  282      \\return f_r\n  283  */\n  284: float3 evalSpecular(const ShadingData sd, float NdotL, float NdotV, float NdotH, float LdotH)\n  285  {\n  286      float alpha = max(kMinGGXAlpha, sd.ggxAlpha);    // TODO: Derive appropriate epsilon\n  ...\n  291      float G = evalMaskingSmithGGXCorrelated_PreDivided(alpha, NdotL, NdotV);\n  292  #endif\n  293:     float3 F = evalFresnelSchlick(sd.specular, 1, LdotH);\n  294      return D * G * F;   // Note: G already includes 1/(4*NdotL*NdotV) factor.\n  295  }\n  ...\n  302      \\return f_d + f_r\n  303  */\n  304: float3 evalBSDF(const ShadingData sd, float3 L, uint lobes = (uint)LobeType::All)\n  305  {\n  306      // Check that L and V are in the positive hemisphere.\n  307      // The G term on the correlated form is not robust for NdotL = NdotV = 0.0.\n  308      float NdotL = dot(sd.N, L);\n  309:     if (min(sd.NdotV, NdotL) < kMinCosTheta) return float3(0, 0, 0);\n  310  \n  311      // Pre-compute half vector and dot products.\n  312      // TODO: Using saturate() here to be sure all dot products are within bounds.\n  313      // Some can be replaced by clamps on the upper end only (since we check NdotV and NdotL above) or removed altogether.\n  314:     float3 H = normalize(sd.V + L);\n  315      float NdotH = saturate(dot(sd.N, H));\n  316      float LdotH = saturate(dot(L, H));\n  ...\n  319  \n  320      // Evaluate diffuse and specular terms to compute total throughput.\n  321:     float3 thp = 0;\n  322      if ((lobes & (uint)LobeType::DiffuseReflection) != 0) thp += evalDiffuse(sd, NdotL, NdotV, LdotH);\n  323      if ((lobes & (uint)LobeType::SpecularReflection) != 0) thp += evalSpecular(sd, NdotL, NdotV, NdotH, LdotH);\n  ...\n  333      \\return (f_d + f_r) * saturate(dot(N,L))\n  334  */\n  335: float3 evalBSDFCosine(const ShadingData sd, float3 L, uint lobes = (uint)LobeType::All)\n  336  {\n  337      return evalBSDF(sd, L, lobes) * saturate(dot(sd.N, L));\n  ...\n  350      \\return Sampled direction in world space.\n  351  */\n  352: float3 sampleHemisphereCosine(ShadingData sd, float2 u, out float pdf)\n  353  {\n  354:     float3 dir = sample_cosine_hemisphere_concentric(u, pdf);\n  355      return fromLocal(dir, sd);\n  356  }\n  ...\n  368      \\return Sampled direction in world space.\n  369  */\n  370: float3 sampleNdfGGX_Walter(const ShadingData sd, const float2 u, const float alpha, out float pdf, out float VdotH, out float NdotH)\n  371  {\n  372      // Draw sample from D(H) * NdotH.\n  ...\n  378  \n  379      // Convert half vector to world space.\n  380:     float3 H = float3(sinThetaH * cos(phiH), sinThetaH * sin(phiH), cosThetaH);\n  381      H = fromLocal(H, sd);\n  382  \n  ...\n  385  \n  386      // Compute incident direction L by reflecting V about H.\n  387:     float3 L = normalize(2.f * VdotH * H - sd.V);   // Note: L is already of unit length, but normalize to reduce the risk of round-off errors.\n  388  \n  389      // Evaluate the pdf.\n  ...\n  408      \\return Probability density with respect to solid angle from the shading point.\n  409  */\n  410: float evalPdfDiffuse(const ShadingData sd, const float3 L)\n  411  {\n  412      // We're using cosine-weighted sampling over the hemisphere.\n  ...\n  433      {\n  434          result.pdf = 0.f;\n  435:         result.weight = float3(0);\n  436          return;\n  437      }\n  ...\n  447      \\return Probability density with respect to solid angle from the shading point.\n  448  */\n  449: float evalPdfSpecular(const ShadingData sd, const float3 L)\n  450  {\n  451      // We're never generating samples for back-facing V or L.\n  ...\n  456      }\n  457  \n  458:     float3 H = normalize(sd.V + L);\n  459      float NdotH = saturate(dot(sd.N, H));\n  460      float VdotH = saturate(dot(sd.V, H));\n  ...\n  483      {\n  484          result.pdf = 0.f;\n  485:         result.weight = float3(0);\n  486          return;\n  487      }\n  ...\n  500      float G = evalMaskingSmithGGXCorrelated_PreDivided(alpha, NdotL, NdotV);\n  501  #endif\n  502:     float3 F = evalFresnelSchlick(sd.specular, 1, VdotH);\n  503      result.weight = F * (G * NdotL * VdotH * 4.f) / NdotH;\n  504      //result.weight = evalBSDFCosine(sd, result.wi, (uint)LobeType::SpecularReflection) / result.pdf;\n  ...\n  511      \\return Probability density with respect to solid angle from the shading point.\n  512  */\n  513: float evalPdfBSDF(const ShadingData sd, const float3 L)\n  514  {\n  515      float pDiffuse = 0.5f; // TODO: Better probabilities\n  ...\n  580  {\n  581      float pdf;\n  582:     float3 dir = sampleHemisphereCosine(sd, sampleNext2D(sg), pdf); // pdf = cos(theta) / pi\n  583  \n  584      // Check that L and V are in the positive hemisphere, reset pdf to zero otherwise.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/Microfacet.slang:\n   71      \\return Sampled half vector in local space.\n   72  */\n   73: float3 sampleGGX_NDF(float alpha, float2 u, out float pdf)\n   74  {\n   75      float alphaSqr = alpha * alpha;\n   ..\n   80  \n   81      pdf = evalPdfGGX_NDF(alpha, cosTheta);\n   82:     return float3(cos(phi) * r, sin(phi) * r, cosTheta);\n   83  }\n   84  \n   ..\n   91      \\return D_V(h) = G1(wo) * D(h) * max(0,dot(wo,h)) / wo.z\n   92  */\n   93: float evalPdfGGX_VNDF(float alpha, float3 wo, float3 h)\n   94  {\n   95      float G1 = evalG1GGX(alpha * alpha, wo.z);\n   ..\n  108      \\return Sampled half vector in local space, in the positive hemisphere.\n  109  */\n  110: float3 sampleGGX_VNDF(float alpha, float3 wo, float2 u, out float pdf)\n  111  {\n  112      float alpha_x = alpha, alpha_y = alpha;\n  113  \n  114      // Transform the view vector to the hemisphere configuration.\n  115:     float3 Vh = normalize(float3(alpha_x * wo.x, alpha_y * wo.y, wo.z));\n  116  \n  117      // Construct orthonormal basis (Vh,T1,T2).\n  118:     float3 T1 = (Vh.z < 0.9999f) ? normalize(cross(float3(0, 0, 1), Vh)) : float3(1, 0, 0); // TODO: fp32 precision\n  119:     float3 T2 = cross(Vh, T1);\n  120  \n  121      // Parameterization of the projected area of the hemisphere.\n  ...\n  128  \n  129      // Reproject onto hemisphere.\n  130:     float3 Nh = t1 * T1 + t2 * T2 + sqrt(max(0.f, 1.f - t1 * t1 - t2 * t2)) * Vh;\n  131  \n  132      // Transform the normal back to the ellipsoid configuration. This is our half vector.\n  133:     float3 h = normalize(float3(alpha_x * Nh.x, alpha_y * Nh.y, max(0.f, Nh.z)));\n  134  \n  135      pdf = evalPdfGGX_VNDF(alpha, wo, h);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang:\n   78      */\n   79      // should really remove this one, but may be good to have for other users, or code readers?!!!\n   80:     float computeLOD(in float triLODConstant, in float hitT, in float3 rayDir, in float3 normal, in float textureWidth, in float textureHeight)     // Note: call propagate() before computeLOD()\n   81      {\n   82          float lambda = triLODConstant; // constant per triangle\n   ..\n  103          \\param[in] normal Normal at the hit point.\n  104      */\n  105:     float computeLOD(in float triLODConstant, in float hitT, in float3 rayDir, in float3 normal)\n  106      {\n  107          float lambda = triLODConstant; // constant per triangle\n  ...\n  147      \\return Triangle LOD value.\n  148  */\n  149: float computeRayConeTriangleLODValue(in float3 vertices[3], in float2 txcoords[3], in float3x3 worldMat, out float3 normalizedNormalW)\n  150  {\n  151      float2 tx10 = txcoords[1] - txcoords[0];\n  ...\n  155      // we need the area of the triangle, which is length(triangleNormal) in worldspace, and I\n  156      // could not figure out a way with fewer than two 3x3 mtx multiplies for ray cones.\n  157:     float3 edge10 = mul(vertices[1] - vertices[0], worldMat);\n  158:     float3 edge20 = mul(vertices[2] - vertices[0], worldMat);\n  159  \n  160:     float3 triangleNormal = cross(edge10, edge20);              // in world space, by design\n  161      float oneDivPa = 1.0 / length(triangleNormal);\n  162      normalizedNormalW = triangleNormal * oneDivPa;              // normalize face normal with oneDivPa\n  ...\n  171      \\return Spread angle at hit point.\n  172  */\n  173: float computeScreenSpaceSurfaceSpreadAngle(in float3 positionW, in float3 normalW, in float betaFactorK1 = 1.0, in float betaFactorK2 = 0.0)\n  174  {\n  175:     float3 dNdx = ddx(normalW);\n  176:     float3 dNdy = ddy(normalW);\n  177:     float3 dPdx = ddx(positionW);\n  178:     float3 dPdy = ddy(positionW);\n  179      \n  180     float beta = sqrt(dot(dNdx, dNdx) + dot(dNdy, dNdy)) * sign(dot(dNdx, dPdx) + dot(dNdy, dPdy));\n  ...\n  195  struct RayDiff\n  196  {\n  197:     float3 dOdx;\n  198:     float3 dOdy;\n  199:     float3 dDdx;\n  200:     float3 dDdy;\n  201  \n  202:     float3 getdOdx() { return dOdx; }   // these are not super-useful right now, but TODO to add FP16 version later on\n  203:     float3 getdOdy() { return dOdy; }\n  204:     float3 getdDdx() { return dDdx; }\n  205:     float3 getdDdy() { return dDdy; }\n  206  \n  207      /** Propagate the ray differential t distances away\n  ...\n  211          \\param[in] N The normal at the hit point.\n  212      */\n  213:     RayDiff propagate(in float3 O, in float3 D, in float t, in float3 N)\n  214      {\n  215  #ifdef CLASSIC_IGEHY\n  216:         float3 dOdx = getdOdx() + t * getdDdx();    // part of Igehy Equation 10\n  217:         float3 dOdy = getdOdy() + t * getdDdy();\n  218  \n  219          float rcpDN = 1.0 / dot(D, N);              // Igehy Equation 10 and 12\n  ...\n  223          dOdy += D * dtdy;\n  224  #else\n  225:         float3 dOdx = getdOdx(); // when not using CLASSIC_IGEHY, there is no propagate step, so we leave the ray diff unchanged.\n  226:         float3 dOdy = getdOdy();\n  227  #endif\n  228          return RayDiff.create(dOdx, dOdy, getdDdx(), getdDdy());\n  ...\n  235          \\param[in] dDdy The differential ray direction in y.\n  236      */\n  237:     static RayDiff create(in float3 dOdx, in float3 dOdy, in float3 dDdx, in float3 dDdy)\n  238      {\n  239          RayDiff rd;\n  ...\n  255  \n  256      the getRayDirectionDifferentials() function differentiates normalize(getCameraRayDir()), where getCameraRayDir() is:\n  257:     float3 getCameraRayDir(uint2 pixel, uint2 frameDim)\n  258      {\n  259          float2 p = (pixel.xy + float2(0.5f, 0.5f)) / frameDim.xy; // Pixel center on image plane in [0,1] where (0,0) is top-left\n  ...\n  262      }\n  263  */\n  264: void getRayDirectionDifferentials(in float3 nonNormalizedCameraRaydir, in float3 cameraRight, in float3 cameraUp, in float2 viewportDims, out float3 dDdx, out float3 dDdy)\n  265  {\n  266      // Igehy Equation 8, adapted to getRayDirection() above\n  ...\n  287      \\param[out] dUVdy Differential texture coordinates in y.\n  288  */\n  289: void computeDifferentialsBarysAndUVs(in RayDiff rayDiff, in float3 rayDir, in float3 verticesW[3], in float2 txcoords[3],\n  290:     in float3 triangleEdge10, in float3 triangleEdge20, in float3 faceNormalW, in float hitT,\n  291      out float2 dBarydx, out float2 dBarydy, out float2 dUVdx, out float2 dUVdy)\n  292  {\n  293  #ifdef CLASSIC_IGEHY\n  294:     float3 Nu = cross(verticesW[2] - verticesW[1], faceNormalW);    // Igehy \"Normal-Interpolated Triangles\", page 182 SIGGRAPH 1999\n  295:     float3 Nv = cross(-triangleEdge20, faceNormalW);\n  296  \n  297      float4 Lu = float4(Nu, -dot(Nu, verticesW[1]));                  // plane equations for the triangle edges\n  ...\n  307  \n  308  #else        // optimized implementation from Section 20.3.2.2 from Ray Tracing Gems\n  309:     float3 Cu = cross(triangleEdge20, rayDir);\n  310:     float3 Cv = cross(rayDir, triangleEdge10);\n  311  \n  312      float k = dot(Cu, triangleEdge10)\n  313      float oneDivK = abs(k) > 0.0001f ? rcp(k) : 0.0f;\n  314  \n  315:     float3 qx = rayDiff.getdOdx() + hitT * rayDiff.getdDdx();\n  316:     float3 qy = rayDiff.getdOdy() + hitT * rayDiff.getdDdy();\n  317  \n  318      dBarydx.y = dot(Cu, qx) * oneDivK;                // du / dx\n  ...\n  344      \\param[in] normals The triangle's three normalized normals in world space.\n  345  */\n  346: void reflectRayDifferential(inout RayDiff rayDiff, in float3 rayDir, in float3 nonNormalizedInterpolatedNormalW,\n  347:     in float3 normalizedInterpolatedNormalW, in float2 dBarydx, in float2 dBarydy,\n  348:     in float3 triangleEdge10, in float3 triangleEdge20, in float3 normals[3])\n  349  {\n  350      // differential normal (see \"Normal-Interpolated Triangles\" in Igehy's paper)\n  351      float NN = dot(nonNormalizedInterpolatedNormalW, nonNormalizedInterpolatedNormalW); // normal must be unnormalized! (otherwise NN would be 1)\n  352      float rcpNN = 1.0 / (NN * sqrt(NN));\n  353:     float3 n02 = normals[0] - normals[2];\n  354:     float3 n12 = normals[1] - normals[2];\n  355:     float3 dndx = dBarydx.x * n02 + dBarydx.y * n12;\n  356:     float3 dndy = dBarydy.x * n02 + dBarydy.y * n12;\n  357:     float3 dNdx = (dndx * NN - nonNormalizedInterpolatedNormalW * dot(nonNormalizedInterpolatedNormalW, dndx)) * rcpNN;\n  358:     float3 dNdy = (dndy * NN - nonNormalizedInterpolatedNormalW * dot(nonNormalizedInterpolatedNormalW, dndy)) * rcpNN;\n  359  \n  360      // differential of reflected ray direction (perfect specular reflection) -- Equation 14 and 15 in Igehy's paper\n  ...\n  363      float DN = dot(rayDir, normalizedInterpolatedNormalW);\n  364  #ifdef CLASSIC_IGEHY\n  365:     float3 dOdx = rayDiff.getdOdx();\n  366:     float3 dOdy = rayDiff.getdOdy();\n  367  #else   \n  368      float dBarydx_z = -dBarydx.x - dBarydx.y;   // we usually only need u,v and not w=1-u-v, but here we need it\n  ...\n  372      // but in the rest of the paper we used P = u * P_0 + v * P_1 + w * P_2,\n  373      // which means that in Equation 22, du/dx is dBaryDx.y (that is dv/dx) and dv/dx is dBarydx_z (that dw/dx)\n  374:     float3 dOdx = triangleEdge10 * dBarydx.y + triangleEdge20 * dBarydx_z;\n  375:     float3 dOdy = triangleEdge10 * dBarydy.y + triangleEdge20 * dBarydy_z;\n  376  #endif\n  377:     float3 dDdx = rayDiff.getdDdx() - 2.0 * (dNdx * DN + normalizedInterpolatedNormalW * dDNdx);\n  378:     float3 dDdy = rayDiff.getdDdy() - 2.0 * (dNdy * DN + normalizedInterpolatedNormalW * dDNdy);\n  379      rayDiff = RayDiff.create(dOdx, dOdy, dDdx, dDdy);\n  380  }\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/InteriorListHelpers.slang:\n   58      */\n   59      [mutating]\n   60:     bool handleAnyHit(uint materialID, float3 faceNormalW)\n   61      {\n   62          const uint nestedPriority = gScene.materials[materialID].getNestedPriority();\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/LoadShadingData.slang:\n   65  /** Returns the primary ray's direction.\n   66  */\n   67: float3 getPrimaryRayDir(uint2 pixel, uint2 frameDim, const Camera camera)\n   68  {\n   69  #if !USE_VBUFFER\n   ..\n   94      sd = {};\n   95  \n   96:     float3 rayDir = getPrimaryRayDir(pixel, frameDim, camera);\n   97      bool valid = false;\n   98  \n   ..\n  122      {\n  123          // Load geometry and material parameters from G-buffer.\n  124:         float3 normal = gWorldShadingNormal[pixel].xyz;\n  125:         float3 bitangent = isValid(gWorldShadingBitangent) ? gWorldShadingBitangent[pixel].xyz : perp_stark(normal);\n  126:         float3 faceNormal = gWorldFaceNormal[pixel].xyz;\n  127          GeometryParams geoParams = prepareGeometryParams(worldPos.xyz, -rayDir, normal, bitangent, faceNormal);\n  128  \n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathData.slang:\n   34  {\n   35      float4 rayParams;           ///< Shadow ray normalized direction (xyz) and distance (w).\n   36:     float3 Lr;                  ///< Unoccluded contribution from the shadow ray (xyz).\n   37      float _pad;\n   38  };\n   ..\n   66  \n   67      // Scatter ray\n   68:     float3  origin;             ///< Origin of the shadow/scatter rays. Note: This field is only loaded if MIS is enabled.\n   69:     float3  transmissionOrigin; ///< Origin of the scatter ray after a transmission event. Note: This is write only.\n   70:     float3  dir;                ///< Scatter ray normalized direction.\n   71:     float3  thp;                ///< Path throughput.\n   72      float   pdf;                ///< Pdf for generating the scatter ray. Note: This field is only loaded/stored if MIS is enabled.\n   73:     float3  normal;             ///< Shading normal at the scatter ray origin. Note: This field is only loaded/stored if MIS is enabled.\n   74      HitInfo hit;                ///< Hit information for the scatter ray. This is populated by the tracing pass. Only valid if the flag 'scatterHit' is set.\n   75  \n   76      // Common data\n   77:     float3  L;                  ///< Accumulated path contribution. Note: This field is only used in the wavefront code. TODO: Move it out or make sure it's used by megakernel.\n   78  \n   79      InteriorList interiorList;  ///< Interior list. Keeping track of a stack of materials with medium properties.\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathTracerHelpers.slang:\n   40  __exported import RenderPasses.Shared.PathTracer.PathTracerParams;\n   41  \n   42: static const float3 kDefaultBackgroundColor = float3(0, 0, 0);\n   43  static const float kRayTMax = FLT_MAX;\n   44  \n   ..\n   57  {\n   58      // Light sample\n   59:     float3  dir;            ///< Direction from the shading point to the light sample in world space (normalized). This is used for BRDF evaluation.\n   60      float   distance;       ///< Distance from the shading point to the light sample.\n   61:     float3  Li;             ///< Incident radiance at the shading point (unshadowed). Note: Already divided by the pdf and multiplied by MIS weight.\n   62      float   pdf;            ///< Probability density function with respect to solid angle (pdf == 0 for invalid samples).\n   63  \n   64      // Shadow ray parameters\n   65:     float3  rayDir;         ///< Ray direction for visibility evaluation (normalized). This may differ from 'dir' due to ray offsets.\n   66      float   rayDistance;    ///< Ray distance for visibility evaluation. This may differ from 'distance' due to ray offsets.\n   67  };\n   ..\n   74      \\return Color (rgb).\n   75  */\n   76: float3 evalBackground(const EnvProbe envProbe, float3 dir)\n   77  {\n   78      return kUseEnvBackground ? evalEnvProbe(envProbe, dir) : kDefaultBackgroundColor;\n   ..\n  163      \\return Probability density with respect to solid angle from the shading point.\n  164  */\n  165: float evalPdfScatter(const ShadingData sd, const float3 dir)\n  166  {\n  167      if (kUseBRDFSampling)\n  ...\n  192      \\return True if a sample was generated, false otherwise.\n  193  */\n  194: bool sampleSceneLights(const PathTracerParams params, const EnvProbe envProbe, const EmissiveLightSampler emissiveSampler, const ShadingData sd, const float3 rayOrigin, const uint numSamples, inout SampleGenerator sg, out SceneLightSample ls)\n  195  {\n  196      // Set relative probabilities of the different sampling techniques.\n  ...\n  232              // Evaluate emitted radiance from the sampled direction.\n  233              // TODO: Move this into EnvProbe.slang\n  234:             float3 Le = evalEnvProbe(envProbe, lightSample.wi);\n  235  \n  236              // Evaluate MIS with BRDF sampling as the other sampling strategy.\n  ...\n  247              ls.rayDistance = ls.distance = kRayTMax;\n  248              ls.pdf = pdf;\n  249:             ls.Li = pdf > 0.f ? Le * misWeight / (pdf * numSamples) : float3(0);\n  250  \n  251              return true;\n  ...\n  309              // Compute offset light sample position to reduce self-intersections at the light.\n  310              // We compute the shadow ray parameters based on the offset position.\n  311:             float3 offsetPos = computeRayOrigin(lightSample.posW, lightSample.normalW);\n  312:             float3 toLight = offsetPos - rayOrigin;\n  313              ls.rayDistance = length(toLight);\n  314              ls.rayDir = normalize(toLight);\n  ...\n  318              ls.distance = lightSample.distance;\n  319              ls.pdf = pdf;\n  320:             ls.Li = pdf > 0.f ? lightSample.Le * misWeight / (pdf * numSamples) : float3(0);\n  321  \n  322              return true;\n  ...\n  348      if (valid && any(ls.Li > 0.f))\n  349      {\n  350:         float3 Lr = evalBSDFCosine(sd, ls.dir) * ls.Li * path.thp;\n  351          if (any(Lr > 0.f))\n  352          {\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/Animation.cpp:\n   59          float factor = keyframeDuration != 0 ? (float)(localTime / keyframeDuration) : 1;\n   60  \n   61:         float3 translation = lerp(start.translation, end.translation, factor);\n   62:         float3 scaling = lerp(start.scaling, end.scaling, factor);\n   63          glm::quat rotation = slerp(start.rotation, end.rotation, factor);\n   64  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/Animation.h:\n   42          {\n   43              double time = 0;\n   44:             float3 translation = float3(0, 0, 0);\n   45:             float3 scaling = float3(1, 1, 1);\n   46              glm::quat rotation = glm::quat(1, 0, 0, 0);\n   47          };\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/Skinning.slang:\n  117      }\n  118  \n  119:     float3 getCurrentPosition(uint vertexId)\n  120      {\n  121          return gData.skinnedVertices[getStaticVertexID(vertexId)].position;\n  ...\n  144  \n  145      s.position = mul(float4(s.position, 1.f), boneMat).xyz;\n  146:     s.bitangent = mul(s.bitangent, (float3x3) boneMat);\n  147:     s.normal = mul(s.normal, (float3x3) transpose(invTransposeMat));\n  148  \n  149      // Store the result\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.cpp:\n  143                  }\n  144  \n  145:                 mFrustumPlanes[i].xyz = float3(plane);\n  146                  mFrustumPlanes[i].sign = glm::sign(mFrustumPlanes[i].xyz);\n  147                  mFrustumPlanes[i].negW = -plane.w;\n  ...\n  208          // See method 4b: https://fgiesen.wordpress.com/2010/10/17/view-frustum-culling/\n  209          for (int plane = 0; plane < 6; plane++) {\n  210:             float3 signedExtent = box.extent * mFrustumPlanes[plane].sign;\n  211              float dr = glm::dot(box.center + signedExtent, mFrustumPlanes[plane].xyz);\n  212              isInside = isInside && (dr > mFrustumPlanes[plane].negW);\n  ...\n  275              if (g.var(\"Depth Range\", depth, 0.f, FLT_MAX, 0.1f)) setDepthRange(depth.x, depth.y);\n  276  \n  277:             float3 pos = getPosition();\n  278              if (g.var(\"Position\", pos, -FLT_MAX, FLT_MAX, 0.001f)) setPosition(pos);\n  279  \n  280:             float3 target = getTarget();\n  281              if (g.var(\"Target\", target, -FLT_MAX, FLT_MAX, 0.001f)) setTarget(target);\n  282  \n  283:             float3 up = getUpVector();\n  284              if (g.var(\"Up\", up, -FLT_MAX, FLT_MAX, 0.001f)) setUpVector(up);\n  285  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.h:\n  120          /** Get the camera's world space position.\n  121          */\n  122:         const float3& getPosition() const { return mData.posW; }\n  123  \n  124          /** Get the camera's world space up vector.\n  125          */\n  126:         const float3& getUpVector() const {return mData.up;}\n  127  \n  128          /** Get the camera's world space target position.\n  129          */\n  130:         const float3& getTarget() const { return mData.target; }\n  131  \n  132          /** Set the camera's world space position.\n  133          */\n  134:         void setPosition(const float3& posW) { mData.posW = posW; mDirty = true; }\n  135  \n  136          /** Set the camera's world space up vector.\n  137          */\n  138:         void setUpVector(const float3& up) { mData.up = up; mDirty = true; }\n  139  \n  140          /** Set the camera's world space target position.\n  141          */\n  142:         void setTarget(const float3& target) { mData.target = target; mDirty = true; }\n  143  \n  144          /** Set the camera's depth range.\n  ...\n  276  \n  277          struct {\n  278:             float3 xyz;     ///< Camera frustum plane position\n  279              float negW;     ///< Camera frustum plane, sign of the coordinates\n  280:             float3 sign;    ///< Camera frustum plane position\n  281          } mutable mFrustumPlanes[6];\n  282  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.slang:\n   31  struct CameraRay\n   32  {\n   33:     float3 origin;\n   34      float tMin;\n   35:     float3 dir;\n   36      float tMax;\n   37  \n   ..\n   46      CameraData data;\n   47  \n   48:     float3 getPosition() { return data.posW; }\n   49      float4x4 getViewProj() { return data.viewProjMat; }\n   50  \n   ..\n   76          \\return Returns the non-normalized ray direction\n   77      */\n   78:     float3 computeNonNormalizedRayDirPinhole(uint2 pixel, uint2 frameDim)\n   79      {\n   80          // Compute sample position in screen space in [0,1] with origin at the top-left corner.\n   ..\n  108          ray.dir = ndc.x * data.cameraU + ndc.y * data.cameraV + data.cameraW;\n  109          float2 apertureSample = sample_disk(u); // Sample lies in the unit disk [-1,1]^2\n  110:         float3 rayTarget = ray.origin + ray.dir;\n  111          ray.origin += data.apertureRadius * (apertureSample.x * normalize(data.cameraU) + apertureSample.y * normalize(data.cameraV));\n  112          ray.dir = normalize(rayTarget - ray.origin);\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraController.cpp:\n   42  }\n   43  \n   44: void OrbiterCameraController::setModelParams(const float3& center, float radius, float distanceInRadius) {\n   45      mModelCenter = center;\n   46      mModelRadius = radius;\n   ..\n   69          case MouseEvent::Type::Move:\n   70              if(mIsLeftButtonDown) {\n   71:                 float3 curVec = project2DCrdToUnitSphere(convertCamPosRange(mouseEvent.pos));\n   72                  glm::quat q = createQuaternionFromVectors(mLastVector, curVec);\n   73                  glm::mat3x3 rot = (glm::mat3x3)q;\n   ..\n   92          mpCamera->setTarget(mModelCenter);\n   93  \n   94:         float3 camPos = mModelCenter;\n   95:         camPos += (float3(0,0,1) * mRotation) * mModelRadius * mCameraDistance;\n   96          mpCamera->setPosition(camPos);\n   97  \n   98:         float3 up(0, 1, 0);\n   99          up = up * mRotation;\n  100          mpCamera->setUpVector(up);\n  ...\n  160      if(mpCamera) {\n  161          if(mShouldRotate) {\n  162:             float3 camPos = mpCamera->getPosition();\n  163:             float3 camTarget = mpCamera->getTarget();\n  164:             float3 camUp = b6DoF ? mpCamera->getUpVector() : float3(0, 1, 0);;\n  165  \n  166:             float3 viewDir = glm::normalize(camTarget - camPos);\n  167              if(mIsLeftButtonDown) {\n  168:                 float3 sideway = glm::cross(viewDir, normalize(camUp));\n  169  \n  170                  // Rotate around x-axis\n  ...\n  197  \n  198          if(mMovement.any()) {\n  199:             float3 movement(0, 0, 0);\n  200              movement.z += mMovement.test(Direction::Forward) ? 1 : 0;\n  201              movement.z += mMovement.test(Direction::Backward) ? -1 : 0;\n  ...\n  205              movement.y += mMovement.test(Direction::Down) ? -1 : 0;\n  206  \n  207:             float3 camPos = mpCamera->getPosition();\n  208:             float3 camTarget = mpCamera->getTarget();\n  209:             float3 camUp = mpCamera->getUpVector();\n  210  \n  211:             float3 viewDir = normalize(camTarget - camPos);\n  212:             float3 sideway = glm::cross(viewDir, normalize(camUp));\n  213  \n  214              float elapsedTime = (float)mTimer.delta();\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraController.h:\n   96              \\param[in] InitialDistanceInRadius The initial distance of the camera from the model, measured in the model's radius.\n   97          */\n   98:         void setModelParams(const float3& center, float radius, float initialDistanceInRadius);\n   99  \n  100          /** Update the camera position and orientation.\n  ...\n  104  \n  105      private:\n  106:         float3 mModelCenter;\n  107          float mModelRadius;\n  108          float mCameraDistance;\n  ...\n  110  \n  111          glm::mat3x3 mRotation;\n  112:         float3 mLastVector;\n  113          bool mIsLeftButtonDown = false;\n  114          bool mShouldRotate = false;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraData.slang:\n   42      float4x4 prevViewProjMatNoJitter;   ///< Camera view-projection matrix associated to previous frame. No jittering is applied!\n   43  \n   44:     float3   posW                   = float3(0, 0, 0);  ///< Camera world-space position.\n   45      float    focalLength            = 21.0f;            ///< Camera focal length in mm. Default is 59 degree vertical, 90 horizontal FOV at 16:9 aspect ratio.\n   46:     float3   up                     = float3(0, 1, 0);  ///< Camera world-space up vector.\n   47      float    aspectRatio            = 1.7777f;          ///< 16:9 aspect-ratio.\n   48:     float3   target                 = float3(0, 0, -1); ///< Camera target point in world-space.\n   49      float    nearZ                  = 0.1f;             ///< Camera near plane.\n   50:     float3   cameraU                = float3(0, 0, 1);  ///< Camera base vector U. Normalized it indicates the right image plane vector. The length is dependent on the FOV.\n   51      float    farZ                   = 1000.0f;          ///< Camera far plane.\n   52:     float3   cameraV                = float3(0, 1, 0);  ///< Camera base vector V. Normalized it indicates the up image plane vector. The length is dependent on the FOV.\n   53      float    jitterX                = 0.0f;             ///< Eventual camera jitter along the x axis expressed as a subpixel offset divided by screen width (positive value shifts the image right).\n   54:     float3   cameraW                = float3(1, 0, 0);  ///< Camera base vector W. Normalized it indicates the forward direction. The length is the camera focal distance.\n   55      float    jitterY                = 0.0f;             ///< Eventual camera jitter along the y axis expressed as a subpixel offset divided by screen height (positive value shifts the image up).\n   56  \n   ..\n   60      float    shutterSpeed           = 0.004f;           ///< Camera shutter speed in seconds.\n   61      float    ISOSpeed               = 100.0f;           ///< Camera film speed based on ISO standards.\n   62:     float3    _padding;\n   63  };\n   64  \n\n/home/max/dev/Falcor/src/Falcor/Scene/HitInfo.slang:\n   52      /** Return the barycentric weights.\n   53      */\n   54:     float3 getBarycentricWeights()\n   55      {\n   56:         return float3(1.f - barycentrics.x - barycentrics.y, barycentrics.x, barycentrics.y);\n   57      }\n   58  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.cpp:\n   66          }\n   67  \n   68:         float3 aiCast(const aiColor3D& ai) {\n   69:             return float3(ai.r, ai.g, ai.b);\n   70          }\n   71  \n   72:         float3 aiCast(const aiVector3D& val) {\n   73:             return float3(val.x, val.y, val.z);\n   74          }\n   75  \n   ..\n  350          bool createDirLight(ImporterData& data, const aiLight* pAiLight) {\n  351              DirectionalLight::SharedPtr pLight = DirectionalLight::create();\n  352:             float3 direction = normalize(aiCast(pAiLight->mDirection));\n  353              pLight->setWorldDirection(direction);\n  354              glm::mat4 base;\n  ...\n  359          bool createPointLight(ImporterData& data, const aiLight* pAiLight) {\n  360              PointLight::SharedPtr pLight = PointLight::create();\n  361:             float3 position = aiCast(pAiLight->mPosition);\n  362:             float3 lookAt = normalize(aiCast(pAiLight->mDirection));\n  363:             float3 up = normalize(aiCast(pAiLight->mUp));\n  364              pLight->setWorldPosition(position);\n  365              pLight->setWorldDirection(lookAt);\n  ...\n  367              pLight->setPenumbraAngle(pAiLight->mAngleOuterCone - pAiLight->mAngleInnerCone);\n  368  \n  369:             float3 right = cross(up, lookAt);\n  370              glm::mat4 base;\n  371              base[0] = float4(right, 0);\n  ...\n  491                  static_assert(sizeof(pAiMesh->mNormals[0]) == sizeof(mesh.pNormals[0]));\n  492                  static_assert(sizeof(pAiMesh->mBitangents[0]) == sizeof(mesh.pBitangents[0]));\n  493:                 mesh.pPositions = (float3*)pAiMesh->mVertices;\n  494:                 mesh.pNormals = (float3*)pAiMesh->mNormals;\n  495:                 mesh.pBitangents = (float3*)pAiMesh->mBitangents;\n  496                  const auto& texCrd = pAiMesh->HasTextureCoords(0) ? createTexCrdList(pAiMesh->mTextureCoords[0], pAiMesh->mNumVertices) : std::vector<float2>();\n  497                  mesh.pTexCrd = texCrd.size() ? texCrd.data() : nullptr;\n  ...\n  751              // Emissive color\n  752              if (pAiMaterial->Get(AI_MATKEY_COLOR_EMISSIVE, color) == AI_SUCCESS) {\n  753:                 float3 emissive = float3(color.r, color.g, color.b);\n  754                  pMaterial->setEmissiveColor(emissive);\n  755              }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Importers/SceneImporter.cpp:\n  213  std::vector<glm::mat4> SceneImporterImpl::parseModelInstances(const rapidjson::Value& jsonVal) {\n  214      struct ModelInstance {\n  215:         float3 scaling = float3(1, 1, 1);\n  216:         float3 position = float3(0, 0, 0);\n  217:         float3 rotation = float3(0, 0, 0);\n  218      };\n  219  \n  ...\n  370              // Don't care\n  371          } else if (key == SceneKeys::kLightIntensity) {\n  372:             float3 intensity;\n  373              if (getFloatVec<3>(value, \"Directional light intensity\", &intensity[0]) == false) {\n  374                  return false;\n  ...\n  376              pDirLight->setIntensity(intensity);\n  377          } else if (key == SceneKeys::kLightDirection) {\n  378:             float3 direction;\n  379              if (getFloatVec<3>(value, \"Directional light direction\", &direction[0]) == false)\n  380              {\n  ...\n  425              pPointLight->setPenumbraAngle(angle);\n  426          } else if (key == SceneKeys::kLightIntensity) {\n  427:             float3 intensity;\n  428              if (getFloatVec<3>(value, \"Point light intensity\", &intensity[0]) == false) {\n  429                  return false;\n  ...\n  431              pPointLight->setIntensity(intensity);\n  432          } else if (key == SceneKeys::kLightPos) {\n  433:             float3 position;\n  434              if (getFloatVec<3>(value, \"Point light position\", &position[0]) == false) {\n  435                  return false;\n  ...\n  437              pPointLight->setWorldPosition(position);\n  438          } else if (key == SceneKeys::kLightDirection) {\n  439:             float3 dir;\n  440              if (getFloatVec<3>(value, \"Point light direction\", &dir[0]) == false) {\n  441                  return false;\n  ...\n  467      auto pAreaLight = AnalyticAreaLight::create(type);\n  468  \n  469:     float3 scaling(1, 1, 1);\n  470:     float3 translation(0, 0, 0);\n  471:     float3 rotation(0, 0, 0);\n  472  \n  473      for (auto it = jsonLight.MemberBegin(); it != jsonLight.MemberEnd(); it++) {\n  ...\n  486              // Already parsed\n  487          } else if (key == SceneKeys::kLightIntensity) {\n  488:             float3 intensity;\n  489              if (getFloatVec<3>(value, \"Area light intensity\", &intensity[0]) == false) {\n  490                  return false;\n  ...\n  578          }\n  579  \n  580:         float3 position;\n  581:         float3 intensity(1.0f);\n  582          float radius = -1;\n  583          uint32_t diffuseSamples = LightProbe::kDefaultDiffSamples;\n  ...\n  661              mBuilder.setCameraSpeed(f);\n  662          } else if (key == SceneKeys::kCamPosition) {\n  663:             float3 pos;\n  664              if (getFloatVec<3>(value, \"Camera's position\", &pos[0]) == false) {\n  665                  return false;\n  ...\n  667              pCamera->setPosition(pos);\n  668          } else if (key == SceneKeys::kCamTarget) {\n  669:             float3 target;\n  670              if (getFloatVec<3>(value, \"Camera's target\", &target[0]) == false) {\n  671                  return false;\n  ...\n  673              pCamera->setTarget(target);\n  674          } else if (key == SceneKeys::kCamUp) {\n  675:             float3 up;\n  676              if (getFloatVec<3>(value, \"Camera's up vector\", &up[0]) == false) {\n  677                  return false;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/Light.cpp:\n   43      }\n   44  \n   45:     void Light::setIntensity(const float3& intensity)\n   46      {\n   47          mData.intensity = intensity;\n   ..\n   80      }\n   81  \n   82:     float3 Light::getColorForUI()\n   83      {\n   84          if ((mUiLightIntensityColor * mUiLightIntensityScale) != mData.intensity)\n   ..\n  100      }\n  101  \n  102:     void Light::setColorFromUI(const float3& uiColor)\n  103      {\n  104          mUiLightIntensityColor = uiColor;\n  ...\n  138          if (g.open())\n  139          {\n  140:             float3 color = getColorForUI();\n  141              if (g.rgbColor(\"Color\", color))\n  142              {\n  ...\n  181      }\n  182  \n  183:     void DirectionalLight::setWorldDirection(const float3& dir)\n  184      {\n  185          if (!(glm::length(dir) > 0.f)) // NaNs propagate\n  ...\n  192      }\n  193  \n  194:     void DirectionalLight::setWorldParams(const float3& center, float radius)\n  195      {\n  196          mDistance = radius;\n  ...\n  218      PointLight::~PointLight() = default;\n  219  \n  220:     void PointLight::setWorldDirection(const float3& dir)\n  221      {\n  222          if (!(glm::length(dir) > 0.f)) // NaNs propagate\n  ...\n  228      }\n  229  \n  230:     void PointLight::setWorldPosition(const float3& pos)\n  231      {\n  232          mData.posW = pos;\n  ...\n  288      {\n  289          mData.type = type;\n  290:         mData.tangent = float3(1, 0, 0);\n  291:         mData.bitangent = float3(0, 1, 0);\n  292          mData.surfaceArea = 4.0f;\n  293  \n  294:         mScaling = float3(1, 1, 1);\n  295          update();\n  296      }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/Light.h:\n   87          /** Set the light intensity.\n   88          */\n   89:         virtual void setIntensity(const float3& intensity);\n   90  \n   91          enum class Changes\n   ..\n  109          */\n  110          void setIntensityFromScript(float intensity) { setIntensityFromUI(intensity); }\n  111:         void setColorFromScript(float3 color) { setColorFromUI(color); }\n  112          float getIntensityForScript() { return getIntensityForUI(); }\n  113:         float3 getColorForScript() { return getColorForUI(); }\n  114  \n  115      protected:\n  ...\n  119  \n  120          /* UI callbacks for keeping the intensity in-sync */\n  121:         float3 getColorForUI();\n  122:         void setColorFromUI(const float3& uiColor);\n  123          float getIntensityForUI();\n  124          void setIntensityFromUI(float intensity);\n  ...\n  127  \n  128          /* These two variables track mData values for consistent UI operation.*/\n  129:         float3 mUiLightIntensityColor = float3(0.5f, 0.5f, 0.5f);\n  130          float     mUiLightIntensityScale = 1.0f;\n  131          LightData mData, mPrevData;\n  ...\n  153              \\param[in] dir Light direction. Does not have to be normalized.\n  154          */\n  155:         void setWorldDirection(const float3& dir);\n  156  \n  157          /** Set the scene parameters\n  158          */\n  159:         void setWorldParams(const float3& center, float radius);\n  160  \n  161          /** Get the light's world-space direction.\n  162          */\n  163:         const float3& getWorldDirection() const { return mData.dirW; }\n  164  \n  165          /** Get total light power (needed for light picking)\n  ...\n  170          DirectionalLight();\n  171          float mDistance = 1e3f; ///< Scene bounding radius is required to move the light position sufficiently far away\n  172:         float3 mCenter;\n  173      };\n  174  \n  ...\n  196          /** Set the light's world-space position\n  197          */\n  198:         void setWorldPosition(const float3& pos);\n  199  \n  200          /** Set the light's world-space direction.\n  201              \\param[in] dir Light direction. Does not have to be normalized.\n  202          */\n  203:         void setWorldDirection(const float3& dir);\n  204  \n  205          /** Set the cone opening half-angle for use as a spot light\n  ...\n  210          /** Get the light's world-space position\n  211          */\n  212:         const float3& getWorldPosition() const { return mData.posW; }\n  213  \n  214          /** Get the light's world-space direction\n  215          */\n  216:         const float3& getWorldDirection() const { return mData.dirW; }\n  217  \n  218          /** Get the light intensity.\n  219          */\n  220:         const float3& getIntensity() const { return mData.intensity; }\n  221  \n  222          /** Get the penumbra half-angle\n  ...\n  256              \\param[in] scale x,y,z scaling factors\n  257          */\n  258:         void setScaling(float3 scale) { mScaling = scale; }\n  259  \n  260          /** Set light source scale\n  261            */\n  262:         float3 getScaling() const { return mScaling; }\n  263  \n  264          /** Get total light power (needed for light picking)\n  ...\n  286  \n  287          bool mDirty = true;\n  288:         float3 mScaling;                ///< Scaling, controls the size of the light\n  289          glm::mat4 mTransformMatrix;     ///< Transform matrix minus scaling component\n  290      };\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightData.slang:\n   47  struct LightData\n   48  {\n   49:     float3   posW               = float3(0, 0, 0);  ///< World-space position of the center of a light source\n   50      uint32_t type               = uint(LightType::Point); ///< Type of the light source (see above)\n   51:     float3   dirW               = float3(0, -1, 0); ///< World-space orientation of the light source (normalized).\n   52      float    openingAngle       = float(M_PI);      ///< For point (spot) light: Opening half-angle of a spot light cut-off, pi by default (full sphere).\n   53:     float3   intensity          = float3(1, 1, 1);  ///< Emitted radiance of th light source\n   54      float    cosOpeningAngle    = -1.f;             ///< For point (spot) light: cos(openingAngle), -1 by default because openingAngle is pi by default\n   55:     float3   pad;\n   56      float    penumbraAngle      = 0.f;              ///< For point (spot) light: Opening half-angle of penumbra region in radians, usually does not exceed openingAngle. 0.f by default, meaning a spot light with hard cut-off\n   57  \n   58      // Extra parameters for analytic area lights\n   59:     float3   tangent            = float3(0);        ///< Tangent vector of the light shape\n   60      float    surfaceArea        = 0.f;              ///< Surface area of the light shape\n   61:     float3   bitangent          = float3(0);        ///< Bitangent vector of the light shape\n   62      float    pad1;\n   63      float4x4 transMat           = {};               ///< Transformation matrix of the light shape, from local to world space.\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbe.cpp:\n  190              float intensity = mData.intensity.r;\n  191              if (g.var(\"Intensity\", intensity, 0.0f)) {\n  192:                 mData.intensity = float3(intensity);\n  193              }\n  194  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbe.h:\n   87      /** Set the light probe's world-space position\n   88      */\n   89:     void setPosW(const float3& posW) { mData.posW = posW; }\n   90  \n   91      /** Get the light probe's world-space position\n   92      */\n   93:     const float3& getPosW() const { return mData.posW; }\n   94  \n   95      /** Set the spherical radius the light probe encompasses. Set radius to negative to sample as an infinite-distance global light probe.\n   ..\n  111      /** Set the light probe's light intensity\n  112      */\n  113:     void setIntensity(const float3& intensity) { mData.intensity = intensity; }\n  114  \n  115      /** Get the light probe's light intensity\n  116      */\n  117:     const float3& getIntensity() const { return mData.intensity; }\n  118  \n  119      /** Attach a sampler to the light probe\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbeData.slang:\n   58  struct LightProbeData\n   59  {\n   60:     float3 posW         = float3(0);\n   61      float radius        = -1.0f;\n   62:     float3 intensity    = float3(1.0f);\n   63  \n   64      LightProbeResources resources;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang:\n   43  }\n   44  \n   45: void generateBasis(float3 N, out float3 up, out float3 right, out float3 forward)\n   46  {\n   47:     up = abs(N.z) < 0.999999f ? float3(0, 0, 1) : float3(1, 0, 0);\n   48      right = normalize(cross(up, N));\n   49      forward = cross(N, right);\n   50  }\n   51  \n   52: float3 importanceSampleCosDir(float2 u, float3 N)\n   53  {\n   54:     float3 up, right, forward;\n   55      generateBasis(N, up, right, forward);\n   56  \n   ..\n   61      float phi = u2 * M_2PI;\n   62  \n   63:     float3 L = float3(r * cos(phi),\n   64                        r * sin(phi),\n   65                        sqrt(max(0.0f, 1.0f - u1)));\n   ..\n   68  }\n   69  \n   70: float3 importanceSampleGGX(float2 u, float3 N, float roughness)\n   71  {\n   72      float a = roughness * roughness;\n   ..\n   77  \n   78      // Tangent space H\n   79:     float3 tH;\n   80      tH.x = sinTheta * cos(phi);\n   81      tH.y = sinTheta * sin(phi);\n   82      tH.z = cosTheta;\n   83  \n   84:     float3 up, right, forward;\n   85      generateBasis(N, up, right, forward);\n   86  \n   ..\n   97  }\n   98  \n   99: float4 integrateDiffuseLD(float3 N)\n  100  {\n  101:     float3 accumulation = 0;\n  102      float accBrdf = 0;\n  103:     float3 V = N;\n  104      for (uint i = 0; i < gSampleCount; i++)\n  105      {\n  106          float2 u = getHammersley(i, gSampleCount);\n  107:         float3 L = importanceSampleCosDir(u, N);\n  108          float NdotL = saturate(dot(N, L));\n  109          if (NdotL > 0)\n  ...\n  121  }\n  122  \n  123: float4 integrateSpecularLD(float3 V, float3 N, float roughness)\n  124  {\n  125      // Resource Dimensions\n  ...\n  131      float cubeWidth = width / 4;\n  132  \n  133:     float3 accBrdf = 0;\n  134      float accBrdfWeight = 0;\n  135      float NdotV = saturate(dot(N, V));\n  ...\n  137      {\n  138          float2 u = getHammersley(i, gSampleCount);\n  139:         float3 H = importanceSampleGGX(u, N, roughness);\n  140:         float3 L = reflect(-N, H);\n  141          float NdotL = dot(N, L);\n  142  \n  ...\n  154  \n  155              float2 uv = dirToSphericalCrd(L);\n  156:             float3 Li = gInputTex.SampleLevel(gSampler, uv, mipLevel).rgb;\n  157              float weight = NdotL;\n  158              weight *= evalSmithGGX(NdotL, NdotV, roughness);\n  ...\n  168  }\n  169  \n  170: float4 integrateDFG(float3 N, float3 V, float roughness)\n  171  {\n  172      float NdotV = dot(N, V);\n  173:     float3 accumulation = 0;\n  174  \n  175      for(uint i = 0; i < gSampleCount; i++)\n  ...\n  178  \n  179          // Specular GGX DFG integration (stored in RG)\n  180:         float3 H = importanceSampleGGX(u, N, roughness);\n  181:         float3 L = reflect(-N, H);\n  182          float NdotH = saturate(dot(N, H));\n  183          float LdotH = saturate(dot(L, H));\n  ...\n  220  {\n  221  #ifdef _INTEGRATE_DFG\n  222:     const float3 N = float3(0, 0, 1);\n  223  \n  224      // texC.x is NdotV, calculate a valid V assuming constant N\n  225      float theta = acos(texC.x);\n  226:     const float3 V = float3(sin(theta), 0, cos(theta));\n  227  \n  228      return integrateDFG(N, V, texC.y);\n  ...\n  230  #else// _INTEGRATE_DFG else\n  231  \n  232:     float3 dir = sphericalCrdToDir(texC);\n  233  \n  234  #ifdef _INTEGRATE_DIFFUSE_LD\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/Lights.slang:\n   38  struct LightSample\n   39  {\n   40:     float3 diffuse;   // The light intensity at the surface location used for the diffuse term\n   41:     float3 specular;  // The light intensity at the surface location used for the specular term. For light probes, the diffuse and specular components are different\n   42:     float3 L;         // The direction from the surface to the light source\n   43:     float3 posW;      // The world-space position of the light\n   44      float NdotH;      // Unclamped, can be negative\n   45      float NdotL;      // Unclamped, can be negative\n   ..\n   50  void calcCommonLightProperties(ShadingData sd, inout LightSample ls)\n   51  {\n   52:     float3 H = normalize(sd.V + ls.L);\n   53      ls.NdotH = dot(sd.N, H);\n   54      ls.NdotL = dot(sd.N, ls.L);\n   ..\n   64  /** Evaluate a directional light source intensity/direction at a shading point\n   65  */\n   66: LightSample evalDirectionalLight(in LightData light, in float3 surfacePosW)\n   67  {\n   68      LightSample ls;\n   ..\n   77  /** Evaluate a point light source intensity/direction at a shading point\n   78  */\n   79: LightSample evalPointLight(in LightData light, in float3 surfacePosW)\n   80  {\n   81      LightSample ls;\n   ..\n  122  };\n  123  \n  124: float3 getDiffuseDominantDir(float3 N, float3 V, float ggxAlpha)\n  125  {\n  126      float a = 1.02341 * ggxAlpha - 1.51174;\n  ...\n  130  }\n  131  \n  132: float3 getSpecularDominantDir(float3 N, float3 R, float ggxAlpha)\n  133  {\n  134      float smoothness = 1 - ggxAlpha;\n  ...\n  137  }\n  138  \n  139: float3 evalLightProbeDiffuse(LightProbeData probe, ShadingData sd)\n  140  {\n  141:     float3 N = getDiffuseDominantDir(sd.N, sd.V, sd.ggxAlpha);\n  142  \n  143      // Interpret negative radius as global light probe with infinite distance\n  ...\n  150      else\n  151      {\n  152:         float3 intersectPosW;\n  153          intersectRaySphere(sd.posW, N, probe.posW, probe.radius, intersectPosW);\n  154          uv = dirToSphericalCrd(normalize(intersectPosW - probe.posW));\n  ...\n  158      probe.resources.diffuseTexture.GetDimensions(0, width, height, mipCount);\n  159  \n  160:     float3 diffuseLighting = probe.resources.diffuseTexture.SampleLevel(probe.resources.sampler, uv, 0).rgb;\n  161      float preintegratedDisneyBRDF = probe.sharedResources.dfgTexture.SampleLevel(probe.sharedResources.dfgSampler, float2(sd.NdotV, sd.ggxAlpha), 0).z;\n  162  \n  ...\n  164  }\n  165  \n  166: float3 evalLightProbeSpecular(LightProbeData probe, ShadingData sd, float3 L)\n  167  {\n  168      float dfgWidth, dfgHeight;\n  ...\n  172      probe.resources.specularTexture.GetDimensions(0, width, height, mipCount);\n  173  \n  174:     float3 dominantDir = getSpecularDominantDir(sd.N, L, sd.ggxAlpha);\n  175      float mipLevel = linearRoughnessToLod(sd.ggxAlpha, mipCount);\n  176  \n  ...\n  182      else\n  183      {\n  184:         float3 intersectPosW;\n  185          intersectRaySphere(sd.posW, dominantDir, probe.posW, probe.radius, intersectPosW);\n  186          uv = dirToSphericalCrd(normalize(intersectPosW - probe.posW));\n  187      }\n  188  \n  189:     float3 ld = probe.resources.specularTexture.SampleLevel(probe.resources.sampler, uv, mipLevel).rgb;\n  190  \n  191      float2 dfg = probe.sharedResources.dfgTexture.SampleLevel(probe.sharedResources.dfgSampler, float2(sd.NdotV, sd.ggxAlpha), 0).xy;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/BRDF.slang:\n   36  import Scene.Lights.Lights;\n   37  \n   38: float3 fresnelSchlick(float3 f0, float3 f90, float u)\n   39  {\n   40      return f0 + (f90 - f0) * pow(1 - u, 5);\n   ..\n   52  }\n   53  \n   54: float3 evalDiffuseDisneyBrdf(ShadingData sd, LightSample ls)\n   55  {\n   56      return disneyDiffuseFresnel(sd.NdotV, ls.NdotL, ls.LdotH, sd.linearRoughness) * M_1_PI * sd.diffuse.rgb;\n   ..\n   59  /** Lambertian diffuse\n   60  */\n   61: float3 evalDiffuseLambertBrdf(ShadingData sd, LightSample ls)\n   62  {\n   63      return sd.diffuse.rgb * (1 / M_PI);\n   ..\n   66  /** Frostbites's diffuse term. Based on https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n   67  */\n   68: float3 evalDiffuseFrostbiteBrdf(ShadingData sd, LightSample ls)\n   69  {\n   70      float energyBias = lerp(0, 0.5, sd.linearRoughness);\n   ..\n   78  }\n   79  \n   80: float3 evalDiffuseBrdf(ShadingData sd, LightSample ls)\n   81  {\n   82  #if DiffuseBrdf == DiffuseBrdfLambert\n   ..\n  107  }\n  108  \n  109: float3 evalSpecularBrdf(ShadingData sd, LightSample ls)\n  110  {\n  111      float ggxAlpha = sd.ggxAlpha;\n  ...\n  113      float D = evalGGX(ggxAlpha, ls.NdotH);\n  114      float G = evalSmithGGX(ls.NdotL, sd.NdotV, ggxAlpha);\n  115:     float3 F = fresnelSchlick(sd.specular, 1, saturate(ls.LdotH));\n  116      return D * G * F * M_1_PI;\n  117  }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/Material.cpp:\n   89                  setEmissiveTexture(nullptr);\n   90          } else {\n   91:             float3 emissiveColor = getEmissiveColor();\n   92              if (widget.var(\"Emissive color\", emissiveColor, 0.f, 1.f, 0.01f))\n   93                  setEmissiveColor(emissiveColor);\n   ..\n  208      }\n  209  \n  210:     void Material::setVolumeAbsorption(const float3& volumeAbsorption) {\n  211          if (mData.volumeAbsorption != volumeAbsorption) {\n  212              mData.volumeAbsorption = volumeAbsorption;\n  ...\n  215      }\n  216  \n  217:     void Material::setEmissiveColor(const float3& color) {\n  218          if (mData.emissive != color) {\n  219              mData.emissive = color;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/Material.h:\n  186      /** Set the volume absorption (absorption coefficient).\n  187      */\n  188:     void setVolumeAbsorption(const float3& volumeAbsorption);\n  189  \n  190      /** Get the volume absorption (absorption coefficient).\n  191      */\n  192:     const float3& getVolumeAbsorption() const { return mData.volumeAbsorption; }\n  193  \n  194      /** Set the emissive color\n  195      */\n  196:     void setEmissiveColor(const float3& color);\n  197  \n  198      /** Set the emissive factor\n  ...\n  202      /** Get the emissive color\n  203      */\n  204:     const float3& getEmissiveColor() const { return mData.emissive; }\n  205  \n  206      /** Get the emissive factor\n\n/home/max/dev/Falcor/src/Falcor/Scene/Material/MaterialData.slang:\n   59      float4   baseColor              = float4(1);        ///< Material base color (RGB) and opacity (A).\n   60      float4   specular               = float4(0);        ///< Material specular channel encoding occlusion (R), roughness (G), metallic (B) in the default MetalRough mode. In SpecGloss mode specular color (RGB) and glossiness (A).\n   61:     float3   emissive               = float3(0, 0, 0);  ///< Emissive color (RGB).\n   62      float    emissiveFactor         = 1.f;              ///< Multiplication factor for the emissive color to control light intensity.\n   63  \n   ..\n   67      uint32_t flags                  = 0;                ///< See flags in MaterialDefines.slangh\n   68  \n   69:     float3   volumeAbsorption       = float3(0, 0, 0);  ///< Volume absorption coefficient.\n   70      float    _pad0                  = 0.f;\n   71  \n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleData.slang:\n   36  struct Particle\n   37  {\n   38:     float3 pos;\n   39      float scale;\n   40:     float3 vel;    \n   41      float life;\n   42:     float3 accel;\n   43      float growth;\n   44      float rot; \n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp:\n  292      }\n  293  \n  294:     void ParticleSystem::setSpawnPos(float3 spawnPos, float3 offset) {\n  295          mEmitter.spawnPos = spawnPos;\n  296          mEmitter.spawnPosOffset = offset;\n  297      }\n  298  \n  299:     void ParticleSystem::setVelocity(float3 velocity, float3 offset) {\n  300          mEmitter.vel = velocity;\n  301          mEmitter.velOffset = offset;\n  302      }\n  303  \n  304:     void ParticleSystem::setAcceleration(float3 accel, float3 offset) {\n  305          mEmitter.accel = accel;\n  306          mEmitter.accelOffset = offset;\n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.h:\n  107              \\params[in] offset The new random offset to be applied. final value is base + randRange(-offset, offset)\n  108          */\n  109:         void setSpawnPos(float3 spawnPos, float3 offset);\n  110  \n  111          /** Sets the velocity particles spawn with.\n  ...\n  113              \\params[in] offset The new random offset to be applied. final value is base + randRange(-offset, offset)\n  114          */\n  115:         void setVelocity(float3 velocity, float3 offset);\n  116  \n  117          /** Sets the acceleration particles spawn with.\n  ...\n  119              \\params[in] offset The new random offset to be applied. final value is base + randRange(-offset, offset)\n  120          */\n  121:         void setAcceleration(float3 accel, float3 offset);\n  122  \n  123          /** Sets the scale particles spawn with.\n  ...\n  163              int32_t emitCount;\n  164              int32_t emitCountOffset;\n  165:             float3 spawnPos;\n  166:             float3 spawnPosOffset;\n  167:             float3 vel;\n  168:             float3 velOffset;\n  169:             float3 accel;\n  170:             float3 accelOffset;\n  171              float scale;\n  172              float scaleOffset;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Raster.slang:\n   33  {\n   34      // Packed vertex attributes, see PackedStaticVertexData\n   35:     float3 pos                      : POSITION;\n   36:     float3 packedNormalBitangent    : PACKED_NORMAL_BITANGENT;\n   37      float2 texC                     : TEXCOORD;\n   38  \n   39      // Other vertex attributes\n   40      uint meshInstanceID             : DRAW_ID;\n   41:     float3 prevPos                  : PREV_POSITION;\n   42  \n   43      StaticVertexData unpack()\n   ..\n   57  struct VSOut\n   58  {\n   59:     INTERPOLATION_MODE float3 normalW    : NORMAL;\n   60:     INTERPOLATION_MODE float3 bitangentW : BITANGENT;\n   61      INTERPOLATION_MODE float2 texC       : TEXCRD;\n   62:     INTERPOLATION_MODE float3 posW       : POSW;\n   63:     INTERPOLATION_MODE float3 colorV     : COLOR;\n   64      INTERPOLATION_MODE float4 prevPosH   : PREVPOSH;\n   65  \n   ..\n   84      vOut.texC = vIn.texC;\n   85      vOut.normalW = mul(vIn.unpack().normal, gScene.getInverseTransposeWorldMatrix(vIn.meshInstanceID));\n   86:     vOut.bitangentW = mul(vIn.unpack().bitangent, (float3x3)gScene.getWorldMatrix(vIn.meshInstanceID));\n   87  \n   88      float4 prevPosW = mul(float4(vIn.prevPos, 1.f), gScene.getPrevWorldMatrix(vIn.meshInstanceID));\n   ..\n   92  }\n   93  \n   94: VertexData prepareVertexData(VSOut vsOut, float3 faceNormalW)\n   95  {\n   96      VertexData v;\n   ..\n  106      This version uses implicit LOD and fetches material data directly from the scene.\n  107  */\n  108: ShadingData prepareShadingData(VSOut vsOut, uint triangleIndex, float3 viewDir)\n  109  {\n  110:     float3 faceNormal = gScene.getFaceNormalW(vsOut.meshInstanceID, triangleIndex);\n  111      VertexData v = prepareVertexData(vsOut, faceNormal);\n  112      return prepareShadingData(v, vsOut.materialID, gScene.materials[vsOut.materialID], gScene.materialResources[vsOut.materialID], viewDir);\n\n/home/max/dev/Falcor/src/Falcor/Scene/Raytracing.slang:\n   60  VertexData getVertexData(HitShaderParams hitParams, uint triangleIndex, BuiltInTriangleIntersectionAttributes attribs)\n   61  {\n   62:     float3 barycentrics = float3(1.0 - attribs.barycentrics.x - attribs.barycentrics.y, attribs.barycentrics.x, attribs.barycentrics.y);\n   63      return gScene.getVertexData(hitParams.getGlobalHitID(), triangleIndex, barycentrics);\n   64  }\n   ..\n   72  VertexData getVertexDataRayCones(HitShaderParams hitParams, uint triangleIndex, BuiltInTriangleIntersectionAttributes attribs)\n   73  {\n   74:     float3 barycentrics = float3(1.0 - attribs.barycentrics.x - attribs.barycentrics.y, attribs.barycentrics.x, attribs.barycentrics.y);\n   75      return gScene.getVertexDataRayCones(hitParams.getGlobalHitID(), triangleIndex, barycentrics);\n   76  }\n   ..\n   87      \\return Interpolated vertex attributes.\n   88  */\n   89: VertexData getVertexDataRayDiff(HitShaderParams hitParams, uint triangleIndex, BuiltInTriangleIntersectionAttributes attribs, in float3 rayDir, in float hitT,\n   90      inout RayDiff rayDiff, out float2 dUVdx, out float2 dUVdy)\n   91  {\n   92:     float3 barycentrics = float3(1.0 - attribs.barycentrics.x - attribs.barycentrics.y, attribs.barycentrics.x, attribs.barycentrics.y);\n   93      return gScene.getVertexDataRayDiff(hitParams.getGlobalHitID(), triangleIndex, barycentrics, rayDir, hitT, rayDiff, dUVdx, dUVdy);\n   94  }\n   ..\n   99      \\return Interpolated position in world space for the previous frame.\n  100  */\n  101: float3 getPrevPosW(\n  102      HitShaderParams hitParams,\n  103      uint triangleIndex,\n  104      BuiltInTriangleIntersectionAttributes attribs)\n  105  {\n  106:     float3 barycentrics = float3(1.0 - attribs.barycentrics.x - attribs.barycentrics.y, attribs.barycentrics.x, attribs.barycentrics.y);\n  107      return gScene.getPrevPosW(hitParams.getGlobalHitID(), triangleIndex, barycentrics);\n  108  }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n  326  \n  327  template<>\n  328: void Scene::AnimatedObject<Camera>::setIntoObject(const float3& pos, const float3& up, const float3& lookAt) {\n  329      pObject->setUpVector(up);\n  330      pObject->setPosition(pos);\n  ...\n  333  \n  334  template<>\n  335: void Scene::AnimatedObject<Light>::setIntoObject(const float3& pos, const float3& up, const float3& lookAt) {\n  336      DirectionalLight* pDirLight = dynamic_cast<DirectionalLight*>(pObject.get());\n  337      if (pDirLight) {\n  ...\n  359  \n  360          glm::mat4 camMat = pAnimCtrl->getGlobalMatrices()[nodeID];\n  361:         float3 pos = float3(camMat[3]);\n  362:         float3 up = float3(camMat[1]);\n  363:         float3 lookAt = float3(camMat[2]);\n  364          setIntoObject(pos, up, lookAt);\n  365          return true;\n  ...\n  549      float radius = length(mSceneBB.extent);\n  550      mCamera.pObject->setPosition(mSceneBB.center);\n  551:     mCamera.pObject->setTarget(mSceneBB.center + float3(0, 0, -1));\n  552:     mCamera.pObject->setUpVector(float3(0, 1, 0));\n  553  \n  554      if(resetDepthRange) {\n  ...\n  564  }\n  565  \n  566: void Scene::addViewpoint(const float3& position, const float3& target, const float3& up) {\n  567      Viewpoint viewpoint = { position, target, up };\n  568      mViewpoints.push_back(viewpoint);\n  ...\n 1157      // Viewpoints\n 1158      s.func_(kAddViewpoint.c_str(), ScriptBindings::overload_cast<>(&Scene::addViewpoint)); // add current camera as viewpoint\n 1159:     s.func_(kAddViewpoint.c_str(), ScriptBindings::overload_cast<const float3&, const float3&, const float3&>(&Scene::addViewpoint), \"position\"_a, \"target\"_a, \"up\"_a); // add specified viewpoint\n 1160      s.func_(kRemoveViewpoint.c_str(), &Scene::removeViewpoint); // remove the selected viewpoint\n 1161      s.func_(kSelectViewpoint.c_str(), &Scene::selectViewpoint, \"index\"_a); // select a viewpoint by index\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.h:\n  176          /** Add a new viewpoint to the list of viewpoints.\n  177          */\n  178:         void addViewpoint(const float3& position, const float3& target, const float3& up);\n  179  \n  180          /** Remove the currently active viewpoint.\n  ...\n  438              bool update(const AnimationController* pAnimCtrl, bool force);\n  439              bool hasGlobalTransform() const { return nodeID != kInvalidNode; }\n  440:             void setIntoObject(const float3& pos, const float3& up, const float3& lookAt);\n  441              bool enabled(bool force) const;\n  442          };\n  ...\n  500          // Saved Camera Viewpoints\n  501          struct Viewpoint {\n  502:             float3 position;\n  503:             float3 target;\n  504:             float3 up;\n  505          };\n  506          std::vector<Viewpoint> mViewpoints;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.slang:\n   92      };\n   93  \n   94:     float3x3 loadInverseTransposeWorldMatrix(uint matrixID)\n   95      {\n   96:         float3x3 m =\n   97          {\n   98              inverseTransposeWorldMatrices[matrixID * 4 + 0].xyz,\n   ..\n  103      }\n  104  \n  105:     float3x3 getInverseTransposeWorldMatrix(uint meshInstanceID)\n  106      {\n  107          uint matrixID = meshInstances[meshInstanceID].globalMatrixID;\n  ...\n  194          \\param[out] Face normal in object space (normalized). Front facing for counter-clockwise winding.\n  195      */\n  196:     float3 getFaceNormalInObjectSpace(uint3 vtxIndices)\n  197      {\n  198:         float3 p0 = vertices[vtxIndices[0]].position;\n  199:         float3 p1 = vertices[vtxIndices[1]].position;\n  200:         float3 p2 = vertices[vtxIndices[2]].position;\n  201          return normalize(cross(p1 - p0, p2 - p0));\n  202      }\n  ...\n  207          \\param[out] Face normal in world space (normalized).\n  208      */\n  209:     float3 getFaceNormalW(uint meshInstanceID, uint triangleIndex)\n  210      {\n  211          uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  212:         float3 p0 = vertices[vtxIndices[0]].position;\n  213:         float3 p1 = vertices[vtxIndices[1]].position;\n  214:         float3 p2 = vertices[vtxIndices[2]].position;\n  215:         float3 N = cross(p1 - p0, p2 - p0);\n  216:         float3x3 worldInvTransposeMat = getInverseTransposeWorldMatrix(meshInstanceID);\n  217          return normalize(mul(N, worldInvTransposeMat));\n  218      }\n  ...\n  225      float getFaceAreaW(uint meshInstanceID, uint triangleIndex)\n  226      {\n  227:         float3 p[3];\n  228          getVertexPositionsW(meshInstanceID, triangleIndex, p);\n  229          return 0.5f * length(cross(p[1] - p[0], p[2] - p[0]));\n  ...\n  236          \\return Face normal in world space (normalized).\n  237      */\n  238:     float3 computeFaceNormalAndAreaW(uint meshInstanceID, const float3 p[3], out float triangleArea)\n  239      {\n  240          // Compute face normal in world space.\n  241          // The length of the vector is twice the triangle area since we're in world space.\n  242          // Note that this is not true if the normal is transformed using the inverse-transpose.\n  243:         float3 e[2];\n  244          e[0] = p[1] - p[0];\n  245          e[1] = p[2] - p[0];\n  246:         float3 N = cross(e[0], e[1]);\n  247          triangleArea = 0.5f * length(N);\n  248  \n  ...\n  260          \\return Face normal in world space (normalized).\n  261      */\n  262:     float3 getFaceNormalAndAreaW(uint meshInstanceID, uint triangleIndex, out float triangleArea)\n  263      {\n  264          uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  265  \n  266          // Load vertices and transform to world space.\n  267:         float3 p[3];\n  268          [unroll]\n  269          for (int i = 0; i < 3; i++)\n  ...\n  282          \\return Interpolated vertex attributes.\n  283      */\n  284:     VertexData getVertexData(uint meshInstanceID, uint triangleIndex, float3 barycentrics)\n  285      {\n  286          const uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  ...\n  308  \n  309          float4x4 worldMat = getWorldMatrix(meshInstanceID);\n  310:         float3x3 worldInvTransposeMat = getInverseTransposeWorldMatrix(meshInstanceID);\n  311  \n  312          v.posW = mul(float4(v.posW, 1.f), worldMat).xyz;\n  313          v.normalW = mul(v.normalW, worldInvTransposeMat);\n  314          v.faceNormalW = mul(v.faceNormalW, worldInvTransposeMat);\n  315:         v.bitangentW = mul(v.bitangentW, (float3x3)worldMat);\n  316  \n  317          v.normalW = normalize(v.normalW);\n  318          v.faceNormalW = normalize(v.faceNormalW);\n  319          // Handle invalid bitangents gracefully (avoid NaN from normalization).\n  320:         v.bitangentW = dot(v.bitangentW, v.bitangentW) > 0.f ? normalize(v.bitangentW) : float3(0, 0, 0);\n  321          return v;\n  322      }\n  ...\n  337          \\return Interpolated vertex attributes.\n  338      */\n  339:     VertexData getVertexDataRayCones(uint meshInstanceID, uint triangleIndex, float3 barycentrics)\n  340      {\n  341          const uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  ...\n  343  \n  344          float2 txcoords[3];\n  345:         float3 vtxs[3];\n  346          txcoords[0] = vertices[vtxIndices[0]].texCrd;\n  347          txcoords[1] = vertices[vtxIndices[1]].texCrd;\n  ...\n  352  \n  353          float4x4 worldMat = getWorldMatrix(meshInstanceID);\n  354:         v.coneTexLODValue = computeRayConeTriangleLODValue(vtxs, txcoords, float3x3(worldMat), v.faceNormalW);\n  355  \n  356          return v;\n  ...\n  368          \\return Interpolated vertex attributes.\n  369      */\n  370:     VertexData getVertexDataRayDiff(uint meshInstanceID, uint triangleIndex, float3 barycentrics, in float3 rayDir, in float hitT,\n  371          inout RayDiff rayDiff, out float2 dUVdx, out float2 dUVdy)\n  372      {\n  ...\n  374          VertexData v = getVertexData(meshInstanceID, triangleIndex, barycentrics);\n  375  \n  376:         float3 unnormalizedN;\n  377:         float3 vtxs[3];\n  378:         float3 normals[3];\n  379          float2 txcoords[3];\n  380          float2 dBarydx, dBarydy;\n  381          float4x4 worldMat = getWorldMatrix(meshInstanceID);\n  382:         float3x3 worldInvTransposeMat = getInverseTransposeWorldMatrix(meshInstanceID);\n  383  \n  384          StaticVertexData vtx[3] = { gScene.getVertex(vtxIndices[0]), gScene.getVertex(vtxIndices[1]), gScene.getVertex(vtxIndices[2]) };\n  ...\n  398          unnormalizedN += normals[2] * barycentrics[2];\n  399  \n  400:         float3 e1 = vtxs[1] - vtxs[0];\n  401:         float3 e2 = vtxs[2] - vtxs[0];\n  402          computeDifferentialsBarysAndUVs(rayDiff, rayDir, vtxs, txcoords, e1, e2, v.faceNormalW, hitT, dBarydx, dBarydy, dUVdx, dUVdy);\n  403          reflectRayDifferential(rayDiff, rayDir, unnormalizedN, v.normalW, dBarydx, dBarydy, e1, e2, normals);\n  ...\n  412          \\return Interpolated position in world space for the previous frame.\n  413      */\n  414:     float3 getPrevPosW(uint meshInstanceID, uint triangleIndex, float3 barycentrics)\n  415      {\n  416          const uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  417:         float3 prevPos = float3(0, 0, 0);\n  418  \n  419          [unroll]\n  ...\n  432          \\param[out] p Position of vertex 0,1,2 in world space.\n  433      */\n  434:     void getVertexPositionsW(uint meshInstanceID, uint triangleIndex, out float3 p[3])\n  435      {\n  436          uint3 vtxIndices = getIndices(meshInstanceID, triangleIndex);\n  ...\n  480          \\return Evaluated outgoing radiance on the front-facing side.\n  481      */\n  482:     float3 getEmissive(uint materialID, float2 uv, MaterialResources mr)\n  483      {\n  484          MaterialData m = materials[materialID];\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp:\n   43          class MikkTSpaceWrapper {\n   44           public:\n   45:             static std::vector<float3> generateBitangents(const float3* pPositions, const float3* pNormals, const float2* pTexCrd, const uint32_t* pIndices, size_t vertexCount, size_t indexCount)\n   46              {\n   47                  if (!pNormals || !pPositions || !pTexCrd || !pIndices) {\n   ..\n   51                      if (pTexCrd) logWarning(\"Can't generate tangent space. The mesh doesn't have texture coordinates\");\n   52                      if (pIndices) logWarning(\"Can't generate tangent space. The mesh doesn't have indices\");\n   53:                     return std::vector<float3>(vertexCount, float3(0, 0, 0));\n   54                  }\n   55  \n   ..\n   70                  {\n   71                      logError(\"Failed to generate MikkTSpace tangents\");\n   72:                     return std::vector<float3>(vertexCount, float3(0, 0, 0));\n   73                  }\n   74  \n   ..\n   77  \n   78          private:\n   79:             MikkTSpaceWrapper(const float3* pPositions, const float3* pNormals, const float2* pTexCrd, const uint32_t* pIndices, size_t vertexCount, size_t indexCount) :\n   80                  mpPositions(pPositions), mpNormals(pNormals), mpTexCrd(pTexCrd), mpIndices(pIndices), mFaceCount(indexCount / 3), mBitangents(vertexCount) {}\n   81:             const float3* mpPositions;\n   82:             const float3* mpNormals;\n   83              const float2* mpTexCrd;\n   84              const uint32_t* mpIndices;\n   85              size_t mFaceCount;\n   86:             std::vector<float3> mBitangents;\n   87              int32_t getFaceCount() const { return (int32_t)mFaceCount; }\n   88              int32_t getIndex(int32_t face, int32_t vert) { return mpIndices[face * 3 + vert]; }\n   89:             void getPosition(float position[], int32_t face, int32_t vert) { *(float3*)position = mpPositions[getIndex(face, vert)]; }\n   90:             void getNormal(float normal[], int32_t face, int32_t vert) { *(float3*)normal = mpNormals[getIndex(face, vert)]; }\n   91              void getTexCrd(float texCrd[], int32_t face, int32_t vert) { *(float2*)texCrd = mpTexCrd[getIndex(face, vert)]; }\n   92  \n   93              void setTangent(const float tangent[], float sign, int32_t face, int32_t vert) {\n   94                  int32_t index = getIndex(face, vert);\n   95:                 float3 T(*(float3*)tangent), N;\n   96                  getNormal(&N[0], face, vert);\n   97                  // bitangent = fSign * cross(vN, tangent);\n   ..\n  100          };\n  101  \n  102:         void validateTangentSpace(const float3 bitangents[], uint32_t vertexCount) {\n  103:             auto isValid = [](const float3& bitangent) {\n  104                  if (glm::any(glm::isinf(bitangent) || glm::isnan(bitangent))) return false;\n  105                  if (length(bitangent) < 1e-6f) return false;\n  ...\n  201  \n  202          // Generate tangent space if that's required\n  203:         std::vector<float3> bitangents;\n  204          if (!is_set(mFlags, Flags::UseOriginalTangentSpace) || !mesh.pBitangents) {\n  205              bitangents = MikkTSpaceWrapper::generateBitangents(mesh.pPositions, mesh.pNormals, mesh.pTexCrd, mesh.pIndices, mesh.vertexCount, mesh.indexCount);\n  ...\n  211              StaticVertexData s;\n  212              s.position = mesh.pPositions[v];\n  213:             s.normal = mesh.pNormals ? mesh.pNormals[v] : float3(0, 0, 0);\n  214              s.texCrd = mesh.pTexCrd ? mesh.pTexCrd[v] : float2(0, 0);\n  215              s.bitangent = bitangents.size() ? bitangents[v] : mesh.pBitangents[v];\n  ...\n  415          for (size_t i = 0; i < mMeshes.size(); i++) {\n  416              const auto& mesh = mMeshes[i];\n  417:             float3 boxMin(FLT_MAX);\n  418:             float3 boxMax(-FLT_MAX);\n  419  \n  420              const auto* staticData = &mBuffersData.staticData[mesh.staticVertexOffset];\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.h:\n   65          uint32_t indexCount = 0;                    // The number of indices the mesh has. Can't be zero - the scene doesn't support non-indexed meshes. If you'd like us to support non-indexed meshes, please open an issue\n   66          const uint32_t* pIndices = nullptr;         // Array of indices. The element count must match `indexCount`\n   67:         const float3* pPositions = nullptr;         // Array of vertex positions. The element count must match `vertexCount`. This field is required\n   68:         const float3* pNormals = nullptr;           // Array of vertex normals. The element count must match `vertexCount`.   This field is required\n   69:         const float3* pBitangents = nullptr;        // Array of vertex bitangent. The element count must match `vertexCount`. Optional. If set to nullptr, or if BuildFlags::UseOriginalTangentSpace is not set, the tangents will be generated using MikkTSpace\n   70          const float2* pTexCrd = nullptr;            // Array of vertex texture coordinates. The element count must match `vertexCount`. This field is required\n   71          const uint4* pBoneIDs = nullptr;            // Array of bone IDs. The element count must match `vertexCount`. This field is optional. If it's set, that means that the mesh is animated, in which case pBoneWeights can't be nullptr\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneTypes.slang:\n   63  struct StaticVertexData\n   64  {\n   65:     float3 position;\n   66      float  _pad1;\n   67  \n   68:     float3 normal;\n   69      float  _pad2;\n   70  \n   71:     float3 bitangent;\n   72      float  _pad3;\n   73  \n   ..\n   79  struct PackedStaticVertexData\n   80  {\n   81:     float3 position;\n   82:     float3 packedNormalBitangent; // 3xfp16 each\n   83      float2 texCrd;\n   84  \n   ..\n  118          v.texCrd = texCrd;\n  119  \n  120:         float3 n;\n  121          n.x = f16tof32(asuint(packedNormalBitangent.x) & 0xffff);\n  122          n.y = f16tof32(asuint(packedNormalBitangent.x) >> 16);\n  ...\n  124          v.normal = normalize(n);\n  125  \n  126:         float3 b;\n  127          b.x = f16tof32(asuint(packedNormalBitangent.y) >> 16);\n  128          b.y = f16tof32(asuint(packedNormalBitangent.z) & 0xffff);\n  ...\n  137  struct PrevVertexData\n  138  {\n  139:     float3 position;\n  140  };\n  141  \n  ...\n  150  struct VertexData\n  151  {\n  152:     float3 posW;            ///< Position in world space.\n  153      float  _pad1;\n  154  \n  155:     float3 normalW;         ///< Shading normal in world space.\n  156      float  _pad2;\n  157  \n  158:     float3 bitangentW;      ///< Shading bitangent in world space.\n  159      float  _pad3;\n  160  \n  ...\n  162      float  _pad4;\n  163  \n  164:     float3 faceNormalW;     ///< Face normal in world space.\n  165      float  _pad5;\n  166      \n\n/home/max/dev/Falcor/src/Falcor/Scene/Shading.slang:\n   34  struct ShadingResult\n   35  {\n   36:     float3 diffuseBrdf;             // The result of the diffuse BRDF\n   37:     float3 specularBrdf;            // The result of the specular BRDF\n   38:     float3 diffuse;                 // The diffuse component of the result\n   39:     float3 specular;                // The specular component of the result\n   40      float4 color;                   // The final color. Alpha holds the opacity valua\n   41  };\n\n/home/max/dev/Falcor/src/Falcor/Scene/ShadingData.slang:\n   37  struct ShadingData\n   38  {\n   39:     float3  posW;                   ///< Shading hit position in world space\n   40      float   _pad0;\n   41  \n   42:     float3  V;                      ///< Direction to the eye at shading hit\n   43      float   _pad1;\n   44  \n   45:     float3  N;                      ///< Shading normal at shading hit\n   46      float   _pad2;\n   47  \n   48:     float3  T;                      ///< Shading tangent at shading hit\n   49      float   _pad3;\n   50  \n   51:     float3  B;                      ///< Shading bitangent at shading hit\n   52      float   _pad4;\n   53  \n   ..\n   57  \n   58      // Primitive data\n   59:     float3  faceN;                  ///< Face normal in world space, always on the front-facing side.\n   60      float   _pad6;\n   61  \n   ..\n   72  \n   73  \n   74:     float3  diffuse;                ///< Diffuse albedo.\n   75      float   _pad7;\n   76  \n   77:     float3  specular;               ///< Specular albedo.\n   78      float   _pad8;\n   79      \n   80:     float3  emissive;\n   81      float   _pad9;\n   82  \n   ..\n   96          \\return Ray origin of the new ray.\n   97      */\n   98:     float3 computeNewRayOrigin(bool viewside = true)\n   99      {\n  100          return computeRayOrigin(posW, (frontFacing == viewside) ? faceN : -faceN);\n  ...\n  105  /** Convert RGB to normal\n  106  */\n  107: float3 RgbToNormal(float3 rgb)\n  108  {\n  109:     float3 n = rgb * 2 - 1;\n  110      return normalize(n);\n  111  }\n  ...\n  113  /** Convert RG to normal\n  114  */\n  115: float3 RgToNormal(float2 rg)\n  116  {\n  117:     float3 n;\n  118      n.xy = rg * 2 - 1;\n  119  \n  ...\n  134      if (mapType == NormalMapUnused) return;\n  135  \n  136:     float3 mapN = lod.sampleTexture(mr.normalMap, mr.samplerState, sd.uv).xyz;\n  137      switch(mapType)\n  138      {\n  ...\n  196  }\n  197  \n  198: void applyAlphaTest(uint matFlags, float alpha, float threshold, float3 posW)\n  199  {\n  200  #ifndef _MS_DISABLE_ALPHA_TEST\n  ...\n  209      texture level of detail, and must implement the `ITextureSampler` interface.\n  210  */\n  211: ShadingData _prepareShadingData<L:ITextureSampler>(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir, L lod, bool useNormalMap)\n  212  {\n  213      ShadingData sd = {};\n  ...\n  252      {\n  253          // R - Occlusion; G - Roughness; B - Metallic\n  254:         sd.diffuse = lerp(baseColor.rgb, float3(0), spec.b);\n  255  \n  256          // Calculate the specular reflectance for dielectrics from the IoR, as in the Disney BSDF [Burley 2015].\n  ...\n  259          float F0 = f * f;\n  260  \n  261:         sd.specular = lerp(float3(F0), baseColor.rgb, spec.b);\n  262          sd.linearRoughness = spec.g;\n  263          sd.metallic = spec.b;\n  ...\n  301  /** Prepare the hit-point data\n  302  */\n  303: ShadingData prepareShadingData(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir)\n  304  {\n  305      ImplicitLodTextureSampler lod = { };\n  ...\n  312      texture fetches.\n  313  */\n  314: ShadingData prepareShadingData(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir, float lod)\n  315  {\n  316      ExplicitLodTextureSampler explicitLOD = { lod };\n  ...\n  326      \\param[in] lodMinusTexDim Texture level-of-details for ray cones with the texture dimensions subtracted out. See TextureSampler and TexLODHelpers.\n  327  */\n  328: ShadingData prepareShadingDataUsingRayConesLOD(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 camPosW, float lodMinusTexDim)\n  329  {\n  330      ExplicitRayConesLodTextureSampler explicitRayConesLOD = { lodMinusTexDim };\n  ...\n  341      \\param[in] dUVdy Differential texture coordinates in y.\n  342  */\n  343: ShadingData prepareShadingDataUsingRayDiffsLOD(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 camPosW, float2 dUVdx, float2 dUVdy)\n  344  {\n  345      ExplicitRayDiffsLodTextureSampler explicitRayDiffsLOD = { dUVdx, dUVdy };\n  ...\n  354      values will be used for all material texture fetches.\n  355  */\n  356: ShadingData prepareShadingData(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir, float2 gradX, float2 gradY)\n  357  {\n  358      ExplicitGradientTextureSampler lod = { gradX, gradY };\n  ...\n  365  void applyIrayBentNormals(inout ShadingData sd, VertexData v)\n  366  {\n  367:     float3 Ng = v.faceNormalW;\n  368:     float3 Ns = sd.N;\n  369  \n  370      // Specular reflection in shading normal\n  371:     float3 R = reflect(-sd.V, Ns);\n  372      float a = dot(Ng, R);\n  373      if (a < 0) // Perturb normal\n  374      {\n  375          float b = max(0.001, dot(Ns, Ng));\n  376:         float3 Nss = normalize(sd.V + normalize(R - Ns * a / b));\n  377          sd.N = Nss;\n  378          sd.NdotV = dot(sd.N, sd.V);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Color/ColorHelpers.slang:\n   37      \\param RGBColor linear HDR RGB color in the ITU-R BT.709 color space\n   38  */\n   39: inline float luminance(float3 rgb)\n   40  {\n   41:     return dot(rgb, float3(0.2126f, 0.7152f, 0.0722f));\n   42  }\n   43  \n   ..\n   45      \\param RGBColor linear HDR RGB color\n   46  */\n   47: inline float3 RGBToYCgCo(float3 rgb)\n   48  {\n   49:     float Y = dot(rgb, float3(0.25f, 0.50f, 0.25f));\n   50:     float Cg = dot(rgb, float3(-0.25f, 0.50f, -0.25f));\n   51:     float Co = dot(rgb, float3(0.50f, 0.00f, -0.50f));\n   52:     return float3(Y, Cg, Co);\n   53  }\n   54  \n   ..\n   56      \\param YCgCoColor linear HDR YCgCo color\n   57  */\n   58: inline float3 YCgCoToRGB(float3 YCgCo)\n   59  {\n   60      float tmp = YCgCo.x - YCgCo.y;\n   ..\n   62      float g = YCgCo.x + YCgCo.y;\n   63      float b = tmp - YCgCo.z;\n   64:     return float3(r, g, b);\n   65  }\n   66  \n   ..\n   68      \\param RGBColor linear HDR RGB color in the ITU-R BT.709 color space\n   69  */\n   70: inline float3 RGBToYUV(float3 rgb)\n   71  {\n   72:     float3 ret;\n   73:     ret.x = dot(rgb, float3(0.2126f, 0.7152f, 0.0722f));\n   74:     ret.y = dot(rgb, float3(-0.09991f, -0.33609f, 0.436f));\n   75:     ret.z = dot(rgb, float3(0.615f, -0.55861f, -0.05639f));\n   76      return ret;\n   77  }\n   ..\n   80      \\param YUVColor linear HDR YUV color in the ITU-R BT.709 color space\n   81  */\n   82: inline float3 YUVToRGB(float3 yuv)\n   83  {\n   84:     float3 ret;\n   85:     ret.x = dot(yuv, float3(1.0f, 0.0f, 1.28033f));\n   86:     ret.y = dot(yuv, float3(1.0f, -0.21482f, -0.38059f));\n   87:     ret.z = dot(yuv, float3(1.0f, 2.12798f, 0.0f));\n   88      return ret;\n   89  }\n   ..\n  107      \\param sRGBColor sRGB input color\n  108  */\n  109: inline float3 sRGBToLinear(float3 srgb)\n  110  {\n  111:     return float3(\n  112          sRGBToLinear(srgb.x),\n  113          sRGBToLinear(srgb.y),\n  ...\n  133      \\param LinearColor linear input color\n  134  */\n  135: inline float3 linearToSRGB(float3 lin)\n  136  {\n  137:     return float3(\n  138          linearToSRGB(lin.x),\n  139          linearToSRGB(lin.y),\n\n/home/max/dev/Falcor/src/Falcor/Utils/Color/ColorMap.slang:\n   36      Values outside the [0,1] range are clamped.\n   37      \\param[in] x Scalar value.\n   38:     \\return float3 Continuous RGB color in range [0,1].\n   39  */\n   40: float3 colormapGray(float x)\n   41  {\n   42      float v = saturate(x);\n   43:     return float3(v, v, v);\n   44  }\n   45  \n   ..\n   47      Values outside the [0,1] range are clamped to the end points.\n   48      \\param[in] x Scalar value.\n   49:     \\return float3 Continuous RGB color in range [0,1].\n   50  */\n   51: float3 colormapJet(float x)\n   52  {\n   53      // Code written in Matlab to match jet.m output:\n   ..\n   58      //y = [R G B];\n   59      //y = max(0, min(1, y));\n   60:     return saturate(1.5 - abs(4 * clamp(x, 0, 1) - float3(3, 2, 1)));\n   61  }\n   62  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Color/ColorUtils.h:\n   63  {\n   64      // Transform from RGB color in Rec.709 to CIE XYZ.\n   65:     static const glm::float3x3 kColorTransform_RGBtoXYZ_Rec709 =\n   66      {\n   67          0.4123907992659595, 0.2126390058715104, 0.0193308187155918,\n   ..\n   71  \n   72      // Transform from XYZ color to RGB in Rec.709.\n   73:     static const glm::float3x3 kColorTransform_XYZtoRGB_Rec709 =\n   74      {\n   75          3.2409699419045213, -0.9692436362808798, 0.0556300796969936,\n   ..\n   79  \n   80      // Transform from CIE XYZ to LMS using the CAT02 transform.\n   81:     static const glm::float3x3 kColorTransform_XYZtoLMS_CAT02 =\n   82      {\n   83          0.7328, -0.7036, 0.0030,\n   ..\n   87  \n   88      // Transform from LMS to CIE XYZ using the inverse CAT02 transform.\n   89:     static const glm::float3x3 kColorTransform_LMStoXYZ_CAT02 =\n   90      {\n   91          1.096123820835514, 0.454369041975359, -0.009627608738429,\n   ..\n   95  \n   96      // Transform from CIE XYZ to LMS using the Bradford transform.\n   97:     static const glm::float3x3 kColorTransform_XYZtoLMS_Bradford =\n   98      {\n   99          0.8951, -0.7502, 0.0389,\n  ...\n  103  \n  104      // Transform from LMS to CIE XYZ using the inverse Bradford transform.\n  105:     static const glm::float3x3 kColorTransform_LMStoXYZ_Bradford =\n  106      {\n  107          0.98699290546671214, 0.43230526972339445, -0.00852866457517732,\n  ...\n  112      /** Transforms an RGB color in Rec.709 to CIE XYZ.\n  113      */\n  114:     static float3 RGBtoXYZ_Rec709(float3 c)\n  115      {\n  116          return kColorTransform_RGBtoXYZ_Rec709 * c;\n  ...\n  119      /** Transforms an XYZ color to RGB in Rec.709.\n  120      */\n  121:     static float3 XYZtoRGB_Rec709(float3 c)\n  122      {\n  123          return kColorTransform_XYZtoRGB_Rec709 * c;\n  ...\n  126      /** Converts (chromaticities, luminance) to XYZ color.\n  127      */\n  128:     static float3 xyYtoXYZ(float x, float y, float Y)\n  129      {\n  130:         return float3(x * Y / y, Y, (1.f - x - y) * Y / y);\n  131      }\n  132  \n  ...\n  140          \\return CIE XYZ color.\n  141      */\n  142:     static float3 colorTemperatureToXYZ(float T, float Y = 1.f)\n  143      {\n  144          if (T < 1667.f || T > 25000.f)\n  145          {\n  146              logError(\"colorTemperatureToXYZ() - T is out of range\");\n  147:             return float3(0, 0, 0);\n  148          }\n  149  \n  ...\n  198          \\return 3x3 matrix M, which transforms linear RGB in Rec.709 using c' = M * c.\n  199      */\n  200:     static glm::float3x3 calculateWhiteBalanceTransformRGB_Rec709(float T)\n  201      {\n  202:         static const glm::float3x3 MA = kColorTransform_XYZtoLMS_CAT02 * kColorTransform_RGBtoXYZ_Rec709;    // RGB -> LMS\n  203:         static const glm::float3x3 invMA = kColorTransform_XYZtoRGB_Rec709 * kColorTransform_LMStoXYZ_CAT02; // LMS -> RGB\n  204  \n  205          // Compute destination reference white in LMS space.\n  206:         static const float3 wd = kColorTransform_XYZtoLMS_CAT02 * colorTemperatureToXYZ(6500.f);\n  207  \n  208          // Compute source reference white in LMS space.\n  209:         const float3 ws = kColorTransform_XYZtoLMS_CAT02 * colorTemperatureToXYZ(T);\n  210  \n  211          // Derive final 3x3 transform in RGB space.\n  212:         float3 scale = wd / ws;\n  213:         glm::float3x3 D = glm::diagonal3x3(scale);\n  214  \n  215          return invMA * D * MA;\n\n/home/max/dev/Falcor/src/Falcor/Utils/Helpers.slang:\n   34      Spherical map sampling\n   35  *******************************************************************/\n   36: float2 dirToSphericalCrd(float3 direction)\n   37  {\n   38:     float3 p = normalize(direction);\n   39      float2 uv;\n   40      uv.x = (1 + atan2(-p.z, p.x) / M_PI) * 0.5;\n   ..\n   43  }\n   44  \n   45: float3 sphericalCrdToDir(float2 uv)\n   46  {\n   47      float phi = M_PI * uv.y;\n   48      float theta = M_2PI * uv.x - (M_PI / 2.0f);\n   49  \n   50:     float3 dir;\n   51      dir.x = sin(phi) * sin(theta);\n   52      dir.y = cos(phi);\n   ..\n   90      \\return Ray origin of the new ray.\n   91  */\n   92: float3 computeRayOrigin(float3 pos, float3 normal)\n   93  {\n   94      const float origin = 1.f / 32.f;\n   ..\n   98      // Per-component integer offset to bit representation of fp32 position.\n   99      int3 iOff = int3(normal * iScale);\n  100:     float3 iPos = asfloat(asint(pos) + (pos < 0.f ? -iOff : iOff));\n  101  \n  102      // Select per-component between small fixed offset or above variable offset depending on distance to origin.\n  103:     float3 fOff = normal * fScale;\n  104      return abs(pos) < origin ? pos + fOff : iPos;\n  105  }\n  ...\n  115      \\return True if the ray intersects the sphere.\n  116  */\n  117: bool intersectRaySphere(float3 rayOrigin, float3 rayDir, float3 sphereCenter, float sphereRadius, out float3 intersectionPos)\n  118  {\n  119      // Implementation is taken from Chapter 7 of Ray-Tracing Gems\n  120:     float3 f = rayOrigin - sphereCenter;\n  121      float a = dot(rayDir, rayDir);\n  122      float b = dot(-f, rayDir);\n  ...\n  159  // TODO: this function is broken an may return negative values.\n  160  // Issue #780\n  161: float getMetallic(float3 diffuse, float3 spec)\n  162  {\n  163      // This is based on the way that UE4 and Substance Painter 2 converts base+metallic+specular level to diffuse/spec colors\n  ...\n  221  }\n  222  \n  223: float sineHash3D(float3 p)\n  224  {\n  225      return sineHash(float2(sineHash(p.xy), p.z));\n  226  }\n  227  \n  228: float calculateHashedAlpha(float3 hashInputCoord, float hashScale, bool useAnisotropy)\n  229  {\n  230      // Provide a decent default to our alpha threshold\n  ...\n  236  \n  237          // Find the discretized derivatives of our coordinates\n  238:         float3 anisoDeriv = max(abs(ddx(hashInputCoord)), abs(ddy(hashInputCoord)));\n  239:         float3 anisoScales = float3(0.707f / (hashScale * anisoDeriv.x),\n  240                                      0.707f / (hashScale * anisoDeriv.y),\n  241                                      0.707f / (hashScale * anisoDeriv.z));\n  242          // Find log-discretized noise scales\n  243:         float3 scaleFlr = float3(exp2(floor(log2(anisoScales.x))),\n  244                                   exp2(floor(log2(anisoScales.y))),\n  245                                   exp2(floor(log2(anisoScales.z))));\n  246:         float3 scaleCeil = float3(exp2(ceil(log2(anisoScales.x))),\n  247                                    exp2(ceil(log2(anisoScales.y))),\n  248                                    exp2(ceil(log2(anisoScales.z))));\n  ...\n  251                                sineHash3D(floor(scaleCeil * hashInputCoord)));\n  252          // Factor to linearly interpolate with\n  253:         float3 fractLoc = float3(frac(log2(anisoScales.x)),\n  254                                   frac(log2(anisoScales.y)),\n  255                                   frac(log2(anisoScales.z)));\n  256          float2 toCorners = float2(length(fractLoc),\n  257:                                   length(float3(1.0f, 1.0f, 1.0f) - fractLoc));\n  258          float lerpFactor = toCorners.x / (toCorners.x + toCorners.y);\n  259          // Interpolate alpha threshold from noise at two scales\n  ...\n  261          // Pass into CDF to compute uniformly distrib threshold\n  262          float a = min(lerpFactor, 1 - lerpFactor);\n  263:         float3 cases = float3(x * x / (2 * a * (1 - a)), (x - 0.5 * a) / (1 - a), 1.0 - ((1 - x) * (1 - x) / (2 * a * (1 - a))));\n  264          // Find our final, uniformly distributed alpha threshold\n  265          alphaCompare = (x < (1 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\n  ...\n  283          float a = min(lerpFactor, 1 - lerpFactor);\n  284          // Pass into CDF to compute uniformly distrib threshold\n  285:         float3 cases = float3(x * x / (2 * a * (1 - a)), (x - 0.5 * a) / (1 - a), 1.0 - ((1 - x) * (1 - x) / (2 * a * (1 - a))));\n  286          // Find our final, uniformly distributed alpha threshold\n  287          alphaCompare = (x < (1 - a)) ? ((x < a) ? cases.x : cases.y) : cases.z;\n  ...\n  299      \\todo calculateHashedAlpha requires ddx/ddy, so cannot be used in RT mode.\n  300  */\n  301: bool evalAlphaTest(uint matFlags, float alpha, float threshold, float3 posW)\n  302  {\n  303      if (EXTRACT_ALPHA_MODE(matFlags) != AlphaModeMask) return false;\n\n/home/max/dev/Falcor/src/Falcor/Utils/HostDeviceShared.slangh:\n   43  \n   44  using uint = uint32_t;\n   45: using float3x3 = glm::float3x3;\n   46: using float3x4 = glm::float3x4;\n   47  using float4x4 = glm::float4x4;\n   48  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Image/Bitmap.cpp:\n  228          switch(bpp) {\n  229              case 128:\n  230:                 pBmp->mFormat = ResourceFormat::RGBA32Float;    // 4xfloat32 HDR format\n  231                  break;\n  232              case 96:\n  233:                 pBmp->mFormat = isRGB32fSupported(pDevice) ? ResourceFormat::RGB32Float : ResourceFormat::RGBA32Float;     // 3xfloat32 HDR format\n  234                  break;\n  235              case 64:\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/AABB.h:\n   35      struct BoundingBox\n   36      {\n   37:         float3 center; ///< Center position of the bounding box\n   38:         float3 extent; ///< Half length of each side. Essentially the coordinates to the max corner relative to the center.\n   39  \n   40          /** Checks whether two bounding boxes are equivalent in position and size\n   ..\n   51          BoundingBox transform(const glm::mat4& mat) const\n   52          {\n   53:             float3 min = center - extent;\n   54:             float3 max = center + extent;\n   55  \n   56:             float3 xa = float3(mat[0] * min.x);\n   57:             float3 xb = float3(mat[0] * max.x);\n   58:             float3 xMin = glm::min(xa, xb);\n   59:             float3 xMax = glm::max(xa, xb);\n   60  \n   61:             float3 ya = float3(mat[1] * min.y);\n   62:             float3 yb = float3(mat[1] * max.y);\n   63:             float3 yMin = glm::min(ya, yb);\n   64:             float3 yMax = glm::max(ya, yb);\n   65  \n   66:             float3 za = float3(mat[2] * min.z);\n   67:             float3 zb = float3(mat[2] * max.z);\n   68:             float3 zMin = glm::min(za, zb);\n   69:             float3 zMax = glm::max(za, zb);\n   70  \n   71  \n   72:             float3 newMin = xMin + yMin + zMin + float3(mat[3]);\n   73:             float3 newMax = xMax + yMax + zMax + float3(mat[3]);\n   74  \n   75              return BoundingBox::fromMinMax(newMin, newMax);\n   ..\n   79              \\return Minimum position\n   80          */\n   81:         float3 getMinPos() const\n   82          {\n   83              return center - extent;\n   ..\n   87              \\return Maximum position\n   88          */\n   89:         float3 getMaxPos() const\n   90          {\n   91              return center + extent;\n   ..\n   95              \\return X,Y and Z lengths of the bounding box\n   96          */\n   97:         float3 getSize() const\n   98          {\n   99              return extent * 2.0f;\n  ...\n  105              \\return A bounding box\n  106          */\n  107:         static BoundingBox fromMinMax(const float3& min, const float3& max)\n  108          {\n  109              BoundingBox box;\n  110:             box.center = (max + min) * float3(0.5f);\n  111:             box.extent = (max - min) * float3(0.5f);\n  112              return box;\n  113          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/AABB.slang:\n   32  struct AABB\n   33  {\n   34:     float3 minPoint;    ///< Minimum point.\n   35:     float3 maxPoint;    ///< Maximum point. If any minPoint > maxPoint the box is invalid.\n   36  \n   37      /** Set box to single point.\n   38      */\n   39:     [mutating] void set(float3 p)\n   40      {\n   41          minPoint = p;\n   ..\n   46          Note if min > max in any component the box is invalid.\n   47      */\n   48:     [mutating] void set(float3 _min, float3 _max)\n   49      {\n   50          minPoint = _min;\n   ..\n   69      /** Grows the box to include the point p.\n   70      */\n   71:     [mutating] void include(float3 p)\n   72      {\n   73          minPoint = min(minPoint, p);\n   ..\n   86          \\return True if p is in the box (inclusive test), false if outside or box invalid.\n   87      */\n   88:     bool contains(float3 p)\n   89      {\n   90          return valid() && all(p >= minPoint && p <= maxPoint);\n   ..\n   94          \\return Center of the box if valid, undefined otherwise.\n   95      */\n   96:     float3 center()\n   97      {\n   98          return (minPoint + maxPoint) * 0.5f;\n   ..\n  102          \\return Size of the box if valid, undefined otherwise.\n  103      */\n  104:     float3 extent()\n  105      {\n  106          return maxPoint - minPoint;\n  ...\n  112      float area()\n  113      {\n  114:         float3 e = extent();\n  115          return (e.x * e.y + e.x * e.z + e.y * e.z) * 2.f;\n  116      }\n  ...\n  121      float volume()\n  122      {\n  123:         float3 e = extent();\n  124          return e.x * e.y * e.z;\n  125      }\n  ...\n  147          \\return Minimum distance between between point and box, or 0 if the point lies inside. The result is undefined if the box is invalid.\n  148      */\n  149:     float minDistance(float3 p)\n  150      {\n  151:         float3 d1 = minPoint - p;\n  152:         float3 d2 = p - maxPoint;\n  153:         float3 d = max(max(d1, d2), 0.f);\n  154          return length(d);\n  155      }\n  ...\n  162      float minDistance(const AABB other)\n  163      {\n  164:         float3 d1 = minPoint - other.maxPoint;\n  165:         float3 d2 = other.minPoint - maxPoint;\n  166:         float3 d = max(max(d1, d2), 0.f);\n  167          return length(d);\n  168      }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/BBox.h:\n   38      struct BBox\n   39      {\n   40:         float3 minPoint = float3(std::numeric_limits<float>::infinity());     // +inf\n   41:         float3 maxPoint = float3(-std::numeric_limits<float>::infinity());    // -inf\n   42  \n   43          BBox() {}\n   44:         BBox(const glm::float3& p) : minPoint(p), maxPoint(p) {}\n   45  \n   46          /** Returns true if bounding box is valid (all dimensions zero or larger). */\n   ..\n   48  \n   49          /** Returns the dimensions of the bounding box. */\n   50:         float3 dimensions() const { return maxPoint - minPoint; }\n   51  \n   52          /** Returns the centroid of the bounding box. */\n   53:         float3 centroid() const { return (minPoint + maxPoint) * 0.5f; }\n   54  \n   55          /** Returns the surface area of the bounding box. */\n   56          float surfaceArea() const\n   57          {\n   58:             const float3 dims = dimensions();\n   59              return 2.0f * (dims.x * dims.y + dims.y * dims.z + dims.x * dims.z);\n   60          }\n   ..\n   71              }\n   72  \n   73:             const float3 dims = glm::max(float3(epsilon), dimensions());\n   74              return dims.x * dims.y * dims.z;\n   75          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/FalcorMath.h:\n   44          \\param[in] to The destination vector\n   45      */\n   46:     inline glm::quat createQuaternionFromVectors(const float3& from, const float3& to)\n   47      {\n   48          glm::quat quat;\n   49:         float3 nFrom = glm::normalize(from);\n   50:         float3 nTo = glm::normalize(to);\n   51  \n   52          float dot = glm::dot(nFrom, nTo);\n   ..\n   56              float angle = acosf(dot);\n   57  \n   58:             float3 cross = glm::cross(nFrom, nTo);\n   59:             float3 axis = glm::normalize(cross);\n   60  \n   61              quat = glm::angleAxis(angle, axis);\n   ..\n   71          \\return World space ray direction coming from the camera position in the direction of the mouse position\n   72      */\n   73:     inline float3 mousePosToWorldRay(const float2& mousePos, const glm::mat4& viewMat, const glm::mat4& projMat)\n   74      {\n   75          // Convert from [0, 1] to [-1, 1] range\n   ..\n  102          \\return 3x3 rotation matrix.\n  103      */\n  104:     inline glm::mat3 createMatrixFromBasis(const float3& forward, const float3& up)\n  105      {\n  106:         float3 f = glm::normalize(forward);\n  107:         float3 s = glm::normalize(glm::cross(up, forward));\n  108:         float3 u = glm::cross(f, s);\n  109  \n  110          return glm::mat3(s, u, f);\n  ...\n  117          \\return 3x3 rotation matrix.\n  118      */\n  119:     inline glm::mat3 createMatrixFromLookAt(const float3& position, const float3& target, const float3& up)\n  120      {\n  121          return createMatrixFromBasis(target - position, up);\n  ...\n  125          \\param xy The 2D coordinate. if x and y are in the [0,1) range, then a z value can be calculate. Otherwise, xy is normalized and z is zero.\n  126      */\n  127:     inline float3 project2DCrdToUnitSphere(float2 xy)\n  128      {\n  129          float xyLengthSquared = glm::dot(xy, xy);\n  ...\n  138              xy = glm::normalize(xy);\n  139          }\n  140:         return float3(xy.x, xy.y, z);\n  141      }\n  142  \n  ...\n  194      }\n  195  \n  196:     inline float3 hammersleyUniform(uint32_t i, uint32_t n)\n  197      {\n  198          float2 uv((float)i / (float)n, radicalInverse(i));\n  ...\n  202          float t = 1.0f - uv.x;\n  203          float s = sqrt(1.0f - t * t);\n  204:         return float3(s * cos(phi), s * sin(phi), t);\n  205      }\n  206  \n  207:     inline float3 hammersleyCosine(uint32_t i, uint32_t n)\n  208      {\n  209          float2 uv((float)i / (float)n, radicalInverse(i));\n  ...\n  213          float t = sqrt(1.0f - uv.x);\n  214          float s = sqrt(1.0f - t * t);\n  215:         return float3(s * cos(phi), s * sin(phi), t);\n  216      }\n  217  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/MathHelpers.slang:\n   61      \\return Spherical coordinates (theta,phi).\n   62  */\n   63: float2 cartesian_to_spherical_unorm(float3 p)\n   64  {\n   65      p = normalize(p);\n   ..\n   76      \\return Spherical coordinates (theta,phi).\n   77  */\n   78: float2 cartesian_to_spherical_rad(float3 p)\n   79  {\n   80      p = normalize(p);\n   ..\n   90      \\return Position in latitude-longitude map in [0,1] for each component.\n   91  */\n   92: float2 world_to_latlong_map(float3 dir)\n   93  {\n   94:     float3 p = normalize(dir);\n   95      float2 uv;\n   96      uv.x = atan2(p.x, -p.z) * M_1_2PI + 0.5f;\n   ..\n  126      \\return Position in octahedral map in [-1,1] for each component.\n  127  */\n  128: float2 ndir_to_oct_snorm(float3 n)\n  129  {\n  130      // Project the sphere onto the octahedron (|x|+|y|+|z| = 1) and then onto the xy-plane.\n  ...\n  138      \\return Position in octahedral map in [0,1] for each component.\n  139  */\n  140: float2 ndir_to_oct_unorm(float3 n)\n  141  {\n  142      return ndir_to_oct_snorm(n) * 0.5f + 0.5f;\n  ...\n  147      \\return Normalized direction.\n  148  */\n  149: float3 oct_to_ndir_snorm(float2 p)\n  150  {\n  151:     float3 n = float3(p.xy, 1.0 - abs(p.x) - abs(p.y));\n  152      n.xy = (n.z < 0.0) ? oct_wrap(n.xy) : n.xy;\n  153      return normalize(n);\n  ...\n  158      \\return Normalized direction.\n  159  */\n  160: float3 oct_to_ndir_unorm(float2 p)\n  161  {\n  162      return oct_to_ndir_snorm(p * 2.f - 1.f);\n  ...\n  167      \\return Position in octahedral map in [0,1] for each component.\n  168  */\n  169: float2 ndir_to_oct_equal_area_unorm(float3 n)\n  170  {\n  171      // Use atan2 to avoid explicit div-by-zero check in atan(y/x).\n  ...\n  189      \\return Normalized direction.\n  190  */\n  191: float3 oct_to_ndir_equal_area_unorm(float2 p)\n  192  {\n  193      p = p * 2.f - 1.f;\n  ...\n  207      float z = sign(d) * (1.f - r*r);\n  208  \n  209:     return float3(x, y, z);\n  210  }\n  211  \n  ...\n  234      \\return Sampled point on the unit sphere.\n  235  */\n  236: float3 sample_sphere(float2 u)\n  237  {\n  238      float phi = M_2PI * u.y;\n  239      float cosTheta = 1.0f - 2.0f * u.x;\n  240      float sinTheta = sqrt(max(0.0f, 1.0f - cosTheta * cosTheta));\n  241:     return float3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);\n  242  }\n  243  \n  ...\n  269      \\return Sampled direction in the local frame (+z axis up).\n  270  */\n  271: float3 sample_cosine_hemisphere_concentric(float2 u, out float pdf)\n  272  {\n  273      float2 d = sample_disk_concentric(u);\n  274      float z = sqrt(max(0.f, 1.f - dot(d, d)));\n  275      pdf = z * M_1_PI;\n  276:     return float3(d, z);\n  277  }\n  278  \n  ...\n  282      \\return Sampled direction in the local frame (+z axis up).\n  283  */\n  284: float3 sample_cosine_hemisphere_polar(float2 u, out float pdf)\n  285  {\n  286:     float3 p;\n  287      float r = sqrt(u.x);\n  288      float phi = M_2PI * u.y;\n  ...\n  299      \\return Sampled direction in the local frame (+z axis up).\n  300  */\n  301: float3 sample_cosine_hemisphere_polar(float2 u)\n  302  {\n  303      float pdf;\n  ...\n  309      \\return Barycentric coordinates (1-u-v,u,v) of the sampled point.\n  310  */\n  311: float3 sample_triangle(float2 u)\n  312  {\n  313      float su = sqrt(u.x);\n  314      float2 b = float2(1.f - su, u.y * su);\n  315:     return float3(1.f - b.x - b.y, b.x, b.y);\n  316  }\n  317  \n  ...\n  324  /** Inverts a 3x3 matrix.\n  325  */\n  326: float3x3 inverse(float3x3 M)\n  327  {\n  328:     float3x3 inv;\n  329      float invdet = 1.0f / determinant(M);\n  330      inv[0][0] = (M[1][1] * M[2][2] - M[2][1] * M[1][2]) * invdet;\n  ...\n  343      This can be used to invent a tangent frame for meshes that don't have real tangents/bitangents.\n  344  */\n  345: float3 perp_stark(float3 u)\n  346  {\n  347      // TODO: Validate this and look at numerical precision etc. Are there better ways to do it?\n  348:     float3 a = abs(u);\n  349      uint uyx = (a.x - a.y) < 0 ? 1 : 0;\n  350      uint uzx = (a.x - a.z) < 0 ? 1 : 0;\n  ...\n  353      uint ym = (1 ^ xm) & uzy;\n  354      uint zm = 1 ^ (xm | ym);  // 1 ^ (xm & ym)\n  355:     float3 v = cross(u, float3(xm, ym, zm));\n  356      return v;\n  357  }\n  ...\n  367      \\param[out] cosTheta Cosine of the angle from the central direction to the cone edge. If the AABB can't be bounded we return -1 (max cone).\n  368  */\n  369: void boundBoxSubtendedConeAngleCenter(const float3 origin, const float3 aabbMin, const float3 aabbMax,\n  370:                                       out float3 coneDir, out float sinTheta, out float cosTheta)\n  371  {\n  372:     const float3 center = (aabbMax + aabbMin) * 0.5f;\n  373:     const float3 extent = (aabbMax - aabbMin) * 0.5f;\n  374:     const float3 dir = center - origin;         // dir = Central cone direction (unnormalized)\n  375      const float extSqr = dot(extent, extent);   // extSqr = squared maximum extent\n  376      const float distSqr = dot(dir, dir);        // distSqr = squared distance to AABB center\n  ...\n  380      // AABB has eight corners, located at p = center +- e[i] for i=1..4.\n  381      // We use the absolute value of the dot product below to avoid having to test all eight.\n  382:     float3 e[4];\n  383:     e[0] = float3(extent.x, extent.y, extent.z);\n  384:     e[1] = float3(extent.x, extent.y, -extent.z);\n  385:     e[2] = float3(extent.x, -extent.y, extent.z);\n  386:     e[3] = float3(extent.x, -extent.y, -extent.z);\n  387  \n  388      cosTheta = 1.f;\n  ...\n  435      \\param[out] cosTheta cosine of the angle.\n  436  */\n  437: void boundBoxSubtendedConeAngleAverage(float3 origin, float3 aabbMin, float3 aabbMax,\n  438:                                        out float3 coneDir, out float sinTheta, out float cosTheta)\n  439  {\n  440      if (all(origin >= aabbMin && origin <= aabbMax))\n  441      {\n  442          // |origin| is inside the AABB.\n  443:         coneDir = float3(0.f, 0.f, 0.f);\n  444          sinTheta = 0.f;\n  445          cosTheta = -1.f;\n  ...\n  448  \n  449      // Compute the average vector to each of the bounding box corners.\n  450:     float3 dirSum = float3(0.f, 0.f, 0.f);\n  451      // Workaround slang/fxc bug (https://github.com/NVIDIAGameWorks/Falcor/issues/164). This can go away when we always use dxc.\n  452  #if 0\n  ...\n  457  #endif\n  458      {\n  459:         const float3 corner = float3((i & 1) ? aabbMin.x : aabbMax.x,\n  460                                       (i & 2) ? aabbMin.y : aabbMax.y,\n  461                                       (i & 4) ? aabbMin.z : aabbMax.z);\n  ...\n  474  #endif\n  475      {\n  476:         const float3 corner = float3((i & 1) ? aabbMin.x : aabbMax.x,\n  477                                       (i & 2) ? aabbMin.y : aabbMax.y,\n  478                                       (i & 4) ? aabbMin.z : aabbMax.z);\n  ...\n  492      \\param[out] cosTheta cosine of that angle.\n  493  */\n  494: void boundSphereSubtendedConeAngle(float3 center, float radius, out float sinTheta, out float cosTheta)\n  495  {\n  496      const float centerDistance2 = dot(center, center);\n  ...\n  517      \\return Squared minimum distance between p and the triangle.\n  518  */\n  519: float computeSquaredMinDistanceToTriangle(const float3 vertices[3], const float3 p)\n  520  {\n  521      // Project p onto the plane of the triangle (the result is independent of triangle winding).\n  522:     const float3 n = normalize(cross(vertices[1] - vertices[0], vertices[2] - vertices[0]));\n  523      const float projDistance = dot(n, (p - vertices[0]));\n  524:     const float3 pProj = p - projDistance * n;\n  525  \n  526      // Edge tests to compute signed distance to each edge.\n  527      // Positive result means the projected point is \"inside\" the edge.\n  528      // With flipped winding, the edges are flipped but n is also flipped so it still works.\n  529:     const float3 edges[3] = {\n  530          normalize(vertices[1] - vertices[0]),\n  531          normalize(vertices[2] - vertices[1]),\n  ...\n  537      for (uint i = 0u; i < 3u; ++i)\n  538      {\n  539:         const float3 edgeN = cross(n, edges[i]);\n  540          const float edgeProjDistance = dot(edgeN, pProj - vertices[i]);\n  541          if (edgeProjDistance >= 0.0f)\n  ...\n  545          else\n  546          {\n  547:             const float3 vec = pProj - vertices[i];\n  548              sqrPlanarDistance = min(edgeProjDistance * edgeProjDistance, sqrPlanarDistance);\n  549          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/PackedFormats.slang:\n   31  /** Encode a normal packed as 2x 16-bit snorms in the octahedral mapping.\n   32  */\n   33: uint encodeNormal2x16(float3 normal)\n   34  {\n   35      float2 octNormal = ndir_to_oct_snorm(normal);\n   ..\n   39  /** Decode a normal packed as 2x 16-bit snorms in the octahedral mapping.\n   40  */\n   41: float3 decodeNormal2x16(uint packedNormal)\n   42  {\n   43      float2 octNormal = unpackSnorm2x16(packedNormal);\n   ..\n   47  /** Encode a normal packed as 3x 16-bit snorms. Note: The high 16 bits of the second dword are unused.\n   48  */\n   49: uint2 encodeNormal3x16(float3 normal)\n   50  {\n   51      uint2 packedNormal;\n   ..\n   57  /** Decode a normal packed as 3x 16-bit snorms. Note: The high 16 bits of the second dword are unused.\n   58  */\n   59: float3 decodeNormal3x16(uint2 packedNormal)\n   60  {\n   61:     float3 normal;\n   62      normal.xy = unpackSnorm2x16(packedNormal.x);\n   63      normal.z = unpackSnorm16(packedNormal.y);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/SphericalHarmonics.slang:\n   42      \\return Evaluated SH basis function.\n   43  */\n   44: float eval_SH(uint idx, float3 p)\n   45  {\n   46      // Standard real SH basis. See https://en.wikipedia.org/wiki/Table_of_spherical_harmonics\n   ..\n   80      \\return Evaluated SH basis function.\n   81  */\n   82: float eval_SH(int l, int m, float3 p)\n   83  {\n   84      return eval_SH(get_SH_index(l, m), p);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/Vector.h:\n   35  {\n   36      using float2 = glm::vec2;\n   37:     using float3 = glm::vec3;\n   38      using float4 = glm::vec4;\n   39  \n   ..\n   51  \n   52      inline std::string to_string(const float2& v) { return \"float2(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \")\"; }\n   53:     inline std::string to_string(const float3& v) { return \"float3(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \")\"; }\n   54      inline std::string to_string(const float4& v) { return \"float4(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \",\" + std::to_string(v.w) + \")\"; }\n   55  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Sampling/SampleGenerator.slang:\n   86  }\n   87  \n   88: float3 sampleNext3D(inout SampleGenerator sg)\n   89  {\n   90:     float3 sample;\n   91:     // Don't use the float3 initializer to ensure consistent order of evaluation.\n   92      sample.x = sampleNext1D(sg);\n   93      sample.y = sampleNext1D(sg);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Scripting/ScriptBindings.cpp:\n   98          addVecType<bool4, bool, bool, bool, bool>(m, \"bool4\");\n   99  \n  100:         // float2, float3, float4\n  101          addVecType<float2, float, float>(m, \"float2\");\n  102:         addVecType<float3, float, float, float>(m, \"float3\");\n  103          addVecType<float4, float, float, float, float>(m, \"float4\");\n  104  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Scripting/Scripting.cpp:\n   70                  falcorDict[name] = float2(floatVec[0], floatVec[1]); break;\n   71              case 3:\n   72:                 falcorDict[name] = float3(floatVec[0], floatVec[1], floatVec[2]); break;\n   73              case 4:\n   74                  falcorDict[name] = float4(floatVec[0], floatVec[1], floatVec[2], floatVec[3]); break;\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/DebugDrawer.cpp:\n   38  }\n   39  \n   40: void DebugDrawer::addLine(const float3& a, const float3& b) {\n   41      if (mVertexData.capacity() - mVertexData.size() >= 2) {\n   42          mVertexData.push_back({a, mCurrentColor});\n   ..\n   54  \n   55  void DebugDrawer::addBoundingBox(const BoundingBox& aabb) {\n   56:     float3 min = aabb.center - aabb.extent;\n   57:     float3 max = aabb.center + aabb.extent;\n   58  \n   59:     Quad bottomFace = { min, float3(max.x, min.y, min.z), float3(max.x, min.y, max.z), float3(min.x, min.y, max.z) };\n   60      addQuad(bottomFace);\n   61  \n   62:     Quad topFace = { float3(min.x, max.y, min.z), float3(max.x, max.y, min.z), max, float3(min.x, max.y, max.z) };\n   63      addQuad(topFace);\n   64  \n   ..\n   69  }\n   70  \n   71: DebugDrawer::Quad buildQuad(const float3& center, const float3& up, const float3& right) {\n   72      // Length of each quad side\n   73      static const float size = 0.08f;\n   74  \n   75      // Half widths based on size constant\n   76:     float3 upOffset = glm::normalize(up) * size / 2.0f;\n   77:     float3 rightOffset = glm::normalize(right) * size / 2.0f;\n   78  \n   79      // CCW from top left\n   ..\n   89  //     DebugDrawer::Quad createQuadForFrame(const ObjectPath::Frame& currFrame, const ObjectPath::Frame& nextFrame)\n   90  //     {\n   91: //         float3 forward = nextFrame.position - currFrame.position;\n   92: //         float3 right = glm::cross(forward, currFrame.up);\n   93: //         float3 up = glm::cross(right, forward);\n   94  //\n   95  //         return buildQuad(currFrame.position, up, right);\n   ..\n   99  //     DebugDrawer::Quad createQuadForFrame(const ObjectPath::Frame& prevFrame, const ObjectPath::Frame& currFrame, const ObjectPath::Frame& nextFrame)\n  100  //     {\n  101: //         float3 lastToCurrFoward = currFrame.position - prevFrame.position;\n  102: //         float3 lastToCurrRight = glm::normalize(glm::cross(lastToCurrFoward, prevFrame.up));\n  103: //         float3 lastToCurrUp = glm::normalize(glm::cross(lastToCurrRight, lastToCurrFoward));\n  104  //\n  105: //         float3 currToNextFoward = nextFrame.position - currFrame.position;\n  106  //\n  107  //         // If curr and next are the same, use the direction from prev to curr\n  ...\n  111  //         }\n  112  //\n  113: //         float3 currToNextRight = glm::normalize(glm::cross(currToNextFoward, currFrame.up));\n  114: //         float3 currToNextUp = glm::normalize(glm::cross(currToNextRight, currToNextFoward));\n  115  //\n  116  //         // Half vector between two direction normals\n  117: //         float3 midUp = (lastToCurrUp + currToNextUp) / 2.0f;\n  118: //         float3 midRight = (lastToCurrRight + currToNextRight) / 2.0f;\n  119  //\n  120  //         return buildQuad(currFrame.position, midUp, midRight);\n  ...\n  199      VertexBufferLayout::SharedPtr pBufferLayout = VertexBufferLayout::create();\n  200      pBufferLayout->addElement(\"POSITION\", 0, ResourceFormat::RGB32Float, 1, 0);\n  201:     pBufferLayout->addElement(\"COLOR\", sizeof(float3), ResourceFormat::RGB32Float, 1, 1);\n  202  \n  203      VertexLayout::SharedPtr pVertexLayout = VertexLayout::create();\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/DebugDrawer.h:\n   51      static const uint32_t kPathDetail = 10;         ///< Segments between keyframes\n   52  \n   53:     using Quad = std::array<float3, 4>;\n   54  \n   55      /** Create a new object for drawing debug geometry.\n   ..\n   61      /** Sets the color for following geometry\n   62      */\n   63:     void setColor(const float3& color) { mCurrentColor = color; }\n   64  \n   65      /** Adds a line segment\n   66      */\n   67:     void addLine(const float3& a, const float3& b);\n   68  \n   69      /** Adds a quad described by four corner points\n   ..\n   97      DebugDrawer(std::shared_ptr<Device> pDevice, uint32_t maxVertices);\n   98  \n   99:     float3 mCurrentColor;\n  100  \n  101      struct LineVertex {\n  102:         float3 position;\n  103:         float3 color;\n  104      };\n  105  \n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.cpp:\n  112          bool addButton(const char label[], bool sameLine = false);\n  113          bool addRadioButtons(const Gui::RadioButtonGroup& buttons, uint32_t& activeID);\n  114:         bool addDirectionWidget(const char label[], float3& direction);\n  115          bool addCheckbox(const char label[], bool& var, bool sameLine = false);\n  116          bool addCheckbox(const char label[], int& var, bool sameLine = false);\n  ...\n  126          void addTooltip(const char tip[], bool sameLine = true);\n  127  \n  128:         bool addRgbColor(const char label[], float3& var, bool sameLine = false);\n  129          bool addRgbaColor(const char label[], float4& var, bool sameLine = false);\n  130  \n  ...\n  471      }\n  472  \n  473:     bool GuiImpl::addDirectionWidget(const char label[], float3& direction) {\n  474:         float3 dir = direction;\n  475          bool b = addVecVar(label, dir, -1.f, 1.f, 0.001f, false, \"%.3f\");\n  476          direction = glm::normalize(dir);\n  ...\n  574      }\n  575  \n  576:     bool GuiImpl::addRgbColor(const char label[], float3& var, bool sameLine) {\n  577          if (sameLine) ImGui::SameLine();\n  578          return ImGui::ColorEdit3(label, glm::value_ptr(var));\n  ...\n 1021      }\n 1022  \n 1023:     bool Gui::Widgets::direction(const char label[], float3& direction) {\n 1024          return mpGui ? mpGui->mpWrapper->addDirectionWidget(label, direction) : false;\n 1025      }\n ....\n 1101      add_vecVar_type(uint4);\n 1102      add_vecVar_type(float2);\n 1103:     add_vecVar_type(float3);\n 1104      add_vecVar_type(float4);\n 1105  \n ....\n 1122      add_vecSlider_type(uint4);\n 1123      add_vecSlider_type(float2);\n 1124:     add_vecSlider_type(float3);\n 1125      add_vecSlider_type(float4);\n 1126  \n ....\n 1147      }\n 1148  \n 1149:     bool Gui::Widgets::rgbColor(const char label[], float3& var, bool sameLine) {\n 1150          return mpGui ? mpGui->mpWrapper->addRgbColor(label, var, sameLine) : false;\n 1151      }\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.h:\n  154                  \\return true if the value changed, otherwise false\n  155              */\n  156:             bool direction(const char label[], float3& direction);\n  157  \n  158              /** Adds a UI widget for multiple checkboxes.\n  ...\n  221                  \\return true if the value changed, otherwise false\n  222              */\n  223:             bool rgbColor(const char label[], float3& var, bool sameLine = false);\n  224  \n  225              /** Adds an RGBA color UI widget.\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.cpp:\n   65      bool init = false;\n   66      TextRenderer::Flags flags = TextRenderer::Flags::Shadowed;\n   67:     float3 color = float3(1, 1, 1);\n   68      Buffer::SharedPtr pVb;\n   69      RasterPass::SharedPtr pPass;\n   ..\n  132  \n  133  \n  134: const float3& TextRenderer::getColor() { return gTextData.color; }\n  135  \n  136: void TextRenderer::setColor(const float3& color) { gTextData.color = color; }\n  137  \n  138  TextRenderer::Flags TextRenderer::getFlags() { return gTextData.flags; }\n  ...\n  187  void TextRenderer::render(RenderContext* pRenderContext, const std::string& text, const Fbo::SharedPtr& pDstFbo, float2 pos) {\n  188      if (is_set(gTextData.flags, TextRenderer::Flags::Shadowed)) {\n  189:         float3 oldColor = getColor();\n  190:         setColor(float3(0));\n  191          renderText(pRenderContext, text, pDstFbo, pos + float2(1));\n  192          setColor(oldColor);\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.h:\n   66          \\return current color The text color\n   67      */\n   68:     static const float3& getColor();\n   69  \n   70      /** Set the color of the text being rendered\n   71          \\param[in] color The text color\n   72      */\n   73:     static void setColor(const float3& color);\n   74  \n   75      /** Get the active flags\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.slang:\n   30  {\n   31  \tfloat4x4 gvpTransform;\n   32: \tfloat3 gFontColor;\n   33  };\n   34  \n\n1173 matches across 99 files\n\n\nSearching 458 files for \"VERTEX_PACKED_NORMAL_BITANGENT_NAME\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/VertexAttrib.slangh:\n   43  \n   44  #define VERTEX_POSITION_NAME                \"POSITION\"\n   45: #define VERTEX_PACKED_NORMAL_BITANGENT_NAME \"PACKED_NORMAL_BITANGENT\"\n   46  #define VERTEX_TEXCOORD_NAME                \"TEXCOORD\"\n   47  #define VERTEX_PREV_POSITION_NAME           \"PREV_POSITION\"\n\n1 match in 1 file\n\n\nSearching 458 files for \"PACKED_NORMAL_BITANGENT\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/Raster.slang:\n   34      // Packed vertex attributes, see PackedStaticVertexData\n   35      float3 pos                      : POSITION;\n   36:     float3 packedNormalBitangent    : PACKED_NORMAL_BITANGENT;\n   37      float2 texC                     : TEXCOORD;\n   38  \n\n/home/max/dev/Falcor/src/Falcor/Scene/VertexAttrib.slangh:\n   43  \n   44  #define VERTEX_POSITION_NAME                \"POSITION\"\n   45: #define VERTEX_PACKED_NORMAL_TANGENT_NAME   \"PACKED_NORMAL_BITANGENT\"\n   46  #define VERTEX_TEXCOORD_NAME                \"TEXCOORD\"\n   47  #define VERTEX_PREV_POSITION_NAME           \"PREV_POSITION\"\n\n2 matches across 2 files\n\n\nSearching 458 files for \"PACKED_NORMAL_BITANGENT\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/Raster.slang:\n   34      // Packed vertex attributes, see PackedStaticVertexData\n   35      float3 pos                      : POSITION;\n   36:     float3 packedNormalBitangent    : PACKED_NORMAL_BITANGENT;\n   37      float2 texC                     : TEXCOORD;\n   38  \n\n1 match in 1 file\n\n\nSearching 458 files for \"packedNormalBitangent\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp:\n  303          VertexBufferLayout::SharedPtr pStaticLayout = VertexBufferLayout::create();\n  304          pStaticLayout->addElement(VERTEX_POSITION_NAME, offsetof(PackedStaticVertexData, position), ResourceFormat::RGB32Float, 1, VERTEX_POSITION_LOC);\n  305:         pStaticLayout->addElement(VERTEX_PACKED_NORMAL_TANGENT_NAME, offsetof(PackedStaticVertexData, packedNormalBitangent), ResourceFormat::RGB32Float, 1, VERTEX_PACKED_NORMAL_TANGENT_LOC);\n  306          pStaticLayout->addElement(VERTEX_TEXCOORD_NAME, offsetof(PackedStaticVertexData, texCrd), ResourceFormat::RG32Float, 1, VERTEX_TEXCOORD_LOC);\n  307          pLayout->addBufferLayout(Scene::kStaticDataBufferIndex, pStaticLayout);\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneTypes.slang:\n   80  {\n   81      float3 position;\n   82:     float3 packedNormalBitangent; // 3xfp16 each\n   83      float2 texCrd;\n   84  \n   ..\n   93          //auto asfloat = [](uint32_t v) { return std::bit_cast<float>(v); }; // TODO: Not yet available in VS2019\n   94  \n   95:         packedNormalBitangent.x = asfloat(glm::packHalf2x16({ v.normal.x, v.normal.y }));\n   96:         packedNormalBitangent.y = asfloat(glm::packHalf2x16({ v.normal.z, v.bitangent.x }));\n   97:         packedNormalBitangent.z = asfloat(glm::packHalf2x16({ v.bitangent.y, v.bitangent.z }));\n   98      }\n   99  \n  ...\n  107          uint3 b = f32tof16(v.bitangent);\n  108  \n  109:         packedNormalBitangent.x = asfloat((n.y << 16) | n.x);\n  110:         packedNormalBitangent.y = asfloat((b.x << 16) | n.z);\n  111:         packedNormalBitangent.z = asfloat((b.z << 16) | b.y);\n  112      }\n  113  \n  ...\n  119  \n  120          float3 n;\n  121:         n.x = f16tof32(asuint(packedNormalBitangent.x) & 0xffff);\n  122:         n.y = f16tof32(asuint(packedNormalBitangent.x) >> 16);\n  123:         n.z = f16tof32(asuint(packedNormalBitangent.y) & 0xffff);\n  124          v.normal = normalize(n);\n  125  \n  126          float3 b;\n  127:         b.x = f16tof32(asuint(packedNormalBitangent.y) >> 16);\n  128:         b.y = f16tof32(asuint(packedNormalBitangent.z) & 0xffff);\n  129:         b.z = f16tof32(asuint(packedNormalBitangent.z) >> 16);\n  130          v.bitangent = normalize(b);\n  131  \n\n14 matches across 2 files\n\n\nSearching 458 files for \"packedNormalBitangent\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneTypes.slang:\n   80  {\n   81      float3 position;\n   82:     float3 packedNormalBitangent; // 3xfp16 each\n   83      float2 texCrd;\n   84  \n   ..\n   93          //auto asfloat = [](uint32_t v) { return std::bit_cast<float>(v); }; // TODO: Not yet available in VS2019\n   94  \n   95:         packedNormalBitangent.x = asfloat(glm::packHalf2x16({ v.normal.x, v.normal.y }));\n   96:         packedNormalBitangent.y = asfloat(glm::packHalf2x16({ v.normal.z, v.bitangent.x }));\n   97:         packedNormalBitangent.z = asfloat(glm::packHalf2x16({ v.bitangent.y, v.bitangent.z }));\n   98      }\n   99  \n  ...\n  107          uint3 b = f32tof16(v.bitangent);\n  108  \n  109:         packedNormalBitangent.x = asfloat((n.y << 16) | n.x);\n  110:         packedNormalBitangent.y = asfloat((b.x << 16) | n.z);\n  111:         packedNormalBitangent.z = asfloat((b.z << 16) | b.y);\n  112      }\n  113  \n  ...\n  119  \n  120          float3 n;\n  121:         n.x = f16tof32(asuint(packedNormalBitangent.x) & 0xffff);\n  122:         n.y = f16tof32(asuint(packedNormalBitangent.x) >> 16);\n  123:         n.z = f16tof32(asuint(packedNormalBitangent.y) & 0xffff);\n  124          v.normal = normalize(n);\n  125  \n  126          float3 b;\n  127:         b.x = f16tof32(asuint(packedNormalBitangent.y) >> 16);\n  128:         b.y = f16tof32(asuint(packedNormalBitangent.z) & 0xffff);\n  129:         b.z = f16tof32(asuint(packedNormalBitangent.z) >> 16);\n  130          v.bitangent = normalize(b);\n  131  \n\n13 matches in 1 file\n\n\nSearching 458 files for \"packedNormalBitangent\" (case sensitive)\n\n0 matches\n\nSearching 458 files for \"bitangentW\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightHelpers.slang:\n  105      // TODO: Should use light.dirW.\n  106      float3 tangentW = mul(float4(1.f, 0.f, 0.f, 0.f), light.transMat).xyz;\n  107:     float3 bitangentW = mul(float4(0.f, 1.f, 0.f, 0.f), light.transMat).xyz;\n  108      // TODO: normalW is not correctly oriented for mesh instances that have flipped triangle winding.\n  109:     ls.normalW = normalize(cross(tangentW, bitangentW));\n  110  \n  111      return finalizeAreaLightSample(shadingPosW, light, ls);\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.cpp:\n   42              { \"posW\",           \"gWorldPosition\",             \"World-space position (xyz) and foreground flag (w)\"       },\n   43              { \"normalW\",        \"gWorldShadingNormal\",        \"World-space shading normal (xyz)\"                         },\n   44:             { \"bitangentW\",     \"gWorldShadingBitangent\",     \"World-space shading bitangent (xyz)\", true /* optional */ },\n   45              { \"faceNormalW\",    \"gWorldFaceNormal\",           \"Face normal in world space (xyz)\",                        },\n   46              { kViewDirInput,    \"gWorldView\",                 \"World-space view direction (xyz)\", true /* optional */    },\n\n/home/max/dev/Falcor/src/Falcor/Scene/Raster.slang:\n   84      vOut.texC = vIn.texC;\n   85      vOut.normalW = mul(vIn.unpack().normal, gScene.getInverseTransposeWorldMatrix(vIn.meshInstanceID));\n   86:     vOut.bitangentW = mul(vIn.unpack().bitangent, (float3x3)gScene.getWorldMatrix(vIn.meshInstanceID));\n   87  \n   88      float4 prevPosW = mul(float4(vIn.prevPos, 1.f), gScene.getPrevWorldMatrix(vIn.meshInstanceID));\n   ..\n   97      v.posW = vsOut.posW;\n   98      v.normalW = vsOut.normalW;\n   99:     v.bitangentW = vsOut.bitangentW;\n  100      v.texC = vsOut.texC;\n  101      v.faceNormalW = faceNormalW;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.slang:\n  297          v.normalW += vtx[2].normal * barycentrics[2];\n  298  \n  299:         v.bitangentW += vtx[0].bitangent * barycentrics[0];\n  300:         v.bitangentW += vtx[1].bitangent * barycentrics[1];\n  301:         v.bitangentW += vtx[2].bitangent * barycentrics[2];\n  302  \n  303          v.texC += vtx[0].texCrd * barycentrics[0];\n  ...\n  313          v.normalW = mul(v.normalW, worldInvTransposeMat);\n  314          v.faceNormalW = mul(v.faceNormalW, worldInvTransposeMat);\n  315:         v.bitangentW = mul(v.bitangentW, (float3x3)worldMat);\n  316  \n  317          v.normalW = normalize(v.normalW);\n  318          v.faceNormalW = normalize(v.faceNormalW);\n  319          // Handle invalid bitangents gracefully (avoid NaN from normalization).\n  320:         v.bitangentW = dot(v.bitangentW, v.bitangentW) > 0.f ? normalize(v.bitangentW) : float3(0, 0, 0);\n  321          return v;\n  322      }\n\n/home/max/dev/Falcor/src/Falcor/Scene/ShadingData.slang:\n  232  \n  233      // Check that bitangent exists, otherwise leave the vectors at zero to avoid NaNs.\n  234:     const bool validTangentSpace = dot(v.bitangentW, v.bitangentW) > 0.f;\n  235      if (validTangentSpace)\n  236      {\n  237:         sd.B = normalize(v.bitangentW - sd.N * (dot(v.bitangentW, sd.N)));\n  238          sd.T = normalize(cross(sd.B, sd.N));\n  239      }\n  ...\n  379  \n  380          // Check that bitangent exists, otherwise leave the vectors at zero to avoid NaNs.\n  381:         const bool validTangentSpace = dot(v.bitangentW, v.bitangentW) > 0.f;\n  382          if (validTangentSpace)\n  383          {\n  384:             sd.B = normalize(v.bitangentW - sd.N * (dot(v.bitangentW, sd.N)));\n  385              sd.T = normalize(cross(sd.B, sd.N));\n  386          }\n\n23 matches across 5 files\n\n\nSearching 460 files for \"MeshInstanceData\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n   65  \n   66          for (uint32_t lightIdx = 0; lightIdx < mMeshLights.size(); ++lightIdx) {\n   67:             const MeshInstanceData& instanceData = mpScene->getMeshInstance(mMeshLights[lightIdx].meshInstanceID);\n   68              UpdateFlags updateFlags = UpdateFlags::None;\n   69  \n   ..\n  195          // Create mesh lights for all emissive mesh instances.\n  196          for (uint32_t meshInstanceID = 0; meshInstanceID < mpScene->getMeshInstanceCount(); meshInstanceID++) {\n  197:             const MeshInstanceData& instanceData = mpScene->getMeshInstance(meshInstanceID);\n  198              const MeshDesc& meshData = mpScene->getMesh(instanceData.meshID);\n  199              const Material::SharedPtr& pMaterial = mpScene->getMaterial(instanceData.materialID);\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n   51  #endif\n   52  \n   53:     static_assert(sizeof(MeshInstanceData) % 16 == 0, \"MeshInstanceData size should be a multiple of 16\");\n   54      static_assert(sizeof(PackedStaticVertexData) % 16 == 0, \"PackedStaticVertexData size should be a multiple of 16\");\n   55  \n   ..\n  211      mpSceneBlock = ParameterBlock::create(mpDevice, pReflection);\n  212      mpMeshesBuffer = Buffer::createStructured(mpDevice, mpSceneBlock[kMeshBufferName], (uint32_t)mMeshDesc.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  213:     mpMeshInstancesBuffer = Buffer::createStructured(mpDevice, mpSceneBlock[kMeshInstanceBufferName], (uint32_t)mMeshInstanceData.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  214  \n  215      mpMaterialsBuffer = Buffer::createStructured(mpDevice, mpSceneBlock[kMaterialsBufferName], (uint32_t)mMaterials.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  ...\n  223      // Upload geometry\n  224      mpMeshesBuffer->setBlob(mMeshDesc.data(), 0, sizeof(MeshDesc) * mMeshDesc.size());\n  225:     mpMeshInstancesBuffer->setBlob(mMeshInstanceData.data(), 0, sizeof(MeshInstanceData) * mMeshInstanceData.size());\n  226  \n  227      mpSceneBlock->setBuffer(kMeshInstanceBufferName, mpMeshInstancesBuffer);\n  ...\n  265      const auto& globalMatrices = mpAnimationController->getGlobalMatrices();\n  266      std::vector<BoundingBox> instanceBBs;\n  267:     instanceBBs.reserve(mMeshInstanceData.size());\n  268  \n  269:     for (const auto& inst : mMeshInstanceData) {\n  270          const BoundingBox& meshBB = mMeshBBs[inst.meshID];\n  271          const glm::mat4& transform = globalMatrices[inst.globalMatrixID];\n  ...\n  280  \n  281  void Scene::updateMeshInstanceFlags() {\n  282:     for (auto& inst : mMeshInstanceData) {\n  283          inst.flags = MeshInstanceFlags::None;\n  284  \n  ...\n  432      if (mpAnimationController->animate(pContext, currentTime)) {\n  433          mUpdates |= UpdateFlags::SceneGraphChanged;\n  434:         for (const auto& inst : mMeshInstanceData) {\n  435              if (mpAnimationController->didMatrixChanged(inst.globalMatrixID)) {\n  436                  mUpdates |= UpdateFlags::MeshesMoved;\n  ...\n  627      const glm::mat4* matrices = (glm::mat4*)pMatricesBuffer->map(Buffer::MapType::Read); // #SCENEV2 This will cause the pipeline to flush and sync, but it's probably not too bad as this only happens once\n  628  \n  629:     for (const auto& instance : mMeshInstanceData)\n  630      {\n  631          const auto& mesh = mMeshDesc[instance.meshID];\n  ...\n  667      // Build a list of mesh instance indices per mesh.\n  668      std::vector<std::vector<size_t>> instanceLists(mMeshDesc.size());\n  669:     for (size_t i = 0; i < mMeshInstanceData.size(); i++) {\n  670:         assert(mMeshInstanceData[i].meshID < instanceLists.size());\n  671:         instanceLists[mMeshInstanceData[i].meshID].push_back(i);\n  672      }\n  673  \n  ...\n  679  \n  680          assert(instanceList.size() == 1);\n  681:         uint32_t globalMatrixId = mMeshInstanceData[instanceList[0]].globalMatrixID;\n  682          nodeToMeshList[globalMatrixId].push_back(meshId);\n  683      }\n  ...\n  709          }\n  710      }\n  711:     assert(instanceMapping.size() == mMeshInstanceData.size());\n  712      {\n  713          // Check that all indices exist\n  714          std::set<size_t> instanceIndices(instanceMapping.begin(), instanceMapping.end());\n  715:         assert(instanceIndices.size() == mMeshInstanceData.size());\n  716      }\n  717  \n  718:     // Now reorder mMeshInstanceData based on the new mapping.\n  719      // We'll make a copy of the existing data first, and the populate the array.\n  720:     std::vector<MeshInstanceData> prevInstanceData = mMeshInstanceData;\n  721:     for (size_t i = 0; i < mMeshInstanceData.size(); i++) {\n  722          assert(instanceMapping[i] < prevInstanceData.size());\n  723:         mMeshInstanceData[i] = prevInstanceData[instanceMapping[i]];\n  724      }\n  725  \n  ...\n  727      mMeshIdToInstanceIds.clear();\n  728      mMeshIdToInstanceIds.resize(mMeshDesc.size());\n  729:     for (uint32_t instId = 0; instId < (uint32_t)mMeshInstanceData.size(); instId++) {\n  730:         mMeshIdToInstanceIds[mMeshInstanceData[instId].meshID].push_back(instId);\n  731      }\n  732  }\n  ...\n  878  \n  879              // Any instances of the mesh will get you the correct matrix, so just pick the first mesh then the first instance.\n  880:             uint32_t matrixId = mMeshInstanceData[desc.InstanceID].globalMatrixID;\n  881              glm::mat4 transform4x4 = transpose(mpAnimationController->getGlobalMatrices()[matrixId]);\n  882              std::memcpy(desc.Transform, &transform4x4, sizeof(desc.Transform));\n  ...\n  895                  assert(instId == instanceId); // Mesh instances are sorted by instanceId\n  896                  desc.InstanceID = instanceId++;\n  897:                 uint32_t matrixId = mMeshInstanceData[desc.InstanceID].globalMatrixID;\n  898                  glm::mat4 transform4x4 = transpose(mpAnimationController->getGlobalMatrices()[matrixId]);\n  899                  std::memcpy(desc.Transform, &transform4x4, sizeof(desc.Transform));\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.h:\n   72          --------------------------------------------------------------------------------------|\n   73  \n   74:         - \"InstanceID() + GeometryIndex()\" is used for indexing into MeshInstanceData.\n   75          - This is wrapped in getGlobalHitID() in Raytracing.slang.\n   76      */\n   ..\n  203          /** Get the number of mesh instances\n  204          */\n  205:         uint32_t getMeshInstanceCount() const { return (uint32_t)mMeshInstanceData.size(); }\n  206  \n  207          /** Get a mesh instance desc\n  208          */\n  209:         const MeshInstanceData& getMeshInstance(uint32_t instanceID) const { return mMeshInstanceData[instanceID]; }\n  210  \n  211          /** Get the number of materials in the scene\n  ...\n  468          // #SCENE We don't need those vectors on the host\n  469          std::vector<MeshDesc> mMeshDesc;                    ///< Copy of GPU buffer (mpMeshes)\n  470:         std::vector<MeshInstanceData> mMeshInstanceData;    ///< Copy of GPU buffer (mpMeshInstances)\n  471          std::vector<MeshGroup> mMeshGroups;                 ///< Groups of meshes with identical transforms. Each group maps to a BLAS for ray tracing.\n  472          std::vector<Node> mSceneGraph;                      ///< For each index i, the array element indicates the parent node. Indices are in relation to mLocalToWorldMatrices\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.slang:\n   52  {\n   53      // Geometry\n   54:     [root] StructuredBuffer<PackedMeshInstanceData> meshInstances;\n   55      StructuredBuffer<MeshDesc> meshes;\n   56  \n   ..\n  141      }\n  142  \n  143:     MeshInstanceData getMeshInstance(uint meshInstanceID)\n  144      {\n  145          return meshInstances[meshInstanceID].unpack();\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp:\n  333      uint32_t SceneBuilder::createMeshData(Scene* pScene) {\n  334          auto& meshData = pScene->mMeshDesc;\n  335:         auto& instanceData = pScene->mMeshInstanceData;\n  336          meshData.resize(mMeshes.size());\n  337          pScene->mMeshHasDynamicData.resize(mMeshes.size());\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneTypes.slang:\n   61  };\n   62  \n   63: struct MeshInstanceData\n   64  {\n   65      uint globalMatrixID;\n   ..\n   73  /** Mesh instance data packed into 16B.\n   74  */\n   75: struct PackedMeshInstanceData\n   76  {\n   77      uint materialID;\n   ..\n   91  \n   92  #ifdef HOST_CODE\n   93:     void pack(const MeshInstanceData& d)\n   94      {\n   95          materialID = d.materialID;\n   ..\n  104  #endif\n  105  \n  106:     MeshInstanceData unpack()\n  107      {\n  108:         MeshInstanceData d;\n  109          d.materialID = materialID;\n  110          d.vbOffset = vbOffset;\n\n42 matches across 6 files\n\n\nSearching 472 files for \"GLM_\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Falcor.props:\n   16        <TreatWarningAsError>true</TreatWarningAsError>\n   17        <AdditionalIncludeDirectories>$(FALCOR_CORE_DIRECTORY)\\Falcor;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\nvapi;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\GLM;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\VulkanSDK\\Include;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\RapidJson\\include;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\pybind11\\include;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\Python\\include;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman\\WinPixEventRuntime\\Include\\WinPixEventRuntime;$(FALCOR_CORE_DIRECTORY)\\Externals;$(FALCOR_CORE_DIRECTORY)\\Externals\\.packman;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n   18:       <PreprocessorDefinitions>_$(OutputType);_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;GLM_FORCE_DEPTH_ZERO_TO_ONE;$(FALCOR_BACKEND);_UNICODE;UNICODE;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n   19        <LanguageStandard>stdcpp17</LanguageStandard>\n   20      </ClCompile>\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj:\n  777        <WarningLevel>Level3</WarningLevel>\n  778        <Optimization>Disabled</Optimization>\n  779:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_D3D12;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE;_$(OutputType)</PreprocessorDefinitions>\n  780        <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  781        <TreatWarningAsError>true</TreatWarningAsError>\n  ...\n  815        <WarningLevel>Level3</WarningLevel>\n  816        <Optimization>Disabled</Optimization>\n  817:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_VK;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE</PreprocessorDefinitions>\n  818        <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  819        <TreatWarningAsError>true</TreatWarningAsError>\n  ...\n  856        <Optimization>MaxSpeed</Optimization>\n  857        <IntrinsicFunctions>true</IntrinsicFunctions>\n  858:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_D3D12;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE</PreprocessorDefinitions>\n  859        <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  860        <TreatWarningAsError>true</TreatWarningAsError>\n  ...\n  898        <Optimization>MaxSpeed</Optimization>\n  899        <IntrinsicFunctions>true</IntrinsicFunctions>\n  900:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_VK;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE</PreprocessorDefinitions>\n  901        <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  902        <TreatWarningAsError>true</TreatWarningAsError>\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/FalcorMath.h:\n  216      }\n  217  \n  218: #ifndef GLM_CLIP_SPACE_Y_TOPDOWN\n  219: //#error GLM_CLIP_SPACE_Y_TOPDOWN is undefined. It means the custom fix we did in GLM to support Vulkan NDC space is missing. Look at GLMs `setup.hpp` and `glm\\etc\\matrix_clip_space.inl`\n  220  #ifdef __GNUC__\n  221: #warning GLM_CLIP_SPACE_Y_TOPDOWN is undefined. It means the custom fix we did in GLM to support Vulkan NDC space is missing. Look at GLMs `setup.hpp` and `glm\\etc\\matrix_clip_space.inl`\n  222  #endif\n  223  #endif\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/Vector.h:\n   31  #include <string>\n   32  \n   33: #define GLM_FORCE_CTOR_INIT\n   34: #define GLM_ENABLE_EXPERIMENTAL\n   35: #define GLM_FORCE_SWIZZLE\n   36  #include \"glm/glm.hpp\"\n   37  #include \"glm/gtx/compatibility.hpp\"\n\n11 matches across 4 files\n\n\nSearching 472 files for \"py::init<void>\" (case sensitive)\n\n0 matches\n\nSearching 472 files for \"pybind11::init<void>\" (case sensitive)\n\n0 matches\n\nSearching 472 files for \"pybind11::init\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraph.cpp:\n  697      pybind11::class_<RenderGraph, RenderGraph::SharedPtr> renderGraph(m, \"RenderGraph\");\n  698      \n  699:     renderGraph.def(pybind11::init(&create_default));\n  700:     renderGraph.def(pybind11::init(&create_on_device));\n  701  \n  702      renderGraph.def_property(\"name\", &RenderGraph::getName, &RenderGraph::setName);\n  ...\n  724          return pPass;\n  725      };\n  726:     renderPass.def(pybind11::init(createRenderPass), \"device\"_a, \"name\"_a, \"dict\"_a = pybind11::dict()); // PYTHONDEPRECATED\n  727  \n  728      m.def(\"createPass\", createRenderPass, \"device\"_a, \"name\"_a, \"dict\"_a = pybind11::dict());\n\n/home/max/dev/Falcor/src/Falcor/Utils/Scripting/ScriptBindings.cpp:\n   83      };\n   84      pybind11::class_<VecT>(m, name.c_str())\n   85:         .def(pybind11::init(ctor))\n   86          .def(\"__repr__\", repr)\n   87          .def(\"__str__\", vecStr);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Scripting/ScriptBindings.h:\n  112              This::info().name = name;\n  113              auto initFunc = [](const pybind11::kwargs& args) { return This::init(args); };\n  114:             this->def(pybind11::init(initFunc));\n  115:             this->def(pybind11::init<>());\n  116              this->def(\"__repr__\", This::repr);\n  117          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Scripting/Scripting.cpp:\n   58  \n   59          try {\n   60:             pybind11::initialize_interpreter();\n   61              pybind11::exec(\"from falcor import *\");\n   62          }\n\n7 matches across 4 files\n\n\nSearching 31047 files for \"PythonLibs\" (case sensitive)\n\n/home/max/dev/Falcor/build/.cmake/api/v1/reply/cache-v2-c33cde3ef642d6e307f7.json:\n 2363  \t\t},\n 2364  \t\t{\n 2365: \t\t\t\"name\" : \"FIND_PACKAGE_MESSAGE_DETAILS_PythonLibs\",\n 2366  \t\t\t\"properties\" : \n 2367  \t\t\t[\n 2368  \t\t\t\t{\n 2369  \t\t\t\t\t\"name\" : \"HELPSTRING\",\n 2370: \t\t\t\t\t\"value\" : \"Details about finding PythonLibs\"\n 2371  \t\t\t\t}\n 2372  \t\t\t],\n\n/home/max/dev/Falcor/build/.cmake/api/v1/reply/cmakeFiles-v1-7247193c22021b2aab3e.json:\n  167  \t\t},\n  168  \t\t{\n  169: \t\t\t\"path\" : \"third_party/pybind11/tools/FindPythonLibsNew.cmake\"\n  170  \t\t},\n  171  \t\t{\n  ...\n  335  \t\t\t\"isCMake\" : true,\n  336  \t\t\t\"isExternal\" : true,\n  337: \t\t\t\"path\" : \"/usr/local/share/cmake-3.17/Modules/FindPythonLibs.cmake\"\n  338  \t\t},\n  339  \t\t{\n  ...\n  527  \t\t\t\"isCMake\" : true,\n  528  \t\t\t\"isExternal\" : true,\n  529: \t\t\t\"path\" : \"/usr/local/share/cmake-3.17/Modules/FindPythonLibs.cmake\"\n  530  \t\t},\n  531  \t\t{\n  ...\n  603  \t\t\t\"isCMake\" : true,\n  604  \t\t\t\"isExternal\" : true,\n  605: \t\t\t\"path\" : \"/usr/local/share/cmake-3.17/Modules/FindPythonLibs.cmake\"\n  606  \t\t},\n  607  \t\t{\n  ...\n  677  \t\t\t\"isCMake\" : true,\n  678  \t\t\t\"isExternal\" : true,\n  679: \t\t\t\"path\" : \"/usr/local/share/cmake-3.17/Modules/FindPythonLibs.cmake\"\n  680  \t\t},\n  681  \t\t{\n  ...\n  915  \t\t\t\"isCMake\" : true,\n  916  \t\t\t\"isExternal\" : true,\n  917: \t\t\t\"path\" : \"/usr/local/share/cmake-3.17/Modules/FindPythonLibs.cmake\"\n  918  \t\t},\n  919  \t\t{\n\n/home/max/dev/Falcor/build/CMakeCache.txt:\n  984  //Details about finding PythonInterp\n  985  FIND_PACKAGE_MESSAGE_DETAILS_PythonInterp:INTERNAL=[python][v2.7.17()]\n  986: //Details about finding PythonLibs\n  987: FIND_PACKAGE_MESSAGE_DETAILS_PythonLibs:INTERNAL=[/usr/lib/x86_64-linux-gnu/libpython3.8.so][/usr/include/python3.8][v3.8.0(3.7)]\n  988  //Details about finding TIFF\n  989  FIND_PACKAGE_MESSAGE_DETAILS_TIFF:INTERNAL=[/usr/lib/x86_64-linux-gnu/libtiff.so][/usr/include/x86_64-linux-gnu][v4.0.9()]\n\n/home/max/dev/Falcor/build/CMakeFiles/Makefile.cmake:\n   47    \"../third_party/assimp/tools/assimp_cmd/CMakeLists.txt\"\n   48    \"../third_party/pybind11/CMakeLists.txt\"\n   49:   \"../third_party/pybind11/tools/FindPythonLibsNew.cmake\"\n   50    \"../third_party/pybind11/tools/pybind11Common.cmake\"\n   51    \"../third_party/pybind11/tools/pybind11Tools.cmake\"\n   ..\n   89    \"/usr/local/share/cmake-3.17/Modules/FindPkgConfig.cmake\"\n   90    \"/usr/local/share/cmake-3.17/Modules/FindPythonInterp.cmake\"\n   91:   \"/usr/local/share/cmake-3.17/Modules/FindPythonLibs.cmake\"\n   92    \"/usr/local/share/cmake-3.17/Modules/FindTIFF.cmake\"\n   93    \"/usr/local/share/cmake-3.17/Modules/FindThreads.cmake\"\n\n/home/max/dev/Falcor/build/debug/lib/libassimp.so.5:\n    File too large, skipping\n\n/home/max/dev/Falcor/build/debug/lib/libassimp.so.5.0.0:\n    File too large, skipping\n\n/home/max/dev/Falcor/cmake/defaults/Packages.cmake:\n   42      if(PXR_USE_PYTHON_3)\n   43          find_package(PythonInterp 3.0 REQUIRED)\n   44:         find_package(PythonLibs 3.0 REQUIRED)\n   45      else()\n   46          find_package(PythonInterp 2.7 REQUIRED)\n   47:         find_package(PythonLibs 2.7 REQUIRED)\n   48      endif()\n   49  \n\n/home/max/dev/Falcor/src/Falcor/CMakeLists.txt:\n  100  \n  101  # Python\n  102: find_package( PythonLibs 3.7 REQUIRED )\n  103  include_directories( ${PYTHON_INCLUDE_DIRS} )\n  104  \n\n/home/max/dev/Falcor/src/lava_cmd/CMakeLists.txt:\n   13  \n   14  # Python\n   15: find_package( PythonLibs 3.7 REQUIRED )\n   16  include_directories( ${PYTHON_INCLUDE_DIRS} )\n   17  \n\n/home/max/dev/Falcor/src/lava_lib/CMakeLists.txt:\n   11  \n   12  # Python\n   13: find_package( PythonLibs 3.7 REQUIRED )\n   14  include_directories( ${PYTHON_INCLUDE_DIRS} )\n   15  \n\n/home/max/dev/Falcor/src/lava_lib/reader_lsd/CMakeLists.txt:\n   15  \n   16  # Python\n   17: find_package( PythonLibs 3.7 REQUIRED )\n   18  include_directories( ${PYTHON_INCLUDE_DIRS} )\n   19  \n\n/home/max/dev/Falcor/src/Mogwai/CMakeLists.txt:\n   13  \n   14  # Python\n   15: find_package(PythonLibs 3.7 REQUIRED)\n   16  include_directories(${PYTHON_INCLUDE_DIRS})\n   17  \n\n/home/max/dev/Falcor/src/RenderPasses/CMakeLists.txt:\n   10  \n   11  # Python\n   12: find_package(PythonLibs 3.7 REQUIRED)\n   13  include_directories(${PYTHON_INCLUDE_DIRS})\n   14  \n\n/home/max/dev/Falcor/src/Samples/CMakeLists.txt:\n    2  \n    3  # Python\n    4: find_package(PythonLibs 3.7 REQUIRED)\n    5  include_directories(${PYTHON_INCLUDE_DIRS})\n    6  \n\n/home/max/dev/Falcor/src/Tools/CMakeLists.txt:\n    2  \n    3  # Python\n    4: find_package(PythonLibs 3.7 REQUIRED)\n    5  include_directories(${PYTHON_INCLUDE_DIRS})\n    6  \n\n/home/max/dev/Falcor/third_party/pybind11/.github/CONTRIBUTING.md:\n   90  * `-DCMAKE_BUILD_TYPE`: Release, Debug, MinSizeRel, RelWithDebInfo\n   91  * `-DPYBIND11_FINDPYTHON=ON`: Use CMake 3.12+’s FindPython instead of the\n   92:   classic, deprecated, custom FindPythonLibs\n   93  * `-DPYBIND11_NOPYTHON=ON`: Disable all Python searching (disables tests)\n   94  * `-DBUILD_TESTING=ON`: Enable the tests\n\n/home/max/dev/Falcor/third_party/pybind11/CMakeLists.txt:\n  210      FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n  211            ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n  212:           tools/FindPythonLibsNew.cmake\n  213            tools/pybind11Common.cmake\n  214            tools/pybind11Tools.cmake\n\n/home/max/dev/Falcor/third_party/pybind11/docs/faq.rst:\n  282  ==============================================================\n  283  \n  284: The functions ``find_package(PythonInterp)`` and ``find_package(PythonLibs)``\n  285  provided by CMake for Python version detection are modified by pybind11 due to\n  286  unreliability and limitations that make them unsuitable for pybind11's needs.\n  ...\n  296  \n  297      find_package(PythonInterp)\n  298:     find_package(PythonLibs)\n  299      find_package(pybind11)\n  300  \n  ...\n  307      find_package(pybind11)\n  308      find_package(PythonInterp)\n  309:     find_package(PythonLibs)\n  310  \n  311  will detect Python 3.x for pybind11 and may crash on\n  312: ``find_package(PythonLibs)`` afterwards.\n  313  \n  314  There are three possible solutions:\n  315  \n  316: 1. Avoid using ``find_package(PythonInterp)`` and ``find_package(PythonLibs)``\n  317     from CMake and rely on pybind11 in detecting Python version. If this is not\n  318     possible, the CMake machinery should be called *before* including pybind11.\n\n/home/max/dev/Falcor/third_party/pybind11/docs/upgrade.rst:\n  102    pybind11 will cause pybind11 to use the new Python mechanisms instead of its\n  103    own custom search, based on a patched version of classic ``FindPythonInterp``\n  104:   / ``FindPythonLibs``. In the future, this may become the default. A recent\n  105    (3.15+ or 3.18.2+) version of CMake is recommended.\n  106  \n\n/home/max/dev/Falcor/third_party/pybind11/tests/extra_python_package/test_files.py:\n   46  \n   47  cmake_files = {\n   48:     \"share/cmake/pybind11/FindPythonLibsNew.cmake\",\n   49      \"share/cmake/pybind11/pybind11Common.cmake\",\n   50      \"share/cmake/pybind11/pybind11Config.cmake\",\n\n/home/max/dev/Falcor/third_party/pybind11/tools/FindPythonLibsNew.cmake:\n   56  endif()\n   57  \n   58: if(PythonLibsNew_FIND_QUIETLY)\n   59    set(_pythonlibs_quiet QUIET)\n   60  endif()\n   61  \n   62: if(PythonLibsNew_FIND_REQUIRED)\n   63    set(_pythonlibs_required REQUIRED)\n   64  endif()\n   ..\n   90  \n   91  # Use the Python interpreter to find the libs.\n   92: if(NOT PythonLibsNew_FIND_VERSION)\n   93:   set(PythonLibsNew_FIND_VERSION \"\")\n   94  endif()\n   95  \n   96: find_package(PythonInterp ${PythonLibsNew_FIND_VERSION} ${_pythonlibs_required}\n   97               ${_pythonlibs_quiet})\n   98  \n   99  if(NOT PYTHONINTERP_FOUND)\n  100    set(PYTHONLIBS_FOUND FALSE)\n  101:   set(PythonLibsNew_FOUND FALSE)\n  102    return()\n  103  endif()\n  ...\n  128  \n  129  if(NOT _PYTHON_SUCCESS MATCHES 0)\n  130:   if(PythonLibsNew_FIND_REQUIRED)\n  131      message(FATAL_ERROR \"Python config failure:\\n${_PYTHON_ERROR_VALUE}\")\n  132    endif()\n  133    set(PYTHONLIBS_FOUND FALSE)\n  134:   set(PythonLibsNew_FOUND FALSE)\n  135    return()\n  136  endif()\n  ...\n  156  # Skip if CMAKE_SIZEOF_VOID_P is not defined\n  157  if(CMAKE_SIZEOF_VOID_P AND (NOT \"${PYTHON_SIZEOF_VOID_P}\" STREQUAL \"${CMAKE_SIZEOF_VOID_P}\"))\n  158:   if(PythonLibsNew_FIND_REQUIRED)\n  159      math(EXPR _PYTHON_BITS \"${PYTHON_SIZEOF_VOID_P} * 8\")\n  160      math(EXPR _CMAKE_BITS \"${CMAKE_SIZEOF_VOID_P} * 8\")\n  ...\n  163    endif()\n  164    set(PYTHONLIBS_FOUND FALSE)\n  165:   set(PythonLibsNew_FOUND FALSE)\n  166    return()\n  167  endif()\n  ...\n  245  set(PYTHON_DEBUG_LIBRARIES \"${PYTHON_DEBUG_LIBRARY}\")\n  246  \n  247: find_package_message(PYTHON \"Found PythonLibs: ${PYTHON_LIBRARY}\"\n  248                       \"${PYTHON_EXECUTABLE}${PYTHON_VERSION_STRING}\")\n  249  \n  250  set(PYTHONLIBS_FOUND TRUE)\n  251: set(PythonLibsNew_FOUND TRUE)\n  252  \n  253  if(NOT PYTHON_MODULE_PREFIX)\n\n/home/max/dev/Falcor/third_party/pybind11/tools/pybind11Config.cmake.in:\n   97  ^^^^^^^^^^^^\n   98  \n   99: Set PythonLibsNew variables to influence python detection and\n  100  CMAKE_CXX_STANDARD to influence standard setting.\n  101  \n\n/home/max/dev/Falcor/third_party/pybind11/tools/pybind11Tools.cmake:\n   36  \n   37  list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}\")\n   38: find_package(PythonLibsNew ${PYBIND11_PYTHON_VERSION} MODULE REQUIRED ${_pybind11_quiet})\n   39  list(REMOVE_AT CMAKE_MODULE_PATH -1)\n   40  \n   ..\n  118  \n  119  function(pybind11_extension name)\n  120:   # The prefix and extension are provided by FindPythonLibsNew.cmake\n  121    set_target_properties(${name} PROPERTIES PREFIX \"${PYTHON_MODULE_PREFIX}\"\n  122                                             SUFFIX \"${PYTHON_MODULE_EXTENSION}\")\n\n/home/max/dev/Falcor/third_party/tbb/CMakeLists.txt:\n  589  if (TBB_BUILD_PYTHON)\n  590    find_package(PythonInterp)\n  591:   find_package(PythonLibs ${PYTHON_VERSION_STRING} EXACT)\n  592    find_package(SWIG 3)\n  593:   if (PythonLibs_FOUND AND SWIG_FOUND AND TBB_BUILD_SHARED)\n  594      include (${SWIG_USE_FILE})\n  595      set_source_files_properties (python/tbb/api.i PROPERTIES CPLUSPLUS ON)\n\n/home/max/dev/Falcor/third_party/USD/cmake/defaults/Packages.cmake:\n   42      if(PXR_USE_PYTHON_3)\n   43          find_package(PythonInterp 3.0 REQUIRED)\n   44:         find_package(PythonLibs 3.0 REQUIRED)\n   45      else()\n   46          find_package(PythonInterp 2.7 REQUIRED)\n   47:         find_package(PythonLibs 2.7 REQUIRED)\n   48      endif()\n   49  \n\n/home/max/dev/Falcor/venv/lib/python3.7/site-packages/PySide2/Qt/lib/libQt5WebEngineCore.so.5:\n    File too large, skipping\n\n50 matches across 23 files\n\n\nSearching 470 files for \"registerBinding\" (case sensitive)\n\n/home/max/dev/Falcor/src/lava_lib/renderer.cpp:\n   38  \n   39  \tFalcor::Scripting::start();\n   40:     //Falcor::ScriptBindings::registerBinding(Renderer::registerBindings);\n   41  \n   42      Falcor::Threading::start();\n\n/home/max/dev/Falcor/src/lava_lib/renderer.h:\n   56   \tvoid renderFrame(const RendererIface::FrameData frame_data);\n   57  \n   58:  \tstatic void registerBindings(pybind11::module& m);\n   59  \n   60   private:\n\n/home/max/dev/Falcor/src/lava_lib/renderer_scripting.cpp:\n   53  }\n   54  \n   55: void Renderer::registerBindings(pybind11::module& m) {\n   56      pybind11::class_<Renderer> scene(m, \"Renderer\");\n   57  \n\n4 matches across 3 files\n\n\nSearching 31077 files for \"FALCOR_DLL\" (case sensitive)\n\n/home/max/dev/Falcor/build/debug/lib/libassimp.so.5:\n    File too large, skipping\n\n/home/max/dev/Falcor/build/debug/lib/libassimp.so.5.0.0:\n    File too large, skipping\n\n/home/max/dev/Falcor/src/Falcor/Core/Framework.h:\n   45  #endif  // _MSC_VER\n   46  \n   47: #ifdef FALCOR_DLL\n   48  #define dlldecl falcorexport\n   49  #else   // BUILDING_SHARED_DLL\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj:\n  777        <WarningLevel>Level3</WarningLevel>\n  778        <Optimization>Disabled</Optimization>\n  779:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_D3D12;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE;_$(OutputType)</PreprocessorDefinitions>\n  780        <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  781        <TreatWarningAsError>true</TreatWarningAsError>\n  ...\n  815        <WarningLevel>Level3</WarningLevel>\n  816        <Optimization>Disabled</Optimization>\n  817:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_VK;WIN32;_DEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE</PreprocessorDefinitions>\n  818        <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  819        <TreatWarningAsError>true</TreatWarningAsError>\n  ...\n  856        <Optimization>MaxSpeed</Optimization>\n  857        <IntrinsicFunctions>true</IntrinsicFunctions>\n  858:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_D3D12;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE</PreprocessorDefinitions>\n  859        <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  860        <TreatWarningAsError>true</TreatWarningAsError>\n  ...\n  898        <Optimization>MaxSpeed</Optimization>\n  899        <IntrinsicFunctions>true</IntrinsicFunctions>\n  900:       <PreprocessorDefinitions>FALCOR_DLL;IMGUI_API=__declspec(dllexport);_PROJECT_DIR_=R\"($(ProjectDir))\";_SCL_SECURE_NO_WARNINGS;_CRT_SECURE_NO_WARNINGS;FALCOR_VK;WIN32;NDEBUG;_LIB;%(PreprocessorDefinitions);GLM_FORCE_DEPTH_ZERO_TO_ONE</PreprocessorDefinitions>\n  901        <AdditionalIncludeDirectories>$(ProjectDir);$(ProjectDir)\\..\\Externals\\.packman\\GLM;$(ProjectDir)\\..\\Externals\\.packman\\GLFW\\include;$(ProjectDir)\\..\\Externals\\.packman\\FreeImage;$(ProjectDir)\\..\\Externals\\.packman\\ASSIMP\\include;$(ProjectDir)\\..\\Externals\\.packman\\FFMpeg\\include;$(ProjectDir)\\..\\Externals\\.packman\\RapidJson\\include;$(ProjectDir)\\..\\Externals\\.packman\\VulkanSDK\\Include;$(ProjectDir)\\..\\Externals\\.packman\\Python\\Include;$(ProjectDir)\\..\\Externals\\.packman\\pybind11\\include;$(ProjectDir)\\..\\Externals\\;$(ProjectDir)\\..\\Externals\\.packman\\nvapi;$(ProjectDir)\\..\\Externals\\.packman</AdditionalIncludeDirectories>\n  902        <TreatWarningAsError>true</TreatWarningAsError>\n\n/home/max/dev/Falcor/venv/lib/python3.7/site-packages/PySide2/Qt/lib/libQt5WebEngineCore.so.5:\n    File too large, skipping\n\n5 matches across 2 files\n\n\nSearching 472 files for \"kInvalidIndex\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/GpuTimer.cpp:\n   58      mStart = pHeap->allocate();\n   59      mEnd = pHeap->allocate();\n   60:     if (mStart == QueryHeap::kInvalidIndex || mEnd == QueryHeap::kInvalidIndex) {\n   61          throw std::runtime_error(\"Can't create GPU timer, no available timestamp queries.\");\n   62      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/QueryHeap.h:\n   50      };\n   51  \n   52:     static const uint32_t kInvalidIndex = 0xffffffff;\n   53  \n   54      /** Create a new query heap.\n   ..\n   64  \n   65      /** Allocates a new query.\n   66:         \\return Query index, or kInvalidIndex if out of queries.\n   67      */\n   68      uint32_t allocate() {\n   ..\n   75              return mCurrentObject++;\n   76          } else {\n   77:             return kInvalidIndex;\n   78          }\n   79      }\n   80  \n   81      void release(uint32_t entry) {\n   82:         assert(entry != kInvalidIndex),\n   83          mFreeQueries.push_back(entry);\n   84      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/VAO.h:\n   59  \n   60      struct ElementDesc {\n   61:         static const uint32_t kInvalidIndex = -1;\n   62:         uint32_t vbIndex = kInvalidIndex;\n   63:         uint32_t elementIndex = kInvalidIndex;\n   64      };\n   65  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  493  \n  494  void ParameterBlock::markDescriptorSetDirty(uint32_t index) const {\n  495:     if (index == ParameterBlockReflection::kInvalidIndex) return;\n  496      assert(index < mSets.size());\n  497  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n 1176      using SharedConstPtr = std::shared_ptr<const ParameterBlockReflection>;\n 1177  \n 1178:     static const uint32_t kInvalidIndex = 0xffffffff;\n 1179  \n 1180      /** Create a new parameter block reflector, for the given element type.\n ....\n 1281          uint32_t regSpace = 0;          ///< The register space\n 1282  \n 1283:         uint32_t descriptorSetIndex = kInvalidIndex;    ///< The index of the descriptor set to be bound into, when flavor is Flavor::Simple.\n 1284  \n 1285          /// The reflection object for a sub-object range.\n ....\n 1294          uint32_t regIndex = 0;          ///< The register index\n 1295          uint32_t regSpace = 0;          ///< The register space\n 1296:         uint32_t descriptorSetIndex = kInvalidIndex;    ///< The index of the descriptor set to be bound into\n 1297          bool useRootConstants = false;\n 1298      };\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang:\n   80      float evalPdf(float3 posW, float3 normalW, const TriangleHit hit)\n   81      {\n   82:         if (hit.triangleIndex == LightCollection::kInvalidIndex) return 0;\n   83  \n   84          // Lights are chosen uniformly so the selection probability is just one over the number of lights.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h:\n  120          float cosConeAngle = 1.f;                       ///< Cosine normal bounding cone (half) angle.\n  121          float flux = 0.f;                               ///< Precomputed triangle flux (note, this takes doublesidedness into account).\n  122:         uint32_t triangleIndex = MeshLightData::kInvalidIndex; ///< Index into global triangle list.\n  123      };\n  124  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang:\n   95      float evalPdf(float3 posW, float3 normalW, const TriangleHit hit)\n   96      {\n   97:         if (hit.triangleIndex == LightCollection::kInvalidIndex) return 0;\n   98  \n   99          float traversalPdf = 1.0f;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n  294      uint32_t instanceCount = mpScene->getMeshInstanceCount();\n  295      assert(instanceCount > 0);\n  296:     std::vector<uint32_t> triangleOffsets(instanceCount, MeshLightData::kInvalidIndex);\n  297      for (const auto& it : mMeshLights)\n  298      {\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.h:\n   94          // TODO: Perf of indexed vs non-indexed on GPU. We avoid level of indirection, but have more bandwidth non-indexed.\n   95          MeshLightVertex vtx[3];                             ///< Vertices. These are non-indexed for now.\n   96:         uint32_t        lightIdx = MeshLightData::kInvalidIndex; ///< Per-triangle index into mesh lights array.\n   97  \n   98          // Pre-computed quantities.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.slang:\n   54      StructuredBuffer<EmissiveFlux>              fluxData;               ///< Per-triangle flux data for emissive triangles.\n   55      StructuredBuffer<MeshLightData>             meshData;               ///< Per-mesh data for emissive meshes.\n   56:     StructuredBuffer<uint>                      perMeshInstanceOffset;  ///< Per-mesh instance offset into emissive triangles array, or kInvalidIndex if mesh has no emissive triangles.\n   57  \n   58:     static const uint kInvalidIndex = 0xffffffff;\n   59  \n   60      /** Returns the total number of emissive triangles.\n   ..\n   85          \\param[in] meshInstanceID Global mesh instance ID.\n   86          \\param[in] primitiveIndex Primitive index in the given mesh.\n   87:         \\return Emissive triangle index, or kInvalidIndex if not an emissive triangle.\n   88      */\n   89      uint getTriangleIndex(uint meshInstanceID, uint primitiveIndex)\n   90      {\n   91          uint offset = perMeshInstanceOffset[meshInstanceID];\n   92:         return offset != kInvalidIndex ? offset + primitiveIndex : kInvalidIndex;\n   93      }\n   94  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/MeshLightData.slang:\n   39  struct MeshLightData\n   40  {\n   41:     uint        meshInstanceID      = kInvalidIndex;    ///< Mesh instance ID in the scene (= getGlobalHitID()).\n   42:     uint        triangleOffset      = kInvalidIndex;    ///< Offset into LightCollection's global list of emissive triangles.\n   43      uint        triangleCount       = 0;                ///< Number of triangles in mesh light.\n   44:     uint        materialID          = kInvalidIndex;    ///< Material ID (index into scene.materials array).\n   45  \n   46:     static const uint kInvalidIndex = 0xffffffff;\n   47  };\n   48  \n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraph.cpp:\n   86  uint32_t RenderGraph::getPassIndex(const std::string& name) const {\n   87      auto it = mNameToIndex.find(name);\n   88:     return (it == mNameToIndex.end()) ? kInvalidIndex : it->second;\n   89  }\n   90  \n   ..\n  105      assert(pPass);\n  106      uint32_t passIndex = getPassIndex(passName);\n  107:     if (passIndex != kInvalidIndex) {\n  108          logError(\"Pass named `\" + passName + \"' already exists. Ignoring call\");\n  109:         return kInvalidIndex;\n  110      } else {\n  111          passIndex = mpGraph->addNode();\n  ...\n  124  void RenderGraph::removePass(const std::string& name) {\n  125      uint32_t index = getPassIndex(name);\n  126:     if (index == kInvalidIndex) {\n  127          logWarning(\"Can't remove pass `\" + name + \"`. Pass doesn't exist\");\n  128          return;\n  ...\n  170  const RenderPass::SharedPtr& RenderGraph::getPass(const std::string& name) const {\n  171      uint32_t index = getPassIndex(name);\n  172:     if (index == kInvalidIndex) {\n  173          static RenderPass::SharedPtr pNull;\n  174          logError(\"RenderGraph::getRenderPass() - can't find a pass named `\" + name + \"`\");\n  ...\n  237      newEdge.dstField = dstPair.second;\n  238  \n  239:     if (pSrc == nullptr || pDst == nullptr) return kInvalidIndex;\n  240      if (checkMatchingEdgeTypes(newEdge.srcField, newEdge.dstField) == false) {\n  241          logError(\"RenderGraph::addEdge() - can't add the edge [\" + src + \", \" + dst + \"]. One of the nodes is a resource while the other is a pass. Can't tell if you want a data-dependency or an execution-dependency\");\n  242:         return kInvalidIndex;\n  243      }\n  244  \n  ...\n  260                  } else {\n  261                      logError(\"RenderGraph::addEdge() - destination `\" + dst + \"` is already initialized. Please remove the existing connection before trying to add an edge\");\n  262:                     return kInvalidIndex;\n  263                  }\n  264              }\n  ...\n  269      if (DirectedGraphPathDetector::hasPath(mpGraph, dstIndex, srcIndex)) {\n  270          logError(\"RenderGraph::addEdge() - can't add the edge [\" + src + \", \" + dst + \"]. The edge will create a cycle in the graph which is not allowed\");\n  271:         return kInvalidIndex;\n  272      }\n  273  \n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraph.h:\n   46          static const FileDialogFilterVec kFileExtensionFilters;\n   47  \n   48:         static const uint32_t kInvalidIndex = -1;\n   49  \n   50          ~RenderGraph();\n   ..\n  122          bool doesPassExist(const std::string& name) const { return (mNameToIndex.find(name) != mNameToIndex.end()); }\n  123  \n  124:         /** Return the index of a pass from a name, or kInvalidIndex if the pass doesn't exists\n  125          */\n  126          uint32_t getPassIndex(const std::string& name) const;\n\n/home/max/dev/Falcor/src/Falcor/Scene/HitInfo.h:\n   36  class HitInfo {\n   37   public:\n   38:     static const uint32_t kInvalidIndex = 0xffffffff;\n   39  \n   40      /** Returns defines needed packing/unpacking a HitInfo struct.\n   ..\n   57  \n   58          // assert(instanceIndexBits > 0 && triangleIndexBits > 0);\n   59:         if (instanceIndexBits + triangleIndexBits > 32 || (instanceIndexBits + triangleIndexBits == 32 && ((maxInstanceID << triangleIndexBits) | maxTriangleID) == kInvalidIndex)) {\n   60              logError(\"Scene requires > 32 bits for encoding meshInstanceID/triangleIndex. This is currently not supported.\");\n   61          }\n\n/home/max/dev/Falcor/src/Falcor/Scene/HitInfo.slang:\n   48      float2  barycentrics;       ///< Barycentric coordinates at ray hit, always in [0,1].\n   49  \n   50:     static const uint kInvalidIndex = 0xffffffff;\n   51  \n   52      /** Return the barycentric weights.\n   ..\n   80          primitiveIndex = packed.x & ((1 << (HIT_TRIANGLE_INDEX_BITS)) - 1);\n   81          barycentrics = unpackUnorm2x16(packed.y);\n   82:         return packed.x != kInvalidIndex;\n   83      }\n   84  #endif\n\n42 matches across 16 files\n\n\nSearching 472 files for \"Falcor::MeshLightData::kInvalidIndex\" (case sensitive)\n\n0 matches\n\nSearching 472 files for \"MeshLightData::kInvalidIndex\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h:\n  120          float cosConeAngle = 1.f;                       ///< Cosine normal bounding cone (half) angle.\n  121          float flux = 0.f;                               ///< Precomputed triangle flux (note, this takes doublesidedness into account).\n  122:         uint32_t triangleIndex = MeshLightData::kInvalidIndex; ///< Index into global triangle list.\n  123      };\n  124  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n  294      uint32_t instanceCount = mpScene->getMeshInstanceCount();\n  295      assert(instanceCount > 0);\n  296:     std::vector<uint32_t> triangleOffsets(instanceCount, MeshLightData::kInvalidIndex);\n  297      for (const auto& it : mMeshLights)\n  298      {\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.h:\n   94          // TODO: Perf of indexed vs non-indexed on GPU. We avoid level of indirection, but have more bandwidth non-indexed.\n   95          MeshLightVertex vtx[3];                             ///< Vertices. These are non-indexed for now.\n   96:         uint32_t        lightIdx = MeshLightData::kInvalidIndex; ///< Per-triangle index into mesh lights array.\n   97  \n   98          // Pre-computed quantities.\n\n3 matches across 3 files\n\n\nSearching 1685 files for \"D_DEBUG\" (case sensitive)\n\n/home/max/dev/Falcor/src/pxr/imaging/plugin/hdLava/debugCodes.cpp:\n   20  \n   21  TF_REGISTRY_FUNCTION(TfDebug) {\n   22:     TF_DEBUG_ENVIRONMENT_SYMBOL(LAVA_USD_DEBUG_CORE_UNSUPPORTED_ERROR, \"signal about unsupported errors\");\n   23:     TF_DEBUG_ENVIRONMENT_SYMBOL(LAVA_USD_DEBUG_DUMP_MATERIALS, \"Dump material networks to the files in the current working directory\")\n   24  }\n   25  \n\n/home/max/dev/Falcor/src/pxr/imaging/plugin/hdLava/debugCodes.h:\n   21  \n   22  TF_DEBUG_CODES(\n   23:     LAVA_USD_DEBUG_CORE_UNSUPPORTED_ERROR,\n   24:     LAVA_USD_DEBUG_DUMP_MATERIALS\n   25  );\n   26  \n\n/home/max/dev/Falcor/src/pxr/imaging/plugin/hdLava/error.h:\n   88          return false;\n   89      }\n   90:     if ((status == lava::LAVA_ERROR_UNSUPPORTED || status == lava::LAVA_ERROR_UNIMPLEMENTED) && !TfDebug::IsEnabled(LAVA_USD_DEBUG_CORE_UNSUPPORTED_ERROR)) {\n   91          return true;\n   92      }\n\n5 matches across 3 files\n\n\nSearching 30978 files for \"D_DEBUG\" (case sensitive)\n\n/home/max/dev/Falcor/build/debug/bin/assimp:\n    <binary>\n\n/home/max/dev/Falcor/build/debug/bin/unit:\n    <binary>\n\n/home/max/dev/Falcor/build/debug/lib/libassimp.so.5:\n    File too large, skipping\n\n/home/max/dev/Falcor/build/debug/lib/libassimp.so.5.0.0:\n    File too large, skipping\n\n/home/max/dev/Falcor/src/pxr/imaging/plugin/hdLava/debugCodes.cpp:\n   20  \n   21  TF_REGISTRY_FUNCTION(TfDebug) {\n   22:     TF_DEBUG_ENVIRONMENT_SYMBOL(LAVA_USD_DEBUG_CORE_UNSUPPORTED_ERROR, \"signal about unsupported errors\");\n   23:     TF_DEBUG_ENVIRONMENT_SYMBOL(LAVA_USD_DEBUG_DUMP_MATERIALS, \"Dump material networks to the files in the current working directory\")\n   24  }\n   25  \n\n/home/max/dev/Falcor/src/pxr/imaging/plugin/hdLava/debugCodes.h:\n   21  \n   22  TF_DEBUG_CODES(\n   23:     LAVA_USD_DEBUG_CORE_UNSUPPORTED_ERROR,\n   24:     LAVA_USD_DEBUG_DUMP_MATERIALS\n   25  );\n   26  \n\n/home/max/dev/Falcor/src/pxr/imaging/plugin/hdLava/error.h:\n   88          return false;\n   89      }\n   90:     if ((status == lava::LAVA_ERROR_UNSUPPORTED || status == lava::LAVA_ERROR_UNIMPLEMENTED) && !TfDebug::IsEnabled(LAVA_USD_DEBUG_CORE_UNSUPPORTED_ERROR)) {\n   91          return true;\n   92      }\n\n/home/max/dev/Falcor/third_party/assimp/CMakeLists.txt:\n  249      ADD_COMPILE_OPTIONS(/wd4351)\n  250    ENDIF()\n  251:   SET(CMAKE_CXX_FLAGS_DEBUG \"/D_DEBUG /MDd /Ob2 /DEBUG:FULL /Zi\")\n  252  ELSEIF ( \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\" )\n  253    IF(NOT HUNTER_ENABLED)\n  ...\n  542      SET(C4D_LIB_BASE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/contrib/Melange/libraries/win\")\n  543  \n  544:     SET(C4D_DEBUG_LIBRARIES\n  545        \"${C4D_LIB_BASE_PATH}/melangelib${C4D_LIB_POSTFIX}/melangelib_debug.lib\"\n  546        \"${C4D_LIB_BASE_PATH}/jpeglib${C4D_LIB_POSTFIX}/jpeglib_debug.lib\"\n\n/home/max/dev/Falcor/third_party/assimp/code/Blender/BlenderDNA.h:\n   56  \n   57  // enable verbose log output. really verbose, so be careful.\n   58: #ifdef ASSIMP_BUILD_DEBUG\n   59  #   define ASSIMP_BUILD_BLENDER_DEBUG\n   60  #endif\n\n/home/max/dev/Falcor/third_party/assimp/code/CMakeLists.txt:\n 1137  IF (ASSIMP_BUILD_NONFREE_C4D_IMPORTER)\n 1138    TARGET_LINK_LIBRARIES(assimp optimized ${C4D_RELEASE_LIBRARIES})\n 1139:   TARGET_LINK_LIBRARIES(assimp debug ${C4D_DEBUG_LIBRARIES})\n 1140    TARGET_LINK_LIBRARIES(assimp ${C4D_EXTRA_LIBRARIES})\n 1141  ENDIF (ASSIMP_BUILD_NONFREE_C4D_IMPORTER)\n\n/home/max/dev/Falcor/third_party/assimp/code/Collada/ColladaParser.cpp:\n 2416      }\n 2417  \n 2418: #ifdef ASSIMP_BUILD_DEBUG\n 2419      if (primType != Prim_TriFans && primType != Prim_TriStrips && primType != Prim_LineStrip &&\n 2420          primType != Prim_Lines) { // this is ONLY to workaround a bug in SketchUp 15.3.331 where it writes the wrong 'count' when it writes out the 'lines'.\n\n/home/max/dev/Falcor/third_party/assimp/code/Common/Importer.cpp:\n   58   */\n   59  // ------------------------------------------------------------------------------------------------\n   60: #ifndef ASSIMP_BUILD_DEBUG\n   61  #   define ASSIMP_CATCH_GLOBAL_EXCEPTIONS\n   62  #endif\n   ..\n  231      for(std::set<std::string>::const_iterator it = st.begin(); it != st.end(); ++it) {\n  232  \n  233: #ifdef ASSIMP_BUILD_DEBUG\n  234          if (IsExtensionSupported(*it)) {\n  235              ASSIMP_LOG_WARN_F(\"The file extension \", *it, \" is already in use\");\n  ...\n  538  #endif\n  539  \n  540: #ifdef ASSIMP_BUILD_DEBUG\n  541          << \" debug\"\n  542  #endif\n  ...\n  747      }\n  748  #endif // no validation\n  749: #ifdef ASSIMP_BUILD_DEBUG\n  750      if (pimpl->bExtraVerbose)\n  751      {\n  ...\n  781              break;\n  782          }\n  783: #ifdef ASSIMP_BUILD_DEBUG\n  784  \n  785  #ifdef ASSIMP_BUILD_NO_VALIDATEDS_PROCESS\n  ...\n  844      }\n  845  #endif // no validation\n  846: #ifdef ASSIMP_BUILD_DEBUG\n  847      if ( pimpl->bExtraVerbose )\n  848      {\n\n/home/max/dev/Falcor/third_party/assimp/code/Common/SpatialSort.cpp:\n  331      }\n  332  \n  333: #ifdef ASSIMP_BUILD_DEBUG\n  334  \n  335      // debug invariant: mPositions[i].mIndex values must range from 0 to mPositions.size()-1\n\n/home/max/dev/Falcor/third_party/assimp/code/Common/Subdivision.cpp:\n  382  \n  383      // check the other way round for consistency\n  384: #ifdef ASSIMP_BUILD_DEBUG\n  385  \n  386      for (size_t t = 0; t < ofsadjvec.size()-1; ++t) {\n\n/home/max/dev/Falcor/third_party/assimp/code/Common/Version.cpp:\n   92      flags |= ASSIMP_CFLAGS_SINGLETHREADED;\n   93  #endif\n   94: #ifdef ASSIMP_BUILD_DEBUG\n   95      flags |= ASSIMP_CFLAGS_DEBUG;\n   96  #endif\n\n/home/max/dev/Falcor/third_party/assimp/code/FBX/FBXConverter.cpp:\n 2673  \n 2674          // ------------------------------------------------------------------------------------------------\n 2675: #ifdef ASSIMP_BUILD_DEBUG\n 2676          // ------------------------------------------------------------------------------------------------\n 2677          // sanity check whether the input is ok\n ....\n 2691              }\n 2692          }\n 2693: #endif // ASSIMP_BUILD_DEBUG\n 2694  \n 2695          // ------------------------------------------------------------------------------------------------\n ....\n 2706              ai_assert(curves.size());\n 2707  \n 2708: #ifdef ASSIMP_BUILD_DEBUG\n 2709              validateAnimCurveNodes(curves, doc.Settings().strictMode);\n 2710  #endif\n\n/home/max/dev/Falcor/third_party/assimp/code/FBX/FBXParser.cpp:\n  588          inflateEnd(&zstream);\n  589      }\n  590: #ifdef ASSIMP_BUILD_DEBUG\n  591      else {\n  592          // runtime check for this happens at tokenization stage\n\n/home/max/dev/Falcor/third_party/assimp/code/glTF/glTFImporter.cpp:\n  201  }\n  202  \n  203: #ifdef ASSIMP_BUILD_DEBUG\n  204  static inline bool CheckValidFacesIndices(aiFace* faces, unsigned nFaces, unsigned nVerts)\n  205  {\n  ...\n  213      return true;\n  214  }\n  215: #endif // ASSIMP_BUILD_DEBUG\n  216  \n  217  void glTFImporter::ImportMeshes(glTF::Asset& r)\n\n/home/max/dev/Falcor/third_party/assimp/code/glTF2/glTF2Importer.cpp:\n  351  }\n  352  \n  353: #ifdef ASSIMP_BUILD_DEBUG\n  354  static inline bool CheckValidFacesIndices(aiFace* faces, unsigned nFaces, unsigned nVerts)\n  355  {\n  ...\n  363      return true;\n  364  }\n  365: #endif // ASSIMP_BUILD_DEBUG\n  366  \n  367  void glTF2Importer::ImportMeshes(glTF2::Asset& r)\n\n/home/max/dev/Falcor/third_party/assimp/code/Importer/IFC/IFCBoolean.cpp:\n  286          const IfcFloat t = (x*b.y - b.x*y) / det; // scale along given segment\n  287          const IfcVector3 p = e0 + e*t;\n  288: #ifdef ASSIMP_BUILD_DEBUG\n  289          const IfcVector3 check = b0 + b*s - p;\n  290          ai_assert((IfcVector2(check.x, check.y)).SquareLength() < 1e-5);\n\n/home/max/dev/Falcor/third_party/assimp/code/Importer/IFC/IFCCurve.cpp:\n  493  }\n  494  \n  495: #ifdef ASSIMP_BUILD_DEBUG\n  496  // ------------------------------------------------------------------------------------------------\n  497  bool Curve::InRange(IfcFloat u) const {\n\n/home/max/dev/Falcor/third_party/assimp/code/Importer/IFC/IFCOpenings.cpp:\n 1066          return IfcMatrix4();\n 1067      }\n 1068: #ifdef ASSIMP_BUILD_DEBUG\n 1069      const IfcFloat det = m.Determinant();\n 1070      ai_assert(std::fabs(det-1) < 1e-5);\n ....\n 1122  \n 1123      // debug code to verify correctness\n 1124: #ifdef ASSIMP_BUILD_DEBUG\n 1125      std::vector<IfcVector2> out_contour2;\n 1126      for(const IfcVector3& x : in_verts) {\n\n/home/max/dev/Falcor/third_party/assimp/code/Importer/IFC/IFCUtil.cpp:\n  211              temp[cnt++] = v.y;\n  212              temp[cnt++] = v.z;\n  213: #ifdef ASSIMP_BUILD_DEBUG\n  214              temp[cnt] = std::numeric_limits<IfcFloat>::quiet_NaN();\n  215  #endif\n\n/home/max/dev/Falcor/third_party/assimp/code/Importer/IFC/IFCUtil.h:\n  373      virtual void SampleDiscrete(TempMesh& out,IfcFloat start,IfcFloat end) const;\n  374  \n  375: #ifdef ASSIMP_BUILD_DEBUG\n  376      // check if a particular parameter value lies within the well-defined range\n  377      bool InRange(IfcFloat) const;\n\n/home/max/dev/Falcor/third_party/assimp/code/LWO/LWOLoader.cpp:\n  317                  unsigned int vVColorIndices[AI_MAX_NUMBER_OF_COLOR_SETS];\n  318  \n  319: #ifdef ASSIMP_BUILD_DEBUG\n  320                  for (unsigned int mui = 0; mui < AI_MAX_NUMBER_OF_TEXTURECOORDS;++mui ) {\n  321                      vUVChannelIndices[mui] = UINT_MAX;\n\n/home/max/dev/Falcor/third_party/assimp/code/MDL/MDLLoader.h:\n   63  // --------------------------------------------------------------------------------------\n   64  // Include file/line information in debug builds\n   65: #ifdef ASSIMP_BUILD_DEBUG\n   66  #   define VALIDATE_FILE_SIZE(msg) SizeCheck(msg,__FILE__,__LINE__)\n   67  #else\n\n/home/max/dev/Falcor/third_party/assimp/contrib/android-cmake/android.toolchain.cmake:\n 1389  set( CMAKE_CXX_FLAGS_RELEASE   \"-O3 -DNDEBUG\"            CACHE STRING \"c++ Release flags\" )\n 1390  set( CMAKE_C_FLAGS_RELEASE     \"-O3 -DNDEBUG\"            CACHE STRING \"c Release flags\" )\n 1391: set( CMAKE_CXX_FLAGS_DEBUG     \"-O0 -g -DDEBUG -D_DEBUG\" CACHE STRING \"c++ Debug flags\" )\n 1392: set( CMAKE_C_FLAGS_DEBUG       \"-O0 -g -DDEBUG -D_DEBUG\" CACHE STRING \"c Debug flags\" )\n 1393  set( CMAKE_SHARED_LINKER_FLAGS \"\"                        CACHE STRING \"shared linker flags\" )\n 1394  set( CMAKE_MODULE_LINKER_FLAGS \"\"                        CACHE STRING \"module linker flags\" )\n\n/home/max/dev/Falcor/third_party/assimp/include/assimp/ai_assert.h:\n   45  #define AI_ASSERT_H_INC\n   46  \n   47: #ifdef ASSIMP_BUILD_DEBUG\n   48  #   include <assert.h>\n   49  #   define ai_assert(expression) assert( expression )\n   ..\n   52  #   define  ai_assert(expression)\n   53  #   define  ai_assert_entry() \n   54: #endif // ASSIMP_BUILD_DEBUG\n   55  \n   56  #endif // AI_ASSERT_H_INC\n\n/home/max/dev/Falcor/third_party/assimp/include/assimp/defs.h:\n  230  \n  231  #if defined(_DEBUG) || ! defined(NDEBUG)\n  232: #   define ASSIMP_BUILD_DEBUG\n  233  #endif\n  234  \n\n/home/max/dev/Falcor/third_party/assimp/include/assimp/Macros.h:\n   42  /* Helper macro to set a pointer to NULL in debug builds\n   43   */\n   44: #if (defined ASSIMP_BUILD_DEBUG)\n   45  #   define AI_DEBUG_INVALIDATE_PTR(x) x = NULL;\n   46  #else\n\n/home/max/dev/Falcor/third_party/assimp/include/assimp/SmoothingGroups.h:\n   58      , iSmoothGroup(0) {\n   59          // in debug builds set all indices to a common magic value\n   60: #ifdef ASSIMP_BUILD_DEBUG\n   61          this->mIndices[0] = 0xffffffff;\n   62          this->mIndices[1] = 0xffffffff;\n\n/home/max/dev/Falcor/third_party/assimp/include/assimp/types.h:\n  268          data[0] = '\\0';\n  269  \n  270: #ifdef ASSIMP_BUILD_DEBUG\n  271          // Debug build: overwrite the string on its full length with ESC (27)\n  272          memset(data+1,27,MAXLEN-1);\n  ...\n  369          data[0] = '\\0';\n  370  \n  371: #ifdef ASSIMP_BUILD_DEBUG\n  372          // Debug build: overwrite the string on its full length with ESC (27)\n  373          memset(data+1,27,MAXLEN-1);\n\n/home/max/dev/Falcor/third_party/assimp/tools/assimp_view/stdafx.h:\n   39  \n   40  #if (defined _DEBUG)\n   41: #   define D3D_DEBUG_INFO\n   42  #endif\n   43  \n\n/home/max/dev/Falcor/third_party/oneTBB/examples/graph/som/Makefile:\n   48  \n   49  debug:  $(SRCFILES)\n   50: \t$(CXX) -g -O0 -DTBB_USE_DEBUG -D_DEBUG $(CXXFLAGS) -o $(EXE) $(SRCFILES) -ltbb_debug -ltbbmalloc_debug $(LIBS) $(CXX0XFLAGS)\n   51  \n   52  profile: override CXXFLAGS += -DTBB_USE_THREADING_TOOLS -g\n\n/home/max/dev/Falcor/third_party/oneTBB/examples/parallel_for/polygon_overlay/Makefile:\n   65  debug:  $(SRCFILES) resources\n   66  ifeq ($(UI),mac)\n   67: \t$(CXX_UI) -g -O0 -DTBB_USE_DEBUG -D_DEBUG $(CXXFLAGS) -c $(MACUISOURCES) $(CXX0XFLAGS)\n   68  endif # macOS\n   69: \t$(CXX) -g -O0 -DTBB_USE_DEBUG -D_DEBUG $(CXXFLAGS) -o $(EXE) $(SRCFILES) $(MACUIOBJS) -ltbb_debug -ltbbmalloc_debug $(LIBS) $(CXX0XFLAGS)\n   70  \n   71  clean:\n\n/home/max/dev/Falcor/third_party/oneTBB/examples/parallel_for/tachyon/Makefile:\n   92  \t$(MAKE) VERSION=serial build_one\n   93  build_serial_debug:\n   94: \t$(MAKE) VERSION=serial ADD_DEBUG=1 build_one\n   95  run_serial:\n   96  \t$(MAKE) VERSION=serial run_one\n   ..\n   99  \t$(MAKE) VERSION=tbb ADD_TBB=1 build_one\n  100  build_tbb_debug:\n  101: \t$(MAKE) VERSION=tbb ADD_TBB=1 ADD_DEBUG=1 build_one\n  102  run_tbb:\n  103  \t$(MAKE) VERSION=tbb run_one\n  ...\n  106  \t$(MAKE) VERSION=tbb1d ADD_TBB=1 build_one\n  107  build_tbb1d_debug:\n  108: \t$(MAKE) VERSION=tbb1d ADD_TBB=1 ADD_DEBUG=1 build_one\n  109  run_tbb1d:\n  110  \t$(MAKE) VERSION=tbb1d run_one\n  ...\n  126  SVERSION = $(VERSION)\n  127  \n  128: ifeq ($(ADD_DEBUG),1)\n  129: MYCXXFLAGS += -O0 -g -D_DEBUG\n  130  else\n  131  MYCXXFLAGS += -O2 -DNDEBUG\n  ...\n  135  ifeq ($(ADD_TBB),1)\n  136  MYCXXFLAGS +=\n  137: ifeq ($(ADD_DEBUG),1)\n  138  MYCXXFLAGS += -DTBB_USE_DEBUG\n  139  LIBS += -ltbb_debug\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/core/Makefile:\n   24    TARGET = $(TARGETDIR)/libcore.a\n   25    OBJDIR = ../../linux-x86/debug/core\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES +=\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/libcore.a\n   60    OBJDIR = ../../linux-x64/debug/core\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES +=\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/libcore.a\n   95    OBJDIR = ../../linux-aarch64/debug/core\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES +=\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/cpu-hello-world/Makefile:\n   24    TARGET = $(TARGETDIR)/cpu-hello-world\n   25    OBJDIR = ../../linux-x86/debug/cpu-hello-world\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES += -I../../.. -I../../../tools\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/cpu-hello-world\n   60    OBJDIR = ../../linux-x64/debug/cpu-hello-world\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES += -I../../.. -I../../../tools\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/cpu-hello-world\n   95    OBJDIR = ../../linux-aarch64/debug/cpu-hello-world\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES += -I../../.. -I../../../tools\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/gfx/Makefile:\n   24    TARGET = $(TARGETDIR)/libgfx.a\n   25    OBJDIR = ../../linux-x86/debug/gfx\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES += -I../../.. -I../../../external -I../../../source -I../../../external/imgui\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/libgfx.a\n   60    OBJDIR = ../../linux-x64/debug/gfx\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES += -I../../.. -I../../../external -I../../../source -I../../../external/imgui\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/libgfx.a\n   95    OBJDIR = ../../linux-aarch64/debug/gfx\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES += -I../../.. -I../../../external -I../../../source -I../../../external/imgui\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/heterogeneous-hello-world/Makefile:\n   24    TARGET = $(TARGETDIR)/heterogeneous-hello-world\n   25    OBJDIR = ../../linux-x86/debug/heterogeneous-hello-world\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES += -I../../.. -I../../../tools\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/heterogeneous-hello-world\n   60    OBJDIR = ../../linux-x64/debug/heterogeneous-hello-world\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES += -I../../.. -I../../../tools\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/heterogeneous-hello-world\n   95    OBJDIR = ../../linux-aarch64/debug/heterogeneous-hello-world\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES += -I../../.. -I../../../tools\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/render-test-tool/Makefile:\n   24    TARGET = $(TARGETDIR)/librender-test-tool.so\n   25    OBJDIR = ../../linux-x86/debug/render-test-tool\n   26:   DEFINES += -D_DEBUG -DSLANG_SHARED_LIBRARY_TOOL\n   27    INCLUDES += -I../../.. -I../../../external -I../../../source -I../../../tools/gfx\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/librender-test-tool.so\n   60    OBJDIR = ../../linux-x64/debug/render-test-tool\n   61:   DEFINES += -D_DEBUG -DSLANG_SHARED_LIBRARY_TOOL\n   62    INCLUDES += -I../../.. -I../../../external -I../../../source -I../../../tools/gfx\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/librender-test-tool.so\n   95    OBJDIR = ../../linux-aarch64/debug/render-test-tool\n   96:   DEFINES += -D_DEBUG -DSLANG_SHARED_LIBRARY_TOOL\n   97    INCLUDES += -I../../.. -I../../../external -I../../../source -I../../../tools/gfx\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/run-generators/Makefile:\n   24    TARGET = $(TARGETDIR)/librun-generators.a\n   25    OBJDIR = ../../linux-x86/debug/run-generators\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES +=\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/librun-generators.a\n   60    OBJDIR = ../../linux-x64/debug/run-generators\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES +=\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/librun-generators.a\n   95    OBJDIR = ../../linux-aarch64/debug/run-generators\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES +=\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/slang-cpp-extractor/Makefile:\n   24    TARGET = $(TARGETDIR)/slang-cpp-extractor\n   25    OBJDIR = ../../linux-x86/debug/slang-cpp-extractor\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES += -I../../..\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/slang-cpp-extractor\n   60    OBJDIR = ../../linux-x64/debug/slang-cpp-extractor\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES += -I../../..\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/slang-cpp-extractor\n   95    OBJDIR = ../../linux-aarch64/debug/slang-cpp-extractor\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES += -I../../..\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/slang-embed/Makefile:\n   24    TARGET = $(TARGETDIR)/slang-embed\n   25    OBJDIR = ../../linux-x86/debug/slang-embed\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES +=\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/slang-embed\n   60    OBJDIR = ../../linux-x64/debug/slang-embed\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES +=\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/slang-embed\n   95    OBJDIR = ../../linux-aarch64/debug/slang-embed\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES +=\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/slang-generate/Makefile:\n   24    TARGET = $(TARGETDIR)/slang-generate\n   25    OBJDIR = ../../linux-x86/debug/slang-generate\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES +=\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/slang-generate\n   60    OBJDIR = ../../linux-x64/debug/slang-generate\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES +=\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/slang-generate\n   95    OBJDIR = ../../linux-aarch64/debug/slang-generate\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES +=\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/slang-reflection-test-tool/Makefile:\n   24    TARGET = $(TARGETDIR)/libslang-reflection-test-tool.so\n   25    OBJDIR = ../../linux-x86/debug/slang-reflection-test-tool\n   26:   DEFINES += -D_DEBUG -DSLANG_SHARED_LIBRARY_TOOL\n   27    INCLUDES += -I../../..\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/libslang-reflection-test-tool.so\n   60    OBJDIR = ../../linux-x64/debug/slang-reflection-test-tool\n   61:   DEFINES += -D_DEBUG -DSLANG_SHARED_LIBRARY_TOOL\n   62    INCLUDES += -I../../..\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/libslang-reflection-test-tool.so\n   95    OBJDIR = ../../linux-aarch64/debug/slang-reflection-test-tool\n   96:   DEFINES += -D_DEBUG -DSLANG_SHARED_LIBRARY_TOOL\n   97    INCLUDES += -I../../..\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/slang-test/Makefile:\n   24    TARGET = $(TARGETDIR)/slang-test\n   25    OBJDIR = ../../linux-x86/debug/slang-test\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES += -I../../..\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/slang-test\n   60    OBJDIR = ../../linux-x64/debug/slang-test\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES += -I../../..\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/slang-test\n   95    OBJDIR = ../../linux-aarch64/debug/slang-test\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES += -I../../..\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/slang/Makefile:\n   24    TARGET = $(TARGETDIR)/libslang.so\n   25    OBJDIR = ../../linux-x86/debug/slang\n   26:   DEFINES += -D_DEBUG -DSLANG_DYNAMIC_EXPORT\n   27    INCLUDES += -I../../../external/spirv-headers/include\n   28    FORCE_INCLUDE +=\n   ..\n   61    TARGET = $(TARGETDIR)/libslang.so\n   62    OBJDIR = ../../linux-x64/debug/slang\n   63:   DEFINES += -D_DEBUG -DSLANG_DYNAMIC_EXPORT\n   64    INCLUDES += -I../../../external/spirv-headers/include\n   65    FORCE_INCLUDE +=\n   ..\n   98    TARGET = $(TARGETDIR)/libslang.so\n   99    OBJDIR = ../../linux-aarch64/debug/slang\n  100:   DEFINES += -D_DEBUG -DSLANG_DYNAMIC_EXPORT\n  101    INCLUDES += -I../../../external/spirv-headers/include\n  102    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/slang/intermediate/project/slangc/Makefile:\n   24    TARGET = $(TARGETDIR)/slangc\n   25    OBJDIR = ../../linux-x86/debug/slangc\n   26:   DEFINES += -D_DEBUG\n   27    INCLUDES +=\n   28    FORCE_INCLUDE +=\n   ..\n   59    TARGET = $(TARGETDIR)/slangc\n   60    OBJDIR = ../../linux-x64/debug/slangc\n   61:   DEFINES += -D_DEBUG\n   62    INCLUDES +=\n   63    FORCE_INCLUDE +=\n   ..\n   94    TARGET = $(TARGETDIR)/slangc\n   95    OBJDIR = ../../linux-aarch64/debug/slangc\n   96:   DEFINES += -D_DEBUG\n   97    INCLUDES +=\n   98    FORCE_INCLUDE +=\n\n/home/max/dev/Falcor/third_party/tbb/examples/graph/som/Makefile:\n   48  \n   49  debug:  $(SRCFILES)\n   50: \t$(CXX) -g -O0 -DTBB_USE_DEBUG -D_DEBUG $(CXXFLAGS) -o $(EXE) $(SRCFILES) -ltbb_debug -ltbbmalloc_debug $(LIBS) $(CXX0XFLAGS)\n   51  \n   52  profile: override CXXFLAGS += -DTBB_USE_THREADING_TOOLS -g\n\n/home/max/dev/Falcor/third_party/tbb/examples/parallel_for/polygon_overlay/Makefile:\n   65  debug:  $(SRCFILES) resources\n   66  ifeq ($(UI),mac)\n   67: \t$(CXX_UI) -g -O0 -DTBB_USE_DEBUG -D_DEBUG $(CXXFLAGS) -c $(MACUISOURCES) $(CXX0XFLAGS)\n   68  endif # macOS\n   69: \t$(CXX) -g -O0 -DTBB_USE_DEBUG -D_DEBUG $(CXXFLAGS) -o $(EXE) $(SRCFILES) $(MACUIOBJS) -ltbb_debug -ltbbmalloc_debug $(LIBS) $(CXX0XFLAGS)\n   70  \n   71  clean:\n\n/home/max/dev/Falcor/third_party/tbb/examples/parallel_for/tachyon/Makefile:\n   92  \t$(MAKE) VERSION=serial build_one\n   93  build_serial_debug:\n   94: \t$(MAKE) VERSION=serial ADD_DEBUG=1 build_one\n   95  run_serial:\n   96  \t$(MAKE) VERSION=serial run_one\n   ..\n   99  \t$(MAKE) VERSION=tbb ADD_TBB=1 build_one\n  100  build_tbb_debug:\n  101: \t$(MAKE) VERSION=tbb ADD_TBB=1 ADD_DEBUG=1 build_one\n  102  run_tbb:\n  103  \t$(MAKE) VERSION=tbb run_one\n  ...\n  106  \t$(MAKE) VERSION=tbb1d ADD_TBB=1 build_one\n  107  build_tbb1d_debug:\n  108: \t$(MAKE) VERSION=tbb1d ADD_TBB=1 ADD_DEBUG=1 build_one\n  109  run_tbb1d:\n  110  \t$(MAKE) VERSION=tbb1d run_one\n  ...\n  126  SVERSION = $(VERSION)\n  127  \n  128: ifeq ($(ADD_DEBUG),1)\n  129: MYCXXFLAGS += -O0 -g -D_DEBUG\n  130  else\n  131  MYCXXFLAGS += -O2 -DNDEBUG\n  ...\n  135  ifeq ($(ADD_TBB),1)\n  136  MYCXXFLAGS +=\n  137: ifeq ($(ADD_DEBUG),1)\n  138  MYCXXFLAGS += -DTBB_USE_DEBUG\n  139  LIBS += -ltbb_debug\n\n/home/max/dev/Falcor/third_party/USD/pxr/base/tf/debug.h:\n  106  /// To totally disable TF_DEBUG output for a set of codes at compile time,\n  107  /// declare the codes using\n  108: /// TF_CONDITIONALLY_COMPILE_TIME_ENABLED_DEBUG_CODES(condition, ...) where\n  109  /// ... is all the debug codes.  If 'condition' is false at compile time then\n  110  /// all TF_DEBUG().Msg()s for these codes are elminated at compile time, so they\n  ...\n  189      /// enabled, but the enum type \\c T must be globally enabled; this is\n  190      /// controlled by the first argument to the\n  191:     /// \\c TF_CONDITIONALLY_COMPILE_TIME_ENABLED_DEBUG_CODES() macro.\n  192      template <class T>\n  193      static bool IsEnabled(T val) {\n  ...\n  392  /// \\hideinitializer\n  393  #define TF_DEBUG_CODES(...)                                                  \\\n  394:     TF_CONDITIONALLY_COMPILE_TIME_ENABLED_DEBUG_CODES(true, __VA_ARGS__)\n  395  \n  396  /// Define debugging symbols\n  ...\n  400  /// follows:\n  401  /// \\code\n  402: /// TF_CONDITIONALLY_COMPILE_TIME_ENABLED_DEBUG_CODES(\n  403  ///   <Enabled State: a compile-time value convertible to bool>\n  404  ///   MY_E1,\n  ...\n  412  ///\n  413  /// \\hideinitializer\n  414: #define TF_CONDITIONALLY_COMPILE_TIME_ENABLED_DEBUG_CODES(condition, ...)      \\\n  415      enum _TF_DEBUG_ENUM_NAME(__VA_ARGS__) {                                    \\\n  416          __VA_ARGS__ ,                                                          \\\n\n/home/max/dev/Falcor/third_party/USD/pxr/base/tf/testenv/debug.cpp:\n   34  PXR_NAMESPACE_OPEN_SCOPE\n   35  \n   36: TF_CONDITIONALLY_COMPILE_TIME_ENABLED_DEBUG_CODES(\n   37      /*enabled=*/false,\n   38      OFF1,\n\n/home/max/dev/Falcor/third_party/USD/pxr/imaging/hd/debugCodes.h:\n   22  // language governing permissions and limitations under the Apache License.\n   23  //\n   24: #ifndef PXR_IMAGING_HD_DEBUG_CODES_H\n   25: #define PXR_IMAGING_HD_DEBUG_CODES_H\n   26  \n   27  #include \"pxr/pxr.h\"\n   ..\n   75  PXR_NAMESPACE_CLOSE_SCOPE\n   76  \n   77: #endif // PXR_IMAGING_HD_DEBUG_CODES_H\n   78  \n\n/home/max/dev/Falcor/third_party/USD/pxr/usd/pcp/changes.cpp:\n  125  }\n  126  \n  127: #define PCP_APPEND_DEBUG(...)                       \\\n  128      if (!debugSummary) ; else                    \\\n  129          *debugSummary += TfStringPrintf(__VA_ARGS__)\n  ...\n  359          for (const auto& change : entry.infoChanged) {\n  360              if (cache->IsPossibleDynamicFileFormatArgumentField(change.first)) {\n  361:                 PCP_APPEND_DEBUG(\"  Info change for field '%s' may affect \"\n  362                                   \"dynamic file format arguments\\n\",\n  363                                   change.first.GetText());\n  ...\n  402      std::string *debugSummary)\n  403  {\n  404:     PCP_APPEND_DEBUG(\n  405          \"Pcp_DoesInfoChangeAffectFileFormatArguments %s:%s?\\n\",\n  406          cache->GetLayerStackIdentifier().rootLayer->GetIdentifier().c_str(),\n  ...\n  413          cache->GetDynamicFileFormatArgumentDependencyData(primIndexPath);\n  414      if (depData.IsEmpty()) {\n  415:         PCP_APPEND_DEBUG(\"  Prim index has no dynamic file format dependencies\\n\");\n  416          return false;\n  417      }\n  ...\n  423              depData.CanFieldChangeAffectFileFormatArguments(\n  424                  change.first, change.second.first, change.second.second);\n  425:         PCP_APPEND_DEBUG(\"  Field '%s' change: %s -> %s \"\n  426                           \"%s relevant for prim index path '%s'\\n\",\n  427                           change.first.GetText(),\n  ...\n  465          /* filter */ onlyExistingDependentPaths);\n  466  \n  467:     PCP_APPEND_DEBUG(\n  468          \"   Resync following in @%s@ %s due to Sdf site @%s@<%s>%s:\\n\",\n  469          cache->GetLayerStackIdentifier()\n  ...\n  479      // Run the process function on each found dependency.\n  480      for (const auto& dep: deps) {\n  481:         PCP_APPEND_DEBUG(\n  482              \"    <%s> depends on <%s>\\n\",\n  483              dep.indexPath.GetText(),\n  ...\n  487      }\n  488  \n  489:     PCP_APPEND_DEBUG(\"   Resync end\\n\");\n  490  }\n  491  \n  ...\n  542      std::string* debugSummary = TfDebug::IsEnabled(PCP_CHANGES) ? &summary : 0;\n  543  \n  544:     PCP_APPEND_DEBUG(\"  Caches:\\n\");\n  545      for (const PcpCache* cache: caches) {\n  546:         PCP_APPEND_DEBUG(\"    %s\\n\",\n  547                   TfStringify(cache->GetLayerStack()->GetIdentifier()).c_str());\n  548      }\n  ...\n  572  \n  573              if (!hasPrimChanges) {\n  574:                 PCP_APPEND_DEBUG(\n  575                      \"  Layer @%s@ changed:  skipping non-prim changes\\n\",\n  576                      layer->GetIdentifier().c_str());\n  ...\n  594          }\n  595          if (cacheLayerStacks.empty()) {\n  596:             PCP_APPEND_DEBUG(\"  Layer @%s@ changed:  unused\\n\",\n  597                               layer->GetIdentifier().c_str());\n  598              continue;\n  599          }\n  600  \n  601:         PCP_APPEND_DEBUG(\"  Changes to layer %s:\\n%s\",\n  602                           layer->GetIdentifier().c_str(),\n  603                           TfStringify(changeList).c_str());\n  ...\n  696                                                             sublayerChange);\n  697                                  \n  698:                                 PCP_APPEND_DEBUG(\n  699                                      \"  Layer @%s@ changed sublayers\\n\",\n  700                                      layer ? \n  ...\n  722                                              LayerStackSignificantChange;\n  723                      pathsWithSignificantChanges.insert(path);\n  724:                     PCP_APPEND_DEBUG(\"  Layer @%s@ changed:  significant\\n\",\n  725                                       layer->GetIdentifier().c_str());\n  726                      break;\n  ...\n  743                          //      that's currently done for relocates.\n  744                          pathsWithSignificantChanges.insert(path);\n  745:                         PCP_APPEND_DEBUG(\"  Layer @%s@ changed:  \"\n  746                                           \"layer offsets (significant)\\n\",\n  747                                           layer->GetIdentifier().c_str());\n  ...\n  781                      oldPaths.push_back(entry.oldPath);\n  782                      newPaths.push_back(path);\n  783:                     PCP_APPEND_DEBUG(\"  Renamed @%s@<%s> to <%s>\\n\",\n  784                                       layer->GetIdentifier().c_str(),\n  785                                       entry.oldPath.GetText(), path.GetText());\n  ...\n  799                          if (Pcp_ChangeMayAffectDynamicFileFormatArguments(\n  800                                  cache, entry, debugSummary)) {\n  801:                             PCP_APPEND_DEBUG(\n  802                                  \"  Info change on @%s@<%s> may affect file \"\n  803                                  \"format arguments in cache '%s'\\n\",\n  ...\n  828                          oldPaths.push_back(entry.oldPath);\n  829                          newPaths.push_back(path);\n  830:                         PCP_APPEND_DEBUG(\"  Renamed @%s@<%s> to <%s>\\n\",\n  831                                           layer->GetIdentifier().c_str(),\n  832                                           entry.oldPath.GetText(),path.GetText());\n  ...\n  867                      if (Pcp_NeedToRecomputeLayerStackTimeCodesPerSecond(\n  868                              layerStack, layer)) {\n  869:                         PCP_APPEND_DEBUG(\"  Layer @%s@ changed:  \"\n  870                                           \"root layer stack TCPS (significant)\\n\",\n  871                                           layer->GetIdentifier().c_str());\n  ...\n 1151                          }\n 1152                          renameChanges[dep.indexPath] = newIndexPath;\n 1153:                         PCP_APPEND_DEBUG(\"  renameChanges <%s> to <%s>\\n\",\n 1154                               dep.indexPath.GetText(),\n 1155                               newIndexPath.GetText());\n ....\n 1205          cache->FindAllLayerStacksUsingLayer(mutedLayer);\n 1206  \n 1207:     PCP_APPEND_DEBUG(\"  Did mute layer @%s@\\n\", layerId.c_str());\n 1208  \n 1209      if (!layerStacks.empty()) {\n ....\n 1233          cache->_layerStackCache->FindAllUsingMutedLayer(layerId);\n 1234  \n 1235:     PCP_APPEND_DEBUG(\"  Did unmute layer @%s@\\n\", layerId.c_str());\n 1236  \n 1237      if (!layerStacks.empty()) {\n ....\n 1266          cache->FindAllLayerStacksUsingLayer(layer);\n 1267  \n 1268:     PCP_APPEND_DEBUG(\n 1269          \"  Layer @%s@ changed sublayer @%s@\\n\",\n 1270          layer ? layer->GetIdentifier().c_str() : \"invalid\",\n ....\n 1334      m.Clear();\n 1335      \n 1336:     PCP_APPEND_DEBUG(\"  Asset @%s@ %s\\n\",\n 1337                       assetPath.c_str(),\n 1338                       layer ? (layer->IsEmpty() ? \"insignificant\"\n ....\n 1345  \n 1346          // Mark prims using site as changed.\n 1347:         PCP_APPEND_DEBUG(\n 1348              \"Resync following in @%s@ significantly due to \"\n 1349              \"loading asset used by @%s@<%s>:\\n\",\n ....\n 1353                   GetIdentifier().c_str(), site.path.GetText());\n 1354          if (layerStack == cache->GetLayerStack()) {\n 1355:             PCP_APPEND_DEBUG(\"    <%s>\\n\", site.path.GetText());\n 1356              DidChangeSignificantly(cache, site.path);\n 1357          }\n ....\n 1363                                          /* filter */ true);\n 1364          for(const auto &dep: deps) {\n 1365:             PCP_APPEND_DEBUG(\"    <%s>\\n\", dep.indexPath.GetText());\n 1366              DidChangeSignificantly(cache, dep.indexPath);\n 1367          }\n ....\n 1687          const SdfPath& newPath = change.second;\n 1688  \n 1689:         PCP_APPEND_DEBUG(\"  Sd only path change @%s@<%s> to <%s>\\n\",\n 1690                           cache->GetLayerStackIdentifier().rootLayer->\n 1691                               GetIdentifier().c_str(),\n ....\n 1789      *significant = (sublayer && !sublayer->IsEmpty());\n 1790  \n 1791:     PCP_APPEND_DEBUG(\"  %s sublayer @%s@ %s\\n\",\n 1792                       sublayer ? (*significant ? \"significant\"\n 1793                                                : \"insignificant\")\n ....\n 1843              }\n 1844              if (!anyFound) {\n 1845:                 PCP_APPEND_DEBUG(\n 1846                      \"  %s following in @%s@ due to \"\n 1847                      \"%s reload in sublayer @%s@:\\n\",\n ....\n 1853                  anyFound = true;\n 1854              }\n 1855:             PCP_APPEND_DEBUG(\"    <%s>\\n\", dep.indexPath.GetText());\n 1856              if (*significant) {\n 1857                  DidChangeSignificantly(cache, dep.indexPath);\n ....\n 1955      // Use dependencies to find affected caches.\n 1956      if (!changes.pathsAffectedByRelocationChanges.empty()) {\n 1957:         PCP_APPEND_DEBUG(\"  Relocation change in %s affects:\\n\",\n 1958                           TfStringify(layerStack).c_str());\n 1959      }\n ....\n 1968          SdfPathSet depPathSet;\n 1969          for (const SdfPath& path : changes.pathsAffectedByRelocationChanges) {\n 1970:             PCP_APPEND_DEBUG(\"    <%s>\\n\", path.GetText());\n 1971  \n 1972              PcpDependencyVector deps =\n ....\n 1983  \n 1984          if (!depPathSet.empty()) {\n 1985:             PCP_APPEND_DEBUG(\"  and dependent paths in %s\\n\",\n 1986                               TfStringify(layerStack).c_str());\n 1987          }\n 1988          for (const SdfPath& depPath : depPathSet) {\n 1989:             PCP_APPEND_DEBUG(\"      <%s>\\n\", depPath.GetText());\n 1990              DidChangeSignificantly(cache, depPath);\n 1991          }\n ....\n 2027          }\n 2028  \n 2029:         PCP_APPEND_DEBUG(\n 2030              \"   Resync following in @%s@ significant due to layer \"\n 2031              \"resolved path change:\\n\",\n ....\n 2034  \n 2035          for (const PcpDependency& dep : deps) {\n 2036:             PCP_APPEND_DEBUG(\"    <%s>\\n\", dep.indexPath.GetText());\n 2037              DidChangeSignificantly(cache, dep.indexPath);\n 2038          }\n\n/home/max/dev/Falcor/third_party/USD/pxr/usd/usd/debugCodes.h:\n   22  // language governing permissions and limitations under the Apache License.\n   23  //\n   24: #ifndef PXR_USD_USD_DEBUG_CODES_H\n   25: #define PXR_USD_USD_DEBUG_CODES_H\n   26  \n   27  #include \"pxr/pxr.h\"\n   ..\n   55  PXR_NAMESPACE_CLOSE_SCOPE\n   56  \n   57: #endif // PXR_USD_USD_DEBUG_CODES_H\n   58  \n\n/home/max/dev/Falcor/venv/lib/python3.7/site-packages/PySide2/Qt/lib/libQt5WebEngineCore.so.5:\n    File too large, skipping\n\n/home/max/dev/Falcor/venv/lib/python3.7/site-packages/setuptools/_distutils/_msvccompiler.py:\n  251  \n  252          self.compile_options_debug = [\n  253:             '/nologo', '/Od', '/MDd', '/Zi', '/W3', '/D_DEBUG'\n  254          ]\n  255  \n\n/home/max/dev/Falcor/venv/lib/python3.7/site-packages/setuptools/_distutils/msvc9compiler.py:\n  403                                       '/DNDEBUG']\n  404              self.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3',\n  405:                                           '/Z7', '/D_DEBUG']\n  406          else:\n  407              # Win64\n  ...\n  409                                       '/DNDEBUG']\n  410              self.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3', '/GS-',\n  411:                                           '/Z7', '/D_DEBUG']\n  412  \n  413          self.ldflags_shared = ['/DLL', '/nologo', '/INCREMENTAL:NO']\n\n/home/max/dev/Falcor/venv/lib/python3.7/site-packages/setuptools/_distutils/msvccompiler.py:\n  287                                       '/DNDEBUG']\n  288              self.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3', '/GX',\n  289:                                           '/Z7', '/D_DEBUG']\n  290          else:\n  291              # Win64\n  ...\n  293                                       '/DNDEBUG']\n  294              self.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3', '/GS-',\n  295:                                           '/Z7', '/D_DEBUG']\n  296  \n  297          self.ldflags_shared = ['/DLL', '/nologo', '/INCREMENTAL:NO']\n\n159 matches across 58 files\n\n\nSearching 164 files for \"getFormatImageTiling\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  105      }\n  106  \n  107:     static VkImageTiling getFormatImageTiling(std::shared_ptr<Device> device, VkFormat format, VkImageUsageFlags usage) {\n  108          VkFormatProperties p;\n  109          vkGetPhysicalDeviceFormatProperties(device->getApiHandle(), format, &p);\n  ...\n  134          imageInfo.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;\n  135          imageInfo.usage = getVkImageUsageFlags(mBindFlags);\n  136:         imageInfo.tiling = getFormatImageTiling(mpDevice, imageInfo.format, imageInfo.usage);\n  137  \n  138          if (mType == Texture::Type::TextureCube) {\n\n2 matches in 1 file\n\n\nSearching 472 files for \"prepareShadingData\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang:\n  132  /** Helper function for populating the geometry and material parameters of a ShadingData struct.\n  133  */\n  134: ShadingData prepareShadingData(GeometryParams geoParams, MaterialParams matParams)\n  135  {\n  136      ShadingData sd = {};\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/LoadShadingData.slang:\n  102      {\n  103          // Evaluate Falcor's material parameters at the hit point.\n  104:         // TODO: Implement texLOD to enable texture filtering in prepareShadingData().\n  105          VertexData v = gScene.getVertexData(hit);\n  106          const uint materialID = gScene.getMaterialID(hit.meshInstanceID);\n  107:         sd = prepareShadingData(v, materialID, gScene.materials[materialID], gScene.materialResources[materialID], -rayDir, 0.f);\n  108  \n  109          // Compute tangent space if it is invalid.\n  ...\n  133          matParams.extraParams = gMaterialExtraParams[pixel];\n  134  \n  135:         sd = prepareShadingData(geoParams, matParams);\n  136          if (isValid(gVBuffer))\n  137          {\n\n/home/max/dev/Falcor/src/Falcor/Scene/Raster.slang:\n  114      This version uses implicit LOD and fetches material data directly from the scene.\n  115  */\n  116: ShadingData prepareShadingData(VSOut vsOut, uint triangleIndex, float3 viewDir)\n  117  {\n  118      float3 faceNormal = gScene.getFaceNormalW(vsOut.meshInstanceID, triangleIndex);\n  119      VertexData v = prepareVertexData(vsOut, faceNormal);\n  120:     return prepareShadingData(v, vsOut.materialID, gScene.materials[vsOut.materialID], gScene.materialResources[vsOut.materialID], viewDir);\n  121  }\n  122  \n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneTypes.slang:\n  196      Note the tangent is not guaranteed to be orthogonal to the normal.\n  197      The bitangent should be computed: cross(normal, tangent.xyz) * tangent.w.\n  198:     The tangent space is orthogonalized in prepareShadingData().\n  199  */\n  200  struct VertexData\n\n/home/max/dev/Falcor/src/Falcor/Scene/Shading.slang:\n  135  }\n  136  \n  137: /** Internal implementation of `prepareShadingData`\n  138  \n  139      The `lod` parameter represents the method to use for computing\n  140      texture level of detail, and must implement the `ITextureSampler` interface.\n  141  */\n  142: ShadingData _prepareShadingData<L:ITextureSampler>(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir, L lod, bool useNormalMap)\n  143  {\n  144      ShadingData sd = {};\n  ...\n  236  /** Prepare the hit-point data\n  237  */\n  238: ShadingData prepareShadingData(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir)\n  239  {\n  240      ImplicitLodTextureSampler lod = { };\n  241:     return _prepareShadingData(v, materialID, md, mr, viewDir, lod, true);\n  242  }\n  243  \n  ...\n  247      texture fetches.\n  248  */\n  249: ShadingData prepareShadingData(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir, float lod)\n  250  {\n  251      ExplicitLodTextureSampler explicitLOD = { lod };\n  252:     return _prepareShadingData(v, materialID, md, mr, viewDir, explicitLOD, true);\n  253  }\n  254  \n  ...\n  261      \\param[in] lodMinusTexDim Texture level-of-details for ray cones with the texture dimensions subtracted out. See TextureSampler and TexLODHelpers.\n  262  */\n  263: ShadingData prepareShadingDataUsingRayConesLOD(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 camPosW, float lodMinusTexDim)\n  264  {\n  265      ExplicitRayConesLodTextureSampler explicitRayConesLOD = { lodMinusTexDim };\n  266:     return _prepareShadingData(v, materialID, md, mr, camPosW, explicitRayConesLOD, true);\n  267  }\n  268  \n  ...\n  276      \\param[in] dUVdy Differential texture coordinates in y.\n  277  */\n  278: ShadingData prepareShadingDataUsingRayDiffsLOD(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 camPosW, float2 dUVdx, float2 dUVdy)\n  279  {\n  280      ExplicitRayDiffsLodTextureSampler explicitRayDiffsLOD = { dUVdx, dUVdy };\n  281:     return _prepareShadingData(v, materialID, md, mr, camPosW, explicitRayDiffsLOD, true);\n  282  }\n  283  \n  ...\n  288      values will be used for all material texture fetches.\n  289  */\n  290: ShadingData prepareShadingData(VertexData v, uint materialID, MaterialData md, MaterialResources mr, float3 viewDir, float2 gradX, float2 gradY)\n  291  {\n  292      ExplicitGradientTextureSampler lod = { gradX, gradY };\n  293:     return _prepareShadingData(v, materialID, md, mr, viewDir, lod, true);\n  294  }\n  295  \n\n19 matches across 5 files\n\n\nSearching 9 files for \"opdef:\" (case sensitive)\n\n/home/max/dev/Falcor/src/houdini/soho/python2.7/LSDframe.py:\n  893          flipnormal = uvlist['lv_uv_flip_normal'].Value[0]\n  894          cmd_property('renderer', 'lensshader',\n  895:                      ['opdef:/Shop/v_uvlens unwrap_method %d cmd_bias %g cmd_maxdist %g flipnormal \"%d\"' \\\n  896                     % (unwrap_method, cmd_bias, cmd_maxdist, flipnormal)], False)\n  897  \n  ...\n  914          vreyetoneckdistance = cam.wrangleFloat(wrangler, 'vreyetoneckdistance', now, [0])[0]\n  915          cmd_property('renderer', 'lensshader',\n  916:                      ['opdef:/Shop/v_vrlens layout %d projection %d swapLeftRight %d preserveAspectRatio %d \\\n  917                       mergeMode %g mergeAngle %g \\\n  918                       horizontalFOV %g verticalFOV %g \\\n\n/home/max/dev/Falcor/src/houdini/soho/python2.7/wranglers/HoudiniLightLSD.py:\n  251  \n  252      if ltype == 'ambient':\n  253:         shader = 'opdef:/Shop/v_ambient lightcolor %g %g %g' % \\\n  254                  ( light_color[0], light_color[1], light_color[2] )\n  255          value[:] = [shader]\n  256          return True\n  257  \n  258:     shader = 'opdef:/Shop/v_asadlight lightcolor %g %g %g' % \\\n  259                  ( light_color[0], light_color[1], light_color[2] )\n  260  \n  ...\n  318  \n  319      if stype == 'raytrace' or (forceraytrace and isPreviewMode()):\n  320:         shader = 'opdef:/Shop/v_rayshadow'\n  321          if transparent:\n  322              shader += ' shadowtype filter'\n  ...\n  330          else:\n  331              style = 'zdepth'\n  332:         shader = 'opdef:/Shop/v_rayshadow shadowtype %s' % style\n  333          shader += ' map \"%s\"' % map.replace('\"', '\\\\\"')\n  334          shader += ' spread %g' % softness\n  ...\n  358  \n  359      if not isarealighttype(ltype):\n  360:         value[:] = ['opdef:/Shop/v_constant']\n  361          return True\n  362  \n  363      light_color = get_color(plist)\n  364  \n  365:     shader = 'opdef:/Shop/v_arealight'\n  366  \n  367      # Only output the light color for if it's not a point cloud render\n  ...\n  400  \n  401      if ispclight(obj, now):\n  402:         shader = 'opdef:/Shop/v_sampler_pclight'\n  403          shader += ' pcfile %s' % plist['pc_file'].Value[0]\n  404          shader += ' pcsamples %g' % plist['pc_samples'].Value[0]\n  405      else:\n  406:         shader = 'opdef:/Shop/v_sampler_geometry'\n  407  \n  408      shader += ' selfshadow %d' % plist['selfshadow'].Value[0]\n  ...\n  417      plist = obj.evaluate(samplerParms, now)\n  418  \n  419:     shader = 'opdef:/Shop/v_tracer_pclight'\n  420      shader += ' pcfile %s' % plist['pc_file'].Value[0]\n  421      shader += ' pcsamples %g' % plist['pc_samples'].Value[0]\n  ...\n  514      if ispclight(obj, now):\n  515          plist = obj.evaluate(pbrshaderParms, now)\n  516:         value[0] = 'opdef:/Shop/v_pcwriter pcfile %s' % plist['pc_file'].Value[0]\n  517          return True\n  518      return False\n\n12 matches across 2 files\n\n\nSearching 60 files for \"evalMaterial\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/Shading.slang:\n  312  };\n  313  \n  314: ShadingResult evalMaterial(ShadingData sd, LightData light, float shadowFactor)\n  315  {\n  316      ShadingResult sr = {};\n  ...\n  337  };\n  338  \n  339: ShadingResult evalMaterial(ShadingData sd, LightProbeData probe)\n  340  {\n  341      ShadingResult sr = {};\n\n2 matches in 1 file\n\n\nSearching 60 files for \"evalLight\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/Lights.slang:\n  113  /** Evaluate a light source intensity/direction at a shading point\n  114  */\n  115: LightSample evalLight(LightData light, ShadingData sd)\n  116  {\n  117      LightSample ls;\n  ...\n  137  }\n  138  \n  139: float3 evalLightProbeDiffuse(LightProbeData probe, ShadingData sd)\n  140  {\n  141      float3 N = getDiffuseDominantDir(sd.N, sd.V, sd.ggxAlpha);\n  ...\n  164  }\n  165  \n  166: float3 evalLightProbeSpecular(LightProbeData probe, ShadingData sd, float3 L)\n  167  {\n  168      float dfgWidth, dfgHeight;\n  ...\n  197  /** Evaluate a 2D light-probe filtered using linear-filtering\n  198  */\n  199: LightSample evalLightProbeLinear2D(LightProbeData probe, ShadingData sd)\n  200  {\n  201      LightSample ls;\n  ...\n  205  \n  206      // Evaluate diffuse component\n  207:     ls.diffuse = evalLightProbeDiffuse(probe, sd);\n  208  \n  209      // Get the specular component\n  210:     ls.specular = evalLightProbeSpecular(probe, sd, ls.L);\n  211  \n  212      ls.diffuse *= probe.intensity;\n  ...\n  221  /** Evaluate the properties of a light-probe\n  222  */\n  223: LightSample evalLightProbe(LightProbeData probe, ShadingData sd)\n  224  {\n  225:     return evalLightProbeLinear2D(probe, sd);\n  226  }\n  227  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Shading.slang:\n  315  {\n  316      ShadingResult sr = {};\n  317:     LightSample ls = evalLight(light, sd);\n  318  \n  319      // If the light doesn't hit the surface or we are viewing the surface from the back, return\n  ...\n  340  {\n  341      ShadingResult sr = {};\n  342:     LightSample ls = evalLightProbe(probe, sd);\n  343  \n  344      sr.diffuse = ls.diffuse;\n\n10 matches across 2 files\n\n\nSearching 472 files for \"vkCreatePipeline\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRootSignature.cpp:\n  167  \n  168          VkPipelineLayout layout;\n  169:         vk_call(vkCreatePipelineLayout(mpDevice->getApiHandle(), &pipelineLayoutInfo, nullptr, &layout));\n  170          mApiHandle = ApiHandle::create(mpDevice, layout, vkSetLayouts);\n  171  \n\n1 match in 1 file\n\n\nSearching 472 files for \"Pipeline\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ComputeContext.cpp:\n   94  \n   95          mpLastBoundComputeVars = pVars;\n   96:         mpLowLevelData->getCommandList()->SetPipelineState(pCSO->getApiHandle());\n   97          mCommandsPending = true;\n   98          return true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ComputeStateObject.cpp:\n   68          }\n   69          ComputeStateObject::ApiHandle apiHandle;\n   70:         auto ret = NvAPI_D3D12_CreateComputePipelineState(gpDevice->getApiHandle(), &desc, (NvU32)nvDescVec.size(), ppPSOExtensionsDesc, &apiHandle);\n   71  \n   72          if (ret != NVAPI_OK || apiHandle == nullptr)\n   ..\n  111          else\n  112          {\n  113:             d3d_call(gpDevice->getApiHandle()->CreateComputePipelineState(&desc, IID_PPV_ARGS(&mApiHandle)));\n  114          }\n  115      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12GraphicsStateObject.cpp:\n   72          }\n   73          GraphicsStateObject::ApiHandle apiHandle;\n   74:         auto ret = NvAPI_D3D12_CreateGraphicsPipelineState(gpDevice->getApiHandle(), &desc, (NvU32)nvDescVec.size(), ppPSOExtensionsDesc, &apiHandle);\n   75  \n   76          if (ret != NVAPI_OK || apiHandle == nullptr)\n   ..\n  110          else\n  111          {\n  112:             d3d_call(gpDevice->getApiHandle()->CreateGraphicsPipelineState(&d3dDesc, IID_PPV_ARGS(&mApiHandle)));\n  113          }\n  114      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12QueryHeap.cpp:\n   40          case QueryHeap::Type::Occlusion:\n   41              return D3D12_QUERY_HEAP_TYPE_OCCLUSION;\n   42:         case QueryHeap::Type::PipelineStats:\n   43              return D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS;\n   44          default:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  314          if (is_set(StateBindFlags::Viewports, mBindFlags))          D3D12SetViewports(pList, &pState->getViewport(0));\n  315          if (is_set(StateBindFlags::Scissors, mBindFlags))           D3D12SetScissors(pList, &pState->getScissors(0));\n  316:         if (is_set(StateBindFlags::PipelineState, mBindFlags))      pList->SetPipelineState(pGSO->getApiHandle());\n  317  \n  318          BlendState::SharedPtr blendState = pState->getBlendState();\n  ...\n  412          // Dispatch\n  413          GET_COM_INTERFACE(pCmdList, ID3D12GraphicsCommandList4, pList4);\n  414:         pList4->SetPipelineState1(pRtso->getApiHandle().GetInterfacePtr());\n  415          pList4->DispatchRays(&raytraceDesc);\n  416      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  189      MAKE_SMART_COM_PTR(ID3D12Resource);\n  190      MAKE_SMART_COM_PTR(ID3D12Fence);\n  191:     MAKE_SMART_COM_PTR(ID3D12PipelineState);\n  192      MAKE_SMART_COM_PTR(ID3D12RootSignature);\n  193      MAKE_SMART_COM_PTR(ID3D12QueryHeap);\n  ...\n  222      using SharedResourceApiHandle = HANDLE;\n  223  \n  224:     using GraphicsStateHandle = ID3D12PipelineStatePtr;\n  225:     using ComputeStateHandle = ID3D12PipelineStatePtr;\n  226      using ShaderHandle = D3D12_SHADER_BYTECODE;\n  227      using RootSignatureHandle = ID3D12RootSignaturePtr;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/QueryHeap.h:\n   47          Timestamp,\n   48          Occlusion,\n   49:         PipelineStats\n   50      };\n   51  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n   65          Viewports       = 0x10,             /// <Bind Viewport\n   66          Scissors        = 0x20,             /// <Bind scissors\n   67:         PipelineState   = 0x40,             /// <Bind Pipeline State Object\n   68          SamplePositions = 0x80,             /// <Set the programmable sample positions\n   69          All             = uint32_t(-1)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n  103  using QueryHeapHandle = VkHandle<VkQueryPool>::SharedPtr;\n  104  \n  105: using GraphicsStateHandle = VkHandle<VkPipeline>::SharedPtr;\n  106: using ComputeStateHandle = VkHandle<VkPipeline>::SharedPtr;\n  107  using ShaderHandle = VkHandle<VkShaderModule>::SharedPtr;\n  108  using ShaderReflectionHandle = void*;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n   60  \n   61          mpLastBoundComputeVars = pVars;\n   62:         mpLowLevelData->getCommandList()->SetPipelineState(pCSO->getApiHandle());\n   63          mCommandsPending = true;\n   64          return true;\n   ..\n   85          //auto cso_api_handle = pCSO->getApiHandle();\n   86          \n   87:         //LOG_DBG(\"vkCmdBindPipeline\");\n   88:         vkCmdBindPipeline(mpLowLevelData->getCommandList(), VK_PIPELINE_BIND_POINT_COMPUTE, pCSO->getApiHandle());\n   89:         //vkCmdBindPipeline(cmd_list, VK_PIPELINE_BIND_POINT_COMPUTE, cso_api_handle);\n   90  \n   91          mpLastBoundComputeVars = pVars;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp:\n   38  \n   39  void ComputeStateObject::apiInit() {\n   40:     std::vector<VkPipelineShaderStageCreateInfo> shaderStageInfos;\n   41      //initVkShaderStageInfo(mDesc.getProgramVersion().get(), shaderStageInfos);\n   42      initVkShaderStageInfo(mDesc.getProgramKernels(), shaderStageInfos);\n   43      assert(shaderStageInfos.size() == 1);\n   44  \n   45:     VkComputePipelineCreateInfo info = {};\n   46      info.pNext = nullptr;\n   47      info.flags = 0;\n   48:     info.basePipelineHandle = VK_NULL_HANDLE;\n   49      info.sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;\n   50      info.stage = shaderStageInfos[0];\n   ..\n   52  \n   53  \n   54:     VkPipeline pipeline;\n   55:     if (VK_FAILED(vkCreateComputePipelines(mpDevice->getApiHandle(), VK_NULL_HANDLE, 1, &info, nullptr, &pipeline))) {\n   56          throw std::runtime_error(\"Could not create compute pipeline.\");\n   57      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n  122      }\n  123  \n  124:     static VkPipelineStageFlags getShaderStageMask(Resource::State state, bool src) {\n  125          switch (state) {\n  126          case Resource::State::Undefined:\n  ...\n  255          barrier.dstAccessMask = getAccessMask(newState);\n  256  \n  257:         vkCmdPipelineBarrier(mpLowLevelData->getCommandList(), getShaderStageMask(oldState, true), getShaderStageMask(newState, false), 0, 0, nullptr, 0, nullptr, 1, &barrier);\n  258      }\n  259  \n  ...\n  278              barrier.dstAccessMask = getAccessMask(newState);\n  279  \n  280:             VkPipelineStageFlags srcStageMask = getShaderStageMask(pTexture->getGlobalState(), true);\n  281:             VkPipelineStageFlags dstStageMask = getShaderStageMask(newState, false);\n  282:             vkCmdPipelineBarrier(mpLowLevelData->getCommandList(), srcStageMask, dstStageMask, 0, 0, nullptr, 0, nullptr, 1, &barrier);\n  283  \n  284              pTexture->setGlobalState(newState);\n  ...\n  293          assert(pBuffer->getApiHandle().getType() == VkResourceType::Buffer);\n  294  \n  295:         VkPipelineStageFlags srcStageMask = getShaderStageMask(pBuffer->getGlobalState(), true);\n  296:         VkPipelineStageFlags dstStageMask = getShaderStageMask(newState, false);\n  297  \n  298          if (srcStageMask != dstStageMask) {\n  ...\n  305              barrier.size = pBuffer->getSize();\n  306  \n  307:             vkCmdPipelineBarrier(mpLowLevelData->getCommandList(), srcStageMask, dstStageMask, 0, 0, nullptr, 1, &barrier, 0, nullptr);\n  308  \n  309              pBuffer->setGlobalState(newState);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n  146      template<bool forGraphics>\n  147      static void bindCommon(DescriptorSet::ApiHandle set, CopyContext* pCtx, const RootSignature* pRootSig, uint32_t bindLocation) {\n  148:         VkPipelineBindPoint bindPoint = forGraphics ? VK_PIPELINE_BIND_POINT_GRAPHICS : VK_PIPELINE_BIND_POINT_COMPUTE;\n  149          VkDescriptorSet vkSet = set;\n  150          vkCmdBindDescriptorSets(pCtx->getLowLevelData()->getCommandList(), bindPoint, pRootSig->getApiHandle(), bindLocation, 1, &vkSet, 0, nullptr);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGpuFence.cpp:\n  154          static const uint32_t waitThreshold = 20;\n  155          static const uint32_t waitCount = 10;\n  156:         static const std::vector<VkPipelineStageFlags> waitStages(waitCount, VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT);\n  157  \n  158          if (mpApiData->semaphoreWaitList.size() > waitThreshold) {\n  ...\n  183          submit.waitSemaphoreCount = (uint32_t)mpApiData->semaphoreWaitList.size();\n  184          submit.pWaitSemaphores = mpApiData->semaphoreWaitList.data();\n  185:         const std::vector<VkPipelineStageFlags> waitStages(submit.waitSemaphoreCount, VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT);\n  186          submit.pWaitDstStageMask = waitStages.data();\n  187  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp:\n   40      void GraphicsStateObject::apiInit() {\n   41          // Shader Stages\n   42:         std::vector<VkPipelineShaderStageCreateInfo> shaderStageInfos;\n   43          //initVkShaderStageInfo(mDesc.getProgramVersion().get(), shaderStageInfos);\n   44          initVkShaderStageInfo(mDesc.getProgramKernels(), shaderStageInfos);\n   ..\n   49  \n   50          // Input Assembly State\n   51:         VkPipelineInputAssemblyStateCreateInfo inputAssemblyInfo = {};\n   52          initVkInputAssemblyInfo(mDesc.getVao().get(), inputAssemblyInfo);\n   53          \n   54          // Viewport State\n   55          // Viewport and Scissors will be dynamic, but the count is still described here in the info struct\n   56:         VkPipelineViewportStateCreateInfo viewportStateInfo = {};\n   57          viewportStateInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;\n   58          viewportStateInfo.viewportCount = getMaxViewportCount(mpDevice);\n   ..\n   60  \n   61          // Rasterizerization State\n   62:         VkPipelineRasterizationStateCreateInfo rasterizerInfo = {};\n   63          initVkRasterizerInfo(mDesc.getRasterizerState().get(), rasterizerInfo);\n   64  \n   65          // Multisample State\n   66:         VkPipelineMultisampleStateCreateInfo multisampleInfo = {};\n   67          bool enableSampleFrequency = mDesc.getProgramVersion() ? mDesc.getProgramVersion()->getReflector()->isSampleFrequency() : false;\n   68          initVkMultiSampleInfo(mDesc.getBlendState().get(), mDesc.getFboDesc(), mDesc.getSampleMask(), multisampleInfo, enableSampleFrequency);\n   69  \n   70          // Depth Stencil State\n   71:         VkPipelineDepthStencilStateCreateInfo depthStencilInfo = {};\n   72          initVkDepthStencilInfo(mDesc.getDepthStencilState().get(), depthStencilInfo);\n   73  \n   ..\n   77  \n   78          // Dynamic State\n   79:         VkPipelineDynamicStateCreateInfo dynamicInfo = {};\n   80          VkDynamicState dynamicStates[] = { VK_DYNAMIC_STATE_VIEWPORT, VK_DYNAMIC_STATE_SCISSOR };\n   81          dynamicInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;\n   ..\n   84  \n   85          // Create the pipeline object\n   86:         VkGraphicsPipelineCreateInfo pipelineCreateInfo = {};\n   87          pipelineCreateInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;\n   88          pipelineCreateInfo.stageCount = (uint32_t)shaderStageInfos.size();\n   ..\n  100          pipelineCreateInfo.subpass = 0;\n  101  \n  102:         VkPipeline pipeline;\n  103:         if (VK_FAILED(vkCreateGraphicsPipelines(mpDevice->getApiHandle(), VK_NULL_HANDLE, 1, &pipelineCreateInfo, nullptr, &pipeline))) {\n  104              throw std::runtime_error(\"Could not create graphics pipeline.\");\n  105          }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VkQueryHeap.cpp:\n   38      case QueryHeap::Type::Occlusion:\n   39          return VK_QUERY_TYPE_OCCLUSION;\n   40:     case QueryHeap::Type::PipelineStats:\n   41          return VK_QUERY_TYPE_PIPELINE_STATISTICS;\n   42      default:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n  187              }\n  188          }\n  189:         if (is_set(RenderContext::StateBindFlags::PipelineState, mBindFlags)) {\n  190:             vkCmdBindPipeline(mpLowLevelData->getCommandList(), VK_PIPELINE_BIND_POINT_GRAPHICS, pGSO->getApiHandle());\n  191          }\n  192          if (is_set(RenderContext::StateBindFlags::Fbo, mBindFlags)) {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRootSignature.cpp:\n  111          }\n  112  \n  113:         VkPipelineLayoutCreateInfo pipelineLayoutInfo = {};\n  114          pipelineLayoutInfo.pNext = nullptr;\n  115          pipelineLayoutInfo.flags = 0;\n  ...\n  118          pipelineLayoutInfo.setLayoutCount = (uint32_t)vkSetLayouts.size();\n  119  \n  120:         VkPipelineLayout layout;\n  121:         vk_call(vkCreatePipelineLayout(mpDevice->getApiHandle(), &pipelineLayoutInfo, nullptr, &layout));\n  122          mApiHandle = ApiHandle::create(mpDevice, layout, vkSetLayouts);\n  123  \n  ...\n  126      void RootSignature::bindForGraphics(CopyContext* pCtx) {\n  127      //    LOG_ERR(\"bindForGraphics\");\n  128:     //   VkPipelineBindPoint bindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS;\n  129      //    VkDescriptorSet vkSet = {};\n  130      //   uint32_t bindLocation = 0;\n  ...\n  134      void RootSignature::bindForCompute(CopyContext* pCtx) {\n  135      //    LOG_ERR(\"bindForCompute\");\n  136:     //    VkPipelineBindPoint bindPoint = VK_PIPELINE_BIND_POINT_COMPUTE;\n  137      //    VkDescriptorSet vkSet = {};\n  138      //    uint32_t bindLocation = 0;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp:\n   41      template<> VkHandle<VkSampler>::~VkHandle() { if((mApiHandle != VK_NULL_HANDLE) && mpDevice) vkDestroySampler(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   42      template<> VkHandle<VkDescriptorSetLayout>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyDescriptorSetLayout(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   43:     template<> VkHandle<VkPipeline>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyPipeline(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   44      template<> VkHandle<VkShaderModule>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyShaderModule(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   45:     template<> VkHandle<VkPipelineLayout>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyPipelineLayout(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   46      template<> VkHandle<VkDescriptorPool>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyDescriptorPool(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   47      template<> VkHandle<VkQueryPool>::~VkHandle() { if ((mApiHandle != VK_NULL_HANDLE) && mpDevice) vkDestroyQueryPool(mpDevice->getApiHandle(), mApiHandle, nullptr); }\n   ..\n  111  \n  112      VkRootSignature::~VkRootSignature() {\n  113:         vkDestroyPipelineLayout(mpDevice->getApiHandle(), mApiHandle, nullptr);\n  114          for (auto& s : mSets) {\n  115              vkDestroyDescriptorSetLayout(mpDevice->getApiHandle(), s, nullptr);\n  ...\n  124      template VkHandle<VkSampler>::~VkHandle();\n  125      template VkHandle<VkDescriptorSetLayout>::~VkHandle();\n  126:     template VkHandle<VkPipeline>::~VkHandle();\n  127      template VkHandle<VkShaderModule>::~VkHandle();\n  128      template VkHandle<VkDescriptorPool>::~VkHandle();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKSmartHandle.h:\n   82          SharedPtr() = default;\n   83          explicit SharedPtr(VkRootSignature* pHandle) : std::shared_ptr<VkRootSignature>(pHandle) {}\n   84:         static SharedPtr create(std::shared_ptr<Device> device, VkPipelineLayout layout, const std::vector<VkDescriptorSetLayout>& sets) { return SharedPtr(new VkRootSignature(device ,layout, sets)); }\n   85:         operator VkPipelineLayout() const { return get()->mApiHandle; }\n   86  \n   87       private:\n   ..\n   93   private:\n   94      friend class SharedPtr;\n   95:     VkRootSignature(std::shared_ptr<Device> device, VkPipelineLayout layout, const std::vector<VkDescriptorSetLayout>& sets) : VkBaseApiHandle(device), mApiHandle(layout), mSets(sets) {}\n   96:     VkPipelineLayout mApiHandle;\n   97      std::vector<VkDescriptorSetLayout> mSets;\n   98  };\n   ..\n  213  template<> VkHandle<VkSampler>::~VkHandle();\n  214  template<> VkHandle<VkDescriptorSetLayout>::~VkHandle();\n  215: template<> VkHandle<VkPipeline>::~VkHandle();\n  216  template<> VkHandle<VkShaderModule>::~VkHandle();\n  217: template<> VkHandle<VkPipelineLayout>::~VkHandle();\n  218  template<> VkHandle<VkDescriptorPool>::~VkHandle();\n  219  template<> VkHandle<VkQueryPool>::~VkHandle();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKState.cpp:\n   59      }\n   60      /*\n   61:     void initVkShaderStageInfo(const ProgramVersion* pProgram, std::vector<VkPipelineShaderStageCreateInfo>& infosOut)\n   62      {\n   63          infosOut.clear();\n   ..\n   71              if (pShader != nullptr)\n   72              {\n   73:                 VkPipelineShaderStageCreateInfo info = {};\n   74                  info.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;\n   75                  info.stage = getVkShaderStage(type);\n   ..\n   81      }\n   82      */\n   83:     void initVkShaderStageInfo(const ProgramKernels::SharedConstPtr& pProgramKernels, std::vector<VkPipelineShaderStageCreateInfo>& infosOut) {\n   84          infosOut.clear();\n   85  \n   ..\n   90  \n   91              if (pShader != nullptr) {\n   92:                 VkPipelineShaderStageCreateInfo info = {};\n   93                  info.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;\n   94                  info.stage = getVkShaderStage(type);\n   ..\n  179          for (uint32_t i = 0; i < (uint32_t)infoOut.attachmentStates.size(); i++) {\n  180              const BlendState::Desc::RenderTargetDesc& rtDesc = pState->getRtDesc(i);\n  181:             VkPipelineColorBlendAttachmentState& state = infoOut.attachmentStates[i];\n  182              state.blendEnable = vkBool(rtDesc.blendEnabled);\n  183              state.srcColorBlendFactor = getVkBlendFactor(rtDesc.srcRgbFunc);\n  ...\n  231      }\n  232  \n  233:     void initVkRasterizerInfo(const RasterizerState* pState, VkPipelineRasterizationStateCreateInfo& infoOut) {\n  234          infoOut = {};\n  235  \n  ...\n  311      }\n  312  \n  313:     void initVkDepthStencilInfo(const DepthStencilState* pState, VkPipelineDepthStencilStateCreateInfo& infoOut) {\n  314          infoOut = {};\n  315  \n  ...\n  461      }\n  462  \n  463:     void initVkMultiSampleInfo(const BlendState* pState, const Fbo::Desc& fboDesc, const uint32_t& sampleMask, VkPipelineMultisampleStateCreateInfo& infoOut, bool enableSampleFrequency) {\n  464          infoOut = {};\n  465  \n  ...\n  489      }\n  490  \n  491:     void initVkInputAssemblyInfo(const Vao* pVao, VkPipelineInputAssemblyStateCreateInfo& infoOut) {\n  492          infoOut = {};\n  493          infoOut.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKState.h:\n   34  \n   35      struct ColorBlendStateCreateInfo {\n   36:         std::vector<VkPipelineColorBlendAttachmentState> attachmentStates;\n   37          uint32_t attachmentCount = 0;\n   38:         VkPipelineColorBlendStateCreateInfo info;\n   39      };\n   40  \n   ..\n   42          std::vector<VkVertexInputBindingDescription> bindingDescs;\n   43          std::vector<VkVertexInputAttributeDescription> attribDescs;\n   44:         VkPipelineVertexInputStateCreateInfo info;\n   45      };\n   46  \n   ..\n   53      };\n   54  \n   55:     //void initVkShaderStageInfo(const ProgramVersion* pProgram, std::vector<VkPipelineShaderStageCreateInfo>& infosOut);\n   56:     void initVkShaderStageInfo(const ProgramKernels::SharedConstPtr& pProgramKernels, std::vector<VkPipelineShaderStageCreateInfo>& infosOut);\n   57      void initVkBlendInfo(const Fbo::Desc& fboDesc, const BlendState* pState, ColorBlendStateCreateInfo& infoOut);\n   58:     void initVkRasterizerInfo(const RasterizerState* pState, VkPipelineRasterizationStateCreateInfo& infoOut);\n   59:     void initVkDepthStencilInfo(const DepthStencilState* pState, VkPipelineDepthStencilStateCreateInfo& infoOut);\n   60      void initVkVertexLayoutInfo(const VertexLayout* pLayout, VertexInputStateCreateInfo& infoOut, ProgramReflection const* pReflector);\n   61      void initVkSamplerInfo(const Sampler* pSampler, VkSamplerCreateInfo& infoOut);\n   62:     void initVkMultiSampleInfo(const BlendState* pState, const Fbo::Desc& fboDesc, const uint32_t& sampleMask, VkPipelineMultisampleStateCreateInfo& infoOut, bool enableSampleFrequency);\n   63:     void initVkInputAssemblyInfo(const Vao* pVao, VkPipelineInputAssemblyStateCreateInfo& infoOut);\n   64      void initVkRenderPassInfo(const Fbo::Desc& fboDesc, RenderPassCreateInfo& infoOut);\n   65  \n\n/home/max/dev/Falcor/src/Falcor/Core/State/GraphicsState.cpp:\n  132  void GraphicsState::popFbo(bool setVp0Sc0) {\n  133      if (mFboStack.empty()) {\n  134:         logError(\"PipelineState::popFbo() - can't pop FBO since the FBO stack is empty.\");\n  135          return;\n  136      }\n  ...\n  191  void GraphicsState::popViewport(uint32_t index, bool setScissors) {\n  192      if (mVpStack[index].empty()) {\n  193:         logError(\"PipelineState::popViewport() - can't pop viewport since the viewport stack is empty.\");\n  194          return;\n  195      }\n  ...\n  206  void GraphicsState::popScissors(uint32_t index) {\n  207      if (mScStack[index].empty()) {\n  208:         logError(\"PipelineState::popScissors() - can't pop scissors since the scissors stack is empty.\");\n  209          return;\n  210      }\n\n/home/max/dev/Falcor/src/Falcor/Core/State/GraphicsState.h:\n   45  class GraphicsProgram;\n   46  \n   47: /** Pipeline state.\n   48      This class contains the entire state required by a single draw-call. It's not an immutable object - you can change it dynamically during rendering.\n   49:     The recommended way to use it is to create multiple PipelineState objects (ideally, a single object per render-pass)\n   50  */\n   51  class dlldecl GraphicsState {\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.h:\n   64          D3D12_COMMAND_LIST_TYPE GetType() { should_not_get_here(); return D3D12_COMMAND_LIST_TYPE_BUNDLE; }\n   65          HRESULT Close() { should_not_get_here(); return E_FAIL; }\n   66:         HRESULT Reset(ID3D12CommandAllocator *pAllocator, ID3D12PipelineState *pInitialState) { should_not_get_here(); return E_FAIL; }\n   67:         void ClearState(ID3D12PipelineState *pPipelineState) { should_not_get_here(); }\n   68          void DrawInstanced(UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation) { should_not_get_here(); }\n   69          void DrawIndexedInstanced(UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation) { should_not_get_here(); }\n   ..\n   80          void OMSetRenderTargets(UINT NumRenderTargetDescriptors, const D3D12_CPU_DESCRIPTOR_HANDLE *pRenderTargetDescriptors, BOOL RTsSingleHandleToDescriptorRange, const D3D12_CPU_DESCRIPTOR_HANDLE *pDepthStencilDescriptor) { should_not_get_here(); }\n   81          void OMSetStencilRef(UINT StencilRef) { should_not_get_here(); }\n   82:         void SetPipelineState(ID3D12PipelineState *pPipelineState) { should_not_get_here(); }\n   83          void ResourceBarrier(UINT NumBarriers, const D3D12_RESOURCE_BARRIER *pBarriers) { should_not_get_here(); }\n   84          void ExecuteBundle(ID3D12GraphicsCommandList *pCommandList) { should_not_get_here(); }\n   ..\n  130          void EmitRaytracingAccelerationStructurePostbuildInfo(const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *pDesc, UINT NumSourceAccelerationStructures, const D3D12_GPU_VIRTUAL_ADDRESS *pSourceAccelerationStructureData) { should_not_get_here(); }\n  131          void CopyRaytracingAccelerationStructure(D3D12_GPU_VIRTUAL_ADDRESS DestAccelerationStructureData, D3D12_GPU_VIRTUAL_ADDRESS SourceAccelerationStructureData, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode) { should_not_get_here(); }\n  132:         void SetPipelineState1(ID3D12StateObject *pStateObject) { should_not_get_here(); }\n  133          void DispatchRays(const D3D12_DISPATCH_RAYS_DESC *pDesc) { should_not_get_here(); }\n  134  \n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtStateObject.cpp:\n   48  \n   49          RtStateObjectHelper rtsoHelper;\n   50:         // Pipeline config\n   51:         rtsoHelper.addPipelineConfig(desc.mMaxTraceRecursionDepth);\n   52  \n   53          // Loop over the programs\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtStateObjectHelper.h:\n   39          }\n   40  \n   41:         void addPipelineConfig(uint32_t maxTraceRecursionDepth)\n   42          {\n   43:             addSubobject<PipelineConfig>(maxTraceRecursionDepth);\n   44              mDirty = true;\n   45          }\n   ..\n  112          };\n  113  \n  114:         struct PipelineConfig : public RtStateSubobjectBase\n  115          {\n  116:             PipelineConfig(uint32_t maxTraceRecursionDepth)\n  117              {\n  118                  config.MaxTraceRecursionDepth = maxTraceRecursionDepth;\n  ...\n  121                  subobject.pDesc = &config;\n  122              }\n  123:             virtual ~PipelineConfig() = default;\n  124              D3D12_RAYTRACING_PIPELINE_CONFIG config = {};            \n  125          };\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.cpp:\n   72          Vao::SharedPtr mpVao;\n   73          VertexLayout::SharedPtr mpLayout;\n   74:         GraphicsState::SharedPtr mpPipelineState;\n   75          uint32_t mGroupStackSize = 0;\n   76  \n   ..\n  187  \n  188          // Create the pipeline state cache\n  189:         mpPipelineState = GraphicsState::create(mpDevice);\n  190  \n  191          // Create the program\n  ...\n  193          mpProgram = GraphicsProgram::createFromFile(mpDevice, \"Utils/UI/Gui.slang\", \"vs\", \"ps\");\n  194          mpProgramVars = GraphicsVars::create(mpDevice, mpProgram->getReflector());\n  195:         mpPipelineState->setProgram(mpProgram);\n  196  \n  197          // Add the default font\n  ...\n  202          BlendState::Desc blendDesc(mpDevice);\n  203          blendDesc.setRtBlend(0, true).setRtParams(0, BlendState::BlendOp::Add, BlendState::BlendOp::Add, BlendState::BlendFunc::SrcAlpha, BlendState::BlendFunc::OneMinusSrcAlpha, BlendState::BlendFunc::OneMinusSrcAlpha, BlendState::BlendFunc::Zero);\n  204:         mpPipelineState->setBlendState(BlendState::create(blendDesc));\n  205  \n  206          // Create the rasterizer state\n  207          RasterizerState::Desc rsDesc;\n  208          rsDesc.setFillMode(RasterizerState::FillMode::Solid).setCullMode(RasterizerState::CullMode::None).setScissorTest(true).setDepthClamp(false);\n  209:         mpPipelineState->setRasterizerState(RasterizerState::create(rsDesc));\n  210  \n  211          // Create the depth-stencil state\n  212          DepthStencilState::Desc dsDesc;\n  213          dsDesc.setDepthEnabled(false);\n  214:         mpPipelineState->setDepthStencilState(DepthStencilState::create(dsDesc));\n  215  \n  216          // Create the VAO\n  ...\n  836          // Update the VAO\n  837          mpWrapper->createVao(pDrawData->TotalVtxCount, pDrawData->TotalIdxCount);\n  838:         mpWrapper->mpPipelineState->setVao(mpWrapper->mpVao);\n  839  \n  840          LOG_DBG(\"Gui::render 3\");\n  ...\n  856          mpWrapper->mpVao->getVertexBuffer(0)->unmap();\n  857          mpWrapper->mpVao->getIndexBuffer()->unmap();\n  858:         mpWrapper->mpPipelineState->setFbo(pFbo);\n  859  \n  860          LOG_DBG(\"Gui::render 7\");\n  ...\n  869          \n  870          LOG_DBG(\"Gui::render 8\");\n  871:         mpWrapper->mpPipelineState->setViewport(0, vp);\n  872  \n  873          // Render command lists\n  ...\n  894                      mpWrapper->mpProgramVars[\"PerFrameCB\"][\"useGuiImage\"] = false;\n  895                  }\n  896:                 mpWrapper->mpPipelineState->setScissors(0, scissor);\n  897                  \n  898                  LOG_DBG(\"Gui::render 19\");\n  899:                 pContext->drawIndexed(mpWrapper->mpPipelineState.get(), mpWrapper->mpProgramVars.get(), pCmd->ElemCount, idxOffset, vtxOffset);\n  900                  idxOffset += pCmd->ElemCount;\n  901              }\n\n115 matches across 28 files\n\n\nSearching 164 files for \"cache\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n  337      // updateDefaultFBO() attaches the resized swapchain to new Texture objects, with Undefined resource state.\n  338      // This is fine in Vulkan because a new swapchain is created, but D3D12 can resize without changing\n  339:     // internal resource state, so we must cache the Falcor resource state to track it correctly in the new Texture object.\n  340:     // #TODO Is there a better place to cache state within D3D12 implementation instead of #ifdef-ing here?\n  341  \n  342  #ifdef FALCOR_D3D12\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n 1411          // the element type and compute its layout.\n 1412          //\n 1413:         // TODO: We should probably have a cache of specialized layouts\n 1414          // here, so that if we go back to a previous configuration we\n 1415          // can re-use its layout.\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.cpp:\n  925  \n  926          // If any files have changed, then we need to reset\n  927:         // the caches of compiled information for the program.\n  928          //\n  929          pProgram->reset();\n\n4 matches across 3 files\n\n\nSearching 9 files for \"kMaxCasca\" (case sensitive)\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSMData.slang:\n   44  struct CsmData\n   45  {\n   46:     static const uint32_t kMaxCascades = 8;\n   47      float lightBleedingReduction = 0;\n   48      float cascadeBlendThreshold = 0.0f;\n   ..\n   50  \n   51      float4x4 globalMat;\n   52:     float4 cascadeScale[kMaxCascades];\n   53:     float4 cascadeOffset[kMaxCascades];\n   54  \n   55      //Only uses xy\n   56:     float4 cascadeRange[kMaxCascades];  // In camera clip-space\n   57  \n   58      float depthBias = 0.005f;\n\n4 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 552128,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
			"settings":
			{
				"buffer_size": 6508,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/Lights.slang",
			"settings":
			{
				"buffer_size": 8431,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightHelpers.slang",
			"settings":
			{
				"buffer_size": 11731,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/MeshLightData.slang",
			"settings":
			{
				"buffer_size": 2590,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/UpdateTriangleVertices.cs.slang",
			"settings":
			{
				"buffer_size": 3167,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSamplerSharedDefinitions.slang",
			"settings":
			{
				"buffer_size": 2024,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang",
			"settings":
			{
				"buffer_size": 22640,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHTypes.slang",
			"settings":
			{
				"buffer_size": 8077,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneTypes.slang",
			"settings":
			{
				"buffer_size": 7254,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/PackedFormats.h",
			"settings":
			{
				"buffer_size": 3763,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/Vector.h",
			"settings":
			{
				"buffer_size": 4190,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/HostDeviceShared.slangh",
			"settings":
			{
				"buffer_size": 4264,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Raster.slang",
			"settings":
			{
				"buffer_size": 5014,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/ShadingData.slang",
			"settings":
			{
				"buffer_size": 4621,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/TextureSampler.slang",
			"settings":
			{
				"buffer_size": 5580,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Helpers.slang",
			"settings":
			{
				"buffer_size": 14517,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.slang",
			"settings":
			{
				"buffer_size": 21645,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Shading.slang",
			"settings":
			{
				"buffer_size": 13477,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang",
			"settings":
			{
				"buffer_size": 3697,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/HitInfo.slang",
			"settings":
			{
				"buffer_size": 3645,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/MaterialDefines.slangh",
			"settings":
			{
				"buffer_size": 5826,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/MaterialData.slang",
			"settings":
			{
				"buffer_size": 3778,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/BRDF.slang",
			"settings":
			{
				"buffer_size": 4655,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/python2.7/LSDsettings.py",
			"settings":
			{
				"buffer_size": 31531,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/python2.7/LSDapi.py",
			"settings":
			{
				"buffer_size": 8282,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/python2.7/wranglers/HoudiniLightLSD.py",
			"settings":
			{
				"buffer_size": 19684,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/houdini17.5/houdini/soho/python2.7/IFDframe.py",
			"settings":
			{
				"buffer_size": 64638,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/overrides/RendererTable",
			"settings":
			{
				"buffer_size": 177,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.h",
			"settings":
			{
				"buffer_size": 5856,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.h",
			"settings":
			{
				"buffer_size": 13061,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassLibrary.cpp",
			"settings":
			{
				"buffer_size": 11769,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PackedFragment.cpp",
			"settings":
			{
				"buffer_size": 1087,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.cpp",
			"settings":
			{
				"buffer_size": 1924,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.h",
			"settings":
			{
				"buffer_size": 1041,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.cpp",
			"settings":
			{
				"buffer_size": 3143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedFragment.cpp",
			"settings":
			{
				"buffer_size": 2368,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.h",
			"settings":
			{
				"buffer_size": 1377,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/util.cpp",
			"settings":
			{
				"buffer_size": 3965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/BgeoHeader.cpp",
			"settings":
			{
				"buffer_size": 3185,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.cpp",
			"settings":
			{
				"buffer_size": 7133,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.cpp",
			"settings":
			{
				"buffer_size": 5615,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.h",
			"settings":
			{
				"buffer_size": 1812,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Poly.h",
			"settings":
			{
				"buffer_size": 1391,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Poly.cpp",
			"settings":
			{
				"buffer_size": 3804,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Poly.h",
			"settings":
			{
				"buffer_size": 1612,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexArrayBuilder.h",
			"settings":
			{
				"buffer_size": 1191,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/types.h",
			"settings":
			{
				"buffer_size": 1170,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.h",
			"settings":
			{
				"buffer_size": 1723,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexMap.cpp",
			"settings":
			{
				"buffer_size": 1392,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexArrayBuilder.cpp",
			"settings":
			{
				"buffer_size": 1131,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.cpp",
			"settings":
			{
				"buffer_size": 5251,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.cpp",
			"settings":
			{
				"buffer_size": 7443,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitives.h",
			"settings":
			{
				"buffer_size": 1188,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
			"settings":
			{
				"buffer_size": 4150,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeContext.cpp",
			"settings":
			{
				"buffer_size": 3000,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
			"settings":
			{
				"buffer_size": 3050,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPass.cpp",
			"settings":
			{
				"buffer_size": 2487,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Dictionary.h",
			"settings":
			{
				"buffer_size": 4757,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPass.h",
			"settings":
			{
				"buffer_size": 6997,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassReflection.h",
			"settings":
			{
				"buffer_size": 9565,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.h",
			"settings":
			{
				"buffer_size": 3483,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
			"settings":
			{
				"buffer_size": 8132,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/ShaderTable.cpp",
			"settings":
			{
				"buffer_size": 5792,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/ComputeState.cpp",
			"settings":
			{
				"buffer_size": 3455,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
			"settings":
			{
				"buffer_size": 17887,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.h",
			"settings":
			{
				"buffer_size": 4245,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
			"settings":
			{
				"buffer_size": 3328,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
			"settings":
			{
				"buffer_size": 4266,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
			"settings":
			{
				"buffer_size": 15255,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewerParams.slang",
			"settings":
			{
				"buffer_size": 6133,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CSM.cpp",
			"settings":
			{
				"buffer_size": 36004,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CSM.h",
			"settings":
			{
				"buffer_size": 8949,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CascadedShadowMap.slang",
			"settings":
			{
				"buffer_size": 11750,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp",
			"settings":
			{
				"buffer_size": 6309,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.cpp",
			"settings":
			{
				"buffer_size": 3143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.cpp",
			"settings":
			{
				"buffer_size": 4322,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.cpp",
			"settings":
			{
				"buffer_size": 5369,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.h",
			"settings":
			{
				"buffer_size": 3634,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.ps.slang",
			"settings":
			{
				"buffer_size": 2055,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp",
			"settings":
			{
				"buffer_size": 16583,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
			"settings":
			{
				"buffer_size": 9790,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
			"settings":
			{
				"buffer_size": 4631,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp",
			"settings":
			{
				"buffer_size": 5266,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp",
			"settings":
			{
				"buffer_size": 9035,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassHelpers.h",
			"settings":
			{
				"buffer_size": 5170,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang",
			"settings":
			{
				"buffer_size": 6173,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferParams.slang",
			"settings":
			{
				"buffer_size": 2505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferHelpers.slang",
			"settings":
			{
				"buffer_size": 2968,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.cpp",
			"settings":
			{
				"buffer_size": 5325,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.h",
			"settings":
			{
				"buffer_size": 3116,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.h",
			"settings":
			{
				"buffer_size": 3360,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.h",
			"settings":
			{
				"buffer_size": 2938,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp",
			"settings":
			{
				"buffer_size": 6595,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.h",
			"settings":
			{
				"buffer_size": 3381,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.h",
			"settings":
			{
				"buffer_size": 3086,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBufferBase.h",
			"settings":
			{
				"buffer_size": 3917,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBufferBase.cpp",
			"settings":
			{
				"buffer_size": 7330,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/VertexAttrib.slangh",
			"settings":
			{
				"buffer_size": 2497,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#include \"Falcor.h\"\n#include \"RenderGraph/RenderPassStandardFlags.h\"\n#include \"GBufferRaster.h\"\n\nconst char* GBufferRaster::kDesc = \"Rasterized G-buffer generation pass\";\n\nnamespace\n{\n    const std::string kProgramFile = \"RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang\";\n    const std::string shaderModel = \"6_1\";\n\n    // Additional output channels.\n    // TODO: Some are RG32 floats now. I'm sure that all of these could be fp16.\n    const ChannelList kGBufferExtraChannels =\n    {\n        { \"vbuffer\",          \"gVBuffer\",            \"Visibility buffer\",                true /* optional */, ResourceFormat::RG32Uint    },\n        { \"mvec\",             \"gMotionVectors\",      \"Motion vectors\",                   true /* optional */, ResourceFormat::RG32Float   },\n        { \"faceNormalW\",      \"gFaceNormalW\",        \"Face normal in world space\",       true /* optional */, ResourceFormat::RGBA32Float },\n        { \"pnFwidth\",         \"gPosNormalFwidth\",    \"position and normal filter width\", true /* optional */, ResourceFormat::RG32Float   },\n        { \"linearZ\",          \"gLinearZAndDeriv\",    \"linear z (and derivative)\",        true /* optional */, ResourceFormat::RG32Float   },\n        { \"surfSpreadAngle\",  \"gSurfaceSpreadAngle\", \"surface spread angle (texlod)\",    true /* optional */, ResourceFormat::R16Float    },\n    };\n\n    const std::string kDepthName = \"depth\";\n}\n\nRenderPassReflection GBufferRaster::reflect(const CompileData& compileData)\n{\n    RenderPassReflection reflector;\n\n    // Add the required depth output. This always exists.\n    reflector.addOutput(kDepthName, \"Depth buffer\").format(ResourceFormat::D32Float).bindFlags(Resource::BindFlags::DepthStencil);\n\n    // Add all the other outputs.\n    // The default channels are written as render targets, the rest as UAVs as there is way to assign/pack render targets yet.\n    addRenderPassOutputs(reflector, kGBufferChannels, Resource::BindFlags::RenderTarget);\n    addRenderPassOutputs(reflector, kGBufferExtraChannels, Resource::BindFlags::UnorderedAccess);\n\n    return reflector;\n}\n\nGBufferRaster::SharedPtr GBufferRaster::create(RenderContext* pRenderContext, const Dictionary& dict)\n{\n    return SharedPtr(new GBufferRaster(dict));\n}\n\nGBufferRaster::GBufferRaster(const Dictionary& dict)\n    : GBuffer()\n{\n    parseDictionary(dict);\n\n    // Create raster program\n    Program::DefineList defines = { { \"_DEFAULT_ALPHA_TEST\", \"\" } };\n    Program::Desc desc;\n    desc.addShaderLibrary(kProgramFile).vsEntry(\"vsMain\").psEntry(\"psMain\");\n    desc.setShaderModel(shaderModel);\n    mRaster.pProgram = GraphicsProgram::create(desc, defines);\n\n    // Initialize graphics state\n    mRaster.pState = GraphicsState::create();\n    mRaster.pState->setProgram(mRaster.pProgram);\n\n    // Set default cull mode\n    setCullMode(mCullMode);\n\n    // Set depth function\n    DepthStencilState::Desc dsDesc;\n    dsDesc.setDepthFunc(DepthStencilState::Func::Equal).setDepthWriteMask(false);\n    DepthStencilState::SharedPtr pDsState = DepthStencilState::create(dsDesc);\n    mRaster.pState->setDepthStencilState(pDsState);\n\n    mpFbo = Fbo::create();\n}\n\nvoid GBufferRaster::compile(RenderContext* pContext, const CompileData& compileData)\n{\n    GBuffer::compile(pContext, compileData);\n\n    mpDepthPrePassGraph = RenderGraph::create(\"Depth Pre-Pass\");\n    mpDepthPrePass = DepthPass::create(pContext);\n    mpDepthPrePass->setDepthBufferFormat(ResourceFormat::D32Float);\n    mpDepthPrePassGraph->addPass(mpDepthPrePass, \"DepthPrePass\");\n    mpDepthPrePassGraph->markOutput(\"DepthPrePass.depth\");\n    mpDepthPrePassGraph->setScene(mpScene);\n}\n\nvoid GBufferRaster::setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene)\n{\n    GBuffer::setScene(pRenderContext, pScene);\n\n    mRaster.pVars = nullptr;\n\n    if (pScene)\n    {\n        if (pScene->getVao()->getPrimitiveTopology() != Vao::Topology::TriangleList)\n        {\n            throw std::exception(\"GBufferRaster only works with triangle list geometry due to usage of SV_Barycentrics.\");\n        }\n\n        mRaster.pProgram->addDefines(pScene->getSceneDefines());\n    }\n\n    if (mpDepthPrePassGraph) mpDepthPrePassGraph->setScene(pScene);\n}\n\nvoid GBufferRaster::setCullMode(RasterizerState::CullMode mode)\n{\n    GBuffer::setCullMode(mode);\n    RasterizerState::Desc rsDesc;\n    rsDesc.setCullMode(mCullMode);\n    mRaster.pRsState = RasterizerState::create(rsDesc);\n    assert(mRaster.pState);\n    mRaster.pState->setRasterizerState(mRaster.pRsState);\n}\n\nvoid GBufferRaster::execute(RenderContext* pRenderContext, const RenderData& renderData)\n{\n    GBuffer::execute(pRenderContext, renderData);\n\n    // Bind primary channels as render targets and clear them.\n    for (size_t i = 0; i < kGBufferChannels.size(); ++i)\n    {\n        Texture::SharedPtr pTex = renderData[kGBufferChannels[i].name]->asTexture();\n        mpFbo->attachColorTarget(pTex, uint32_t(i));\n    }\n    pRenderContext->clearFbo(mpFbo.get(), float4(0), 1.f, 0, FboAttachmentType::Color);\n\n    // If there is no scene, clear the outputs and return.\n    if (mpScene == nullptr)\n    {\n        auto clear = [&](const ChannelDesc& channel)\n        {\n            auto pTex = renderData[channel.name]->asTexture();\n            if (pTex) pRenderContext->clearUAV(pTex->getUAV().get(), float4(0.f));\n        };\n        for (const auto& channel : kGBufferExtraChannels) clear(channel);\n        auto pDepth = renderData[kDepthName]->asTexture();\n        pRenderContext->clearDsv(pDepth->getDSV().get(), 1.f, 0);\n        return;\n    }\n\n    // Set program defines.\n    mRaster.pProgram->addDefine(\"DISABLE_ALPHA_TEST\", mDisableAlphaTest ? \"1\" : \"0\");\n\n    // For optional I/O resources, set 'is_valid_<name>' defines to inform the program of which ones it can access.\n    // TODO: This should be moved to a more general mechanism using Slang.\n    mRaster.pProgram->addDefines(getValidResourceDefines(kGBufferExtraChannels, renderData));\n\n    // Create program vars.\n    if (!mRaster.pVars)\n    {\n        mRaster.pVars = GraphicsVars::create(mRaster.pProgram.get());\n    }\n\n    // Setup depth pass to use same culling mode.\n    mpDepthPrePass->setRasterizerState(mForceCullMode ? mRaster.pRsState : nullptr);\n\n    // Copy depth buffer.\n    mpDepthPrePassGraph->execute(pRenderContext);\n    mpFbo->attachDepthStencilTarget(mpDepthPrePassGraph->getOutput(\"DepthPrePass.depth\")->asTexture());\n    pRenderContext->copyResource(renderData[kDepthName].get(), mpDepthPrePassGraph->getOutput(\"DepthPrePass.depth\").get());\n\n    // Bind extra channels as UAV buffers.\n    for (const auto& channel : kGBufferExtraChannels)\n    {\n        Texture::SharedPtr pTex = renderData[channel.name]->asTexture();\n        if (pTex) pRenderContext->clearUAV(pTex->getUAV().get(), float4(0, 0, 0, 0));\n        mRaster.pVars[channel.texname] = pTex;\n    }\n\n    mRaster.pVars[\"PerFrameCB\"][\"gParams\"].setBlob(mGBufferParams);\n    mRaster.pState->setFbo(mpFbo); // Sets the viewport\n\n    Scene::RenderFlags flags = mForceCullMode ? Scene::RenderFlags::UserRasterizerState : Scene::RenderFlags::None;\n    mpScene->render(pRenderContext, mRaster.pState.get(), mRaster.pVars.get(), flags);\n\n    mGBufferParams.frameCount++;\n}\n",
			"file": "src/RenderPasses/GBuffer/GBufferRaster.cpp",
			"file_size": 8886,
			"file_write_time": 132478768524044771,
			"settings":
			{
				"buffer_size": 8886,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#ifndef FALCOR_GBUFFER_H_\n#define FALCOR_GBUFFER_H_\n\n#include \"../GBufferBase.h\"\n#include \"GBufferParams.slang\"\n#include \"RenderGraph/RenderPassHelpers.h\"\n\nusing namespace Falcor;\n\n/** Base class for the different G-buffer passes.\n*/\nclass GBuffer : public GBufferBase {\n public:\n    virtual void renderUI(Gui::Widgets& widget) override;\n    virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n    virtual Dictionary getScriptingDictionary() override;\n    virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n\n protected:\n    GBuffer();\n    virtual void parseDictionary(const Dictionary& dict) override;\n    virtual void setCullMode(RasterizerState::CullMode mode) { mCullMode = mode; }\n\n    // Constants used in derived classes\n    static const ChannelList kGBufferChannels;\n\n    // Internal state\n    GBufferParams                   mGBufferParams;\n\n    // UI variables\n    bool                            mForceCullMode = false;                         ///< Force cull mode for all geometry, otherwise set it based on the scene.\n    RasterizerState::CullMode       mCullMode = RasterizerState::CullMode::Back;    ///< Cull mode to use for when mForceCullMode is true.\n};\n\n#endif  // FALCOR_GBUFFER_H_\n",
			"file": "src/RenderPasses/GBuffer/GBuffer.h",
			"file_size": 2992,
			"file_write_time": 132478768064811882,
			"settings":
			{
				"buffer_size": 2992,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp",
			"settings":
			{
				"buffer_size": 9506,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/MegakernelPathTracer/MegakernelPathTracer.cpp",
			"settings":
			{
				"buffer_size": 8875,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.cpp",
			"settings":
			{
				"buffer_size": 11926,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.cpp",
			"settings":
			{
				"buffer_size": 15137,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.cpp",
			"settings":
			{
				"buffer_size": 8135,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.cpp.bak",
			"settings":
			{
				"buffer_size": 13781,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.slang",
			"settings":
			{
				"buffer_size": 2542,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.cpp",
			"settings":
			{
				"buffer_size": 76339,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/FalcorExperimental.h",
			"settings":
			{
				"buffer_size": 1962,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Testing/UnitTest.h",
			"settings":
			{
				"buffer_size": 18153,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.h",
			"settings":
			{
				"buffer_size": 5848,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
			"settings":
			{
				"buffer_size": 7903,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
			"settings":
			{
				"buffer_size": 16660,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp",
			"settings":
			{
				"buffer_size": 25032,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/FBrender",
			"settings":
			{
				"buffer_size": 505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/AssimpImporter.cpp",
			"settings":
			{
				"buffer_size": 45604,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/SceneImporter.h",
			"settings":
			{
				"buffer_size": 2195,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/PythonImporter.h",
			"settings":
			{
				"buffer_size": 2183,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importer.h",
			"settings":
			{
				"buffer_size": 4276,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importer.cpp",
			"settings":
			{
				"buffer_size": 2992,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.h",
			"settings":
			{
				"buffer_size": 12423,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKShader.cpp",
			"settings":
			{
				"buffer_size": 2775,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.cpp",
			"settings":
			{
				"buffer_size": 14498,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
			"settings":
			{
				"buffer_size": 27538,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.cpp",
			"settings":
			{
				"buffer_size": 8532,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Window.cpp",
			"settings":
			{
				"buffer_size": 18049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.cpp",
			"settings":
			{
				"buffer_size": 2247,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.cpp",
			"settings":
			{
				"buffer_size": 2775,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GraphicsStateObject.cpp",
			"settings":
			{
				"buffer_size": 4325,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
			"settings":
			{
				"buffer_size": 5776,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
			"settings":
			{
				"buffer_size": 5196,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeStateObject.cpp",
			"settings":
			{
				"buffer_size": 2487,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeStateObject.h",
			"settings":
			{
				"buffer_size": 3498,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GraphicsStateObject.h",
			"settings":
			{
				"buffer_size": 6436,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
			"settings":
			{
				"buffer_size": 2479,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
			"settings":
			{
				"buffer_size": 7858,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.cpp",
			"settings":
			{
				"buffer_size": 10466,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.h",
			"settings":
			{
				"buffer_size": 16345,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
			"settings":
			{
				"buffer_size": 15279,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
			"settings":
			{
				"buffer_size": 8441,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.cpp",
			"settings":
			{
				"buffer_size": 34669,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_GRAMMAR_LSD_H_\n#define SRC_LAVA_LIB_GRAMMAR_LSD_H_\n\n#include <array>\n#include <memory>\n#include <string>\n#include <algorithm>\n#include <iostream>\n#include <variant>\n\n#include <boost/array.hpp>\n#include <boost/filesystem.hpp>\n#include <boost/range.hpp>\n//#include <boost/range/join.hpp>\n//#include <boost/algorithm/string/join.hpp>\n\n#ifdef DEBUG\n   // #define BOOST_SPIRIT_X3_DEBUG\n#endif\n\n#include <boost/spirit/home/x3.hpp>\n#include <boost/spirit/home/x3/support/ast/variant.hpp>\n#include <boost/spirit/home/x3/support/traits/container_traits.hpp>\n#include <boost/spirit/include/support_istream_iterator.hpp>\n#include <boost/fusion/include/adapt_struct.hpp>\n#include <boost/fusion/include/io.hpp>\n#include <boost/fusion/sequence/io.hpp>\n#include <boost/fusion/include/io.hpp>\n#include <boost/fusion/adapted/array.hpp>\n#include <boost/fusion/adapted/std_pair.hpp>\n\n#include <boost/container/static_vector.hpp>\n\n#include \"grammar_bgeo.h\"\n#include \"grammar_lsd_expr.h\"\n\n#include \"lava_utils_lib/logging.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\nnamespace lava {\n\nnamespace lsd {\n    using boost::container::static_vector;\n\n    struct NoValue {\n        bool operator==(NoValue const &) const { return true; }\n    };\n\n    typedef static_vector<uint, 3> Version;\n    \n    typedef static_vector<int, 2> Int2;\n    typedef static_vector<int, 3> Int3;\n    typedef static_vector<int, 4> Int4; \n\n    typedef static_vector<double, 2> Vector2; \n    typedef static_vector<double, 3> Vector3;\n    typedef static_vector<double, 4> Vector4; \n    typedef static_vector<double, 9> Matrix3;\n    typedef static_vector<double, 16> Matrix4;\n    typedef x3::variant<int, Int2, Int3, Int4, double, Vector2, Vector3, Vector4, std::string> PropValue;\n\nnamespace ast {\n\n    enum class Type { FLOAT, BOOL, INT, VECTOR2, VECTOR3, VECTOR4, MATRIX3, MATRIX4, STRING };\n    enum class Object { GLOBAL, MATERIAL, GEO, GEOMERTY, SEGMENT, CAMERA, LIGHT, FOG, OBJECT, INSTANCE, PLANE, IMAGE, RENDERER, UNKNOWN };\n    enum class DisplayType { NONE, IP, MD, OPENEXR, JPEG, TIFF, PNG };\n\n    struct ifthen;\n    struct setenv;\n    struct cmd_time;\n    struct cmd_version;\n    struct cmd_config;\n    struct cmd_defaults;\n    struct cmd_transform;\n    struct cmd_quit;\n    struct cmd_start;\n    struct cmd_end;\n    struct cmd_detail;\n    struct cmd_geometry;\n    struct cmd_property;\n    struct cmd_raytrace;\n    struct cmd_image;\n    struct cmd_declare;\n    struct cmd_deviceoption;\n\n    struct NoValue {\n        bool operator==(NoValue const &) const { return true; }\n    };\n\n    typedef x3::variant<\n        NoValue,\n        ifthen,\n        setenv,\n        cmd_start,\n        cmd_time,\n        cmd_version,\n        cmd_config,\n        cmd_defaults,\n        cmd_transform,\n        cmd_end,\n        cmd_quit,\n        cmd_detail,\n        cmd_geometry,\n        cmd_property,\n        cmd_raytrace,\n        cmd_image,\n        cmd_declare,\n        cmd_deviceoption\n    > Command;\n\n    // nullary commands\n    struct cmd_end { };\n    struct cmd_quit { };\n    struct cmd_raytrace { };\n\n    // non-nullary commands\n    struct ifthen{\n        expr::ast::Expr expr;\n        std::vector<Command> commands;\n    };\n\n    struct setenv {\n        std::string key;\n        std::string value;\n    };\n\n    struct cmd_time {\n        float time;\n    };\n\n    struct cmd_start {\n        Object type;\n    };\n\n    struct cmd_transform {\n        Matrix4 m;\n    };\n\n    struct cmd_version {\n        Version version;\n    };\n\n    struct cmd_defaults {\n        std::string filename;\n    };\n\n    struct cmd_config {\n        std::string filename;\n    };\n\n    struct cmd_geometry {\n        std::string geometry_object;\n    };\n\n    struct cmd_detail {\n        bool temporary;\n        std::string name;\n        std::string filename;\n        bgeo::ast::Bgeo bgeo;\n    };\n\n    struct cmd_image {\n        DisplayType display_type;\n        std::string filename;\n    };\n\n    struct cmd_property {\n        Object style;\n        std::string token;\n        std::vector<PropValue> values;\n    };\n\n    struct cmd_deviceoption {\n        Type type;\n        std::string name;\n        std::vector<PropValue> values;\n    };\n\n    struct cmd_declare {\n        Object style;\n        Type type;\n        std::string token;\n        std::vector<PropValue> values;\n    };\n\n}  // namespace ast\n\nstatic inline std::ostream& operator<<(std::ostream& os, const std::vector<std::string>& v) {\n    std::copy(v.begin(), v.end(), std::ostream_iterator<std::string>(os, \" \"));\n    return os;\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Int2& m) {\n    os << \"Int2[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<int>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Int3& m) {\n    os << \"Int3[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<int>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Int4& m) {\n    os << \"Int4[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<int>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Vector2& m) {\n    os << \"Vector2[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Vector3& m) {\n    os << \"Vector3[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Vector4& m) {\n    os << \"Vector4[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Matrix3& m) {\n    os << \"Matrix3[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Matrix4& m) {\n    os << \"Matrix4[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, Version v) {\n    return os << \"Version: \" << v[0] << \".\" << v[1] << \".\" << v[2];\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, std::vector<PropValue> v) {\n    std::copy(v.begin(), v.end(), std::ostream_iterator<PropValue>(os, \" \"));\n    return os;\n};\n\nusing Type = ast::Type;\nstatic inline std::ostream& operator<<(std::ostream& os, Type t) {\n    switch(t) {\n        case Type::INT: return os << \"int\";\n        case Type::BOOL: return os << \"bool\";\n        case Type::FLOAT: return os << \"float\";\n        case Type::STRING: return os << \"string\";\n        case Type::VECTOR2: return os << \"vector2\";\n        case Type::VECTOR3: return os << \"vector3\";\n        case Type::VECTOR4: return os << \"vector4\";\n        case Type::MATRIX3: return os << \"matrix3\";\n        case Type::MATRIX4: return os << \"matrix4\";\n        default: os << \"unknown\";\n    }\n    return os;\n};\n\nusing Object = ast::Object;\nstatic inline std::ostream& operator<<(std::ostream& os, Object o) {\n    switch(o) {\n        case Object::GLOBAL: return os << \"global\";\n        case Object::GEO: return os << \"geo\";\n        case Object::GEOMERTY: return os << \"geometry\";\n        case Object::MATERIAL: return os << \"material\";\n        case Object::SEGMENT: return os << \"segment\";\n        case Object::CAMERA: return os << \"camera\";\n        case Object::LIGHT: return os << \"light\";\n        case Object::FOG: return os << \"fog\";\n        case Object::OBJECT: return os << \"object\";\n        case Object::INSTANCE: return os << \"instance\";\n        case Object::PLANE: return os << \"plane\";\n        case Object::IMAGE: return os << \"image\";\n        case Object::RENDERER: return os << \"renderer\";\n        default: os << \"unknown\";\n    }\n    return os;\n};\n\n}  // namespace lsd\n\n}  // namespace lava\n\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::ifthen, expr, commands)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::setenv, key, value)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_end)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_quit)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_raytrace)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_time, time)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_start, type)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_transform, m)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_image, display_type, filename)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_defaults, filename)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_config, filename)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_version, version)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_detail, temporary, name, filename, bgeo)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_geometry, geometry_object)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_property, style, token, values)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_deviceoption, type, name, values)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_declare, style, type, token, values)\n\nnamespace lava { \n\nclass SessionLSD;\n\nnamespace lsd { \n\nstruct Visitor: public boost::static_visitor<> {\n public:\n    Visitor(std::unique_ptr<SessionLSD>& pSession);\n\n    virtual void operator()(ast::NoValue const& c) const {};\n    virtual void operator()(ast::ifthen const& c) const;\n    virtual void operator()(ast::setenv const& c) const;\n    virtual void operator()(ast::cmd_image const& c) const;\n    virtual void operator()(ast::cmd_end const& c) const;\n    virtual void operator()(ast::cmd_quit const& c) const;\n    virtual void operator()(ast::cmd_start const& c) const;\n    virtual void operator()(ast::cmd_time const& c) const;\n    virtual void operator()(ast::cmd_detail const& c) const;\n    virtual void operator()(ast::cmd_version const& c) const;\n    virtual void operator()(ast::cmd_config const& c) const;\n    virtual void operator()(ast::cmd_defaults const& c) const;\n    virtual void operator()(ast::cmd_transform const& c) const;\n    virtual void operator()(ast::cmd_geometry const& c) const;\n    virtual void operator()(ast::cmd_property const& c) const;\n    virtual void operator()(ast::cmd_deviceoption const& c) const;\n    virtual void operator()(ast::cmd_declare const& c) const;\n    virtual void operator()(ast::cmd_raytrace const& c) const;\n\n protected:\n    std::unique_ptr<SessionLSD> mpSession;\n};\n\n\nstruct EchoVisitor: public Visitor {\n public:\n    EchoVisitor(std::unique_ptr<SessionLSD>& pSession);\n    EchoVisitor(std::unique_ptr<SessionLSD>& pSession, std::ostream& os);\n\n    void operator()(ast::NoValue const& c) const override {};\n    void operator()(ast::ifthen const& c) const override;\n    void operator()(ast::setenv const& c) const override;\n    void operator()(ast::cmd_image const& c) const override;\n    void operator()(ast::cmd_end const& c) const override;\n    void operator()(ast::cmd_quit const& c) const override;\n    void operator()(ast::cmd_start const& c) const override;\n    void operator()(ast::cmd_time const& c) const override;\n    void operator()(ast::cmd_detail const& c) const override;\n    void operator()(ast::cmd_version const& c) const override;\n    void operator()(ast::cmd_config const& c) const override;\n    void operator()(ast::cmd_defaults const& c) const override;\n    void operator()(ast::cmd_transform const& c) const override;\n    void operator()(ast::cmd_geometry const& c) const override;\n    void operator()(ast::cmd_property const& c) const override;\n    void operator()(ast::cmd_deviceoption const& c) const override;\n    void operator()(ast::cmd_declare const& c) const override;\n    void operator()(ast::cmd_raytrace const& c) const override;\n\n //private:\n    void operator()(std::vector<PropValue> const& v) const;\n    void operator()(int v) const;\n    void operator()(double v) const;\n    void operator()(std::string const& v) const;\n    void operator()(Int2 const& v) const;\n    void operator()(Int3 const& v) const;\n    void operator()(Int4 const& v) const;\n    void operator()(Vector2 const& v) const;\n    void operator()(Vector3 const& v) const;\n    void operator()(Vector4 const& v) const;\n    void operator()(PropValue const& v) const;\n\n private:\n    std::ostream& _os;\n};\n\n\nnamespace validators {\n    auto is_valid_vector2 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 2);\n    };\n\n    auto is_valid_vector3 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 3);\n    };\n\n    auto is_valid_vector4 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 4);\n    };\n\n    auto is_valid_matrix3 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 9);\n    };\n\n    auto is_valid_matrix4 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 16);\n    };\n}\n\nnamespace parser {\n    namespace ascii = boost::spirit::x3::ascii;\n    using namespace x3;\n\n    //\n    // Since a double parser also parses an integer, we will always get a double, even if the input is \"12\"\n    // In order to prevent this, we need a strict double parser\n    //\n    boost::spirit::x3::real_parser<double, boost::spirit::x3::strict_real_policies<double> > const double_ = {};\n\n    template <typename T> auto as = [](auto p) { return x3::rule<struct _, T> {} = p; };\n    //auto const uintPair = as<ast::uintPair_t> ( uint_ >> '-' >> uint_       );\n    //auto const uintObj  = as<ast::uintObj>    ( uintPair | uint_            );\n    //auto const varVec   = as<ast::varVec>     ( '[' >> uintObj % ',' >> ']' );\n\n    auto const esc_char \n        = x3::rule<struct esc_char_, char> {\"esc_char\"}\n        = '\\\\' >> char_(\"\\\"\");\n\n    auto const string \n        = x3::rule<struct string_, std::string> {\"string\"}\n        = lexeme[+graph];\n\n    auto const string_char\n        = esc_char | alnum | char_(\"$/_.:-+@!~\");\n\n    x3::rule<class unquoted_string_, std::string> const unquoted_string = \"unquoted_string\";\n    auto const unquoted_string_def = //lexeme[+(~char_(\" \\\"\\'\"))];\n        lexeme[+string_char];\n    BOOST_SPIRIT_DEFINE(unquoted_string)\n\n    x3::rule<class empty_string_> const empty_string = \"empty_string\";\n    auto const empty_string_def = (char_('\"') >> char_('\"')) | (char_('\\'') >> char_('\\''));\n    BOOST_SPIRIT_DEFINE(empty_string)\n\n    x3::rule<class quoted_string_, std::string> const quoted_string = \"quoted_string\";\n    auto const quoted_string_def = \n        x3::lexeme['\"' > *(esc_char | ~x3::char_('\"')) > '\"'] | \n        x3::lexeme['\\'' > *(esc_char | ~x3::char_('\\'')) > '\\''] | lexeme[empty_string];\n\n    BOOST_SPIRIT_DEFINE(quoted_string)\n\n    x3::rule<class any_string_, std::string> const any_string = \"any_string\";\n    auto const any_string_def = quoted_string | unquoted_string;\n    BOOST_SPIRIT_DEFINE(any_string)\n\n    x3::rule<class identifier_, std::string> const identifier = \"identifier\";\n    auto const identifier_def = lexeme[(alnum | char_('_')) >> *(alnum | char_('_'))];\n    BOOST_SPIRIT_DEFINE(identifier)\n\n    x3::rule<class prop_name_, std::string> const prop_name = \"prop_name\";\n    auto const prop_name_def = lexeme[identifier >> *(char_(\".:/\") >> identifier)];\n    BOOST_SPIRIT_DEFINE(prop_name)\n\n    x3::rule<class obj_name_, std::string> const obj_name = \"obj_name\";\n    auto const obj_name_def = lexeme[(alnum | char_(\"/_\")) >> *(alnum | char_(\"/_\"))];\n    BOOST_SPIRIT_DEFINE(obj_name)\n\n    x3::rule<class unquoted_filename_, std::string> const unquoted_filename = \"unquoted_filename\";\n    auto const unquoted_filename_def = lexeme[+string_char];\n    BOOST_SPIRIT_DEFINE(unquoted_filename)\n\n    x3::rule<class quoted_filename_filename_, std::string> const quoted_filename = \"quoted_filename\";\n    auto const quoted_filename_def = \n        x3::lexeme['\"' > *(esc_char | ~x3::char_('\"')) > '\"'] | \n        x3::lexeme['\\'' > *(esc_char | ~x3::char_('\\'')) > '\\''] | lexeme[empty_string];\n    BOOST_SPIRIT_DEFINE(quoted_filename)\n\n    x3::rule<class any_filename_, std::string> const any_filename = \"any_filename\";\n    auto const any_filename_def = quoted_filename | unquoted_filename;\n    BOOST_SPIRIT_DEFINE(any_filename)\n\n    x3::rule<class int2_, Int2> const int2 = \"int2\";\n    auto const int2_def = repeat(2) [ int_ ];\n    BOOST_SPIRIT_DEFINE(int2)\n\n    x3::rule<class int3_, Int3> const int3 = \"int3\";\n    auto const int3_def = repeat(3) [ int_ ];\n    BOOST_SPIRIT_DEFINE(int3)\n\n    x3::rule<class int4_, Int4> const int4 = \"int4\";\n    auto const int4_def = repeat(4) [ int_ ];\n    BOOST_SPIRIT_DEFINE(int4)\n\n    x3::rule<class vector2_, Vector2> const vector2 = \"vector2\";\n    auto const vector2_def = repeat(2) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(vector2)\n\n    x3::rule<class vector3_, Vector3> const vector3 = \"vector3\";\n    auto const vector3_def = repeat(3) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(vector3)\n\n    x3::rule<class vector4_, Vector4> const vector4 = \"vector4\";\n    auto const vector4_def = repeat(4) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(vector4)\n\n    x3::rule<class matrix3_, Matrix3> const matrix3 = \"matrix3\";\n    auto const matrix3_def = repeat(9) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(matrix3)\n\n    x3::rule<class matrix4_, Matrix4> const matrix4 = \"matrix4\";\n    auto const matrix4_def = repeat(16) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(matrix4)\n\n    x3::rule<class version_, Version> const version = \"version\";\n    auto const version_def = lexeme[-lexeme[\"VER\"] >> int_ >> \".\" >> int_ >> \".\" >> int_];\n    BOOST_SPIRIT_DEFINE(version)\n\n    x3::rule<class bgeo_inline_, bgeo::ast::Bgeo> const bgeo_inline = \"bgeo_inline\";\n    auto const bgeo_inline_def = bgeo::parser::input;\n    BOOST_SPIRIT_DEFINE(bgeo_inline)\n\n    x3::rule<class lsd_expr_, lsd::expr::ast::Expr> const lsd_expr = \"lsd_expr\";\n    auto const lsd_expr_def = lsd::expr::parser::input;\n    BOOST_SPIRIT_DEFINE(lsd_expr)\n\n    using boost::fusion::at_c;\n    auto assign_prop = [](auto& ctx) { \n        _val(ctx).push_back(PropValue(_attr(ctx)));\n    };\n\n    x3::rule<class prop_value_, PropValue> const prop_value = \"prop_value\";\n    auto const prop_value_def = \n        vector4 | vector3 | vector2 | double_\n      | int4 | int3 | int2 | int_\n      | any_string ;\n    BOOST_SPIRIT_DEFINE(prop_value)\n\n    auto const keyword\n        = x3::rule<class keyword>{\"keyword\"}\n        = x3::lit(\"setenv\") | lit(\"cmd_time\") | lit(\"cmd_property\") | lit(\"cmd_image\") | lit(\"cmd_transform\") | lit(\"cmd_end\") | lit(\"cmd_detail\") | lit(\"cmd_deviceoption\") | lit(\"cmd_start\")\n        | lit(\"cmd_version\") | lit(\"cmd_defaults\") | lit(\"cmd_declare\") | lit(\"cmd_config\");\n\n    x3::rule<class prop_values_, std::vector<PropValue>> const prop_values = \"prop_values\";\n    auto const prop_values_def = *(prop_value - keyword);\n    BOOST_SPIRIT_DEFINE(prop_values)\n\n    x3::rule<class image_values_, std::vector<std::string>> const image_values = \"image_values\";\n    auto const image_values_def = *(quoted_string);\n    BOOST_SPIRIT_DEFINE(image_values)\n\n\n    struct ObjectsTable : x3::symbols<ast::Object> {\n        ObjectsTable() {\n            add (\"global\"   , ast::Object::GLOBAL)\n                (\"geo\"      , ast::Object::GEO)\n                (\"geometry\" , ast::Object::GEO)\n                (\"material\" , ast::Object::GEOMERTY)\n                (\"segment\"  , ast::Object::SEGMENT)\n                (\"camera\"   , ast::Object::CAMERA)\n                (\"light\"    , ast::Object::LIGHT)\n                (\"fog\"      , ast::Object::FOG)\n                (\"object\"   , ast::Object::OBJECT)\n                (\"instance\" , ast::Object::INSTANCE)\n                (\"plane\"    , ast::Object::PLANE)\n                (\"image\"    , ast::Object::IMAGE)\n                (\"renderer\" , ast::Object::RENDERER);\n        }\n    } const object;\n\n    struct PropTypesTable : x3::symbols<ast::Type> {\n        PropTypesTable() {\n            add (\"float\"    , ast::Type::FLOAT)\n                (\"bool\"     , ast::Type::BOOL)\n                (\"int\"      , ast::Type::INT)\n                (\"vector2\"  , ast::Type::VECTOR2)\n                (\"vector3\"  , ast::Type::VECTOR3)\n                (\"vector4\"  , ast::Type::VECTOR4)\n                (\"matrix3\"  , ast::Type::MATRIX3)\n                (\"matrix4\"  , ast::Type::MATRIX4)\n                (\"string\"   , ast::Type::STRING);\n        }\n    } const prop_type;\n\n        struct DisplayTypesTable : x3::symbols<ast::DisplayType> {\n        DisplayTypesTable() {\n            add (\"\\\"ip\\\"\"       , ast::DisplayType::IP)\n                (\"\\\"md\\\"\"       , ast::DisplayType::MD)\n                (\"\\\"JPEG\\\"\"     , ast::DisplayType::JPEG)\n                (\"\\\"PNG\\\"\"      , ast::DisplayType::PNG)\n                (\"\\\"OpenEXR\\\"\"  , ast::DisplayType::OPENEXR)\n                (\"\\\"TIFF\\\"\"     , ast::DisplayType::TIFF)\n                ;\n        }\n    } const display_type;\n\n    //x3::rule<class object_, ast::Object> const object = \"object\";\n    //auto const object_def = lexeme[\"global\" | \"geo\" | \"geometry\"];\n    //BOOST_SPIRIT_DEFINE(object)\n\n    using boost::fusion::at_c;\n    //auto assign_objtype = [](auto& ctx) { _val(ctx).type = _attr(ctx); };\n    //auto assign_time = [](auto& ctx) { _val(ctx).time = _attr(ctx); };\n    //auto assign_version = [](auto& ctx) { \n    //    _val(ctx).version[0] = at_c<0>(_attr(ctx)); \n    //    _val(ctx).version[1] = at_c<1>(_attr(ctx));\n    //    _val(ctx).version[2] = at_c<2>(_attr(ctx));\n    //};\n    //auto assign_comment = [](auto& ctx) {};\n    //auto assign_prop_values = [](auto& ctx) { std::cout << \"PROP: \" << _attr(ctx); };\n    //auto assign_bgeo = [](auto& ctx) { \n    //    std::cout << \"BGEO!!!\";\n    //    _val(ctx).bgeo = _attr(ctx); \n    //};\n\n    static auto const skipper = lexeme[ \n        \"/*\" >> *(char_ - \"*/\") >> \"*/\"\n        | \"//\" >> *~char_(\"\\r\\n\")\n        | '#' >> *~char_(\"\\r\\n\")\n        | blank\n    ] | blank;\n\n    auto const setenv\n        = x3::rule<class setenv, ast::setenv>{\"setenv\"}\n        = \"setenv\" >> identifier >> \"=\" >> any_string >> eps;\n\n    auto const cmd_image\n        = x3::rule<class cmd_image, ast::cmd_image>{\"cmd_image\"}\n        = \"cmd_image\" >> lit(\"\\\"-f\\\"\") >> display_type >> any_filename >> eps\n        | \"cmd_image\" >> display_type >> attr(\"\") >> eps\n        | \"cmd_image\" >> attr(ast::DisplayType::NONE) >> any_filename >> eps;\n\n    auto const cmd_property\n        = x3::rule<class cmd_property, ast::cmd_property>{\"cmd_property\"}\n        = \"cmd_property\" >> object >> identifier >> prop_values;\n    \n    auto const cmd_deviceoption\n        = x3::rule<class cmd_deviceoption, ast::cmd_deviceoption>{\"cmd_deviceoption\"}\n        = \"cmd_deviceoption\" >> prop_type >> prop_name >> prop_values;\n\n    auto const cmd_declare\n        = x3::rule<class cmd_declare, ast::cmd_declare>{\"cmd_declare\"}\n        = \"cmd_declare\" >> object >> prop_type >> prop_name >> prop_values;\n\n    auto const cmd_transform\n        = x3::rule<class cmd_transform, ast::cmd_transform>{\"cmd_transform\"}\n        = \"cmd_transform\" >> matrix4 >> eps;\n\n    auto const cmd_start\n        = x3::rule<class cmd_start, ast::cmd_start>{\"cmd_start\"}\n        = \"cmd_start\" >> object >> eps;\n\n    auto const cmd_time\n        = x3::rule<class cmd_time, ast::cmd_time>{\"cmd_time\"}\n        = \"cmd_time\" >> float_ >> eps;\n\n    auto const cmd_version\n        = x3::rule<class cmd_version, ast::cmd_version>{\"cmd_version\"}\n        = \"cmd_version\" >> version >> eps;\n\n    auto const cmd_config\n        = x3::rule<class cmd_config, ast::cmd_config>{\"cmd_config\"}\n        = \"cmd_config\" >> any_filename >> eps;\n\n    auto const cmd_defaults\n        = x3::rule<class cmd_defaults, ast::cmd_defaults>{\"cmd_defaults\"}\n        = \"cmd_defaults\" >> any_filename >> eps;\n\n    auto const cmd_detail\n        = x3::rule<class cmd_detail, ast::cmd_detail>{\"cmd_detail\"}\n        = \"cmd_detail\" >> lit(\"-T\") >> attr(true) >> obj_name >> any_filename >> attr(bgeo::ast::Bgeo())\n        | \"cmd_detail\" >> attr(false) >> obj_name >> \"stdin\" >> attr(\"stdin\") >> bgeo_inline\n        | \"cmd_detail\" >> attr(false) >> obj_name >> any_filename >> attr(bgeo::ast::Bgeo());\n\n    auto const cmd_geometry\n        = x3::rule<class cmd_geometry, ast::cmd_geometry>{\"cmd_geometry\"}\n        = \"cmd_geometry\" >> obj_name >> eps;\n\n    auto const cmd_raytrace\n        = x3::rule<class cmd_raytrace, ast::cmd_raytrace>{\"cmd_raytrace\"}\n        = \"cmd_raytrace\" >> eps;\n\n    auto const cmd_quit\n        = x3::rule<class cmd_quit, ast::cmd_quit>{\"cmd_quit\"}\n        = \"cmd_quit\" >> eps;\n\n    auto const cmd_end\n        = x3::rule<class cmd_end, ast::cmd_end>{\"cmd_end\"}\n        = \"cmd_end\" >> eps;\n\n    auto const cmd = setenv | cmd_image | cmd_time | cmd_version | cmd_config | cmd_defaults | cmd_end | cmd_quit | cmd_start | \n        cmd_transform | cmd_detail | cmd_geometry | cmd_property | cmd_raytrace | cmd_declare | cmd_deviceoption;\n    \n    auto const ifthen\n        = x3::rule<class ifthen, ast::ifthen>{\"ifthen\"}\n        = \"if\" >> lsd_expr >> \"then\" >> (+cmd)  >> \"endif\";\n\n    auto const input  = skip(skipper | char_(\"\\n\\t\")) [*(cmd | ifthen) % eol];\n\n}}  // namespace lsd::parser\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_GRAMMAR_LSD_H_",
			"file": "src/lava_lib/readers/grammar_lsd.h",
			"file_size": 25009,
			"file_write_time": 132457257089790980,
			"settings":
			{
				"buffer_size": 25009,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.slang",
			"settings":
			{
				"buffer_size": 2541,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/slang.cpp",
			"settings":
			{
				"buffer_size": 123225,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.cpp",
			"settings":
			{
				"buffer_size": 57291,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Video/VideoEncoder.cpp",
			"settings":
			{
				"buffer_size": 15920,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/slang.h",
			"settings":
			{
				"buffer_size": 133488,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.h",
			"settings":
			{
				"buffer_size": 13546,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.cpp",
			"settings":
			{
				"buffer_size": 18183,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Formats.cpp",
			"settings":
			{
				"buffer_size": 19770,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuTimer.cpp",
			"settings":
			{
				"buffer_size": 4521,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RasterizerState.cpp",
			"settings":
			{
				"buffer_size": 2331,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.cpp",
			"settings":
			{
				"buffer_size": 5187,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
			"settings":
			{
				"buffer_size": 5086,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.cpp",
			"settings":
			{
				"buffer_size": 17176,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.cpp",
			"settings":
			{
				"buffer_size": 3635,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VertexLayout.cpp",
			"settings":
			{
				"buffer_size": 1912,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.cpp",
			"settings":
			{
				"buffer_size": 2452,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ComputeProgram.cpp",
			"settings":
			{
				"buffer_size": 2688,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.h",
			"settings":
			{
				"buffer_size": 16201,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
			"settings":
			{
				"buffer_size": 11549,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.h",
			"settings":
			{
				"buffer_size": 9621,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
			"settings":
			{
				"buffer_size": 13448,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.cpp",
			"settings":
			{
				"buffer_size": 5935,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Sampler.cpp",
			"settings":
			{
				"buffer_size": 4072,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.cpp",
			"settings":
			{
				"buffer_size": 15908,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
			"settings":
			{
				"buffer_size": 30042,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Formats.h",
			"settings":
			{
				"buffer_size": 13822,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
			"settings":
			{
				"buffer_size": 6579,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 493,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.cpp",
			"settings":
			{
				"buffer_size": 25155,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.h",
			"settings":
			{
				"buffer_size": 11441,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
			"settings":
			{
				"buffer_size": 5608,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.cpp",
			"settings":
			{
				"buffer_size": 5362,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
			"settings":
			{
				"buffer_size": 5216,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/BlendState.cpp",
			"settings":
			{
				"buffer_size": 3710,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.cpp",
			"settings":
			{
				"buffer_size": 12500,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DepthStencilState.cpp",
			"settings":
			{
				"buffer_size": 3745,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphExe.h",
			"settings":
			{
				"buffer_size": 4019,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Renderer.h",
			"settings":
			{
				"buffer_size": 7203,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.h",
			"settings":
			{
				"buffer_size": 7389,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.h",
			"settings":
			{
				"buffer_size": 8364,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.h",
			"settings":
			{
				"buffer_size": 11462,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.cpp",
			"settings":
			{
				"buffer_size": 25487,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Clock.cpp",
			"settings":
			{
				"buffer_size": 9897,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"renderer.h\"\n\n#include \"Falcor/Utils/Threading.h\"\n#include \"Falcor/Utils/Scripting/Scripting.h\"\n#include \"Falcor/Utils/Scripting/ScriptBindings.h\"\n#include \"Falcor/Utils/Debug/debug.h\"\n\n#include \"lava_utils_lib/logging.h\"\n\nnamespace Falcor { \n\nIFramework* gpFramework = nullptr;\n\n}\n\nnamespace lava {\n\nRenderer::UniquePtr Renderer::create() {\n\treturn std::move(UniquePtr( new Renderer(0)));\n}\n\nRenderer::UniquePtr Renderer::create(Falcor::DeviceManager::DeviceLocalUID uid) {\n    return std::move(UniquePtr( new Renderer(uid)));\n}\n\nRenderer::Renderer(Falcor::DeviceManager::DeviceLocalUID uid): mDeviceUID(uid), mIfaceAquired(false), mpClock(nullptr), mpFrameRate(nullptr), mActiveGraph(0), mInited(false) {\n\tLLOG_DBG << \"Renderer::Renderer\";\n    mpDisplay = nullptr;\n    init();\n}\n\nbool Renderer::init() {\n\tif(mInited) return true;\n\n\tLLOG_DBG << \"Renderer::init\";\n\n\tFalcor::OSServices::start();\n\n\tFalcor::Scripting::start();\n    Falcor::ScriptBindings::registerBinding(Renderer::registerBindings);\n\n    Falcor::Threading::start();\n\n\tFalcor::Device::Desc device_desc;\n    device_desc.width = 1280;\n    device_desc.height = 720;\n\n    LLOG_DBG << \"Creating rendering device \" << mDeviceUID;\n\tmpDevice = Falcor::DeviceManager::instance().createRenderingDevice(mDeviceUID, device_desc);\n    LLOG_DBG << \"Rendering device \" << mDeviceUID << \" created\";\n\n    mpSceneBuilder = lava::SceneBuilder::create(mpDevice);\n    mpCamera = Falcor::Camera::create();\n    mpCamera->setName(\"main\");\n    mpSceneBuilder->addCamera(mpCamera);\n    mpSceneBuilder->setCamera(\"main\");\n\n\tmpClock = new Falcor::Clock(mpDevice);\n    //mpClock->setTimeScale(config.timeScale);\n\n    auto pBackBufferFBO = mpDevice->getOffscreenFbo();\n    if (!pBackBufferFBO) {\n        logError(\"Unable to get swap chain FBO!!!\");\n    }\n    mpTargetFBO = Fbo::create2D(mpDevice, pBackBufferFBO->getWidth(), pBackBufferFBO->getHeight(), pBackBufferFBO->getDesc());\n\n    mpFrameRate = new Falcor::FrameRate(mpDevice);\n\n    Falcor::gpFramework = this;\n\n    mInited = true;\n    return true;\n}\n\nRenderer::~Renderer() {\n\tLLOG_DBG << \"Renderer::~Renderer\";\n\n\tif(!mInited)\n\t\treturn;\n\n\tdelete mpClock;\n    delete mpFrameRate;\n\t\n\tFalcor::Threading::shutdown();\n\tFalcor::Scripting::shutdown();\n    Falcor::RenderPassLibrary::instance(mpDevice).shutdown();\n\n\tif(mpDisplay) mpDisplay->close();\n\n    mpTargetFBO.reset();\n\tif(mpDevice) mpDevice->cleanup();\n\tmpDevice.reset();\n    Falcor::OSServices::stop();\n\n    //Falcor::gpFramework = nullptr;\n}\n\nstd::unique_ptr<RendererIface> Renderer::aquireInterface() {\n\tif (!mIfaceAquired) {\n\t\treturn std::move(std::make_unique<RendererIface>(this));\n\t}\n\tLLOG_ERR << \"cannot aquire renderer interface. relase old first!\";\n\treturn nullptr;\n}\n\nvoid Renderer::releaseInterface(std::unique_ptr<RendererIface> pInterface) {\n\tif(mIfaceAquired) {\n\t\tstd::move(pInterface).reset();\n\t\tmIfaceAquired = false;\n\t}\n}\n\nbool Renderer::loadDisplay(Display::DisplayType display_type) {\n\tmpDisplay = Display::create(display_type);\n\tif(!mpDisplay) {\n        LLOG_ERR << \"Unable to create display !!!\";\n\t\treturn false;\n    }\n\n\treturn true;\n}\n\nbool Renderer::openDisplay(const std::string& image_name, uint width, uint height) {\n    if (!mpDisplay) return false;\n    return mpDisplay->open(image_name, width, height);\n}\n\nbool Renderer::closeDisplay() {\n    if (!mpDisplay) return false;\n    return mpDisplay->close();\n}\n\n\nbool isInVector(const std::vector<std::string>& strVec, const std::string& str) {\n    return std::find(strVec.begin(), strVec.end(), str) != strVec.end();\n}\n\nbool Renderer::loadScript(const std::string& file_name) {\n\ttry {\n        LLOG_DBG << \"Loading frame graph configuration: \" << file_name;\n        auto ctx = Falcor::Scripting::getGlobalContext();\n        ctx.setObject(\"renderer\", this);\n        Falcor::Scripting::runScriptFromFile(file_name, ctx);\n    } catch (const std::exception& e) {\n        LLOG_ERR << \"Error when loading configuration file: \" << file_name << \"\\n\" + std::string(e.what());\n    \treturn false;\n    }\n\n    LLOG_DBG << \"Frame graph configuration loaded!\";\n    return true;\n}\n\nstd::vector<std::string> Renderer::getGraphOutputs(const Falcor::RenderGraph::SharedPtr& pGraph) {\n    std::vector<std::string> outputs;\n    for (size_t i = 0; i < pGraph->getOutputCount(); i++) outputs.push_back(pGraph->getOutputName(i));\n    return outputs;\n}\n\nvoid Renderer::addGraph(const Falcor::RenderGraph::SharedPtr& pGraph) {\n\tLLOG_DBG << \"Renderer::addGraph\";\n\n    if (pGraph == nullptr) {\n        LLOG_ERR << \"Can't add an empty graph\";\n        return;\n    }\n\n    // If a graph with the same name already exists, remove it\n    GraphData* pGraphData = nullptr;\n    for (size_t i = 0; i < mGraphs.size(); i++) {\n        if (mGraphs[i].pGraph->getName() == pGraph->getName()) {\n            LLOG_WRN << \"Replacing existing graph \\\"\" << pGraph->getName() << \"\\\" with new graph.\";\n            pGraphData = &mGraphs[i];\n            break;\n        }\n    }\n\n    // FIXME: put individual graphs initalization down the pipeline. Also cache inited graph until scene changed\n    initGraph(pGraph, pGraphData);\n}\n\nvoid Renderer::initGraph(const Falcor::RenderGraph::SharedPtr& pGraph, GraphData* pData) {\n    if (!pData) {\n        mGraphs.push_back({});\n        pData = &mGraphs.back();\n    }\n\n    GraphData& data = *pData;\n    // Set input image if it exists\n    data.pGraph = pGraph;\n    //data.pGraph->setScene(mpSceneBuilder->getScene());\n    if (data.pGraph->getOutputCount() != 0) data.mainOutput = data.pGraph->getOutputName(0);\n\n    // Store the original outputs\n    data.originalOutputs = getGraphOutputs(pGraph);\n\n    //for (auto& e : mpExtensions) e->addGraph(pGraph.get());\n}\n\nvoid Renderer::executeActiveGraph(Falcor::RenderContext* pRenderContext) {\n    if (mGraphs.empty()) return;\n\n    auto& pGraph = mGraphs[mActiveGraph].pGraph;\n    LLOG_DBG << \"Execute graph: \" << pGraph->getName() << \" output name: \" << mGraphs[mActiveGraph].mainOutput;\n\n    // Execute graph.\n    (*pGraph->getPassesDictionary())[Falcor::kRenderPassRefreshFlags] = (uint32_t)Falcor::RenderPassRefreshFlags::None;\n    pGraph->execute(pRenderContext);\n}\n\nvoid Renderer::finalizeScene(const RendererIface::FrameData& frame_data) {\n    // finalize camera\n    mpCamera->setAspectRatio(static_cast<float>(frame_data.imageWidth) / static_cast<float>(frame_data.imageHeight));\n    mpCamera->setNearPlane(frame_data.cameraNearPlane);\n    mpCamera->setFarPlane(frame_data.cameraFarPlane);\n    mpCamera->setViewMatrix(frame_data.cameraTransform);\n    mpCamera->setFocalLength(frame_data.cameraFocalLength);\n    mpCamera->setFrameHeight(frame_data.cameraFrameHeight);\n\n    // finalize scene\n    auto pScene = mpSceneBuilder->getScene();;\n\n    if (pScene) {\n        pScene->setCameraAspectRatio(static_cast<float>(frame_data.imageWidth) / static_cast<float>(frame_data.imageHeight));\n\n        if (mpSampler == nullptr) {\n            // create common texture sampler\n            Sampler::Desc desc;\n            desc.setFilterMode(Sampler::Filter::Linear, Sampler::Filter::Linear, Sampler::Filter::Linear);\n            desc.setMaxAnisotropy(8);\n            mpSampler = Falcor::Sampler::create(mpDevice, desc);\n        }\n        pScene->bindSamplerToMaterials(mpSampler);\n    }\n\n    // finalize rendering graphs\n    for (auto& g : mGraphs) {\n        g.pGraph->setScene(pScene);\n        auto dims = g.pGraph->dims();\n        if (dims.x != frame_data.imageWidth || dims.y != frame_data.imageHeight) {\n            g.pGraph->resize(frame_data.imageWidth, frame_data.imageHeight, Falcor::ResourceFormat::RGBA32Float);\n            //Falcor::Scene::SharedPtr graphScene = g.pGraph->getScene();\n            //if (graphScene) graphScene->setCameraAspectRatio(static_cast<float>(frame_data.imageWidth) / static_cast<float>(frame_data.imageHeight));\n        }\n    }\n    gpFramework->getClock().setTime(frame_data.time);\n}\n\nvoid Renderer::renderFrame(const RendererIface::FrameData frame_data) {\n\tif (!mInited) {\n\t\tLLOG_ERR << \"Renderer not initialized !!!\";\n\t\treturn;\n\t}\n\n    if(!mpDisplay) {\n        LLOG_ERR << \"Renderer display not initialized !!!\";\n        return;\n    }\n\n    if( frame_data.imageSamples == 0) {\n        LLOG_WRN << \"Not enough image samples specified in frame data !\";\n    }\n\n    if(mpDisplay->opened()) {\n        mpDisplay->close();\n    }\n\n    if(!mpDisplay->open(frame_data.imageFileName, frame_data.imageWidth, frame_data.imageHeight)) {\n        LLOG_ERR << \"Unable to open image \" << frame_data.imageFileName << \" !!!\";\n    }\n\n    this->resizeSwapChain(frame_data.imageWidth, frame_data.imageHeight);\n\n    finalizeScene(frame_data);\n\n    auto pRenderContext = mpDevice->getRenderContext();\n\n    LLOG_DBG << \"Renderer::renderFrame\";\n\n    // Clear viewer frame buffer.\n    //const Falcor::float4 clearColor(0.1f, 0.38f, 0.52f, 1);\n    //pRenderContext->clearFbo(mpTargetFBO.get(), clearColor, 1.0f, 0, Falcor::FboAttachmentType::All);\n\n    //beginFrame(pRenderContext, mpTargetFBO);\n\n    if (mGraphs.size()) {\n        LLOG_DBG << \"process render graphs\";\n        \n        auto pScene = mpSceneBuilder->getScene();\n\n        // render image samples\n        double shutter_length = 0.5;\n        double fps = 25.0;\n        double time = frame_data.time;\n        double sample_time_duration = (1.0 * shutter_length) / frame_data.imageSamples;\n        \n        executeActiveGraph(pRenderContext);\n\n        if ( frame_data.imageSamples > 1 ) {\n            for (uint i = 1; i < frame_data.imageSamples; i++) {\n                LLOG_DBG << \"Rendering sample no \" << i << \" of \" << frame_data.imageSamples;\n                // Update scene and camera.\n                if (pScene)\n                    pScene->update(pRenderContext, time);\n\n                executeActiveGraph(pRenderContext);\n        \n                time += sample_time_duration;\n            }\n        }\n        \n        // capture graph(s) ouput(s).\n        if (mGraphs[mActiveGraph].mainOutput.size()) {\n            auto& pGraph = mGraphs[mActiveGraph].pGraph;\n\n            Falcor::Texture::SharedPtr pOutTex = std::dynamic_pointer_cast<Falcor::Texture>(pGraph->getOutput(mGraphs[mActiveGraph].mainOutput));\n            assert(pOutTex);\n\n            Falcor::Texture* pTex = pOutTex.get();\n            assert(pTex);\n            \n            {\n            \n            Falcor::ResourceFormat resourceFormat;\n            uint32_t channels;\n            std::vector<uint8_t> textureData;\n            pTex->readTextureData(0, 0, textureData, resourceFormat, channels);\n            \n            LLOG_DBG << \"Texture read data size is: \" << textureData.size() << \" bytes\";\n            assert(textureData.size() == frame_data.imageWidth * frame_data.imageHeight * channels * 4); // testing only on 32bit RGBA for now\n\n            mpDisplay->sendImage(frame_data.imageWidth, frame_data.imageHeight, textureData.data());\n\n            }\n\n        } else {\n        \tLLOG_WRN << \"Invalid active graph output!\";\n        }\n\n    } else {\n    \tLLOG_WRN << \"No graphs to render!\";\n    }\n\n    //endFrame(pRenderContext, mpTargetFBO);\n}\n\nvoid Renderer::beginFrame(Falcor::RenderContext* pRenderContext, const Falcor::Fbo::SharedPtr& pTargetFbo) {\n    //for (auto& pe : mpExtensions)  pe->beginFrame(pRenderContext, pTargetFbo);\n}\n\nvoid Renderer::endFrame(Falcor::RenderContext* pRenderContext, const Falcor::Fbo::SharedPtr& pTargetFbo) {\n    //for (auto& pe : mpExtensions) pe->endFrame(pRenderContext, pTargetFbo);\n}\n\n// IFramework \nFalcor::RenderContext* Renderer::getRenderContext() {\n\treturn mpDevice ? mpDevice->getRenderContext() : nullptr;\n}\n\nstd::shared_ptr<Falcor::Fbo> Renderer::getTargetFbo() {\n\treturn mpTargetFBO;\n}\n\nFalcor::Clock& Renderer::getClock() {\n\treturn *mpClock;\n}\n\nFalcor::FrameRate& Renderer::getFrameRate() {\n\treturn *mpFrameRate;\n}\n\nvoid Renderer::resizeSwapChain(uint32_t width, uint32_t height) {\n    auto pBackBufferFBO = mpDevice->getOffscreenFbo();\n    if( (pBackBufferFBO->getWidth() != width) || (pBackBufferFBO->getHeight() != height) ) {\n        mpDevice->resizeSwapChain(width, height);\n        mpTargetFBO = Fbo::create2D(mpDevice, width, height, mpDevice->getOffscreenFbo()->getDesc());\n    }\n}\n\nFalcor::SampleConfig Renderer::getConfig() {\n    Falcor::SampleConfig c;\n    c.deviceDesc = mpDevice->getDesc();\n    //c.windowDesc = mpWindow->getDesc();\n    c.showMessageBoxOnError = false;//Logger::isBoxShownOnError();\n    c.timeScale = (float)mpClock->getTimeScale();\n    c.pauseTime = mpClock->isPaused();\n    c.showUI = false;\n    return c;\n}\n\n}  // namespace lava",
			"file": "src/lava_lib/renderer.cpp",
			"file_size": 12374,
			"file_write_time": 132485636518666886,
			"settings":
			{
				"buffer_size": 12511,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Clock.h",
			"settings":
			{
				"buffer_size": 8564,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DeviceManager.h",
			"settings":
			{
				"buffer_size": 3635,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.h",
			"settings":
			{
				"buffer_size": 12323,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphCompiler.h",
			"settings":
			{
				"buffer_size": 3226,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/prelude/slang-cpp-types.h",
			"settings":
			{
				"buffer_size": 37133,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
			"settings":
			{
				"buffer_size": 31232,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "SkyBox + 7 eagle models. 4K x 256spp (with MESA)\n\n8.20 s\n7.90 s\n8.01 s\n\n\n\n",
			"settings":
			{
				"buffer_size": 74,
				"line_ending": "Unix",
				"name": "SkyBox + 7 eagle models. 4K x 256spp (with MESA)"
			}
		},
		{
			"file": "src/lava_lib/display.h",
			"settings":
			{
				"buffer_size": 2601,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/display.cpp",
			"settings":
			{
				"buffer_size": 12020,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/prman/ri.h",
			"settings":
			{
				"buffer_size": 49551,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/visitor.cpp",
			"settings":
			{
				"buffer_size": 5800,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/simple_inline_ascii3.lsd",
			"settings":
			{
				"buffer_size": 7575,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/session.cpp",
			"settings":
			{
				"buffer_size": 13438,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/ut_string.cpp",
			"settings":
			{
				"buffer_size": 609,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/ut_string.h",
			"settings":
			{
				"buffer_size": 298,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/imdisplay_test.py",
			"settings":
			{
				"buffer_size": 609,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/ri_display/d_houdini.cpp",
			"settings":
			{
				"buffer_size": 32314,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBprman17.0.py",
			"settings":
			{
				"buffer_size": 17134,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIB.py",
			"settings":
			{
				"buffer_size": 15241,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBapi.py",
			"settings":
			{
				"buffer_size": 14671,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBapiprman.py",
			"settings":
			{
				"buffer_size": 14917,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBmisc.py",
			"settings":
			{
				"buffer_size": 12877,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBframe.py",
			"settings":
			{
				"buffer_size": 53439,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/bin/lava_app_init.sh",
			"settings":
			{
				"buffer_size": 326,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/bin/lava",
			"settings":
			{
				"buffer_size": 340,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/parameters/lava.ds",
			"settings":
			{
				"buffer_size": 112264,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/parameters/SOHOparameters",
			"settings":
			{
				"buffer_size": 268,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/ri_display/d_houdini.h",
			"settings":
			{
				"buffer_size": 4398,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/ri_display/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 683,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/lava_cmd.cpp",
			"settings":
			{
				"buffer_size": 7077,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/reader_lsd.h",
			"settings":
			{
				"buffer_size": 1455,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/grammar_lsd_expr.h",
			"settings":
			{
				"buffer_size": 7071,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/visitor.h",
			"settings":
			{
				"buffer_size": 4047,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/grammar_lsd.h",
			"settings":
			{
				"buffer_size": 26054,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/FalcorMath.h",
			"settings":
			{
				"buffer_size": 8456,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/bgeo_handler.cpp",
			"settings":
			{
				"buffer_size": 1063,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/bgeo_handler.h",
			"settings":
			{
				"buffer_size": 1622,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/bgeo.h",
			"settings":
			{
				"buffer_size": 514,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/scope.cpp",
			"settings":
			{
				"buffer_size": 6902,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/visitor_echo.cpp",
			"settings":
			{
				"buffer_size": 6577,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/session.h",
			"settings":
			{
				"buffer_size": 2363,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/properties_container.h",
			"settings":
			{
				"buffer_size": 9378,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/properties_container.cpp",
			"settings":
			{
				"buffer_size": 15879,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
			"settings":
			{
				"buffer_size": 3194,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 5308,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Console.cpp",
			"settings":
			{
				"buffer_size": 6326,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Console.h",
			"settings":
			{
				"buffer_size": 3225,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4823,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/sdl_display/d_sdl.cpp",
			"settings":
			{
				"buffer_size": 8449,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/sdl_display/sdl_opengl_window.h",
			"settings":
			{
				"buffer_size": 1692,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/sdl_display/sdl_opengl_window.cpp",
			"settings":
			{
				"buffer_size": 9178,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#include <iostream>"
			}
		},
		{
			"file": "src/lava_lib/sdl_display/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1442,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1066,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/simple_inline_ascii2.lsd",
			"settings":
			{
				"buffer_size": 514,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/test_inline_ascii.lsd",
			"settings":
			{
				"buffer_size": 65835,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#\n# PROPRIETARY INFORMATION.  This software is proprietary to\n# Side Effects Software Inc., and is not to be reproduced,\n# transmitted, or disclosed in any way without written permission.\n#\n# Produced by:\n#       Side Effects Software Inc\n#       123 Front Street West, Suite 1401\n#       Toronto, Ontario\n#       Canada   M5J 2M2\n#       416-504-9876\n#\n# NAME: LSDgeo.py ( Python )\n#\n# COMMENTS:     LSD Geometry I/O for SOHO\n#\n\nimport re\nimport soho, hou, sys\nimport sohoglue\nimport SOHOcommon\nimport LSDmisc\nimport LSDapi\nimport LSDsettings\nimport LSDframe\nfrom LSDapi import *\nfrom soho import SohoParm\nfrom sohog import SohoGeometry\n\ntheDetailRefs = {}\ntheDetailRefsInv = {}\ntheSavedDetails = {}\ntheSopTBound = {}\ntheSavedProperties = {}\ntheSavedOPropMaps = {}\ntheSavedShaders = {}\ntheShopRefs = {}\ntheShopRefsInv = {}\ntheMaterialOverrideRefs = {}\ntheMaterialOverrideRefsInv = {}\n\ntheOverrideFormatStr='<<%s>>'\n\n\ndef _dummyGeometry():\n    print \"\"\"PGEOMETRY V5\nNPoints 0 NPrims 0\nNPointGroups 0 NPrimGroups 0\nNPointAttrib 0 NVertexAttrib 0 NPrimAttrib 0 NAttrib 0\nbeginExtra\nendExtra\"\"\"\n\ndef reset(full = True):\n    global theDetailRefs, theDetailRefsInv, theSavedDetails, theSavedProperties\n    global theSavedShaders, theSopTBound, theShopRefs\n    global theShopRefsInv, theMaterialOverrideRefs, theMaterialOverrideRefsInv\n    global theSavedOPropMaps\n    if full:\n        theDetailRefs = {}\n        theDetailRefsInv = {}\n        theSavedDetails = {}\n        theSavedShaders = {}\n        theSopTBound = {}\n        theShopRefs = {}\n        theShopRefsInv = {}\n        theMaterialOverrideRefs = {}\n        theMaterialOverrideRefsInv = {}\n    theSavedProperties = {}\n    theSavedOPropMaps = {}\n\nproceduralParms = [\n    # We ask the SHOP to evaluate both the shader string AND the bounding box\n    SohoParm('shop_geometrypath', 'shader', [], False),\n    SohoParm('shop_geometrypath', 'bounds', [1,1,1,-1,-1,-1], False),\n    SohoParm('shop_geometrypath', 'string', [], False),\n    SohoParm('shop_cvexpath', 'shader', [], False),\n]\n\ndef getProcedural(obj, now): \n    if obj.getDefaultedInt('shop_disable_geometry_shader', now, [0])[0]:\n        return None\n    proc = obj.evaluate(proceduralParms, now)\n    shader = proc[0].Value\n    bounds = proc[1].Value\n    type   = getattr(proc[0], \"ShopType\", soho.ShopTypeDefault)\n    if len(shader) < 1 or len(shader[0]) < 1 or len(bounds) != 6:\n        return None\n    return (bounds, shader, type, soho.getObject(proc[2].Value[0]))\n\ndef _forceGeometry(obj, now):\n    return obj.getDefaultedInt('lv_forcegeometry', now, [1])[0]\n\ndef _getDiskFiles(obj, eval_time, times, velblur):\n    auto_archive = obj.getDefaultedString('lv_auto_archive', eval_time, [''])[0]\n    if auto_archive == 'off' or auto_archive == 'none':\n        auto_archive = None\n    files = []\n    if velblur:\n        times = [eval_time, eval_time]\n    \n    for now in times:\n        filename = []\n        if not obj.evalString(\"lv_archive\", now, filename):\n            return None\n        files.append(filename[0])\n        if auto_archive:\n            # Save out .bgeo file\n            tag = 'auto_archived-%s' % filename[0]\n            processed = obj.getData(tag)\n            if not processed:\n                obj.storeData(tag, True)    # Indicate we've archived this file\n                if auto_archive == 'force' or not os.path.exists(filename[0]):\n                    soppath = obj.getDefaultedString('object:soppath',\n                                                now, [''])[0]\n                    gdp = SohoGeometry(soppath, now)\n                    options = getSaveOptions(obj, now)\n                    if gdp.Handle >= 0:\n                        soho.makeFilePathDirsIfEnabled(filename[0])\n                    if gdp.Handle < 0 or not gdp.save(filename[0], options):\n                        soho.error('Unable to create archive: %s' % filename[0])\n    return files\n\ndef isObjectFastPointInstancer(obj, now):\n    if not obj:\n        return False\n    plist = obj.evaluate( [ SohoParm('ptinstance', 'int', [0], False ) ], now )\n    return plist[0].Value[0] == 2\n\ndef _getMaterialOverride(obj, now):\n    if obj is None:\n        return 'compact'\n    return obj.getDefaultedString('lv_materialoverride', now, ['compact'])[0]\n\n_invalidChars = re.compile('[^-a-zA-Z0-9.,_:]')\n\ndef hashPathOverride(path, over):\n    # Given a SHOP path and an override value, create a hash which is\n    # a \"nice\" name for mantra.  Mantra uses this algorithm exactly to\n    # perform it's mapping\n    over = over.replace(' ', '')        # Remove spaces\n    if not over or over == '{}' or over == '{,}':\n        return path                     # An empty override uses the path\n    return path + '+' + _invalidChars.sub('', over)\n\ndef _getCompactPropertyOverrideHash(path, over):\n    if path is None or len(path) == 0 or over is None:\n        return path\n\n    # Evaluate the override into a python dict\n    try:\n        over_dict = eval(over)\n    except:\n        return path\n        \n    if len(over_dict) == 0:\n        return path\n\n    return path + '+' + '+'.join(sorted(over_dict.keys()))\n\n\ndef processOverrideProperty(soppath, shoppath, overrides, now):\n    if shoppath:\n        hashpath = hashPathOverride(shoppath, overrides)\n        referenceMaterialOverride(soppath, shoppath, hashpath)\n        if theSavedProperties.get(hashpath, None) == None:\n            try:\n                dict = eval(overrides)\n            except:\n                dict = None\n            over = soho.PropertyOverride(dict)\n            shop = soho.getObject(shoppath)\n            cmd_start('material')\n            LSDsettings.outputObject(shop, now, name=hashpath)\n            if LSDsettings._Settings.GenerateMaterialname:\n                cmd_property('object', 'materialname', [shoppath])\n            theSavedProperties[hashpath] = True \n            cmd_end()\n    return\n\ndef processCompactOverrideProperty(soppath, shop_id, shop_infos, now, opropmap):\n    shoppath = shop_id.split('+')[0]\n    referenceMaterialOverride(soppath, shoppath, shop_id)\n    odict = shop_infos.get('properties', {})\n    over = soho.PropertyOverride(odict)\n    if theSavedProperties.get(shop_id, None) == None:\n        shop = soho.getObject(shoppath)\n\n        cmd_start('material')\n        propmap = {}\n        LSDsettings.outputObject(shop, now, name=shop_id,\n                                          output_shader=False,\n                                          opropmap=propmap)\n        if LSDsettings._Settings.GenerateMaterialname:\n            cmd_property('object', 'materialname', [shoppath])\n        theSavedProperties[shop_id] = True\n        theSavedOPropMaps[shop_id] = propmap\n        opropmap.update(propmap)        # Merge property maps\n\n        for shop_type, shop_info in shop_infos.items():\n            if shop_type == 'properties':\n                continue\n            cmd_shader('object', LSDsettings.oshaderMap[shop_type], shop_info[0], shop_info[1])\n        cmd_end()\n    else:\n        propmap = theSavedOPropMaps.get(shop_id, None)\n        if propmap:\n            opropmap.update(propmap)\n    del over\n    return\n    \ndef processStyleSheetProperty(mat_path, now):\n    if theSavedProperties.get(mat_path, None) == None:\n        LSDsettings.outputMaterial(mat_path, now)\n        theSavedProperties[mat_path] = True\n    return\n\ndef processGlobalPropertyOverrides(obj, soppath, gdp, pathattrib, overattrib, now):\n    paths = gdp.attribProperty(pathattrib, 'geo:allstrings')\n    overs = gdp.attribProperty(overattrib, 'geo:allstrings')\n    fullpaths = []\n    for p in paths:\n        hou_shop = obj.node(p)\n        if hou_shop:\n            fullpaths.append(hou_shop.path())\n        else:\n            fullpaths.append(p)\n    n = min(len(paths), len(overs))\n    for i in xrange(n):\n        processOverrideProperty(soppath, fullpaths[i], overs[i], now)\n    return\n\ndef processPrimOrPointPropertyOverrides(obj, creator_obj, soppath, gdp, style,\n                                        pathattrib, overattrib, now, opropmap):\n    nitems = gdp.globalValue(style+'count')[0]\n    if not nitems:\n        return False\n\n    ostyle = _getMaterialOverride(soho.getObject(creator_obj.path()), now)\n    if ostyle == 'none':\n        return False\n\n    have_prim_props = False\n    \n    if ostyle == 'full':\n        fullpaths = {}\n        paths = gdp.attribProperty(pathattrib, 'geo:allstrings')\n        for p in paths:\n            hou_shop = creator_obj.node(p)\n            if hou_shop:\n                fullpaths[p] = hou_shop.path()\n            else:\n                fullpaths[p] = p\n        for item in xrange(nitems):\n            path = gdp.value(pathattrib, item)[0]\n            if path:\n                over = gdp.value(overattrib, item)[0]\n                processOverrideProperty(soppath, fullpaths[path], over, now)\n                have_prim_props = True\n    elif ostyle == 'compact':\n        unique_shops = set()\n        for item in xrange(nitems):\n            path = gdp.value(pathattrib, item)[0]\n            if path:\n                over = gdp.value(overattrib, item)[0]\n                unique_shops.add( _getCompactPropertyOverrideHash(path, over) )\n\n        shops = {}\n        for shop_hash in unique_shops:\n            shop_id = shop_hash.split( '+' )\n\n            shop_path = shop_id.pop(0)\n            shop_obj = soho.getObject( shop_path )\n\n            odict = {}\n            if len(shop_id)>0:\n                for override in shop_id:\n                    odict[override] = theOverrideFormatStr % override\n                if odict:\n                    # Stash override dict for later use by property overrides\n                    shops.setdefault(shop_hash, {})\n                    shops[shop_hash]['properties'] = odict\n            over = soho.PropertyOverride(odict)\n            for oshader in LSDsettings.oshaderParms:\n                shader_type = oshader.Houdini\n                shader = LSDsettings.getObjectShader(shop_obj, shader_type, now)\n                if shader:\n                    shops.setdefault(shop_hash, {})\n                    shops[shop_hash][shader_type] = shader\n\n            del over\n        for shop_id, shop_infos in shops.items():\n            processCompactOverrideProperty(soppath, shop_id, shop_infos, now, opropmap)\n            have_prim_props = True\n        \n    return have_prim_props\n\ndef processPrimStyleSheet(gdp, style, stylesheetattrib, now):\n    if style == 'geo:global':\n        nitems = 1\n    else:\n        nitems = gdp.globalValue(style+'count')[0]\n\n    if not nitems:\n        return False\n\n    have_prim_stylesheets = False\n    \n    unique_mats = set()\n    unique_bundles = set()\n    for item in xrange(nitems):\n        stylesheet = gdp.value(stylesheetattrib, item)\n        if len(stylesheet) > 0:\n            stylesheet = stylesheet[0]\n        else:\n            stylesheet = '' # Fall back in case tuple size is zero.\n        (ss_bundles, ss_mats) = LSDsettings.getBundlesAndMaterialsFromStyleSheet(stylesheet)\n        for mat_path in ss_mats:\n            if mat_path not in unique_mats and hou.node(mat_path):\n                unique_mats.add(mat_path)\n        for bundle in ss_bundles:\n            unique_bundles.add(bundle)\n\n    for mat_path in unique_mats:\n        processStyleSheetProperty(mat_path, now)\n        have_prim_stylesheets = True\n    for bundle in unique_bundles:\n        LSDsettings.outputBundle(bundle)\n    \n    return have_prim_stylesheets\n\ndef saveMaterial(now, fullpath):\n    # If the material has overrides (from the Material SOP), we must\n    # update each material override instance.  There could be as many\n    # one per primitive for a given detail.\n    if hasMaterialOverrides(fullpath):\n        details = getReferencingDetails(fullpath)\n        if details != None:\n            for detail in details:\n                gdp = SohoGeometry(detail, now)\n                if gdp.Handle >= 0:\n                    saveProperties(None, detail, gdp, now)\n    # It's possible that we don't need to output the base material\n    # (ie. not an override) when only overrides are used; however,\n    # we ignore this and always output the base material.  Note that\n    # this could affect the computed displacement bound.\n    if theSavedProperties.get(fullpath, None) == None:\n        shop = soho.getObject(fullpath)\n        cmd_start('material')\n        LSDsettings.outputObject(shop, now)\n        if LSDsettings._Settings.GenerateMaterialname:\n            cmd_property('object', 'materialname', [fullpath])\n        theSavedProperties[fullpath] = True\n        cmd_end()\n    return\n\ndef processPropertyStrings(obj, strings, now):\n    for path in strings:\n        if path:\n            # Handle relative paths to SHOPs\n            hou_shop = obj.node(path)\n            if hou_shop:\n                fullpath = hou_shop.path()\n            else:\n                fullpath = path\n            saveMaterial(now, fullpath)\n    return\n\ndef traverseMaterials(parent, now, shaders_too):\n    try:\n        kids = parent.children()\n    except:\n        return\n    for n in kids:\n        processed = False\n        t = n.type()\n        if t.category() == hou.shopNodeTypeCategory():\n            if t.name()=='material' or t.name()=='vopmaterial' or shaders_too:\n                saveMaterial(now, n.path())\n                processed = True\n        if t.category() == hou.vopNodeTypeCategory():\n            if n.isMaterialFlagSet():\n                saveMaterial(now, n.path())\n                processed = True\n        if not processed or n.childTypeCategory() == hou.shopNodeTypeCategory():\n            # This isn't a material, so traverse all the children\n            traverseMaterials(n, now, shaders_too)\n\ndef declareAllMaterials(now, shaders_too):\n    root = hou.node('/')\n    traverseMaterials(root, now, shaders_too)\n\ndef declareMaterials(now, shaders):\n    for shop in shaders:\n        fullpath = shop.getName()\n        saveMaterial(now, fullpath)\n\ndef processShaderStrings(obj, strings, now, shadertype):\n    for path in strings:\n        if path:\n            # Handle relative paths to SHOPs\n            hou_shop = obj.node(path)\n            if hou_shop:\n                fullpath = hou_shop.path()\n            else:\n                fullpath = path\n\n            # the key needs to depend on shadertype as well since shop path may\n            # point to a multi-context shop node, while here we are processing\n            # the shop node for a specific context\n            pathkey = fullpath + str(shadertype)\n            if not theSavedShaders.has_key(pathkey):\n                theSavedShaders[pathkey] = True\n                shop = soho.getObject(fullpath)\n                # The 'shop:string' token will cause the shop to\n                # package up all its parameters into a single string\n                parm = SohoParm('shop:string', 'shader', skipdefault=False)\n                parm.ShopType = shadertype\n                if shop.evalParm(parm, now):\n                    cmd_shop(fullpath, parm.Value[0], shadertype)\n\nclass SavePropertiesStatus:\n    def __init__(self, cpath=None, prim_props=False, opropmap={}):\n        self.CreatorPath = cpath\n        self.HasPrimProps = prim_props\n        self.OverridePropMap = opropmap\n\ndef saveProperties(obj, soppath, gdp, now):\n    # Relative paths in properties & shaders are specified relative to\n    # the object creator (not the SOP), so, we need to find the object\n    try:\n        sop = hou.node(soppath)\n    except:\n        return SavePropertiesStatus()\n    if not sop:\n        return SavePropertiesStatus()\n    if isObjectFastPointInstancer(obj,now):\n        return SavePropertiesStatus()\n    creator_obj = sop.creator()\n    if not creator_obj:\n        return SavePropertiesStatus()\n    creator_path = None\n    prim_props = False\n    opropmap = {}\n    for style in ['geo:global', 'geo:prim', 'geo:point']:\n        # First process material overrides.\n        attr = gdp.attribute(style, 'shop_materialpath')\n        if attr >= 0:\n            creator_path = creator_obj.path()   # Only set path if required\n            over = gdp.attribute(style, 'material_override')\n            if over >= 0:\n                # Here, there are material overrides.  Therefore, it's\n                # possible that a unique material might be needed for\n                # each and every primitive.  If the override attribute\n                # is unique on each primitive, it gets pretty ugly\n                # fast.\n                if style == 'geo:global':\n                    processGlobalPropertyOverrides(creator_obj, soppath, gdp,\n                        attr,over, now)\n                else:\n                    prim_props = processPrimOrPointPropertyOverrides(obj, creator_obj, soppath, gdp, style, attr, over, now, opropmap)\n            else:\n                strs = gdp.attribProperty(attr, 'geo:allstrings')\n                processPropertyStrings(creator_obj, strs, now)\n\n        # Now process material style sheets.\n        attr = gdp.attribute(style, 'material_stylesheet')\n        if attr >= 0:\n            processPrimStyleSheet(gdp, style, attr, now)\n\n        # Now process backward compatibility for old style attributes\n        # (shader SOPs).  We need to save out the SHOP parameters\n        # since mantra doesn't know how to resolve the indirect\n        # references.\n        attributes = [('shop_lv_surface',  'surface'),\n                      ('shop_lv_photon',   'photon'),\n                      ('shop_lv_displace', 'displacement'),\n                      ('spriteshop',       'surface')]\n        for (name, typename) in attributes:\n            attr = gdp.attribute(style, name)\n            if attr >= 0:\n                strs = gdp.attribProperty(attr, 'geo:allstrings')\n                processShaderStrings(creator_obj, strs, now, soho.getShopType(typename))\n                creator_path = creator_obj.path()       # Only set path if required\n    return SavePropertiesStatus(cpath=creator_path,\n                    prim_props=prim_props,\n                    opropmap=opropmap)\n\ndef getSaveOptions(obj, now, saveinfo=False):\n    options = {\n        # Don't bother saving out artist info with all geometry\n        \"geo:saveinfo\":saveinfo,\n        # Allow for very long JSON lines\n        \"json:textwidth\":0,\n\t# Disable saving of index because we are not seekable anyways\n\t\"geo:skipsaveindex\":True,\n    }\n    groups = [True]\n    if not obj.evalInt('lv_savegroups', now, groups):\n        # Force inheritance to output driver\n        soho.getOutputDriver().evalInt('lv_savegroups', now, groups)\n    if groups[0]:\n        options['savegroups'] = True\n        options['geo:savegroups'] = True\n    else:\n        options['savegroups'] = False\n        options['geo:savegroups'] = False\n\n    # -1 -> Don't add normals\n    #  0 -> Add vertex normals if no normals\n    #  1 -> Add point normals if no normals\n    add_normals_to = obj.getDefaultedInt('lv_addnormalsto', now, [1])[0] - 1\n\n    if add_normals_to != -1:\n        render_as_points = obj.getDefaultedInt('lv_renderpoints', now, [2])[0]\n        if render_as_points == 1:\n            add_normals_to = -1\n\n    if add_normals_to != -1:\n        options['geo:add_normals_to'] = add_normals_to\n\n        # Get cusp angle if vertex normals\n        if add_normals_to == 0:\n            cusp_angle = obj.getDefaultedFloat('lv_cuspangle', now, [60.0])[0]\n            options['geo:cusp_angle'] = cusp_angle\n    \n    return options\n\n\ndef saveArchive(objpath, now, geofile, matfile):\n    obj = soho.getObject(objpath)\n    soppath = obj.getDefaultedString('object:soppath', now, [''])[0]\n    if not soppath:\n        sys.stderr.write('Unable to find render SOP for %s\\n' % objpath)\n        return\n\n    # When saving geometry for archives, make sure to save the header with\n    # information like the bounding box, etc.\n    options = getSaveOptions(obj, now, saveinfo=True)\n    name = soppath\n\n    gdp = SohoGeometry(soppath, now)\n    if gdp.Handle < 0:\n        sys.stderr.write('No geometry found for %s\\n' % soppath)\n        return\n\n    if matfile:\n        soho.makeFilePathDirsIfEnabled(matfile)\n        fp = open(matfile, 'w')\n        if fp:\n            save_stdout = sys.stdout\n            sys.stdout = fp\n            LSDmisc.header(now, None)\n            cmd_comment(\"Save materials for %s at time %g\" % (soppath, now))\n            if geofile:\n                cmd_comment('Corresponding geometry file: %s' % geofile)\n            status = saveProperties(obj, soppath, gdp, now)\n            if status.CreatorPath:\n                cmd_property('geometry', 'basepath', [status.CreatorPath])\n            if status.HasPrimProps:\n                cmd_property( 'geometry', 'materialoverride',\n                    [_getMaterialOverride(obj, now)])\n            if status.OverridePropMap:\n                cmd_property('geometry', 'overridepropmap',\n                    [repr(status.OverridePropMap)])\n            sys.stdout.flush()\n            sys.stdout = save_stdout\n        else:\n            sys.stderr.write('Unable to save materials to %s\\n' % matfile)\n    if geofile:\n        soho.makeFilePathDirsIfEnabled(geofile)\n        if not gdp.save(geofile, options):\n            sys.stderr.write('Unable to save geometry to %s\\n' % geofile)\n\n\ndef saveRetainedProceduralRefs(proc, now):\n    shop = proc[3]\n    obj_paths = shop.getDefaultedString('op:objpaths', now, [])\n    if not obj_paths:\n        return\n \n    for obj_path in obj_paths:\n        obj = soho.getObject(obj_path)\n        mbinfo = LSDmisc.geo_mbsamples(obj, now)\n        saveRetained(obj, now, mbinfo[0], mbinfo[1], mbinfo[2], mbinfo[3])\n\ndef saveRetained(obj, now, times, velblur, accel_attrib, mbsegments):\n    #\n    # There are three cases for LSD geometry\n    #   - Geometry defined by a procedural SHOP\n    #     This geometry is output on a per-instance basis and not retained.\n    #   - Geometry defined by a disk file\n    #   - Geometry defined by a SOP\n    #\n    wrangler = LSDsettings.getWrangler(obj, now, 'object_wrangler')\n\n    # Call the object wranglers 'retainShaders'. Note. It's the responsibility\n    # of object wrangler to emit LSD correctly.\n    obj.wrangleInt(wrangler,'retainShaders', now, [0])[0]\n\n    # Call the object wranglers 'retainGeometry', skip inbuilt soho code if\n    # it returns True. Note. It's the responsibility of object wrangler to\n    # emit LSD correctly.\n    if obj.wrangleInt(wrangler,'retainGeometry', now, [0])[0] :\n        return\n    \n    proc = getProcedural(obj, now)\n    if proc:\n        saveRetainedProceduralRefs(proc, now)\n        if not _forceGeometry(obj, now):\n            return\n\n    # Check for disk files (archives)\n    files = _getDiskFiles(obj, now, times, velblur)\n    if files and len(files) == len(times):\n        baseName = 'arch-%s' % obj.getName()\n        name = baseName\n        details = theSavedDetails.get(name, None)\n        refs = theDetailRefs.get(name, None)\n        if details == None:\n            seg = 0\n            details = []\n            for eval_time in times:\n                \n                details.append(name)\n                cmd_start('geo')\n                if velblur and seg > 0:\n                    if velblur > 1:\n                        cmd_detail('-a \"%s\" %g -V %g %g %s'%(accel_attrib, mbsegments, now-times[0], times[1]-now,name),\n                                'arch-%s' % obj.getName())\n                    elif velblur == 1:\n                        cmd_detail('-V %g %g %s'%(now-times[0], times[1]-now,name),\n                                'arch-%s' % obj.getName())\n                else:\n                    if velblur:\n                        eval_time = now\n                    LSDsettings.outputGeometry(obj, eval_time)\n                    cmd_detail(name, files[seg])\n                cmd_end()\n                seg += 1\n                name = '%s-%d' % (baseName, seg)\n            theSavedDetails[baseName] = details\n            theDetailRefs[baseName] = set([obj.getName()])\n        else:\n            refs.add(obj.getName())\n        theDetailRefsInv[obj.getName()] = baseName\n        obj.storeData(\"lv_details\", details)\n        return\n\n    # Geometry defined by SOPs\n    soppath = obj.getDefaultedString(\"object:soppath\", now, [''])[0]\n    if not soppath:\n        # No SOP associated with this object -- this may cause problems later.\n        return\n\n    tbound = (times[0]-now, times[-1]-now, len(times))\n\n    details = theSavedDetails.get(soppath, None)\n\n    if details == None or theSopTBound[soppath] != tbound:\n        binary = [True]\n        if not obj.evalInt('lv_binarygeometry', now, binary):\n            # Force inheritance to output driver\n            soho.getOutputDriver().evalInt('lv_binarygeometry', now, binary)\n        if binary[0]:\n            stdoutname = 'stdout.bgeo'\n        else:\n            stdoutname = 'stdout.geo'\n        options = getSaveOptions(obj, now)\n        details = []\n        name = soppath\n\n        # Check to see whether to save geometry to external files or inline\n        plist = obj.evaluate([\n            SohoParm('lv_inlinestorage', 'int', LSDmisc.InlineGeoDefault,False),\n            SohoParm('lv_reuseoutlinecache', 'int', [0], False),\n        ], now)\n        inline = plist[0].Value[0]\n        reuse = plist[1].Value[0]\n        nframes = LSDmisc.SequenceLength\n        if nframes == 1:\n            reuse = False\n        for seg, eval_time in enumerate(times):\n            details.append(name)\n            if velblur and seg > 0:\n                cmd_comment(\"Save geometry for %s velocity blur\" % (soppath))\n                cmd_start('geo')\n                if velblur > 1:\n                    cmd_detail('-a \"%s\" %g -V %g %g %s' %(accel_attrib, mbsegments, now-times[0], times[1]-now, name), details[0])\n                elif velblur == 1:\n                    cmd_detail('-V %g %g %s' %(now-times[0], times[1]-now, name), details[0])\n            else:\n                if velblur:\n                    eval_time = now\n                gdp = SohoGeometry(soppath, eval_time)\n                saved = False\n                if gdp.Handle >= 0:\n                    status = saveProperties(obj, soppath, gdp, eval_time)\n                    cmd_comment(\"Save geometry for %s at time %g\" % (soppath, eval_time))\n                    cmd_start('geo')\n                    if status.HasPrimProps:\n                        cmd_property( 'geometry', 'materialoverride',\n                            [_getMaterialOverride(obj, eval_time)])\n                    if status.OverridePropMap:\n                        cmd_property('geometry', 'overridepropmap',\n                            [repr(status.OverridePropMap)])\n\n                    LSDsettings.outputGeometry(obj, eval_time)\n                    options['geo:sample'] = seg\n                    if status.CreatorPath:\n                        cmd_property('geometry', 'basepath', [status.CreatorPath])\n                    if inline:\n                        # Save the detail statement first\n                        cmd_detail(name, \"stdin\")\n                        # Then save the geometry inline in the LSD\n                        saved = gdp.save(stdoutname, options)\n                    else:\n                        # Find out where to save the external asset.\n                        sessionid = LSDmisc.ExternalSessionId\n                        canreuse = reuse\n                        if not reuse and LSDmisc.PipeStream:\n                            # Pass the -T option to delete file after rendering.\n                            rootpath = LSDmisc.getLocalStoragePath()\n                            tmpfile = '-T '\n                            varname = '$_TMP_LOCAL_STORAGE'\n                        else:\n                            rootpath = LSDmisc.getSharedStoragePath()\n                            tmpfile = ''\n                            varname = '$_TMP_SHARED_STORAGE'\n\n                        if nframes > 1:\n                            # If we're rendering more than one frames, check to\n                            # see if the geometry is static or dynamic.\n                            if not gdp.globalValue('geo:timedependent')[0]:\n                                # Instead of storing the session id per-frame,\n                                # use a shared session id.\n                                sessionid = LSDmisc.ExternalSharedSessionId\n                                # The geometry doesn't change frame to frame\n                                if LSDmisc.SequenceNumber != nframes:\n                                    # If we aren't on the last frame, we don't\n                                    # want mantra to delete the file after its\n                                    # been used (since it will be used again for\n                                    # subsequent frames).\n                                    tmpfile = ''\n                                if LSDmisc.SequenceNumber != 1:\n                                    # For frames other than the first frame,\n                                    # we can just reuse the shared geometry\n                                    canreuse = True\n\n                        # Create a unique filename for the geometry\n                        path = '%s_%s' % (sessionid,\n                                            gdp.globalValue('geo:sopid')[0])\n                        if seg:\n                            path += '-%d' % seg\n                        path += '.bgeo.sc'\n\n                        # Save geometry to external file first.\n                        #\n                        # By saving geometry first, we ensure the geometry will\n                        # be flushed to disk before the cmd_detail statement is\n                        # written to a pipe.\n                        savepath = '/'.join([rootpath, path])\n                        if canreuse and os.path.exists(savepath):\n                            saved = True\n                        else:\n                            saved = gdp.save(savepath, options)\n\n                        # Instead of explicitly specifying the rootpath for the\n                        # cmd_detail command, use the $_TMP_SHARED_STORAGE\n                        # variable (defined in LSDmisc.py).  This makes it\n                        # easier to re-locate LSD files.\n                        path = '/'.join([varname, path])\n                        cmd_detail(tmpfile + name, path)\n                if not saved:\n                    if obj.wrangleInt(wrangler,'soho_soperror', now, [1])[0]:\n                        msg = 'Unable to save geometry for: %s' % soppath\n                        if gdp.Error:\n                            msg = ''.join([msg, '\\n\\tSOP ', gdp.Error])\n                        soho.error(msg)\n                    cmd_comment('Saving geometry failed')\n                    cmd_detail(name, \"stdin\")\n                    _dummyGeometry()\n            cmd_end()\n            name = \"%s-%d\" % (soppath, seg + 1)\n        theSavedDetails[soppath] = details\n        theDetailRefs[soppath] = set([obj.getName()])\n        theSopTBound[soppath] = tbound\n    else:\n        refs = theDetailRefs.get(soppath, None)\n        refs.add(obj.getName())\n    theDetailRefsInv[obj.getName()] = soppath\n    obj.storeData(\"lv_details\", details)\n\ndef dereferenceGeometry(obj):\n    #\n    # Use our object-name -> geometry-name mapping to find\n    # the specified object's geometry name.  Then delete\n    # the mapping and remove the object name from the set\n    # of objects that reference the geometry.\n    #\n    detail = theDetailRefsInv.get(obj.getName(), None)\n    if detail != None:\n        theDetailRefs[detail].remove(obj.getName())\n        del theDetailRefsInv[obj.getName()]\n\ndef deleteUnusedGeometry():\n    #\n    # Find all the geometries that have no referencing objects\n    # and delete them.\n    #\n    deleted = []\n    for detail, refs in theDetailRefs.items():\n        if len(refs) == 0:\n            details = theSavedDetails.get(detail, None)\n            if details != None:\n                deleted.extend(details)\n                del theSavedDetails[detail]\n\n    for detail in deleted:\n        if theDetailRefs.has_key(detail):\n            del theDetailRefs[detail]\n        cmd_delete('geometry', detail)\n        dereferenceMaterials(detail)\n        SohoGeometry.release(detail)\n\ndef instanceGeometry(obj, now, times):\n    # Now, we need to save the geometry for the object out\n    proc = getProcedural(obj, now)\n    if proc:\n        cmd_procedural(proc[0], proc[1], proc[2])\n        cmd_declare('object', 'vector2', 'camera:shutter',\n            LSDmisc.obj_shutter_open_close(obj, now))\n        if not _forceGeometry(obj, now):\n            return 0\n\n    # No procedural, so there must should be detail handles\n    data = obj.getData(\"lv_details\")\n    if not data:\n        return 0\n\n    details = data\n\n    mbinfo = LSDmisc.geo_mbsamples(obj, now)\n    if len(mbinfo[0]) == 1:\n        details = [ details[0] ]\n\n    for d in details:\n        cmd_geometry(d)\n    return\n\ndef getReferencingDetails(shop):\n    return theShopRefsInv.get(shop, None)\n\ndef hasMaterialOverrides(shop):\n    return theShopRefsInv.has_key(shop)\n\ndef referenceMaterialOverride(detail, shop, material):\n    # Create the following mappings:\n    # * detail -> SHOP\n    # * SHOP -> detail\n    # * (detail, shop) -> material\n    # * material -> (detail, shop)\n    refs = theShopRefs.get(detail, None)\n    if refs == None:\n        theShopRefs[detail] = set([shop])\n    else:\n        refs.add(shop)\n    refs = theShopRefsInv.get(shop, None)\n    if refs == None:\n        theShopRefsInv[shop] = set([detail])\n    else:\n        refs.add(detail)\n    refs = theMaterialOverrideRefs.get((detail, shop), None)\n    if refs == None:\n        theMaterialOverrideRefs[(detail, shop)] = set([material])\n    else:\n        refs.add(material)\n    refs = theMaterialOverrideRefsInv.get(material, None)\n    if refs == None:\n        theMaterialOverrideRefsInv[material] = set([(detail, shop)])\n    else:\n        refs.add((detail, shop))\n    \ndef dereferenceMaterials(detail):\n    # Remove all detail -> SHOP mappings and SHOP -> detail mappings for\n    # the specified detail.  Furthermore, invoke\n    # dereferenceMaterialOverrides() for all (detail, SHOP) pairs involving\n    # the specified detail.\n    shops = theShopRefs.get(detail, None)\n    if shops != None:\n        for shop in shops:\n            theShopRefsInv[shop].remove(detail)\n            if len(theShopRefsInv[shop]) == 0:\n                del theShopRefsInv[shop]\n            dereferenceMaterialOverrides(detail, shop)\n        del theShopRefs[detail]\n\ndef dereferenceMaterialOverrides(detail, shop):\n    # Remove all (detail, SHOP) -> material and material -> (detail, SHOP)\n    # mappings.  If a material is unreferenced, delete it.\n    materials = theMaterialOverrideRefs.get((detail, shop), None)\n    if materials != None:\n        for material in materials:\n            theMaterialOverrideRefsInv[material].remove((detail, shop))\n            if len(theMaterialOverrideRefsInv[material]) == 0:\n                cmd_delete('material', material)\n                del theMaterialOverrideRefsInv[material]\n        del theMaterialOverrideRefs[(detail, shop)]\n\ndef _computeVBounds(geo, box, tscale):\n    vbox = [0, 0, 0, 0, 0, 0]\n    vhandle = geo.attribute('geo:point', 'v')\n    if vhandle >= 0:\n        npts = geo.globalValue('geo:pointcount')[0]\n        for pt in xrange(npts):\n            v = geo.value(vhandle, pt)\n            vbox[0] = min(vbox[0], v[0]*tscale)\n            vbox[1] = min(vbox[1], v[1]*tscale)\n            vbox[2] = min(vbox[2], v[2]*tscale)\n            vbox[3] = max(vbox[0], v[0]*tscale)\n            vbox[4] = max(vbox[1], v[1]*tscale)\n            vbox[5] = max(vbox[2], v[2]*tscale)\n    return [vbox[0]+box[0], vbox[1]+box[1], vbox[2]+box[2],\n            vbox[3]+box[3], vbox[4]+box[4], vbox[5]+box[5]]\n\n# Returns the full bounds of an object over the entire shutter range\ndef getObjectBounds(obj, now):\n    (times, velblur, accel_attrib, mbsegments) = LSDmisc.geo_mbsamples(obj, now)\n    proc = getProcedural(obj, times[0])\n    if proc:\n        return proc[0]\n    \n    soppath = obj.getDefaultedString(\"object:soppath\", now, [''])[0]\n    if not soppath:\n        return None\n    details = theSavedDetails.get(soppath, None)\n    if not details or len(details) == 0:\n        return None\n    detail = details[0]\n\n    fullbounds = SOHOcommon.emptyBounds()\n    if velblur:\n        gdb = SohoGeometry(detail, times[0])\n        fullbounds = gdb.globalValue('geo:boundingbox')\n        fullbounds[:] = _computeVBounds(gdb, fullbounds, times[-1]-times[0])\n    else:\n        for geo_now in times:\n            gdb = SohoGeometry(detail, geo_now)\n            dbounds = gdb.globalValue('geo:boundingbox')\n            fullbounds[:] = SOHOcommon.enlargeBounds(fullbounds, dbounds)\n    return fullbounds\n\ntheOverrideFormatStr='<<%s>>'\n\ndef getInstancerAttributes(obj, now):\n    attribs = [\n        'geo:pointxform',               # Required\n        'v',\n        'instance',\n        'instancefile',\n        'shop_materialpath',\n        'material_override'\n    ]\n\n    sop_path = []\n    if not obj.evalString('object:soppath', now, sop_path):\n        return          # No geometry associated with this object\n\n    geo = SohoGeometry(sop_path[0], now)\n    if geo.Handle < 0:  # No geometry data available\n        return\n\n    npts = geo.globalValue('geo:pointcount')[0]\n    if not npts:\n        return\n\n    attrib_map = {}\n\n    for attrib in attribs:\n        handle = geo.attribute('geo:point', attrib)\n        if handle >= 0:\n            attrib_map[attrib] = handle\n\n    return (geo, npts, attrib_map)\n\ndef getInstantiatedObjects(obj, now):\n    (geo, npts, attrib_map) = getInstancerAttributes(obj, now)\n    if not geo or not npts:\n        return []\n\n    inst_path = []\n    obj.evalString('instancepath', now, inst_path)\n\n    inst_path[0] = LSDmisc.absoluteObjectPath(obj, now, inst_path[0])\n    \n    # See if there's a per-point instance assignment\n    if 'instance' not in attrib_map:\n        return inst_path\n\n    unique_inst = set(inst_path)\n    for pt in xrange(npts):\n        inst_path = geo.value(attrib_map['instance'], pt)[0]\n        unique_inst.add(LSDmisc.absoluteObjectPath(obj, now, inst_path))\n\n    return list(unique_inst)\n\n# This class emulates a function call, but instead of doing something\n# functional, simply stores the arguments to the call for later use.\nclass copyingXFormCall:\n    def __init__(self): self.items = []\n    def __call__(self, xform): self.items.append( hou.Matrix4(xform) )\n\n\ndef getPointInstanceSHOPHash( geo, pt, attrib_handle, override_handle ):\n    shop_path_hash = geo.value(attrib_handle, pt)[0]\n    if shop_path_hash is None or \\\n       len(shop_path_hash) == 0 or \\\n       override_handle is None:\n        return (shop_path_hash,None)\n\n    if override_handle < 0:\n        return (shop_path_hash,None)\n    overrides = eval(geo.value(override_handle, pt)[0])\n    if overrides is None or len(overrides) == 0:\n        return (shop_path_hash,None)\n\n    return (shop_path_hash + '+' + '+'.join( sorted(overrides.keys()) ), overrides)\n\ndef getPointInstanceSHOPs(pt_shaders, now, geo, attrib_name, npts, shader_types = None, override = None ):\n    if shader_types is None:\n        shader_types = [attrib_name]\n\n    attrib_handle = geo.attribute('geo:point', attrib_name)\n    if attrib_handle < 0:\n        return\n\n    override_handle = geo.attribute( 'geo:point', override ) if override is not None else -1\n\n    # Collect unique SHOPs from the point attribute\n    unique_shops = set()\n    for pt in xrange(npts):\n        (shop_hash,overrides) = getPointInstanceSHOPHash(geo, pt, attrib_handle, override_handle)\n        if shop_hash:\n            unique_shops.add( shop_hash )\n\n    for shop_hash in unique_shops:\n        shop_id = shop_hash.split( '+' )\n\n        shop_path = shop_id.pop(0)\n        shop_obj = soho.getObject( shop_path )\n\n        odict = {}\n        if len(shop_id)>0:\n            for override in shop_id:\n                odict[override] = theOverrideFormatStr % override\n        over = soho.PropertyOverride(odict)\n        for shader_type in shader_types:\n            shader = LSDsettings.getObjectShader(shop_obj, shader_type, now)\n            if shader:\n                pt_shaders.setdefault(shop_hash, {})\n                pt_shaders[shop_hash][shader_type] = shader\n        del over\n",
			"file": "src/houdini/soho/LSDgeo.py",
			"file_size": 40221,
			"file_write_time": 132458908416384272,
			"settings":
			{
				"buffer_size": 40221,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#\n# PROPRIETARY INFORMATION.  This software is proprietary to\n# Side Effects Software Inc., and is not to be reproduced,\n# transmitted, or disclosed in any way without written permission.\n#\n# Produced by:\n#       Side Effects Software Inc\n#       123 Front Street West, Suite 1401\n#       Toronto, Ontario\n#       Canada   M5J 2M2\n#       416-504-9876\n#\n# NAME: LSDframe.py ( Python )\n#\n# COMMENTS:\n#\n\nimport sys, math, os, re, json, fnmatch, uuid, base64, time\nimport tempfile\nimport hou, soho\nfrom soho import SohoParm\nimport SOHOcommon\nimport LSDgeo\nimport LSDmisc\nimport LSDsettings\nimport LSDhooks\nfrom LSDapi import *\nfrom hutil.file import insertFileSuffix\nimport quickplanes\n\n_OutputObjects = set()\n\nCubeMapSuffixes = [ \".zp.pic\", \".xp.pic\", \".zm.pic\",\n                    \".xm.pic\", \".yp.pic\", \".ym.pic\"]\nCubeMapMatrices = [\n    hou.Matrix4((1,0,0,0,  0,1,0,0,  0,0,1,0, 0,0,0,1)),       # +z\n    hou.Matrix4((0,0,-1,0, 0,1,0,0,  1,0,0,0, 0,0,0,1)),       # +x\n    hou.Matrix4((1,0,0,0,  0,-1,0,0, 0,0,-1,0,  0,0,0,1)),     # -z\n    hou.Matrix4((0,0,1,0,  0,1,0,0,  -1,0,0,0,  0,0,0,1)),     # -x\n    hou.Matrix4((1,0,0,0,  0,0,-1,0, 0,1,0,0, 0,0,0,1)),       # +y\n    hou.Matrix4((1,0,0,0,  0,0,1,0,  0,-1,0,0,  0,0,0,1)),     # -y\n]\n\nclass CubeMapControl:\n    def __init__(self, obj, now):\n        self.Object = obj\n        self.Face = -1\n        self.BasePath = obj.getDefaultedString('lv_picture', now, [''])[0]\n\n    def setFace(self, dir):\n        self.Face = dir\n        self.Filename = self.BasePath + CubeMapSuffixes[dir]\n        self.Transform = CubeMapMatrices[dir]\n\n    def makeMap(self):\n        cmd_makecubemap(self.BasePath, CubeMapSuffixes)\n\ndef objectSingleTransform(space, obj, now,\n                        invert, xfunc, cubemap):\n    xform = []\n    if not obj.evalFloat(space, now, xform):\n        return False\n    if len(xform) != 16:\n        return False\n    if invert:\n        xform = list(hou.Matrix4(xform).inverted().asTuple())\n    if cubemap:\n        # We want to generate the cube-map in \"world\".  To do this, we\n        # find the position of the object's center and construct a\n        # transform based on that position.\n        P = hou.Vector3((0,0,0)) * hou.Matrix4(xform)\n        hxform = hou.hmath.buildTranslate(P[0], P[1], P[2])\n        # Transform to orient for the face we're rendering\n        hxform *= cubemap.Transform\n        xform = list(hxform.asTuple())\n    xfunc(xform)\n    return True\n\ndef objectTransform(space, obj, times, xfunc=cmd_transform, mxfunc=cmd_mtransform, invert=False,\n                        cubemap=None):\n    if LSDhooks.call('pre_objectTransform', space, obj, times,\n                xfunc, invert, cubemap):\n        return\n    if not objectSingleTransform(space, obj, times[0], invert,\n                                 xfunc, cubemap):\n        return\n    seg = 1\n    while seg < len(times):\n        objectSingleTransform(space, obj, times[seg], invert,\n                        mxfunc, cubemap)\n        seg += 1\n    LSDhooks.call('post_objTransform', space, obj, times, xfunc, invert,cubemap)\n\ndef defplane(channel, variable, vextype, idx, wrangler, cam, now,\n                filename=None,\n                component=None,\n                lightexport=None,\n                showrelightingbuffer=False,\n                excludedcm=False):\n    if len(variable):\n        if LSDhooks.call('pre_defplane', variable, vextype, idx,\n                    wrangler, cam, now, filename, lightexport):\n            return\n\n        if not channel:\n            channel = variable\n        cmd_start('plane')\n        cmd_property('plane', 'variable', [variable])\n        cmd_property('plane', 'vextype', [vextype])\n        if filename:\n            soho.makeFilePathDirsIfEnabled(filename)\n            cmd_property('plane', 'planefile', [filename])\n        cmd_property('plane', 'channel', [channel])\n        if lightexport is not None:\n            cmd_property('plane', 'lightexport', [lightexport])\n        if component:\n            cmd_property('plane', 'component', [component])\n        if showrelightingbuffer:\n            cmd_property('plane', 'showrelightingbuffer', [showrelightingbuffer])\n        if excludedcm:\n            cmd_property('plane', 'excludedcm', [excludedcm])\n\n        plist = LSDsettings.evaluateImagePlane(idx, wrangler, cam, now)\n        cmd_propertyV('plane', plist)\n\n        if LSDhooks.call('post_defplane', variable, vextype, idx,\n                    wrangler, cam, now, filename, lightexport):\n            return\n        cmd_end()\n\ndef iprplane(channel):\n    if len(channel):\n        if LSDhooks.call('pre_iprplane', channel):\n            return\n        cmd_start('plane')\n        cmd_property('plane', 'variable', [channel])\n        cmd_property('plane', 'vextype', ['float'])\n        cmd_property('plane', 'channel', [channel])\n        cmd_property('plane', 'sfilter', ['closest'])\n        cmd_property('plane', 'pfilter', ['minmax idcover'])\n        if LSDhooks.call('post_iprplane', channel):\n            return\n        cmd_end()\n\ndisplayParms = {\n    'lv_device'  :SohoParm('lv_device',   'string',     [''], False),\n    'lv_foptions':SohoParm('lv_foptions', 'string',     [''], False),\n    'lv_numaux'  :SohoParm('lv_numaux',   'int',        [0], False),\n    'lv_exportcomponents'  :SohoParm('lv_exportcomponents',   'string',        [''], False),\n}\n\nplaneDisplayParms = {\n    'disable'   :SohoParm('lv_disable_plane%d', 'int',  [0], False,\n                                key='disable'),\n    'excludedcm': SohoParm('lv_excludedcm_plane%d', 'int',  [0], False,\n                                key='excludedcm'),\n    'variable'  :SohoParm('lv_variable_plane%d','string', [''], False,\n                                key='variable'),\n    'vextype'   :SohoParm('lv_vextype_plane%d', 'string', ['float'], False,\n                                key='vextype'),\n    'usefile'   :SohoParm('lv_usefile_plane%d', 'int', [0], False,\n                                key='usefile'),\n    'filename'  :SohoParm('lv_filename_plane%d', 'string', [''], False,\n                                key='filename'),\n    'channel'   :SohoParm('lv_channel_plane%d', 'string', [''], False,\n                                key='channel'),\n    'showrelightingbuffer' :SohoParm('lv_show_relighting_buffer%d', 'bool', [0], False,\n                                key='showrelightingbuffer'),\n\n    # Batch light exports\n    'lexport'   :SohoParm('lv_lightexport%d', 'int', [0], False,\n                                key='lightexport'),\n    'cexport'   :SohoParm('lv_componentexport%d', 'int', [0], False,\n                                key='componentexport'),\n    'lightscope':SohoParm('lv_lightexport_scope%d', 'string', ['*'], False,\n                                key='lightscope'),\n    'lightselect':SohoParm('lv_lightexport_select%d', 'string', ['*'], False,\n                                key='lightselect'),\n\n    # Some parameters for backward compatibility with H9.0\n    'h9channel' : SohoParm('lv_picture_plane%d', 'string', [''], False,\n                                key='h9channel'),\n}\n\nstereoParms = {\n    'lv_s3dleftcamera'  :SohoParm('lv_s3dleftcamera',  'bool',   [0],  False),\n    'lv_s3drightcamera' :SohoParm('lv_s3drightcamera', 'bool',   [0],  False),\n    'lv_filenamesuffix' :SohoParm('lv_filenamesuffix', 'string', [''], False),\n}\n\nuvRenderParms = {\n    'lv_uvmkpath'       :SohoParm('lv_uvmkpath', 'int', [1], False),\n    'lv_uvobjects'      :SohoParm('lv_uvobjects', 'int', [0], False),\n    'lv_uvtype'         :SohoParm('lv_uvtype', 'string', ['udim'], False),\n    'lv_uvhidecage'     : SohoParm('lv_uvhidecage', 'bool', [True], False),\n    'lv_uvunwrapres'    :SohoParm('lv_uvunwrapres', 'int', [1024, 1024], False),\n    'lv_isuvrendering'  :SohoParm('lv_isuvrendering', 'bool', [False], False),\n    'lv_uv_unwrap_method' :SohoParm('lv_uv_unwrap_method', 'int', [0], False),\n    'lv_uv_cmd_bias'  :SohoParm('lv_uv_cmd_bias', 'float', [0.01], False),\n    'lv_uv_cmd_maxdist' :SohoParm('lv_uv_cmd_maxdist', 'float', [-1], False),\n    'lv_uv_flip_normal': SohoParm('lv_uv_flip_normal', 'bool', [False], False),\n}\n\nuvObjectParms = {\n    'lv_uvobjectenable'   :SohoParm('lv_uvobjectenable%d', 'int', [1], False, key='enable'),\n    'lv_uvobject'         :SohoParm('lv_uvobject%d', 'string', [''], False, key='name'),\n    'lv_uvcageobject'     :SohoParm('lv_uvcageobject%d', 'string', [''], False, key='cagelist'),\n    'lv_uvhires'        :SohoParm('lv_uvhires%d', 'string', [''], False, key='hireslist'),\n    'lv_uvoutputpicture'  :SohoParm('lv_uvoutputpicture%d', 'string', [''], False, key='picture'),\n    'lv_uvoutputobject' :SohoParm('lv_uvoutputobject%d', 'string', [''], False, key='outobj')\n}\n\ntilingParms = {\n    'lv_tile_render'    :SohoParm('lv_tile_render',  'bool', [0], False),\n    'lv_tile_count_x'   :SohoParm('lv_tile_count_x', 'int',  [4], False),\n    'lv_tile_count_y'   :SohoParm('lv_tile_count_y', 'int',  [4], False),\n    'lv_tile_index'     :SohoParm('lv_tile_index',   'int',  [0], False),\n    'lv_tile_filename_suffix'\n            :SohoParm('lv_tile_filename_suffix','string', ['_tile%02d_'], False),\n}\n\ncryptoParms = {\n    'lv_cryptolayerenable' :SohoParm('lv_cryptolayerenable%d', 'int',    [1],  False, key='enable'),\n    'lv_cryptolayerprop'   :SohoParm('lv_cryptolayerprop%d',   'string', [''], False, key='layerprop'),\n    'lv_cryptolayername'   :SohoParm('lv_cryptolayername%d',   'string', [''], False, key='layername'),\n    'lv_cryptolayerrank'   :SohoParm('lv_cryptolayerrank%d',   'int',    [6],  False, key='layerrank'),\n    'lv_cryptolayeroutputenable'   :SohoParm('lv_cryptolayeroutputenable%d', 'int',  [0],  False, key='layeroutputenable'),\n    'lv_cryptolayeroutput' :SohoParm('lv_cryptolayeroutput%d', 'string', [''], False, key='layeroutput'),\n    'lv_cryptolayersidecarenable'   :SohoParm('lv_cryptolayersidecarenable%d', 'int',    [0],  False, key='layersidecareneable'),\n    'lv_cryptolayersidecar'     :SohoParm('lv_cryptolayersidecar%d',       'string', [''], False, key='layersidecar')\n}\n\ndef envmapDisplay(cam, now, cubemap):\n    if LSDhooks.call('pre_envmapDisplay', cam, now, cubemap):\n        return\n    filename = cubemap.Filename\n    cmd_image(cubemap.Filename, '', '')\n    LSDsettings.outputImageFormatOptions(None, cam, now)\n    defplane(\"C\", 'Cf+Af', 'vector4', -1, None, cam, now)\n    soho.indent(-1, \"\", None)\n    LSDhooks.call('post_envmapDisplay', cam, now, cubemap)\n\ndef lightDisplay(wrangler, light, now):\n    if LSDhooks.call('pre_lightDisplay', wrangler, light, now):\n        # The hook has output the light display for us\n        return True\n    filename = light.wrangleString(wrangler, 'lv_picture', now, [''])[0]\n    if not filename:\n        return False\n\n    deep = None\n    if not light.wrangleInt(wrangler, 'render_pointcloud', now, [0])[0]:\n        deep = light.wrangleString(wrangler, 'lv_deepresolver', now, [''])[0]\n        if deep == 'null':\n            deep = None\n    if deep:\n        plist = LSDsettings.evaluateDeepResolver(deep, wrangler, light, now)\n        if not plist:\n            return False\n\n    cmd_image(filename, '', '')\n    LSDsettings.outputImageFormatOptions(wrangler, light, now)\n    cmd_start('plane')\n    if deep:\n        cmd_property('plane', 'planefile', ['null:'])\n        cmd_property('plane', 'variable', ['Of'])\n        cmd_property('plane', 'vextype', ['vector'])\n    else:\n        soho.makeFilePathDirsIfEnabled(filename)\n        cmd_property('plane', 'planefile', [filename])\n        cmd_property('plane', 'variable', ['Z-Far'])\n        cmd_property('plane', 'vextype', ['float'])\n        cmd_property('plane', 'quantize', ['float'])\n    cmd_property('plane', 'pfilter', ['ubox'])      # Unit box pixel filter\n    cmd_end()\n    if deep:\n        # Make intermdiate directories\n        for parm in plist:\n            if parm.Houdini == 'lv_dsmfilename':\n                soho.makeFilePathDirsIfEnabled(parm.Value[0])\n        cmd_propertyAndParms('image', 'deepresolver', deep, plist)\n    soho.indent(-1, \"\", None)\n    LSDhooks.call('post_lightDisplay', wrangler, light, now)\n    return True\n\ndef lightExportPlanes(wrangler, cam, now, lexport,\n        lscope, lselect, channel, comp,\n        variable, vextype, plane, filename, excludedcm,\n        unique_names):\n    # Define a plane for each light in the selection\n    def _getName(channel, unique_names):\n        # Ensue that each light gets a unique channel name.  This allows lights\n        # defined within subnets that have the same name to have unique channel\n        # names.\n        if unique_names.has_key(channel):\n            num = 0\n            while num < 1000000:\n                tmp = '_'.join([channel, '%X' % num])\n                if not unique_names.has_key(tmp):\n                    channel = tmp\n                    break\n                num += 1\n        unique_names[channel] = True\n        return channel\n\n    if lexport == 2:\n        # Merge all lights\n        lightlist = []\n        for l in cam.objectList('objlist:light', now, lscope, lselect):\n            lightlist.append(l.getName())\n        lightexport = ' '.join(lightlist)\n        # If there are no lights, we can't pass in an empty string since\n        # then mantra will think that light exports are disabled.  So pass\n        # down an string that presumably doesn't match any light name.\n        if not lightexport:\n            lightexport = '__nolights__'\n        defplane(_getName(channel, unique_names), variable, vextype, plane,\n                wrangler, cam, now, filename, comp, lightexport,\n                excludedcm=excludedcm)\n    elif lexport == 1:\n        for l in cam.objectList('objlist:light', now, lscope, lselect):\n            lchannel = []\n            suffix = l.getDefaultedString('lv_export_suffix', now, [''])[0]\n            if not l.evalString('lv_export_prefix', now, lchannel):\n                lchannel = [l.getName()[1:].rsplit('/', 1)[-1]]\n            if lchannel[0]:\n                lchannel = '%s_%s%s' % (lchannel[0], channel, suffix)\n            elif suffix:\n                lchannel = '%s%s' % (channel, suffix)\n            else:\n                soho.error(\"Empty suffix for per-light exports\")\n            lchannel = _getName(lchannel, unique_names)\n            defplane(lchannel, variable, vextype, plane,\n                    wrangler, cam, now, filename, comp, l.getName(),\n                    excludedcm=excludedcm)\n    else:\n        defplane(channel, variable, vextype, plane, wrangler, cam, now,\n                filename, comp,\n                excludedcm=excludedcm)\n\ndef quickImagePlanes(wrangler, cam, now, components):\n    def _quickPlane(wrangler, cam, now, variable, channel,\n                    vextype, quantize, opts):\n        if LSDhooks.call('pre_defplane', variable, vextype, -1,\n                    wrangler, cam, now, '', 0):\n            return\n        cmd_start('plane')\n        cmd_property('plane', 'variable', [variable])\n        cmd_property('plane', 'channel', [channel])\n        cmd_property('plane', 'vextype', [vextype])\n        if quantize != 'float16':\n            cmd_property('plane', 'quantize', [quantize])\n        for opt, optvalue in opts.iteritems():\n            cmd_property('plane', opt, optvalue)\n\n        if LSDhooks.call('post_defplane', variable, vextype, -1,\n                    wrangler, cam, now, '', 0):\n            return\n        cmd_end()\n\n    quickplanedict = quickplanes.getPlaneDict()\n    toggleplanedict = quickplanes.getTogglePlaneDict()\n\n    plist = {}\n    for p in toggleplanedict.keys():\n        plist[p] = SohoParm(p, 'int', [0])\n    plist = cam.wrangle(wrangler, plist, now)\n\n    for parmname, varnames in toggleplanedict.iteritems():\n        is_set = plist.get(parmname, None)\n        if not is_set or is_set.Value[0] == 0:\n            continue\n        for variable in varnames:\n            plane = quickplanedict[variable]\n            channel = cam.wrangleString(wrangler,\n                                parmname+'_channel', now, [''])[0]\n            if not channel:\n                channel = variable if len(plane.channel) == 0 else plane.channel\n            if plane.percomp:\n                for comp in components.split():\n                    compvariable = re.sub('_comp$', \"_\" + comp, variable)\n                    compchannel = re.sub('_comp$', \"_\" + comp, channel)\n                    _quickPlane(cam, wrangler, now, compvariable, compchannel,\n                                plane.vextype, plane.quantize, plane.opts)\n            else:\n                _quickPlane(cam, wrangler, now, variable, channel,\n                            plane.vextype, plane.quantize, plane.opts)\n\ndef cameraDisplay(wrangler, cam, now):\n    if LSDhooks.call('pre_cameraDisplay', wrangler, cam, now):\n        return True\n    filename = cam.wrangleString(wrangler, 'lv_picture', now, ['ip'])[0]\n    plist       = cam.wrangle(wrangler, displayParms, now)\n    device      = plist['lv_device'].Value[0]\n    foptions    = plist['lv_foptions'].Value[0]\n    numaux      = plist['lv_numaux'].Value[0]\n    components  = plist['lv_exportcomponents'].Value[0]\n\n    flipbook = cam.wrangleInt(wrangler, 'flipbook_output', now, [0])[0]\n    if flipbook:\n        filename = 'ip'\n        device = ''              # inherit from choice\n\n    if not filename:\n        return False\n\n    is_preview = LSDmisc.isPreviewMode()\n\n    plist           = cam.wrangle(wrangler, stereoParms, now)\n    is_left_cam     = plist['lv_s3dleftcamera'].Value[0]\n    is_right_cam    = plist['lv_s3drightcamera'].Value[0]\n    file_suffix     = plist['lv_filenamesuffix'].Value[0]\n    no_suffix       = cam.getData('NoFileSuffix')\n\n    if no_suffix is not None and no_suffix:\n        file_suffix = None\n    if is_left_cam:\n        cmd_declare('plane', 'string', 'IPlay.s3dleftplane', ['C'])\n    else:\n        cmd_declare('plane', 'string', 'IPlay.s3dleftplane', [''])\n\n    if is_right_cam:\n        cmd_declare('plane', 'string', 'IPlay.s3drightplane', ['C'])\n    else:\n        cmd_declare('plane', 'string', 'IPlay.s3drightplane', [''])\n    filename = insertFileSuffix(filename, file_suffix)\n\n    cmd_image(filename, device, foptions)\n    LSDsettings.outputImageFormatOptions(wrangler, cam, now)\n\n    # uv render may have Cf+Af disabled for performance reasons\n    skipCf = cam.wrangleInt(wrangler, 'lv_bake_skipcf', now, [0])[0]\n    if not skipCf:\n        defplane(\"C\", 'Cf+Af', 'vector4', -1, wrangler, cam, now)\n    else:\n        defplane(\"C\", 'Of', 'vector', -1, wrangler, cam, now)\n\n    lv_relightingbuffer = [0]\n    soho.evalInt(\"lv_relightingbuffer\", lv_relightingbuffer)\n\n    lv_stylesheets = [0]\n    soho.evalInt(\"lv_stylesheets\", lv_stylesheets)\n\n    if is_preview and lv_relightingbuffer[0]:\n        defplane(\"C_Relighting\", 'Cf+Af', 'vector4', -1,\n                 wrangler, cam, now, showrelightingbuffer=True)\n\n    # Initialize property for Op_Id generation\n    LSDsettings._Settings.GenerateOpId = cam.getDefaultedInt('lv_generate_opid', now, [0])[0]\n\n    quickImagePlanes(wrangler, cam, now, components)\n\n    primary_filename = filename\n    unique_names_per_filename = {}\n    unique_names_per_filename[primary_filename] = {}\n\n    for plane in range(1, numaux+1):\n        for s in planeDisplayParms:\n            planeDisplayParms[s].setIndex(plane)\n        plist = cam.wrangle(wrangler, planeDisplayParms, now)\n        disable  = plist['disable'].Value[0]\n        excludedcm = plist['excludedcm'].Value[0]\n        usefile  = plist['usefile'].Value[0]\n        filename = plist['filename'].Value[0]\n        channel  = plist['channel'].Value[0]\n        variable = plist['variable'].Value[0]\n        vextype  = plist['vextype'].Value[0]\n        lexport  = plist['lightexport'].Value[0]\n        cexport  = plist['componentexport'].Value[0]\n        lscope   = plist['lightscope'].Value[0]\n        lselect  = plist['lightselect'].Value[0]\n        h9channel = plist['h9channel'].Value[0]\n\n        # Don't add the IPR planes again if they're explicitly listed.\n        if is_preview and (variable == 'Op_Id' or variable == 'Prim_Id'):\n            continue\n\n        if lv_stylesheets[0] and variable == 'Sty_Id':\n            continue\n\n        if h9channel and not channel:\n            # Backward compatibility with H9 parameters.\n            channel = channel\n\n        filename = insertFileSuffix(filename, file_suffix)\n        unique_names = unique_names_per_filename[primary_filename]\n\n        if not disable and variable and vextype:\n            if not channel:\n                channel = variable\n\n            if not usefile:\n                filename = None\n            elif not primary_filename == 'ip':\n                if not unique_names_per_filename.has_key(filename):\n                    unique_names_per_filename[filename] = {}\n                unique_names = unique_names_per_filename[filename]\n\n            if variable == 'Op_Id':\n                LSDsettings._Settings.GenerateOpId = True\n\n            if cexport == 1:\n                for comp in components.split():\n                    cchannel = channel + \"_\" + comp\n                    lightExportPlanes(wrangler, cam, now,\n                                lexport, lscope, lselect, cchannel, comp,\n                                variable, vextype, plane, filename, excludedcm,\n                                unique_names)\n            else:\n                lightExportPlanes(wrangler, cam, now,\n                                lexport, lscope, lselect, channel, None,\n                                variable, vextype, plane, filename, excludedcm,\n                                unique_names)\n\n            if is_preview and lv_relightingbuffer[0] and variable == 'Pixel_Samples':\n                defplane('Pixel_Samples_Relighting', variable, vextype,\n                         -1, wrangler, cam, now,\n                         showrelightingbuffer=True,\n                         excludedcm=excludedcm)\n\n    # Add IPR planes after real planes\n    if is_preview:\n        LSDsettings._Settings.GenerateOpId = True\n        iprplane('Op_Id')\n        iprplane('Prim_Id')\n\n    if lv_stylesheets[0]:\n        iprplane('Sty_Id')\n\n    soho.indent(-1, \"\", None)\n\n    deep = cam.getDefaultedString('lv_deepresolver', now, [''])[0]\n    if deep and not is_preview:\n        parms = LSDsettings.evaluateDeepResolver(deep, wrangler, cam, now)\n        if deep and parms:\n            # adjust DCM file name for stereo cameras\n            for parm in parms:\n                if parm.Houdini in ('lv_dcmfilename', 'lv_dsmfilename'):\n                    dcmfilename = insertFileSuffix(parm.Value[0], file_suffix)\n                    soho.makeFilePathDirsIfEnabled(dcmfilename)\n                    parm.Value = [dcmfilename]\n            cmd_propertyAndParms('image', 'deepresolver', deep, parms)\n\n    numcrypto = cam.getDefaultedInt('lv_cryptolayers', now, [0])[0]\n\n    ropnode = hou.node(soho.getOutputDriver().getName())\n    cryptoargs = []\n    for o in range(1, numcrypto+1):\n        cryptodict = {}\n        for p in cryptoParms:\n            cryptoParms[p].setIndex(o)\n        plist = cam.wrangle(wrangler, cryptoParms, now)\n        if plist['enable'].Value[0] == 0:\n            continue\n\n        cryptodict['prop'] = plist['layerprop'].Value[0]\n        cryptodict['rank'] = plist['layerrank'].Value[0]\n        cryptodict['name'] = plist['layername'].Value[0]\n\n        # check if lv_cryptolayeroutputenable# parameter exists (older\n        # instance of mantra ROP may not have this parameter, in which case we\n        # must always evaluate output path):\n        parmname = cryptoParms['lv_cryptolayeroutputenable'].Houdini\n        cryptooutputpath = ''\n        if ropnode.parm(parmname) == None or plist['layeroutputenable'].Value[0] != 0:\n            cryptooutputpath = plist['layeroutput'].Value[0]\n            cryptooutputpath = insertFileSuffix(cryptooutputpath, file_suffix)\n            cryptodict['output'] = cryptooutputpath\n            soho.makeFilePathDirsIfEnabled(cryptooutputpath)\n\n        tmplayerpath = primary_filename\n        if cryptooutputpath != '':\n            tmplayerpath = cryptooutputpath\n\n        if plist['layersidecareneable'].Value[0] != 0:\n            sidecar = insertFileSuffix(plist['layersidecar'].Value[0], file_suffix)\n            sidecaroutputpath = os.path.join(os.path.dirname(tmplayerpath), sidecar)\n            soho.makeFilePathDirsIfEnabled(sidecaroutputpath)\n            cryptodict['sidecar'] = sidecar\n\n        cryptoargs.append(json.dumps(cryptodict))\n\n    if len(cryptoargs) != 0:\n        cmd_property('image', 'cryptoresolver', cryptoargs)\n\n    LSDhooks.call('post_cameraDisplay', wrangler, cam, now)\n    return True\n\ncamDofParms = {\n    'projection':SohoParm('projection', 'string', ['perspective'], False),\n    'focal'     :SohoParm('focal',      'real', [50], False),\n    'fstop'     :SohoParm('fstop',      'real', [5.6], False),\n    'focus'     :SohoParm('focus',      'real', [10], False),\n    'focalunits':SohoParm('focalunits', 'string', ['mm'], False)\n}\n\ndef getZoom(light, proj, focal, aperture):\n    if proj == 'perspective':\n        if aperture == 0:\n            soho.error(\"Zero aperture for '%s'\" % light.getName())\n        return focal / aperture\n    return 1\n\ndef getWindow(cam, wrangler, now):\n    window = cam.getCameraScreenWindow(wrangler, now)\n    windowmask = cam.objectList('objlist:windowmask', now)\n    if windowmask is not None:\n        window_bounds = SOHOcommon.getObjectScreenBoundsFull(\n            now, wrangler, cam, windowmask,\n            LSDgeo.getObjectBounds, LSDmisc.xform_mbsamples)\n\n        if window_bounds is not None:\n            window[0] = max(window[0], window_bounds[0])\n            window[1] = min(window[1], window_bounds[1])\n            window[2] = max(window[2], window_bounds[2])\n            window[3] = min(window[3], window_bounds[3])\n    return window\n\ndef outputCameraSegment(cam, wrangler, now, cubemap, dof, proj):\n    if LSDhooks.call('pre_outputCameraSegment', cam, wrangler, now,\n                    cubemap, dof, proj):\n        return\n    orthowidth = cam.wrangleFloat(wrangler, 'orthowidth', now, [2])[0]\n    cmd_property('camera', 'orthowidth', [orthowidth])\n\n    if cubemap:\n        focal = 1.0\n        aperture = 2.0\n    else:\n        focal  = cam.wrangleFloat(wrangler, 'focal', now, [50])[0]\n        aperture = cam.wrangleFloat(wrangler, 'aperture', now, [41.4214])[0]\n\n    zoom = getZoom(cam, proj, focal, aperture)\n    cmd_property('camera', 'zoom', [zoom])\n\n    if dof:\n        plist = cam.wrangle(wrangler, camDofParms, now)\n        focal = soho.houdiniUnitLength(plist['focal'].Value[0],\n                                       plist['focalunits'].Value[0])\n        cmd_property('camera', 'focus', plist['focus'].Value)\n        cmd_property('camera', 'focal', [focal])\n        cmd_property('camera', 'fstop', plist['fstop'].Value)\n\n    window = getWindow(cam, wrangler, now)\n    cmd_property('image', 'window', window)\n    LSDhooks.call('post_outputCameraSegment', cam, wrangler, now,\n                    cubemap, dof, proj)\n\ndef _patternMatching(all_obj, obj_regex, cage_regex, hires_regex, \n                    picture_regex, outobj_regex,\n                    obj_list, cage_list, hires_list, picture_list, outobj_list):\n    old = re.split('/', obj_regex)\n\n    for obj in all_obj:\n\n        obj_path = obj.getName()\n\n        if re.match(fnmatch.translate(obj_regex), obj_path):\n            obj_list.append(obj_path)\n            new = re.split('/', obj_path)\n\n            sub_list = []\n            j = 1 \n            for i in range(1, len(old)):\n                string_list = []\n                while (new[j] != old[i]):\n                    string_list.append(new[j])\n                    j = j + 1\n\n                    if (j == len(new)):\n                        break\n\n                    if (i == len(old) -1): \n                        continue\n\n                    if (re.match(fnmatch.translate(old[i+1]), new[j])): \n                        break\n\n                if (len(string_list) > 0):\n                    sub_list.append(\"/\".join(string_list))\n                else:\n                    j = j + 1\n\n            cage_path = cage_regex\n            hires_path = hires_regex\n            picture_path = picture_regex\n            outobj_path = outobj_regex\n            for sub in sub_list:\n                cage_path = re.sub('\\*', sub, cage_path, 1)\n                hires_path = re.sub('\\*', sub, hires_path, 1)\n                picture_path = re.sub('\\*', sub, picture_path, 1)\n                outobj_path = re.sub('\\*', sub, outobj_path, 1)\n\n            cage_list.append(cage_path)\n            hires_list.append(hires_path)\n            picture_list.append(picture_path)\n            outobj_list.append(outobj_path)\n\ndef outputCamera(cam, viewcam, now, fromlight, forphoton, cubemap):\n    if LSDhooks.call('pre_outputCamera', cam, viewcam, now,\n                    fromlight, forphoton, cubemap):\n        return True\n    times = LSDmisc.xform_mbsamples(cam, now)\n    if fromlight:\n        wrangler = LSDsettings.getWrangler(cam, now, 'light_wrangler')\n    else:\n        wrangler = LSDsettings.getWrangler(cam, now, 'camera_wrangler')\n    if forphoton:\n        cmd_photon()\n    else:\n        if fromlight:\n            if not lightDisplay(wrangler, cam, now):\n                return False\n        elif cubemap:\n            envmapDisplay(cam, now, cubemap)\n        else:\n            if not cameraDisplay(wrangler, cam, now):\n                return False\n\n    LSDsettings.outputGlobal(wrangler, cam, now)\n\n    if forphoton:\n        cmd_property('renderer', 'progressaction', ['Generating photon map'])\n        # Set the default for the photon target\n        target = cam.wrangleString(wrangler, 'lv_photontarget', now, ['*'])\n        cmd_property('light', 'photontarget', target)\n    elif fromlight and viewcam != None:\n        cmd_property('renderer', 'progressaction', ['Generating point cloud'])\n    elif fromlight:\n        cmd_property('renderer', 'progressaction', ['Generating depth map'])\n    elif cubemap:\n        cmd_property('renderer', 'progressaction', ['Generating reflection map'])\n\n    # Photon maps need to use the light (\"cam\" above) to generate global\n    # settings, but should use the actual scene camera to indicate the\n    # projection for dicing.  Change cameras here.\n    if viewcam != None:\n        cam = viewcam\n        wrangler = LSDsettings.getWrangler(cam, now, 'camera_wrangler')\n\n    res = cam.wrangleInt(wrangler, 'res', now, [256, 256])\n    par = cam.wrangleFloat(wrangler, 'aspect', now, [1.0])\n    if cubemap:\n        par = [1.0]\n    if not fromlight and not cubemap:\n        if cam.wrangleInt(wrangler, 'override_camerares', now, [0])[0]:\n            orgres = res\n            orgpar = par\n            frac = cam.wrangleString(wrangler, 'res_fraction', now, ['specific'])[0]\n            try:\n                ffrac = float(frac)\n                if ffrac > 0.0001:\n                    res = [max(int(ffrac*orgres[0]), 2),\n                           max(int(ffrac*orgres[1]), 2)]\n                else:\n                    frac = 'specific'\n            except:\n                frac = 'specific'\n            if frac == 'specific':\n                res = cam.wrangleInt(wrangler, 'res_override', now, orgres)\n                par = cam.wrangleFloat(wrangler, 'aspect_override', now, orgpar)\n\n    uvrender = False\n    if not fromlight and not forphoton:\n        uvlist = cam.wrangle(wrangler, uvRenderParms, now)\n        uvrender = uvlist['lv_isuvrendering'].Value[0]\n\n    if uvrender:\n        uvnum = uvlist['lv_uvobjects'].Value[0]\n        mkpath = uvlist['lv_uvmkpath'].Value[0]\n        res = uvlist['lv_uvunwrapres'].Value\n        hidecage = uvlist['lv_uvhidecage'].Value[0]\n\n        # Write object paths and image output paths to the LSD as JSON.\n        obj_list = []\n        cage_list = []\n        hires_list = []\n        picture_list = []\n        outobj_list = []\n\n        for o in range(1, uvnum+1):\n            for p in uvObjectParms:\n                uvObjectParms[p].setIndex(o)\n\n            plist = cam.wrangle(wrangler, uvObjectParms, now)\n\n            enable = plist['enable'].Value[0]\n            if not enable:\n                continue\n\n            # object pattern matching\n            obj_regex = plist['name'].Value[0]\n            cage_regex = plist['cagelist'].Value[0]\n            hires_regex = plist['hireslist'].Value[0]\n            picture_regex = plist['picture'].Value[0]\n            outobj_regex = plist['outobj'].Value[0]\n\n            if (not obj_regex) or (not picture_regex):\n                soho.error(\"Empty input for object/output path!\")\n\n            # warn if output picture is using a limited format.\n            # we want to bake to multi-channel formats, if possible.\n            if uvlist['lv_uvtype'].Value == 'udim':\n                picture_sp = picture_regex.split(\".\")\n                if not picture_sp[-1] in ['rat', 'pic', 'exr']:\n                    picture_regex = '.'.join(picture_sp[:-1])+'.rat'\n                    soho.warning(\"'Output Picture %d' using 8-bit image format. Switched to .RAT format \" \\\n                        \"to support all baking features. To output to 8-bit image formats select one from \" \\\n                        \"the 'Extract Image Format' menu.\"\n                            % (o))\n\n            all_obj = soho.objectList('objlist:instance')\n            old_size = len(obj_list)\n\n            # if object name contains special character, then wildcard matching\n            # is automatically enabled\n            if not re.match(\"^[a-zA-Z0-9_/]*$\", obj_regex):\n                _patternMatching(all_obj, obj_regex, cage_regex, hires_regex, picture_regex, outobj_regex,\n                                obj_list, cage_list, hires_list, picture_list, outobj_list)\n\n            else:\n                for obj in all_obj:\n                    if (obj_regex == obj.getName()):\n                        obj_list.append(obj_regex)\n                        cage_list.append(cage_regex)\n                        hires_list.append(hires_regex)\n                        picture_list.append(picture_regex)\n                        outobj_list.append(outobj_regex)\n                        break\n\n            if len(obj_list) == old_size:\n                soho.error(\"No match for object %d: '%s'\" % (o, obj_regex))\n\n        flipbook = cam.wrangleInt(wrangler, 'flipbook_output', now, [0])[0]\n        if flipbook:\n            picture_list = [\"ip\"] * len(picture_list)\n\n        cmd_property('renderer', 'uvobjectlist',\n                    [json.dumps({ 'objlist': obj_list })])\n        cmd_property('renderer', 'uvcagelist',\n                    [json.dumps({ 'cagelist': cage_list })])\n        cmd_property('renderer', 'uvhireslist',\n                    [json.dumps({ 'hireslist': hires_list })])\n        cmd_property('renderer', 'uvpicturelist',\n                    [json.dumps({ 'imglist': picture_list })])\n        cmd_property('renderer', 'uvoutobjectlist',\n                    [json.dumps({ 'outobjlist': outobj_list })])\n        cmd_property('renderer', 'uvmkpath', [mkpath])\n\n        if hidecage:\n            # Hide all the low res cages that have high res versions\n            for i in range(len(obj_list)):\n                if hires_list[i]:\n                    LSDsettings.hideUVObject(obj_list[i])\n                # cage mesh (for sample dir) should not be renderable\n                LSDsettings.hideUVObject(cage_list[i])\n\n    cmd_property('image', 'resolution', res)\n    cmd_property('image', 'pixelaspect', par)\n\n    near   = cam.wrangleFloat(wrangler, 'near', now, [0.001])[0]\n    far    = cam.wrangleFloat(wrangler, 'far', now, [1000])[0]\n    if uvrender:\n        near = 1e-6\n        far = 1e6\n    cmd_property('camera', 'clip', [near, far])\n\n    vrrender = False\n    vrmode = cam.wrangleInt(wrangler, 'vrlayout', now, [-1])[0]\n    if vrmode != -1:\n        vrrender = True\n\n    if cubemap:\n        proj = 'perspective'\n    elif uvrender:\n        proj = 'lens'\n    elif vrrender:\n        proj = 'lens'\n    else:\n        proj   = cam.wrangleString(wrangler, 'projection', now,\n                                    ['perspective'])[0]\n        if viewcam and proj == 'lens':\n            # We switched cameras *after* outputting globals, which output\n            # the lens shader on the light source.  We need to make sure to\n            # output the proper lens shader here\n            LSDsettings.outputLensShader(cam, wrangler, now)\n\n    cmd_property('camera', 'projection', [proj])\n    if uvrender:\n        unwrap_method = uvlist['lv_uv_unwrap_method'].Value[0]\n        cmd_bias = uvlist['lv_uv_cmd_bias'].Value[0]\n        cmd_maxdist = uvlist['lv_uv_cmd_maxdist'].Value[0]\n        flipnormal = uvlist['lv_uv_flip_normal'].Value[0]\n        cmd_property('renderer', 'lensshader',\n                     ['opdef:/Shop/v_uvlens unwrap_method %d cmd_bias %g cmd_maxdist %g flipnormal \"%d\"' \\\n                   % (unwrap_method, cmd_bias, cmd_maxdist, flipnormal)], False)\n\n    if vrrender:\n        vrlayout = cam.wrangleInt(wrangler, 'vrlayout', now, [0])[0]\n        vrprojection = cam.wrangleInt(wrangler, 'vrprojection', now, [0])[0]\n        vrswapleftright = cam.wrangleInt(wrangler, 'vrswapleftright', now, [0])[0]\n        vrpreserveaspectratio = cam.wrangleInt(wrangler, 'vrpreserveaspectratio', now, [0])[0]\n        vrmergemode = cam.wrangleInt(wrangler, 'vrmergemode', now, [0])[0]\n        vrmergeangle = cam.wrangleFloat(wrangler, 'vrmergeangle', now, [0])[0]\n        vrhorizontalfov = cam.wrangleFloat(wrangler, 'vrhorizontalfov', now, [0])[0]\n        vrverticalfov = cam.wrangleFloat(wrangler, 'vrverticalfov', now, [0])[0]\n        vrperspectivefov = cam.wrangleFloat(wrangler, 'vrperspectivefov', now, [0])[0]\n        vrperspectiveclipnear = cam.wrangleFloat(wrangler, 'vrperspectiveclipnear', now, [0])[0]\n        vrperspectiveclipfar = cam.wrangleFloat(wrangler, 'vrperspectiveclipfar', now, [0])[0]\n        vrperspectivedistort = cam.wrangleFloat(wrangler, 'vrperspectivedistort', now, [0])[0]\n        vrperspectivedistortcubic = cam.wrangleFloat(wrangler, 'vrperspectivedistortcubic', now, [0])[0]\n        vrusestereoeye = cam.wrangleInt(wrangler, 'vrusestereoeye', now, [0])[0]\n        vreyeseparation = cam.wrangleFloat(wrangler, 'vreyeseparation', now, [0])[0]\n        vreyetoneckdistance = cam.wrangleFloat(wrangler, 'vreyetoneckdistance', now, [0])[0]\n        cmd_property('renderer', 'lensshader',\n                     ['opdef:/Shop/v_vrlens layout %d projection %d swapLeftRight %d preserveAspectRatio %d \\\n                     mergeMode %g mergeAngle %g \\\n                     horizontalFOV %g verticalFOV %g \\\n                     perspectiveFOV %g perspectiveClipNear %g perspectiveClipFar %g perspectiveDistort %g perspectiveDistortCubic %g \\\n                     useStereoEye %d eyeSeparation %g eyeToNeckDistance %g' \\\n                   % (vrlayout, vrprojection, vrswapleftright, vrpreserveaspectratio,\n                   vrmergemode, vrmergeangle,\n                   vrhorizontalfov, vrverticalfov,\n                   vrperspectivefov, vrperspectiveclipnear, vrperspectiveclipfar, vrperspectivedistort, vrperspectivedistortcubic,\n                   vrusestereoeye, vreyeseparation, vreyetoneckdistance)], False)\n\n    dof = cam.wrangleInt(wrangler, 'lv_dof', now, [0])[0]\n\n    crop = cam.getCameraCropWindow(wrangler, now)\n\n    window = getWindow(cam, wrangler, now)\n    cropmask = cam.objectList('objlist:cropmask', now)\n    if cropmask is not None:\n        crop_bounds = SOHOcommon.getObjectScreenBoundsFull(\n            now, wrangler, cam, cropmask,\n            LSDgeo.getObjectBounds, LSDmisc.xform_mbsamples, window=window)\n\n        if crop_bounds is not None:\n            crop[0] = max(crop[0], crop_bounds[0])\n            crop[1] = min(crop[1], crop_bounds[1])\n            crop[2] = max(crop[2], crop_bounds[2])\n            crop[3] = min(crop[3], crop_bounds[3])\n\n    overscan = cam.wrangleInt(wrangler, 'lv_overscan', now, [0, 0])\n    if len(overscan) == 2 and (overscan[0] > 0 or overscan[1] > 0):\n        crop[0] -= float(max(0, overscan[0])) / res[0]\n        crop[1] += float(max(0, overscan[0])) / res[0]\n        crop[2] -= float(max(0, overscan[1])) / res[1]\n        crop[3] += float(max(0, overscan[1])) / res[1]\n\n    if crop != [0,1,0,1]:\n        cmd_property('image', 'crop', crop)\n\n    # Tiled renders\n    is_preview      = LSDmisc.isPreviewMode()\n    plist           = cam.wrangle(wrangler, tilingParms, now)\n    is_tiled        = plist['lv_tile_render'].Value[0]\n    if is_tiled and not (is_preview or fromlight or forphoton):\n        tile_count_x = plist['lv_tile_count_x'].Value[0]\n        tile_count_y = plist['lv_tile_count_y'].Value[0]\n        tile_index   = plist['lv_tile_index'].Value[0]\n        tile_filename_suffix = plist['lv_tile_filename_suffix'].Value[0]\n        cmd_property('image', 'tiledrenderindex', [tile_index])\n        cmd_property('image', 'tiledrendercount', [tile_count_x, tile_count_y])\n        cmd_property('image', 'tiledrendersuffix', [tile_filename_suffix])\n\n    # MB Info\n    if LSDmisc.CameraShutter:\n        cmd_property('object', 'velocityscale', [LSDmisc.CameraShutter])\n    if LSDmisc.CameraBlur:\n        shutter_open = -LSDmisc.CameraDelta\n        shutter_close = shutter_open + LSDmisc.CameraShutter\n        cmd_declare('global', 'vector2', 'camera:shutter',\n            [shutter_open * LSDmisc.FPS, shutter_close * LSDmisc.FPS] )\n        LSDmisc.ouputMotionBlurInfo(cam,now,required=True)\n\n    # Stereoscopy info\n    plist           = cam.wrangle(wrangler, stereoParms, now)\n    is_left_cam     = plist['lv_s3dleftcamera'].Value[0]\n    is_right_cam    = plist['lv_s3drightcamera'].Value[0]\n    if is_left_cam or is_right_cam:\n        eye_list = ['', 'left', 'right', 'both']\n        cmd_declare('global', 'string', 'camera:stereoeye',\n            [eye_list[ is_left_cam + 2*is_right_cam]])\n\n    objectTransform('space:world', cam, times, invert=True,\n                    cubemap=cubemap)\n\n    for time in times:\n        cmd_start('segment')\n        outputCameraSegment(cam, wrangler, time, cubemap, dof, proj)\n        cmd_end()\n\n    LSDhooks.call('post_outputCamera', cam, viewcam, now,\n                    fromlight, forphoton, cubemap)\n    return True\n\ndef isGeoLight(light, wrangler, now):\n    ltype = light.wrangleString(wrangler, 'lv_areashape', now, [''])[0]\n    return ltype == 'geo'\n\ndef outputLight(light, now):\n    # Find the wrangler for evaluating soho parameters\n    wrangler = LSDsettings.getWrangler(light, now, 'light_wrangler')\n    if LSDhooks.call('pre_outputLight', wrangler, light, now):\n        return\n\n    times = LSDmisc.xform_mbsamples(light, now)\n\n    cmd_start('light')\n\n    objectTransform('space:world', light, times)\n\n    if isGeoLight(light, wrangler, now):\n        LSDgeo.instanceGeometry(light, now, times)\n\n    LSDsettings.outputObject(light, now, wrangler=wrangler)\n    LSDsettings.outputLight(wrangler, light, now)\n\n    # Now, we need to output projection information so that NDC\n    # coordinates can be computed (if required)\n    proj = light.wrangleString(wrangler, 'projection', now, ['perspective'])[0]\n    focal = light.wrangleFloat(wrangler, 'focal', now, [50])[0]\n    aperture = light.wrangleFloat(wrangler, 'aperture', now, [41.4214])[0]\n    orthowidth = light.wrangleFloat(wrangler, 'orthowidth', now, [2])[0]\n    res = light.wrangleInt(wrangler, 'res', now, [512, 512])\n    windowmask = light.objectList('objlist:windowmask', now)\n\n    if res[0] <= 0 or res[1] <= 0:\n        soho.error(\"Zero resolution for light '%s'\" % light.getName())\n    aspect = res[0] / float(res[1]);\n\n    cmd_property('light', 'projection', [proj])\n\n    zoom = getZoom(light, proj, focal, aperture)\n\n    cmd_property('light', 'zoom', [zoom, zoom * aspect])\n\n    if proj == 'ortho' or proj == 'orthographic':\n        cmd_property('light', 'orthowidth', [orthowidth, orthowidth])\n\n    if windowmask is not None:\n        window_bounds = SOHOcommon.getObjectScreenBoundsFull(\n            now, wrangler, light, windowmask,\n            LSDgeo.getObjectBounds, LSDmisc.xform_mbsamples)\n\n        if window_bounds is not None:\n            window = [0.0,1.0,0.0,1.0]\n            window[0] = max(window[0], window_bounds[0])\n            window[1] = min(window[1], window_bounds[1])\n            window[2] = max(window[2], window_bounds[2])\n            window[3] = min(window[3], window_bounds[3])\n            cmd_property('light', 'window', window)\n\n    cmd_end()\n    LSDhooks.call('post_outputLight', wrangler, light, now)\n\ndef outputFog(fog, now):\n    if LSDhooks.call('pre_outputFog', fog, now):\n        return\n    times = LSDmisc.xform_mbsamples(fog, now)\n    cmd_start('fog')\n    objectTransform('space:world', fog, times)\n    LSDsettings.outputFog(None, fog, now)\n    cmd_end()\n    LSDhooks.call('post_outputFog', fog, now)\n\ndef getVars(string):\n    envvars = re.findall('\\${?([a-zA-Z_0-9]+)', string)\n    return (v for v in envvars if v in os.environ)\n\ndef getUsedEnvVars(hobj):\n    envvars = set()\n    children = hobj.allSubChildren()\n    for child in children:\n        for parm in child.parms():\n            tpl = parm.parmTemplate()\n            if tpl.dataType() != hou.parmData.String:\n                continue\n            keyframes = parm.keyframes()\n            if keyframes:\n                for keyframe in keyframes:\n                    expr = keyframe.expression()\n                    envvars.update(getVars(expr))\n\n            else:\n                value = parm.unexpandedString()\n                envvars.update(getVars(value))\n\n    return envvars\n\ndef expandEnvVars(envvars):\n    for envvar in envvars:\n        value = os.environ.get(envvar)\n        # skip undefined or empty variables\n        if value is None or len(value) == 0:\n            continue\n        # skip standard houdini variables like HFS, HH, etc.\n        if value.startswith(os.environ['HFS']):\n            continue\n        cmd_if('\"${}\" == \"\"'.format(envvar))\n        cmd_setenv(envvar, value)\n        cmd_endif()\n\ndef engineinstance(obj, now, times, procedural, unload, requirelod, doorient,\n                   boundsop):\n    now = time.time()\n    def error(msg):\n        cmd_comment(msg)\n        soho.error(msg)\n        return False\n    hobj = hou.node(obj.getName())\n    if not hobj:\n        return error('No HOM object \"%s\" for engine procedural' % obj.getName())\n    if not hobj.displayNode():\n        return error('No display SOP found for object %s - %s'\n                    % (obj.getName(), 'needed for engine procedural'))\n    # Now make an HDA using a unique name for the object type\n    htype = hobj.type()\n    hdadef = htype.definition()\n    use_library_type = True\n    unlock = False\n    if not hdadef:\n        use_library_type = False\n    elif not hobj.matchesCurrentDefinition():\n        use_library_type = False\n    elif hdadef.hasSection('EditableNodes'):\n        # Temporarily allow editing of contents so the HDA gets saved properly\n        use_library_type = False\n        unlock = True\n\n    if use_library_type:\n        # If we have a locked HDA that matches the current definition with no\n        # editable nodes, we can use this HDA directly in the engine procedural.\n        hdaname = htype.name()\n    else:\n        # In this case, the object is either an unlocked asset or an object\n        # that isn't defined by an HDA.  We have to create an HDA for the\n        # object and embed it into the LSD stream.\n        hdaname = 'engine_' + str(uuid.uuid4()).replace('-', '')\n\n        # save and load object to avoid recooking\n        # creating a digital asset directly from hobj would trigger it's\n        # caches to be invalidated, triggering a recook when displaying\n        # the object in houdini after a render\n        tmpdir = hou.getenv('HOUDINI_TEMP_DIR')\n        fp, temphippath = tempfile.mkstemp(dir=tmpdir)\n        temphippath = temphippath.replace(\"\\\\\", \"/\")\n        os.close(fp)\n        hobj.parent().saveChildrenToFile(\n            [hobj], [], temphippath)\n\n        # create container and load contents\n        tempparent = hou.node('/obj').createNode('subnet')\n        for c in tempparent.children():\n            c.destroy()\n        tempparent.loadChildrenFromFile(temphippath, ignore_load_warnings=True)\n        tempobj = tempparent.children()[0]\n        os.remove(temphippath)\n\n        tmpdir = hou.getenv('HOUDINI_TEMP_DIR')\n        fp, hdapath = tempfile.mkstemp(dir=tmpdir)\n        hdapath = temphippath.replace(\"\\\\\", \"/\")\n        os.close(fp)\n        if unlock:\n            tempobj.allowEditingOfContents()\n\n        envvars = getUsedEnvVars(tempobj)\n        expandEnvVars(envvars)\n\n        tempobj.createDigitalAsset(hdaname,\n            hdapath,\n            'Mantra: Engine Generator Node',\n            ignore_external_references=True,\n            change_node_type=False,\n            create_backup=False)\n        tempparent.destroy()\n        for d in hou.hda.definitionsInFile(hdapath):\n            if d.nodeTypeName() == hdaname:\n                d.setParmTemplateGroup(hobj.parmTemplateGroup(),\n                                       create_backup=False)\n                d.save(hdapath, create_backup=False)\n                break\n        else:\n            return error('Error creating embedded engine procedural HDA for %s'\n                            % obj.getName())\n        data = base64.b64encode(open(hdapath, 'rb').read())\n\n        # cleanup\n        hou.hda.uninstallFile(hdapath)\n        os.remove(hdapath)\n\n        # write hda to ifd\n        cmd_textblock(hdaname, data, encoding='b64')\n        cmd_loadotl([hdaname], from_text_block=True)\n        cmd_erase_textblock(hdaname)\n\n    # Get the bounding box from the display SOP\n    #bounds = hou.BoundingBox()\n    #bounds.setTo((-1000,-1000,-1000, 1000, 1000, 1000))\n    cmd_comment('Engine time for HDA: %.4f s.' % (time.time() - now))\n    first = True\n    for t in times:\n        f = hou.timeToFrame(t)\n        if boundsop == '':\n            # Use display node if no bounding SOP is specified.\n            g = hobj.displayNode().geometryAtFrame(f)\n        else:\n            boundsopnode = hobj.node(boundsop)\n            if boundsopnode is None:\n                return error('Bad Bounding Box SOP specified for engine object %s '\n                             'at frame %g' % (obj.getName(), f))\n            g = boundsopnode.geometryAtFrame(f)\n        if not g:\n            return error('Bad SOP geometry for engine object %s at frame %g' %\n                         (obj.getName(), f))\n        b = g.boundingBox()\n        if first:\n            bounds = b\n            first = False\n        else:\n            bounds.enlargeToContain(b)\n    bmin = bounds.minvec()\n    bmax = bounds.maxvec()\n    # Enlarge bounds for good measure\n    d = max(bounds.sizevec()) * 0.01\n    proc_args = [\n        procedural,\n        'objecthda',    '1',\n        'size', '%g %g %g' % (bmax[0]-bmin[0]+d*2,\n                                   bmax[1]-bmin[1]+d*2,\n                                   bmax[2]-bmin[2]+d*2),\n        'unload', '%d' % unload,\n        'requirelod', '%d' % requirelod,\n        'doorient', '%d' % doorient,\n        'opname', hdaname,\n    ]\n    unload_parm = obj\n    cmd_procedural([bmin[0]-d, bmin[1]-d, bmin[2]-d,\n                    bmax[0]+d, bmax[1]+d, bmax[2]+d], [' '.join(proc_args)])\n    cmd_comment('Engine Total Time: %.4f s.' % (time.time() - now))\n\ndef outputInstance(obj, now, check_renderable=False):\n    # Define any materials used by object style sheet.\n    (ss_bundles, ss_mats) = LSDsettings.getBundlesAndMaterialsFromObjectStyleSheet(obj, now)\n    for mat_path in ss_mats:\n        if hou.node(mat_path):\n            LSDsettings.outputMaterial(mat_path, now)\n    for bundle in ss_bundles:\n        LSDsettings.outputBundle(bundle)\n\n    if LSDgeo.isObjectFastPointInstancer(obj,now):\n        outputPointInstance(obj,now)\n        return\n\n    if LSDhooks.call('pre_outputInstance', obj, now):\n        return\n\n    wrangler = LSDsettings.getWrangler(obj, now, 'object_wrangler')\n    # Call the object wranglers 'instanceGeometry', skip inbuilt soho code if\n    # it returns True. Note. It's the responsibility of object wrangler to\n    # emit LSD correctly.\n    if obj.wrangleInt(wrangler,'instanceGeometry', now, [0])[0] :\n        LSDhooks.call('post_outputInstance', obj, now)\n        return\n\n    cmd_start('object')\n    times = LSDmisc.xform_mbsamples(obj, now)\n    objectTransform('space:world', obj, times)\n    # TODO Shader space transform\n    # Get the displacement bound from any materials applied to the\n    # geometry.\n    LSDgeo.instanceGeometry(obj, now, times)\n    proc = obj.wrangleString(wrangler, 'lv_auto_engine_procedural', now, [''])[0]\n    if proc:\n        boundsop = obj.wrangleString(wrangler, 'lv_auto_engine_boundsop', now,[''])[0]\n        unload = obj.wrangleInt(wrangler, 'lv_auto_engine_unload', now, [1])[0]\n        lod = obj.wrangleInt(wrangler, 'lv_auto_engine_requirelod', now, [0])[0]\n        orient = obj.wrangleInt(wrangler, 'lv_auto_engine_doorient', now,[1])[0]\n        engineinstance(obj, now, times, proc,\n                unload=unload,\n                requirelod=lod,\n                doorient=orient,\n                boundsop=boundsop)\n    # Now, output settings, with at least the displacement bound as\n    # defined on the geometry\n    LSDsettings.outputObject(obj, now, check_renderable=check_renderable)\n    cmd_end()\n    LSDhooks.call('post_outputInstance', obj, now)\n\ndef outputPointInstance(obj, now):\n    if LSDhooks.call(\"pre_outputPointInstance\", obj, now):\n        return\n\n    # Grab the SOP to instance\n    def_inst_path = [None]\n    obj.evalString('instancepath', now, def_inst_path)\n\n    instancexform = [True]\n    obj.evalInt('instancexform', now, instancexform)\n\n    ptmotionblur = ['deform']\n    obj.evalString('ptmotionblur', now, ptmotionblur)\n\n    renderboxes = [False]\n    obj.evalInt('renderboxes', now, renderboxes)\n\n    # Grab the geometry and output the points\n    (geo, npts, attrib_map) = LSDgeo.getInstancerAttributes(obj, now)\n    if geo is None or npts is None:\n        LSDhooks.call(\"post_outputPointInstance\", obj, now)\n        return\n\n    # No point xform attribute? Treat as an empty object.\n    if 'geo:pointxform' not in attrib_map:\n        LSDhooks.call(\"post_outputPointInstance\", obj, now)\n        return\n\n    # No objects associated with this instance\n    if not def_inst_path[0] and \\\n       'instance' not in attrib_map and \\\n       'instancefile' not in attrib_map:\n        soho.warning('No instance master and no instance attribute on %s. '\n                     'Object will not be rendered' %\n                     obj.getName())\n        LSDhooks.call(\"post_outputPointInstance\", obj, now)\n        return\n\n    # Collect the unique set of shaders and evaluate them before output.\n    pt_material_shaders = {}\n\n    if 'shop_materialpath' in attrib_map:\n        LSDgeo.getPointInstanceSHOPs(\n            pt_material_shaders, now, geo,\n            'shop_materialpath', npts,\n            shader_types=['shop_surfacepath', 'shop_displacepath', 'lv_matteshader'],\n            override='material_override' )\n\n    cmd_comment('Point instance object %s' % obj.getName() )\n\n    # Spit out materials for all the unique SHOPs\n    for shop_material_path_hash in pt_material_shaders:\n        shop_material_path = shop_material_path_hash.split('-')[0]\n        shop = soho.getObject(shop_material_path)\n        cmd_start('material')\n        LSDsettings.outputObject(shop, now, name=shop_material_path_hash, output_shader=False)\n\n        shader_infos = pt_material_shaders[shop_material_path_hash]\n\n        for shader_info_type in shader_infos:\n            shader_info = shader_infos[shader_info_type]\n            cmd_shader('object', LSDsettings.oshaderMap[shader_info_type], shader_info[0], shader_info[1])\n        cmd_end()\n\n    cmd_start( 'object' )\n    times = LSDmisc.xform_mbsamples(obj, now)\n    objectTransform('space:world', obj, times)\n\n    cmd_declare('object', 'vector2', 'camera:shutter',\n        LSDmisc.obj_shutter_open_close(obj, now))\n    soho.indent()\n    sys.stdout.write('cmd_procedural ptinstance ')\n    if def_inst_path[0]:\n        path = LSDmisc.absoluteObjectPath(obj, now, def_inst_path[0])\n        sys.stdout.write( 'instancepath %s ' % path )\n    sys.stdout.write( 'instancexform %d ' % instancexform[0] )\n    sys.stdout.write( 'ptmotionblur %s ' % ptmotionblur[0] )\n    if renderboxes[0]:\n        sys.stdout.write( 'renderboxes 1 ' )\n    sys.stdout.write( 'process_material 1\\n')\n\n    details = obj.getData(\"lv_details\")\n    LSDsettings.outputObject(obj, now)\n    for d in details:\n        cmd_geometry(d)\n\n    cmd_end()\n\n    LSDhooks.call(\"post_outputPointInstance\", obj, now)\n\nclass ObjectInfo:\n    obj = None\n    check_renderable = False\n\n    def __init__(self, obj, check_renderable):\n        self.obj = obj\n        self.check_renderable = check_renderable\n\ndef addCollectedInstance(obj, check_renderable, obj_list, coll):\n    # Have we already output it?\n    obj_name = obj.getName()\n    if obj_name in coll:\n        # See if the check_renderable flag needs to be set.\n        if check_renderable:\n            obj_list[coll[obj_name]].check_renderable = True\n    else:\n        coll[obj_name] = len(obj_list)\n        obj_list.append(ObjectInfo(obj, check_renderable))\n\n\ndef collectInstances(obj, now, obj_list, coll):\n    # Make sure that any instantiated objects marked unrenderable\n    # are output\n    proc = LSDgeo.getProcedural(obj, now)\n    if proc:\n        shop = proc[3]\n        proc_obj_paths = shop.getDefaultedString('op:objpaths', now, [])\n        for proc_obj_path in proc_obj_paths:\n            proc_obj = soho.getObject(proc_obj_path)\n            addCollectedInstance(proc_obj, True, obj_list, coll)\n    elif LSDgeo.isObjectFastPointInstancer(obj,now):\n        inst_paths = LSDgeo.getInstantiatedObjects(obj, now)\n        for inst_path in inst_paths:\n            all_obj = soho.objectList('objlist:instance')\n            inst_obj = soho.getObject( inst_path )\n            if inst_obj:\n                # Issue a warning for any objects that instantiate a procedural\n                if LSDgeo.getProcedural(inst_obj, now):\n                    soho.error( \"Fast point instancing on object '%s' cannot instantiate \"\n                                \"procedural on object '%s'.\" % (inst_obj.getName(), inst_path))\n                    continue\n\n                addCollectedInstance(inst_obj, True, obj_list, coll)\n\n    addCollectedInstance(obj, False, obj_list, coll)\n\ndef outputSpace(obj, now):\n    if LSDhooks.call('pre_outputSpace', obj, now):\n        return\n    times = LSDmisc.xform_mbsamples(obj, now)\n    cmd_start('object')\n    cmd_property('object', 'name', [obj.getName()])\n    objectTransform('space:world', obj, times)\n    cmd_end()\n    LSDhooks.call('post_outputSpace', obj, now)\n\ndef outputObjects(now, objlist, lightlist, spacelist, foglist,\n                  skipobject, skiplight):\n\n    if LSDhooks.call('pre_outputObjects', now, objlist, lightlist, spacelist,\n            foglist, skipobject, skiplight):\n        return\n\n    LSDhooks.call('pre_outputSpaceList', now, spacelist)\n\n    done = False\n    for space in spacelist:\n        outputSpace(space, now)\n        done = True\n    if done:\n        cmd_comment(None)\n\n    LSDhooks.call('post_outputSpaceList', now, spacelist)\n\n    LSDhooks.call('pre_outputLightList', now, lightlist, skiplight)\n\n    done = False\n    for light in lightlist:\n        if light.Object != skiplight:\n            outputLight(light, now)\n            done = True\n    if done:\n        cmd_comment(None)\n\n    LSDhooks.call('post_outputSpaceList', now, lightlist, skiplight)\n\n    LSDhooks.call('pre_outputFogList', now, foglist)\n\n    done = False\n    for fog in foglist:\n        outputFog(fog, now)\n        done = True\n    if done:\n        cmd_comment(None)\n\n    LSDhooks.call('post_outputFogList', now, foglist)\n\n    LSDhooks.call('pre_outputInstanceList', now, objlist, skipobject)\n\n    done = False\n    depobjlist = []\n    coll = {}\n    for obj in objlist:\n        if obj.Object != skipobject:\n            collectInstances(obj, now, depobjlist, coll)\n\n    for objinfo in depobjlist:\n        outputInstance(objinfo.obj, now, objinfo.check_renderable)\n    if done:\n        cmd_comment(None)\n\n    LSDhooks.call('post_outputInstanceList', now, objlist, skipobject)\n\n    LSDhooks.call('post_outputObjects', now, objlist, lightlist, spacelist,\n            foglist, skipobject, skiplight)\n\ndef saveRetained(now, objlist, lightlist):\n\n    if LSDhooks.call('pre_saveRetained', now, objlist, lightlist):\n        return\n\n    cmd_comment('Retained geometry')\n    for obj in objlist:\n        if LSDgeo.isObjectFastPointInstancer(obj,now):\n            inst_paths = LSDgeo.getInstantiatedObjects(obj, now)\n            for inst_path in inst_paths:\n                inst_obj = soho.getObject( inst_path )\n                if inst_obj:\n                    mbinfo = LSDmisc.geo_mbsamples(inst_obj, now)\n                    LSDgeo.saveRetained(inst_obj, now, mbinfo[0], mbinfo[1], mbinfo[2], mbinfo[3])\n\n        mbinfo = LSDmisc.geo_mbsamples(obj, now)\n        LSDgeo.saveRetained(obj, now, mbinfo[0], mbinfo[1], mbinfo[2], mbinfo[3])\n    for light in lightlist:\n        wrangler = LSDsettings.getWrangler(light, now, 'light_wrangler')\n        if isGeoLight(light, wrangler, now):\n            mbinfo = LSDmisc.geo_mbsamples(light, now)\n            LSDgeo.saveRetained(light, now, mbinfo[0], mbinfo[1], mbinfo[2], mbinfo[3])\n    cmd_comment(None)\n\n    LSDhooks.call('post_saveRetained', now, objlist, lightlist)\n\n# This operation will produce the block containing the camera, imager and\n# global variables.\ndef renderCamera(cam, now,\n                 fromlight=False, forphoton=False, cubemap=None,\n                 viewcam=None):\n    cmd_time(now)\n\n    wrangler = LSDsettings.getWrangler(cam, now, 'camera_wrangler')\n    uvrender = False\n    uvlist = cam.wrangle(wrangler, uvRenderParms, now)\n    if not fromlight and not forphoton:\n        uvrender = uvlist['lv_isuvrendering'].Value[0]\n\n    # Declare baking parms\n    LSDsettings.declareBakingParms(now, False)\n\n    # Declare uv baking parms required by shaders\n    for pname in ('lv_uv_flip_normal', 'lv_uv_unwrap_method'):\n        parm = uvlist[pname]\n        if parm.Value == parm.Default:\n            continue\n        cmd_declare('global', parm.Type, 'global:%s' % re.sub('^lv_', '', pname), parm.Value)\n\n    type = 'unknown'\n    label = [cam.getName()]\n    if uvrender:\n        type = 'uvrender'\n        label.append(type)\n    if fromlight:\n        type = 'shadow'\n        label.append(type)\n    if forphoton:\n        type = 'photon'\n        label.append(type)\n    if cubemap:\n        type = 'envmap'\n        label.append(type)\n    if len(label) == 1:\n        type = 'beauty'\n        label.append(type)\n    label = '.'.join(label)\n\n    cmd_property('renderer', 'rendertype', [type])\n    cmd_property('renderer', 'renderlabel', [label])\n\n    LSDmisc.setCameraBlur(cam, now)\n    if not outputCamera(cam, viewcam, now, fromlight, forphoton, cubemap):\n        cmd_comment('Error evaluating camera parameters: %s' % cam.getName())\n        return False\n    return True\n\n# Output all objects in the scene\ndef renderObjects(now, objlist, lightlist, spacelist, foglist,\n                  skipobject=-1, skiplight=-1):\n\n    if LSDhooks.call('pre_renderObjects', now, objlist, lightlist, spacelist,\n            foglist, skipobject, skiplight):\n        return\n\n    _OutputObjects = set()\n    outputObjects(now, objlist, lightlist, spacelist, foglist,\n                  skipobject, skiplight)\n\n    LSDhooks.call('post_renderObjects', now, objlist, lightlist, spacelist,\n            foglist, skipobject, skiplight)\n\n    cmd_raytrace()\n\n# A full render\n# viewcam can be provided to indicate that a different camera should be\n# used to create the camera viewing transform from the one used to produce\n# settings.\ndef render(cam, now, objlist, lightlist, spacelist, foglist,\n                     fromlight=False, forphoton=False, cubemap=None,\n                     viewcam=None, skiplight=-1):\n    if LSDhooks.call('pre_render', cam, now, objlist, lightlist, spacelist,\n            foglist, fromlight, forphoton, cubemap, viewcam):\n        return\n\n    if renderCamera(cam, now, fromlight, forphoton, cubemap, viewcam):\n        skipobject = -1\n        if cubemap:\n            # When rendering a cube-environment, we don't want to include\n            # the object at the center of the environment\n            skipobject = cubemap.Object.Object   # Object handle\n        renderObjects(now, objlist, lightlist, spacelist, foglist,\n                      skipobject, skiplight)\n    LSDhooks.call('post_render', cam, now, objlist, lightlist, spacelist,\n            foglist, fromlight, forphoton, cubemap, viewcam)\n\n",
			"file": "src/houdini/soho/LSDframe.py",
			"file_size": 64676,
			"file_write_time": 132458908540982145,
			"settings":
			{
				"buffer_size": 64676,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#\n# PROPRIETARY INFORMATION.  This software is proprietary to\n# Side Effects Software Inc., and is not to be reproduced,\n# transmitted, or disclosed in any way without written permission.\n#\n# Produced by:\n#       Side Effects Software Inc\n#       123 Front Street West, Suite 1401\n#       Toronto, Ontario\n#       Canada   M5J 2M2\n#       416-504-9876\n#\n# NAME:         LSDapi.py ( Python )\n#\n# COMMENTS:     Python utilities for LSD interface\n#\n\nimport sys, os\nimport soho\nfrom soho import Precision\n\n#########################################################\n#\n#  Utility functions\n#\n#########################################################\n\nForceEmbedVex = False\n\ndef cmd_quote(str):\n    return '\"' + str.replace('\"', '\\\"') + '\"'\n\ndef cmd_formatReal(v):\n    return \"%.*g\" % (Precision, v)\n\n#########################################################\n#\n#  Start of the LSD API\n#\n#########################################################\n\ndef cmd_comment(msg):\n    if msg != None:\n        print \"#\", msg\n    else:\n        print\n\ndef cmd_setenv(name, value):\n    soho.indent()\n    print 'setenv', name, '=', cmd_quote(value)\n\ndef cmd_version(ver):\n    soho.indent()\n    print 'cmd_version VER%s' % ver\n\ndef cmd_hscript(cmd):\n    # The LSD language is a subset of the hscript language.  This command lets\n    # you inject hscript commands into the LSD stream\n    print cmd\n\ndef cmd_defaults(file):\n    soho.indent()\n    print 'cmd_defaults', repr(file)\n\ndef cmd_config(file):\n    soho.indent()\n    print 'cmd_config', repr(file)\n\ndef cmd_loadotl(otls, from_text_block=False):\n    cmd = 'cmd_loadotl '\n    if from_text_block:\n        cmd += '-t '\n    for l in otls:\n        soho.indent()\n        soho.printArray(cmd, [l], '\\n')\n\ndef cmd_pathmap(src, target):\n    src = src.strip()\n    target = target.strip()\n    if src and target:\n        soho.indent()\n        soho.printArray('pathmap -a ', [src, target], '\\n')\n\ndef cmd_otprefer(otprefs):\n    for i in range(0, len(otprefs), 2):\n        soho.indent()\n        soho.printArray('otprefer ', [otprefs[i], otprefs[i+1]], '\\n')\n\ndef cmd_transform(matrix):\n    soho.indent()\n    soho.printArray('cmd_transform ', matrix, '\\n')\n\ndef cmd_mtransform(matrix):\n    soho.indent()\n    soho.printArray('cmd_mtransform ', matrix, '\\n')\n\ndef cmd_stransform(matrix):\n    soho.printArray('cmd_stransform ', matrix, '\\n')\n\ndef cmd_detail(name, file):\n    soho.indent()\n    if file.find(' ') >= 0:\n        file = '\"%s\"' % file\n    print 'cmd_detail', name, file\n\ndef cmd_geometry(file):\n    soho.indent()\n    print 'cmd_geometry', file\n\ndef cmd_start(objecttype):\n    soho.indent(1, ' '.join(['cmd_start', objecttype]))\n\ndef cmd_end():\n    soho.indent(-1, 'cmd_end')\n\ndef cmd_delete(type, name):\n    print 'cmd_delete', type, name\n\ndef cmd_procedural(bounds, proc, shoptype = soho.ShopTypeDefault):\n    soho.indent()\n    shader = soho.processShader(proc[0], ForceEmbedVex, False, shoptype)\n    if len(shader[1]):\n        print shader[1]\n    if bounds[0] <= bounds[3]:\n        soho.printArray('cmd_procedural -m ', bounds[0:3], '')\n        soho.printArray(              ' -M ', bounds[3:6], ' '),\n    else:\n        sys.stdout.write('cmd_procedural ')\n    sys.stdout.write(shader[0])\n    sys.stdout.write('\\n')\n    print\n\ndef cmd_shop(shop, shaderstring, shoptype = soho.ShopTypeDefault):\n    # Declare an old style shader\n    shader = soho.processShader(shaderstring, ForceEmbedVex, False, shoptype)\n    if len(shader[1]):\n        print shader[1]\n    soho.indent()\n    print 'cmd_shop', shop, shader[0]\n\ndef cmd_shader(style, name, orgshader, shoptype = soho.ShopTypeDefault):\n    # Processing  the shader may generate VEX code or COP maps and\n    # will return the value in the second element of the tuple.  This\n    # should be printed before the shader string.\n    shader = soho.processShader(orgshader, ForceEmbedVex, False, shoptype)\n    if len(shader[1]):\n        print shader[1]\n    soho.indent()\n    print 'cmd_property', style, name, shader[0]\n\ndef cmd_textblock(name, value, encoding=None):\n    soho.indent()\n    if encoding:\n        print 'cmd_textblock -e', encoding, name\n    else:\n        print 'cmd_textblock', name\n    print value\n    print 'cmd_endtext'\n\ndef cmd_erase_textblock(name):\n    soho.indent()\n    print 'cmd_textblock -x', name\n\ndef cmd_stylesheet(name):\n    soho.indent()\n    print 'cmd_stylesheet', name\n\ndef cmd_bundle(bundle, node_paths):\n    soho.indent()\n    print 'cmd_bundlecreate', bundle\n    soho.addBundleDependency(bundle)\n    start = 0\n    step = 100\n    while len(node_paths) > start:\n        end = start + step\n        print 'cmd_bundleadd', bundle, \" \".join(node_paths[start:end])\n        start = end\n\ndef cmd_property(style, name, value, quoted=True):\n    soho.indent()\n    soho.printArray('cmd_property %s %s ' % (style, name), value, '\\n', quoted)\n\ndef cmd_propertyAndParms(style, name, value, parms):\n    soho.indent()\n    sys.stdout.write('cmd_property %s %s %s' % (style, name, value))\n    for parm in parms:\n        parm.printValue(' ' + parm.Key + ' ', '')\n    sys.stdout.write('\\n')\n\ndef cmd_propertyV(style, parmlist):\n    if style:\n        for parm in parmlist:\n            soho.indent()\n            parm.printValue('cmd_property %s %s ' % (style, parm.Key), '\\n')\n    else:\n        for parm in parmlist:\n            soho.indent()\n            parm.printValue('cmd_property %s %s '%(parm.Style, parm.Key), '\\n')\n\ndef cmd_odefprop(name, type, value):\n    soho.indent()\n    soho.printArray('cmd_odefprop %s %s ' % (name, type), value, '\\n')\n\ndef cmd_declare(style, type, name, value):\n    soho.indent()\n    soho.printArray('cmd_declare %s %s %s ' % (style, type, name), value, '\\n')\n\ndef cmd_time(now):\n    soho.indent()\n    cmd = 'cmd_time %s' % cmd_formatReal(now)\n    soho.indent(1, cmd)\n\ndef cmd_commandline(options):\n    soho.indent()\n    print \"cmd_cmdopt\", options\n\ndef cmd_image(filename, device=\"\", options=\"\"):\n    soho.makeFilePathDirsIfEnabled(filename)\n    args = []\n    if device:\n        args.append(\"-f\")\n        args.append(device)\n    if options:\n        options = ' ' + options\n    args.append(filename)\n    istr = soho.arrayToString('cmd_image ', args, options)\n    soho.indent(1, istr, None)\n\ndef cmd_photon():\n    soho.indent()\n    print \"cmd_photon\"\n\ndef cmd_defplane(filename, variable, vextype):\n    soho.indent()\n    soho.printArray('cmd_defplane ', [filename, variable, vextype], '\\n')\n\ndef cmd_planeproperty(parm, value):\n    soho.indent()\n    soho.printArray(\"cmd_planeproperty %s \" % parm, value, \"\\n\")\n\ndef cmd_planepropertyV(parmlist):\n    for parm in parmlist:\n        soho.indent()\n        parm.printValue('cmd_planeproperty %s ' % parm.Key, '\\n')\n\ndef cmd_raytrace():\n    soho.indent()\n    print 'cmd_raytrace'\n\ndef cmd_reset(light=True, obj=True, fog=True):\n    options = ''\n    if light:\n        options += ' -l'\n    if obj:\n        options += ' -o'\n    if fog:\n        options += ' -f'\n    soho.indent(-1, 'cmd_reset %s' % options)\n\ndef cmd_makecubemap(path, suffixes):\n    soho.indent()\n    # When there are spaces in the path names, the quote protection for this\n    # command can be incredibly difficult.\n    sys.stdout.write('''python -c 'import os; os.system(\"isixpack''')\n    for s in suffixes:\n        sys.stdout.write(' \\\\\"%s%s\\\\\"' % (path, s))\n    sys.stdout.write(''' \\\\\"%s\\\\\"\")'\\n''' % path);\n    for s in suffixes:\n        soho.indent()\n        sys.stdout.write('cmd_unlink -f \"%s%s\"\\n' % ( path, s))\n\ndef cmd_prefilter(path, prefilter_path, filter, count, ratio):\n    soho.indent()\n    # Create a temporary file in the same directory as the original map\n    pathsplit = os.path.split(path)\n    args = [ '\"%s\" prefilter' % path,\n             'photon_file \"%s\"' % path,\n             'prefiltered_file \"%s\"' % prefilter_path,\n             'count %d' % count,\n             'filter %s' % filter,\n             'ratio %f' % ratio\n           ]\n    filterargs = ' '.join(args)\n    sys.stdout.write('cmd_pcfilter %s\\n' % (filterargs))\n\ndef cmd_updateipr(stash=True):\n    soho.indent()\n    sys.stdout.write('cmd_updateipr');\n    if stash:\n        sys.stdout.write(' -s')\n    sys.stdout.write('\\n')\n\ndef cmd_if(condition):\n    soho.indent(1, 'if %s then' % condition)\n\ndef cmd_endif():\n    soho.indent(-1, 'endif')\n\ndef cmd_quit():\n    soho.indent(-1, 'cmd_quit')\n",
			"file": "src/houdini/soho/LSDapi.py",
			"file_size": 8282,
			"file_write_time": 132458908630380622,
			"settings":
			{
				"buffer_size": 8282,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#\n# PROPRIETARY INFORMATION.  This software is proprietary to\n# Side Effects Software Inc., and is not to be reproduced,\n# transmitted, or disclosed in any way without written permission.\n#\n# Produced by:\n#       Side Effects Software Inc\n#       123 Front Street West, Suite 1401\n#       Toronto, Ontario\n#       Canada   M5J 2M2\n#       416-504-9876\n#\n# NAME:         mantra.py ( Python )\n#\n# COMMENTS:     LSD generation using SOHO\n#\n\nimport time\nimport soho\nimport hou\nimport LSDapi\nimport LSDmisc\nimport LSDframe\nimport LSDgeo\nimport LSDsettings\nimport LSDhooks\nfrom soho import SohoParm\nfrom LSDapi import *\n\nLSDhooks.call(\"pre_lsdGen\")\n\nclockstart = time.time()\n\ncontrolParameters = {\n    # The time at which the scene is being rendered\n    'now'     : SohoParm('state:time', 'real',  [0], False,  key='now'),\n\n    # The mode (default, rerender generate, rerender update)\n    'mode'    : SohoParm('state:previewmode', 'string', ['default'], False, key='mode'),\n\n    # A string with names of style sheets changed since the last IPR update.\n    'dirtystylesheets' : SohoParm('state:dirtystylesheets', 'string', [''], False, key='dirtystylesheets'),\n\n    # A string with names of bundles changed since the last IPR update.\n    'dirtybundles' : SohoParm('state:dirtybundles', 'string', [''], False, key='dirtybundles'),\n\n    # The camera (or list of cameras), and masks for visible objects,\n    # active lights and visible fog objects\n    'camera'  : SohoParm('camera', 'string', ['/obj/cam1'], False),\n\n    # Whether to generate:\n    #   Shadow maps for the selected lights\n    #   Environment maps for the selected objects\n    #   The main image from the camera\n    #   A PBR render target\n    'shadow'  : SohoParm('render_any_shadowmap','int', [1], False,key='shadow'),\n    'env'     : SohoParm('render_any_envmap',   'int', [1], False,key='env'),\n    'photon'  : SohoParm('render_any_photonmap', 'int', [1], False, key='photon'),\n    'pointcloud'  : SohoParm('render_any_pointcloud', 'int', [1], False, key='pointcloud'),\n    'main'    : SohoParm('render_viewcamera','int', [1], False, key='main'),\n    'decl'    : SohoParm('declare_all_shops', 'int', [0], False, key='decl'),\n    'engine'  : SohoParm('lv_renderengine',  'string', ['micropoly'],\n                                            False, key='engine'),\n\n    'lv_inheritproperties' : SohoParm('lv_inheritproperties', 'int', [0], False),\n\n    'lv_embedvex' :SohoParm('lv_embedvex',  'int', [0], False, key='embedvex'),\n    'lv_quickexit':SohoParm('lv_quickexit', 'int', [1], False),\n    'lv_numpathmap':SohoParm('lv_numpathmap', 'int', [0], False),\n    'lv_isuvrendering':SohoParm('lv_isuvrendering', 'bool', [False], False),\n    'lv_defaults' : SohoParm('lv_defaults', 'string',\n                            ['RenderProperties.json'], False),\n}\n\nparmlist = soho.evaluate(controlParameters)\n\nnow = parmlist['now'].Value[0]\nmode = parmlist['mode'].Value[0]\ndirtystylesheets = parmlist['dirtystylesheets'].Value[0]\ndirtybundles = parmlist['dirtybundles'].Value[0]\ncamera  = parmlist['camera'].Value[0]\nquickexit = parmlist['lv_quickexit'].Value[0]\nLSDapi.ForceEmbedVex = parmlist['embedvex'].Value[0]\ndecl_shops = parmlist['decl'].Value[0]\nnumpathmap = parmlist['lv_numpathmap'].Value[0]\nuvrender = parmlist['lv_isuvrendering'].Value[0]\npropdefs = parmlist['lv_defaults'].Value[0]\n\nif mode != 'default':\n    # Don't allow for nested evaluation in IPR mode\n    inheritedproperties = False\nelse:\n    inheritedproperties = parmlist['lv_inheritproperties'].Value[0]\n\noptions = {}\nif inheritedproperties:\n    # Turn off object->output driver inheritance\n    options['state:inheritance'] = '-rop'\nif propdefs and propdefs != 'stdin':\n    options['defaults_file'] = propdefs\n\nif not soho.initialize(now, camera, options):\n    # If we're UV rendering and there's no camera, create one.\n    if uvrender:\n        camera = 'ipr_camera'\n        if not soho.initialize(now, camera, options):\n            soho.error(\"Unable to initialize UV rendering module with a camera\")\n    else:\n        soho.error(\"Unable to initialize rendering module with given camera\")\n\n#\n# Add objects to the scene, we check for parameters on the viewing\n# camera.  If the parameters don't exist there, they will be picked up\n# by the output driver.\n#\nobjectSelection = {\n    # Candidate object selection\n    'vobject'     : SohoParm('vobject', 'string',       ['*'], False),\n    'alights'     : SohoParm('alights', 'string',       ['*'], False),\n    'vfog'        : SohoParm('vfog',    'string',       ['*'], False),\n\n    'forceobject' : SohoParm('forceobject',     'string',       [''], False),\n    'forcelights' : SohoParm('forcelights',     'string',       [''], False),\n    'forcefog'    : SohoParm('forcefog',        'string',       [''], False),\n\n    'excludeobject' : SohoParm('excludeobject', 'string',       [''], False),\n    'excludelights' : SohoParm('excludelights', 'string',       [''], False),\n    'excludefog'    : SohoParm('excludefog',    'string',       [''], False),\n\n    'matte_objects'   : SohoParm('matte_objects', 'string',     [''], False),\n    'phantom_objects' : SohoParm('phantom_objects', 'string',   [''], False),\n\n    'sololight'     : SohoParm('sololight',     'string',       [''], False),\n\n    'lv_cameralist' : SohoParm('lv_cameralist', 'string',       [''], False),\n}\n\nfor cam in soho.objectList('objlist:camera'):\n    break\nelse:\n    soho.error(\"Unable to find viewing camera for render\")\n\nobjparms = cam.evaluate(objectSelection, now)\nstdobject = objparms['vobject'].Value[0]\nstdlights = objparms['alights'].Value[0]\nstdfog = objparms['vfog'].Value[0]\nforceobject = objparms['forceobject'].Value[0]\nforcelights = objparms['forcelights'].Value[0]\nforcefog = objparms['forcefog'].Value[0]\nexcludeobject = objparms['excludeobject'].Value[0]\nexcludelights = objparms['excludelights'].Value[0]\nexcludefog = objparms['excludefog'].Value[0]\nsololight = objparms['sololight'].Value[0]\nmatte_objects = objparms['matte_objects'].Value[0]\nphantom_objects = objparms['phantom_objects'].Value[0]\nforcelightsparm = 'forcelights'\nif sololight:\n    stdlights = excludelights = ''\n    forcelights = sololight\n    forcelightsparm = 'sololight'\n\n# Obtain the list of cameras through which we need to render. The main camera\n# may specify a few sub-cameras, for example, in the stereo camera case.\ncamera_paths = objparms['lv_cameralist'].Value[0].split()\ncamera_list  = []\nfor cam_path in camera_paths:\n    camera_list.append( soho.getObject( cam_path ))\nif len( camera_list ) == 0:\n    cam.storeData('NoFileSuffix', True)\n    camera_list.append( cam )\n\n# First, we add objects based on their display flags or dimmer values\nsoho.addObjects(now, stdobject, stdlights, stdfog, True,\n    geo_parm='vobject', light_parm='alights', fog_parm='vfog')\nsoho.addObjects(now, forceobject, forcelights, forcefog, False,\n    geo_parm='forceobject', light_parm=forcelightsparm, fog_parm='forcefog')\n\n# Force matte & phantom objects to be visible too\nif matte_objects:\n    soho.addObjects(now, matte_objects, '', '', False,\n        geo_parm='matte_objects', light_parm='', fog_parm='')\nif phantom_objects:\n    soho.addObjects(now, phantom_objects, '', '', False,\n        geo_parm='phantom_objects', light_parm='', fog_parm='')\nsoho.removeObjects(now, excludeobject, excludelights, excludefog,\n    geo_parm='excludeobject', light_parm='excludelights', fog_parm='excludefog')\n\n# site-wide customization hook\nLSDhooks.call('pre_lockObjects', parmlist, objparms, now, camera)\n\n# Lock off the objects we've selected\nsoho.lockObjects(now)\n\nLSDsettings.clearLists()\nLSDsettings.initializeFeatures()\nLSDsettings.setMattePhantomOverrides(now, matte_objects, phantom_objects)\n\nLSDmisc.initializeMotionBlur(cam, now)\n\n# enabling cryptomatte, period, will add materialname property to objects\nif cam.getDefaultedInt('lv_cryptolayers', now, [0])[0] > 0:\n    LSDsettings._Settings.GenerateMaterialname = True\n\nif mode == 'update':\n    # Only reset saved shaders and properties\n    LSDgeo.reset(False)\n\n    LSDhooks.call('pre_iprUpdate', parmlist, objparms, now, camera)\n    cmd_updateipr(stash=True)\n\n    #\n    # Output camera\n    #\n    if parmlist['main'].Value[0]:\n        cmd_reset(light=False, obj=False, fog=False)\n        LSDframe.renderCamera(cam, now)\n\n    #\n    # Delete deleted objects\n    #\n    cmd_comment('Deleting objects')\n    for obj in soho.objectList('objlist:deletedinstance'):\n        LSDgeo.dereferenceGeometry(obj)\n        cmd_delete('object', obj.getName())\n    cmd_comment(None)\n\n    cmd_comment('Deleting lights')\n    for light in soho.objectList('objlist:deletedlight'):\n        LSDgeo.dereferenceGeometry(light)\n        cmd_delete('light', light.getName())\n    cmd_comment(None)\n\n    cmd_comment('Deleting fogs')\n    for fog in soho.objectList('objlist:deletedfog'):\n        cmd_delete('fog', fog.getName())\n    cmd_comment(None)\n\n    #\n    # Delete unused geometry\n    #\n    cmd_comment('Deleting unused geometry')\n    LSDgeo.deleteUnusedGeometry()\n    cmd_comment(None)\n\n    #\n    # Declare dirty materials\n    #\n    cmd_comment('Updating materials')\n    LSDgeo.declareMaterials(now, soho.objectList('objlist:mat'))\n    cmd_comment(None)\n\n    #\n    # Declare style sheets\n    #\n    cmd_comment('Updating style sheets')\n    LSDsettings.outputStyleSheets(now, dirtystylesheets, True)\n    cmd_comment(None)\n\n    #\n    # Declare bundles\n    #\n    cmd_comment('Updating bundles')\n    LSDsettings.outputBundles(now, dirtybundles, True)\n    cmd_comment(None)\n\n    #\n    # Output retained geometry\n    #\n    LSDframe.saveRetained(now, soho.objectList('objlist:dirtyinstance'),\n                               soho.objectList('objlist:dirtylight'))\n\n    #\n    # Output objects\n    #\n    if parmlist['main'].Value[0]:\n        LSDframe.renderObjects(now,\n                soho.objectList('objlist:dirtyinstance'),\n                soho.objectList('objlist:dirtylight'),\n                soho.objectList('objlist:dirtyspace'),\n                soho.objectList('objlist:dirtyfog'))\n\n    LSDhooks.call('post_iprUpdate', parmlist, objparms, now, camera)\n\nelse:\n    LSDgeo.reset()\n\n    # Output LSD header\n    LSDmisc.header(now, propdefs)\n\n    if mode == 'generate':\n        # Notify mantra that it's rendering for IPR\n        print 'cmd_iprmode generate'\n\n    for i in range(0, numpathmap):\n        map = soho.getDefaultedString('lv_pathmap%d' % (i+1), [])\n        if map and len(map) == 2:\n            cmd_pathmap(map[0], map[1])\n\n    if not LSDhooks.call('pre_otl', parmlist, objparms, now, camera):\n        #\n        # Output OTLs loaded by Houdini\n        otls = soho.getDefaultedString('state:otllist', [])\n        if soho.getDefaultedInt('lv_otlfullpath', [0])[0]:\n            for i in range(len(otls)):\n                otls[i] = hou.expandString(otls[i])\n        if len(otls):\n            cmd_comment(\"OTLs loaded into the .hip file\")\n            cmd_loadotl(otls)\n\n        #\n        # Output OTL preferences set in Houdini\n        otprefs = soho.getDefaultedString('state:otprefer', [])\n        if soho.getDefaultedInt('lv_otlfullpath', [0])[0]:\n            for i in range(1, len(otprefs), 2):\n                otprefs[i] = hou.expandString(otprefs[i])\n        if len(otprefs):\n            cmd_comment(\"OTL preferences from the .hip file\")\n            cmd_otprefer(otprefs)\n\n    if inheritedproperties:\n        # Output object level properties which are defined on the output driver\n        cmd_comment('Object properties defined on output driver')\n        LSDsettings.outputObject(soho.getOutputDriver(), now)\n\n    isphoton = parmlist['engine'].Value[0] == 'photon' or \\\n               parmlist['engine'].Value[0] == 'viewphoton'\n\n    #\n    # If there's only one camera, output it here\n    donecamera = False\n    do_main = parmlist['main'].Value[0]\n    if do_main and mode == \"generate\" and len(camera_list) == 1:\n        sub_camera = camera_list[0]\n        if sub_camera:\n            if not LSDhooks.call('pre_mainimage', parmlist, objparms, now, sub_camera):\n                cmd_comment('Main image from %s' % sub_camera.getName())\n                LSDframe.renderCamera(sub_camera, now, forphoton=isphoton)\n                donecamera = True\n\n    #\n    # Declare all materials\n    #\n    if LSDhooks.call('pre_materials', parmlist, objparms, now, camera):\n        decl_shops = False\n    if decl_shops:\n        LSDgeo.declareAllMaterials(now, decl_shops > 1)\n\n    #\n    # Declare all bundles\n    #\n    LSDsettings.outputBundles(now, None, False)\n\n    #\n    # Declare style sheets\n    #\n    LSDsettings.outputStyleSheets(now, None, False)\n\n    #\n    # Output retained geometry\n    #\n    LSDhooks.call('pre_geometry', parmlist, objparms, now, camera)\n    LSDframe.saveRetained(now, soho.objectList('objlist:instance'),\n                               soho.objectList('objlist:light'))\n\n    #\n    # Output shadow maps\n    #\n    first = True\n    do_shadow = parmlist['shadow'].Value[0]\n    if LSDhooks.call('pre_shadowmaps', parmlist, objparms, now, camera):\n        do_shadow = False\n    if do_shadow:\n        for light in soho.objectList('objlist:light'):\n            wrangler = LSDsettings.getWrangler(light, now, 'light_wrangler')\n            if light.wrangleInt(wrangler, 'render_shadowmap', now, [0])[0]:\n                if first:\n                    cmd_comment('')\n                    cmd_comment('Shadow Maps')\n                    cmd_comment('')\n                    first = False\n                cmd_comment('Shadow map from %s' % light.getName())\n                LSDsettings.setShadowMap(True)\n                LSDframe.render(light, now,\n                        light.objectList('objlist:shadowmask', now),\n                        [],        # Don't output lights\n                        soho.objectList('objlist:space'),\n                        [],        # Don't output fog when rendering shadow maps\n                        fromlight=True,\n                        skiplight=light.Object)\n                LSDsettings.setShadowMap(False)\n                cmd_reset()\n    LSDhooks.call('post_shadowmaps', parmlist, objparms, now, camera)\n    if not first:\n        cmd_comment(None)\n\n    #\n    # Output reflection maps\n    #\n    first = True\n    do_env = parmlist['env'].Value[0]\n    if LSDhooks.call('pre_envmaps', parmlist, objparms, now, camera):\n        do_env = False\n    if do_env:\n        for obj in soho.objectList('objlist:instance'):\n            if obj.getDefaultedInt('render_envmap', now, [0])[0]:\n                if first:\n                    cmd_comment('')\n                    cmd_comment('Environment Maps')\n                    cmd_comment('')\n                    first = False\n                cmd_comment('Environment map from %s' % obj.getName())\n                cubemap = LSDframe.CubeMapControl(obj, now)\n                if not cubemap.BasePath:\n                    cmd_comment(' ERROR: Invalid map name, skipping generation --')\n                else:\n                    for dir in range(6):\n                        cubemap.setFace(dir)\n                        LSDframe.render(obj, now,\n                                obj.objectList('objlist:reflectmask', now),\n                                soho.objectList('objlist:light'),\n                                soho.objectList('objlist:space'),\n                                soho.objectList('objlist:fog'),\n                                cubemap=cubemap)\n                        cmd_reset()\n                    cubemap.makeMap()\n    LSDhooks.call('post_envmaps', parmlist, objparms, now, camera)\n    if not first:\n        cmd_comment(None)\n\n    #\n    # Generate point clouds\n    #\n    first = True\n    do_photon = parmlist['pointcloud'].Value[0]\n    if LSDhooks.call('pre_pointclouds', parmlist, objparms, now, camera):\n        do_photon = False\n    if do_photon:\n        for light in soho.objectList('objlist:light'):\n            wrangler = LSDsettings.getWrangler(light, now, 'light_wrangler')\n            if light.wrangleInt(wrangler, 'render_pointcloud', now, [0])[0]:\n                if first:\n                    cmd_comment('')\n                    cmd_comment('Point Clouds')\n                    cmd_comment('')\n                    first = False\n                soho.getOutputDriver().storeData('pcrender', True)\n                cmd_comment('Point cloud from light: %s' % light.getName())\n\n                pccam = cam\n                if light.wrangleInt(wrangler, 'pc_camera_override', now, [0])[0]:\n                    cam_path = light.wrangleString(\n                            wrangler, 'pc_camera', now, [\"\"])[0]\n                    pccam = soho.getObject(cam_path)\n\n                # As a temporary solution, point cloud lights need to\n                # render all objects in the scene while geometry lights\n                # only need to render the light geometry itself.  This\n                # heuristic checks for the 'pc_enable' parameter which only\n                # exists on geometry lights.\n                is_pclight = not light.wrangleInt(wrangler, 'pc_enable', now, [0])[0]\n                if is_pclight:\n                    # Render the scene\n                    LSDframe.render(light, now,\n                                soho.objectList('objlist:instance'),\n                                light.objectList('objlist:lightmask', now),\n                                soho.objectList('objlist:space'),\n                                soho.objectList('objlist:fog'),\n                                fromlight=True,\n                                forphoton=False,\n                                viewcam=pccam,\n                                skiplight=light.Object)\n                else:\n                    # Output only the light.  The light wrangler needs to\n                    # configure light_contribprimary to true.\n                    LSDframe.render(light, now,\n                                [],        # Don't output objects\n                                [light],\n                                soho.objectList('objlist:space'),\n                                [],        # Don't output fog\n                                fromlight=True,\n                                forphoton=False,\n                                viewcam=pccam)\n                soho.getOutputDriver().clearData('pcrender')\n                # Don't reset objects for point cloud generation, similar\n                # to photon maps.\n                cmd_reset(obj=False)\n    LSDhooks.call('post_pointclouds', parmlist, objparms, now, camera)\n\n    #\n    # Generate photon maps\n    #\n    first = True\n    do_photon = parmlist['photon'].Value[0]\n    if LSDhooks.call('pre_photonmaps', parmlist, objparms, now, camera):\n        do_photon = False\n    if do_photon:\n        for light in soho.objectList('objlist:light'):\n            wrangler = LSDsettings.getWrangler(light, now, 'light_wrangler')\n            if light.wrangleInt(wrangler, 'render_photonmap', now, [0])[0]:\n                if first:\n                    cmd_comment('')\n                    cmd_comment('Photon Maps')\n                    cmd_comment('')\n                    first = False\n                soho.getOutputDriver().storeData('photonrender', True)\n                cmd_comment('Photon map from light: %s' % light.getName())\n                LSDframe.render(light, now,\n                            soho.objectList('objlist:instance'),\n                            light.objectList('objlist:lightmask', now),\n                            soho.objectList('objlist:space'),\n                            soho.objectList('objlist:fog'),\n                            fromlight=True,\n                            forphoton=True,\n                            viewcam=cam,\n                            skiplight=light.Object)\n                soho.getOutputDriver().clearData('photonrender')\n                # Don't reset objects for photon map generation.  This\n                # makes it possible to reuse initialized octrees between\n                # photon passes and the main render.  This optimization\n                # assumes that the instance list for photon generation\n                # matches the main render.\n                cmd_reset(obj=False)\n                if light.wrangleInt(wrangler, 'photon_prefilter', now, [0])[0]:\n                    path = light.wrangleString(wrangler, 'photon_map', now, [\"\"])[0]\n                    prefilterpath = light.wrangleString(wrangler, 'photon_prefiltermap', now, [\"\"])[0]\n                    filter = light.wrangleString(wrangler, 'photon_filter', now, [\"\"])[0]\n                    count = light.wrangleInt(wrangler, 'photon_precount', now, [\"\"])[0]\n                    ratio = light.wrangleFloat(wrangler, 'photon_preratio', now, [\"\"])[0]\n                    cmd_prefilter(path, prefilterpath, filter, count, ratio)\n    LSDhooks.call('post_photonmaps', parmlist, objparms, now, camera)\n\n    #\n    # Output main image\n    #\n    if do_main and donecamera:\n        LSDmisc.setCameraBlur(camera_list[0], now)\n        LSDframe.renderObjects(now,\n                soho.objectList('objlist:instance'),\n                soho.objectList('objlist:light'),\n                soho.objectList('objlist:space'),\n                soho.objectList('objlist:fog'))\n        LSDhooks.call('post_mainimage', parmlist, objparms, now, camera_list[0])\n    elif do_main:\n        for sub_camera in camera_list:\n            if sub_camera:\n                if not LSDhooks.call('pre_mainimage', parmlist, objparms, now, sub_camera):\n                    cmd_comment('Main image from %s' % sub_camera.getName())\n                    LSDframe.render(sub_camera, now,\n                            soho.objectList('objlist:instance'),\n                            soho.objectList('objlist:light'),\n                            soho.objectList('objlist:space'),\n                            soho.objectList('objlist:fog'),\n                            forphoton=isphoton)\n                    # Always reset after intermediate (ie, non-last)\n                    # cameras, and for the last one only if quickexit\n                    # is false.\n                    if (not quickexit) or (sub_camera is not camera_list[-1]):\n                        cmd_reset()\n                LSDhooks.call('post_mainimage', parmlist, objparms, now, sub_camera)\n\nLSDhooks.call(\"post_lsdGen\")\nLSDsettings.clearLists()\n\n# IMPORTANT: Don't print ANYTHING here - IPR relies on the fact that the\n# cmd_raytrace command is the last thing in the buffer, otherwise the\n# render will be interrupted immediately upon starting!\n\nif mode == 'default':\n    cmd_comment('Generation time: %g seconds' % (time.time() - clockstart))\n    cmd_quit()\n",
			"file": "src/houdini/soho/LSD.py",
			"file_size": 22594,
			"file_write_time": 132469251874609033,
			"settings":
			{
				"buffer_size": 22594,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/houdini/soho/python2.7/soho.py",
			"settings":
			{
				"buffer_size": 26464,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/houdini/soho/python2.7/wranglers/HoudiniLightIFD.py",
			"settings":
			{
				"buffer_size": 19720,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "\"\"\"\n    This file was automatically generated.  Please do not modify by hand.\n\n    The code provides a mapping from Houdini parameters to the parameters\n    needed for rendering.\n\"\"\"\n\ndef initializeFeatures(settings):\n    Renderer = settings.addGlobal\n    Camera = settings.addGlobal\n    Image = settings.addGlobal\n    Photon = settings.addGlobal\n    Object = settings.addObject\n    Light = settings.addLight\n    Fog = settings.addFog\n    Geometry = settings.addGeometry\n    Deep = settings.addDeepResolver\n    Measure = settings.addMeasure\n    Bokeh = settings.addBokeh\n    IPlane = settings.addImagePlane\n    ImageOption = settings.addImageOption\n\n    # -- Renderer --\n    Renderer(\"renderer\", \"abortmissingtexture\", \"bool\", \"lv_abort_missing_texture\")\n    Renderer(\"renderer\", \"alfprogress\", \"bool\", \"lv_alfprogress\")\n    Renderer(\"renderer\", \"bake_alphadestplanes\", \"string\", \"lv_bake_alphadestplanes\")\n    Renderer(\"renderer\", \"bake_normalizep\", \"bool\", \"lv_bake_normalizep\")\n    Renderer(\"renderer\", \"bake_normalsfaceforward\", \"bool\", \"lv_bake_normalsfaceforward\")\n    Renderer(\"renderer\", \"bake_udimrange\", \"string\", \"lv_bake_udimrange\")\n    Renderer(\"renderer\", \"bake_usemikkt\", \"bool\", \"lv_bake_usemikkt\")\n    Renderer(\"renderer\", \"bboxenablelod\", \"bool\", \"lv_bboxenablelod\")\n    Renderer(\"renderer\", \"blurquality\", \"bool\", \"lv_blurquality\")\n    Renderer(\"renderer\", \"bvhoriented\", \"bool\", \"lv_bvhoriented\")\n    Renderer(\"renderer\", \"cacheratio\", \"float\", \"lv_cacheratio\")\n    Renderer(\"renderer\", \"cachesize\", \"int\", \"lv_cachesize\")\n    Renderer(\"renderer\", \"colorspace\", \"string\", \"lv_colorspace\", skipdefault=False)\n    Renderer(\"renderer\", \"constrainmaxrough\", \"bool\", \"lv_constrainmaxrough\")\n    Renderer(\"renderer\", \"curvebunchsize\", \"int\", \"lv_curvebunchsize\")\n    Renderer(\"renderer\", \"dicingquality\", \"bool\", \"lv_dicingquality\")\n    Renderer(\"renderer\", \"diffusecomponents\", \"string\", \"lv_diffusecomponents\")\n    Renderer(\"renderer\", \"dofquality\", \"bool\", \"lv_dofquality\")\n    Renderer(\"renderer\", \"exportcomponents\", \"string\", \"lv_exportcomponents\")\n    Renderer(\"renderer\", \"extractimageplanes\", \"bool\", \"lv_extractimageplanes\")\n    Renderer(\"renderer\", \"extractimageplanesformat\", \"string\", \"lv_extractimageplanesformat\")\n    Renderer(\"renderer\", \"extractlinearplanes\", \"string\", \"lv_extractlinearplanes\")\n    Renderer(\"renderer\", \"extractremoveintermediate\", \"bool\", \"lv_extractremoveintermediate\")\n    Renderer(\"renderer\", \"extractseparator\", \"string\", \"lv_extractseparator\")\n    Renderer(\"renderer\", \"fogbackground\", \"bool\", \"lv_fogbackground\")\n    Renderer(\"renderer\", \"fogbackgroundshader\", \"string\", \"lv_fogbackgroundshader\")\n    Renderer(\"renderer\", \"fogimports\", \"string\", \"lv_fogimports\")\n    Renderer(\"renderer\", \"giquality\", \"bool\", \"lv_giquality\")\n    Renderer(\"renderer\", \"hidden\", \"bool\", \"lv_hidden\")\n    Renderer(\"renderer\", \"imageblur\", \"bool\", \"lv_imageblur\")\n    Renderer(\"renderer\", \"iprfakerelight\", \"bool\", \"lv_iprfakerelight\")\n    Renderer(\"renderer\", \"iprfixsamples\", \"bool\", \"lv_iprfixsamples\")\n    Renderer(\"renderer\", \"iprpasssamples\", \"float\", \"lv_iprpasssamples\")\n    Renderer(\"renderer\", \"kdmemfactor\", \"float\", \"lv_kdmemfactor\")\n    Renderer(\"renderer\", \"logcolors\", \"int\", \"lv_logcolors\", skipdefault=False)\n    Renderer(\"renderer\", \"logtimestamps\", \"bool\", \"lv_logtimestamps\")\n    Renderer(\"renderer\", \"measuremedian\", \"bool\", \"lv_measuremedian\")\n    Renderer(\"renderer\", \"nesteddielectric\", \"bool\", \"lv_nesteddielectric\")\n    Renderer(\"renderer\", \"networkcompress\", \"bool\", \"lv_networkcompress\")\n    Renderer(\"renderer\", \"networkqsize\", \"int\", \"lv_networkqsize\")\n    Renderer(\"renderer\", \"objroot\", \"string\", \"lv_objroot\")\n    Renderer(\"renderer\", \"octreestyle\", \"string\", \"lv_octreestyle\")\n    Renderer(\"renderer\", \"pathcutoff\", \"bool\", \"lv_pathcutoff\")\n    Renderer(\"renderer\", \"pathcutoffdepth\", \"int\", \"lv_pathcutoffdepth\")\n    Renderer(\"renderer\", \"pathcutoffmethod\", \"int\", \"lv_pathcutoffmethod\")\n    Renderer(\"renderer\", \"pathcutoffthresh\", \"float\", \"lv_pathcutoffthresh\")\n    Renderer(\"renderer\", \"pbrpathtype\", \"string\", \"lv_pbrpathtype\")\n    Renderer(\"renderer\", \"pbrssssamplingmode\", \"int\", \"lv_pbrssssamplingmode\")\n    Renderer(\"renderer\", \"preview\", \"bool\", \"lv_preview\")\n    Renderer(\"renderer\", \"previewadaptive\", \"bool\", \"lv_previewadaptive\")\n    Renderer(\"renderer\", \"previewadaptivefactor\", \"float\", \"lv_previewadaptivefactor\")\n    Renderer(\"renderer\", \"previewmode\", \"string\", \"lv_previewmode\")\n    Renderer(\"renderer\", \"previewmouseradius\", \"float\", \"lv_previewmouseradius\")\n    Renderer(\"renderer\", \"previewtime\", \"float\", \"lv_previewtime\")\n    Renderer(\"renderer\", \"ptexmapmaxres\", \"int\", \"lv_ptexmapmaxres\")\n    Renderer(\"renderer\", \"ptexmapminres\", \"int\", \"lv_ptexmapminres\")\n    Renderer(\"renderer\", \"ptexmapscale\", \"float\", \"lv_ptexmapscale\")\n    Renderer(\"renderer\", \"ptexrelativescale\", \"bool\", \"lv_ptexrelativescale\")\n    Renderer(\"renderer\", \"ptexscaleattr\", \"string\", \"lv_ptexscaleattr\")\n    Renderer(\"renderer\", \"ptexwraporient\", \"bool\", \"lv_ptexwraporient\")\n    Renderer(\"renderer\", \"raybias\", \"float\", \"lv_raybias\")\n    Renderer(\"renderer\", \"rayblurquality\", \"bool\", \"lv_rayblurquality\")\n    Renderer(\"renderer\", \"rayderivbias\", \"float\", \"lv_rayderivbias\")\n    Renderer(\"renderer\", \"rayderivrandom\", \"bool\", \"lv_rayderivrandom\")\n    Renderer(\"renderer\", \"raylimitcomponents\", \"string\", \"lv_raylimitcomponents\")\n    Renderer(\"renderer\", \"raylimiteval\", \"string\", \"lv_raylimiteval\")\n    Renderer(\"renderer\", \"raylimitlightmask\", \"string\", \"lv_raylimitlightmask\")\n    Renderer(\"renderer\", \"rayquality\", \"bool\", \"lv_rayquality\")\n    Renderer(\"renderer\", \"refractcomponents\", \"string\", \"lv_refractcomponents\")\n    Renderer(\"renderer\", \"relightingbuffer\", \"bool\", \"lv_relightingbuffer\")\n    Renderer(\"renderer\", \"renderengine\", \"string\", \"lv_renderengine\", skipdefault=False)\n    Renderer(\"renderer\", \"renderinterrupt\", \"bool\", \"lv_renderinterrupt\")\n    Renderer(\"renderer\", \"samplecachesize\", \"int\", \"lv_samplecachesize\")\n    Renderer(\"renderer\", \"shadingfactor\", \"float\", \"lv_shadingfactor\")\n    Renderer(\"renderer\", \"shadingqueuesize\", \"int\", \"lv_shadingqueuesize\")\n    Renderer(\"renderer\", \"ssscomponents\", \"string\", \"lv_ssscomponents\")\n    Renderer(\"renderer\", \"stylesheets\", \"bool\", \"lv_stylesheets\")\n    Renderer(\"renderer\", \"threadcount\", \"int\", \"lv_threadcount\")\n    Renderer(\"renderer\", \"tilecallback\", \"string\", \"lv_tilecallback\")\n    Renderer(\"renderer\", \"timelimit\", \"float\", \"lv_timelimit\")\n    Renderer(\"renderer\", \"unshadedlimit\", \"int\", \"lv_unshadedlimit\")\n    Renderer(\"renderer\", \"usecacheratio\", \"bool\", \"lv_usecacheratio\")\n    Renderer(\"renderer\", \"usemaxthreads\", \"int\", \"lv_usemaxthreads\")\n    Renderer(\"renderer\", \"uvattribute\", \"string\", \"lv_uvattribute\")\n    Renderer(\"renderer\", \"uvborderpixels\", \"int\", \"lv_uvborderpixels\")\n    Renderer(\"renderer\", \"uvmkpath\", \"bool\", \"lv_uvmkpath\")\n    Renderer(\"renderer\", \"uvpostprocess\", \"string\", \"lv_uvpostprocess\")\n    Renderer(\"renderer\", \"uvshadingquality\", \"float\", \"lv_uvshadingquality\")\n    Renderer(\"renderer\", \"uvtype\", \"string\", \"lv_uvtype\")\n    Renderer(\"renderer\", \"verbose\", \"int\", \"lv_verbose\", skipdefault=False)\n    Renderer(\"renderer\", \"vexprofile\", \"int\", \"lv_vexprofile\")\n    Renderer(\"renderer\", \"volumecomponents\", \"string\", \"lv_volumecomponents\")\n\n    # -- Image --\n    Image(\"image\", \"background\", \"string\", \"lv_background\")\n    Image(\"image\", \"backgroundchannels\", \"string\", \"lv_backgroundchannels\")\n    Image(\"image\", \"backgroundmatte\", \"bool\", \"lv_backgroundmatte\")\n    Image(\"image\", \"batchmode\", \"bool\", \"lv_imagebatchmode\")\n    Image(\"image\", \"bgenable\", \"bool\", \"lv_bgenable\")\n    Image(\"image\", \"bgscale\", \"bool\", \"lv_bgscale\")\n    Image(\"image\", \"bgzscale\", \"float\", \"lv_bgzscale\")\n    Image(\"image\", \"bucket\", \"int\", \"lv_bucketsize\")\n    Image(\"image\", \"bucketthreadcolor\", \"bool\", \"lv_bucketthreadcolor\")\n    Image(\"image\", \"checkpointcachesize\", \"int\", \"lv_checkpointcachesize\")\n    Image(\"image\", \"checkpointname\", \"string\", \"lv_checkpointname\")\n    Image(\"image\", \"checkpointperiod\", \"float\", \"lv_checkpointperiod\")\n    Image(\"image\", \"colorlimit\", \"float\", \"lv_colorlimit\")\n    Image(\"image\", \"colorlimitdecay\", \"float\", \"lv_colorlimitdecay\")\n    Image(\"image\", \"colorlimitdepth\", \"int\", \"lv_colorlimitdepth\")\n    Image(\"image\", \"decorrelatedof\", \"bool\", \"lv_decorrelatedof\")\n    Image(\"image\", \"exrdatawindowpadding\", \"int\", \"lv_exrdatawindowpadding\")\n    Image(\"image\", \"exrdatawindowplanes\", \"string\", \"lv_exrdatawindowplanes\")\n    Image(\"image\", \"exrdatawindowthreshold\", \"float\", \"lv_exrdatawindowthreshold\")\n    Image(\"image\", \"iprbucket\", \"int\", \"lv_iprbucketsize\")\n    Image(\"image\", \"jitter\", \"float\", \"lv_jitter\")\n    Image(\"image\", \"matchdeeppixelfilter\", \"bool\", \"lv_matchdeeppixelfilter\")\n    Image(\"image\", \"opacitylimit\", \"float\", \"lv_opacitylimit\")\n    Image(\"image\", \"opacitythresh\", \"float\", \"lv_opacitythresh\")\n    Image(\"image\", \"overridecheckpointname\", \"bool\", \"lv_overridecheckpointname\")\n    Image(\"image\", \"randomseed\", \"int\", \"lv_randomseed\")\n    Image(\"image\", \"readcheckpoint\", \"bool\", \"lv_readcheckpoint\")\n    Image(\"image\", \"resolution\", \"int\", \"lv_uvunwrapres\")\n    Image(\"image\", \"samplelock\", \"bool\", \"lv_samplelock\")\n    Image(\"image\", \"samples\", \"int\", \"lv_samples\", skipdefault=False)\n    Image(\"image\", \"saveoptions\", \"string\", \"lv_saveoptions\")\n    Image(\"image\", \"setexrdatawindow\", \"bool\", \"lv_setexrdatawindow\")\n    Image(\"image\", \"subpixel\", \"bool\", \"lv_subpixel\")\n    Image(\"image\", \"transparent\", \"bool\", \"lv_transparent\")\n    Image(\"image\", \"transparentsamples\", \"int\", \"lv_transparentsamples\")\n    Image(\"image\", \"writecheckpoint\", \"bool\", \"lv_writecheckpoint\")\n\n    # -- Photon --\n    Photon(\"photon\", \"photoncfile\", \"string\", \"lv_photoncfile\")\n    Photon(\"photon\", \"photoncount\", \"int\", \"lv_photoncount\")\n    Photon(\"photon\", \"photongfile\", \"string\", \"lv_photongfile\")\n    Photon(\"photon\", \"photonminratio\", \"float\", \"lv_photonminratio\")\n\n    # -- Camera --\n    Camera(\"camera\", \"curvature\", \"float\", \"lv_curvature\")\n    Camera(\"camera\", \"dofaspect\", \"float\", \"lv_dofaspect\")\n    Camera(\"camera\", \"field\", \"int\", \"lv_field\")\n    Camera(\"camera\", \"shuttershape\", \"string\", \"lv_shuttershape\")\n\n    # -- Object --\n    Object(\"name\", \"string\", \"object:name\")\n    Object(\"biasnormal\", \"bool\", \"lv_biasnormal\")\n    Object(\"bumpraydisplace\", \"bool\", \"lv_bumpraydisplace\")\n    Object(\"categories\", \"string\", \"categories\")\n    Object(\"coving\", \"int\", \"lv_coving\")\n    Object(\"curvesurface\", \"bool\", \"lv_curvesurface\")\n    Object(\"curveunitst\", \"bool\", \"lv_curveunitst\")\n    Object(\"decoupleindirect\", \"bool\", \"lv_decoupleindirect\")\n    Object(\"diffuselimit\", \"int\", \"lv_pbrdiffuselimit\")\n    Object(\"diffuselimit\", \"int\", \"lv_diffuselimit\")\n    Object(\"diffusequality\", \"float\", \"lv_diffusequality\")\n    Object(\"displacebound\", \"float\", \"lv_displacebound\")\n    Object(\"displacespace\", \"string\", \"lv_displacespace\")\n    Object(\"dorayvariance\", \"bool\", \"lv_dorayvariance\")\n    Object(\"emitillum\", \"bool\", \"lv_emitillum\")\n    Object(\"filter\", \"string\", \"lv_volumefilter\")\n    Object(\"filterwidth\", \"float\", \"lv_volumefilterwidth\")\n    Object(\"flatness\", \"float\", \"lv_flatness\")\n    Object(\"flattenprocedural\", \"int\", \"lv_flattenprocedural\")\n    Object(\"flattentoroot\", \"int\", \"lv_flattentoroot\")\n    Object(\"geofilterwidth\", \"float\", \"lv_geofilterwidth\")\n    Object(\"geometrygroup\", \"string\", \"lv_geometrygroup\")\n    Object(\"gienable\", \"bool\", \"lv_gienable\")\n    Object(\"gierror\", \"float\", \"lv_gierror\")\n    Object(\"gifile\", \"string\", \"lv_gifile\")\n    Object(\"gifilemode\", \"string\", \"lv_gifilemode\")\n    Object(\"gimaxspacing\", \"float\", \"lv_gimaxspacing\")\n    Object(\"giminspacing\", \"float\", \"lv_giminspacing\")\n    Object(\"gisample\", \"int\", \"lv_gisample\")\n    Object(\"globalquality\", \"float\", \"lv_globalquality\")\n    Object(\"heightfieldtess\", \"int\", \"lv_heightfieldtess\")\n    Object(\"indirectvariance\", \"float\", \"lv_indirectvariance\")\n    Object(\"jitcurves\", \"bool\", \"lv_jitcurves\")\n    Object(\"lightcategories\", \"string\", \"lightcategories\")\n    Object(\"lightmask\", \"oplist\", \"lightmask\")\n    Object(\"lpetag\", \"string\", \"lv_lpetag\")\n    Object(\"matte\", \"bool\", \"lv_matte\")\n    Object(\"maxindirectraysamples\", \"int\", \"lv_maxindirectraysamples\")\n    Object(\"maxraysamples\", \"int\", \"lv_maxraysamples\")\n    Object(\"metavolume\", \"bool\", \"lv_metavolume\")\n    Object(\"minindirectraysamples\", \"int\", \"lv_minindirectraysamples\")\n    Object(\"minraysamples\", \"int\", \"lv_minraysamples\")\n    Object(\"motionfactor\", \"float\", \"lv_motionfactor\")\n    Object(\"osd_fvarinterp\", \"int\", \"lv_osd_fvarinterp\")\n    Object(\"osd_quality\", \"float\", \"lv_osd_quality\")\n    Object(\"osd_vtxinterp\", \"int\", \"lv_osd_vtxinterp\")\n    Object(\"overridedetail\", \"bool\", \"lv_overridedetail\")\n    Object(\"pack_mergefragments\", \"bool\", \"lv_pack_mergefragments\")\n    Object(\"pack_refineoptions\", \"string\", \"lv_pack_refineoptions\")\n    Object(\"pack_sequencesubsteps\", \"int\", \"lv_pack_sequencesubsteps\")\n    Object(\"packinstance\", \"bool\", \"lv_packinstance\")\n    Object(\"photonmodifier\", \"int\", \"lv_photonmodifier\")\n    Object(\"pointscale\", \"float\", \"lv_pointscale\")\n    Object(\"procuseroottransform\", \"bool\", \"lv_procuseroottransform\")\n    Object(\"pscalediameter\", \"bool\", \"lv_pscalediameter\")\n    Object(\"raypredice\", \"int\", \"lv_raypredice\")\n    Object(\"rayshade\", \"bool\", \"lv_rayshade\")\n    Object(\"rayweight\", \"float\", \"lv_rayweight\")\n    Object(\"redice\", \"bool\", \"lv_redice\")\n    Object(\"reflectcategories\", \"string\", \"reflectcategories\")\n    Object(\"reflectionquality\", \"float\", \"lv_reflectionquality\")\n    Object(\"reflectlimit\", \"int\", \"lv_pbrreflectlimit\")\n    Object(\"reflectlimit\", \"int\", \"lv_reflectlimit\")\n    Object(\"reflectmask\", \"oplist\", \"reflectmask\")\n    Object(\"refractcategories\", \"string\", \"refractcategories\")\n    Object(\"refractionquality\", \"float\", \"lv_refractionquality\")\n    Object(\"refractlimit\", \"int\", \"lv_pbrrefractlimit\")\n    Object(\"refractlimit\", \"int\", \"lv_refractlimit\")\n    Object(\"refractmask\", \"oplist\", \"refractmask\")\n    Object(\"renderable\", \"bool\", \"lv_renderable\")\n    Object(\"renderpoints\", \"int\", \"lv_renderpoints\")\n    Object(\"renderpointsas\", \"int\", \"lv_renderpointsas\")\n    Object(\"rendersubd\", \"bool\", \"lv_rendersubd\")\n    Object(\"rendersubdcurves\", \"bool\", \"lv_rendersubdcurves\")\n    Object(\"rendervisibility\", \"string\", \"lv_rendervisibility\")\n    Object(\"rmbackface\", \"bool\", \"lv_rmbackface\")\n    Object(\"samplecoving\", \"bool\", \"lv_samplecoving\")\n    Object(\"samplecovingexpansion\", \"float\", \"lv_samplecovingexpansion\")\n    Object(\"samplingquality\", \"float\", \"lv_samplingquality\")\n    Object(\"shadingquality\", \"float\", \"lv_shadingquality\")\n    Object(\"sharedisplace\", \"bool\", \"lv_sharedisplace\")\n    Object(\"smoothP\", \"bool\", \"lv_smoothP\")\n    Object(\"smoothcolor\", \"bool\", \"lv_smoothcolor\")\n    Object(\"ssslimit\", \"int\", \"lv_ssslimit\")\n    Object(\"sssquality\", \"float\", \"lv_sssquality\")\n    Object(\"subdgroup\", \"string\", \"lv_subdgroup\")\n    Object(\"subdstyle\", \"string\", \"lv_subdstyle\")\n    Object(\"traceblur\", \"bool\", \"lv_traceblur\")\n    Object(\"truedisplace\", \"bool\", \"lv_truedisplace\")\n    Object(\"usenforpoints\", \"bool\", \"lv_usenforpoints\")\n    Object(\"variance\", \"float\", \"lv_variance\")\n    Object(\"velocitybound\", \"float\", \"lv_velocitybound\")\n    Object(\"velocityquality\", \"float\", \"lv_velocityquality\")\n    Object(\"volumedensity\", \"float\", \"lv_volumedensity\")\n    Object(\"volumedpdzfov\", \"bool\", \"lv_volumedpdzfov\")\n    Object(\"volumeiso\", \"bool\", \"lv_volumeiso\")\n    Object(\"volumeisodefault\", \"bool\", \"lv_volumeisodefault\")\n    Object(\"volumelimit\", \"int\", \"lv_volumelimit\")\n    Object(\"volumenormal\", \"bool\", \"lv_volumenormal\")\n    Object(\"volumequality\", \"float\", \"lv_volumequality\")\n    Object(\"volumesamples\", \"int\", \"lv_volumesamples\")\n    Object(\"volumesamplingchannel\", \"string\", \"lv_volumesamplingchannel\")\n    Object(\"volumeshadowsteprate\", \"float\", \"lv_volumeshadowsteprate\")\n    Object(\"volumesteprate\", \"float\", \"lv_volumesteprate\")\n    Object(\"volumesurface\", \"bool\", \"lv_volumesurface\")\n    Object(\"volumeuniform\", \"bool\", \"lv_volumeuniform\")\n    Object(\"volumeuniformflipthresh\", \"float\", \"lv_volumeuniformflipthresh\")\n    Object(\"volumeuniformtype\", \"int\", \"lv_volumeuniformtype\")\n    Object(\"volumeupvector\", \"float\", \"lv_volumeupvector\")\n    Object(\"volumezerothresh\", \"float\", \"lv_volumezerothresh\")\n\n    # -- Light --\n    Light(\"__nondiffuse\", \"bool\", \"lv_nondiffuse\")\n    Light(\"__nonspecular\", \"bool\", \"lv_nonspecular\")\n    Light(\"activeradius\", \"float\", \"lv_activeradius\")\n    Light(\"areafullsphere\", \"bool\", \"lv_areafullsphere\")\n    Light(\"areamap\", \"string\", \"lv_areamap\")\n    Light(\"areashape\", \"string\", \"lv_areashape\")\n    Light(\"areasize\", \"float\", \"lv_areasize\")\n    Light(\"envangle\", \"float\", \"lv_envangle\")\n    Light(\"envintensity\", \"float\", \"lv_envintensity\")\n    Light(\"importancelevels\", \"int\", \"lv_importancelevels\")\n    Light(\"lightcache\", \"bool\", \"lv_lightcache\")\n    Light(\"photontarget\", \"string\", \"lv_photontarget\")\n    Light(\"photonweight\", \"float\", \"lv_photonweight\")\n    Light(\"raybackground\", \"bool\", \"lv_raybackground\")\n    Light(\"shadowcategories\", \"string\", \"shadowcategories\")\n    Light(\"shadowmask\", \"oplist\", \"shadowmask\")\n\n    # -- Fog --\n    Fog(\"name\", \"string\", \"object:name\")\n    Fog(\"categories\", \"string\", \"categories\")\n    Fog(\"lightcategories\", \"string\", \"lightcategories\")\n    Fog(\"lightmask\", \"oplist\", \"lightmask\")\n\n    # -- Geometry --\n    Geometry(\"computeN\", \"bool\", \"lv_computeN\")\n    Geometry(\"segmentattrs\", \"string\", \"lv_segmentattrs\")\n    Geometry(\"timescale\", \"float\", \"lv_motiontimescale\")\n    Geometry(\"volumevelocitynames\", \"string\", \"lv_volumevelocitynames\")\n\n    # -- Deep --\n    Deep(\"shadow\", \"OpenEXR.attributes\", \"string\", \"lv_image_exr_attributes\")\n    Deep(\"shadow\", \"compositing\", \"bool\", \"lv_dsmcompositing\")\n    Deep(\"shadow\", \"deepcompression\", \"int\", \"lv_dsmcompression\")\n    Deep(\"shadow\", \"depth_interp\", \"string\", \"lv_dsmdepthinterp\")\n    Deep(\"shadow\", \"depth_mode\", \"string\", \"lv_dsmdepthmode\")\n    Deep(\"shadow\", \"depth_planes\", \"string\", \"lv_dsmdepthplanes\")\n    Deep(\"shadow\", \"filename\", \"string\", \"lv_dsmfilename\", ['$HIP/dsm.rat'])\n    Deep(\"shadow\", \"mipmaps\", \"bool\", \"lv_dsmmipmaps\")\n    Deep(\"shadow\", \"ofsize\", \"int\", \"lv_dsmofsize\")\n    Deep(\"shadow\", \"ofstorage\", \"string\", \"lv_dsmofstorage\")\n    Deep(\"shadow\", \"pzstorage\", \"string\", \"lv_dsmpzstorage\")\n    Deep(\"shadow\", \"zbias\", \"float\", \"lv_dsmzbias\")\n\n    # -- Deep --\n    Deep(\"camera\", \"OpenEXR.attributes\", \"string\", \"lv_image_exr_attributes\")\n    Deep(\"camera\", \"compositing\", \"bool\", \"lv_dcmcompositing\")\n    Deep(\"camera\", \"deepcompression\", \"int\", \"lv_dcmcompression\")\n    Deep(\"camera\", \"depth_interp\", \"string\", \"lv_dcmdepthinterp\")\n    Deep(\"camera\", \"depth_mode\", \"string\", \"lv_dcmdepthmode\")\n    Deep(\"camera\", \"depth_planes\", \"string\", \"lv_dcmdepthplanes\")\n    Deep(\"camera\", \"filename\", \"string\", \"lv_dcmfilename\", ['$HIP/dcm.rat'])\n    Deep(\"camera\", \"mipmaps\", \"bool\", \"lv_dcmmipmaps\")\n    Deep(\"camera\", \"ofsize\", \"int\", \"lv_dcmofsize\")\n    Deep(\"camera\", \"ofstorage\", \"string\", \"lv_dcmofstorage\")\n    Deep(\"camera\", \"pzstorage\", \"string\", \"lv_dcmpzstorage\")\n    Deep(\"camera\", \"zbias\", \"float\", \"lv_dcmzbias\")\n\n    # -- Measure --\n    Measure(\"nonraster\", \"offscreenquality\", \"float\", \"lv_measureoffscreenquality\", skipdefault=False)\n    Measure(\"nonraster\", \"zimportance\", \"float\", \"lv_measurezimportance\", skipdefault=False)\n\n    # -- Bokeh --\n    Bokeh(\"file\", \"-f\", \"string\", \"lv_bokehfile\")\n    Bokeh(\"file\", \"-r\", \"float\", \"lv_bokehrotation\")\n\n    # -- IPlane --\n    IPlane(\"dither\", \"float\", \"lv_dither\")\n    IPlane(\"gain\", \"float\", \"lv_gain\")\n    IPlane(\"gamma\", \"float\", \"lv_gamma\")\n    IPlane(\"lightexport\", \"string\", \"lv_lightexport\", mainimage=False)\n    IPlane(\"pfilter\", \"string\", \"lv_pfilter\")\n    IPlane(\"quantize\", \"string\", \"lv_quantize\")\n    IPlane(\"sfilter\", \"string\", \"lv_sfilter\")\n    IPlane(\"whitepoint\", \"float\", \"lv_whitepoint\")\n\n    # -- ImageOption --\n    ImageOption(\"Cineon.cingamma\", \"float\", \"lv_image_cineon_gamma\")\n    ImageOption(\"Cineon.cinlut\", \"string\", \"lv_image_cineon_lut\")\n    ImageOption(\"Cineon.cinspace\", \"string\", \"lv_image_cineon_space\")\n    ImageOption(\"Cineon.cinwhite\", \"int\", \"lv_image_cineon_whitepoint\")\n    ImageOption(\"IPlay.bgimage\", \"string\", \"lv_image_mplay_bgimage\")\n    ImageOption(\"IPlay.direction\", \"string\", \"lv_image_mplay_direction\")\n    ImageOption(\"IPlay.gamma\", \"float\", \"lv_image_mplay_gamma\")\n    ImageOption(\"IPlay.houdiniportnum\", \"int\", \"mplay:port\")\n    ImageOption(\"IPlay.label\", \"string\", \"lv_image_mplay_label\")\n    ImageOption(\"IPlay.lut\", \"string\", \"lv_image_mplay_lut\")\n    ImageOption(\"IPlay.sockethost\", \"string\", \"lv_image_mplay_sockethost\")\n    ImageOption(\"IPlay.socketport\", \"int\", \"lv_image_mplay_socketport\")\n    ImageOption(\"JPEG.quality\", \"int\", \"lv_image_jpeg_quality\")\n    ImageOption(\"OpenEXR.attributes\", \"string\", \"lv_image_exr_attributes\")\n    ImageOption(\"OpenEXR.compression\", \"string\", \"lv_image_exr_compression\")\n    ImageOption(\"OpenEXR.dwa_compression\", \"float\", \"lv_image_exr_dwa_level\")\n    ImageOption(\"OpenEXR.enablepostprocess\", \"bool\", \"lv_image_exr_postprocess\")\n    ImageOption(\"OpenEXR.storage\", \"string\", \"lv_image_exr_storage\")\n    ImageOption(\"OpenEXR.tilex\", \"int\", \"lv_image_exr_tilex\")\n    ImageOption(\"OpenEXR.tiley\", \"int\", \"lv_image_exr_tiley\")\n    ImageOption(\"PNG.frompremult\", \"string\", \"lv_image_png_frompremult\")\n    ImageOption(\"RAT.color\", \"string\", \"lv_image_rat_color\")\n    ImageOption(\"RAT.compression\", \"string\", \"lv_image_rat_compression\")\n    ImageOption(\"RAT.makemips\", \"bool\", \"lv_image_rat_makemips\")\n    ImageOption(\"TIFF.compression\", \"string\", \"lv_image_tiff_compression\")\n    ImageOption(\"TIFF.predictor\", \"string\", \"lv_image_tiff_predictor\")\n    ImageOption(\"artist\", \"string\", \"lv_image_artist\")\n    ImageOption(\"comment\", \"string\", \"lv_image_comment\")\n    ImageOption(\"hostname\", \"string\", \"lv_image_hostname\")\n\n",
			"file": "src/houdini/soho/LSDmantra.py",
			"file_size": 21971,
			"file_write_time": 132458908074150137,
			"settings":
			{
				"buffer_size": 21971,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#\n# PROPRIETARY INFORMATION.  This software is proprietary to\n# Side Effects Software Inc., and is not to be reproduced,\n# transmitted, or disclosed in any way without written permission.\n#\n# Produced by:\n#       Side Effects Software Inc\n#       123 Front Street West, Suite 1401\n#       Toronto, Ontario\n#       Canada   M5J 2M2\n#       416-504-9876\n#\n# NAME:         LSDmisc.py ( Python )\n#\n# COMMENTS:     Misc functions used for LSD generation\n#\n\nimport os, sys, time\nimport soho, hou\nimport LSDsettings\nimport LSDhooks\nimport LSDgeo\nfrom LSDapi import *\nfrom soho import SohoParm\nimport posixpath\n\nFeature = LSDsettings.getFeature\nFPS = 24\nFPSinv = 1.0 / FPS\nSequenceNumber  = 0\nSequenceLength  = 1\nCameraBlur      = False\nCameraShutter   = 0\nCameraShutterF  = 0             # Frame based shutter\nCameraDelta     = 0\nCameraStyle     = 'trailing'\nInlineGeoDefault = [0]          # By default, outline geometry\n\n# State information for saving external resources\nPipeStream      = True          # Whether SOHO is writing to a pipe\nExternalSessionId = ''          # A string based on the frame number/hip file\nExternalSharedSessionId = ''    # A string based on the hip file alone\nTmpSharedStorage = ''        # Directory used to store side-car files\nTmpLocalStorage = ''     # Directory used to store piped temporary files\n\nheaderParms = {\n    \"ropname\"           : SohoParm(\"object:name\", \"string\", key=\"ropname\"),\n    \"hip\"               : SohoParm(\"$HIP\",        \"string\", key=\"hip\"),\n    \"hipname\"           : SohoParm(\"$HIPNAME\",    \"string\", key=\"hipname\"),\n    \"seqnumber\"         : SohoParm(\"state:sequencenumber\", \"int\",\n                                        key=\"seqnumber\"),\n    \"seqlength\"         : SohoParm(\"state:sequencelength\", \"int\",\n                                        key=\"seqlength\"),\n\n    \"soho_program\"      : SohoParm(\"soho_program\", \"string\"),\n    \"hver\"              : SohoParm(\"state:houdiniversion\", \"string\",\n                                        [\"9.0\"], False, key=\"hver\"),\n    \"lv_hippath\"        : SohoParm(\"lv_hippath\", \"string\", key=\"lv_hippath\"),\n    \"lv_verbose\"        : SohoParm(\"lv_verbose\", \"int\"),\n    \"houdinipid\"        : SohoParm(\"soho:houdinipid\", \"int\", key=\"houdinipid\"),\n    \"pipepid\"           : SohoParm(\"soho:pipepid\", \"int\", key=\"pipepid\"),\n    \"pipestream\"        : SohoParm(\"soho:pipestream\", \"int\", key=\"pipestream\"),\n    \"tmpsharedstorage\"  : SohoParm(\"lv_tmpsharedstorage\", \"string\",\n                                    key=\"tmpsharedstorage\"),\n    \"tmplocalstorage\"   : SohoParm(\"lv_tmplocalstorage\", \"string\",\n                                    key=\"tmplocalstorage\"),\n}\n\nobjXformMotion = [\n    SohoParm('xform_motionsamples',     'int', [2], False),\n]\n\nobjGeoMotion = [\n    SohoParm('geo_motionsamples',       'int', [1], False),\n    SohoParm('geo_velocityblur',        'int', [0], False),\n\tSohoParm('geo_accelattribute',\t\t'string', [\"accel\"], False),\n]\n\n\ndef fullFilePath(file):\n    path = sys.path\n    for dir in path:\n        full = os.path.join(dir, file)\n        try:\n            if os.stat(full):\n                return full\n        except:\n            pass\n    return file\n\ndef absoluteObjectPath(obj_rel_to, now, path):\n    if posixpath.isabs(path):\n        return path\n    rel_to = obj_rel_to.getDefaultedString(\"object:name\", now, [''])[0]\n    return posixpath.normpath(posixpath.join(rel_to, path))\n        \ndef header(now, propdefs):\n    global      PipeStream, TmpSharedStorage, TmpLocalStorage\n    global      ExternalSessionId, ExternalSharedSessionId\n    global      SequenceNumber, SequenceLength\n    global      InlineGeoDefault\n\n    LSDhooks.call('pre_header', now)\n\n    rop = soho.getOutputDriver()\n    plist = rop.evaluate(headerParms, now)\n    hver = plist[\"hver\"].Value[0]\n    cmd_comment(\"LSD created by Houdini Version: %s\" % hver)\n    cmd_comment(\"Generation Time: %s\" % time.strftime(\"%b %d, %Y at %H:%M:%S\"))\n    soho_program = plist.get('soho_program', None)\n    target  = LSDsettings.theVersion\n    hip     = plist.get('hip', None)\n    hipname = plist.get('hipname', None)\n    ropname = plist.get('ropname', None)\n    tmpsharedstorage = plist.get('tmpsharedstorage', None)\n    tmplocalstorage = plist.get('tmplocalstorage', None)\n    houdinipid = plist['houdinipid'].Value[0]\n    pipepid = plist['pipepid'].Value[0]\n    pipestream = plist.get('pipestream', None)\n    seqnumber = plist.get('seqnumber', None)\n    seqlength = plist.get('seqlength', None)\n    if seqnumber:\n        # The sequence number is the one-based number in the frame sequence\n        # being rendered.\n        SequenceNumber = seqnumber.Value[0]\n    if seqlength:\n        # Number of frames in the sequence being rendered\n        SequenceLength = seqlength.Value[0]\n    if soho_program:\n        cmd_comment(\"    Soho Script: %s\"%fullFilePath(soho_program.Value[0]))\n    if target:\n        cmd_comment(\"  Render Target: %s\" % target)\n    defs = LSDsettings.SettingDefs\n    if len(defs):\n        cmd_comment(\"    Render Defs: %s\" % defs[0])\n        for i in range(1, len(defs)):\n            cmd_comment(\"               : %s\" % defs[i])\n    if hip and hipname:\n        cmd_comment(\"       HIP File: %s/%s, $T=%g, $FPS=%g\" %\n                        (hip.Value[0], hipname.Value[0], now, FPS))\n    if ropname:\n        cmd_comment(\"  Output driver: %s\" % ropname.Value[0])\n\n    cmd_version(hver)\n    if propdefs:\n        # Output property defaults before we output any other settings\n        cmd_defaults(propdefs)\n\n    # Renderer frame graph configuation\n    cmd_config(\"$LAVA_HOME/conf/default.py\")\n\n    cmd_comment(None)\n    cmd_declare('global', 'float', 'global:fps', [FPS])\n    \n    # TODO: do we really need this !?\n    #cmd_hscript('fps %g; tcur %g' % (FPS, now))\n\n    verbose = plist.get('lv_verbose', None)\n    if verbose:\n        cmd_property('renderer', 'verbose', verbose.Value);\n\n    cmd_comment(None)\n\n    if not pipestream:\n        cmd_comment('Unable to determine whether writing to a pipe')\n        PipeStream = True\n    else:\n        PipeStream = (pipestream.Value[0] != 0)\n    \n    if hip:\n        hipvar = hip.Value[0]\n    else:\n        hipvar = \"\"\n    hipvar = rop.getDefaultedString('lv_hippath', now, [hipvar])[0]\n    # Setting the HIP variable in a conditional so users can override\n    # the HIP variable in the .ifd file.\n    cmd_setenv('HIP', '$HIP_OVERRIDE')\n    cmd_if('\"$HIP\" == \"\"')\n    cmd_setenv('HIP', hipvar)\n    cmd_endif()\n\n    def isValidTempDir(path):\n        # Make sure we can either create the sub-directories of the path, or\n        # that the path itself is writeable.\n        if os.path.isdir(path):\n            return os.access(path, os.W_OK)\n        head, tail = os.path.split(path)\n        return isValidTempDir(head) if head else False\n\n    if not tmpsharedstorage:\n        # We still need to create a storage path, so put it in the HIP\n        # directory.  This is where assets will be saved for the LSD.\n        tmpsharedstorage = hou.expandString(\"$HIP/ifds/storage\")\n    else:\n        tmpsharedstorage = tmpsharedstorage.Value[0]\n    if not isValidTempDir(tmpsharedstorage):\n        soho.warning(\"Path specified by lv_tmpsharedstorage is read-only.  %s\" % (\n                    \"this may cause issues with non-inline geometry\"))\n        tmpsharedstorage = hou.expandString(\"$HOUDINI_TEMP_DIR/ifds/storage\")\n\n    if not tmplocalstorage:\n        # We still need to create a storage path, so put it in the\n        # HOUDINI_TEMP_DIR directory.  This is where assets will be saved for\n        # the LSD.\n        tmplocalstorage = hou.expandString(\"$HOUDINI_TEMP_DIR/ifds/storage\")\n    else:\n        tmplocalstorage = tmplocalstorage.Value[0]\n\n\n    # Set the external storage variable set into a conditional so if the\n    # variable is set before mantra is run, that value will be used instead.\n    cmd_if('\"$_TMP_SHARED_STORAGE\" == \"\"')\n    cmd_setenv('_TMP_SHARED_STORAGE', tmpsharedstorage)\n    cmd_endif()\n    cmd_if('\"$_TMP_LOCAL_STORAGE\" == \"\"')\n    cmd_setenv('_TMP_LOCAL_STORAGE', tmplocalstorage)\n    cmd_endif()\n    TmpSharedStorage = tmpsharedstorage # Stash for later\n    TmpLocalStorage = tmplocalstorage   # Stash for later\n\n    frame = now * FPS + 1\n    frame_frac = int((frame%1) * 100)\n    if PipeStream:\n        ExternalSessionId = '%d_%s.%d_%03d' % (\n                pipepid, hipname.Value[0], int(frame), frame_frac)\n        ExternalSharedSessionId = '%d_%s_shared' % (\n                houdinipid, hipname.Value[0])\n    else:\n        ExternalSessionId = '%s.%d_%03d' % (\n                hipname.Value[0], int(frame), frame_frac)\n        ExternalSharedSessionId = '%s_shared' % (hipname.Value[0])\n\n    if os.getenv('MANTRA_DEBUG_INLINE_STORAGE'):\n        # Normally, we want to rely on the lv_inlinestorage parameter (which\n        # defaults to False).  For convenience we can set this variable to\n        # override the setting.  Note that this may impact performance since\n        # Houdini and mantra are able to multi-thread saving/loading\n        # geometry.  This should be used for debugging only.\n        InlineGeoDefault = [1]\n\n    LSDhooks.call('post_header', now)\n\ndef _getBlur(obj, now, shutter=.5, offset=None, style='trailing', allow=1):\n    allow = obj.getDefaultedInt('allowmotionblur', now, [allow])[0]\n    shadowtype = obj.getDefaultedString('shadow_type', now, ['off'])[0]\n    shutter = obj.getDefaultedFloat('shutter', now, [shutter])[0]*FPSinv\n    offset = obj.getDefaultedFloat('shutteroffset', now, [offset])[0]\n    style   = obj.getDefaultedString('motionstyle', now, [style])[0]\n    if style == 'centered':\n        delta = shutter * .5\n    elif style == 'leading':\n        delta = shutter\n    else:\n        delta = 0\n    if offset is not None:\n        # shutterOffset maps -1 to leading blur 0 to center, and +1 to trailing\n        delta -= (offset - 1) * 0.5 * shutter\n   \n    if shadowtype == 'depthmap' and not isPreviewMode():\n        shadowblur = obj.getDefaultedInt('shadowmotionblur', now, [1])[0]\n        if shadowblur == False:\n            allow = False\n    if shutter == 0:\n        allow = False\n    return allow, delta, shutter, offset, style\n\ndef getSharedStoragePath():\n    global TmpSharedStorage\n    if not os.path.isdir(TmpSharedStorage):\n        umask = os.umask(0)\n        try:\n            os.makedirs(TmpSharedStorage)\n        except:\n            TmpSharedStorage =hou.expandString('$HOUDINI_TEMP_DIR/ifds/storage')\n            if not os.path.isdir(TmpSharedStorage):\n                os.makedirs(TmpSharedStorage)\n        os.umask(umask)\n    return TmpSharedStorage\n\ndef getLocalStoragePath():\n    global TmpLocalStorage\n    if not os.path.isdir(TmpLocalStorage):\n        umask = os.umask(0)\n        try:\n            os.makedirs(TmpLocalStorage)\n        except:\n            TmpLocalStorage = hou.expandString('$HOUDINI_TEMP_DIR/ifds/storage')\n            if not os.path.isdir(TmpLocalStorage):\n                os.makedirs(TmpLocalStorage)\n        os.umask(umask)\n    return TmpLocalStorage\n    \ndef initializeMotionBlur(cam, now):\n    #\n    # Initialize motion blur settings from the main camera.\n    #\n    global      CameraShutter, CameraShutterOffset, CameraShutterF\n    global      CameraStyle, CameraDelta, CameraBlur\n    global      FPS, FPSinv\n\n    LSDhooks.call('pre_initialize', cam, now)\n\n    FPS = soho.getDefaultedFloat('state:fps', [24])[0]\n    FPSinv = 1.0 / FPS\n\n    CameraBlur,CameraDelta,CameraShutter,CameraShutterOffset,CameraStyle = \\\n        _getBlur(cam, now, shutter=.5, offset=None, style='trailing', allow=0)\n    CameraShutterF = CameraShutter*FPS\n\ndef ouputMotionBlurInfo(obj,now,required=False):\n    motionInfo = {\n        'xform' : SohoParm('xform_motionsamples', 'int', [2], not required, key='xform'),\n        'geo'   : SohoParm('geo_motionsamples',   'int', [1], not required, key='geo')\n    }\n    \n    # Write out the number of transform and geometry motion samples\n    # if motion blur is enabled.\n    if CameraBlur:\n        plist = obj.evaluate(motionInfo, now)\n        xform = plist.get('xform', None)\n        geo = plist.get('geo', None)\n        nseg = xform.Value[0] if xform else 1\n        if nseg > 1:\n            cmd_property('object', 'xformsamples', [nseg])\n        nseg = geo.Value[0] if geo else 1\n        if nseg > 1:\n            cmd_property('object', 'geosamples', [nseg])\n\ndef setCameraBlur(cam, now):\n    #\n    # For each frame rendered, the camera may disable motion blur\n    #\n    global      CameraBlur\n    CameraBlur,delta,shutter,offset,style = _getBlur(cam, now,\n                                            shutter=CameraShutterF,\n                                            offset=CameraShutterOffset,\n                                            style=CameraStyle,\n                                            allow=0)\n\ndef _fillTime(now, nseg, delta, shutter):\n    t0 = now - delta\n    t1 = t0 + shutter\n    times = []\n    tinc = (t1 - t0)/float(nseg-1)\n    for i in xrange(nseg):\n        times.append(t0)\n        t0 += tinc\n    return times\n\ndef xform_mbsamples(obj, now):\n    times = [now]\n    if CameraBlur:\n        allowmb,delta,shutter,offset,style = _getBlur(obj, now,\n                                                shutter=CameraShutterF,\n                                                offset=CameraShutterOffset,\n                                                style=CameraStyle,\n                                                allow=1)\n        if allowmb:\n            plist = obj.evaluate(objXformMotion, now)\n            nseg  = plist[0].Value[0]\n            if allowmb and nseg > 1:\n                times = _fillTime(now, nseg, delta, shutter)\n    return times\n\ndef obj_shutter_open_close(obj, now):\n    times = [0, 0]\n    if CameraBlur:\n        allowmb,delta,shutter,offset,style = _getBlur(obj, now,\n                                                shutter=CameraShutterF,\n                                                offset=CameraShutterOffset,\n                                                style=CameraStyle,\n                                                allow=1)\n        if allowmb:\n            times = [-delta*FPS, (-delta+shutter)*FPS]\n    return times\n\ndef geo_mbsamples(obj, now):\n    times = [now]\n    vblur = False\n    accel_attrib = \"\"\n    nseg = 0\n    if CameraBlur:\n        allowmb,delta,shutter,offset,style = _getBlur(obj, now,\n                                                shutter=CameraShutterF,\n                                                offset=CameraShutterOffset,\n                                                style=CameraStyle,\n                                                allow=1)\n        if allowmb:\n            plist = obj.evaluate(objGeoMotion, now)\n            nseg  = plist[0].Value[0]\n            vblur = plist[1].Value[0]\n            accel_attrib = plist[2].Value[0]\n            if vblur:\n                if vblur > 1:\t# Acceleration blur\n                    nseg = max(2, nseg)\n                else:           # Plain velocity blur\n                    nseg = 2\n                    accel_attrib = \"\"\n                times = _fillTime(now, 2, delta, shutter)\n            elif nseg > 1:\n                times = _fillTime(now, nseg, delta, shutter)\n    return (times, vblur, accel_attrib, nseg)\n\ndef objecthandle(obj, seg=0):\n    name = \"lv_handle%d\" % seg\n    handle = obj.getData(name)\n    if handle == None:\n        if seg != 0:\n            handle = '\"%s-%d\"' % (obj.getName(), seg)\n        else:\n            handle = '\"%s\"' % obj.getName()\n        obj.storeData(name, handle)\n    return handle\n\ndef isPreviewMode():\n    mode = soho.getDefaultedString('state:previewmode', ['default'])[0]\n    return mode != 'default'\n",
			"file": "src/houdini/soho/LSDmisc.py",
			"file_size": 15617,
			"file_write_time": 132458908196348039,
			"settings":
			{
				"buffer_size": 15617,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/overrides/RenderViewer",
			"settings":
			{
				"buffer_size": 549,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/overrides/ViewportRender",
			"settings":
			{
				"buffer_size": 356,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/overrides/ViewportCameraRender",
			"settings":
			{
				"buffer_size": 328,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/overrides/RenderState",
			"settings":
			{
				"buffer_size": 521,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/overrides/RenderCOP",
			"settings":
			{
				"buffer_size": 242,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/overrides/RenderCommand",
			"settings":
			{
				"buffer_size": 253,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#\n# PROPRIETARY INFORMATION.  This software is proprietary to\n# Side Effects Software Inc., and is not to be reproduced,\n# transmitted, or disclosed in any way without written permission.\n#\n# Produced by:\n#       Side Effects Software Inc\n#       123 Front Street West, Suite 1401\n#       Toronto, Ontario\n#       Canada   M5J 2M2\n#       416-504-9876\n#\n# NAME:         LSDsettings.py ( Python )\n#\n# COMMENTS:     Load up settings dependent on what render target was\n#               specified.\n#\n#               The LSD keyword for the parameter is stored in the\n#               Key field of the SohoParm.\n#\n\nimport hou, soho\nimport sys, os\nimport hutil.json\nfrom soho import SohoParm\nfrom LSDapi import *\nimport LSDmisc\nimport LSDhooks\nimport LSDmantra\n\nclass Settings:\n    def __init__(self):\n        self.Global = []\n        self.Object = []\n        self.Light = []\n        self.Fog = []\n        self.Geometry = []\n\n        self.DeepResolver = {}\n        self.Measure = {}\n        self.Bokeh = {}\n\n        self.MPlane = []        # Main image plane\n        self.IPlane = []        # Auxilliary image plane\n        self.IOption = []       # Image format options\n\n        self.GenerateOpId = False\n        self.ShadowMap = False\n        self.GenerateMaterialname = False\n        self.MatteOverrides = {}        # Objects forced to be matte\n        self.PhantomOverrides = {}      # Objects forced to be phantom\n\n        self.MissingWranglers = {}\n        self.SavedMaterials = {}         # Material shops already written out\n        self.SavedBundles = {}           # Bundles already written out\n        self.UVHiddenObjects = {}\n        self.ParsedStyleSheets = {}\n\n        self.Features = {}\n\n_Settings = Settings()\nSettingDefs = []\n\n# Order versions in descending order\ntheVersion = 'lava%d.%d' % (hou.applicationVersion()[0], hou.applicationVersion()[1])\n\n_UserAttributes = {\n    'lv_username'       :SohoParm('lv_username%d', 'string', [''], False,\n                                    key='lv_username'),\n    'lv_usertype'       :SohoParm('lv_usertype%d', 'string', [''], False,\n                                    key='lv_usertype'),\n    'lv_userint'        :SohoParm('lv_userint%d', 'real', [0], False,\n                                    key='lv_userint'),\n    'lv_userscalar'     :SohoParm('lv_userscalar%d', 'real', [0], False,\n                                    key='lv_userscalar'),\n    'lv_user3tuple'     :SohoParm('lv_user3tuple%d', 'real', [0,0,0], False,\n                                    key='lv_user3tuple'),\n    'lv_user4tuple'     :SohoParm('lv_user4tuple%d', 'real', [0,0,0,0], False,\n                                    key='lv_user4tuple'),\n    'lv_user9tuple'     :SohoParm('lv_user9tuple%d', 'real',\n                                    [1,0,0, 0,1,0, 0,0,1], False,\n                                    key='lv_user9tuple'),\n    'lv_user16tuple'    :SohoParm('lv_user16tuple%d', 'real',\n                                    [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1], False,\n                                    key='lv_user16tuple'),\n    'lv_userstring'     :SohoParm('lv_userstring%d', 'string', [''], False,\n                                    key='lv_userstring'),\n}\n\ndef _outputUserAttribute(i, obj, now):\n    for s in _UserAttributes:\n        _UserAttributes[s].setIndex(i)\n    plist = obj.evaluate(_UserAttributes, now)\n    token = plist['lv_username'].Value[0]\n    if not token:\n        return\n    type = plist['lv_usertype'].Value[0]\n    # Types (aliases) expected:\n    #   real            (float)\n    #   bool\n    #   int             (integer)\n    #   vector2\n    #   vector3         (vector)\n    #   vector4\n    #   matrix3\n    #   matrix4         (matrix)\n    #   string\n    if not type:\n        return\n    if type == 'string':\n        value = plist['lv_userstring'].Value\n    elif type == 'int':\n        value = plist['lv_userint'].Value\n    elif type == 'float':\n        value = plist['lv_userscalar'].Value\n    elif type == 'vector':\n        value = plist['lv_user3tuple'].Value\n    elif type == 'vector4':\n        value = plist['lv_user4tuple'].Value\n    elif type == 'matrix3':\n        value = plist['lv_user9tuple'].Value\n    elif type == 'matrix':\n        value = plist['lv_user16tuple'].Value\n    else:\n        return\n    cmd_declare('object', type, token, value)\n\ndef clearLists():\n    global      _Settings\n    _Settings = Settings()\n\ndef getWrangler(obj, now, style):\n    wrangler = obj.getDefaultedString(style, now, [''])[0]\n    if not wrangler:\n        return None\n    wname = wrangler\n    wrangler = '%s-lava' % wrangler\n    if style == 'light_wrangler':\n        wrangler = soho.LightWranglers.get(wrangler, None)\n    elif style == 'camera_wrangler':\n        wrangler = soho.CameraWranglers.get(wrangler, None)\n    elif style == 'object_wrangler':\n         wrangler = soho.ObjectWranglers.get(wrangler, None)\n    if not wrangler:\n        if not _Settings.MissingWranglers.has_key(wname):\n            _Settings.MissingWranglers[wname] = True\n            soho.warning('Object %s has an unsupported wrangler (%s)'\n                        % (obj.getName(), wname))\n        return None\n    return wrangler(obj, now, theVersion)\n\ndef addGlobal(style, token, storage, houdini, skipdefault=True):\n    parm = SohoParm(houdini, storage, None, skipdefault, key=token)\n    parm.Style = style\n    _Settings.Global.append(parm)\n\ndef addObject(token, storage, houdini, skipdefault=True):\n    _Settings.Object.append(SohoParm(houdini, storage, None, skipdefault, token))\n\ndef addLight(token, storage, houdini, skipdefault=True):\n    _Settings.Light.append(SohoParm(houdini, storage, None, skipdefault, token))\n\ndef addFog(token, storage, houdini, skipdefault=True):\n    _Settings.Fog.append(SohoParm(houdini, storage, None, skipdefault, token))\n\ndef addGeometry(token, storage, houdini, skipdefault=True):\n    _Settings.Geometry.append(SohoParm(houdini, storage, None, skipdefault, token))\n\ndef addDeepResolver(driver, token, storage, houdini, default=None):\n    if not _Settings.DeepResolver.has_key(driver):\n        _Settings.DeepResolver[driver] = []\n    _Settings.DeepResolver[driver].append(SohoParm(houdini, storage, default,\n                                             default == None, token))\n\ndef addMeasure(driver, token, storage, houdini, skipdefault=True):\n    if not _Settings.Measure.has_key(driver):\n        _Settings.Measure[driver] = []\n    _Settings.Measure[driver].append(SohoParm(houdini, storage, None, skipdefault, token))\n\ndef addBokeh(driver, token, storage, houdini, skipdefault=True):\n    if not _Settings.Bokeh.has_key(driver):\n        _Settings.Bokeh[driver] = []\n    _Settings.Bokeh[driver].append(SohoParm(houdini, storage, None, skipdefault, token))\n\ndef addImagePlane(token, storage, houdini, skipdefault=True, mainimage=True):\n    if mainimage:\n        _Settings.MPlane.append(SohoParm(houdini, storage, None, skipdefault, token))\n    iplane = houdini + '_plane%d'\n    _Settings.IPlane.append(SohoParm(iplane, storage, None, skipdefault, token))\n\ndef addImageOption(token, storage, houdini, skipdefault=True):\n    _Settings.IOption.append(SohoParm(houdini, storage, None, skipdefault, token))\n\ndef hideUVObject(name):\n    _Settings.UVHiddenObjects[name] = True\n\npbrParms = {\n    'pathtype'          : SohoParm('lv_pbrpathtype', 'string', ['diffuse'], True),\n    'raylimiteval'      : SohoParm('lv_raylimiteval', 'string', ['none'], True),\n    'colorlimit'        : SohoParm('lv_colorlimit', 'real', [10], True),\n    'multilight'        : SohoParm('lv_pbrmultilight', 'int', [1], True),\n    'colorspace'        : SohoParm('lv_colorspace', 'string', ['linear'], True),\n}\n\n# Set up keys so that evaluation will index things according to the shader\n# parameter name rather than the houdini name.\ndef _setKeys(plist):\n    for key in plist.keys():\n        plist[key].Key = key\n\ncamXtraParms = {\n    'lv_bokeh'        : SohoParm('lv_bokeh',    'string', ['radial'], False),\n    'lv_numuserattrib': SohoParm('lv_numuserattrib', 'int', [0], True),\n}\n\ndef _isDefaultBokeh(bokeh, plist):\n    if bokeh != 'radial':\n        return False\n    return True\n\ngshaderParms = [\n    SohoParm('lv_lensshader', 'shader', [''], True, shoptype=\"cvex\", key='lensshader'),\n    SohoParm('lv_generatorshader', 'shader', [''], True, shoptype=\"atmosphere\", key='generatorshader'),\n]\n\noshaderParms = [\n    SohoParm('shop_materialpath', 'string', [''], True, key='materialname'),\n    SohoParm('shop_surfacepath',  'shader', [''], True, shoptype=\"surface\", key='surface'),\n    SohoParm('shop_displacepath', 'shader', [''], True, shoptype=\"displace\", key='displace'),\n    SohoParm('lv_matteshader',    'shader', [''], True, shoptype=\"surface\", key='matteshader'),\n    SohoParm('shop_cvexpath',     'shader', [''], True, shoptype=\"cvex\", key='cvex'),\n]\n\nostylesheetParms = [\n    SohoParm('shop_materialstylesheet',  'string', [''], True, key='materialstylesheet'),\n]\n\noshaderSkipParms = {\n    'shop_surfacepath' : SohoParm('shop_disable_surface_shader',  \n                                   'bool', [False], False, key='surface'),\n    'shop_displacepath' : SohoParm('shop_disable_displace_shader', \n                                   'bool', [False], False, key='displace'),\n    'lv_matteshader' : SohoParm('shop_disable_surface_shader',  \n                                   'bool', [False], False, key='matteshader'),\n}\n\noshaderMap = {       \n    'shop_materialpath' : 'surface',\n    'shop_surfacepath'  : 'surface',\n    'shop_photonpath'   : 'surface',\n    'lv_matteshader'    : 'matteshader',\n    'shop_displacepath' : 'displace',\n    'shop_cvexpath'     : 'cvex',\n}\n\nlshaderParms = [\n    SohoParm('shop_lightpath',  'shader', [''], True, shoptype=\"light\", key='shader'),\n    SohoParm('shop_shadowpath', 'shader', [''], True, shoptype=\"lightshadow\", key='shadow'),\n    SohoParm('lv_samplershader','shader', [''], True, shoptype=\"light\", key='samplershader'),\n    SohoParm('lv_tracershader','shader', [''], True, shoptype=\"light\", key='tracershader'),\n    SohoParm('lv_illumshader','shader', [''], True, shoptype=\"surface\", key='illumshader'),\n]\n\nlshaderSkipParms = {\n    'shop_lightpath' : SohoParm('shop_disable_light_shader',  'bool', [False], False, key='shader'),\n    'shop_shadowpath' : SohoParm('shop_disable_shadow_shader', 'bool', [False], False, key='shadow'),\n}\n\nobjXtraParms = {\n    'lv_measure'      : SohoParm('lv_measure',    'string', ['nonraster'],False),\n    'lv_numuserattrib': SohoParm('lv_numuserattrib', 'int', [0], True),\n    'lv_phantom'      : SohoParm('lv_phantom', 'bool',      [0], True),\n}\n\nstylesheetParms = {\n    'declare_stylesheets': SohoParm('declare_stylesheets', 'string', ['*'], False),\n    'apply_stylesheets'  : SohoParm('apply_stylesheets', 'string', [''], False),\n    'declare_bundles'    : SohoParm('declare_bundles', 'int', [0], False)\n}\n\nbakingParms = {\n    'bake_layerexport'             :SohoParm('lv_bake_layerexport',             'int',    [0],          key='bake_layerexport'),\n    'bake_samples'                 :SohoParm('lv_bake_samples',                 'int',    [16],        key='bake_samples'),\n    'bake_tangentnormalflipx'      :SohoParm('lv_bake_tangentnormalflipx',      'int',    [0],          key='bake_tangentnormalflipx'),\n    'bake_tangentnormalflipy'      :SohoParm('lv_bake_tangentnormalflipy',      'int',    [0],          key='bake_tangentnormalflipy'),\n    'bake_tangentnormalincludedisp':SohoParm('lv_bake_tangentnormalincludedisp','int',    [1],          key='bake_tangentnormalincludedisp'),\n    'bake_occlusionbias'           :SohoParm('lv_bake_occlusionbias',           'float',  [0.5],        key='bake_occlusionbias'),\n    'bake_cavitydistance'          :SohoParm('lv_bake_cavitydistance',          'float',  [1.0],        key='bake_cavitydistance'),\n    'bake_cavitybias'              :SohoParm('lv_bake_cavitybias',              'float',  [0.5],        key='bake_cavitybias'),\n    'bake_curvatureocc'            :SohoParm('lv_bake_curvatureocc',            'bool',\t  [0],          key='bake_curvatureocc'),\n    'bake_curvaturesdist'          :SohoParm('lv_bake_curvaturesdist',          'float',  [0.1],        key='bake_curvaturesdist'),\n    'bake_curvaturescale'          :SohoParm('lv_bake_curvaturescale',          'float',  [1.0],        key='bake_curvaturescale'),\n    'bake_curvaturebias'           :SohoParm('lv_bake_curvaturebias',           'float',  [0.5],        key='bake_curvaturebias'),\n}\n\ndef setShadowMap(state):\n    _Settings.ShadowMap = state\n\ndef _isDefaultMeasure(measure, plist):\n    if measure != 'nonraster':\n        return False\n    for p in plist:\n        if p.Key == 'zimportance':\n            if p.Value[0] != 1:\n                return False\n        elif p.Key == 'offscreenquality':\n            if p.Value[0] != 0.25:\n                return False\n        else:\n            return False        # Unexpected parameter\n    return True\n\ndef _outputShaderList(objtype, obj, wrangler, now, shaderParms, skipParms):\n    plist = obj.wrangle(wrangler, shaderParms, now)\n    skiplist = None\n    if skipParms:\n        skiplist = obj.wrangle(wrangler, skipParms, now)\n\n    for parm in plist:\n        skip = False\n        if skiplist and parm.Key in skiplist:\n            skip = skiplist[parm.Key].Value[0]\n        if not skip:\n            if parm.Key == 'materialname':\n                if parm.Value[0] == '':\n                    parm.Value[0] = 'defaultshader'\n                # Convert to full path\n                try:\n                    sop = hou.node(obj.getName())\n                    hou_shop = sop.node(parm.Value[0])\n                    if hou_shop:\n                        parm.Value[0] = hou_shop.path()\n                except:\n                    pass\n                if _Settings.GenerateMaterialname:\n                    cmd_property('object', parm.Key, [parm.Value[0]])\n            else:\n                cmd_shader(objtype, parm.Key, parm.Value[0],\n                        getattr(parm, \"ShopType\", soho.ShopTypeDefault))\n\ndef _getObjectStyleSheets( obj, wrangler, now):\n    stylesheets = []\n    plist = obj.wrangle(wrangler, ostylesheetParms, now)\n    for parm in plist:\n        stylesheet_str = parm.Value[0].strip()\n        if stylesheet_str:\n            stylesheets.append((parm.Key, stylesheet_str))\n    \n    return stylesheets\n\ndef _outputObjectStylesheet(objtype, obj, wrangler, now):\n    stylesheets = _getObjectStyleSheets(obj, wrangler, now)\n    for (parmname, stylesheet) in stylesheets:\n        text_name = \"objstylesheet:\" + obj.getName()\n        cmd_textblock(text_name, stylesheet)\n        cmd_property(objtype, parmname, [\"text:\"+text_name])\n\ndef getBundlesAndMaterialsFromObjectStyleSheet(obj, now, wrangler=None):\n    materials = []\n    bundles = []\n    stylesheets = _getObjectStyleSheets(obj, wrangler, now)\n    for (parmname, stylesheet) in stylesheets:\n        (ss_bundles, ss_mats) = getBundlesAndMaterialsFromStyleSheet(stylesheet)\n        materials.extend(ss_mats)\n        bundles.extend(ss_bundles)\n    return (bundles, materials)\n\ndef getMaterialsFromOverrideSet(override_set, materials, unique_materials):\n    # Look for named material SHOPs.\n    try:\n        material = override_set[\"material\"][\"name\"]\n        # Material may be specified in a short format (just a string), but it\n        # may be in UT_Option format, ie, a dict that has 'type' and 'value'.\n        if isinstance(material, dict):\n            material = material[\"value\"]\n        if material not in unique_materials: \n            unique_materials.add(material)\n            materials.append(material)\n    except:\n        pass\n    # Look for CVEX script SHOPs.\n    try:\n        for category in override_set.values():\n            for value in category.values():\n                try:\n                    material = value[\"script\"][\"node\"]\n                    if material not in unique_materials: \n                        unique_materials.add(material)\n                        materials.append(material)\n                except:\n                    continue\n    except:\n        return\n\ndef getBundlesAndMaterialsFromStyleSheet(stylesheet_string):\n    if _Settings.ParsedStyleSheets.get(stylesheet_string, None) == None:\n        materials = []\n        bundles = []\n        try:\n            stylesheet = hutil.json.object_from_json_data(\n                hutil.json.utf8Loads(stylesheet_string))\n        except:\n            _Settings.ParsedStyleSheets[stylesheet_string] = (bundles, materials)\n            return _Settings.ParsedStyleSheets[stylesheet_string]\n\n        unique_materials = set()\n        unique_bundles = set()\n        styles = stylesheet.get(\"styles\", [])\n        for entry in styles:\n            if entry.has_key(\"overrides\"):\n                getMaterialsFromOverrideSet(entry[\"overrides\"], materials, unique_materials)\n            if entry.has_key(\"target\"):\n                try:\n                    bundle = entry[\"target\"][\"objectBundle\"]\n                    if bundle not in unique_bundles: \n                        unique_bundles.add(bundle)\n                        bundles.append(bundle)\n                except:\n                    continue\n\n        # Output SHOPs referenced in shared override sets.\n        override_sets = stylesheet.get(\"overrideDefinitions\", {})\n        for entry in override_sets.values():\n            getMaterialsFromOverrideSet(entry, materials, unique_materials)\n\n        # Output SHOPs referenced in shared scripts.\n        shared_scripts = stylesheet.get(\"scriptDefinitions\", {})\n        for entry in shared_scripts.values():\n            try:\n                material = entry[\"node\"]\n                if material not in unique_materials: \n                    unique_materials.add(material)\n                    materials.append(material)\n            except:\n                continue\n\n        _Settings.ParsedStyleSheets[stylesheet_string] = (bundles, materials)\n\n    return _Settings.ParsedStyleSheets[stylesheet_string]\n\ndef outputBundle(bundle_name):\n    if _Settings.SavedBundles.get(bundle_name, None) == None:\n        try:\n            bundle = hou.nodeBundle(bundle_name)\n            node_paths = list(node.path() for node in bundle.nodes())\n            cmd_bundle(bundle_name, node_paths)\n        except:\n            cmd_bundle(bundle_name, [])\n        _Settings.SavedBundles[bundle_name] = True\n\ndef outputBundles(now, dirtybundles, for_update):\n    ss_parms = soho.evaluate(stylesheetParms)\n    if for_update:\n        bundle_list = dirtybundles.split()\n    elif ss_parms['declare_bundles'].Value[0]:\n        bundle_list = list(bundle.name() for bundle in hou.nodeBundles())\n    else:\n        bundle_list = []\n    for bundle in bundle_list:\n        outputBundle(bundle)\n\ndef outputMaterial(shop_path, now):\n    if _Settings.SavedMaterials.get(shop_path, None) == None:\n        shop = soho.getObject(shop_path)\n        cmd_start('material')\n        outputObject(shop, now, name=shop_path, output_shader=True)\n        if _Settings.GenerateMaterialname:\n            cmd_property('object', 'materialname', [shop_path])\n        cmd_end()\n        _Settings.SavedMaterials[shop_path] = True\n\n# Return a tuple of the shader with its shop type if the given shader type\n# is not skipped for the given node - otherwise return None.\ndef getObjectShader(shop, shader_type, now):\n    skiplist = shop.evaluate(oshaderSkipParms, now)\n    shader_prop = oshaderMap[shader_type]\n\n    skip = False\n    if skiplist and shader_prop in skiplist:\n        skip = skiplist[shader_prop].Value[0]\n\n    if not skip:\n        shader = []\n        shop_type = []\n        if shop.evalShaderAndType(shader_type, now, shader, shop_type):\n            return (shader[0], shop_type[0])\n\n    return None\n\ndef outputGlobal(wrangler, obj, now):\n    if LSDhooks.call('pre_outputGlobal', wrangler, obj, now):\n        return\n    plist = obj.wrangle(wrangler, _Settings.Global, now)\n    if plist:\n        cmd_propertyV(None, plist)\n\n    xparms = obj.wrangle(wrangler, camXtraParms, now)\n    lv_bokeh = xparms.get('lv_bokeh', None)\n    if lv_bokeh:\n        bokeh = lv_bokeh.Value[0]\n        plist = evaluateBokeh(bokeh, obj, now)\n        if not _isDefaultBokeh(bokeh, plist):\n            cmd_propertyAndParms('camera', 'bokeh', bokeh, plist)\n\n    lv_numuserattrib = xparms.get('lv_numuserattrib', None)\n    if lv_numuserattrib:\n        n = lv_numuserattrib.Value[0]\n        for i in xrange(1, n+1):\n            _outputUserAttribute(i, obj, now)\n\n    (val, type) = obj.wrangleShaderAndType(wrangler, 'lv_pbrshader', now, [''])\n    shader = val[0]\n    if shader:\n        cmd_shader('renderer', 'pbrshader', shader, type)\n    else:\n        _setKeys(pbrParms)\n        plist = obj.evaluate(pbrParms, now)\n\n        # Add the shader parameters\n        shader = 'pathtracer use_renderstate 0'\n        for parm in plist.values():\n            shader += ' ' + parm.Key + ' ' + parm.toString()\n\n        cmd_shader('renderer', 'pbrshader', shader, \n                    soho.getShopType( 'atmosphere' ))\n\n    # Output other global shaders\n    _outputShaderList('renderer', obj, wrangler, now, gshaderParms, None)\n\n    LSDhooks.call('post_outputGlobal', wrangler, obj, now)\n\ndef outputLensShader(obj, wrangler, now):\n    _outputShaderList('renderer', obj, wrangler, now, gshaderParms, None)\n\ndef outputObject(obj, now, name=None, wrangler=None, output_shader=True, check_renderable=False, opropmap=None):\n    if LSDhooks.call('pre_objectSettings', obj, now, name, wrangler):\n        return\n\n    plist = obj.wrangle(wrangler, _Settings.Object, now)\n\n    if check_renderable:\n        render    = obj.getDefaultedInt('object:render', now, [1])[0]\n        if not render:\n            for p in plist:\n                if p.Houdini == 'lv_renderable':\n                    p.Value = [render]\n                    render = None\n                    break\n    \n    if name:\n        for p in plist:\n            if p.Houdini == 'object:name':\n                p.Value = [name]\n                break\n    else:\n        name = obj.getName()\n\n    if plist != None and len(plist):\n        cmd_propertyV(\"object\", plist)\n        if opropmap != None:\n            for p in plist:\n                map = soho.decodeParmId(p.ParmId)\n                # When building the parameter map, we're most interested in the\n                # parameter that actually defines the value (i.e. typically a\n                # material level parameter), not the actual node parameter.\n                pname = map.get('refparameter', map.get('parameter', None))\n                if pname:\n                    opropmap[pname] = p.Key\n    if _Settings.GenerateOpId:\n        cmd_property('object', 'id', obj.getDefaultedInt('object:id', now, [0]))\n\n    if check_renderable and (render is not None) and (not render):\n        cmd_property('object', 'renderable', [0])\n\n    if name in _Settings.UVHiddenObjects:\n        cmd_property('object', 'renderable', [0])\n\n    xparms = obj.wrangle(wrangler, objXtraParms, now)\n\n    # Handle phantom objects (which should appear in shadow maps)\n    if not _Settings.ShadowMap:\n        if _Settings.PhantomOverrides.has_key(name):\n            cmd_property('object', 'phantom', [1])\n        else:\n            lv_phantom = xparms.get('lv_phantom', None)\n            if lv_phantom:\n                cmd_property('object', 'phantom', lv_phantom.Value)\n\n    lv_measure = xparms.get('lv_measure', None)\n    lv_numuserattrib = xparms.get('lv_numuserattrib', None)\n\n    if _Settings.MatteOverrides.has_key(name):\n        cmd_property('object', 'matte', [1])\n\n    if lv_measure:\n        measure = lv_measure.Value[0]\n        plist = evaluateMeasure(measure, obj, now)\n        if not _isDefaultMeasure(measure, plist):\n            cmd_propertyAndParms('object', 'measure', measure, plist)\n    if lv_numuserattrib:\n        n = lv_numuserattrib.Value[0]\n        for i in xrange(1, n+1):\n            _outputUserAttribute(i, obj, now)\n    # For velocity motion blur, we need to have access to the velocity\n    # scale in the instance as well for volume rendering.\n    mbinfo = LSDmisc.geo_mbsamples(obj, now)\n    if mbinfo[1] and len(mbinfo[0]) == 2:\n        times = mbinfo[0]\n        val = mbinfo[1]\n        cmd_property('object', 'velocityblur', [val])\n        cmd_property('object', 'velocityscale', [times[1]-times[0]])\n    LSDmisc.ouputMotionBlurInfo(obj,now)\n\n    if output_shader:\n        _outputShaderList('object', obj, wrangler, now, oshaderParms, oshaderSkipParms)\n        _outputObjectStylesheet('object', obj, wrangler, now)\n\n    \n    # We return the displacement bound so that geometry with multiple\n    # displacement bounds could\n    LSDhooks.call('post_objectSettings', obj, now, name, wrangler)\n    return\n\ndef outputGeometry(obj, now):\n    if LSDhooks.call('pre_geometrySettings', obj, now):\n        return\n    plist = obj.evaluate(_Settings.Geometry, now)\n    if plist and len(plist):\n        cmd_propertyV('geometry', plist)\n    LSDhooks.call('post_geometrySettings', obj, now)\n\ndef outputStyleSheets(now, dirtystylesheets, for_update):\n    ss_parms = soho.evaluate(stylesheetParms)\n    ss_declare = ss_parms['declare_stylesheets'].Value[0]\n    ss_apply = ss_parms['apply_stylesheets'].Value[0]\n    if dirtystylesheets is not None:\n        ss_dirty_list = dirtystylesheets.split()\n    else:\n        ss_dirty_list = None\n    # Declare style sheets and any materials used by the style sheets.\n    for style in hou.styles.styles(ss_declare):\n        if ss_dirty_list is None or style in ss_dirty_list:\n            if ss_dirty_list is not None:\n                ss_dirty_list.remove(style)\n            stylesheet = hou.styles.stylesheet(style)\n            (ss_bundles, ss_mats) = getBundlesAndMaterialsFromStyleSheet(stylesheet)\n            for mat_path in ss_mats:\n                if hou.node(mat_path):\n                    outputMaterial(mat_path, now)\n            for bundle in ss_bundles:\n                outputBundle(bundle)\n            cmd_textblock(\"stylesheet:\" + style, stylesheet)\n\n    # Remove style sheets that have been deleted.\n    if ss_dirty_list is not None:\n        for style in ss_dirty_list:\n            cmd_textblock(\"stylesheet:\" + style, '')\n\n    # Output command to apply the requested style sheets.\n    if for_update or (ss_apply != '' and not ss_apply.isspace()):\n        cmd_stylesheet(ss_apply)\n\ndef declareBakingParms(now, for_update):\n    plist = soho.evaluate(bakingParms, now)\n    for pname, parm in plist.iteritems():\n        if parm.Value == parm.Default:\n            continue\n        cmd_declare('global', parm.Type, 'global:%s' % pname, parm.Value)\n\ndef setMattePhantomOverrides(now, matte_objects, phantom_objects):\n    _Settings.MatteOverrides = {}\n    _Settings.PhantomOverrides = {}\n    rop = soho.getOutputDriver()\n    if matte_objects:\n        for obj in rop.objectList('objlist:instance', now, matte_objects):\n            _Settings.MatteOverrides[obj.getName()] = True\n    if phantom_objects:\n        for obj in rop.objectList('objlist:instance', now, phantom_objects):\n            _Settings.PhantomOverrides[obj.getName()] = True\n\ndef outputLight(wrangler, obj, now):\n    if LSDhooks.call('pre_lightSettings', wrangler, obj, now):\n        return\n    plist = obj.wrangle(wrangler, _Settings.Light, now)\n    if plist:\n        cmd_propertyV('light', plist)\n\n    _outputShaderList('light', obj, wrangler, now, lshaderParms, lshaderSkipParms)\n\n    if LSDhooks.call('post_lightSettings', wrangler, obj, now):\n        return\n\nfshaderParms = [\n    SohoParm('shop_fogpath',  'shader', [''], True, shoptype=\"atmosphere\", key='shader'),\n]\n\nfshaderSkipParms = {\n    'shop_fogpath' : SohoParm('shop_disable_fog_shader', 'bool', [False], True),\n}\n\ndef outputFog(wrangler, obj, now):\n    if LSDhooks.call('pre_fogSettings', wrangler, obj, now):\n        return\n\n    plist = obj.wrangle(wrangler, _Settings.Fog, now)\n    if plist:\n        cmd_propertyV('fog', plist)\n\n    _outputShaderList('fog', obj, wrangler, now, fshaderParms, fshaderSkipParms)\n\n    LSDhooks.call('post_fogSettings', wrangler, obj, now)\n\ndef evaluateDeepResolver(driver, wrangler, obj, now):\n    deep = _Settings.DeepResolver.get(driver, None)\n    if not deep:\n        return None\n    return obj.wrangle(wrangler, deep, now)\n\ndef evaluateMeasure(driver, obj, now):\n    measure = _Settings.Measure.get(driver, None)\n    if measure:\n        return obj.evaluate(measure, now)\n    return []\n\ndef evaluateBokeh(driver, obj, now):\n    bokeh = _Settings.Bokeh.get(driver, None)\n    if bokeh:\n        return obj.evaluate(bokeh, now)\n    return []\n\ndef evaluateImagePlane(idx, wrangler, obj, now):\n    if idx < 0:\n        return obj.wrangle(wrangler, _Settings.MPlane, now)\n    # Auxilliary image plane\n    for s in _Settings.IPlane:\n        s.setIndex(idx)\n    return obj.evaluate(_Settings.IPlane, now)\n\n_iplay_specific = {\n    'rendermode' : SohoParm('lv_image_mplay_rendermode', 'string',\n                        ['current'], False, key='rendermode'),\n    'framemode'  : SohoParm('lv_image_mplay_framemode', 'string',\n                        ['append'], False, key='framemode'),\n    'trange'     : SohoParm('trange', 'int', [0], False, key='trange')\n}\n\ndef outputMPlayFormatOptions(wrangler, cam, now):\n    plist = cam.wrangle(wrangler, _iplay_specific, now)\n    rendermode = plist['rendermode'].Value[0]\n    framemode  = plist['framemode'].Value[0]\n    trange     = plist['trange'].Value[0]\n    curframe = hou.timeToFrame(now)\n    if trange:\n        frange = cam.wrangleInt(wrangler, 'f', now, [curframe, curframe])\n        if len(frange) < 2:\n            frange = [curframe, curframe]\n    else:\n        frange = [curframe, curframe]\n\n    # There are 4 combinations of rendermode and framemode\n    #   rendermode/framemode |  append    |  match\n    #   ---------------------+------------+-----------\n    #         new            | new-append | new-frame\n    #       current          |   append   |  replace\n    #  However, we only perform \"new\" render mode if we the render\n    #  frame is at the beginning of the frame range\n    if abs(curframe-frange[0]) < 0.01:\n        rendermode = 'current'\n    if rendermode == 'new':\n        if framemode == 'append':\n            rendermode = 'new-append'\n        else:\n            rendermode = 'new-frame'\n    else:\n        if framemode == 'append':\n            rendermode = 'append'\n        else:\n            rendermode = 'replace'\n    cmd_declare('plane', 'string', 'IPlay.rendermode', [rendermode])\n    frange = '%d %d' % (int(frange[0]), int(frange[1]))\n    cmd_declare('plane', 'string', 'IPlay.framerange', [frange])\n    cmd_declare('plane', 'float', 'IPlay.currentframe', [curframe])\n    rendersource = soho.getDefaultedString('lv_rendersource',\n                            [soho.getOutputDriver().getName()])\n    cmd_declare('plane', 'string', 'IPlay.rendersource', rendersource)\n\ndef outputImageFormatOptions(wrangler, cam, now):\n    if LSDhooks.call('pre_outputImageFormatOptions', wrangler, cam, now):\n        return\n    # Output image format options for the image\n\n    # First, we have to output some special options for the \"ip\"\n    # device.\n    outputMPlayFormatOptions(wrangler, cam, now)\n\n    # Now, output the generic format options\n    plist = cam.wrangle(wrangler, _Settings.IOption, now)\n    for p in plist:\n        cmd_declare('plane', p.Type, p.Key, p.Value)\n    LSDhooks.call('post_outputImageFormatOptions', wrangler, cam, now)\n\n#\n# Feature Sets\n#\ndef addFeature(name, value):\n    _Settings.Features[name] = value\n\ndef getFeature(name):\n    return _Settings.Features.get(name, None)\n\ndef initializeFeatures():\n    LSDmantra.initializeFeatures(sys.modules[__name__])\n",
			"file": "src/houdini/soho/LSDsettings.py",
			"file_size": 31535,
			"file_write_time": 132469253077233473,
			"settings":
			{
				"buffer_size": 31535,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/backtracking.h",
			"settings":
			{
				"buffer_size": 2087,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 613,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Info.cpp",
			"settings":
			{
				"buffer_size": 3479,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitives.cpp",
			"settings":
			{
				"buffer_size": 4984,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Run.cpp",
			"settings":
			{
				"buffer_size": 3383,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Run.h",
			"settings":
			{
				"buffer_size": 1103,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/bgeo_reader/bgeo/parser/Run.cpp",
			"settings":
			{
				"buffer_size": 3025,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/StorageTraits.cpp",
			"settings":
			{
				"buffer_size": 433,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 769,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.h",
			"settings":
			{
				"buffer_size": 2322,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.cpp",
			"settings":
			{
				"buffer_size": 8650,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Detail.h",
			"settings":
			{
				"buffer_size": 2153,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Info.h",
			"settings":
			{
				"buffer_size": 1031,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexMap.h",
			"settings":
			{
				"buffer_size": 1023,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/NumericData.h",
			"settings":
			{
				"buffer_size": 6688,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/python2.7/LSDgeo.py",
			"settings":
			{
				"buffer_size": 40409,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/houdini/soho/python2.7/sohog.py",
			"settings":
			{
				"buffer_size": 19360,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Poly.cpp",
			"settings":
			{
				"buffer_size": 2106,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PolySplitter.cpp",
			"settings":
			{
				"buffer_size": 6970,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitive.h",
			"settings":
			{
				"buffer_size": 2355,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Mesh.h",
			"settings":
			{
				"buffer_size": 1165,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Mesh.cpp",
			"settings":
			{
				"buffer_size": 3578,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitive.cpp",
			"settings":
			{
				"buffer_size": 4239,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Primitive.h",
			"settings":
			{
				"buffer_size": 710,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Primitive.cpp",
			"settings":
			{
				"buffer_size": 628,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PrimitiveFactory.cpp",
			"settings":
			{
				"buffer_size": 5226,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PrimitiveFactory.h",
			"settings":
			{
				"buffer_size": 831,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/rtti.h",
			"settings":
			{
				"buffer_size": 2465,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PackedFragment.h",
			"settings":
			{
				"buffer_size": 1037,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PrimType.h",
			"settings":
			{
				"buffer_size": 851,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Volume.cpp",
			"settings":
			{
				"buffer_size": 1276,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PackedDisk.cpp",
			"settings":
			{
				"buffer_size": 820,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Mesh.h",
			"settings":
			{
				"buffer_size": 781,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Mesh.cpp",
			"settings":
			{
				"buffer_size": 938,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/bgeo_reader/bgeo/parser/Poly.cpp",
			"settings":
			{
				"buffer_size": 3788,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/AlembicRef.h",
			"settings":
			{
				"buffer_size": 1203,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/AlembicRef.cpp",
			"settings":
			{
				"buffer_size": 1305,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/toolkit/include/UT/UT_IStream.h",
			"settings":
			{
				"buffer_size": 23162,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Detail.cpp",
			"settings":
			{
				"buffer_size": 8506,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Attribute.cpp",
			"settings":
			{
				"buffer_size": 5347,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/compression.cpp",
			"settings":
			{
				"buffer_size": 1281,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.h",
			"settings":
			{
				"buffer_size": 2954,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PrimType.cpp",
			"settings":
			{
				"buffer_size": 1055,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Sphere.h",
			"settings":
			{
				"buffer_size": 933,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Volume.h",
			"settings":
			{
				"buffer_size": 1136,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Sphere.cpp",
			"settings":
			{
				"buffer_size": 885,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Part.h",
			"settings":
			{
				"buffer_size": 995,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Part.cpp",
			"settings":
			{
				"buffer_size": 875,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PackedGeometry.cpp",
			"settings":
			{
				"buffer_size": 1381,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PackedDisk.h",
			"settings":
			{
				"buffer_size": 864,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Run.cpp",
			"settings":
			{
				"buffer_size": 883,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Run.h",
			"settings":
			{
				"buffer_size": 879,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.h",
			"settings":
			{
				"buffer_size": 2221,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 243,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 658,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/scope.h",
			"settings":
			{
				"buffer_size": 5018,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/conf/default.py",
			"settings":
			{
				"buffer_size": 2517,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/ShadowPass.slang",
			"settings":
			{
				"buffer_size": 4172,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CSMData.slang",
			"settings":
			{
				"buffer_size": 2826,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/DepthPass.slang",
			"settings":
			{
				"buffer_size": 2732,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/VisibilityPass.ps.slang",
			"settings":
			{
				"buffer_size": 2957,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RasterizerState.h",
			"settings":
			{
				"buffer_size": 7490,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/ScriptBindings.cpp",
			"settings":
			{
				"buffer_size": 4481,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 3814,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SSAO/SSAO.cpp",
			"settings":
			{
				"buffer_size": 11813,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SVGFPass/SVGFPass.cpp",
			"settings":
			{
				"buffer_size": 19004,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ToneMapper/ToneMapper.cpp",
			"settings":
			{
				"buffer_size": 16343,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/WhittedRayTracer/WhittedRayTracer.cpp",
			"settings":
			{
				"buffer_size": 15008,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.cpp",
			"settings":
			{
				"buffer_size": 8262,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#ifndef SRC_FALCOR_RENDERPASSES_GBUFFER_GBUFFERBASE_H_\n#define SRC_FALCOR_RENDERPASSES_GBUFFER_GBUFFERBASE_H_\n\n#include \"Falcor/Falcor.h\"\n\nusing namespace Falcor;\n\nextern \"C\" falcorexport void getPasses(Falcor::RenderPassLibrary& lib);\n\n/** Base class for the different types of G-buffer passes (including V-buffer).\n*/\nclass GBufferBase : public RenderPass, public inherit_shared_from_this<RenderPass, GBufferBase> {\n public:\n    enum class SamplePattern : uint32_t {\n        Center,\n        DirectX,\n        Halton,\n        Stratified,\n    };\n\n    virtual void renderUI(Gui::Widgets& widget) override;\n    virtual void compile(RenderContext* pContext, const CompileData& compileData) override;\n    virtual Dictionary getScriptingDictionary() override;\n    virtual void setScene(RenderContext* pRenderContext, const Scene::SharedPtr& pScene) override;\n\n protected:\n    GBufferBase(Device::SharedPtr pDevice);\n    virtual void parseDictionary(const Dictionary& dict);\n    void updateSamplePattern();\n\n    // Internal state\n    Scene::SharedPtr                mpScene;\n\n    uint2                           mFrameDim = {};\n    float2                          mInvFrameDim = {};\n\n    // UI variables\n    SamplePattern                   mSamplePattern = SamplePattern::Center;     ///< Which camera jitter sample pattern to use.\n    uint32_t                        mSampleCount = 64;                          ///< Sample count for camera jitter.\n    bool                            mDisableAlphaTest = false;                  ///< Disable alpha test.\n    bool                            mOptionsChanged = false;\n\n    static void registerBindings(pybind11::module& m);\n    friend void getPasses(Falcor::RenderPassLibrary& lib);\n};\n\n#define str(a) case GBufferBase::SamplePattern::a: return #a\ninline std::string to_string(GBufferBase::SamplePattern type) {\n    switch (type) {\n        str(Center);\n        str(DirectX);\n        str(Halton);\n        str(Stratified);\n        default:\n            should_not_get_here();\n            return \"\";\n    }\n}\n#undef str\n\n#endif  // SRC_FALCOR_RENDERPASSES_GBUFFER_GBUFFERBASE_H_\n",
			"file": "src/RenderPasses/GBuffer_0ld/GBufferBase.h",
			"file_size": 3826,
			"file_write_time": 132483088400051170,
			"settings":
			{
				"buffer_size": 3826,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/Composite/Composite.cpp",
			"settings":
			{
				"buffer_size": 5297,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.h",
			"settings":
			{
				"buffer_size": 3620,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/Composite/CompositeMode.slangh",
			"settings":
			{
				"buffer_size": 1840,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/RenderPasses/Utils/Composite/Composite.cs.slang",
			"settings":
			{
				"buffer_size": 2318,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/Composite/Composite.h",
			"settings":
			{
				"buffer_size": 3146,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/AccumulatePass/AccumulatePass.cpp",
			"settings":
			{
				"buffer_size": 11948,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/AccumulatePass/AccumulatePass.h",
			"settings":
			{
				"buffer_size": 5762,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BlitPass/BlitPass.cpp",
			"settings":
			{
				"buffer_size": 3908,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/AccumulatePass/Accumulate.cs.slang",
			"settings":
			{
				"buffer_size": 5111,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer.h",
			"settings":
			{
				"buffer_size": 5333,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DeviceManager.cpp",
			"settings":
			{
				"buffer_size": 5402,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Logger.h",
			"settings":
			{
				"buffer_size": 5549,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Logger.cpp",
			"settings":
			{
				"buffer_size": 5968,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/scene_builder.cpp",
			"settings":
			{
				"buffer_size": 16118,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/Material.h",
			"settings":
			{
				"buffer_size": 11629,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.h",
			"settings":
			{
				"buffer_size": 11222,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
			"settings":
			{
				"buffer_size": 20423,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.cpp",
			"settings":
			{
				"buffer_size": 14341,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.slang",
			"settings":
			{
				"buffer_size": 5386,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/CameraData.slang",
			"settings":
			{
				"buffer_size": 4903,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/CameraController.h",
			"settings":
			{
				"buffer_size": 6738,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/AssimpImporter.h",
			"settings":
			{
				"buffer_size": 2352,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/CameraController.cpp",
			"settings":
			{
				"buffer_size": 9862,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Material/Material.cpp",
			"settings":
			{
				"buffer_size": 20616,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Color/ColorHelpers.slang",
			"settings":
			{
				"buffer_size": 6245,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/scene_builder.h",
			"settings":
			{
				"buffer_size": 845,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.h",
			"settings":
			{
				"buffer_size": 14138,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/Light.h",
			"settings":
			{
				"buffer_size": 10180,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/Light.cpp",
			"settings":
			{
				"buffer_size": 13822,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightData.slang",
			"settings":
			{
				"buffer_size": 4402,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightProbe.h",
			"settings":
			{
				"buffer_size": 7813,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightProbeData.slang",
			"settings":
			{
				"buffer_size": 2984,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/SceneImporter.cpp",
			"settings":
			{
				"buffer_size": 40088,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/PythonImporter.cpp",
			"settings":
			{
				"buffer_size": 5708,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.h",
			"settings":
			{
				"buffer_size": 5144,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.cpp",
			"settings":
			{
				"buffer_size": 29836,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/MathConstants.slangh",
			"settings":
			{
				"buffer_size": 6718,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/TimeReport.cpp",
			"settings":
			{
				"buffer_size": 2736,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/TimeReport.h",
			"settings":
			{
				"buffer_size": 2990,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Falcor.h",
			"settings":
			{
				"buffer_size": 6951,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.h",
			"settings":
			{
				"buffer_size": 29405,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/Animatable.h",
			"settings":
			{
				"buffer_size": 3413,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/Animatable.cpp",
			"settings":
			{
				"buffer_size": 2090,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.h",
			"settings":
			{
				"buffer_size": 4605,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.cpp",
			"settings":
			{
				"buffer_size": 4754,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp",
			"settings":
			{
				"buffer_size": 43473,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.h",
			"settings":
			{
				"buffer_size": 27015,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h",
			"settings":
			{
				"buffer_size": 10485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
			"settings":
			{
				"buffer_size": 7958,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.h",
			"settings":
			{
				"buffer_size": 8675,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.cpp",
			"settings":
			{
				"buffer_size": 14274,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHRefit.cs.slang",
			"settings":
			{
				"buffer_size": 7705,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.slang",
			"settings":
			{
				"buffer_size": 4343,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/FinalizeIntegration.cs.slang",
			"settings":
			{
				"buffer_size": 4150,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
			"settings":
			{
				"buffer_size": 6241,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/BxDFTypes.slang",
			"settings":
			{
				"buffer_size": 2300,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/BxDF.slang",
			"settings":
			{
				"buffer_size": 24049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/Fresnel.slang",
			"settings":
			{
				"buffer_size": 4300,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang",
			"settings":
			{
				"buffer_size": 8060,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/MaterialShading.slang",
			"settings":
			{
				"buffer_size": 26488,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/Microfacet.slang",
			"settings":
			{
				"buffer_size": 10130,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang",
			"settings":
			{
				"buffer_size": 41105,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Material/TexLODTypes.slang",
			"settings":
			{
				"buffer_size": 2900,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.h",
			"settings":
			{
				"buffer_size": 3576,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.slang",
			"settings":
			{
				"buffer_size": 2868,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapData.slang",
			"settings":
			{
				"buffer_size": 2178,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang",
			"settings":
			{
				"buffer_size": 4983,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerType.slangh",
			"settings":
			{
				"buffer_size": 2577,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerInterface.slang",
			"settings":
			{
				"buffer_size": 4180,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang",
			"settings":
			{
				"buffer_size": 5874,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.slang",
			"settings":
			{
				"buffer_size": 3489,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang",
			"settings":
			{
				"buffer_size": 6084,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/BuildTriangleList.cs.slang",
			"settings":
			{
				"buffer_size": 3362,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.cpp",
			"settings":
			{
				"buffer_size": 5279,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.h",
			"settings":
			{
				"buffer_size": 3425,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.slang",
			"settings":
			{
				"buffer_size": 6643,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSamplerSetup.cs.slang",
			"settings":
			{
				"buffer_size": 3272,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "/*************************************************"
			}
		},
		{
			"file": "src/Falcor/Core/Window.h",
			"settings":
			{
				"buffer_size": 5592,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/AnimationController.h",
			"settings":
			{
				"buffer_size": 5078,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.h",
			"settings":
			{
				"buffer_size": 12566,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
			"settings":
			{
				"buffer_size": 27029,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollectionShared.slang",
			"settings":
			{
				"buffer_size": 5732,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.slang",
			"settings":
			{
				"buffer_size": 5394,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/AnimationController.cpp",
			"settings":
			{
				"buffer_size": 10423,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/Animation.h",
			"settings":
			{
				"buffer_size": 5117,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/Animation.cpp",
			"settings":
			{
				"buffer_size": 9568,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/InternalDictionary.h",
			"settings":
			{
				"buffer_size": 4253,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer_scripting.cpp",
			"settings":
			{
				"buffer_size": 3505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/scene_reader_base.h",
			"settings":
			{
				"buffer_size": 1126,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nPackage Control\n---------------\n\n  Version 3.4.0 Release Notes\n  \n   -----------------------------------------------------------------------\n  | NOTICE: This will be the final release of Package Control supporting  |\n  | - Sublime Text 2                                                      |\n  | - Sublime Text 3 beta builds (<3143)                                  |\n   -----------------------------------------------------------------------\n  | Please see https://sublimetext.com for an updated build               |\n   -----------------------------------------------------------------------\n  \n  New features include:\n  \n   - Support for repositories hosted on https://gitlab.com - by TheSecEng\n  \n   - An alternative TLS implementation based on the oscrypto Python\n     library, which uses native operating system TLS libraries and\n     certificate handling. See the \"downloader_precedence\" setting to enable.\n  \n   - Preferences now use the side-by-side edit mode\n  \n   - Added command palette entries to enable and disable debug mode for\n     troubleshooting and bug reports\n  \n  Bug fixes include:\n  \n   - Fixed operation on macOS 11.0 Big Sur - by TheSecEng\n  \n   - Improved handling of invalid dependencies - by deathaxe\n  \n   - Corrected handling of unsuccessful downloads with wget - by deathaxe\n  \n   - Fixed various issues with the HTTP caching - by deathaxe\n  \n   - Updated the BitBucket provider to use the 2.0 API - deathaxe\n  \n   - Packages installed via symlinks are now unlinked instead of being\n     deleted when being removed or cleaned up - by rchl\n  \n   - Improved install performance of packages with large numbers of\n     files - by BenjaminSchaaf\n  \n   - Fixed handling of auth with the wininet downloader - by NicholasBuse\n  \n   - Fixed handling BitBucket repositories without a nickname\n  \n   - Resolved deadlocks and ignored packages occuring when removing multiple\n     dependencies at once\n  \n   - Package messages are no longer printed with trailing whitespace on lines\n     with no text - by dnicolson\n",
			"settings":
			{
				"buffer_size": 2087,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "src/lava_lib/scene_reader_base.cpp",
			"settings":
			{
				"buffer_size": 622,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer_iface.h",
			"settings":
			{
				"buffer_size": 2403,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer_iface.cpp",
			"settings":
			{
				"buffer_size": 2827,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"grammar_lsd.h\"\n#include \"session_lsd.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\nnamespace lava { \n\nnamespace lsd {\n\nVisitor::Visitor(std::unique_ptr<SessionLSD>& pSession): mpSession(std::move(pSession)) {\n\n} \n\nvoid Visitor::operator()(ast::ifthen const& c) const {\n    \n}\n\nvoid Visitor::operator()(ast::setenv const& c) const {\n    std::cout << \"Visitor setenv\\n\";\n    mpSession->cmdSetEnv(c.key, c.value);\n};\n\nvoid Visitor::operator()(ast::cmd_image const& c) const { \n    std::cout << \"LSDVisitor cmd_image\\n\";\n    if (c.display_type != ast::DisplayType::NONE) {\n        mpSession->loadDisplayByType(c.display_type);\n    } else {\n        mpSession->loadDisplayByFileName(c.filename);\n    }\n}\n\nvoid Visitor::operator()(ast::cmd_end const& c) const { \n    std::cout << \"LSDVisitor cmd_end\\n\";\n}\n\nvoid Visitor::operator()(ast::cmd_quit const& c) const { \n    std::cout << \"LSDVisitor cmd_quit\\n\";\n}\n\nvoid Visitor::operator()(ast::cmd_start const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_time const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_detail const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_version const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_config const& c) const {\n    mpSession->cmdConfig(c.filename);\n}\n\nvoid Visitor::operator()(ast::cmd_defaults const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_transform const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_geometry const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_property const& c) const {\n   //ast::Object style = getPropertyStyle(c.style);\n}\n\nvoid Visitor::operator()(ast::cmd_deviceoption const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_declare const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_raytrace const& c) const {\n    mpSession->cmdRaytrace();\n}\n\n}  // namespace lsd\n\n}  // namespace lava\n",
			"file": "src/lava_lib/readers/lsd_visitor.cpp",
			"file_size": 1871,
			"file_write_time": 132457254940187570,
			"settings":
			{
				"buffer_size": 1871,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"grammar_lsd.h\"\n#include \"session_lsd.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\n\nnamespace lava { \n\nnamespace lsd {\n\nEchoVisitor::EchoVisitor(std::unique_ptr<SessionLSD>& pSession): Visitor(pSession), _os(std::cout){ \n\n}\n\nEchoVisitor::EchoVisitor(std::unique_ptr<SessionLSD>& pSession, std::ostream& os): Visitor(pSession), _os(os){ \n\n}\n\nvoid EchoVisitor::operator()(int v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(double v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(std::string const& v) const {\n    _os << '\"' << v << '\"';\n}\n\nvoid EchoVisitor::operator()(Int2 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Int3 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Int4 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Vector2 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Vector3 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Vector4 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(PropValue const& v) const { \n    boost::apply_visitor(*this, v);\n}\n\nvoid EchoVisitor::operator()(std::vector<PropValue> const& v) const {\n    if (!v.empty()) {\n        _os << \"[ \";\n        for(std::vector<PropValue>::const_iterator it = v.begin(); it != (v.end() - 1); it++) {\n            boost::apply_visitor(*this, *it);\n            _os << \" \";\n        }\n        boost::apply_visitor(*this, v.back());\n        _os << \" ]\";\n    } else {\n        _os << \"!!! EMPTY !!!\";\n    }\n}\n\nvoid EchoVisitor::operator()(ast::ifthen const& c) const {\n    _os << \"\\x1b[32m\" << \"> ifthen: \" << c.expr << \"\\x1b[0m\\n\";\n\n    if( c.expr) {\n        for( auto const& cmd: c.commands) {\n            boost::apply_visitor(*this, cmd);\n        }\n    }\n}\n\nvoid EchoVisitor::operator()(ast::setenv const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> setenv: \" << c.key << \" = \" << c.value << \"\\x1b[0m\\n\"; \n};\n\nvoid EchoVisitor::operator()(ast::cmd_image const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_image: \";\n    if(c.display_type != ast::DisplayType::NONE) {\n        _os << \"type: \";\n        switch(c.display_type) {\n            case ast::DisplayType::IP:\n                _os << \"md\";\n                break;\n            case ast::DisplayType::MD:\n                _os << \"ip\";\n                break;\n            case ast::DisplayType::OPENEXR:\n                _os << \"openexr\";\n                break;\n            case ast::DisplayType::JPEG:\n                _os << \"jpeg\";\n                break;\n            case ast::DisplayType::TIFF:\n                _os << \"tiff\";\n                break;\n            case ast::DisplayType::PNG:\n                _os << \"png\";\n                break;\n            default:\n                _os << \"unknown\";\n                break;\n        }\n        _os << \" \";\n    }\n    if(!c.filename.empty()) {\n        _os << \"filename: \" << c.filename;\n    }\n    _os << \"\\x1b[0m\\n\"; \n}\n\nvoid EchoVisitor::operator()(ast::cmd_end const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_end: \" << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_quit const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_quit: \" << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_start const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_start: \" << c.type << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_time const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_time: \" << c.time << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_detail const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_detail: name: \" << c.name << \" filename: \" << c.filename << \"\\n\";\n    boost::apply_visitor(bgeo::EchoVisitor(), c.bgeo);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_version const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_version: \" << c.version << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_defaults const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_defaults: filename: \" << c.filename << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_config const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_config: filename: \" << c.filename << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_transform const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_transform: \" << c.m << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_geometry const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_geometry: geometry_object: \" << c.geometry_object << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_property const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_property: style: \" << c.style << \" token: \" << c.token << \" values: \";\n    EchoVisitor::operator()(c.values);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_deviceoption const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_deviceoption: type: \" << c.type << \" name: \" << c.name << \" values: \";\n    EchoVisitor::operator()(c.values);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_declare const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_declare: style: \" << c.style << \" token: \" << c.token << \" type: \" << c.type << \" values: \";\n    EchoVisitor::operator()(c.values);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_raytrace const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_raytrace: \" << \"\\x1b[0m\\n\";\n}\n\n}  // namespace lsd\n\n}  // namespace lava\n",
			"file": "src/lava_lib/readers/lsd_echo_visitor.cpp",
			"file_size": 5756,
			"file_write_time": 132457254875628693,
			"settings":
			{
				"buffer_size": 5756,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_SESSION_LSD_H_\n#define SRC_LAVA_LIB_SESSION_LSD_H_\n\n#include <memory>\n\n#include \"grammar_lsd.h\"\n#include \"../renderer_iface.h\"\n\nnamespace lava {\n\nclass SessionLSD {\n\n public:\n    SessionLSD(std::unique_ptr<RendererIface> pRendererIface);\n    ~SessionLSD();\n\n public:\n \tbool loadDisplayByType(const lsd::ast::DisplayType& display_type);\n \tbool loadDisplayByFileName(const std::string& file_name);\n\n \tvoid cmdSetEnv(const std::string& key, const std::string& value);\n \tvoid cmdRaytrace();\n    void cmdConfig(const std::string& file_name);\n\n private:\n \tbool initRenderData();\n\n private:\n \tstd::unique_ptr<RendererIface> mpRendererIface;\n \tstd::vector<std::string> mGraphConfigs;\n\n};\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_SESSION_LSD_H_",
			"file": "src/lava_lib/readers/session_lsd.h",
			"file_size": 762,
			"file_write_time": 132457252424072702,
			"settings":
			{
				"buffer_size": 762,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"session_lsd.h\"\n\n#include \"lava_utils_lib/ut_fsys.h\"\n#include \"lava_utils_lib/logging.h\"\n\nnamespace lava {\n\nnamespace lsd {\n\nstd::string resolveDisplayDriverByFileName(const std::string& file_name) {\n\tstd::string ext = ut::fsys::getFileExtension(file_name);\n\n    if( ext == \".exr\" ) return std::move(\"openexr\");\n    if( ext == \".jpg\" ) return std::move(\"jpeg\");\n    if( ext == \".jpeg\" ) return std::move(\"jpeg\");\n    if( ext == \".png\" ) return std::move(\"png\");\n    if( ext == \".tif\" ) return std::move(\"tiff\");\n    if( ext == \".tiff\" ) return std::move(\"tiff\");\n    return std::move(\"openexr\");\n}\n\n}  // namespace lsd\n\nSessionLSD::SessionLSD(std::unique_ptr<RendererIface> pRendererIface) { \n\tmpRendererIface = std::move(pRendererIface);\n}\n\nSessionLSD::~SessionLSD() { }\n\n\nbool SessionLSD::loadDisplayByType(const lsd::ast::DisplayType& display_type) {\n\tstd::string display_name;\n\n\tswitch(display_type) {\n\t\tcase lsd::ast::DisplayType::IP:\n\t\tcase lsd::ast::DisplayType::MD:\n\t\t\tdisplay_name = \"houdini\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::OPENEXR:\n\t\t\tdisplay_name = \"openexr\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::JPEG:\n\t\t\tdisplay_name = \"jpeg\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::TIFF:\n\t\t\tdisplay_name = \"tiff\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::PNG:\n\t\tdefault:\n\t\t\tdisplay_name = \"png\";\n\t\t\tbreak;\n\t}\n\n\treturn mpRendererIface->loadDisplay(display_name);\n}\n\nbool SessionLSD::loadDisplayByFileName(const std::string& file_name) {\n\treturn mpRendererIface->loadDisplay(lsd::resolveDisplayDriverByFileName(file_name));\n}\n\nvoid SessionLSD::cmdSetEnv(const std::string& key, const std::string& value) {\n\tmpRendererIface->setEnvVariable(key, value);\n}\n\nvoid SessionLSD::cmdConfig(const std::string& file_name) {\n\t// actual render graph configs loading postponed unitl renderer is initialized\n\tmGraphConfigs.push_back(file_name);\n}\n\n// initialize renderer and push render data\nbool SessionLSD::initRenderData() {\n\tLLOG_DBG << \"initRenderData\";\n\tif(!mpRendererIface->initRenderer()) return false;\n\n\tfor(auto const& graph_conf_file: mGraphConfigs) {\n\t\tif(!mpRendererIface->loadScript(graph_conf_file)) return false;\n\t}\n\n\treturn true;\n}\n\nvoid SessionLSD::cmdRaytrace() {\n\tLLOG_DBG << \"cmdRaytrace\";\n\tinitRenderData(); // push postponed data\n\tmpRendererIface->renderFrame();\n}\n\n}  // namespace lava",
			"file": "src/lava_lib/readers/session_lsd.cpp",
			"file_size": 2312,
			"file_write_time": 132457252701107573,
			"settings":
			{
				"buffer_size": 2312,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <vector>\n#include <fstream>\n#include <iterator>\n#include <regex>\n\n#include <boost/spirit/include/support_istream_iterator.hpp>\n\n#include \"reader_lsd.h\"\n#include \"grammar_lsd.h\"\n\n#include \"lava_utils_lib/logging.h\"\n\nnamespace x3 = boost::spirit::x3;\n\nnamespace lava {\n\n\nReaderLSD::ReaderLSD(): ReaderBase(), mInitialized(false) { }\n\nReaderLSD::~ReaderLSD() { }\n\nvoid ReaderLSD::init(std::unique_ptr<RendererIface> pRendererInterface, bool echo) {\n    auto pSession = std::make_unique<SessionLSD>(std::move(pRendererInterface));\n\n    if (!echo) {\n        // standard LSD visitor\n        mpVisitor = std::make_unique<lsd::Visitor>(pSession);\n    } else {\n        // LSD visitor with parsed console echo (for debug purposes)\n        mpVisitor = std::make_unique<lsd::EchoVisitor>(pSession);\n    }\n\n    mInitialized = true;\n\n    LLOG_DBG << \"ReaderLSD::init done\";\n}\n\nbool ReaderLSD::isInitialized() {\n    return mInitialized;\n}\n\nconst char *ReaderLSD::formatName() const{\n    return \"Lava LSD\";\n}\n\nbool ReaderLSD::checkExtension(const char *name) {\n    if (strcmp(name, \".lsd\")) return true;\n    return false;\n}\n\nvoid ReaderLSD::getFileExtensions(std::vector<std::string> &extensions) const{\n    extensions.insert(extensions.end(), _lsd_extensions.begin(), _lsd_extensions.end());\n}\n\nbool ReaderLSD::checkMagicNumber(unsigned magic) {\n  return true;\n}\n\nbool ReaderLSD::parseStream(std::istream& in) {\n    in.unsetf(std::ios_base::skipws);\n    boost::spirit::istream_iterator iter(in), end;\n\n    std::vector<lsd::ast::Command> commands; // ast tree\n    bool result = x3::parse(iter, end, lsd::parser::input, commands); \n\n    if (!result) {\n        LLOG_ERR << \"Parsing LSD scene failed !!!\" << std::endl;\n        return false;\n    }\n\n    if (iter != end) {\n        //unparsed = std::string(iter, end);\n        LLOG_DBG << \"Remaining unparsed: \" << std::string(iter, end);\n        return true;\n    }\n\n    for (auto& cmd : commands) {\n        boost::apply_visitor(*mpVisitor, cmd);\n    }\n\n    return true;\n}\n\nbool ReaderLSD::parseLine(const std::string& line, std::string& unparsed) {\n    unparsed = \"\";\n    auto iter = line.begin(), end = line.end();\n    \n    std::vector<lsd::ast::Command> commands; // ast tree\n    bool result = x3::parse(iter, end, lsd::parser::input, commands);\n\n    if (!result) {\n        LLOG_ERR << \"Parsing LSD scene failed !!!\" << std::endl;\n        return false;\n    }\n\n    if (iter != end) {\n        unparsed = std::string(iter, end);\n        //LOG_DBG << \"Parsed: \" << (100.0 * std::distance(line.begin(), iter) / line.size()) << \"%\";\n        //LOG_DBG << \"Remaining unparsed: \" << unparsed << \"\\n\";\n        return true;\n    }\n\n    for (auto& cmd : commands) {\n        boost::apply_visitor(*mpVisitor, cmd);\n    }\n\n    return true;\n}\n\n// factory methods\nstd::vector<std::string> *ReaderLSD::myExtensions() {\n    return &_lsd_extensions;\n}\n\nReaderBase::SharedPtr ReaderLSD::myConstructor() {\n    return ReaderBase::SharedPtr(new ReaderLSD());\n}\n\n}  // namespace lava",
			"file": "src/lava_lib/readers/reader_lsd.cpp",
			"file_size": 2997,
			"file_write_time": 132457255870731555,
			"settings":
			{
				"buffer_size": 2997,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_LOADER_LSD_H_\n#define SRC_LAVA_LIB_LOADER_LSD_H_\n\n//#include <boost/lambda/bind.hpp>\n//#include <boost/spirit/include/qi.hpp>\n//#include <boost/spirit/include/classic.hpp>\n\n#include <memory>\n\n#include \"../scene_reader_base.h\"\n#include \"session_lsd.h\"\n#include \"grammar_lsd.h\"\n\n\nnamespace lava {\n\nstatic std::vector<std::string> _lsd_extensions = {\".lsd\",\".lsd.gz\",\".lsd.zip\"};\n\ntypedef std::string::const_iterator It;\n\nclass ReaderLSD: public ReaderBase {\n public:\n \tReaderLSD();\n \t~ReaderLSD() override;\n\n    virtual void    init(std::unique_ptr<RendererIface> pRendererInterface, bool echo) override;\n\n    const char*     formatName() const override;\n    bool            checkExtension(const char *name) override;\n    void            getFileExtensions(std::vector<std::string> &extensions) const override;\n\n    // Method to check if the given magic number matches the magic number. Return true on a match.\n    bool            checkMagicNumber(unsigned magic) override;\n\n private:\n    virtual bool    isInitialized() override;\n \tvirtual bool    parseStream(std::istream& in) override;\n    virtual bool    parseLine(const std::string& line, std::string& unparsed) override;\n\n private:\n    std::unique_ptr<lsd::Visitor>   mpVisitor;\n    bool mInitialized;\n\n public:\n    // factory methods\n    static ReaderBase::SharedPtr        myConstructor();\n    static std::vector<std::string>*    myExtensions();\n};\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_LOADER_LSD_H_\n",
			"file": "src/lava_lib/readers/reader_lsd.h",
			"file_size": 1486,
			"file_write_time": 132457255612895963,
			"settings":
			{
				"buffer_size": 1486,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/max/dev/Falcor",
		"/home/max/dev/Falcor/cmake",
		"/home/max/dev/Falcor/cmake/modules",
		"/home/max/dev/Falcor/src",
		"/home/max/dev/Falcor/src/Externals",
		"/home/max/dev/Falcor/src/Externals/GLM",
		"/home/max/dev/Falcor/src/Falcor",
		"/home/max/dev/Falcor/src/Falcor/Core",
		"/home/max/dev/Falcor/src/Falcor/Core/API",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
		"/home/max/dev/Falcor/src/Falcor/Core/BufferTypes",
		"/home/max/dev/Falcor/src/Falcor/Core/Platform",
		"/home/max/dev/Falcor/src/Falcor/Core/Platform/Linux",
		"/home/max/dev/Falcor/src/Falcor/Core/Program",
		"/home/max/dev/Falcor/src/Falcor/Core/State",
		"/home/max/dev/Falcor/src/Falcor/Experimental",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/BasePasses",
		"/home/max/dev/Falcor/src/Falcor/RenderPasses",
		"/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared",
		"/home/max/dev/Falcor/src/Falcor/Scene",
		"/home/max/dev/Falcor/src/Falcor/Scene/Animation",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers",
		"/home/max/dev/Falcor/src/Falcor/Scene/Lights",
		"/home/max/dev/Falcor/src/Falcor/Scene/Material",
		"/home/max/dev/Falcor/src/Falcor/Testing",
		"/home/max/dev/Falcor/src/Falcor/Utils",
		"/home/max/dev/Falcor/src/Falcor/Utils/Math",
		"/home/max/dev/Falcor/src/Falcor/Utils/Scripting",
		"/home/max/dev/Falcor/src/houdini",
		"/home/max/dev/Falcor/src/houdini/soho",
		"/home/max/dev/Falcor/src/houdini/soho/parameters",
		"/home/max/dev/Falcor/src/houdini/soho/python2.7",
		"/home/max/dev/Falcor/src/houdini/soho/python2.7/wranglers",
		"/home/max/dev/Falcor/src/lava_cmd",
		"/home/max/dev/Falcor/src/lava_cmd/bin",
		"/home/max/dev/Falcor/src/lava_cmd/conf",
		"/home/max/dev/Falcor/src/lava_lib",
		"/home/max/dev/Falcor/src/lava_lib/houdini_display",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd",
		"/home/max/dev/Falcor/src/lava_lib/sdl_display",
		"/home/max/dev/Falcor/src/lava_utils_lib",
		"/home/max/dev/Falcor/src/Mogwai",
		"/home/max/dev/Falcor/src/Mogwai/Data",
		"/home/max/dev/Falcor/src/RenderPasses",
		"/home/max/dev/Falcor/src/RenderPasses/AccumulatePass",
		"/home/max/dev/Falcor/src/RenderPasses/BlitPass",
		"/home/max/dev/Falcor/src/RenderPasses/BSDFViewer",
		"/home/max/dev/Falcor/src/RenderPasses/CSM",
		"/home/max/dev/Falcor/src/RenderPasses/DepthPass",
		"/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer/VBuffer",
		"/home/max/dev/Falcor/src/RenderPasses/ImageLoader",
		"/home/max/dev/Falcor/src/RenderPasses/SkyBox",
		"/home/max/dev/Falcor/src/RenderPasses/ToneMapper",
		"/home/max/dev/Falcor/src/RenderPasses/Utils",
		"/home/max/dev/Falcor/src/RenderPasses/Utils/Composite",
		"/home/max/dev/Falcor/src/RenderPasses/Utils/GaussianBlur"
	],
	"file_history":
	[
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd/properties_container.h",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer_0ld/GBufferBase.cpp",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang.bak",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer.cpp",
		"/home/max/dev/Falcor/src/lava_cmd/conf/default.py",
		"/home/max/dev/Falcor/src/RenderPasses/Antialiasing/TAA/TAA.cpp",
		"/home/max/dev/Falcor/src/RenderPasses/Antialiasing/FXAA/FXAA.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/CameraController.h",
		"/home/max/dev/Falcor/src/lava_lib/scene_builder.cpp",
		"/opt/hfs17.5.460/toolkit/include/UT/UT_IStreamBuf.h",
		"/home/max/dev/Falcor/Tests/models/Eagle_custom_Normals.obj",
		"/home/max/dev/Falcor/src/USD/hgiVk/pipeline.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp",
		"/home/max/dev/Falcor/third_party/antlr4/runtime/Cpp/runtime/src/atn/LexerATNSimulator.cpp",
		"/home/max/dev/Falcor/third_party/antlr4/runtime/Cpp/runtime/src/UnbufferedTokenStream.cpp",
		"/home/max/dev/RadeonProRenderUSD/deps/RPR/RadeonProRender/inc/RadeonProRender_v2.h",
		"/home/max/dev/Falcor/src/lava/lava.h",
		"/home/max/dev/Falcor/src/lava/types.h",
		"/home/max/dev/RadeonProRenderUSD/deps/RPR/RadeonProRender/inc/RadeonProRender.cs",
		"/home/max/dev/RadeonProRenderUSD/pxr/imaging/plugin/hdRpr/python/generateRenderSettingFiles.py",
		"/home/max/dev/Falcor/third_party/USD/cmake/macros/Private.cmake",
		"/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12NvApiExDesc.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VkResource.cpp",
		"/home/max/dev/Falcor/src/Mogwai/Data/ForwardRenderer.py",
		"/home/max/dev/Falcor/src/Mogwai/Data/BSDFViewer.py",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/Include/BaseTypes.h",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Raster.slang",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/ShadingData.slang",
		"/home/max/dev/Falcor/src/RenderPasses/Antialiasing/TAA/TAA.ps.slang",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.cpp",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Algorithm/ParallelReduction.ps.slang",
		"/home/max/dev/Falcor/src/RenderPasses/BSDFViewer/BSDFViewerParams.slang",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/ParseHelper.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.cpp",
		"/home/max/dev/Falcor/third_party/slang/source/slang/slang-ir.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.h",
		"/home/max/dev/Falcor/third_party/slang/source/slang-glslang/slang-glslang.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/spirv_target_env.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/spirv-tools/CHANGES",
		"/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/SceneTypes.slang",
		"/home/max/dev/Falcor/third_party/slang/source/slang/slang-type-layout.cpp",
		"/home/max/dev/Falcor/third_party/slang/source/slang/slang-type-layout.h",
		"/home/max/dev/Falcor/third_party/slang/slang.h",
		"/home/max/dev/Falcor/third_party/slang/external/glm/test/core/core_type_aligned.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Formats.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glm/glm/gtx/compatibility.hpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFormats.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/Include/intermediate.h",
		"/home/max/dev/Falcor/third_party/slang/docs/language-reference/04-types.md",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/CMakeLists.txt",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/Test/100.frag",
		"/home/max/dev/Falcor/third_party/slang/external/glext.h",
		"/home/max/dev/Falcor/third_party/slang/docs/wave-intrinsics.md",
		"/home/max/dev/Falcor/src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cs.slang",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/ParamBlockDefinition.slang",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVersion.cpp",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphIR.cpp",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphIR.h",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.h",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/PythonImporter.h",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Sampling/SampleGenerator.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/SampleGenerators/StratifiedSamplePattern.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/SampleGenerators/CPUSampleGenerator.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/GraphicsStateObject.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/GraphicsStateObject.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/ComputeStateObject.h",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EnvProbe.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/ComputeContext.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/GpuTimer.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/LowLevelContextData.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Timing/Profiler.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp",
		"/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
		"/home/max/dev/Falcor/third_party/slang/tools/gfx/vulkan/render-vk.cpp",
		"/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.cpp",
		"/home/max/dev/Falcor/src/RenderPasses/SkyBox/SkyBox.slang",
		"/home/max/dev/Falcor/src/RenderPasses/CSM/VisibilityPass.ps.slang",
		"/home/max/dev/Falcor/src/RenderPasses/ToneMapper/ToneMapping.ps.slang",
		"/home/max/dev/Falcor/src/RenderPasses/ToneMapper/Luminance.ps.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/PythonImporter.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/SceneImporter.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/SceneImporter.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/Program.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/GraphicsProgram.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/ComputeProgram.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/GraphicsProgram.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.slang",
		"/home/max/dev/Falcor/src/Falcor/Utils/ArgList.h",
		"/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp",
		"/home/max/dev/Falcor/src/Mogwai/stdafx.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Renderer.h",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassLibrary.cpp",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassLibrary.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/UI/UserInput.h",
		"/home/max/dev/Falcor/src/Externals/GLM/glm/gtx/compatibility.hpp",
		"/home/max/dev/Falcor/src/Falcor/Core/Sample.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Window.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/Window.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/ArgList.cpp",
		"/home/max/dev/Falcor/src/Falcor/Utils/AlignedAllocator.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/DebugPasses/InvalidPixelDetectionTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/ShadingUtils/ShadingUtilsTests.cpp",
		"/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.h",
		"/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/ComputeProgram.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cs.slang",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Resource.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/home/max/dev/Falcor/src/RenderPasses/CSM",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Scene",
			"/home/max/dev/Falcor/src/houdini/soho/python2.7",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core",
			"/home/max/dev/Falcor",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor",
			"/home/max/dev/Falcor/src/lava_lib",
			"/home/max/dev/Falcor",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Externals/GLM/glm",
			"/home/max/dev/Falcor/src/lava_lib",
			"/home/max/dev/Falcor/src/Falcor/RenderGraph",
			"/home/max/dev/Falcor/src/Falcor/Scene",
			"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo",
			"/home/max/dev/Falcor/src/houdini/soho/python2.7",
			"/home/max/dev/Falcor/src/Externals/GLM/glm",
			"/opt/houdini17.5/houdini/soho",
			"/home/max/dev/Falcor/src/houdini/soho",
			"/opt/hfs17.5.460/houdini",
			"/opt/hfs17.5.460/houdini/soho",
			"/home/max/dev/Falcor/src/houdini/soho",
			"/home/max/dev/Falcor/src/houdini/soho,/opt/houdini17.5/houdini/soho",
			"/home/max/dev/Falcor/src/houdini/soho",
			"/home/max/dev/Falcor/src/houdini/soho,/opt/hfs17.5.460/houdini",
			"/home/max/dev/Falcor/src/houdini/soho",
			"/opt/houdini17.5",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/third_party/antlr4/runtime/Cpp/runtime/src",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/contrib",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/opt/USD",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/pxr/imaging/plugin/hdLava",
			"/home/max/dev/RadeonProRenderUSD",
			"/home/max/dev/Falcor",
			"/home/max/dev/RadeonProRenderUSD",
			"/home/max/dev/Falcor",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src,/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor,/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang/source",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/Build",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/",
			"/home/max/dev/Falcor/src/Mogwai",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"kMaxCasca",
			"cache",
			"Pipeline",
			"vkCreatePipeline",
			"setWorldParams",
			"setInte",
			"evalLight",
			"evalMaterial",
			"opdef:",
			"enumaratePh",
			"enumarateDevi",
			"prepareShadingData",
			"separate_points",
			"getFormatImageTiling",
			"D_DEBUG",
			"kInvali",
			"MeshLightData::kInvalidIndex",
			"Falcor::MeshLightData::kInvalidIndex",
			"kInvalidIndex",
			"FALCOR_DLL",
			"registerBinding",
			"PythonLibs",
			"pybind11::init",
			"pybind11::init<void>",
			"py::init<void>",
			"Buffer",
			"GLM_",
			"ProgramVa",
			"MeshInstanceData",
			"bitangentW",
			"packedNormalBitangent",
			"PACKED_NORMAL_BITANGENT",
			"VERTEX_PACKED_NORMAL_BITANGENT_NAME",
			"float3",
			"float3x3",
			"glm",
			"/obj/pointlight1",
			";\n",
			"onResize",
			"resize",
			"mCompilerDeps",
			"updateOffscreenFBO",
			"resizeSwapChain",
			"mpRenderContext",
			"onFrameRender",
			"pTargetFbo",
			"pRenderContext",
			"geometry_object",
			"addMesh",
			"createVao",
			"tx_coords",
			"pInfo",
			"info",
			"SohoGeometry",
			"create",
			"getTemplatePrimitive",
			"Poly",
			"unsupported run type",
			"unsupported primitive type",
			"outColour",
			"LSDmantra",
			"IPlay.",
			"mplay_label",
			"GLM_ENABLE_EXPERIMENTAL",
			"float3x3",
			"mantra_class",
			"lava_class",
			"direction",
			"class",
			"Meta Data",
			"output_",
			"MAGIC",
			"openPipe",
			"MAGIC",
			"isPreviewMode",
			"mplay",
			"MPlay",
			"lsd",
			"lv_device",
			"lv_picture",
			"lsd",
			"viewmantra",
			"-C",
			"wrangleInt",
			"vm_uvunwrapres",
			"lv_uvunwrapres",
			"ifd",
			"pre_ifdGen",
			"res",
			"VEX_DISABLE_AUXPLANE",
			"VEX_DISABLE_AUXPLANE_NONLPE",
			"MANTRA",
			"#include",
			"Mantra",
			"vm_",
			"mantra",
			"override",
			"mplay_socketport",
			"VMantra",
			"init",
			"LOG_DBG",
			"SLANG_FAILED",
			"Failed to link program",
			"should",
			"should_not_be_here",
			"gShaderDirectories",
			"getInitialShaderDirectories",
			"RenderPasses",
			".close(",
			"UT_IFStream",
			"toStdString",
			"UT_String",
			"getTemplatePrimitive",
			"());",
			"soho_compression",
			"vm_",
			"vm_inline",
			"lv_inline",
			"ComponentType",
			"init(",
			"dispatchIndirect",
			"prepareForDispatch",
			"getCSO",
			"getKernels",
			"preprocessAndCreateProgramKernels",
			"getKernels",
			"preprocessAndCreateProgramKernels",
			"link"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"unique_points",
			"geometry_name",
			"uv_coords",
			"Mesh",
			"outColor",
			"lsd",
			"LAVA_VEX_DISABLE_AUXPLANE",
			"LAVA",
			"Lava",
			"lv_",
			"lava",
			"lv_",
			"ExprValue",
			"ctx",
			"context",
			"LSD",
			"cmd_",
			"lv_",
			"li_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"ROP_Lava",
			"Lava",
			"lava",
			"mRenderer",
			"RENDERER",
			"LAVA",
			"Lava",
			"LAVA",
			"Lava",
			"LAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"Lava",
			"mSceneVersion",
			"mModelVersion",
			"mSceneVersion",
			"mRenderer",
			"Falcor::LavaRenderer",
			"Lava",
			"LAVA",
			"Lava",
			"LAVA",
			"mSceneVersion",
			"mSettingDescriptors",
			"mLastCommittedModelVersion",
			"mRenderParam",
			"LAVA",
			"Lava",
			"LAVA",
			"Lava",
			"mpDevice",
			"kPassTempLibSuffix",
			"PROJECT_DIR",
			"spData"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 109,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Core/Program/GraphicsProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2672,
						"regions":
						{
						},
						"selection":
						[
							[
								2641,
								2641
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 237,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 552128,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										205,
										213
									],
									[
										529,
										537
									],
									[
										776,
										784
									],
									[
										864,
										872
									],
									[
										1088,
										1096
									],
									[
										1107,
										1115
									],
									[
										1357,
										1365
									],
									[
										1539,
										1547
									],
									[
										1868,
										1876
									],
									[
										2025,
										2033
									],
									[
										2183,
										2191
									],
									[
										2277,
										2285
									],
									[
										2483,
										2491
									],
									[
										2657,
										2665
									],
									[
										2711,
										2719
									],
									[
										2746,
										2754
									],
									[
										2823,
										2831
									],
									[
										2863,
										2871
									],
									[
										3085,
										3093
									],
									[
										3162,
										3170
									],
									[
										3473,
										3481
									],
									[
										3493,
										3501
									],
									[
										3798,
										3806
									],
									[
										4042,
										4050
									],
									[
										4136,
										4144
									],
									[
										4300,
										4308
									],
									[
										4613,
										4621
									],
									[
										4780,
										4788
									],
									[
										5062,
										5070
									],
									[
										5259,
										5267
									],
									[
										5450,
										5458
									],
									[
										5564,
										5572
									],
									[
										5743,
										5751
									],
									[
										5834,
										5842
									],
									[
										5910,
										5918
									],
									[
										5937,
										5945
									],
									[
										5976,
										5984
									],
									[
										6001,
										6009
									],
									[
										6129,
										6137
									],
									[
										6150,
										6158
									],
									[
										6264,
										6272
									],
									[
										6410,
										6418
									],
									[
										6456,
										6464
									],
									[
										6470,
										6478
									],
									[
										6659,
										6667
									],
									[
										6721,
										6729
									],
									[
										6905,
										6913
									],
									[
										6955,
										6963
									],
									[
										6990,
										6998
									],
									[
										7320,
										7328
									],
									[
										7357,
										7365
									],
									[
										7666,
										7674
									],
									[
										7695,
										7703
									],
									[
										8083,
										8091
									],
									[
										8375,
										8383
									],
									[
										8727,
										8735
									],
									[
										8857,
										8865
									],
									[
										9154,
										9162
									],
									[
										9388,
										9396
									],
									[
										9459,
										9467
									],
									[
										9677,
										9685
									],
									[
										9707,
										9715
									],
									[
										9739,
										9747
									],
									[
										9793,
										9801
									],
									[
										9998,
										10006
									],
									[
										10050,
										10058
									],
									[
										10089,
										10097
									],
									[
										10131,
										10139
									],
									[
										10300,
										10308
									],
									[
										10348,
										10356
									],
									[
										10387,
										10395
									],
									[
										10429,
										10437
									],
									[
										10602,
										10610
									],
									[
										10670,
										10678
									],
									[
										10857,
										10865
									],
									[
										10907,
										10915
									],
									[
										10946,
										10954
									],
									[
										10985,
										10993
									],
									[
										11157,
										11165
									],
									[
										11208,
										11216
									],
									[
										11247,
										11255
									],
									[
										11286,
										11294
									],
									[
										11468,
										11476
									],
									[
										11521,
										11529
									],
									[
										11560,
										11568
									],
									[
										11599,
										11607
									],
									[
										11821,
										11829
									],
									[
										11985,
										11993
									],
									[
										12235,
										12243
									],
									[
										12332,
										12340
									],
									[
										12551,
										12559
									],
									[
										12705,
										12713
									],
									[
										12929,
										12937
									],
									[
										13003,
										13011
									],
									[
										13076,
										13084
									],
									[
										13279,
										13287
									],
									[
										13499,
										13507
									],
									[
										13678,
										13686
									],
									[
										13902,
										13910
									],
									[
										14107,
										14115
									],
									[
										14281,
										14289
									],
									[
										14471,
										14479
									],
									[
										14553,
										14561
									],
									[
										14788,
										14796
									],
									[
										15360,
										15368
									],
									[
										15560,
										15568
									],
									[
										16132,
										16140
									],
									[
										16267,
										16275
									],
									[
										16641,
										16649
									],
									[
										16913,
										16921
									],
									[
										17508,
										17516
									],
									[
										17656,
										17664
									],
									[
										17917,
										17925
									],
									[
										18183,
										18191
									],
									[
										18430,
										18438
									],
									[
										18678,
										18686
									],
									[
										18923,
										18931
									],
									[
										19169,
										19177
									],
									[
										19413,
										19421
									],
									[
										19569,
										19577
									],
									[
										19819,
										19827
									],
									[
										19972,
										19980
									],
									[
										20214,
										20222
									],
									[
										20361,
										20369
									],
									[
										20914,
										20922
									],
									[
										21060,
										21068
									],
									[
										21246,
										21254
									],
									[
										21459,
										21467
									],
									[
										21654,
										21662
									],
									[
										21791,
										21799
									],
									[
										22005,
										22013
									],
									[
										22155,
										22163
									],
									[
										22421,
										22429
									],
									[
										22692,
										22700
									],
									[
										22944,
										22952
									],
									[
										23197,
										23205
									],
									[
										23447,
										23455
									],
									[
										23698,
										23706
									],
									[
										23947,
										23955
									],
									[
										24153,
										24161
									],
									[
										24725,
										24733
									],
									[
										24860,
										24868
									],
									[
										25234,
										25242
									],
									[
										25460,
										25468
									],
									[
										25687,
										25695
									],
									[
										25919,
										25927
									],
									[
										26514,
										26522
									],
									[
										26662,
										26670
									],
									[
										26923,
										26931
									],
									[
										27189,
										27197
									],
									[
										27436,
										27444
									],
									[
										27684,
										27692
									],
									[
										27929,
										27937
									],
									[
										28175,
										28183
									],
									[
										28419,
										28427
									],
									[
										28575,
										28583
									],
									[
										28825,
										28833
									],
									[
										28978,
										28986
									],
									[
										29220,
										29228
									],
									[
										29367,
										29375
									],
									[
										29920,
										29928
									],
									[
										30066,
										30074
									],
									[
										30252,
										30260
									],
									[
										30465,
										30473
									],
									[
										30660,
										30668
									],
									[
										30797,
										30805
									],
									[
										31011,
										31019
									],
									[
										31161,
										31169
									],
									[
										31427,
										31435
									],
									[
										31698,
										31706
									],
									[
										31950,
										31958
									],
									[
										32203,
										32211
									],
									[
										32453,
										32461
									],
									[
										32704,
										32712
									],
									[
										32953,
										32961
									],
									[
										33156,
										33164
									],
									[
										33728,
										33736
									],
									[
										33986,
										33996
									],
									[
										34221,
										34231
									],
									[
										34453,
										34463
									],
									[
										34820,
										34834
									],
									[
										34850,
										34864
									],
									[
										35213,
										35227
									],
									[
										35541,
										35555
									],
									[
										35818,
										35832
									],
									[
										36156,
										36170
									],
									[
										36529,
										36543
									],
									[
										36559,
										36573
									],
									[
										36922,
										36936
									],
									[
										37252,
										37266
									],
									[
										37629,
										37631
									],
									[
										37853,
										37855
									],
									[
										38108,
										38110
									],
									[
										38159,
										38161
									],
									[
										38459,
										38469
									],
									[
										38878,
										38888
									],
									[
										39091,
										39094
									],
									[
										39273,
										39276
									],
									[
										39568,
										39578
									],
									[
										39753,
										39763
									],
									[
										40011,
										40021
									],
									[
										40248,
										40258
									],
									[
										40535,
										40545
									],
									[
										40747,
										40757
									],
									[
										40954,
										40964
									],
									[
										41195,
										41205
									],
									[
										41444,
										41454
									],
									[
										41705,
										41715
									],
									[
										41940,
										41950
									],
									[
										42148,
										42158
									],
									[
										42359,
										42369
									],
									[
										42414,
										42424
									],
									[
										42683,
										42693
									],
									[
										42983,
										42993
									],
									[
										43189,
										43199
									],
									[
										43442,
										43452
									],
									[
										43687,
										43696
									],
									[
										43710,
										43719
									],
									[
										44089,
										44098
									],
									[
										44388,
										44397
									],
									[
										44599,
										44608
									],
									[
										44801,
										44810
									],
									[
										45080,
										45089
									],
									[
										45378,
										45387
									],
									[
										45583,
										45592
									],
									[
										45792,
										45801
									],
									[
										46104,
										46107
									],
									[
										46286,
										46289
									],
									[
										46517,
										46530
									],
									[
										46688,
										46701
									],
									[
										46997,
										47010
									],
									[
										47184,
										47197
									],
									[
										47522,
										47532
									],
									[
										47786,
										47798
									],
									[
										48108,
										48116
									],
									[
										48152,
										48160
									],
									[
										48396,
										48404
									],
									[
										48569,
										48577
									],
									[
										49058,
										49066
									],
									[
										49698,
										49706
									],
									[
										49742,
										49750
									],
									[
										50115,
										50126
									],
									[
										50518,
										50524
									],
									[
										50610,
										50616
									],
									[
										50720,
										50726
									],
									[
										50813,
										50819
									],
									[
										51154,
										51160
									],
									[
										51230,
										51236
									],
									[
										51310,
										51316
									],
									[
										51381,
										51387
									],
									[
										51449,
										51455
									],
									[
										51521,
										51527
									],
									[
										51589,
										51595
									],
									[
										51671,
										51677
									],
									[
										52050,
										52056
									],
									[
										52189,
										52195
									],
									[
										52260,
										52266
									],
									[
										52476,
										52482
									],
									[
										52773,
										52782
									],
									[
										53054,
										53080
									],
									[
										53375,
										53395
									],
									[
										53810,
										53830
									],
									[
										54099,
										54119
									],
									[
										54366,
										54372
									],
									[
										54619,
										54625
									],
									[
										54797,
										54803
									],
									[
										55089,
										55095
									],
									[
										55303,
										55309
									],
									[
										55611,
										55617
									],
									[
										55832,
										55838
									],
									[
										56134,
										56140
									],
									[
										56448,
										56454
									],
									[
										56660,
										56666
									],
									[
										56747,
										56753
									],
									[
										56950,
										56956
									],
									[
										57303,
										57309
									],
									[
										57397,
										57403
									],
									[
										57719,
										57725
									],
									[
										57991,
										58000
									],
									[
										58381,
										58390
									],
									[
										58710,
										58719
									],
									[
										59073,
										59086
									],
									[
										59280,
										59293
									],
									[
										59324,
										59337
									],
									[
										59565,
										59578
									],
									[
										59638,
										59651
									],
									[
										59777,
										59790
									],
									[
										59867,
										59880
									],
									[
										59913,
										59926
									],
									[
										60189,
										60202
									],
									[
										60311,
										60324
									],
									[
										60387,
										60400
									],
									[
										60739,
										60752
									],
									[
										60802,
										60815
									],
									[
										61050,
										61063
									],
									[
										61305,
										61318
									],
									[
										61626,
										61634
									],
									[
										61736,
										61744
									],
									[
										62068,
										62076
									],
									[
										62447,
										62450
									],
									[
										62602,
										62605
									],
									[
										62795,
										62798
									],
									[
										62999,
										63002
									],
									[
										63212,
										63215
									],
									[
										63389,
										63392
									],
									[
										63783,
										63791
									],
									[
										63827,
										63835
									],
									[
										64071,
										64079
									],
									[
										64244,
										64252
									],
									[
										64733,
										64741
									],
									[
										65373,
										65381
									],
									[
										65417,
										65425
									],
									[
										65810,
										65816
									],
									[
										66203,
										66209
									],
									[
										66373,
										66379
									],
									[
										66700,
										66706
									],
									[
										66745,
										66751
									],
									[
										67132,
										67138
									],
									[
										67308,
										67314
									],
									[
										67556,
										67562
									],
									[
										67855,
										67861
									],
									[
										68104,
										68110
									],
									[
										68433,
										68439
									],
									[
										68656,
										68662
									],
									[
										68853,
										68859
									],
									[
										69232,
										69238
									],
									[
										69691,
										69697
									],
									[
										69710,
										69716
									],
									[
										69884,
										69890
									],
									[
										69897,
										69903
									],
									[
										70189,
										70195
									],
									[
										70365,
										70371
									],
									[
										70569,
										70575
									],
									[
										70910,
										70916
									],
									[
										71023,
										71029
									],
									[
										71220,
										71226
									],
									[
										71577,
										71583
									],
									[
										71671,
										71677
									],
									[
										71779,
										71785
									],
									[
										72022,
										72028
									],
									[
										72435,
										72441
									],
									[
										72525,
										72531
									],
									[
										72776,
										72782
									],
									[
										72795,
										72801
									],
									[
										73106,
										73112
									],
									[
										73119,
										73125
									],
									[
										73386,
										73392
									],
									[
										73405,
										73411
									],
									[
										73693,
										73699
									],
									[
										73706,
										73712
									],
									[
										73953,
										73959
									],
									[
										74276,
										74282
									],
									[
										74318,
										74324
									],
									[
										74566,
										74572
									],
									[
										74827,
										74833
									],
									[
										75104,
										75110
									],
									[
										75309,
										75315
									],
									[
										75707,
										75713
									],
									[
										76030,
										76036
									],
									[
										76068,
										76074
									],
									[
										76451,
										76457
									],
									[
										76539,
										76545
									],
									[
										76717,
										76723
									],
									[
										76941,
										76947
									],
									[
										77029,
										77035
									],
									[
										77208,
										77214
									],
									[
										77412,
										77418
									],
									[
										77617,
										77623
									],
									[
										77637,
										77643
									],
									[
										77780,
										77786
									],
									[
										77984,
										77990
									],
									[
										78158,
										78164
									],
									[
										78178,
										78184
									],
									[
										78351,
										78357
									],
									[
										78367,
										78373
									],
									[
										78680,
										78686
									],
									[
										78725,
										78731
									],
									[
										79001,
										79007
									],
									[
										79021,
										79027
									],
									[
										79051,
										79057
									],
									[
										79116,
										79122
									],
									[
										79242,
										79248
									],
									[
										79337,
										79343
									],
									[
										79484,
										79490
									],
									[
										79501,
										79507
									],
									[
										79531,
										79537
									],
									[
										79753,
										79759
									],
									[
										79925,
										79931
									],
									[
										80074,
										80080
									],
									[
										80127,
										80133
									],
									[
										80422,
										80428
									],
									[
										80811,
										80817
									],
									[
										81038,
										81044
									],
									[
										81440,
										81446
									],
									[
										81660,
										81666
									],
									[
										81875,
										81881
									],
									[
										81972,
										81978
									],
									[
										82237,
										82243
									],
									[
										82369,
										82375
									],
									[
										82392,
										82398
									],
									[
										82687,
										82693
									],
									[
										82713,
										82719
									],
									[
										83194,
										83200
									],
									[
										83554,
										83560
									],
									[
										83914,
										83920
									],
									[
										84296,
										84302
									],
									[
										84319,
										84325
									],
									[
										84543,
										84549
									],
									[
										84947,
										84953
									],
									[
										85361,
										85367
									],
									[
										85443,
										85449
									],
									[
										85924,
										85930
									],
									[
										86231,
										86237
									],
									[
										86589,
										86595
									],
									[
										86606,
										86612
									],
									[
										86634,
										86640
									],
									[
										86651,
										86657
									],
									[
										86680,
										86686
									],
									[
										86700,
										86706
									],
									[
										86961,
										86967
									],
									[
										87212,
										87218
									],
									[
										87491,
										87497
									],
									[
										87807,
										87813
									],
									[
										87928,
										87934
									],
									[
										88068,
										88074
									],
									[
										88134,
										88140
									],
									[
										88266,
										88272
									],
									[
										88480,
										88486
									],
									[
										88927,
										88933
									],
									[
										88946,
										88952
									],
									[
										89234,
										89240
									],
									[
										89247,
										89253
									],
									[
										89427,
										89433
									],
									[
										89449,
										89455
									],
									[
										89471,
										89477
									],
									[
										89608,
										89614
									],
									[
										89958,
										89964
									],
									[
										89977,
										89983
									],
									[
										89999,
										90005
									],
									[
										90021,
										90027
									],
									[
										90183,
										90189
									],
									[
										90248,
										90254
									],
									[
										90285,
										90291
									],
									[
										90517,
										90523
									],
									[
										90783,
										90789
									],
									[
										91166,
										91172
									],
									[
										91185,
										91191
									],
									[
										91256,
										91262
									],
									[
										91601,
										91607
									],
									[
										92060,
										92066
									],
									[
										92728,
										92734
									],
									[
										93047,
										93053
									],
									[
										93066,
										93072
									],
									[
										93459,
										93465
									],
									[
										93478,
										93484
									],
									[
										93548,
										93554
									],
									[
										93769,
										93775
									],
									[
										93788,
										93794
									],
									[
										94128,
										94134
									],
									[
										94147,
										94153
									],
									[
										94531,
										94537
									],
									[
										94550,
										94556
									],
									[
										94807,
										94813
									],
									[
										94826,
										94832
									],
									[
										95214,
										95220
									],
									[
										95464,
										95470
									],
									[
										95507,
										95513
									],
									[
										95864,
										95870
									],
									[
										96084,
										96090
									],
									[
										96109,
										96115
									],
									[
										96195,
										96201
									],
									[
										96229,
										96235
									],
									[
										96769,
										96775
									],
									[
										97203,
										97209
									],
									[
										97642,
										97648
									],
									[
										97751,
										97757
									],
									[
										97996,
										98002
									],
									[
										98163,
										98169
									],
									[
										98195,
										98201
									],
									[
										98416,
										98422
									],
									[
										98662,
										98668
									],
									[
										98808,
										98814
									],
									[
										99196,
										99202
									],
									[
										99310,
										99316
									],
									[
										99427,
										99433
									],
									[
										99666,
										99672
									],
									[
										100034,
										100040
									],
									[
										100267,
										100273
									],
									[
										100542,
										100548
									],
									[
										100859,
										100865
									],
									[
										100872,
										100878
									],
									[
										101085,
										101091
									],
									[
										101167,
										101173
									],
									[
										101537,
										101543
									],
									[
										101839,
										101845
									],
									[
										102058,
										102064
									],
									[
										102332,
										102338
									],
									[
										102345,
										102351
									],
									[
										102547,
										102553
									],
									[
										102727,
										102733
									],
									[
										102958,
										102964
									],
									[
										103238,
										103244
									],
									[
										103505,
										103511
									],
									[
										103950,
										103956
									],
									[
										104158,
										104164
									],
									[
										104336,
										104342
									],
									[
										104638,
										104644
									],
									[
										104650,
										104656
									],
									[
										104661,
										104667
									],
									[
										104808,
										104814
									],
									[
										104823,
										104829
									],
									[
										104853,
										104859
									],
									[
										105152,
										105158
									],
									[
										105163,
										105169
									],
									[
										105265,
										105271
									],
									[
										105321,
										105327
									],
									[
										105333,
										105339
									],
									[
										105344,
										105350
									],
									[
										105418,
										105424
									],
									[
										105527,
										105533
									],
									[
										105542,
										105548
									],
									[
										105572,
										105578
									],
									[
										105737,
										105743
									],
									[
										105748,
										105754
									],
									[
										105897,
										105903
									],
									[
										106029,
										106035
									],
									[
										106041,
										106047
									],
									[
										106052,
										106058
									],
									[
										106126,
										106132
									],
									[
										106247,
										106253
									],
									[
										106262,
										106268
									],
									[
										106292,
										106298
									],
									[
										106457,
										106463
									],
									[
										106468,
										106474
									],
									[
										106608,
										106614
									],
									[
										106626,
										106632
									],
									[
										106637,
										106643
									],
									[
										106676,
										106682
									],
									[
										106897,
										106903
									],
									[
										107029,
										107035
									],
									[
										107041,
										107047
									],
									[
										107052,
										107058
									],
									[
										107126,
										107132
									],
									[
										107247,
										107253
									],
									[
										107262,
										107268
									],
									[
										107292,
										107298
									],
									[
										107457,
										107463
									],
									[
										107468,
										107474
									],
									[
										107608,
										107614
									],
									[
										107626,
										107632
									],
									[
										107637,
										107643
									],
									[
										107676,
										107682
									],
									[
										107891,
										107897
									],
									[
										108001,
										108007
									],
									[
										108013,
										108019
									],
									[
										108024,
										108030
									],
									[
										108120,
										108126
									],
									[
										108154,
										108160
									],
									[
										108345,
										108351
									],
									[
										108486,
										108492
									],
									[
										108501,
										108507
									],
									[
										108531,
										108537
									],
									[
										108795,
										108801
									],
									[
										108936,
										108942
									],
									[
										109158,
										109164
									],
									[
										109344,
										109350
									],
									[
										109355,
										109361
									],
									[
										109477,
										109483
									],
									[
										109686,
										109692
									],
									[
										109698,
										109704
									],
									[
										109709,
										109715
									],
									[
										109810,
										109816
									],
									[
										109897,
										109903
									],
									[
										110032,
										110038
									],
									[
										110047,
										110053
									],
									[
										110077,
										110083
									],
									[
										110345,
										110351
									],
									[
										110486,
										110492
									],
									[
										110644,
										110650
									],
									[
										110655,
										110661
									],
									[
										110833,
										110839
									],
									[
										110956,
										110962
									],
									[
										110968,
										110974
									],
									[
										110979,
										110985
									],
									[
										111018,
										111024
									],
									[
										111353,
										111359
									],
									[
										111365,
										111371
									],
									[
										111376,
										111382
									],
									[
										111529,
										111535
									],
									[
										111933,
										111939
									],
									[
										111948,
										111954
									],
									[
										111978,
										111984
									],
									[
										112148,
										112154
									],
									[
										112159,
										112165
									],
									[
										112339,
										112345
									],
									[
										112365,
										112371
									],
									[
										112376,
										112382
									],
									[
										112658,
										112664
									],
									[
										112724,
										112730
									],
									[
										112910,
										112916
									],
									[
										113211,
										113217
									],
									[
										113295,
										113301
									],
									[
										113382,
										113388
									],
									[
										113576,
										113582
									],
									[
										113593,
										113599
									],
									[
										113609,
										113615
									],
									[
										113624,
										113630
									],
									[
										113642,
										113648
									],
									[
										113854,
										113860
									],
									[
										113871,
										113877
									],
									[
										114079,
										114085
									],
									[
										114096,
										114102
									],
									[
										114302,
										114308
									],
									[
										114317,
										114323
									],
									[
										114370,
										114376
									],
									[
										114543,
										114549
									],
									[
										114558,
										114564
									],
									[
										114614,
										114620
									],
									[
										114810,
										114816
									],
									[
										115006,
										115012
									],
									[
										115280,
										115286
									],
									[
										115324,
										115330
									],
									[
										115388,
										115394
									],
									[
										115430,
										115436
									],
									[
										115614,
										115620
									],
									[
										115656,
										115662
									],
									[
										115863,
										115869
									],
									[
										115893,
										115899
									],
									[
										115935,
										115941
									],
									[
										116129,
										116135
									],
									[
										116171,
										116177
									],
									[
										116377,
										116383
									],
									[
										116527,
										116533
									],
									[
										116738,
										116744
									],
									[
										116946,
										116952
									],
									[
										117126,
										117132
									],
									[
										117440,
										117446
									],
									[
										117640,
										117646
									],
									[
										117678,
										117684
									],
									[
										117981,
										117987
									],
									[
										118291,
										118297
									],
									[
										118522,
										118528
									],
									[
										118842,
										118848
									],
									[
										118886,
										118892
									],
									[
										119082,
										119088
									],
									[
										119173,
										119179
									],
									[
										119354,
										119360
									],
									[
										119616,
										119622
									],
									[
										119627,
										119633
									],
									[
										119826,
										119832
									],
									[
										120169,
										120175
									],
									[
										120343,
										120349
									],
									[
										120554,
										120560
									],
									[
										120680,
										120686
									],
									[
										120893,
										120899
									],
									[
										121055,
										121061
									],
									[
										121444,
										121450
									],
									[
										121575,
										121581
									],
									[
										121917,
										121923
									],
									[
										122110,
										122116
									],
									[
										122299,
										122305
									],
									[
										122310,
										122316
									],
									[
										122489,
										122495
									],
									[
										122524,
										122530
									],
									[
										122712,
										122718
									],
									[
										122734,
										122740
									],
									[
										122854,
										122860
									],
									[
										122901,
										122907
									],
									[
										122925,
										122931
									],
									[
										122977,
										122983
									],
									[
										123150,
										123156
									],
									[
										123344,
										123350
									],
									[
										123365,
										123371
									],
									[
										123751,
										123757
									],
									[
										123769,
										123775
									],
									[
										124114,
										124120
									],
									[
										124132,
										124138
									],
									[
										124333,
										124339
									],
									[
										124379,
										124385
									],
									[
										124402,
										124408
									],
									[
										124702,
										124708
									],
									[
										124771,
										124777
									],
									[
										124848,
										124854
									],
									[
										125220,
										125226
									],
									[
										125241,
										125247
									],
									[
										125335,
										125341
									],
									[
										125374,
										125380
									],
									[
										125413,
										125419
									],
									[
										125454,
										125460
									],
									[
										125650,
										125656
									],
									[
										125674,
										125680
									],
									[
										125698,
										125704
									],
									[
										125722,
										125728
									],
									[
										125754,
										125760
									],
									[
										125880,
										125886
									],
									[
										125925,
										125931
									],
									[
										125970,
										125976
									],
									[
										126184,
										126190
									],
									[
										126197,
										126203
									],
									[
										126222,
										126228
									],
									[
										126288,
										126294
									],
									[
										126376,
										126382
									],
									[
										126579,
										126585
									],
									[
										126716,
										126722
									],
									[
										126951,
										126957
									],
									[
										126967,
										126973
									],
									[
										126983,
										126989
									],
									[
										126999,
										127005
									],
									[
										127205,
										127211
									],
									[
										127480,
										127486
									],
									[
										127517,
										127523
									],
									[
										127540,
										127546
									],
									[
										127585,
										127591
									],
									[
										127602,
										127608
									],
									[
										127842,
										127848
									],
									[
										127860,
										127866
									],
									[
										127918,
										127924
									],
									[
										127944,
										127950
									],
									[
										127970,
										127976
									],
									[
										128140,
										128146
									],
									[
										128280,
										128286
									],
									[
										128572,
										128578
									],
									[
										128626,
										128632
									],
									[
										128802,
										128808
									],
									[
										128871,
										128877
									],
									[
										129172,
										129178
									],
									[
										129190,
										129196
									],
									[
										129245,
										129251
									],
									[
										129335,
										129341
									],
									[
										129361,
										129367
									],
									[
										129387,
										129393
									],
									[
										129716,
										129722
									],
									[
										129765,
										129771
									],
									[
										129814,
										129820
									],
									[
										129874,
										129880
									],
									[
										129934,
										129940
									],
									[
										130061,
										130067
									],
									[
										130419,
										130425
									],
									[
										130463,
										130469
									],
									[
										130851,
										130857
									],
									[
										130933,
										130939
									],
									[
										131029,
										131035
									],
									[
										131133,
										131139
									],
									[
										131469,
										131475
									],
									[
										131747,
										131753
									],
									[
										131899,
										131905
									],
									[
										132102,
										132108
									],
									[
										132165,
										132171
									],
									[
										132289,
										132295
									],
									[
										132665,
										132671
									],
									[
										132833,
										132839
									],
									[
										132963,
										132969
									],
									[
										133087,
										133093
									],
									[
										133165,
										133171
									],
									[
										133364,
										133370
									],
									[
										133706,
										133712
									],
									[
										134199,
										134205
									],
									[
										134232,
										134238
									],
									[
										134356,
										134362
									],
									[
										134605,
										134611
									],
									[
										134934,
										134940
									],
									[
										135261,
										135267
									],
									[
										135308,
										135314
									],
									[
										135585,
										135591
									],
									[
										135881,
										135887
									],
									[
										136220,
										136226
									],
									[
										136542,
										136548
									],
									[
										136809,
										136815
									],
									[
										136904,
										136910
									],
									[
										137231,
										137237
									],
									[
										137358,
										137364
									],
									[
										137652,
										137658
									],
									[
										137738,
										137744
									],
									[
										138020,
										138026
									],
									[
										138041,
										138047
									],
									[
										138077,
										138083
									],
									[
										138094,
										138100
									],
									[
										138289,
										138295
									],
									[
										138550,
										138556
									],
									[
										138607,
										138613
									],
									[
										138823,
										138829
									],
									[
										139156,
										139162
									],
									[
										139528,
										139534
									],
									[
										139675,
										139681
									],
									[
										139825,
										139831
									],
									[
										140097,
										140103
									],
									[
										140254,
										140260
									],
									[
										140413,
										140419
									],
									[
										140586,
										140592
									],
									[
										140761,
										140767
									],
									[
										140934,
										140940
									],
									[
										141106,
										141112
									],
									[
										141262,
										141268
									],
									[
										141469,
										141475
									],
									[
										141518,
										141524
									],
									[
										141614,
										141620
									],
									[
										141823,
										141829
									],
									[
										142211,
										142217
									],
									[
										142597,
										142603
									],
									[
										142837,
										142843
									],
									[
										143138,
										143144
									],
									[
										143194,
										143200
									],
									[
										143324,
										143330
									],
									[
										143508,
										143514
									],
									[
										143568,
										143574
									],
									[
										143629,
										143635
									],
									[
										143678,
										143684
									],
									[
										143723,
										143729
									],
									[
										143842,
										143848
									],
									[
										144023,
										144029
									],
									[
										144313,
										144319
									],
									[
										144373,
										144379
									],
									[
										144434,
										144440
									],
									[
										144501,
										144507
									],
									[
										144568,
										144574
									],
									[
										144956,
										144962
									],
									[
										145138,
										145144
									],
									[
										145299,
										145305
									],
									[
										145629,
										145635
									],
									[
										145663,
										145669
									],
									[
										145892,
										145898
									],
									[
										145926,
										145932
									],
									[
										146077,
										146083
									],
									[
										146111,
										146117
									],
									[
										146268,
										146274
									],
									[
										146302,
										146308
									],
									[
										146534,
										146540
									],
									[
										146568,
										146574
									],
									[
										146915,
										146921
									],
									[
										146949,
										146955
									],
									[
										147520,
										147526
									],
									[
										147684,
										147690
									],
									[
										147750,
										147756
									],
									[
										147959,
										147965
									],
									[
										148022,
										148028
									],
									[
										148088,
										148094
									],
									[
										148153,
										148159
									],
									[
										148398,
										148404
									],
									[
										148731,
										148737
									],
									[
										148797,
										148803
									],
									[
										148873,
										148879
									],
									[
										149161,
										149167
									],
									[
										149523,
										149529
									],
									[
										149591,
										149597
									],
									[
										149661,
										149667
									],
									[
										150094,
										150100
									],
									[
										150112,
										150118
									],
									[
										150451,
										150457
									],
									[
										150468,
										150474
									],
									[
										150500,
										150506
									],
									[
										150518,
										150524
									],
									[
										150550,
										150556
									],
									[
										150568,
										150574
									],
									[
										150728,
										150734
									],
									[
										151029,
										151035
									],
									[
										151314,
										151320
									],
									[
										151605,
										151611
									],
									[
										151902,
										151908
									],
									[
										152129,
										152135
									],
									[
										152165,
										152171
									],
									[
										152205,
										152211
									],
									[
										152452,
										152458
									],
									[
										152649,
										152655
									],
									[
										152681,
										152687
									],
									[
										152945,
										152951
									],
									[
										153210,
										153216
									],
									[
										153476,
										153482
									],
									[
										153731,
										153737
									],
									[
										153845,
										153851
									],
									[
										154048,
										154054
									],
									[
										154198,
										154204
									],
									[
										154387,
										154393
									],
									[
										154559,
										154565
									],
									[
										154751,
										154757
									],
									[
										154919,
										154925
									],
									[
										155062,
										155068
									],
									[
										155112,
										155118
									],
									[
										155204,
										155210
									],
									[
										155423,
										155429
									],
									[
										155643,
										155649
									],
									[
										155776,
										155782
									],
									[
										155958,
										155964
									],
									[
										156023,
										156029
									],
									[
										156257,
										156263
									],
									[
										156289,
										156295
									],
									[
										156565,
										156571
									],
									[
										156690,
										156696
									],
									[
										156826,
										156832
									],
									[
										157142,
										157148
									],
									[
										157303,
										157309
									],
									[
										157528,
										157534
									],
									[
										157726,
										157732
									],
									[
										157886,
										157892
									],
									[
										158034,
										158040
									],
									[
										158259,
										158265
									],
									[
										158380,
										158386
									],
									[
										158567,
										158573
									],
									[
										158858,
										158864
									],
									[
										158888,
										158894
									],
									[
										159082,
										159088
									],
									[
										159112,
										159118
									],
									[
										159365,
										159371
									],
									[
										159395,
										159401
									],
									[
										159624,
										159630
									],
									[
										159944,
										159950
									],
									[
										159974,
										159980
									],
									[
										160138,
										160144
									],
									[
										160168,
										160174
									],
									[
										160607,
										160613
									],
									[
										160817,
										160823
									],
									[
										160951,
										160957
									],
									[
										161260,
										161266
									],
									[
										161404,
										161410
									],
									[
										161637,
										161643
									],
									[
										161659,
										161665
									],
									[
										161721,
										161727
									],
									[
										161743,
										161749
									],
									[
										161928,
										161934
									],
									[
										161942,
										161948
									],
									[
										161957,
										161963
									],
									[
										161975,
										161981
									],
									[
										162039,
										162045
									],
									[
										162057,
										162063
									],
									[
										162180,
										162186
									],
									[
										162220,
										162226
									],
									[
										162250,
										162256
									],
									[
										162394,
										162400
									],
									[
										162405,
										162411
									],
									[
										162557,
										162563
									],
									[
										162594,
										162600
									],
									[
										162729,
										162735
									],
									[
										162865,
										162871
									],
									[
										163005,
										163011
									],
									[
										163035,
										163041
									],
									[
										163101,
										163107
									],
									[
										163252,
										163258
									],
									[
										163430,
										163436
									],
									[
										163440,
										163446
									],
									[
										163575,
										163581
									],
									[
										163769,
										163775
									],
									[
										163833,
										163839
									],
									[
										163994,
										164000
									],
									[
										164216,
										164222
									],
									[
										164226,
										164232
									],
									[
										164309,
										164315
									],
									[
										164483,
										164489
									],
									[
										164547,
										164553
									],
									[
										164735,
										164741
									],
									[
										164746,
										164752
									],
									[
										164898,
										164904
									],
									[
										164909,
										164915
									],
									[
										165058,
										165064
									],
									[
										165246,
										165252
									],
									[
										165348,
										165354
									],
									[
										165520,
										165526
									],
									[
										165603,
										165609
									],
									[
										165882,
										165888
									],
									[
										166157,
										166163
									],
									[
										166366,
										166372
									],
									[
										166453,
										166459
									],
									[
										166482,
										166488
									],
									[
										166492,
										166498
									],
									[
										166608,
										166614
									],
									[
										166638,
										166644
									],
									[
										166648,
										166654
									],
									[
										166757,
										166763
									],
									[
										166844,
										166850
									],
									[
										167046,
										167052
									],
									[
										167344,
										167350
									],
									[
										167646,
										167652
									],
									[
										167714,
										167720
									],
									[
										167882,
										167888
									],
									[
										168080,
										168086
									],
									[
										168310,
										168316
									],
									[
										168669,
										168675
									],
									[
										168691,
										168697
									],
									[
										168702,
										168708
									],
									[
										168813,
										168819
									],
									[
										169052,
										169058
									],
									[
										169332,
										169338
									],
									[
										169499,
										169505
									],
									[
										169638,
										169644
									],
									[
										169876,
										169882
									],
									[
										170143,
										170149
									],
									[
										170406,
										170412
									],
									[
										170637,
										170643
									],
									[
										170926,
										170932
									],
									[
										171059,
										171065
									],
									[
										171229,
										171235
									],
									[
										171367,
										171373
									],
									[
										171901,
										171907
									],
									[
										171935,
										171941
									],
									[
										172258,
										172264
									],
									[
										172292,
										172298
									],
									[
										172521,
										172527
									],
									[
										172568,
										172574
									],
									[
										172618,
										172624
									],
									[
										172819,
										172825
									],
									[
										172836,
										172842
									],
									[
										173012,
										173018
									],
									[
										173029,
										173035
									],
									[
										173199,
										173205
									],
									[
										173213,
										173219
									],
									[
										173561,
										173567
									],
									[
										173578,
										173584
									],
									[
										173841,
										173847
									],
									[
										173858,
										173864
									],
									[
										174129,
										174135
									],
									[
										174143,
										174149
									],
									[
										174330,
										174336
									],
									[
										174366,
										174372
									],
									[
										174408,
										174414
									],
									[
										174439,
										174445
									],
									[
										174476,
										174482
									],
									[
										174509,
										174515
									],
									[
										174739,
										174745
									],
									[
										174794,
										174800
									],
									[
										175019,
										175025
									],
									[
										175178,
										175184
									],
									[
										175236,
										175242
									],
									[
										175355,
										175361
									],
									[
										175411,
										175417
									],
									[
										175714,
										175720
									],
									[
										175954,
										175960
									],
									[
										176188,
										176194
									],
									[
										176224,
										176230
									],
									[
										176719,
										176725
									],
									[
										176741,
										176747
									],
									[
										177118,
										177124
									],
									[
										177140,
										177146
									],
									[
										177568,
										177574
									],
									[
										177688,
										177694
									],
									[
										177710,
										177716
									],
									[
										178074,
										178080
									],
									[
										178241,
										178247
									],
									[
										178263,
										178269
									],
									[
										178617,
										178623
									],
									[
										178636,
										178642
									],
									[
										178654,
										178660
									],
									[
										178841,
										178847
									],
									[
										178860,
										178866
									],
									[
										178878,
										178884
									],
									[
										179116,
										179122
									],
									[
										179129,
										179135
									],
									[
										179163,
										179169
									],
									[
										179175,
										179181
									],
									[
										179209,
										179215
									],
									[
										179225,
										179231
									],
									[
										179490,
										179496
									],
									[
										179549,
										179555
									],
									[
										179669,
										179675
									],
									[
										179693,
										179699
									],
									[
										179715,
										179721
									],
									[
										180075,
										180081
									],
									[
										180090,
										180096
									],
									[
										180105,
										180111
									],
									[
										180587,
										180593
									],
									[
										180611,
										180617
									],
									[
										180633,
										180639
									],
									[
										180930,
										180936
									],
									[
										180949,
										180955
									],
									[
										180967,
										180973
									],
									[
										181154,
										181160
									],
									[
										181190,
										181196
									],
									[
										181224,
										181230
									],
									[
										181389,
										181395
									],
									[
										181473,
										181479
									],
									[
										181613,
										181619
									],
									[
										181908,
										181914
									],
									[
										181988,
										181994
									],
									[
										182049,
										182055
									],
									[
										182110,
										182116
									],
									[
										182326,
										182332
									],
									[
										182494,
										182500
									],
									[
										182555,
										182561
									],
									[
										182616,
										182622
									],
									[
										182677,
										182683
									],
									[
										182728,
										182734
									],
									[
										182989,
										182995
									],
									[
										183237,
										183243
									],
									[
										183297,
										183303
									],
									[
										183617,
										183623
									],
									[
										183715,
										183721
									],
									[
										183896,
										183902
									],
									[
										184165,
										184171
									],
									[
										184397,
										184403
									],
									[
										184610,
										184616
									],
									[
										184949,
										184955
									],
									[
										185266,
										185272
									],
									[
										185481,
										185487
									],
									[
										185662,
										185668
									],
									[
										185963,
										185969
									],
									[
										186191,
										186197
									],
									[
										186215,
										186221
									],
									[
										186451,
										186457
									],
									[
										186488,
										186494
									],
									[
										186519,
										186525
									],
									[
										186695,
										186701
									],
									[
										187018,
										187024
									],
									[
										187064,
										187070
									],
									[
										187469,
										187475
									],
									[
										187529,
										187535
									],
									[
										187661,
										187667
									],
									[
										187678,
										187684
									],
									[
										187898,
										187904
									],
									[
										188109,
										188115
									],
									[
										188406,
										188412
									],
									[
										188439,
										188445
									],
									[
										188465,
										188471
									],
									[
										188967,
										188973
									],
									[
										188988,
										188994
									],
									[
										189195,
										189201
									],
									[
										189216,
										189222
									],
									[
										189348,
										189354
									],
									[
										189374,
										189380
									],
									[
										189672,
										189678
									],
									[
										189718,
										189724
									],
									[
										189895,
										189901
									],
									[
										190185,
										190191
									],
									[
										190323,
										190329
									],
									[
										190700,
										190706
									],
									[
										190711,
										190717
									],
									[
										190930,
										190936
									],
									[
										191018,
										191024
									],
									[
										191307,
										191313
									],
									[
										191747,
										191753
									],
									[
										192067,
										192073
									],
									[
										192110,
										192116
									],
									[
										192665,
										192671
									],
									[
										192821,
										192827
									],
									[
										192977,
										192983
									],
									[
										193738,
										193744
									],
									[
										193799,
										193805
									],
									[
										193858,
										193864
									],
									[
										193972,
										193978
									],
									[
										194000,
										194006
									],
									[
										194142,
										194148
									],
									[
										194364,
										194370
									],
									[
										194572,
										194578
									],
									[
										194658,
										194664
									],
									[
										194756,
										194762
									],
									[
										194860,
										194866
									],
									[
										195006,
										195012
									],
									[
										195202,
										195208
									],
									[
										195279,
										195285
									],
									[
										195357,
										195363
									],
									[
										195439,
										195445
									],
									[
										195718,
										195724
									],
									[
										195836,
										195842
									],
									[
										195954,
										195960
									],
									[
										196066,
										196072
									],
									[
										196179,
										196185
									],
									[
										196337,
										196343
									],
									[
										196502,
										196508
									],
									[
										196600,
										196606
									],
									[
										196703,
										196709
									],
									[
										196836,
										196842
									],
									[
										197044,
										197050
									],
									[
										197063,
										197069
									],
									[
										197095,
										197101
									],
									[
										197215,
										197221
									],
									[
										197264,
										197270
									],
									[
										197388,
										197394
									],
									[
										197598,
										197604
									],
									[
										197890,
										197896
									],
									[
										198101,
										198107
									],
									[
										198330,
										198336
									],
									[
										198609,
										198615
									],
									[
										198834,
										198840
									],
									[
										199228,
										199234
									],
									[
										199569,
										199575
									],
									[
										199896,
										199902
									],
									[
										200110,
										200116
									],
									[
										200148,
										200154
									],
									[
										200237,
										200243
									],
									[
										200419,
										200425
									],
									[
										200732,
										200738
									],
									[
										200780,
										200786
									],
									[
										200911,
										200917
									],
									[
										200929,
										200935
									],
									[
										200980,
										200986
									],
									[
										201041,
										201047
									],
									[
										201104,
										201110
									],
									[
										201153,
										201159
									],
									[
										201271,
										201277
									],
									[
										201289,
										201295
									],
									[
										201454,
										201460
									],
									[
										201598,
										201604
									],
									[
										201614,
										201620
									],
									[
										201646,
										201652
									],
									[
										201686,
										201692
									],
									[
										201750,
										201756
									],
									[
										201817,
										201823
									],
									[
										201998,
										202004
									],
									[
										202014,
										202020
									],
									[
										202046,
										202052
									],
									[
										202086,
										202092
									],
									[
										202145,
										202151
									],
									[
										202210,
										202216
									],
									[
										202348,
										202354
									],
									[
										202368,
										202374
									],
									[
										202408,
										202414
									],
									[
										202569,
										202575
									],
									[
										202589,
										202595
									],
									[
										202628,
										202634
									],
									[
										202881,
										202887
									],
									[
										202942,
										202948
									],
									[
										203032,
										203038
									],
									[
										203202,
										203208
									],
									[
										203263,
										203269
									],
									[
										203486,
										203492
									],
									[
										203681,
										203687
									],
									[
										203913,
										203919
									],
									[
										204159,
										204165
									],
									[
										204376,
										204382
									],
									[
										204621,
										204627
									],
									[
										204844,
										204850
									],
									[
										205081,
										205087
									],
									[
										205104,
										205110
									],
									[
										205282,
										205288
									],
									[
										205305,
										205311
									],
									[
										205491,
										205497
									],
									[
										205569,
										205575
									],
									[
										205711,
										205717
									],
									[
										205942,
										205948
									],
									[
										206121,
										206127
									],
									[
										206226,
										206232
									],
									[
										206356,
										206362
									],
									[
										206557,
										206563
									],
									[
										206725,
										206731
									],
									[
										206878,
										206884
									],
									[
										206922,
										206928
									],
									[
										207202,
										207208
									],
									[
										207240,
										207246
									],
									[
										207380,
										207386
									],
									[
										207535,
										207541
									],
									[
										207687,
										207693
									],
									[
										207711,
										207717
									],
									[
										207723,
										207729
									],
									[
										207937,
										207943
									],
									[
										208140,
										208146
									],
									[
										208342,
										208348
									],
									[
										208360,
										208366
									],
									[
										208375,
										208381
									],
									[
										208420,
										208426
									],
									[
										208537,
										208543
									],
									[
										208777,
										208783
									],
									[
										208793,
										208799
									],
									[
										208995,
										209001
									],
									[
										209122,
										209128
									],
									[
										209352,
										209358
									],
									[
										209444,
										209450
									],
									[
										209465,
										209471
									],
									[
										209737,
										209743
									],
									[
										209755,
										209761
									],
									[
										209960,
										209966
									],
									[
										209979,
										209985
									],
									[
										210328,
										210334
									],
									[
										210346,
										210352
									],
									[
										210622,
										210628
									],
									[
										210959,
										210965
									],
									[
										210974,
										210980
									],
									[
										211390,
										211396
									],
									[
										211405,
										211411
									],
									[
										211844,
										211850
									],
									[
										212057,
										212063
									],
									[
										212073,
										212079
									],
									[
										212096,
										212102
									],
									[
										212112,
										212118
									],
									[
										212360,
										212366
									],
									[
										212572,
										212578
									],
									[
										212759,
										212765
									],
									[
										212830,
										212836
									],
									[
										213150,
										213156
									],
									[
										213199,
										213205
									],
									[
										213256,
										213262
									],
									[
										213268,
										213274
									],
									[
										213311,
										213317
									],
									[
										213323,
										213329
									],
									[
										213366,
										213372
									],
									[
										213417,
										213423
									],
									[
										213476,
										213482
									],
									[
										213488,
										213494
									],
									[
										213531,
										213537
									],
									[
										213543,
										213549
									],
									[
										213586,
										213592
									],
									[
										213637,
										213643
									],
									[
										213696,
										213702
									],
									[
										213708,
										213714
									],
									[
										213751,
										213757
									],
									[
										213763,
										213769
									],
									[
										213806,
										213812
									],
									[
										213857,
										213863
									],
									[
										213924,
										213930
									],
									[
										213961,
										213967
									],
									[
										213996,
										214002
									],
									[
										214033,
										214039
									],
									[
										214207,
										214213
									],
									[
										214375,
										214381
									],
									[
										214564,
										214570
									],
									[
										214762,
										214768
									],
									[
										214781,
										214787
									],
									[
										214893,
										214899
									],
									[
										214953,
										214959
									],
									[
										215110,
										215116
									],
									[
										215161,
										215167
									],
									[
										215341,
										215347
									],
									[
										215514,
										215520
									],
									[
										215527,
										215533
									],
									[
										215693,
										215699
									],
									[
										215903,
										215909
									],
									[
										216099,
										216105
									],
									[
										216281,
										216287
									],
									[
										216411,
										216417
									],
									[
										216570,
										216576
									],
									[
										216841,
										216847
									],
									[
										216879,
										216885
									],
									[
										216920,
										216926
									],
									[
										216961,
										216967
									],
									[
										217122,
										217128
									],
									[
										217176,
										217182
									],
									[
										217230,
										217236
									],
									[
										217413,
										217419
									],
									[
										217431,
										217437
									],
									[
										217506,
										217512
									],
									[
										217524,
										217530
									],
									[
										217648,
										217654
									],
									[
										217885,
										217891
									],
									[
										218030,
										218036
									],
									[
										218254,
										218260
									],
									[
										218447,
										218453
									],
									[
										218470,
										218476
									],
									[
										218757,
										218763
									],
									[
										218777,
										218783
									],
									[
										218848,
										218854
									],
									[
										218900,
										218906
									],
									[
										219068,
										219074
									],
									[
										219126,
										219132
									],
									[
										219384,
										219390
									],
									[
										219674,
										219680
									],
									[
										219697,
										219703
									],
									[
										219737,
										219743
									],
									[
										219788,
										219794
									],
									[
										219855,
										219861
									],
									[
										220055,
										220061
									],
									[
										220079,
										220085
									],
									[
										220101,
										220107
									],
									[
										220387,
										220393
									],
									[
										220589,
										220595
									],
									[
										220678,
										220684
									],
									[
										220917,
										220923
									],
									[
										220995,
										221001
									],
									[
										221239,
										221245
									],
									[
										221469,
										221475
									],
									[
										221628,
										221634
									],
									[
										221810,
										221816
									],
									[
										221842,
										221848
									],
									[
										222068,
										222074
									],
									[
										222309,
										222315
									],
									[
										222446,
										222452
									],
									[
										222501,
										222507
									],
									[
										222512,
										222518
									],
									[
										222704,
										222710
									],
									[
										222934,
										222940
									],
									[
										223091,
										223097
									],
									[
										223252,
										223258
									],
									[
										223362,
										223368
									],
									[
										223576,
										223582
									],
									[
										223746,
										223752
									],
									[
										223973,
										223979
									],
									[
										224097,
										224103
									],
									[
										224180,
										224186
									],
									[
										224351,
										224357
									],
									[
										224530,
										224536
									],
									[
										224673,
										224679
									],
									[
										224781,
										224787
									],
									[
										224798,
										224804
									],
									[
										224830,
										224836
									],
									[
										225096,
										225102
									],
									[
										225114,
										225120
									],
									[
										225247,
										225253
									],
									[
										225468,
										225474
									],
									[
										225488,
										225494
									],
									[
										225757,
										225763
									],
									[
										225778,
										225784
									],
									[
										225800,
										225806
									],
									[
										225865,
										225871
									],
									[
										225947,
										225953
									],
									[
										226008,
										226014
									],
									[
										226069,
										226075
									],
									[
										226541,
										226547
									],
									[
										226572,
										226578
									],
									[
										226628,
										226634
									],
									[
										226685,
										226691
									],
									[
										226742,
										226748
									],
									[
										226932,
										226938
									],
									[
										226947,
										226953
									],
									[
										226963,
										226969
									],
									[
										227029,
										227035
									],
									[
										227239,
										227245
									],
									[
										227428,
										227434
									],
									[
										227444,
										227450
									],
									[
										227670,
										227676
									],
									[
										227686,
										227692
									],
									[
										227935,
										227941
									],
									[
										227951,
										227957
									],
									[
										228258,
										228264
									],
									[
										228541,
										228547
									],
									[
										228567,
										228573
									],
									[
										228707,
										228713
									],
									[
										228872,
										228878
									],
									[
										229177,
										229183
									],
									[
										229385,
										229391
									],
									[
										229612,
										229618
									],
									[
										229948,
										229954
									],
									[
										230133,
										230139
									],
									[
										230402,
										230408
									],
									[
										230590,
										230596
									],
									[
										230654,
										230660
									],
									[
										230937,
										230943
									],
									[
										231156,
										231162
									],
									[
										231342,
										231348
									],
									[
										231602,
										231608
									],
									[
										231623,
										231629
									],
									[
										232013,
										232019
									],
									[
										232079,
										232085
									],
									[
										232122,
										232128
									],
									[
										232436,
										232442
									],
									[
										232539,
										232545
									],
									[
										232572,
										232578
									],
									[
										232882,
										232888
									],
									[
										233187,
										233193
									],
									[
										233204,
										233210
									],
									[
										233434,
										233440
									],
									[
										233485,
										233491
									],
									[
										233569,
										233575
									],
									[
										233598,
										233604
									],
									[
										233627,
										233633
									],
									[
										233726,
										233732
									],
									[
										233755,
										233761
									],
									[
										233789,
										233795
									],
									[
										233921,
										233927
									],
									[
										233943,
										233949
									],
									[
										233961,
										233967
									],
									[
										234129,
										234135
									],
									[
										234192,
										234198
									],
									[
										234453,
										234459
									],
									[
										234529,
										234535
									],
									[
										234597,
										234603
									],
									[
										234913,
										234919
									],
									[
										234998,
										235004
									],
									[
										235101,
										235107
									],
									[
										235214,
										235220
									],
									[
										235433,
										235439
									],
									[
										235536,
										235542
									],
									[
										235712,
										235718
									],
									[
										235783,
										235789
									],
									[
										236161,
										236167
									],
									[
										236479,
										236485
									],
									[
										236666,
										236672
									],
									[
										236795,
										236801
									],
									[
										236812,
										236818
									],
									[
										236995,
										237001
									],
									[
										237071,
										237077
									],
									[
										237103,
										237109
									],
									[
										237418,
										237424
									],
									[
										237749,
										237755
									],
									[
										237975,
										237981
									],
									[
										238011,
										238017
									],
									[
										238248,
										238254
									],
									[
										238482,
										238488
									],
									[
										238714,
										238720
									],
									[
										238880,
										238886
									],
									[
										239022,
										239028
									],
									[
										239355,
										239361
									],
									[
										239603,
										239609
									],
									[
										239872,
										239878
									],
									[
										239887,
										239893
									],
									[
										240013,
										240019
									],
									[
										240123,
										240129
									],
									[
										240483,
										240489
									],
									[
										240537,
										240543
									],
									[
										240807,
										240813
									],
									[
										240990,
										240996
									],
									[
										241160,
										241166
									],
									[
										241562,
										241568
									],
									[
										241955,
										241961
									],
									[
										242125,
										242131
									],
									[
										242452,
										242458
									],
									[
										242497,
										242503
									],
									[
										242884,
										242890
									],
									[
										243060,
										243066
									],
									[
										243308,
										243314
									],
									[
										243607,
										243613
									],
									[
										243856,
										243862
									],
									[
										244185,
										244191
									],
									[
										244408,
										244414
									],
									[
										244605,
										244611
									],
									[
										244984,
										244990
									],
									[
										245443,
										245449
									],
									[
										245462,
										245468
									],
									[
										245636,
										245642
									],
									[
										245649,
										245655
									],
									[
										245941,
										245947
									],
									[
										246117,
										246123
									],
									[
										246321,
										246327
									],
									[
										246662,
										246668
									],
									[
										246775,
										246781
									],
									[
										246972,
										246978
									],
									[
										247329,
										247335
									],
									[
										247423,
										247429
									],
									[
										247531,
										247537
									],
									[
										247774,
										247780
									],
									[
										248187,
										248193
									],
									[
										248277,
										248283
									],
									[
										248528,
										248534
									],
									[
										248547,
										248553
									],
									[
										248858,
										248864
									],
									[
										248871,
										248877
									],
									[
										249138,
										249144
									],
									[
										249157,
										249163
									],
									[
										249445,
										249451
									],
									[
										249458,
										249464
									],
									[
										249705,
										249711
									],
									[
										250028,
										250034
									],
									[
										250070,
										250076
									],
									[
										250318,
										250324
									],
									[
										250579,
										250585
									],
									[
										250856,
										250862
									],
									[
										251061,
										251067
									],
									[
										251459,
										251465
									],
									[
										251782,
										251788
									],
									[
										251820,
										251826
									],
									[
										252203,
										252209
									],
									[
										252291,
										252297
									],
									[
										252469,
										252475
									],
									[
										252693,
										252699
									],
									[
										252781,
										252787
									],
									[
										252960,
										252966
									],
									[
										253164,
										253170
									],
									[
										253369,
										253375
									],
									[
										253389,
										253395
									],
									[
										253532,
										253538
									],
									[
										253736,
										253742
									],
									[
										253910,
										253916
									],
									[
										253930,
										253936
									],
									[
										254103,
										254109
									],
									[
										254119,
										254125
									],
									[
										254432,
										254438
									],
									[
										254477,
										254483
									],
									[
										254753,
										254759
									],
									[
										254773,
										254779
									],
									[
										254803,
										254809
									],
									[
										254868,
										254874
									],
									[
										254994,
										255000
									],
									[
										255089,
										255095
									],
									[
										255236,
										255242
									],
									[
										255253,
										255259
									],
									[
										255283,
										255289
									],
									[
										255505,
										255511
									],
									[
										255677,
										255683
									],
									[
										255826,
										255832
									],
									[
										255879,
										255885
									],
									[
										256174,
										256180
									],
									[
										256563,
										256569
									],
									[
										256790,
										256796
									],
									[
										257192,
										257198
									],
									[
										257412,
										257418
									],
									[
										257627,
										257633
									],
									[
										257724,
										257730
									],
									[
										257989,
										257995
									],
									[
										258121,
										258127
									],
									[
										258144,
										258150
									],
									[
										258439,
										258445
									],
									[
										258465,
										258471
									],
									[
										258946,
										258952
									],
									[
										259306,
										259312
									],
									[
										259666,
										259672
									],
									[
										260048,
										260054
									],
									[
										260071,
										260077
									],
									[
										260295,
										260301
									],
									[
										260699,
										260705
									],
									[
										261113,
										261119
									],
									[
										261195,
										261201
									],
									[
										261676,
										261682
									],
									[
										261983,
										261989
									],
									[
										262341,
										262347
									],
									[
										262358,
										262364
									],
									[
										262386,
										262392
									],
									[
										262403,
										262409
									],
									[
										262432,
										262438
									],
									[
										262452,
										262458
									],
									[
										262713,
										262719
									],
									[
										262964,
										262970
									],
									[
										263243,
										263249
									],
									[
										263559,
										263565
									],
									[
										263680,
										263686
									],
									[
										263820,
										263826
									],
									[
										263886,
										263892
									],
									[
										264018,
										264024
									],
									[
										264232,
										264238
									],
									[
										264679,
										264685
									],
									[
										264698,
										264704
									],
									[
										264986,
										264992
									],
									[
										264999,
										265005
									],
									[
										265179,
										265185
									],
									[
										265201,
										265207
									],
									[
										265223,
										265229
									],
									[
										265360,
										265366
									],
									[
										265710,
										265716
									],
									[
										265729,
										265735
									],
									[
										265751,
										265757
									],
									[
										265773,
										265779
									],
									[
										265935,
										265941
									],
									[
										266000,
										266006
									],
									[
										266037,
										266043
									],
									[
										266269,
										266275
									],
									[
										266535,
										266541
									],
									[
										266918,
										266924
									],
									[
										266937,
										266943
									],
									[
										267008,
										267014
									],
									[
										267353,
										267359
									],
									[
										267812,
										267818
									],
									[
										268480,
										268486
									],
									[
										268799,
										268805
									],
									[
										268818,
										268824
									],
									[
										269211,
										269217
									],
									[
										269230,
										269236
									],
									[
										269300,
										269306
									],
									[
										269521,
										269527
									],
									[
										269540,
										269546
									],
									[
										269880,
										269886
									],
									[
										269899,
										269905
									],
									[
										270283,
										270289
									],
									[
										270302,
										270308
									],
									[
										270559,
										270565
									],
									[
										270578,
										270584
									],
									[
										270966,
										270972
									],
									[
										271216,
										271222
									],
									[
										271259,
										271265
									],
									[
										271616,
										271622
									],
									[
										271836,
										271842
									],
									[
										271861,
										271867
									],
									[
										271947,
										271953
									],
									[
										271981,
										271987
									],
									[
										272521,
										272527
									],
									[
										272955,
										272961
									],
									[
										273394,
										273400
									],
									[
										273503,
										273509
									],
									[
										273748,
										273754
									],
									[
										273915,
										273921
									],
									[
										273947,
										273953
									],
									[
										274168,
										274174
									],
									[
										274414,
										274420
									],
									[
										274560,
										274566
									],
									[
										274948,
										274954
									],
									[
										275062,
										275068
									],
									[
										275179,
										275185
									],
									[
										275418,
										275424
									],
									[
										275786,
										275792
									],
									[
										276019,
										276025
									],
									[
										276294,
										276300
									],
									[
										276611,
										276617
									],
									[
										276624,
										276630
									],
									[
										276837,
										276843
									],
									[
										276919,
										276925
									],
									[
										277289,
										277295
									],
									[
										277591,
										277597
									],
									[
										277810,
										277816
									],
									[
										278084,
										278090
									],
									[
										278097,
										278103
									],
									[
										278299,
										278305
									],
									[
										278479,
										278485
									],
									[
										278710,
										278716
									],
									[
										278990,
										278996
									],
									[
										279257,
										279263
									],
									[
										279702,
										279708
									],
									[
										279910,
										279916
									],
									[
										280088,
										280094
									],
									[
										280390,
										280396
									],
									[
										280402,
										280408
									],
									[
										280413,
										280419
									],
									[
										280560,
										280566
									],
									[
										280575,
										280581
									],
									[
										280605,
										280611
									],
									[
										280904,
										280910
									],
									[
										280915,
										280921
									],
									[
										281017,
										281023
									],
									[
										281073,
										281079
									],
									[
										281085,
										281091
									],
									[
										281096,
										281102
									],
									[
										281170,
										281176
									],
									[
										281279,
										281285
									],
									[
										281294,
										281300
									],
									[
										281324,
										281330
									],
									[
										281489,
										281495
									],
									[
										281500,
										281506
									],
									[
										281649,
										281655
									],
									[
										281781,
										281787
									],
									[
										281793,
										281799
									],
									[
										281804,
										281810
									],
									[
										281878,
										281884
									],
									[
										281999,
										282005
									],
									[
										282014,
										282020
									],
									[
										282044,
										282050
									],
									[
										282209,
										282215
									],
									[
										282220,
										282226
									],
									[
										282360,
										282366
									],
									[
										282378,
										282384
									],
									[
										282389,
										282395
									],
									[
										282428,
										282434
									],
									[
										282649,
										282655
									],
									[
										282781,
										282787
									],
									[
										282793,
										282799
									],
									[
										282804,
										282810
									],
									[
										282878,
										282884
									],
									[
										282999,
										283005
									],
									[
										283014,
										283020
									],
									[
										283044,
										283050
									],
									[
										283209,
										283215
									],
									[
										283220,
										283226
									],
									[
										283360,
										283366
									],
									[
										283378,
										283384
									],
									[
										283389,
										283395
									],
									[
										283428,
										283434
									],
									[
										283643,
										283649
									],
									[
										283753,
										283759
									],
									[
										283765,
										283771
									],
									[
										283776,
										283782
									],
									[
										283872,
										283878
									],
									[
										283906,
										283912
									],
									[
										284097,
										284103
									],
									[
										284238,
										284244
									],
									[
										284253,
										284259
									],
									[
										284283,
										284289
									],
									[
										284547,
										284553
									],
									[
										284688,
										284694
									],
									[
										284910,
										284916
									],
									[
										285096,
										285102
									],
									[
										285107,
										285113
									],
									[
										285229,
										285235
									],
									[
										285438,
										285444
									],
									[
										285450,
										285456
									],
									[
										285461,
										285467
									],
									[
										285562,
										285568
									],
									[
										285649,
										285655
									],
									[
										285784,
										285790
									],
									[
										285799,
										285805
									],
									[
										285829,
										285835
									],
									[
										286097,
										286103
									],
									[
										286238,
										286244
									],
									[
										286396,
										286402
									],
									[
										286407,
										286413
									],
									[
										286585,
										286591
									],
									[
										286708,
										286714
									],
									[
										286720,
										286726
									],
									[
										286731,
										286737
									],
									[
										286770,
										286776
									],
									[
										287105,
										287111
									],
									[
										287117,
										287123
									],
									[
										287128,
										287134
									],
									[
										287281,
										287287
									],
									[
										287685,
										287691
									],
									[
										287700,
										287706
									],
									[
										287730,
										287736
									],
									[
										287900,
										287906
									],
									[
										287911,
										287917
									],
									[
										288091,
										288097
									],
									[
										288117,
										288123
									],
									[
										288128,
										288134
									],
									[
										288410,
										288416
									],
									[
										288476,
										288482
									],
									[
										288662,
										288668
									],
									[
										288963,
										288969
									],
									[
										289047,
										289053
									],
									[
										289134,
										289140
									],
									[
										289328,
										289334
									],
									[
										289345,
										289351
									],
									[
										289361,
										289367
									],
									[
										289376,
										289382
									],
									[
										289394,
										289400
									],
									[
										289606,
										289612
									],
									[
										289623,
										289629
									],
									[
										289831,
										289837
									],
									[
										289848,
										289854
									],
									[
										290054,
										290060
									],
									[
										290069,
										290075
									],
									[
										290122,
										290128
									],
									[
										290295,
										290301
									],
									[
										290310,
										290316
									],
									[
										290366,
										290372
									],
									[
										290562,
										290568
									],
									[
										290758,
										290764
									],
									[
										291032,
										291038
									],
									[
										291076,
										291082
									],
									[
										291140,
										291146
									],
									[
										291182,
										291188
									],
									[
										291366,
										291372
									],
									[
										291408,
										291414
									],
									[
										291615,
										291621
									],
									[
										291645,
										291651
									],
									[
										291687,
										291693
									],
									[
										291881,
										291887
									],
									[
										291923,
										291929
									],
									[
										292129,
										292135
									],
									[
										292279,
										292285
									],
									[
										292490,
										292496
									],
									[
										292698,
										292704
									],
									[
										292878,
										292884
									],
									[
										293192,
										293198
									],
									[
										293392,
										293398
									],
									[
										293430,
										293436
									],
									[
										293733,
										293739
									],
									[
										294043,
										294049
									],
									[
										294274,
										294280
									],
									[
										294594,
										294600
									],
									[
										294638,
										294644
									],
									[
										294834,
										294840
									],
									[
										294925,
										294931
									],
									[
										295106,
										295112
									],
									[
										295368,
										295374
									],
									[
										295379,
										295385
									],
									[
										295578,
										295584
									],
									[
										295921,
										295927
									],
									[
										296095,
										296101
									],
									[
										296306,
										296312
									],
									[
										296432,
										296438
									],
									[
										296645,
										296651
									],
									[
										296807,
										296813
									],
									[
										297196,
										297202
									],
									[
										297327,
										297333
									],
									[
										297669,
										297675
									],
									[
										297862,
										297868
									],
									[
										298051,
										298057
									],
									[
										298062,
										298068
									],
									[
										298241,
										298247
									],
									[
										298276,
										298282
									],
									[
										298464,
										298470
									],
									[
										298486,
										298492
									],
									[
										298606,
										298612
									],
									[
										298653,
										298659
									],
									[
										298677,
										298683
									],
									[
										298729,
										298735
									],
									[
										298902,
										298908
									],
									[
										299096,
										299102
									],
									[
										299117,
										299123
									],
									[
										299503,
										299509
									],
									[
										299521,
										299527
									],
									[
										299866,
										299872
									],
									[
										299884,
										299890
									],
									[
										300085,
										300091
									],
									[
										300131,
										300137
									],
									[
										300154,
										300160
									],
									[
										300454,
										300460
									],
									[
										300523,
										300529
									],
									[
										300600,
										300606
									],
									[
										300972,
										300978
									],
									[
										300993,
										300999
									],
									[
										301087,
										301093
									],
									[
										301126,
										301132
									],
									[
										301165,
										301171
									],
									[
										301206,
										301212
									],
									[
										301402,
										301408
									],
									[
										301426,
										301432
									],
									[
										301450,
										301456
									],
									[
										301474,
										301480
									],
									[
										301506,
										301512
									],
									[
										301632,
										301638
									],
									[
										301677,
										301683
									],
									[
										301722,
										301728
									],
									[
										301936,
										301942
									],
									[
										301949,
										301955
									],
									[
										301974,
										301980
									],
									[
										302040,
										302046
									],
									[
										302128,
										302134
									],
									[
										302331,
										302337
									],
									[
										302468,
										302474
									],
									[
										302703,
										302709
									],
									[
										302719,
										302725
									],
									[
										302735,
										302741
									],
									[
										302751,
										302757
									],
									[
										302957,
										302963
									],
									[
										303232,
										303238
									],
									[
										303269,
										303275
									],
									[
										303292,
										303298
									],
									[
										303337,
										303343
									],
									[
										303354,
										303360
									],
									[
										303594,
										303600
									],
									[
										303612,
										303618
									],
									[
										303670,
										303676
									],
									[
										303696,
										303702
									],
									[
										303722,
										303728
									],
									[
										303892,
										303898
									],
									[
										304032,
										304038
									],
									[
										304324,
										304330
									],
									[
										304378,
										304384
									],
									[
										304554,
										304560
									],
									[
										304623,
										304629
									],
									[
										304924,
										304930
									],
									[
										304942,
										304948
									],
									[
										304997,
										305003
									],
									[
										305087,
										305093
									],
									[
										305113,
										305119
									],
									[
										305139,
										305145
									],
									[
										305468,
										305474
									],
									[
										305517,
										305523
									],
									[
										305566,
										305572
									],
									[
										305626,
										305632
									],
									[
										305686,
										305692
									],
									[
										305813,
										305819
									],
									[
										306171,
										306177
									],
									[
										306215,
										306221
									],
									[
										306603,
										306609
									],
									[
										306685,
										306691
									],
									[
										306781,
										306787
									],
									[
										306885,
										306891
									],
									[
										307221,
										307227
									],
									[
										307499,
										307505
									],
									[
										307651,
										307657
									],
									[
										307854,
										307860
									],
									[
										307917,
										307923
									],
									[
										308041,
										308047
									],
									[
										308417,
										308423
									],
									[
										308585,
										308591
									],
									[
										308715,
										308721
									],
									[
										308839,
										308845
									],
									[
										308917,
										308923
									],
									[
										309116,
										309122
									],
									[
										309458,
										309464
									],
									[
										309951,
										309957
									],
									[
										309984,
										309990
									],
									[
										310108,
										310114
									],
									[
										310357,
										310363
									],
									[
										310686,
										310692
									],
									[
										311013,
										311019
									],
									[
										311060,
										311066
									],
									[
										311337,
										311343
									],
									[
										311633,
										311639
									],
									[
										311972,
										311978
									],
									[
										312294,
										312300
									],
									[
										312561,
										312567
									],
									[
										312656,
										312662
									],
									[
										312983,
										312989
									],
									[
										313110,
										313116
									],
									[
										313404,
										313410
									],
									[
										313490,
										313496
									],
									[
										313772,
										313778
									],
									[
										313793,
										313799
									],
									[
										313829,
										313835
									],
									[
										313846,
										313852
									],
									[
										314041,
										314047
									],
									[
										314302,
										314308
									],
									[
										314359,
										314365
									],
									[
										314575,
										314581
									],
									[
										314908,
										314914
									],
									[
										315280,
										315286
									],
									[
										315427,
										315433
									],
									[
										315577,
										315583
									],
									[
										315849,
										315855
									],
									[
										316006,
										316012
									],
									[
										316165,
										316171
									],
									[
										316338,
										316344
									],
									[
										316513,
										316519
									],
									[
										316686,
										316692
									],
									[
										316858,
										316864
									],
									[
										317014,
										317020
									],
									[
										317221,
										317227
									],
									[
										317270,
										317276
									],
									[
										317366,
										317372
									],
									[
										317575,
										317581
									],
									[
										317963,
										317969
									],
									[
										318349,
										318355
									],
									[
										318589,
										318595
									],
									[
										318890,
										318896
									],
									[
										318946,
										318952
									],
									[
										319076,
										319082
									],
									[
										319260,
										319266
									],
									[
										319320,
										319326
									],
									[
										319381,
										319387
									],
									[
										319430,
										319436
									],
									[
										319475,
										319481
									],
									[
										319594,
										319600
									],
									[
										319775,
										319781
									],
									[
										320065,
										320071
									],
									[
										320125,
										320131
									],
									[
										320186,
										320192
									],
									[
										320253,
										320259
									],
									[
										320320,
										320326
									],
									[
										320708,
										320714
									],
									[
										320890,
										320896
									],
									[
										321051,
										321057
									],
									[
										321381,
										321387
									],
									[
										321415,
										321421
									],
									[
										321644,
										321650
									],
									[
										321678,
										321684
									],
									[
										321829,
										321835
									],
									[
										321863,
										321869
									],
									[
										322020,
										322026
									],
									[
										322054,
										322060
									],
									[
										322286,
										322292
									],
									[
										322320,
										322326
									],
									[
										322667,
										322673
									],
									[
										322701,
										322707
									],
									[
										323272,
										323278
									],
									[
										323436,
										323442
									],
									[
										323502,
										323508
									],
									[
										323711,
										323717
									],
									[
										323774,
										323780
									],
									[
										323840,
										323846
									],
									[
										323905,
										323911
									],
									[
										324150,
										324156
									],
									[
										324483,
										324489
									],
									[
										324549,
										324555
									],
									[
										324625,
										324631
									],
									[
										324913,
										324919
									],
									[
										325275,
										325281
									],
									[
										325343,
										325349
									],
									[
										325413,
										325419
									],
									[
										325846,
										325852
									],
									[
										325864,
										325870
									],
									[
										326203,
										326209
									],
									[
										326220,
										326226
									],
									[
										326252,
										326258
									],
									[
										326270,
										326276
									],
									[
										326302,
										326308
									],
									[
										326320,
										326326
									],
									[
										326480,
										326486
									],
									[
										326781,
										326787
									],
									[
										327066,
										327072
									],
									[
										327357,
										327363
									],
									[
										327654,
										327660
									],
									[
										327881,
										327887
									],
									[
										327917,
										327923
									],
									[
										327957,
										327963
									],
									[
										328204,
										328210
									],
									[
										328401,
										328407
									],
									[
										328433,
										328439
									],
									[
										328697,
										328703
									],
									[
										328962,
										328968
									],
									[
										329228,
										329234
									],
									[
										329483,
										329489
									],
									[
										329597,
										329603
									],
									[
										329800,
										329806
									],
									[
										329950,
										329956
									],
									[
										330139,
										330145
									],
									[
										330311,
										330317
									],
									[
										330503,
										330509
									],
									[
										330671,
										330677
									],
									[
										330814,
										330820
									],
									[
										330864,
										330870
									],
									[
										330956,
										330962
									],
									[
										331175,
										331181
									],
									[
										331395,
										331401
									],
									[
										331528,
										331534
									],
									[
										331710,
										331716
									],
									[
										331775,
										331781
									],
									[
										332009,
										332015
									],
									[
										332041,
										332047
									],
									[
										332317,
										332323
									],
									[
										332442,
										332448
									],
									[
										332578,
										332584
									],
									[
										332894,
										332900
									],
									[
										333055,
										333061
									],
									[
										333280,
										333286
									],
									[
										333478,
										333484
									],
									[
										333638,
										333644
									],
									[
										333786,
										333792
									],
									[
										334011,
										334017
									],
									[
										334132,
										334138
									],
									[
										334319,
										334325
									],
									[
										334610,
										334616
									],
									[
										334640,
										334646
									],
									[
										334834,
										334840
									],
									[
										334864,
										334870
									],
									[
										335117,
										335123
									],
									[
										335147,
										335153
									],
									[
										335376,
										335382
									],
									[
										335696,
										335702
									],
									[
										335726,
										335732
									],
									[
										335890,
										335896
									],
									[
										335920,
										335926
									],
									[
										336359,
										336365
									],
									[
										336569,
										336575
									],
									[
										336703,
										336709
									],
									[
										337012,
										337018
									],
									[
										337156,
										337162
									],
									[
										337389,
										337395
									],
									[
										337411,
										337417
									],
									[
										337473,
										337479
									],
									[
										337495,
										337501
									],
									[
										337680,
										337686
									],
									[
										337694,
										337700
									],
									[
										337709,
										337715
									],
									[
										337727,
										337733
									],
									[
										337791,
										337797
									],
									[
										337809,
										337815
									],
									[
										337932,
										337938
									],
									[
										337972,
										337978
									],
									[
										338002,
										338008
									],
									[
										338146,
										338152
									],
									[
										338157,
										338163
									],
									[
										338309,
										338315
									],
									[
										338346,
										338352
									],
									[
										338481,
										338487
									],
									[
										338617,
										338623
									],
									[
										338757,
										338763
									],
									[
										338787,
										338793
									],
									[
										338853,
										338859
									],
									[
										339004,
										339010
									],
									[
										339182,
										339188
									],
									[
										339192,
										339198
									],
									[
										339327,
										339333
									],
									[
										339521,
										339527
									],
									[
										339585,
										339591
									],
									[
										339746,
										339752
									],
									[
										339968,
										339974
									],
									[
										339978,
										339984
									],
									[
										340061,
										340067
									],
									[
										340235,
										340241
									],
									[
										340299,
										340305
									],
									[
										340487,
										340493
									],
									[
										340498,
										340504
									],
									[
										340650,
										340656
									],
									[
										340661,
										340667
									],
									[
										340810,
										340816
									],
									[
										340998,
										341004
									],
									[
										341100,
										341106
									],
									[
										341272,
										341278
									],
									[
										341355,
										341361
									],
									[
										341634,
										341640
									],
									[
										341909,
										341915
									],
									[
										342118,
										342124
									],
									[
										342205,
										342211
									],
									[
										342234,
										342240
									],
									[
										342244,
										342250
									],
									[
										342360,
										342366
									],
									[
										342390,
										342396
									],
									[
										342400,
										342406
									],
									[
										342509,
										342515
									],
									[
										342596,
										342602
									],
									[
										342798,
										342804
									],
									[
										343096,
										343102
									],
									[
										343398,
										343404
									],
									[
										343466,
										343472
									],
									[
										343634,
										343640
									],
									[
										343832,
										343838
									],
									[
										344062,
										344068
									],
									[
										344421,
										344427
									],
									[
										344443,
										344449
									],
									[
										344454,
										344460
									],
									[
										344565,
										344571
									],
									[
										344804,
										344810
									],
									[
										345084,
										345090
									],
									[
										345251,
										345257
									],
									[
										345390,
										345396
									],
									[
										345628,
										345634
									],
									[
										345895,
										345901
									],
									[
										346158,
										346164
									],
									[
										346389,
										346395
									],
									[
										346678,
										346684
									],
									[
										346811,
										346817
									],
									[
										346981,
										346987
									],
									[
										347119,
										347125
									],
									[
										347653,
										347659
									],
									[
										347687,
										347693
									],
									[
										348010,
										348016
									],
									[
										348044,
										348050
									],
									[
										348273,
										348279
									],
									[
										348320,
										348326
									],
									[
										348370,
										348376
									],
									[
										348571,
										348577
									],
									[
										348588,
										348594
									],
									[
										348764,
										348770
									],
									[
										348781,
										348787
									],
									[
										348951,
										348957
									],
									[
										348965,
										348971
									],
									[
										349313,
										349319
									],
									[
										349330,
										349336
									],
									[
										349593,
										349599
									],
									[
										349610,
										349616
									],
									[
										349881,
										349887
									],
									[
										349895,
										349901
									],
									[
										350082,
										350088
									],
									[
										350118,
										350124
									],
									[
										350160,
										350166
									],
									[
										350191,
										350197
									],
									[
										350228,
										350234
									],
									[
										350261,
										350267
									],
									[
										350491,
										350497
									],
									[
										350546,
										350552
									],
									[
										350771,
										350777
									],
									[
										350930,
										350936
									],
									[
										350988,
										350994
									],
									[
										351107,
										351113
									],
									[
										351163,
										351169
									],
									[
										351466,
										351472
									],
									[
										351706,
										351712
									],
									[
										351940,
										351946
									],
									[
										351976,
										351982
									],
									[
										352471,
										352477
									],
									[
										352493,
										352499
									],
									[
										352870,
										352876
									],
									[
										352892,
										352898
									],
									[
										353320,
										353326
									],
									[
										353440,
										353446
									],
									[
										353462,
										353468
									],
									[
										353826,
										353832
									],
									[
										353993,
										353999
									],
									[
										354015,
										354021
									],
									[
										354369,
										354375
									],
									[
										354388,
										354394
									],
									[
										354406,
										354412
									],
									[
										354593,
										354599
									],
									[
										354612,
										354618
									],
									[
										354630,
										354636
									],
									[
										354868,
										354874
									],
									[
										354881,
										354887
									],
									[
										354915,
										354921
									],
									[
										354927,
										354933
									],
									[
										354961,
										354967
									],
									[
										354977,
										354983
									],
									[
										355242,
										355248
									],
									[
										355301,
										355307
									],
									[
										355421,
										355427
									],
									[
										355445,
										355451
									],
									[
										355467,
										355473
									],
									[
										355827,
										355833
									],
									[
										355842,
										355848
									],
									[
										355857,
										355863
									],
									[
										356339,
										356345
									],
									[
										356363,
										356369
									],
									[
										356385,
										356391
									],
									[
										356682,
										356688
									],
									[
										356701,
										356707
									],
									[
										356719,
										356725
									],
									[
										356906,
										356912
									],
									[
										356942,
										356948
									],
									[
										356976,
										356982
									],
									[
										357141,
										357147
									],
									[
										357225,
										357231
									],
									[
										357365,
										357371
									],
									[
										357660,
										357666
									],
									[
										357740,
										357746
									],
									[
										357801,
										357807
									],
									[
										357862,
										357868
									],
									[
										358078,
										358084
									],
									[
										358246,
										358252
									],
									[
										358307,
										358313
									],
									[
										358368,
										358374
									],
									[
										358429,
										358435
									],
									[
										358480,
										358486
									],
									[
										358741,
										358747
									],
									[
										358989,
										358995
									],
									[
										359049,
										359055
									],
									[
										359369,
										359375
									],
									[
										359467,
										359473
									],
									[
										359648,
										359654
									],
									[
										359917,
										359923
									],
									[
										360149,
										360155
									],
									[
										360362,
										360368
									],
									[
										360701,
										360707
									],
									[
										361018,
										361024
									],
									[
										361233,
										361239
									],
									[
										361414,
										361420
									],
									[
										361715,
										361721
									],
									[
										361943,
										361949
									],
									[
										361967,
										361973
									],
									[
										362203,
										362209
									],
									[
										362240,
										362246
									],
									[
										362271,
										362277
									],
									[
										362447,
										362453
									],
									[
										362770,
										362776
									],
									[
										362816,
										362822
									],
									[
										363221,
										363227
									],
									[
										363281,
										363287
									],
									[
										363413,
										363419
									],
									[
										363430,
										363436
									],
									[
										363650,
										363656
									],
									[
										363861,
										363867
									],
									[
										364158,
										364164
									],
									[
										364191,
										364197
									],
									[
										364217,
										364223
									],
									[
										364719,
										364725
									],
									[
										364740,
										364746
									],
									[
										364947,
										364953
									],
									[
										364968,
										364974
									],
									[
										365100,
										365106
									],
									[
										365126,
										365132
									],
									[
										365424,
										365430
									],
									[
										365470,
										365476
									],
									[
										365647,
										365653
									],
									[
										365937,
										365943
									],
									[
										366075,
										366081
									],
									[
										366452,
										366458
									],
									[
										366463,
										366469
									],
									[
										366682,
										366688
									],
									[
										366770,
										366776
									],
									[
										367059,
										367065
									],
									[
										367499,
										367505
									],
									[
										367819,
										367825
									],
									[
										367862,
										367868
									],
									[
										368417,
										368423
									],
									[
										368573,
										368579
									],
									[
										368729,
										368735
									],
									[
										369490,
										369496
									],
									[
										369551,
										369557
									],
									[
										369610,
										369616
									],
									[
										369724,
										369730
									],
									[
										369752,
										369758
									],
									[
										369894,
										369900
									],
									[
										370116,
										370122
									],
									[
										370324,
										370330
									],
									[
										370410,
										370416
									],
									[
										370508,
										370514
									],
									[
										370612,
										370618
									],
									[
										370758,
										370764
									],
									[
										370954,
										370960
									],
									[
										371031,
										371037
									],
									[
										371109,
										371115
									],
									[
										371191,
										371197
									],
									[
										371470,
										371476
									],
									[
										371588,
										371594
									],
									[
										371706,
										371712
									],
									[
										371818,
										371824
									],
									[
										371931,
										371937
									],
									[
										372089,
										372095
									],
									[
										372254,
										372260
									],
									[
										372352,
										372358
									],
									[
										372455,
										372461
									],
									[
										372588,
										372594
									],
									[
										372796,
										372802
									],
									[
										372815,
										372821
									],
									[
										372847,
										372853
									],
									[
										372967,
										372973
									],
									[
										373016,
										373022
									],
									[
										373140,
										373146
									],
									[
										373350,
										373356
									],
									[
										373642,
										373648
									],
									[
										373853,
										373859
									],
									[
										374082,
										374088
									],
									[
										374361,
										374367
									],
									[
										374586,
										374592
									],
									[
										374980,
										374986
									],
									[
										375321,
										375327
									],
									[
										375648,
										375654
									],
									[
										375862,
										375868
									],
									[
										375900,
										375906
									],
									[
										375989,
										375995
									],
									[
										376171,
										376177
									],
									[
										376484,
										376490
									],
									[
										376532,
										376538
									],
									[
										376663,
										376669
									],
									[
										376681,
										376687
									],
									[
										376732,
										376738
									],
									[
										376793,
										376799
									],
									[
										376856,
										376862
									],
									[
										376905,
										376911
									],
									[
										377023,
										377029
									],
									[
										377041,
										377047
									],
									[
										377206,
										377212
									],
									[
										377350,
										377356
									],
									[
										377366,
										377372
									],
									[
										377398,
										377404
									],
									[
										377438,
										377444
									],
									[
										377502,
										377508
									],
									[
										377569,
										377575
									],
									[
										377750,
										377756
									],
									[
										377766,
										377772
									],
									[
										377798,
										377804
									],
									[
										377838,
										377844
									],
									[
										377897,
										377903
									],
									[
										377962,
										377968
									],
									[
										378100,
										378106
									],
									[
										378120,
										378126
									],
									[
										378160,
										378166
									],
									[
										378321,
										378327
									],
									[
										378341,
										378347
									],
									[
										378380,
										378386
									],
									[
										378633,
										378639
									],
									[
										378694,
										378700
									],
									[
										378784,
										378790
									],
									[
										378954,
										378960
									],
									[
										379015,
										379021
									],
									[
										379238,
										379244
									],
									[
										379433,
										379439
									],
									[
										379665,
										379671
									],
									[
										379911,
										379917
									],
									[
										380128,
										380134
									],
									[
										380373,
										380379
									],
									[
										380596,
										380602
									],
									[
										380833,
										380839
									],
									[
										380856,
										380862
									],
									[
										381034,
										381040
									],
									[
										381057,
										381063
									],
									[
										381243,
										381249
									],
									[
										381321,
										381327
									],
									[
										381463,
										381469
									],
									[
										381694,
										381700
									],
									[
										381873,
										381879
									],
									[
										381978,
										381984
									],
									[
										382108,
										382114
									],
									[
										382309,
										382315
									],
									[
										382477,
										382483
									],
									[
										382630,
										382636
									],
									[
										382674,
										382680
									],
									[
										382954,
										382960
									],
									[
										382992,
										382998
									],
									[
										383132,
										383138
									],
									[
										383287,
										383293
									],
									[
										383439,
										383445
									],
									[
										383463,
										383469
									],
									[
										383475,
										383481
									],
									[
										383689,
										383695
									],
									[
										383892,
										383898
									],
									[
										384094,
										384100
									],
									[
										384112,
										384118
									],
									[
										384127,
										384133
									],
									[
										384172,
										384178
									],
									[
										384289,
										384295
									],
									[
										384529,
										384535
									],
									[
										384545,
										384551
									],
									[
										384747,
										384753
									],
									[
										384874,
										384880
									],
									[
										385104,
										385110
									],
									[
										385196,
										385202
									],
									[
										385217,
										385223
									],
									[
										385489,
										385495
									],
									[
										385507,
										385513
									],
									[
										385712,
										385718
									],
									[
										385731,
										385737
									],
									[
										386080,
										386086
									],
									[
										386098,
										386104
									],
									[
										386374,
										386380
									],
									[
										386711,
										386717
									],
									[
										386726,
										386732
									],
									[
										387142,
										387148
									],
									[
										387157,
										387163
									],
									[
										387596,
										387602
									],
									[
										387809,
										387815
									],
									[
										387825,
										387831
									],
									[
										387848,
										387854
									],
									[
										387864,
										387870
									],
									[
										388112,
										388118
									],
									[
										388324,
										388330
									],
									[
										388511,
										388517
									],
									[
										388582,
										388588
									],
									[
										388902,
										388908
									],
									[
										388951,
										388957
									],
									[
										389008,
										389014
									],
									[
										389020,
										389026
									],
									[
										389063,
										389069
									],
									[
										389075,
										389081
									],
									[
										389118,
										389124
									],
									[
										389169,
										389175
									],
									[
										389228,
										389234
									],
									[
										389240,
										389246
									],
									[
										389283,
										389289
									],
									[
										389295,
										389301
									],
									[
										389338,
										389344
									],
									[
										389389,
										389395
									],
									[
										389448,
										389454
									],
									[
										389460,
										389466
									],
									[
										389503,
										389509
									],
									[
										389515,
										389521
									],
									[
										389558,
										389564
									],
									[
										389609,
										389615
									],
									[
										389676,
										389682
									],
									[
										389713,
										389719
									],
									[
										389748,
										389754
									],
									[
										389785,
										389791
									],
									[
										389959,
										389965
									],
									[
										390127,
										390133
									],
									[
										390316,
										390322
									],
									[
										390514,
										390520
									],
									[
										390533,
										390539
									],
									[
										390645,
										390651
									],
									[
										390705,
										390711
									],
									[
										390862,
										390868
									],
									[
										390913,
										390919
									],
									[
										391093,
										391099
									],
									[
										391266,
										391272
									],
									[
										391279,
										391285
									],
									[
										391445,
										391451
									],
									[
										391655,
										391661
									],
									[
										391851,
										391857
									],
									[
										392033,
										392039
									],
									[
										392163,
										392169
									],
									[
										392322,
										392328
									],
									[
										392593,
										392599
									],
									[
										392631,
										392637
									],
									[
										392672,
										392678
									],
									[
										392713,
										392719
									],
									[
										392874,
										392880
									],
									[
										392928,
										392934
									],
									[
										392982,
										392988
									],
									[
										393165,
										393171
									],
									[
										393183,
										393189
									],
									[
										393258,
										393264
									],
									[
										393276,
										393282
									],
									[
										393400,
										393406
									],
									[
										393637,
										393643
									],
									[
										393782,
										393788
									],
									[
										394006,
										394012
									],
									[
										394199,
										394205
									],
									[
										394222,
										394228
									],
									[
										394509,
										394515
									],
									[
										394529,
										394535
									],
									[
										394600,
										394606
									],
									[
										394652,
										394658
									],
									[
										394820,
										394826
									],
									[
										394878,
										394884
									],
									[
										395136,
										395142
									],
									[
										395426,
										395432
									],
									[
										395449,
										395455
									],
									[
										395489,
										395495
									],
									[
										395540,
										395546
									],
									[
										395607,
										395613
									],
									[
										395807,
										395813
									],
									[
										395831,
										395837
									],
									[
										395853,
										395859
									],
									[
										396139,
										396145
									],
									[
										396341,
										396347
									],
									[
										396430,
										396436
									],
									[
										396669,
										396675
									],
									[
										396747,
										396753
									],
									[
										396991,
										396997
									],
									[
										397221,
										397227
									],
									[
										397380,
										397386
									],
									[
										397562,
										397568
									],
									[
										397594,
										397600
									],
									[
										397820,
										397826
									],
									[
										398061,
										398067
									],
									[
										398198,
										398204
									],
									[
										398253,
										398259
									],
									[
										398264,
										398270
									],
									[
										398456,
										398462
									],
									[
										398686,
										398692
									],
									[
										398843,
										398849
									],
									[
										399004,
										399010
									],
									[
										399114,
										399120
									],
									[
										399328,
										399334
									],
									[
										399498,
										399504
									],
									[
										399725,
										399731
									],
									[
										399849,
										399855
									],
									[
										399932,
										399938
									],
									[
										400103,
										400109
									],
									[
										400282,
										400288
									],
									[
										400425,
										400431
									],
									[
										400533,
										400539
									],
									[
										400550,
										400556
									],
									[
										400582,
										400588
									],
									[
										400848,
										400854
									],
									[
										400866,
										400872
									],
									[
										400999,
										401005
									],
									[
										401220,
										401226
									],
									[
										401240,
										401246
									],
									[
										401509,
										401515
									],
									[
										401530,
										401536
									],
									[
										401552,
										401558
									],
									[
										401617,
										401623
									],
									[
										401699,
										401705
									],
									[
										401760,
										401766
									],
									[
										401821,
										401827
									],
									[
										402293,
										402299
									],
									[
										402324,
										402330
									],
									[
										402380,
										402386
									],
									[
										402437,
										402443
									],
									[
										402494,
										402500
									],
									[
										402684,
										402690
									],
									[
										402699,
										402705
									],
									[
										402715,
										402721
									],
									[
										402781,
										402787
									],
									[
										402991,
										402997
									],
									[
										403180,
										403186
									],
									[
										403196,
										403202
									],
									[
										403422,
										403428
									],
									[
										403438,
										403444
									],
									[
										403687,
										403693
									],
									[
										403703,
										403709
									],
									[
										404010,
										404016
									],
									[
										404293,
										404299
									],
									[
										404319,
										404325
									],
									[
										404459,
										404465
									],
									[
										404624,
										404630
									],
									[
										404929,
										404935
									],
									[
										405137,
										405143
									],
									[
										405364,
										405370
									],
									[
										405700,
										405706
									],
									[
										405885,
										405891
									],
									[
										406154,
										406160
									],
									[
										406342,
										406348
									],
									[
										406406,
										406412
									],
									[
										406689,
										406695
									],
									[
										406908,
										406914
									],
									[
										407094,
										407100
									],
									[
										407354,
										407360
									],
									[
										407375,
										407381
									],
									[
										407765,
										407771
									],
									[
										407831,
										407837
									],
									[
										407874,
										407880
									],
									[
										408188,
										408194
									],
									[
										408291,
										408297
									],
									[
										408324,
										408330
									],
									[
										408634,
										408640
									],
									[
										408939,
										408945
									],
									[
										408956,
										408962
									],
									[
										409186,
										409192
									],
									[
										409237,
										409243
									],
									[
										409321,
										409327
									],
									[
										409350,
										409356
									],
									[
										409379,
										409385
									],
									[
										409478,
										409484
									],
									[
										409507,
										409513
									],
									[
										409541,
										409547
									],
									[
										409673,
										409679
									],
									[
										409695,
										409701
									],
									[
										409713,
										409719
									],
									[
										409881,
										409887
									],
									[
										409944,
										409950
									],
									[
										410205,
										410211
									],
									[
										410281,
										410287
									],
									[
										410349,
										410355
									],
									[
										410665,
										410671
									],
									[
										410750,
										410756
									],
									[
										410853,
										410859
									],
									[
										410966,
										410972
									],
									[
										411185,
										411191
									],
									[
										411288,
										411294
									],
									[
										411464,
										411470
									],
									[
										411535,
										411541
									],
									[
										411913,
										411919
									],
									[
										412231,
										412237
									],
									[
										412418,
										412424
									],
									[
										412547,
										412553
									],
									[
										412564,
										412570
									],
									[
										412747,
										412753
									],
									[
										412823,
										412829
									],
									[
										412855,
										412861
									],
									[
										413170,
										413176
									],
									[
										413501,
										413507
									],
									[
										413727,
										413733
									],
									[
										413763,
										413769
									],
									[
										414000,
										414006
									],
									[
										414234,
										414240
									],
									[
										414466,
										414472
									],
									[
										414632,
										414638
									],
									[
										414774,
										414780
									],
									[
										415107,
										415113
									],
									[
										415355,
										415361
									],
									[
										415624,
										415630
									],
									[
										415639,
										415645
									],
									[
										415765,
										415771
									],
									[
										415875,
										415881
									],
									[
										416235,
										416241
									],
									[
										416289,
										416295
									],
									[
										416559,
										416565
									],
									[
										416742,
										416748
									],
									[
										416912,
										416918
									],
									[
										417205,
										417240
									],
									[
										417704,
										417727
									],
									[
										417974,
										417997
									],
									[
										418443,
										418466
									],
									[
										419034,
										419055
									],
									[
										419480,
										419501
									],
									[
										419702,
										419723
									],
									[
										419799,
										419820
									],
									[
										419899,
										419920
									],
									[
										420085,
										420106
									],
									[
										420154,
										420175
									],
									[
										420223,
										420244
									],
									[
										420374,
										420395
									],
									[
										420447,
										420468
									],
									[
										420517,
										420538
									],
									[
										420663,
										420684
									],
									[
										420733,
										420754
									],
									[
										420806,
										420827
									],
									[
										421096,
										421117
									],
									[
										421318,
										421339
									],
									[
										421415,
										421436
									],
									[
										421515,
										421536
									],
									[
										421701,
										421722
									],
									[
										421770,
										421791
									],
									[
										421839,
										421860
									],
									[
										421990,
										422011
									],
									[
										422063,
										422084
									],
									[
										422133,
										422154
									],
									[
										422279,
										422300
									],
									[
										422349,
										422370
									],
									[
										422422,
										422443
									],
									[
										422883,
										422893
									],
									[
										423108,
										423118
									],
									[
										423561,
										423571
									],
									[
										424145,
										424155
									],
									[
										424444,
										424454
									],
									[
										424463,
										424473
									],
									[
										424685,
										424695
									],
									[
										424752,
										424762
									],
									[
										424819,
										424829
									],
									[
										425096,
										425106
									],
									[
										425115,
										425125
									],
									[
										425366,
										425376
									],
									[
										425385,
										425395
									],
									[
										425399,
										425409
									],
									[
										425431,
										425441
									],
									[
										425708,
										425718
									],
									[
										425722,
										425732
									],
									[
										425822,
										425832
									],
									[
										425849,
										425859
									],
									[
										426099,
										426109
									],
									[
										426113,
										426123
									],
									[
										426225,
										426235
									],
									[
										426252,
										426262
									],
									[
										426636,
										426652
									],
									[
										427025,
										427041
									],
									[
										427394,
										427410
									],
									[
										427424,
										427440
									],
									[
										428010,
										428026
									],
									[
										428505,
										428521
									],
									[
										428540,
										428556
									],
									[
										428561,
										428577
									],
									[
										428850,
										428866
									],
									[
										428920,
										428936
									],
									[
										429178,
										429194
									],
									[
										429436,
										429452
									],
									[
										429870,
										429886
									],
									[
										430143,
										430159
									],
									[
										430198,
										430214
									],
									[
										430280,
										430296
									],
									[
										430448,
										430464
									],
									[
										430657,
										430673
									],
									[
										430889,
										430905
									],
									[
										430963,
										430979
									],
									[
										431117,
										431133
									],
									[
										431155,
										431171
									],
									[
										431208,
										431224
									],
									[
										431325,
										431341
									],
									[
										431568,
										431584
									],
									[
										431642,
										431658
									],
									[
										431904,
										431920
									],
									[
										432351,
										432367
									],
									[
										432840,
										432856
									],
									[
										433095,
										433111
									],
									[
										433213,
										433229
									],
									[
										433284,
										433300
									],
									[
										433584,
										433600
									],
									[
										433603,
										433619
									],
									[
										434134,
										434150
									],
									[
										434259,
										434275
									],
									[
										434607,
										434623
									],
									[
										434829,
										434845
									],
									[
										434970,
										434986
									],
									[
										435089,
										435105
									],
									[
										435204,
										435220
									],
									[
										435258,
										435274
									],
									[
										436293,
										436297
									],
									[
										436861,
										436865
									],
									[
										437957,
										437961
									],
									[
										439051,
										439055
									],
									[
										440142,
										440146
									],
									[
										440994,
										440998
									],
									[
										441035,
										441039
									],
									[
										441252,
										441256
									],
									[
										441560,
										441564
									],
									[
										441595,
										441599
									],
									[
										441634,
										441638
									],
									[
										442156,
										442170
									],
									[
										442217,
										442231
									],
									[
										442427,
										442441
									],
									[
										442796,
										442810
									],
									[
										443135,
										443149
									],
									[
										443191,
										443205
									],
									[
										443395,
										443409
									],
									[
										443747,
										443757
									],
									[
										443891,
										443901
									],
									[
										444092,
										444102
									],
									[
										444261,
										444271
									],
									[
										444427,
										444437
									],
									[
										444593,
										444603
									],
									[
										444759,
										444769
									],
									[
										444925,
										444935
									],
									[
										445163,
										445173
									],
									[
										445210,
										445220
									],
									[
										445691,
										445701
									],
									[
										446028,
										446038
									],
									[
										446511,
										446521
									],
									[
										446637,
										446647
									],
									[
										446783,
										446793
									],
									[
										446966,
										446976
									],
									[
										447149,
										447159
									],
									[
										447343,
										447353
									],
									[
										447523,
										447533
									],
									[
										447706,
										447716
									],
									[
										447884,
										447894
									],
									[
										448060,
										448070
									],
									[
										448408,
										448418
									],
									[
										448787,
										448797
									],
									[
										449100,
										449110
									],
									[
										449361,
										449371
									],
									[
										449517,
										449527
									],
									[
										449619,
										449629
									],
									[
										449776,
										449786
									],
									[
										450213,
										450223
									],
									[
										450502,
										450512
									],
									[
										450743,
										450753
									],
									[
										450842,
										450852
									],
									[
										451012,
										451022
									],
									[
										451053,
										451063
									],
									[
										451142,
										451152
									],
									[
										451328,
										451338
									],
									[
										451455,
										451465
									],
									[
										451632,
										451642
									],
									[
										451863,
										451873
									],
									[
										452093,
										452103
									],
									[
										452270,
										452280
									],
									[
										452430,
										452440
									],
									[
										452613,
										452623
									],
									[
										452900,
										452910
									],
									[
										453140,
										453150
									],
									[
										453471,
										453481
									],
									[
										453557,
										453567
									],
									[
										453915,
										453925
									],
									[
										454041,
										454051
									],
									[
										454437,
										454452
									],
									[
										454463,
										454478
									],
									[
										454675,
										454690
									],
									[
										454837,
										454852
									],
									[
										455299,
										455309
									],
									[
										455571,
										455581
									],
									[
										456670,
										456680
									],
									[
										457761,
										457771
									],
									[
										458855,
										458865
									],
									[
										460170,
										460183
									],
									[
										460206,
										460219
									],
									[
										460446,
										460459
									],
									[
										460613,
										460626
									],
									[
										460793,
										460806
									],
									[
										460919,
										460932
									],
									[
										461120,
										461133
									],
									[
										461174,
										461187
									],
									[
										461228,
										461241
									],
									[
										461468,
										461481
									],
									[
										461731,
										461744
									],
									[
										461980,
										461993
									],
									[
										462350,
										462363
									],
									[
										462718,
										462731
									],
									[
										463251,
										463264
									],
									[
										463555,
										463568
									],
									[
										463896,
										463909
									],
									[
										464350,
										464363
									],
									[
										464939,
										464952
									],
									[
										465025,
										465038
									],
									[
										465323,
										465336
									],
									[
										465568,
										465581
									],
									[
										465610,
										465623
									],
									[
										465808,
										465821
									],
									[
										465928,
										465941
									],
									[
										466164,
										466177
									],
									[
										466272,
										466285
									],
									[
										466548,
										466561
									],
									[
										466709,
										466722
									],
									[
										466836,
										466849
									],
									[
										467059,
										467072
									],
									[
										467350,
										467363
									],
									[
										467634,
										467647
									],
									[
										467983,
										467996
									],
									[
										468273,
										468286
									],
									[
										468607,
										468620
									],
									[
										468819,
										468832
									],
									[
										469079,
										469092
									],
									[
										469329,
										469342
									],
									[
										469698,
										469711
									],
									[
										470054,
										470067
									],
									[
										470317,
										470330
									],
									[
										470924,
										470952
									],
									[
										471265,
										471293
									],
									[
										471719,
										471747
									],
									[
										472089,
										472096
									],
									[
										472203,
										472210
									],
									[
										472431,
										472438
									],
									[
										472481,
										472488
									],
									[
										472755,
										472762
									],
									[
										473359,
										473366
									],
									[
										473473,
										473480
									],
									[
										473701,
										473708
									],
									[
										473751,
										473758
									],
									[
										474025,
										474032
									],
									[
										474252,
										474259
									],
									[
										474506,
										474513
									],
									[
										474859,
										474866
									],
									[
										475156,
										475163
									],
									[
										475406,
										475413
									],
									[
										475892,
										475899
									],
									[
										476096,
										476103
									],
									[
										476293,
										476300
									],
									[
										476417,
										476424
									],
									[
										476549,
										476556
									],
									[
										476689,
										476696
									],
									[
										476865,
										476872
									],
									[
										477140,
										477147
									],
									[
										477372,
										477379
									],
									[
										477651,
										477658
									],
									[
										477901,
										477908
									],
									[
										478116,
										478123
									],
									[
										478356,
										478363
									],
									[
										478564,
										478571
									],
									[
										478746,
										478753
									],
									[
										478930,
										478937
									],
									[
										479112,
										479119
									],
									[
										479417,
										479424
									],
									[
										479674,
										479681
									],
									[
										479986,
										479993
									],
									[
										480176,
										480183
									],
									[
										480455,
										480462
									],
									[
										480744,
										480751
									],
									[
										481059,
										481066
									],
									[
										481467,
										481474
									],
									[
										481902,
										481909
									],
									[
										481999,
										482006
									],
									[
										482374,
										482381
									],
									[
										482586,
										482593
									],
									[
										482784,
										482791
									],
									[
										482986,
										482993
									],
									[
										483268,
										483275
									],
									[
										483499,
										483506
									],
									[
										483705,
										483712
									],
									[
										483966,
										483973
									],
									[
										484145,
										484152
									],
									[
										484505,
										484512
									],
									[
										484618,
										484625
									],
									[
										484929,
										484936
									],
									[
										485125,
										485132
									],
									[
										485321,
										485328
									],
									[
										485457,
										485464
									],
									[
										485498,
										485505
									],
									[
										485623,
										485630
									],
									[
										485882,
										485889
									],
									[
										486050,
										486057
									],
									[
										486222,
										486229
									],
									[
										486488,
										486495
									],
									[
										486701,
										486708
									],
									[
										486918,
										486925
									],
									[
										487181,
										487188
									],
									[
										487422,
										487429
									],
									[
										487667,
										487674
									],
									[
										488038,
										488045
									],
									[
										488271,
										488278
									],
									[
										488508,
										488515
									],
									[
										488811,
										488818
									],
									[
										489102,
										489109
									],
									[
										489397,
										489404
									],
									[
										489763,
										489770
									],
									[
										489951,
										489958
									],
									[
										490143,
										490150
									],
									[
										490421,
										490428
									],
									[
										490625,
										490632
									],
									[
										490833,
										490840
									],
									[
										491098,
										491105
									],
									[
										491275,
										491282
									],
									[
										491456,
										491463
									],
									[
										491719,
										491726
									],
									[
										491902,
										491909
									],
									[
										492089,
										492096
									],
									[
										492394,
										492401
									],
									[
										492646,
										492653
									],
									[
										492902,
										492909
									],
									[
										493192,
										493199
									],
									[
										493378,
										493385
									],
									[
										493568,
										493575
									],
									[
										493821,
										493828
									],
									[
										494057,
										494064
									],
									[
										494297,
										494304
									],
									[
										494601,
										494608
									],
									[
										494768,
										494775
									],
									[
										494939,
										494946
									],
									[
										495135,
										495142
									],
									[
										495492,
										495499
									],
									[
										495605,
										495612
									],
									[
										495913,
										495920
									],
									[
										496109,
										496116
									],
									[
										496305,
										496312
									],
									[
										496441,
										496448
									],
									[
										496482,
										496489
									],
									[
										496607,
										496614
									],
									[
										496906,
										496913
									],
									[
										497311,
										497318
									],
									[
										497573,
										497580
									],
									[
										497740,
										497747
									],
									[
										497942,
										497949
									],
									[
										498307,
										498314
									],
									[
										498557,
										498564
									],
									[
										498601,
										498608
									],
									[
										498730,
										498737
									],
									[
										498858,
										498865
									],
									[
										499201,
										499208
									],
									[
										499465,
										499472
									],
									[
										499776,
										499783
									],
									[
										500064,
										500071
									],
									[
										500326,
										500333
									],
									[
										500598,
										500605
									],
									[
										500747,
										500754
									],
									[
										500913,
										500920
									],
									[
										501010,
										501017
									],
									[
										501218,
										501225
									],
									[
										501466,
										501473
									],
									[
										501656,
										501663
									],
									[
										502001,
										502008
									],
									[
										502332,
										502339
									],
									[
										502686,
										502693
									],
									[
										503039,
										503046
									],
									[
										503443,
										503450
									],
									[
										503780,
										503787
									],
									[
										504172,
										504179
									],
									[
										504531,
										504538
									],
									[
										504793,
										504800
									],
									[
										505000,
										505007
									],
									[
										505195,
										505202
									],
									[
										505386,
										505393
									],
									[
										505624,
										505631
									],
									[
										505921,
										505928
									],
									[
										506188,
										506195
									],
									[
										506411,
										506418
									],
									[
										506697,
										506704
									],
									[
										506968,
										506975
									],
									[
										507192,
										507199
									],
									[
										507502,
										507509
									],
									[
										507787,
										507794
									],
									[
										507964,
										507971
									],
									[
										508179,
										508186
									],
									[
										508354,
										508361
									],
									[
										508581,
										508588
									],
									[
										508893,
										508900
									],
									[
										508934,
										508941
									],
									[
										509060,
										509067
									],
									[
										509419,
										509426
									],
									[
										509744,
										509751
									],
									[
										510012,
										510019
									],
									[
										510403,
										510410
									],
									[
										510671,
										510678
									],
									[
										510977,
										510997
									],
									[
										511376,
										511396
									],
									[
										511811,
										511829
									],
									[
										512169,
										512187
									],
									[
										512349,
										512367
									],
									[
										512634,
										512652
									],
									[
										512906,
										512924
									],
									[
										513156,
										513174
									],
									[
										513573,
										513591
									],
									[
										513740,
										513758
									],
									[
										513960,
										513978
									],
									[
										514224,
										514242
									],
									[
										514405,
										514423
									],
									[
										514548,
										514566
									],
									[
										514752,
										514770
									],
									[
										515033,
										515051
									],
									[
										515291,
										515309
									],
									[
										515489,
										515507
									],
									[
										515751,
										515769
									],
									[
										515947,
										515965
									],
									[
										516174,
										516192
									],
									[
										516542,
										516548
									],
									[
										516912,
										516918
									],
									[
										517264,
										517270
									],
									[
										517476,
										517482
									],
									[
										517720,
										517726
									],
									[
										517914,
										517920
									],
									[
										518157,
										518163
									],
									[
										518288,
										518294
									],
									[
										518473,
										518479
									],
									[
										518684,
										518690
									],
									[
										518879,
										518885
									],
									[
										519164,
										519170
									],
									[
										519454,
										519466
									],
									[
										519608,
										519620
									],
									[
										519940,
										519949
									],
									[
										520056,
										520065
									],
									[
										520232,
										520241
									],
									[
										520454,
										520463
									],
									[
										520630,
										520639
									],
									[
										520738,
										520747
									],
									[
										520916,
										520925
									],
									[
										520996,
										521005
									],
									[
										521173,
										521182
									],
									[
										521383,
										521392
									],
									[
										521684,
										521700
									],
									[
										522114,
										522122
									],
									[
										522420,
										522428
									],
									[
										522704,
										522712
									],
									[
										522988,
										522996
									],
									[
										523273,
										523281
									],
									[
										523568,
										523576
									],
									[
										524041,
										524049
									],
									[
										524084,
										524092
									],
									[
										524343,
										524351
									],
									[
										524655,
										524663
									],
									[
										524881,
										524889
									],
									[
										524943,
										524951
									],
									[
										525201,
										525209
									],
									[
										525451,
										525459
									],
									[
										525497,
										525505
									],
									[
										525839,
										525847
									],
									[
										525906,
										525914
									],
									[
										526216,
										526224
									],
									[
										526439,
										526447
									],
									[
										526475,
										526483
									],
									[
										526599,
										526607
									],
									[
										526874,
										526882
									],
									[
										527166,
										527174
									],
									[
										527276,
										527284
									],
									[
										527461,
										527469
									],
									[
										527520,
										527528
									],
									[
										527807,
										527815
									],
									[
										528058,
										528066
									],
									[
										528346,
										528354
									],
									[
										528455,
										528463
									],
									[
										528550,
										528558
									],
									[
										528847,
										528855
									],
									[
										528951,
										528959
									],
									[
										529173,
										529181
									],
									[
										529618,
										529626
									],
									[
										530146,
										530154
									],
									[
										530526,
										530534
									],
									[
										530887,
										530895
									],
									[
										531180,
										531188
									],
									[
										531502,
										531510
									],
									[
										531807,
										531815
									],
									[
										532013,
										532021
									],
									[
										532427,
										532435
									],
									[
										532650,
										532658
									],
									[
										532977,
										532985
									],
									[
										533272,
										533280
									],
									[
										533336,
										533344
									],
									[
										533727,
										533735
									],
									[
										533984,
										533992
									],
									[
										534042,
										534050
									],
									[
										534347,
										534355
									],
									[
										534606,
										534614
									],
									[
										534660,
										534668
									],
									[
										534966,
										534974
									],
									[
										535253,
										535261
									],
									[
										535857,
										535865
									],
									[
										535924,
										535932
									],
									[
										536183,
										536191
									],
									[
										536256,
										536264
									],
									[
										536755,
										536763
									],
									[
										537101,
										537109
									],
									[
										537529,
										537537
									],
									[
										537691,
										537699
									],
									[
										537892,
										537900
									],
									[
										538038,
										538046
									],
									[
										538279,
										538287
									],
									[
										538389,
										538397
									],
									[
										538705,
										538713
									],
									[
										538888,
										538896
									],
									[
										539218,
										539226
									],
									[
										539387,
										539395
									],
									[
										539786,
										539794
									],
									[
										540107,
										540115
									],
									[
										540294,
										540302
									],
									[
										540526,
										540534
									],
									[
										540724,
										540732
									],
									[
										541037,
										541045
									],
									[
										541152,
										541160
									],
									[
										541386,
										541394
									],
									[
										541563,
										541571
									],
									[
										541713,
										541721
									],
									[
										541947,
										541955
									],
									[
										542069,
										542077
									],
									[
										542469,
										542477
									],
									[
										542602,
										542610
									],
									[
										542929,
										542937
									],
									[
										543186,
										543194
									],
									[
										543440,
										543448
									],
									[
										543674,
										543682
									],
									[
										543912,
										543920
									],
									[
										544350,
										544358
									],
									[
										544459,
										544467
									],
									[
										544475,
										544483
									],
									[
										545242,
										545250
									],
									[
										545262,
										545270
									],
									[
										545278,
										545286
									],
									[
										546103,
										546111
									],
									[
										546421,
										546429
									],
									[
										546466,
										546474
									],
									[
										546676,
										546684
									],
									[
										546773,
										546781
									],
									[
										546919,
										546927
									],
									[
										547000,
										547008
									],
									[
										547253,
										547261
									],
									[
										547555,
										547563
									],
									[
										547704,
										547712
									],
									[
										548015,
										548023
									],
									[
										548433,
										548441
									],
									[
										548766,
										548774
									],
									[
										549001,
										549009
									],
									[
										549270,
										549278
									],
									[
										549516,
										549524
									],
									[
										549685,
										549693
									],
									[
										549924,
										549932
									],
									[
										550096,
										550104
									],
									[
										550677,
										550682
									],
									[
										550805,
										550810
									],
									[
										551105,
										551110
									],
									[
										551408,
										551413
									],
									[
										551709,
										551718
									],
									[
										551895,
										551904
									],
									[
										551942,
										551951
									],
									[
										552022,
										552031
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								552027,
								552027
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 59,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 216529.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6508,
						"regions":
						{
						},
						"selection":
						[
							[
								4519,
								4519
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1555.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Falcor/Scene/Lights/Lights.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8431,
						"regions":
						{
						},
						"selection":
						[
							[
								4821,
								4821
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 954.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Falcor/Experimental/Scene/Lights/LightHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11731,
						"regions":
						{
						},
						"selection":
						[
							[
								11731,
								11731
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3671.0,
						"zoom_level": 1.0
					},
					"stack_index": 220,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/Falcor/Experimental/Scene/Lights/MeshLightData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2590,
						"regions":
						{
						},
						"selection":
						[
							[
								2563,
								2563
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 140,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Falcor/Experimental/Scene/Lights/UpdateTriangleVertices.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3167,
						"regions":
						{
						},
						"selection":
						[
							[
								3167,
								3167
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 218,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSamplerSharedDefinitions.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2024,
						"regions":
						{
						},
						"selection":
						[
							[
								2024,
								2024
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 217,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22640,
						"regions":
						{
						},
						"selection":
						[
							[
								22640,
								22640
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7683.0,
						"zoom_level": 1.0
					},
					"stack_index": 216,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHTypes.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8077,
						"regions":
						{
						},
						"selection":
						[
							[
								8077,
								8077
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2345.0,
						"zoom_level": 1.0
					},
					"stack_index": 219,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Falcor/Scene/SceneTypes.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7254,
						"regions":
						{
						},
						"selection":
						[
							[
								1792,
								1792
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 486.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Falcor/Utils/Math/PackedFormats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3763,
						"regions":
						{
						},
						"selection":
						[
							[
								3053,
								3053
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 444.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/Falcor/Utils/Math/Vector.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4190,
						"regions":
						{
						},
						"selection":
						[
							[
								1959,
								1959
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/Falcor/Utils/HostDeviceShared.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4264,
						"regions":
						{
						},
						"selection":
						[
							[
								4264,
								4264
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 40.0,
						"zoom_level": 1.0
					},
					"stack_index": 135,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/Falcor/Scene/Raster.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5014,
						"regions":
						{
						},
						"selection":
						[
							[
								4648,
								4648
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1020.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/Falcor/Scene/ShadingData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4621,
						"regions":
						{
						},
						"selection":
						[
							[
								1976,
								1976
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 409.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/Falcor/Scene/TextureSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5580,
						"regions":
						{
						},
						"selection":
						[
							[
								5580,
								5580
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1060.0,
						"zoom_level": 1.0
					},
					"stack_index": 138,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/Falcor/Utils/Helpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14517,
						"regions":
						{
						},
						"selection":
						[
							[
								14517,
								14517
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 136,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/Falcor/Scene/Scene.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21645,
						"regions":
						{
						},
						"selection":
						[
							[
								3379,
								3379
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/Falcor/Scene/Shading.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13477,
						"regions":
						{
						},
						"selection":
						[
							[
								1795,
								1795
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 104.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3697,
						"regions":
						{
						},
						"selection":
						[
							[
								2694,
								2694
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/Falcor/Scene/HitInfo.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3645,
						"regions":
						{
						},
						"selection":
						[
							[
								3645,
								3645
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 257,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/Falcor/Scene/Material/MaterialDefines.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5826,
						"regions":
						{
						},
						"selection":
						[
							[
								5826,
								5826
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/Falcor/Scene/Material/MaterialData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3778,
						"regions":
						{
						},
						"selection":
						[
							[
								3617,
								3617
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 417.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/Falcor/Scene/Material/BRDF.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4655,
						"regions":
						{
						},
						"selection":
						[
							[
								4655,
								4655
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/houdini/soho/python2.7/LSDsettings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31531,
						"regions":
						{
						},
						"selection":
						[
							[
								27114,
								27114
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10958.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "src/houdini/soho/python2.7/LSDapi.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8282,
						"regions":
						{
						},
						"selection":
						[
							[
								5068,
								5068
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2575.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "src/houdini/soho/python2.7/wranglers/HoudiniLightLSD.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19684,
						"regions":
						{
						},
						"selection":
						[
							[
								9083,
								9083
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3555.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "/opt/houdini17.5/houdini/soho/python2.7/IFDframe.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64638,
						"regions":
						{
						},
						"selection":
						[
							[
								31526,
								31526
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12179.0,
						"zoom_level": 1.0
					},
					"stack_index": 379,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "src/houdini/soho/overrides/RendererTable",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 177,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 369,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "src/Falcor/Core/API/DescriptorSet.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5856,
						"regions":
						{
						},
						"selection":
						[
							[
								5696,
								5696
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1792.0,
						"zoom_level": 1.0
					},
					"stack_index": 400,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "src/Falcor/Core/Framework.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13061,
						"regions":
						{
						},
						"selection":
						[
							[
								2336,
								2336
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5570.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "src/Falcor/RenderGraph/RenderPassLibrary.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11769,
						"regions":
						{
						},
						"selection":
						[
							[
								6775,
								6775
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2881.0,
						"zoom_level": 1.0
					},
					"stack_index": 296,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "src/lava_lib/reader_bgeo/bgeo/PackedFragment.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1087,
						"regions":
						{
						},
						"selection":
						[
							[
								549,
								549
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 345,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1924,
						"regions":
						{
						},
						"selection":
						[
							[
								410,
								410
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 301,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1041,
						"regions":
						{
						},
						"selection":
						[
							[
								1041,
								1041
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 300,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3143,
						"regions":
						{
						},
						"selection":
						[
							[
								1290,
								1290
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 309,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedFragment.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2368,
						"regions":
						{
						},
						"selection":
						[
							[
								444,
								444
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 305,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1377,
						"regions":
						{
						},
						"selection":
						[
							[
								789,
								789
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 311,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/util.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3965,
						"regions":
						{
						},
						"selection":
						[
							[
								1341,
								1341
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1027.0,
						"zoom_level": 1.0
					},
					"stack_index": 375,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "src/lava_lib/reader_bgeo/bgeo/BgeoHeader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3185,
						"regions":
						{
						},
						"selection":
						[
							[
								389,
								389
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1343.0,
						"zoom_level": 1.0
					},
					"stack_index": 337,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7133,
						"regions":
						{
						},
						"selection":
						[
							[
								461,
								461
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 62.0,
						"zoom_level": 1.0
					},
					"stack_index": 310,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5615,
						"regions":
						{
						},
						"selection":
						[
							[
								4697,
								4697
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1938.0,
						"zoom_level": 1.0
					},
					"stack_index": 306,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1812,
						"regions":
						{
						},
						"selection":
						[
							[
								1766,
								1766
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 312,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Poly.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1391,
						"regions":
						{
						},
						"selection":
						[
							[
								481,
								481
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Poly.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3804,
						"regions":
						{
						},
						"selection":
						[
							[
								3628,
								3628
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2193.0,
						"zoom_level": 1.0
					},
					"stack_index": 111,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "src/lava_lib/reader_bgeo/bgeo/Poly.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1612,
						"regions":
						{
						},
						"selection":
						[
							[
								827,
								827
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexArrayBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1191,
						"regions":
						{
						},
						"selection":
						[
							[
								717,
								717
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1170,
						"regions":
						{
						},
						"selection":
						[
							[
								1170,
								1170
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 299,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1723,
						"regions":
						{
						},
						"selection":
						[
							[
								1597,
								1597
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 308,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexMap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1392,
						"regions":
						{
						},
						"selection":
						[
							[
								1392,
								1392
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexArrayBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1131,
						"regions":
						{
						},
						"selection":
						[
							[
								364,
								364
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 313,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5251,
						"regions":
						{
						},
						"selection":
						[
							[
								4349,
								4349
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1966.0,
						"zoom_level": 1.0
					},
					"stack_index": 307,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7443,
						"regions":
						{
						},
						"selection":
						[
							[
								1205,
								1205
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 304,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitives.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1188,
						"regions":
						{
						},
						"selection":
						[
							[
								966,
								966
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 303,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4150,
						"regions":
						{
						},
						"selection":
						[
							[
								2809,
								2809
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 277,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "src/Falcor/Core/API/ComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3000,
						"regions":
						{
						},
						"selection":
						[
							[
								1967,
								1967
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"stack_index": 423,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3050,
						"regions":
						{
						},
						"selection":
						[
							[
								2269,
								2269
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 278,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "src/Falcor/RenderGraph/RenderPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2487,
						"regions":
						{
						},
						"selection":
						[
							[
								2487,
								2487
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "src/Falcor/Utils/Scripting/Dictionary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4757,
						"regions":
						{
						},
						"selection":
						[
							[
								1878,
								1878
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 169,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "src/Falcor/RenderGraph/RenderPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6997,
						"regions":
						{
						},
						"selection":
						[
							[
								1872,
								1872
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1583.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "src/Falcor/RenderGraph/RenderPassReflection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9565,
						"regions":
						{
						},
						"selection":
						[
							[
								9508,
								9508
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 180,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "src/RenderPasses/SkyBox/SkyBox.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3483,
						"regions":
						{
						},
						"selection":
						[
							[
								3426,
								3426
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 285,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8132,
						"regions":
						{
						},
						"selection":
						[
							[
								6913,
								6913
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1757.0,
						"zoom_level": 1.0
					},
					"stack_index": 387,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "src/Falcor/Raytracing/ShaderTable.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5792,
						"regions":
						{
						},
						"selection":
						[
							[
								2893,
								2893
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 861.0,
						"zoom_level": 1.0
					},
					"stack_index": 424,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "src/Falcor/Core/State/ComputeState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3455,
						"regions":
						{
						},
						"selection":
						[
							[
								3428,
								3428
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 230.0,
						"zoom_level": 1.0
					},
					"stack_index": 132,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17887,
						"regions":
						{
						},
						"selection":
						[
							[
								17628,
								17628
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6255.0,
						"zoom_level": 1.0
					},
					"stack_index": 142,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4245,
						"regions":
						{
						},
						"selection":
						[
							[
								2258,
								2258
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 143,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3328,
						"regions":
						{
						},
						"selection":
						[
							[
								2400,
								2400
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 417.0,
						"zoom_level": 1.0
					},
					"stack_index": 144,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4266,
						"regions":
						{
						},
						"selection":
						[
							[
								2994,
								2994
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 145,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15255,
						"regions":
						{
						},
						"selection":
						[
							[
								15255,
								15255
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6308.0,
						"zoom_level": 1.0
					},
					"stack_index": 148,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewerParams.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6133,
						"regions":
						{
						},
						"selection":
						[
							[
								6133,
								6133
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 698.0,
						"zoom_level": 1.0
					},
					"stack_index": 147,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "src/RenderPasses/CSM/CSM.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36004,
						"regions":
						{
						},
						"selection":
						[
							[
								28539,
								28539
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9891.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "src/RenderPasses/CSM/CSM.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8949,
						"regions":
						{
						},
						"selection":
						[
							[
								2042,
								2042
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2198.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "src/RenderPasses/CSM/CascadedShadowMap.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11750,
						"regions":
						{
						},
						"selection":
						[
							[
								11750,
								11750
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3421.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6309,
						"regions":
						{
						},
						"selection":
						[
							[
								3290,
								3290
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 395,
					"type": "text"
				},
				{
					"buffer": 76,
					"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3143,
						"regions":
						{
						},
						"selection":
						[
							[
								1898,
								1898
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 396,
					"type": "text"
				},
				{
					"buffer": 77,
					"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4322,
						"regions":
						{
						},
						"selection":
						[
							[
								2016,
								2016
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 397,
					"type": "text"
				},
				{
					"buffer": 78,
					"file": "src/RenderPasses/DepthPass/DepthPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5369,
						"regions":
						{
						},
						"selection":
						[
							[
								4831,
								4831
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"stack_index": 156,
					"type": "text"
				},
				{
					"buffer": 79,
					"file": "src/RenderPasses/DepthPass/DepthPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3634,
						"regions":
						{
						},
						"selection":
						[
							[
								3481,
								3481
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 157,
					"type": "text"
				},
				{
					"buffer": 80,
					"file": "src/RenderPasses/DepthPass/DepthPass.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2055,
						"regions":
						{
						},
						"selection":
						[
							[
								2055,
								2055
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 158,
					"type": "text"
				},
				{
					"buffer": 81,
					"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16583,
						"regions":
						{
						},
						"selection":
						[
							[
								1835,
								1835
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 394,
					"type": "text"
				},
				{
					"buffer": 82,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9790,
						"regions":
						{
						},
						"selection":
						[
							[
								7710,
								7710
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1836.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 83,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4631,
						"regions":
						{
						},
						"selection":
						[
							[
								4310,
								4310
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 634.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"type": "text"
				},
				{
					"buffer": 84,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5266,
						"regions":
						{
						},
						"selection":
						[
							[
								4980,
								4980
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1020.0,
						"zoom_level": 1.0
					},
					"stack_index": 264,
					"type": "text"
				},
				{
					"buffer": 85,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9035,
						"regions":
						{
						},
						"selection":
						[
							[
								2116,
								2116
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 275.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"type": "text"
				},
				{
					"buffer": 86,
					"file": "src/Falcor/RenderGraph/RenderPassHelpers.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5170,
						"regions":
						{
						},
						"selection":
						[
							[
								4742,
								4742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 247.0,
						"zoom_level": 1.0
					},
					"stack_index": 123,
					"type": "text"
				},
				{
					"buffer": 87,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6173,
						"regions":
						{
						},
						"selection":
						[
							[
								5790,
								5790
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 941.0,
						"zoom_level": 1.0
					},
					"stack_index": 133,
					"type": "text"
				},
				{
					"buffer": 88,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferParams.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2505,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 268,
					"type": "text"
				},
				{
					"buffer": 89,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2968,
						"regions":
						{
						},
						"selection":
						[
							[
								2268,
								2268
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 265,
					"type": "text"
				},
				{
					"buffer": 90,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5325,
						"regions":
						{
						},
						"selection":
						[
							[
								2503,
								2503
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 393.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"type": "text"
				},
				{
					"buffer": 91,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3116,
						"regions":
						{
						},
						"selection":
						[
							[
								2413,
								2413
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 258,
					"type": "text"
				},
				{
					"buffer": 92,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3360,
						"regions":
						{
						},
						"selection":
						[
							[
								2704,
								2704
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 121,
					"type": "text"
				},
				{
					"buffer": 93,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2938,
						"regions":
						{
						},
						"selection":
						[
							[
								2938,
								2938
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 262,
					"type": "text"
				},
				{
					"buffer": 94,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6595,
						"regions":
						{
						},
						"selection":
						[
							[
								6595,
								6595
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1461.0,
						"zoom_level": 1.0
					},
					"stack_index": 261,
					"type": "text"
				},
				{
					"buffer": 95,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3381,
						"regions":
						{
						},
						"selection":
						[
							[
								3381,
								3381
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 260,
					"type": "text"
				},
				{
					"buffer": 96,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3086,
						"regions":
						{
						},
						"selection":
						[
							[
								2675,
								2675
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 263,
					"type": "text"
				},
				{
					"buffer": 97,
					"file": "src/RenderPasses/GBuffer/GBufferBase.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3917,
						"regions":
						{
						},
						"selection":
						[
							[
								3462,
								3462
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 134,
					"type": "text"
				},
				{
					"buffer": 98,
					"file": "src/RenderPasses/GBuffer/GBufferBase.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7330,
						"regions":
						{
						},
						"selection":
						[
							[
								3221,
								3221
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 124,
					"type": "text"
				},
				{
					"buffer": 99,
					"file": "src/Falcor/Scene/VertexAttrib.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2497,
						"regions":
						{
						},
						"selection":
						[
							[
								2297,
								2297
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 311.0,
						"zoom_level": 1.0
					},
					"stack_index": 137,
					"type": "text"
				},
				{
					"buffer": 100,
					"file": "src/RenderPasses/GBuffer/GBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8886,
						"regions":
						{
						},
						"selection":
						[
							[
								1932,
								1932
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 266,
					"type": "text"
				},
				{
					"buffer": 101,
					"file": "src/RenderPasses/GBuffer/GBuffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2992,
						"regions":
						{
						},
						"selection":
						[
							[
								2992,
								2992
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 267,
					"type": "text"
				},
				{
					"buffer": 102,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9506,
						"regions":
						{
						},
						"selection":
						[
							[
								9506,
								9506
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2634.0,
						"zoom_level": 1.0
					},
					"stack_index": 259,
					"type": "text"
				},
				{
					"buffer": 103,
					"file": "src/RenderPasses/MegakernelPathTracer/MegakernelPathTracer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8875,
						"regions":
						{
						},
						"selection":
						[
							[
								1865,
								1865
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 393,
					"type": "text"
				},
				{
					"buffer": 104,
					"file": "src/RenderPasses/MinimalPathTracer/MinimalPathTracer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11926,
						"regions":
						{
						},
						"selection":
						[
							[
								2181,
								2181
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 392,
					"type": "text"
				},
				{
					"buffer": 105,
					"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15137,
						"regions":
						{
						},
						"selection":
						[
							[
								2218,
								2218
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 391,
					"type": "text"
				},
				{
					"buffer": 106,
					"file": "src/RenderPasses/SkyBox/SkyBox.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8135,
						"regions":
						{
						},
						"selection":
						[
							[
								2710,
								2710
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1379.0,
						"zoom_level": 1.0
					},
					"stack_index": 122,
					"type": "text"
				},
				{
					"buffer": 107,
					"file": "src/Falcor/Scene/Camera/Camera.cpp.bak",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13781,
						"regions":
						{
						},
						"selection":
						[
							[
								4869,
								4869
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 195,
					"type": "text"
				},
				{
					"buffer": 108,
					"file": "src/RenderPasses/SkyBox/SkyBox.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2542,
						"regions":
						{
						},
						"selection":
						[
							[
								2463,
								2463
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 594.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 109,
					"file": "src/Falcor/Scene/Scene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 76339,
						"regions":
						{
						},
						"selection":
						[
							[
								37532,
								37532
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19616.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 110,
					"file": "src/Falcor/FalcorExperimental.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1962,
						"regions":
						{
						},
						"selection":
						[
							[
								1962,
								1962
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 111,
					"file": "src/Falcor/Testing/UnitTest.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18153,
						"regions":
						{
						},
						"selection":
						[
							[
								2118,
								2118
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 175,
					"type": "text"
				},
				{
					"buffer": 112,
					"file": "src/Falcor/Utils/Scripting/Scripting.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5848,
						"regions":
						{
						},
						"selection":
						[
							[
								4270,
								4270
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 161,
					"type": "text"
				},
				{
					"buffer": 113,
					"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7903,
						"regions":
						{
						},
						"selection":
						[
							[
								2029,
								2029
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 96.0,
						"zoom_level": 1.0
					},
					"stack_index": 159,
					"type": "text"
				},
				{
					"buffer": 114,
					"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16660,
						"regions":
						{
						},
						"selection":
						[
							[
								8900,
								8900
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 178.0,
						"zoom_level": 1.0
					},
					"stack_index": 116,
					"type": "text"
				},
				{
					"buffer": 115,
					"file": "src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25032,
						"regions":
						{
						},
						"selection":
						[
							[
								13208,
								13208
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4180.0,
						"zoom_level": 1.0
					},
					"stack_index": 270,
					"type": "text"
				},
				{
					"buffer": 116,
					"file": "src/houdini/FBrender",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 505,
						"regions":
						{
						},
						"selection":
						[
							[
								246,
								246
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 284,
					"type": "text"
				},
				{
					"buffer": 117,
					"file": "src/Falcor/Scene/Importers/AssimpImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 45604,
						"regions":
						{
						},
						"selection":
						[
							[
								14132,
								14132
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5448.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 118,
					"file": "src/Falcor/Scene/Importers/SceneImporter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2195,
						"regions":
						{
						},
						"selection":
						[
							[
								1893,
								1893
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 188,
					"type": "text"
				},
				{
					"buffer": 119,
					"file": "src/Falcor/Scene/Importers/PythonImporter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2183,
						"regions":
						{
						},
						"selection":
						[
							[
								1899,
								1899
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 187,
					"type": "text"
				},
				{
					"buffer": 120,
					"file": "src/Falcor/Scene/Importer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4276,
						"regions":
						{
						},
						"selection":
						[
							[
								4276,
								4276
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 256.0,
						"zoom_level": 1.0
					},
					"stack_index": 191,
					"type": "text"
				},
				{
					"buffer": 121,
					"file": "src/Falcor/Scene/Importer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2992,
						"regions":
						{
						},
						"selection":
						[
							[
								2991,
								2991
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 190,
					"type": "text"
				},
				{
					"buffer": 122,
					"file": "src/Falcor/Core/Program/Program.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12423,
						"regions":
						{
						},
						"selection":
						[
							[
								7627,
								7627
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3068.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 123,
					"file": "src/Falcor/Core/API/Vulkan/VKShader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2775,
						"regions":
						{
						},
						"selection":
						[
							[
								1987,
								1987
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 79.0,
						"zoom_level": 1.0
					},
					"stack_index": 420,
					"type": "text"
				},
				{
					"buffer": 124,
					"file": "src/Falcor/Core/Program/ProgramVars.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14498,
						"regions":
						{
						},
						"selection":
						[
							[
								13879,
								13879
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4723.0,
						"zoom_level": 1.0
					},
					"stack_index": 236,
					"type": "text"
				},
				{
					"buffer": 125,
					"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27538,
						"regions":
						{
						},
						"selection":
						[
							[
								3595,
								3595
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 784.0,
						"zoom_level": 1.0
					},
					"stack_index": 129,
					"type": "text"
				},
				{
					"buffer": 126,
					"file": "src/Falcor/Core/State/GraphicsState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8532,
						"regions":
						{
						},
						"selection":
						[
							[
								2984,
								2984
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2405.0,
						"zoom_level": 1.0
					},
					"stack_index": 117,
					"type": "text"
				},
				{
					"buffer": 127,
					"file": "src/Falcor/Core/Window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18049,
						"regions":
						{
						},
						"selection":
						[
							[
								18049,
								18049
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7293.0,
						"zoom_level": 1.0
					},
					"stack_index": 235,
					"type": "text"
				},
				{
					"buffer": 128,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2247,
						"regions":
						{
						},
						"selection":
						[
							[
								2238,
								2238
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 234,
					"type": "text"
				},
				{
					"buffer": 129,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2775,
						"regions":
						{
						},
						"selection":
						[
							[
								2766,
								2766
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 233,
					"type": "text"
				},
				{
					"buffer": 130,
					"file": "src/Falcor/Core/API/GraphicsStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4325,
						"regions":
						{
						},
						"selection":
						[
							[
								4144,
								4144
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 393.0,
						"zoom_level": 1.0
					},
					"stack_index": 120,
					"type": "text"
				},
				{
					"buffer": 131,
					"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5776,
						"regions":
						{
						},
						"selection":
						[
							[
								3935,
								3935
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1022.0,
						"zoom_level": 1.0
					},
					"stack_index": 118,
					"type": "text"
				},
				{
					"buffer": 132,
					"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5196,
						"regions":
						{
						},
						"selection":
						[
							[
								4761,
								4761
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 317.0,
						"zoom_level": 1.0
					},
					"stack_index": 128,
					"type": "text"
				},
				{
					"buffer": 133,
					"file": "src/Falcor/Core/API/ComputeStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2487,
						"regions":
						{
						},
						"selection":
						[
							[
								2237,
								2237
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 119,
					"type": "text"
				},
				{
					"buffer": 134,
					"file": "src/Falcor/Core/API/ComputeStateObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3498,
						"regions":
						{
						},
						"selection":
						[
							[
								2870,
								2870
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 131,
					"type": "text"
				},
				{
					"buffer": 135,
					"file": "src/Falcor/Core/API/GraphicsStateObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6436,
						"regions":
						{
						},
						"selection":
						[
							[
								4674,
								4674
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 269,
					"type": "text"
				},
				{
					"buffer": 136,
					"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2479,
						"regions":
						{
						},
						"selection":
						[
							[
								2215,
								2215
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 160.0,
						"zoom_level": 1.0
					},
					"stack_index": 425,
					"type": "text"
				},
				{
					"buffer": 137,
					"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7858,
						"regions":
						{
						},
						"selection":
						[
							[
								5480,
								5480
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1210.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 138,
					"file": "src/Falcor/Core/Platform/OS.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10466,
						"regions":
						{
						},
						"selection":
						[
							[
								3061,
								3061
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 687.0,
						"zoom_level": 1.0
					},
					"stack_index": 398,
					"type": "text"
				},
				{
					"buffer": 139,
					"file": "src/Falcor/Core/Platform/OS.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16345,
						"regions":
						{
						},
						"selection":
						[
							[
								15941,
								15941
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6349.0,
						"zoom_level": 1.0
					},
					"stack_index": 295,
					"type": "text"
				},
				{
					"buffer": 140,
					"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15279,
						"regions":
						{
						},
						"selection":
						[
							[
								1907,
								1907
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 126,
					"type": "text"
				},
				{
					"buffer": 141,
					"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8441,
						"regions":
						{
						},
						"selection":
						[
							[
								7806,
								7806
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 142,
					"file": "src/Falcor/Core/Program/Program.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34669,
						"regions":
						{
						},
						"selection":
						[
							[
								26768,
								26768
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15560.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 143,
					"file": "src/lava_lib/readers/grammar_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25009,
						"regions":
						{
						},
						"selection":
						[
							[
								7052,
								7052
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4182.0,
						"zoom_level": 1.0
					},
					"stack_index": 413,
					"type": "text"
				},
				{
					"buffer": 144,
					"file": "src/Falcor/Utils/UI/Gui.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2541,
						"regions":
						{
						},
						"selection":
						[
							[
								2097,
								2097
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 286,
					"type": "text"
				},
				{
					"buffer": 145,
					"file": "third_party/slang/source/slang/slang.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 123225,
						"regions":
						{
						},
						"selection":
						[
							[
								62930,
								62930
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 32855.0,
						"zoom_level": 1.0
					},
					"stack_index": 421,
					"type": "text"
				},
				{
					"buffer": 146,
					"file": "src/Falcor/Utils/UI/Gui.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 57291,
						"regions":
						{
						},
						"selection":
						[
							[
								55499,
								55499
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20359.0,
						"zoom_level": 1.0
					},
					"stack_index": 163,
					"type": "text"
				},
				{
					"buffer": 147,
					"file": "src/Falcor/Utils/Video/VideoEncoder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15920,
						"regions":
						{
						},
						"selection":
						[
							[
								15574,
								15574
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6630.0,
						"zoom_level": 1.0
					},
					"stack_index": 162,
					"type": "text"
				},
				{
					"buffer": 148,
					"file": "third_party/slang/slang.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 133488,
						"regions":
						{
						},
						"selection":
						[
							[
								22600,
								22600
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11707.0,
						"zoom_level": 1.0
					},
					"stack_index": 422,
					"type": "text"
				},
				{
					"buffer": 149,
					"file": "src/Falcor/Core/API/FBO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13546,
						"regions":
						{
						},
						"selection":
						[
							[
								6830,
								6830
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 723.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"type": "text"
				},
				{
					"buffer": 150,
					"file": "src/Falcor/Core/API/FBO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18183,
						"regions":
						{
						},
						"selection":
						[
							[
								18174,
								18174
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6094.0,
						"zoom_level": 1.0
					},
					"stack_index": 247,
					"type": "text"
				},
				{
					"buffer": 151,
					"file": "src/Falcor/Core/API/Formats.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19770,
						"regions":
						{
						},
						"selection":
						[
							[
								19761,
								19761
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 246,
					"type": "text"
				},
				{
					"buffer": 152,
					"file": "src/Falcor/Core/API/GpuTimer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4521,
						"regions":
						{
						},
						"selection":
						[
							[
								4494,
								4494
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1122.0,
						"zoom_level": 1.0
					},
					"stack_index": 245,
					"type": "text"
				},
				{
					"buffer": 153,
					"file": "src/Falcor/Core/API/RasterizerState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2331,
						"regions":
						{
						},
						"selection":
						[
							[
								1913,
								1913
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 244,
					"type": "text"
				},
				{
					"buffer": 154,
					"file": "src/Falcor/Core/API/Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5187,
						"regions":
						{
						},
						"selection":
						[
							[
								5160,
								5160
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1683.0,
						"zoom_level": 1.0
					},
					"stack_index": 243,
					"type": "text"
				},
				{
					"buffer": 155,
					"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5086,
						"regions":
						{
						},
						"selection":
						[
							[
								4696,
								4696
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1307.0,
						"zoom_level": 1.0
					},
					"stack_index": 115,
					"type": "text"
				},
				{
					"buffer": 156,
					"file": "src/Falcor/Core/API/Texture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17176,
						"regions":
						{
						},
						"selection":
						[
							[
								7113,
								7113
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2652.0,
						"zoom_level": 1.0
					},
					"stack_index": 114,
					"type": "text"
				},
				{
					"buffer": 157,
					"file": "src/Falcor/Core/API/VAO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3635,
						"regions":
						{
						},
						"selection":
						[
							[
								3608,
								3608
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 240,
					"type": "text"
				},
				{
					"buffer": 158,
					"file": "src/Falcor/Core/API/VertexLayout.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1912,
						"regions":
						{
						},
						"selection":
						[
							[
								1912,
								1912
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 239,
					"type": "text"
				},
				{
					"buffer": 159,
					"file": "src/Falcor/Core/Framework.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2452,
						"regions":
						{
						},
						"selection":
						[
							[
								1793,
								1793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 179,
					"type": "text"
				},
				{
					"buffer": 160,
					"file": "src/Falcor/Core/Program/ComputeProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2688,
						"regions":
						{
						},
						"selection":
						[
							[
								2657,
								2657
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 238,
					"type": "text"
				},
				{
					"buffer": 161,
					"file": "src/Falcor/Core/API/Texture.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16201,
						"regions":
						{
						},
						"selection":
						[
							[
								1845,
								1845
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 206.0,
						"zoom_level": 1.0
					},
					"stack_index": 177,
					"type": "text"
				},
				{
					"buffer": 162,
					"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11549,
						"regions":
						{
						},
						"selection":
						[
							[
								4223,
								4223
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 837.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 163,
					"file": "src/Falcor/Core/API/ResourceViews.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9621,
						"regions":
						{
						},
						"selection":
						[
							[
								8152,
								8152
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 459.0,
						"zoom_level": 1.0
					},
					"stack_index": 178,
					"type": "text"
				},
				{
					"buffer": 164,
					"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13448,
						"regions":
						{
						},
						"selection":
						[
							[
								6850,
								6850
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4573.0,
						"zoom_level": 1.0
					},
					"stack_index": 388,
					"type": "text"
				},
				{
					"buffer": 165,
					"file": "src/Falcor/Core/API/ResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5935,
						"regions":
						{
						},
						"selection":
						[
							[
								5910,
								5910
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1080.0,
						"zoom_level": 1.0
					},
					"stack_index": 242,
					"type": "text"
				},
				{
					"buffer": 166,
					"file": "src/Falcor/Core/API/Sampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4072,
						"regions":
						{
						},
						"selection":
						[
							[
								4072,
								4072
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"stack_index": 241,
					"type": "text"
				},
				{
					"buffer": 167,
					"file": "src/Falcor/Core/API/Device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15908,
						"regions":
						{
						},
						"selection":
						[
							[
								15760,
								15760
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5765.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 168,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30042,
						"regions":
						{
						},
						"selection":
						[
							[
								13642,
								13642
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5169.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 169,
					"file": "src/Falcor/Core/API/Formats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13822,
						"regions":
						{
						},
						"selection":
						[
							[
								4075,
								4075
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 911.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"type": "text"
				},
				{
					"buffer": 170,
					"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6579,
						"regions":
						{
						},
						"selection":
						[
							[
								2495,
								2495
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 58.0,
						"zoom_level": 1.0
					},
					"stack_index": 426,
					"type": "text"
				},
				{
					"buffer": 171,
					"file": "src/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 493,
						"regions":
						{
						},
						"selection":
						[
							[
								51,
								51
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"type": "text"
				},
				{
					"buffer": 172,
					"file": "src/Mogwai/Mogwai.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25155,
						"regions":
						{
						},
						"selection":
						[
							[
								15405,
								15405
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6759.0,
						"zoom_level": 1.0
					},
					"stack_index": 287,
					"type": "text"
				},
				{
					"buffer": 173,
					"file": "src/Falcor/Core/API/RenderContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11441,
						"regions":
						{
						},
						"selection":
						[
							[
								4053,
								4053
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 452.0,
						"zoom_level": 1.0
					},
					"stack_index": 291,
					"type": "text"
				},
				{
					"buffer": 174,
					"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5608,
						"regions":
						{
						},
						"selection":
						[
							[
								3194,
								3194
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 469.0,
						"zoom_level": 1.0
					},
					"stack_index": 290,
					"type": "text"
				},
				{
					"buffer": 175,
					"file": "src/Falcor/Core/API/RenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5362,
						"regions":
						{
						},
						"selection":
						[
							[
								2053,
								2053
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 333.0,
						"zoom_level": 1.0
					},
					"stack_index": 292,
					"type": "text"
				},
				{
					"buffer": 176,
					"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5216,
						"regions":
						{
						},
						"selection":
						[
							[
								3897,
								3897
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 160,
					"type": "text"
				},
				{
					"buffer": 177,
					"file": "src/Falcor/Core/API/BlendState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3710,
						"regions":
						{
						},
						"selection":
						[
							[
								3701,
								3701
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 459.0,
						"zoom_level": 1.0
					},
					"stack_index": 249,
					"type": "text"
				},
				{
					"buffer": 178,
					"file": "src/Falcor/Core/API/Buffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12500,
						"regions":
						{
						},
						"selection":
						[
							[
								12424,
								12424
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4386.0,
						"zoom_level": 1.0
					},
					"stack_index": 248,
					"type": "text"
				},
				{
					"buffer": 179,
					"file": "src/Falcor/Core/API/DepthStencilState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3745,
						"regions":
						{
						},
						"selection":
						[
							[
								1904,
								1904
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 130,
					"type": "text"
				},
				{
					"buffer": 180,
					"file": "src/Falcor/RenderGraph/RenderGraphExe.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4019,
						"regions":
						{
						},
						"selection":
						[
							[
								4019,
								4019
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 53.0,
						"zoom_level": 1.0
					},
					"stack_index": 256,
					"type": "text"
				},
				{
					"buffer": 181,
					"file": "src/Falcor/Core/Renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7203,
						"regions":
						{
						},
						"selection":
						[
							[
								2728,
								2728
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 926.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 182,
					"file": "src/Falcor/Core/Sample.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7389,
						"regions":
						{
						},
						"selection":
						[
							[
								6595,
								6595
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 254,
					"type": "text"
				},
				{
					"buffer": 183,
					"file": "src/Mogwai/Mogwai.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8364,
						"regions":
						{
						},
						"selection":
						[
							[
								1851,
								1851
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 293,
					"type": "text"
				},
				{
					"buffer": 184,
					"file": "src/Falcor/Core/API/Device.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11462,
						"regions":
						{
						},
						"selection":
						[
							[
								2643,
								2643
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 529.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				},
				{
					"buffer": 185,
					"file": "src/Falcor/Core/Sample.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25487,
						"regions":
						{
						},
						"selection":
						[
							[
								19451,
								19451
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 423.0,
						"zoom_level": 1.0
					},
					"stack_index": 165,
					"type": "text"
				},
				{
					"buffer": 186,
					"file": "src/Falcor/Utils/Timing/Clock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9897,
						"regions":
						{
						},
						"selection":
						[
							[
								7458,
								7458
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3468.0,
						"zoom_level": 1.0
					},
					"stack_index": 164,
					"type": "text"
				},
				{
					"buffer": 187,
					"file": "src/lava_lib/renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12511,
						"regions":
						{
						},
						"selection":
						[
							[
								9530,
								9530
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4437.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 188,
					"file": "src/Falcor/Utils/Timing/Clock.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8564,
						"regions":
						{
						},
						"selection":
						[
							[
								2715,
								2715
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 433.0,
						"zoom_level": 1.0
					},
					"stack_index": 279,
					"type": "text"
				},
				{
					"buffer": 189,
					"file": "src/Falcor/Core/API/DeviceManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3635,
						"regions":
						{
						},
						"selection":
						[
							[
								2466,
								2466
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 442.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 190,
					"file": "src/Falcor/RenderGraph/RenderGraph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12323,
						"regions":
						{
						},
						"selection":
						[
							[
								12038,
								12038
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2805.0,
						"zoom_level": 1.0
					},
					"stack_index": 168,
					"type": "text"
				},
				{
					"buffer": 191,
					"file": "src/Falcor/RenderGraph/RenderGraphCompiler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3226,
						"regions":
						{
						},
						"selection":
						[
							[
								1895,
								1895
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 22.0,
						"zoom_level": 1.0
					},
					"stack_index": 288,
					"type": "text"
				},
				{
					"buffer": 192,
					"file": "third_party/slang/prelude/slang-cpp-types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37133,
						"regions":
						{
						},
						"selection":
						[
							[
								2142,
								2142
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2356.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"type": "text"
				},
				{
					"buffer": 193,
					"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31232,
						"regions":
						{
						},
						"selection":
						[
							[
								14777,
								14777
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5916.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 194,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 74,
						"regions":
						{
						},
						"selection":
						[
							[
								73,
								73
							]
						],
						"settings":
						{
							"auto_name": "SkyBox + 7 eagle models. 4K x 256spp (with MESA)",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 195,
					"file": "src/lava_lib/display.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2601,
						"regions":
						{
						},
						"selection":
						[
							[
								930,
								930
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 281,
					"type": "text"
				},
				{
					"buffer": 196,
					"file": "src/lava_lib/display.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12020,
						"regions":
						{
						},
						"selection":
						[
							[
								9100,
								9100
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4266.0,
						"zoom_level": 1.0
					},
					"stack_index": 280,
					"type": "text"
				},
				{
					"buffer": 197,
					"file": "third_party/prman/ri.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49551,
						"regions":
						{
						},
						"selection":
						[
							[
								2889,
								2889
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 857.0,
						"zoom_level": 1.0
					},
					"stack_index": 386,
					"type": "text"
				},
				{
					"buffer": 198,
					"file": "src/lava_lib/reader_lsd/visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5800,
						"regions":
						{
						},
						"selection":
						[
							[
								5213,
								5213
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2550.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 199,
					"file": "/opt/lava/test/simple_inline_ascii3.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7575,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2193.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"type": "text"
				},
				{
					"buffer": 200,
					"file": "src/lava_lib/reader_lsd/session.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13438,
						"regions":
						{
						},
						"selection":
						[
							[
								6679,
								6679
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2924.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 201,
					"file": "src/lava_utils_lib/ut_string.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 609,
						"regions":
						{
						},
						"selection":
						[
							[
								573,
								573
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 271,
					"type": "text"
				},
				{
					"buffer": 202,
					"file": "src/lava_utils_lib/ut_string.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 298,
						"regions":
						{
						},
						"selection":
						[
							[
								229,
								229
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"type": "text"
				},
				{
					"buffer": 203,
					"file": "/opt/lava/test/imdisplay_test.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 609,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								184
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 361,
					"type": "text"
				},
				{
					"buffer": 204,
					"file": "third_party/ri_display/d_houdini.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32314,
						"regions":
						{
						},
						"selection":
						[
							[
								26599,
								26599
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 18030.0,
						"zoom_level": 1.0
					},
					"stack_index": 362,
					"type": "text"
				},
				{
					"buffer": 205,
					"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBprman17.0.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17134,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4386.0,
						"zoom_level": 1.0
					},
					"stack_index": 385,
					"type": "text"
				},
				{
					"buffer": 206,
					"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIB.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15241,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5508.0,
						"zoom_level": 1.0
					},
					"stack_index": 384,
					"type": "text"
				},
				{
					"buffer": 207,
					"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBapi.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14671,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 383,
					"type": "text"
				},
				{
					"buffer": 208,
					"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBapiprman.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14917,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8976.0,
						"zoom_level": 1.0
					},
					"stack_index": 382,
					"type": "text"
				},
				{
					"buffer": 209,
					"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBmisc.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12877,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5457.0,
						"zoom_level": 1.0
					},
					"stack_index": 381,
					"type": "text"
				},
				{
					"buffer": 210,
					"file": "/opt/hfs17.5.460/houdini/soho/python2.7/RIBframe.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53439,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 22032.0,
						"zoom_level": 1.0
					},
					"stack_index": 380,
					"type": "text"
				},
				{
					"buffer": 211,
					"file": "src/lava_cmd/bin/lava_app_init.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 326,
						"regions":
						{
						},
						"selection":
						[
							[
								102,
								102
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Bash.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 282,
					"type": "text"
				},
				{
					"buffer": 212,
					"file": "src/lava_cmd/bin/lava",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 340,
						"regions":
						{
						},
						"selection":
						[
							[
								235,
								235
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Bash.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 283,
					"type": "text"
				},
				{
					"buffer": 213,
					"file": "src/houdini/soho/parameters/lava.ds",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 112264,
						"regions":
						{
						},
						"selection":
						[
							[
								30770,
								30770
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 884.0,
						"zoom_level": 1.0
					},
					"stack_index": 273,
					"type": "text"
				},
				{
					"buffer": 214,
					"file": "src/houdini/soho/parameters/SOHOparameters",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 268,
						"regions":
						{
						},
						"selection":
						[
							[
								267,
								267
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 274,
					"type": "text"
				},
				{
					"buffer": 215,
					"file": "third_party/ri_display/d_houdini.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4398,
						"regions":
						{
						},
						"selection":
						[
							[
								3615,
								3615
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 363,
					"type": "text"
				},
				{
					"buffer": 216,
					"file": "third_party/ri_display/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 683,
						"regions":
						{
						},
						"selection":
						[
							[
								30,
								30
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 352,
					"type": "text"
				},
				{
					"buffer": 217,
					"file": "src/lava_cmd/lava_cmd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7077,
						"regions":
						{
						},
						"selection":
						[
							[
								7004,
								7004
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2142.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 218,
					"file": "src/lava_lib/reader_lsd/reader_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1455,
						"regions":
						{
						},
						"selection":
						[
							[
								182,
								182
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 219,
					"file": "src/lava_lib/reader_lsd/grammar_lsd_expr.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7071,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 612.0,
						"zoom_level": 1.0
					},
					"stack_index": 401,
					"type": "text"
				},
				{
					"buffer": 220,
					"file": "src/lava_lib/reader_lsd/visitor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4047,
						"regions":
						{
						},
						"selection":
						[
							[
								1189,
								1189
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 510.0,
						"zoom_level": 1.0
					},
					"stack_index": 275,
					"type": "text"
				},
				{
					"buffer": 221,
					"file": "src/lava_lib/reader_lsd/grammar_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26054,
						"regions":
						{
						},
						"selection":
						[
							[
								2460,
								2460
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 688.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 222,
					"file": "src/Falcor/Utils/Math/FalcorMath.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8456,
						"regions":
						{
						},
						"selection":
						[
							[
								5205,
								5205
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 223,
					"file": "src/lava_lib/reader_lsd/bgeo_handler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1063,
						"regions":
						{
						},
						"selection":
						[
							[
								22,
								22
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 353,
					"type": "text"
				},
				{
					"buffer": 224,
					"file": "src/lava_lib/reader_lsd/bgeo_handler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1622,
						"regions":
						{
						},
						"selection":
						[
							[
								660,
								660
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 407,
					"type": "text"
				},
				{
					"buffer": 225,
					"file": "src/lava_lib/reader_lsd/bgeo.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 514,
						"regions":
						{
						},
						"selection":
						[
							[
								422,
								422
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 408,
					"type": "text"
				},
				{
					"buffer": 226,
					"file": "src/lava_lib/reader_lsd/scope.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6902,
						"regions":
						{
						},
						"selection":
						[
							[
								6118,
								6118
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2006.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 227,
					"file": "src/lava_lib/reader_lsd/visitor_echo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6577,
						"regions":
						{
						},
						"selection":
						[
							[
								5372,
								5372
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2505.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 228,
					"file": "src/lava_lib/reader_lsd/session.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2363,
						"regions":
						{
						},
						"selection":
						[
							[
								2363,
								2363
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 229,
					"file": "src/lava_lib/reader_lsd/properties_container.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9378,
						"regions":
						{
						},
						"selection":
						[
							[
								6846,
								6846
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2569.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 230,
					"file": "src/lava_lib/reader_lsd/properties_container.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15879,
						"regions":
						{
						},
						"selection":
						[
							[
								6476,
								6476
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3473.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 231,
					"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3194,
						"regions":
						{
						},
						"selection":
						[
							[
								2821,
								2821
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 924.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 232,
					"file": "src/Falcor/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5308,
						"regions":
						{
						},
						"selection":
						[
							[
								4027,
								4027
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1734.0,
						"zoom_level": 1.0
					},
					"stack_index": 127,
					"type": "text"
				},
				{
					"buffer": 233,
					"file": "src/Falcor/Utils/Scripting/Console.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6326,
						"regions":
						{
						},
						"selection":
						[
							[
								6220,
								6220
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 220.0,
						"zoom_level": 1.0
					},
					"stack_index": 166,
					"type": "text"
				},
				{
					"buffer": 234,
					"file": "src/Falcor/Utils/Scripting/Console.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3225,
						"regions":
						{
						},
						"selection":
						[
							[
								1982,
								1982
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 307.0,
						"zoom_level": 1.0
					},
					"stack_index": 167,
					"type": "text"
				},
				{
					"buffer": 235,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4823,
						"regions":
						{
						},
						"selection":
						[
							[
								4435,
								4435
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1139.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 236,
					"file": "src/lava_lib/sdl_display/d_sdl.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8449,
						"regions":
						{
						},
						"selection":
						[
							[
								1972,
								1972
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 237,
					"file": "src/lava_lib/sdl_display/sdl_opengl_window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1692,
						"regions":
						{
						},
						"selection":
						[
							[
								1535,
								1535
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 238,
					"file": "src/lava_lib/sdl_display/sdl_opengl_window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9178,
						"regions":
						{
						},
						"selection":
						[
							[
								510,
								510
							]
						],
						"settings":
						{
							"auto_name": "#include <iostream>",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 239,
					"file": "src/lava_lib/sdl_display/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1442,
						"regions":
						{
						},
						"selection":
						[
							[
								566,
								566
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 351,
					"type": "text"
				},
				{
					"buffer": 240,
					"file": "src/lava_lib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1066,
						"regions":
						{
						},
						"selection":
						[
							[
								117,
								117
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 289,
					"type": "text"
				},
				{
					"buffer": 241,
					"file": "/opt/lava/test/simple_inline_ascii2.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 514,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 364,
					"type": "text"
				},
				{
					"buffer": 242,
					"file": "/opt/lava/test/test_inline_ascii.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65835,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 355,
					"type": "text"
				},
				{
					"buffer": 243,
					"file": "src/houdini/soho/LSDgeo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40221,
						"regions":
						{
						},
						"selection":
						[
							[
								24897,
								24897
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10648.0,
						"zoom_level": 1.0
					},
					"stack_index": 412,
					"type": "text"
				},
				{
					"buffer": 244,
					"file": "src/houdini/soho/LSDframe.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64676,
						"regions":
						{
						},
						"selection":
						[
							[
								11759,
								11759
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4872.0,
						"zoom_level": 1.0
					},
					"stack_index": 357,
					"type": "text"
				},
				{
					"buffer": 245,
					"file": "src/houdini/soho/LSDapi.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8282,
						"regions":
						{
						},
						"selection":
						[
							[
								3326,
								3326
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1727.0,
						"zoom_level": 1.0
					},
					"stack_index": 359,
					"type": "text"
				},
				{
					"buffer": 246,
					"file": "src/houdini/soho/LSD.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22594,
						"regions":
						{
						},
						"selection":
						[
							[
								6312,
								6312
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2220.0,
						"zoom_level": 1.0
					},
					"stack_index": 366,
					"type": "text"
				},
				{
					"buffer": 247,
					"file": "/opt/hfs17.5.460/houdini/soho/python2.7/soho.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26464,
						"regions":
						{
						},
						"selection":
						[
							[
								17908,
								17908
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7541.0,
						"zoom_level": 1.0
					},
					"stack_index": 378,
					"type": "text"
				},
				{
					"buffer": 248,
					"file": "/opt/hfs17.5.460/houdini/soho/python2.7/wranglers/HoudiniLightIFD.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19720,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6171.0,
						"zoom_level": 1.0
					},
					"stack_index": 377,
					"type": "text"
				},
				{
					"buffer": 249,
					"file": "src/houdini/soho/LSDmantra.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21971,
						"regions":
						{
						},
						"selection":
						[
							[
								9178,
								9178
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5393.0,
						"zoom_level": 1.0
					},
					"stack_index": 358,
					"type": "text"
				},
				{
					"buffer": 250,
					"file": "src/houdini/soho/LSDmisc.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15617,
						"regions":
						{
						},
						"selection":
						[
							[
								15494,
								15494
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6273.0,
						"zoom_level": 1.0
					},
					"stack_index": 360,
					"type": "text"
				},
				{
					"buffer": 251,
					"file": "src/houdini/soho/overrides/RenderViewer",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 549,
						"regions":
						{
						},
						"selection":
						[
							[
								42,
								42
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 371,
					"type": "text"
				},
				{
					"buffer": 252,
					"file": "src/houdini/soho/overrides/ViewportRender",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 356,
						"regions":
						{
						},
						"selection":
						[
							[
								133,
								133
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 367,
					"type": "text"
				},
				{
					"buffer": 253,
					"file": "src/houdini/soho/overrides/ViewportCameraRender",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 328,
						"regions":
						{
						},
						"selection":
						[
							[
								142,
								142
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 368,
					"type": "text"
				},
				{
					"buffer": 254,
					"file": "src/houdini/soho/overrides/RenderState",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 521,
						"regions":
						{
						},
						"selection":
						[
							[
								41,
								41
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 370,
					"type": "text"
				},
				{
					"buffer": 255,
					"file": "src/houdini/soho/overrides/RenderCOP",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 242,
						"regions":
						{
						},
						"selection":
						[
							[
								39,
								39
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 373,
					"type": "text"
				},
				{
					"buffer": 256,
					"file": "src/houdini/soho/overrides/RenderCommand",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 253,
						"regions":
						{
						},
						"selection":
						[
							[
								43,
								43
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 372,
					"type": "text"
				},
				{
					"buffer": 257,
					"file": "src/houdini/soho/LSDsettings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31535,
						"regions":
						{
						},
						"selection":
						[
							[
								1792,
								1792
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13260.0,
						"zoom_level": 1.0
					},
					"stack_index": 365,
					"type": "text"
				},
				{
					"buffer": 258,
					"file": "src/lava_lib/reader_lsd/backtracking.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2087,
						"regions":
						{
						},
						"selection":
						[
							[
								1711,
								1711
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 409,
					"type": "text"
				},
				{
					"buffer": 259,
					"file": "src/lava_lib/reader_bgeo/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 613,
						"regions":
						{
						},
						"selection":
						[
							[
								381,
								381
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 404,
					"type": "text"
				},
				{
					"buffer": 260,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Info.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3479,
						"regions":
						{
						},
						"selection":
						[
							[
								553,
								553
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 314,
					"type": "text"
				},
				{
					"buffer": 261,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitives.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4984,
						"regions":
						{
						},
						"selection":
						[
							[
								430,
								430
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 302,
					"type": "text"
				},
				{
					"buffer": 262,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Run.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3383,
						"regions":
						{
						},
						"selection":
						[
							[
								1338,
								1338
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 323,
					"type": "text"
				},
				{
					"buffer": 263,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Run.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1103,
						"regions":
						{
						},
						"selection":
						[
							[
								706,
								706
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 324,
					"type": "text"
				},
				{
					"buffer": 264,
					"file": "third_party/bgeo_reader/bgeo/parser/Run.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3025,
						"regions":
						{
						},
						"selection":
						[
							[
								1471,
								1471
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 772.0,
						"zoom_level": 1.0
					},
					"stack_index": 338,
					"type": "text"
				},
				{
					"buffer": 265,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/StorageTraits.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 433,
						"regions":
						{
						},
						"selection":
						[
							[
								433,
								433
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 405,
					"type": "text"
				},
				{
					"buffer": 266,
					"file": "src/lava_lib/reader_lsd/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 769,
						"regions":
						{
						},
						"selection":
						[
							[
								393,
								393
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 350,
					"type": "text"
				},
				{
					"buffer": 267,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2322,
						"regions":
						{
						},
						"selection":
						[
							[
								479,
								479
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 406,
					"type": "text"
				},
				{
					"buffer": 268,
					"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8650,
						"regions":
						{
						},
						"selection":
						[
							[
								643,
								643
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1836.0,
						"zoom_level": 1.0
					},
					"stack_index": 298,
					"type": "text"
				},
				{
					"buffer": 269,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Detail.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2153,
						"regions":
						{
						},
						"selection":
						[
							[
								1401,
								1401
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 213.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"type": "text"
				},
				{
					"buffer": 270,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Info.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1031,
						"regions":
						{
						},
						"selection":
						[
							[
								467,
								467
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 315,
					"type": "text"
				},
				{
					"buffer": 271,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/VertexMap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1023,
						"regions":
						{
						},
						"selection":
						[
							[
								690,
								690
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"type": "text"
				},
				{
					"buffer": 272,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/NumericData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6688,
						"regions":
						{
						},
						"selection":
						[
							[
								2166,
								2166
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 418.0,
						"zoom_level": 1.0
					},
					"stack_index": 318,
					"type": "text"
				},
				{
					"buffer": 273,
					"file": "src/houdini/soho/python2.7/LSDgeo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40409,
						"regions":
						{
						},
						"selection":
						[
							[
								993,
								993
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 274,
					"file": "/opt/hfs17.5.460/houdini/soho/python2.7/sohog.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19360,
						"regions":
						{
						},
						"selection":
						[
							[
								14168,
								14168
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6834.0,
						"zoom_level": 1.0
					},
					"stack_index": 322,
					"type": "text"
				},
				{
					"buffer": 275,
					"file": "src/lava_lib/reader_bgeo/bgeo/Poly.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2106,
						"regions":
						{
						},
						"selection":
						[
							[
								918,
								918
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"type": "text"
				},
				{
					"buffer": 276,
					"file": "src/lava_lib/reader_bgeo/bgeo/PolySplitter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6970,
						"regions":
						{
						},
						"selection":
						[
							[
								6386,
								6386
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2265.0,
						"zoom_level": 1.0
					},
					"stack_index": 321,
					"type": "text"
				},
				{
					"buffer": 277,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitive.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2355,
						"regions":
						{
						},
						"selection":
						[
							[
								1109,
								1109
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 155.0,
						"zoom_level": 1.0
					},
					"stack_index": 113,
					"type": "text"
				},
				{
					"buffer": 278,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Mesh.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1165,
						"regions":
						{
						},
						"selection":
						[
							[
								453,
								453
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 316,
					"type": "text"
				},
				{
					"buffer": 279,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Mesh.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3578,
						"regions":
						{
						},
						"selection":
						[
							[
								2324,
								2324
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 612.0,
						"zoom_level": 1.0
					},
					"stack_index": 317,
					"type": "text"
				},
				{
					"buffer": 280,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitive.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4239,
						"regions":
						{
						},
						"selection":
						[
							[
								1369,
								1369
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 823.0,
						"zoom_level": 1.0
					},
					"stack_index": 112,
					"type": "text"
				},
				{
					"buffer": 281,
					"file": "src/lava_lib/reader_bgeo/bgeo/Primitive.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 710,
						"regions":
						{
						},
						"selection":
						[
							[
								638,
								638
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 320,
					"type": "text"
				},
				{
					"buffer": 282,
					"file": "src/lava_lib/reader_bgeo/bgeo/Primitive.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 628,
						"regions":
						{
						},
						"selection":
						[
							[
								570,
								570
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 319,
					"type": "text"
				},
				{
					"buffer": 283,
					"file": "src/lava_lib/reader_bgeo/bgeo/PrimitiveFactory.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5226,
						"regions":
						{
						},
						"selection":
						[
							[
								4273,
								4273
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 327,
					"type": "text"
				},
				{
					"buffer": 284,
					"file": "src/lava_lib/reader_bgeo/bgeo/PrimitiveFactory.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 831,
						"regions":
						{
						},
						"selection":
						[
							[
								655,
								655
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 329,
					"type": "text"
				},
				{
					"buffer": 285,
					"file": "src/lava_lib/reader_bgeo/bgeo/rtti.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2465,
						"regions":
						{
						},
						"selection":
						[
							[
								1511,
								1511
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 332,
					"type": "text"
				},
				{
					"buffer": 286,
					"file": "src/lava_lib/reader_bgeo/bgeo/PackedFragment.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1037,
						"regions":
						{
						},
						"selection":
						[
							[
								616,
								616
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 346,
					"type": "text"
				},
				{
					"buffer": 287,
					"file": "src/lava_lib/reader_bgeo/bgeo/PrimType.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 851,
						"regions":
						{
						},
						"selection":
						[
							[
								707,
								707
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 330,
					"type": "text"
				},
				{
					"buffer": 288,
					"file": "src/lava_lib/reader_bgeo/bgeo/Volume.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1276,
						"regions":
						{
						},
						"selection":
						[
							[
								568,
								568
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 343,
					"type": "text"
				},
				{
					"buffer": 289,
					"file": "src/lava_lib/reader_bgeo/bgeo/PackedDisk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 820,
						"regions":
						{
						},
						"selection":
						[
							[
								743,
								743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 348,
					"type": "text"
				},
				{
					"buffer": 290,
					"file": "src/lava_lib/reader_bgeo/bgeo/Mesh.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 781,
						"regions":
						{
						},
						"selection":
						[
							[
								79,
								79
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 326,
					"type": "text"
				},
				{
					"buffer": 291,
					"file": "src/lava_lib/reader_bgeo/bgeo/Mesh.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 938,
						"regions":
						{
						},
						"selection":
						[
							[
								820,
								820
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 325,
					"type": "text"
				},
				{
					"buffer": 292,
					"file": "third_party/bgeo_reader/bgeo/parser/Poly.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3788,
						"regions":
						{
						},
						"selection":
						[
							[
								3587,
								3587
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2353.0,
						"zoom_level": 1.0
					},
					"stack_index": 342,
					"type": "text"
				},
				{
					"buffer": 293,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/AlembicRef.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1203,
						"regions":
						{
						},
						"selection":
						[
							[
								825,
								825
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 341,
					"type": "text"
				},
				{
					"buffer": 294,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/AlembicRef.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1305,
						"regions":
						{
						},
						"selection":
						[
							[
								846,
								846
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 374,
					"type": "text"
				},
				{
					"buffer": 295,
					"file": "/opt/hfs17.5.460/toolkit/include/UT/UT_IStream.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23162,
						"regions":
						{
						},
						"selection":
						[
							[
								8219,
								8219
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3111.0,
						"zoom_level": 1.0
					},
					"stack_index": 376,
					"type": "text"
				},
				{
					"buffer": 296,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Detail.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8506,
						"regions":
						{
						},
						"selection":
						[
							[
								7617,
								7617
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3672.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"type": "text"
				},
				{
					"buffer": 297,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Attribute.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5347,
						"regions":
						{
						},
						"selection":
						[
							[
								2438,
								2438
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 997.0,
						"zoom_level": 1.0
					},
					"stack_index": 403,
					"type": "text"
				},
				{
					"buffer": 298,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/compression.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1281,
						"regions":
						{
						},
						"selection":
						[
							[
								990,
								990
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 402,
					"type": "text"
				},
				{
					"buffer": 299,
					"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2954,
						"regions":
						{
						},
						"selection":
						[
							[
								1271,
								1271
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 427.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"type": "text"
				},
				{
					"buffer": 300,
					"file": "src/lava_lib/reader_bgeo/bgeo/PrimType.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1055,
						"regions":
						{
						},
						"selection":
						[
							[
								363,
								363
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 331,
					"type": "text"
				},
				{
					"buffer": 301,
					"file": "src/lava_lib/reader_bgeo/bgeo/Sphere.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 933,
						"regions":
						{
						},
						"selection":
						[
							[
								709,
								709
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 340,
					"type": "text"
				},
				{
					"buffer": 302,
					"file": "src/lava_lib/reader_bgeo/bgeo/Volume.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1136,
						"regions":
						{
						},
						"selection":
						[
							[
								575,
								575
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 339,
					"type": "text"
				},
				{
					"buffer": 303,
					"file": "src/lava_lib/reader_bgeo/bgeo/Sphere.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 885,
						"regions":
						{
						},
						"selection":
						[
							[
								493,
								493
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 334,
					"type": "text"
				},
				{
					"buffer": 304,
					"file": "src/lava_lib/reader_bgeo/bgeo/Part.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 995,
						"regions":
						{
						},
						"selection":
						[
							[
								951,
								951
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 336,
					"type": "text"
				},
				{
					"buffer": 305,
					"file": "src/lava_lib/reader_bgeo/bgeo/Part.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 875,
						"regions":
						{
						},
						"selection":
						[
							[
								489,
								489
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 335,
					"type": "text"
				},
				{
					"buffer": 306,
					"file": "src/lava_lib/reader_bgeo/bgeo/PackedGeometry.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1381,
						"regions":
						{
						},
						"selection":
						[
							[
								544,
								544
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 344,
					"type": "text"
				},
				{
					"buffer": 307,
					"file": "src/lava_lib/reader_bgeo/bgeo/PackedDisk.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 864,
						"regions":
						{
						},
						"selection":
						[
							[
								559,
								559
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 347,
					"type": "text"
				},
				{
					"buffer": 308,
					"file": "src/lava_lib/reader_bgeo/bgeo/Run.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 883,
						"regions":
						{
						},
						"selection":
						[
							[
								420,
								420
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 328,
					"type": "text"
				},
				{
					"buffer": 309,
					"file": "src/lava_lib/reader_bgeo/bgeo/Run.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 879,
						"regions":
						{
						},
						"selection":
						[
							[
								700,
								700
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 36.0,
						"zoom_level": 1.0
					},
					"stack_index": 333,
					"type": "text"
				},
				{
					"buffer": 310,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2221,
						"regions":
						{
						},
						"selection":
						[
							[
								477,
								477
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 349,
					"type": "text"
				},
				{
					"buffer": 311,
					"file": "src/houdini/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 243,
						"regions":
						{
						},
						"selection":
						[
							[
								217,
								217
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 354,
					"type": "text"
				},
				{
					"buffer": 312,
					"file": "src/lava_utils_lib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 658,
						"regions":
						{
						},
						"selection":
						[
							[
								650,
								650
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 399,
					"type": "text"
				},
				{
					"buffer": 313,
					"file": "src/lava_lib/reader_lsd/scope.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5018,
						"regions":
						{
						},
						"selection":
						[
							[
								4784,
								4784
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 314,
					"file": "src/lava_cmd/conf/default.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2517,
						"regions":
						{
						},
						"selection":
						[
							[
								2159,
								2159
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 315,
					"file": "src/RenderPasses/CSM/ShadowPass.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4172,
						"regions":
						{
						},
						"selection":
						[
							[
								2119,
								2119
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 316,
					"file": "src/RenderPasses/CSM/CSMData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2826,
						"regions":
						{
						},
						"selection":
						[
							[
								1787,
								1787
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 297.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 317,
					"file": "src/RenderPasses/CSM/DepthPass.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2732,
						"regions":
						{
						},
						"selection":
						[
							[
								1984,
								1984
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 318,
					"file": "src/RenderPasses/CSM/VisibilityPass.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2957,
						"regions":
						{
						},
						"selection":
						[
							[
								2933,
								2933
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 319,
					"file": "src/Falcor/Core/API/RasterizerState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7490,
						"regions":
						{
						},
						"selection":
						[
							[
								2184,
								2184
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 144.0,
						"zoom_level": 1.0
					},
					"stack_index": 276,
					"type": "text"
				},
				{
					"buffer": 320,
					"file": "src/Falcor/Utils/Scripting/ScriptBindings.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4481,
						"regions":
						{
						},
						"selection":
						[
							[
								1789,
								1789
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1037.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"type": "text"
				},
				{
					"buffer": 321,
					"file": "src/RenderPasses/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3814,
						"regions":
						{
						},
						"selection":
						[
							[
								3774,
								3774
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"type": "text"
				},
				{
					"buffer": 322,
					"file": "src/RenderPasses/SSAO/SSAO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11813,
						"regions":
						{
						},
						"selection":
						[
							[
								3688,
								3688
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 294,
					"type": "text"
				},
				{
					"buffer": 323,
					"file": "src/RenderPasses/SVGFPass/SVGFPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19004,
						"regions":
						{
						},
						"selection":
						[
							[
								2342,
								2342
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 390,
					"type": "text"
				},
				{
					"buffer": 324,
					"file": "src/RenderPasses/ToneMapper/ToneMapper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16343,
						"regions":
						{
						},
						"selection":
						[
							[
								2987,
								2987
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 325,
					"file": "src/RenderPasses/WhittedRayTracer/WhittedRayTracer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15008,
						"regions":
						{
						},
						"selection":
						[
							[
								2001,
								2001
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 389,
					"type": "text"
				},
				{
					"buffer": 326,
					"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8262,
						"regions":
						{
						},
						"selection":
						[
							[
								3289,
								3289
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2193.0,
						"zoom_level": 1.0
					},
					"stack_index": 150,
					"type": "text"
				},
				{
					"buffer": 327,
					"file": "src/RenderPasses/GBuffer_0ld/GBufferBase.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3826,
						"regions":
						{
						},
						"selection":
						[
							[
								3371,
								3371
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 149,
					"type": "text"
				},
				{
					"buffer": 328,
					"file": "src/RenderPasses/Utils/Composite/Composite.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5297,
						"regions":
						{
						},
						"selection":
						[
							[
								2814,
								2814
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 152,
					"type": "text"
				},
				{
					"buffer": 329,
					"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3620,
						"regions":
						{
						},
						"selection":
						[
							[
								3482,
								3482
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 151,
					"type": "text"
				},
				{
					"buffer": 330,
					"file": "src/RenderPasses/Utils/Composite/CompositeMode.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1840,
						"regions":
						{
						},
						"selection":
						[
							[
								1840,
								1840
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 155,
					"type": "text"
				},
				{
					"buffer": 331,
					"file": "src/RenderPasses/Utils/Composite/Composite.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2318,
						"regions":
						{
						},
						"selection":
						[
							[
								2318,
								2318
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 154,
					"type": "text"
				},
				{
					"buffer": 332,
					"file": "src/RenderPasses/Utils/Composite/Composite.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3146,
						"regions":
						{
						},
						"selection":
						[
							[
								2019,
								2019
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 153,
					"type": "text"
				},
				{
					"buffer": 333,
					"file": "src/RenderPasses/AccumulatePass/AccumulatePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11948,
						"regions":
						{
						},
						"selection":
						[
							[
								2960,
								2960
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 334,
					"file": "src/RenderPasses/AccumulatePass/AccumulatePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5762,
						"regions":
						{
						},
						"selection":
						[
							[
								3690,
								3690
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 146,
					"type": "text"
				},
				{
					"buffer": 335,
					"file": "src/RenderPasses/BlitPass/BlitPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3908,
						"regions":
						{
						},
						"selection":
						[
							[
								2738,
								2738
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 427.0,
						"zoom_level": 1.0
					},
					"stack_index": 125,
					"type": "text"
				},
				{
					"buffer": 336,
					"file": "src/RenderPasses/AccumulatePass/Accumulate.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5111,
						"regions":
						{
						},
						"selection":
						[
							[
								4278,
								4278
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 969.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 337,
					"file": "src/lava_lib/renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5333,
						"regions":
						{
						},
						"selection":
						[
							[
								1201,
								1201
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 338,
					"file": "src/Falcor/Core/API/DeviceManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5402,
						"regions":
						{
						},
						"selection":
						[
							[
								2935,
								2935
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 773.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 339,
					"file": "src/Falcor/Utils/Logger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5549,
						"regions":
						{
						},
						"selection":
						[
							[
								5007,
								5007
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1147.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 340,
					"file": "src/Falcor/Utils/Logger.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5968,
						"regions":
						{
						},
						"selection":
						[
							[
								1827,
								1827
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 59.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 341,
					"file": "src/lava_lib/scene_builder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16118,
						"regions":
						{
						},
						"selection":
						[
							[
								2463,
								2463
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 442.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 342,
					"file": "src/Falcor/Scene/Material/Material.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11629,
						"regions":
						{
						},
						"selection":
						[
							[
								9853,
								9853
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5346.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 343,
					"file": "src/Falcor/Scene/Camera/Camera.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11222,
						"regions":
						{
						},
						"selection":
						[
							[
								1861,
								1861
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 116.0,
						"zoom_level": 1.0
					},
					"stack_index": 182,
					"type": "text"
				},
				{
					"buffer": 344,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20423,
						"regions":
						{
						},
						"selection":
						[
							[
								1838,
								1838
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 212.0,
						"zoom_level": 1.0
					},
					"stack_index": 181,
					"type": "text"
				},
				{
					"buffer": 345,
					"file": "src/Falcor/Scene/Camera/Camera.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14341,
						"regions":
						{
						},
						"selection":
						[
							[
								5318,
								5318
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1734.0,
						"zoom_level": 1.0
					},
					"stack_index": 194,
					"type": "text"
				},
				{
					"buffer": 346,
					"file": "src/Falcor/Scene/Camera/Camera.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5386,
						"regions":
						{
						},
						"selection":
						[
							[
								5386,
								5386
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 781.0,
						"zoom_level": 1.0
					},
					"stack_index": 196,
					"type": "text"
				},
				{
					"buffer": 347,
					"file": "src/Falcor/Scene/Camera/CameraData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4903,
						"regions":
						{
						},
						"selection":
						[
							[
								4903,
								4903
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 33.0,
						"zoom_level": 1.0
					},
					"stack_index": 183,
					"type": "text"
				},
				{
					"buffer": 348,
					"file": "src/Falcor/Scene/Camera/CameraController.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6738,
						"regions":
						{
						},
						"selection":
						[
							[
								5569,
								5569
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1938.0,
						"zoom_level": 1.0
					},
					"stack_index": 192,
					"type": "text"
				},
				{
					"buffer": 349,
					"file": "src/Falcor/Scene/Importers/AssimpImporter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2352,
						"regions":
						{
						},
						"selection":
						[
							[
								1819,
								1819
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 189,
					"type": "text"
				},
				{
					"buffer": 350,
					"file": "src/Falcor/Scene/Camera/CameraController.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9862,
						"regions":
						{
						},
						"selection":
						[
							[
								4220,
								4220
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 160.0,
						"translation.y": 867.0,
						"zoom_level": 1.0
					},
					"stack_index": 193,
					"type": "text"
				},
				{
					"buffer": 351,
					"file": "src/Falcor/Scene/Material/Material.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20616,
						"regions":
						{
						},
						"selection":
						[
							[
								7167,
								7167
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1980.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 352,
					"file": "src/Falcor/Utils/Color/ColorHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6245,
						"regions":
						{
						},
						"selection":
						[
							[
								6245,
								6245
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2012.0,
						"zoom_level": 1.0
					},
					"stack_index": 173,
					"type": "text"
				},
				{
					"buffer": 353,
					"file": "src/lava_lib/scene_builder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 845,
						"regions":
						{
						},
						"selection":
						[
							[
								614,
								614
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"type": "text"
				},
				{
					"buffer": 354,
					"file": "src/Falcor/Scene/SceneBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14138,
						"regions":
						{
						},
						"selection":
						[
							[
								10842,
								10842
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2956.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 355,
					"file": "src/Falcor/Scene/Lights/Light.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10180,
						"regions":
						{
						},
						"selection":
						[
							[
								2898,
								2898
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2065.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 356,
					"file": "src/Falcor/Scene/Lights/Light.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13822,
						"regions":
						{
						},
						"selection":
						[
							[
								5868,
								5868
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2550.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 357,
					"file": "src/Falcor/Scene/Lights/LightData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4402,
						"regions":
						{
						},
						"selection":
						[
							[
								2431,
								2431
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 341.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 358,
					"file": "src/Falcor/Scene/Lights/LightProbe.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 7813,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 359,
					"file": "src/Falcor/Scene/Lights/LightProbeData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2984,
						"regions":
						{
						},
						"selection":
						[
							[
								2812,
								2812
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 360,
					"file": "src/Falcor/Scene/Importers/SceneImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40088,
						"regions":
						{
						},
						"selection":
						[
							[
								2014,
								2014
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 186,
					"type": "text"
				},
				{
					"buffer": 361,
					"file": "src/Falcor/Scene/Importers/PythonImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5708,
						"regions":
						{
						},
						"selection":
						[
							[
								1957,
								1957
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1734.0,
						"zoom_level": 1.0
					},
					"stack_index": 185,
					"type": "text"
				},
				{
					"buffer": 362,
					"file": "src/Falcor/Core/API/VAO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5144,
						"regions":
						{
						},
						"selection":
						[
							[
								2580,
								2580
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 457.0,
						"zoom_level": 1.0
					},
					"stack_index": 297,
					"type": "text"
				},
				{
					"buffer": 363,
					"file": "src/Falcor/Scene/SceneBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29836,
						"regions":
						{
						},
						"selection":
						[
							[
								27176,
								27176
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9885.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 364,
					"file": "src/Falcor/Utils/Math/MathConstants.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6718,
						"regions":
						{
						},
						"selection":
						[
							[
								6718,
								6718
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 754.0,
						"zoom_level": 1.0
					},
					"stack_index": 174,
					"type": "text"
				},
				{
					"buffer": 365,
					"file": "src/Falcor/Utils/Timing/TimeReport.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2736,
						"regions":
						{
						},
						"selection":
						[
							[
								2526,
								2526
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 252,
					"type": "text"
				},
				{
					"buffer": 366,
					"file": "src/Falcor/Utils/Timing/TimeReport.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2990,
						"regions":
						{
						},
						"selection":
						[
							[
								2787,
								2787
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 251,
					"type": "text"
				},
				{
					"buffer": 367,
					"file": "src/Falcor/Falcor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6951,
						"regions":
						{
						},
						"selection":
						[
							[
								5042,
								5042
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 368,
					"file": "src/Falcor/Scene/Scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29405,
						"regions":
						{
						},
						"selection":
						[
							[
								20520,
								20520
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8151.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 369,
					"file": "src/Falcor/Scene/Animation/Animatable.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3413,
						"regions":
						{
						},
						"selection":
						[
							[
								2354,
								2354
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 85.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 370,
					"file": "src/Falcor/Scene/Animation/Animatable.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2090,
						"regions":
						{
						},
						"selection":
						[
							[
								1775,
								1775
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 253,
					"type": "text"
				},
				{
					"buffer": 371,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4605,
						"regions":
						{
						},
						"selection":
						[
							[
								3035,
								3035
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 563.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 372,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4754,
						"regions":
						{
						},
						"selection":
						[
							[
								4315,
								4315
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 856.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 373,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43473,
						"regions":
						{
						},
						"selection":
						[
							[
								18177,
								18177
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5862.0,
						"zoom_level": 1.0
					},
					"stack_index": 198,
					"type": "text"
				},
				{
					"buffer": 374,
					"file": "src/Falcor/Utils/UI/Gui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27015,
						"regions":
						{
						},
						"selection":
						[
							[
								1945,
								1945
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 184,
					"type": "text"
				},
				{
					"buffer": 375,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10485,
						"regions":
						{
						},
						"selection":
						[
							[
								1927,
								1927
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 867.0,
						"zoom_level": 1.0
					},
					"stack_index": 201,
					"type": "text"
				},
				{
					"buffer": 376,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7958,
						"regions":
						{
						},
						"selection":
						[
							[
								6285,
								6285
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 199,
					"type": "text"
				},
				{
					"buffer": 377,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8675,
						"regions":
						{
						},
						"selection":
						[
							[
								3153,
								3153
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 200,
					"type": "text"
				},
				{
					"buffer": 378,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14274,
						"regions":
						{
						},
						"selection":
						[
							[
								1871,
								1871
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 202,
					"type": "text"
				},
				{
					"buffer": 379,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHRefit.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7705,
						"regions":
						{
						},
						"selection":
						[
							[
								7705,
								7705
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1801.0,
						"zoom_level": 1.0
					},
					"stack_index": 215,
					"type": "text"
				},
				{
					"buffer": 380,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4343,
						"regions":
						{
						},
						"selection":
						[
							[
								4343,
								4343
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 662.0,
						"zoom_level": 1.0
					},
					"stack_index": 214,
					"type": "text"
				},
				{
					"buffer": 381,
					"file": "src/Falcor/Experimental/Scene/Lights/FinalizeIntegration.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4150,
						"regions":
						{
						},
						"selection":
						[
							[
								4150,
								4150
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 186.0,
						"zoom_level": 1.0
					},
					"stack_index": 213,
					"type": "text"
				},
				{
					"buffer": 382,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6241,
						"regions":
						{
						},
						"selection":
						[
							[
								2485,
								2485
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"stack_index": 203,
					"type": "text"
				},
				{
					"buffer": 383,
					"file": "src/Falcor/Experimental/Scene/Material/BxDFTypes.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2300,
						"regions":
						{
						},
						"selection":
						[
							[
								2300,
								2300
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 232,
					"type": "text"
				},
				{
					"buffer": 384,
					"file": "src/Falcor/Experimental/Scene/Material/BxDF.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24049,
						"regions":
						{
						},
						"selection":
						[
							[
								24049,
								24049
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10499.0,
						"zoom_level": 1.0
					},
					"stack_index": 231,
					"type": "text"
				},
				{
					"buffer": 385,
					"file": "src/Falcor/Experimental/Scene/Material/Fresnel.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4300,
						"regions":
						{
						},
						"selection":
						[
							[
								4300,
								4300
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 697.0,
						"zoom_level": 1.0
					},
					"stack_index": 230,
					"type": "text"
				},
				{
					"buffer": 386,
					"file": "src/Falcor/Experimental/Scene/Material/MaterialHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8060,
						"regions":
						{
						},
						"selection":
						[
							[
								8060,
								8060
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2209.0,
						"zoom_level": 1.0
					},
					"stack_index": 229,
					"type": "text"
				},
				{
					"buffer": 387,
					"file": "src/Falcor/Experimental/Scene/Material/MaterialShading.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26488,
						"regions":
						{
						},
						"selection":
						[
							[
								26488,
								26488
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10420.0,
						"zoom_level": 1.0
					},
					"stack_index": 228,
					"type": "text"
				},
				{
					"buffer": 388,
					"file": "src/Falcor/Experimental/Scene/Material/Microfacet.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10130,
						"regions":
						{
						},
						"selection":
						[
							[
								10130,
								10130
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2600.0,
						"zoom_level": 1.0
					},
					"stack_index": 227,
					"type": "text"
				},
				{
					"buffer": 389,
					"file": "src/Falcor/Experimental/Scene/Material/TexLODHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41105,
						"regions":
						{
						},
						"selection":
						[
							[
								41105,
								41105
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14823.0,
						"zoom_level": 1.0
					},
					"stack_index": 226,
					"type": "text"
				},
				{
					"buffer": 390,
					"file": "src/Falcor/Experimental/Scene/Material/TexLODTypes.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2900,
						"regions":
						{
						},
						"selection":
						[
							[
								1851,
								1851
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 225,
					"type": "text"
				},
				{
					"buffer": 391,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3576,
						"regions":
						{
						},
						"selection":
						[
							[
								2524,
								2524
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 224,
					"type": "text"
				},
				{
					"buffer": 392,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMap.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2868,
						"regions":
						{
						},
						"selection":
						[
							[
								2868,
								2868
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 393,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2178,
						"regions":
						{
						},
						"selection":
						[
							[
								2178,
								2178
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 394,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4983,
						"regions":
						{
						},
						"selection":
						[
							[
								4983,
								4983
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 441.0,
						"zoom_level": 1.0
					},
					"stack_index": 210,
					"type": "text"
				},
				{
					"buffer": 395,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerType.slangh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2577,
						"regions":
						{
						},
						"selection":
						[
							[
								2577,
								2577
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 209,
					"type": "text"
				},
				{
					"buffer": 396,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerInterface.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4180,
						"regions":
						{
						},
						"selection":
						[
							[
								4180,
								4180
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 208,
					"type": "text"
				},
				{
					"buffer": 397,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5874,
						"regions":
						{
						},
						"selection":
						[
							[
								5874,
								5874
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 849.0,
						"zoom_level": 1.0
					},
					"stack_index": 207,
					"type": "text"
				},
				{
					"buffer": 398,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveLightSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3489,
						"regions":
						{
						},
						"selection":
						[
							[
								3489,
								3489
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 206,
					"type": "text"
				},
				{
					"buffer": 399,
					"file": "src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6084,
						"regions":
						{
						},
						"selection":
						[
							[
								6084,
								6084
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1087.0,
						"zoom_level": 1.0
					},
					"stack_index": 205,
					"type": "text"
				},
				{
					"buffer": 400,
					"file": "src/Falcor/Experimental/Scene/Lights/BuildTriangleList.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3362,
						"regions":
						{
						},
						"selection":
						[
							[
								1753,
								1753
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 204,
					"type": "text"
				},
				{
					"buffer": 401,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5279,
						"regions":
						{
						},
						"selection":
						[
							[
								3799,
								3799
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 830.0,
						"zoom_level": 1.0
					},
					"stack_index": 222,
					"type": "text"
				},
				{
					"buffer": 402,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3425,
						"regions":
						{
						},
						"selection":
						[
							[
								3186,
								3186
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 223,
					"type": "text"
				},
				{
					"buffer": 403,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSampler.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6643,
						"regions":
						{
						},
						"selection":
						[
							[
								6643,
								6643
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 211,
					"type": "text"
				},
				{
					"buffer": 404,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvMapSamplerSetup.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3272,
						"regions":
						{
						},
						"selection":
						[
							[
								3272,
								3272
							]
						],
						"settings":
						{
							"auto_name": "/*************************************************",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 212,
					"type": "text"
				},
				{
					"buffer": 405,
					"file": "src/Falcor/Core/Window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5592,
						"regions":
						{
						},
						"selection":
						[
							[
								2379,
								2379
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 255,
					"type": "text"
				},
				{
					"buffer": 406,
					"file": "src/Falcor/Scene/Animation/AnimationController.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5078,
						"regions":
						{
						},
						"selection":
						[
							[
								2004,
								2004
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 171,
					"type": "text"
				},
				{
					"buffer": 407,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12566,
						"regions":
						{
						},
						"selection":
						[
							[
								1975,
								1975
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 141,
					"type": "text"
				},
				{
					"buffer": 408,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27029,
						"regions":
						{
						},
						"selection":
						[
							[
								13055,
								13055
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4690.0,
						"zoom_level": 1.0
					},
					"stack_index": 139,
					"type": "text"
				},
				{
					"buffer": 409,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollectionShared.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5732,
						"regions":
						{
						},
						"selection":
						[
							[
								5732,
								5732
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1155.0,
						"zoom_level": 1.0
					},
					"stack_index": 221,
					"type": "text"
				},
				{
					"buffer": 410,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5394,
						"regions":
						{
						},
						"selection":
						[
							[
								3924,
								3924
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 764.0,
						"zoom_level": 1.0
					},
					"stack_index": 197,
					"type": "text"
				},
				{
					"buffer": 411,
					"file": "src/Falcor/Scene/Animation/AnimationController.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10423,
						"regions":
						{
						},
						"selection":
						[
							[
								1986,
								1986
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 136.0,
						"zoom_level": 1.0
					},
					"stack_index": 172,
					"type": "text"
				},
				{
					"buffer": 412,
					"file": "src/Falcor/Scene/Animation/Animation.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5117,
						"regions":
						{
						},
						"selection":
						[
							[
								1828,
								1828
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 176,
					"type": "text"
				},
				{
					"buffer": 413,
					"file": "src/Falcor/Scene/Animation/Animation.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9568,
						"regions":
						{
						},
						"selection":
						[
							[
								2114,
								2114
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 250,
					"type": "text"
				},
				{
					"buffer": 414,
					"file": "src/Falcor/Utils/InternalDictionary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4253,
						"regions":
						{
						},
						"selection":
						[
							[
								4253,
								4253
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 55.0,
						"zoom_level": 1.0
					},
					"stack_index": 170,
					"type": "text"
				},
				{
					"buffer": 415,
					"file": "src/lava_lib/renderer_scripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3505,
						"regions":
						{
						},
						"selection":
						[
							[
								3505,
								3505
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 416,
					"file": "src/lava_lib/scene_reader_base.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1126,
						"regions":
						{
						},
						"selection":
						[
							[
								417,
								417
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 411,
					"type": "text"
				},
				{
					"buffer": 417,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2087,
						"regions":
						{
						},
						"selection":
						[
							[
								2087,
								2087
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 410,
					"type": "text"
				},
				{
					"buffer": 418,
					"file": "src/lava_lib/scene_reader_base.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 622,
						"regions":
						{
						},
						"selection":
						[
							[
								578,
								578
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 356,
					"type": "text"
				},
				{
					"buffer": 419,
					"file": "src/lava_lib/renderer_iface.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2403,
						"regions":
						{
						},
						"selection":
						[
							[
								1183,
								1183
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 136.0,
						"zoom_level": 1.0
					},
					"stack_index": 272,
					"type": "text"
				},
				{
					"buffer": 420,
					"file": "src/lava_lib/renderer_iface.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2827,
						"regions":
						{
						},
						"selection":
						[
							[
								1691,
								1691
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"type": "text"
				},
				{
					"buffer": 421,
					"file": "src/lava_lib/readers/lsd_visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1871,
						"regions":
						{
						},
						"selection":
						[
							[
								42,
								42
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 416,
					"type": "text"
				},
				{
					"buffer": 422,
					"file": "src/lava_lib/readers/lsd_echo_visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5756,
						"regions":
						{
						},
						"selection":
						[
							[
								42,
								42
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 417,
					"type": "text"
				},
				{
					"buffer": 423,
					"file": "src/lava_lib/readers/session_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 762,
						"regions":
						{
						},
						"selection":
						[
							[
								274,
								274
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 419,
					"type": "text"
				},
				{
					"buffer": 424,
					"file": "src/lava_lib/readers/session_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2312,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 418,
					"type": "text"
				},
				{
					"buffer": 425,
					"file": "src/lava_lib/readers/reader_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2997,
						"regions":
						{
						},
						"selection":
						[
							[
								793,
								793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 414,
					"type": "text"
				},
				{
					"buffer": 426,
					"file": "src/lava_lib/readers/reader_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1486,
						"regions":
						{
						},
						"selection":
						[
							[
								1210,
								1210
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 415,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 120.0
	},
	"output.unsaved_changes":
	{
		"height": 120.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 337.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
