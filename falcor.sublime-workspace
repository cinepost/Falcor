{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"p",
				"pVars"
			],
			[
				"LOG_",
				"LOG_ERR"
			],
			[
				"e",
				"else"
			],
			[
				"ele",
				"numElems"
			],
			[
				"log_",
				"LOG_ERR"
			],
			[
				"ima",
				"imageLayout"
			],
			[
				"fl",
				"flatIndex"
			],
			[
				"ass",
				"assignedUAV"
			],
			[
				"prepare",
				"prepareDescriptorSets"
			],
			[
				"Comp",
				"ComputeVars"
			],
			[
				"ap",
				"applyComputeVars"
			],
			[
				"get",
				"getResource"
			],
			[
				"Lo",
				"LOG_DBG"
			],
			[
				"bi",
				"bindFlags"
			],
			[
				"sw",
				"swapchainCount"
			],
			[
				"LOG",
				"LOG_DBG"
			],
			[
				"se",
				"setUav"
			],
			[
				"set",
				"setSrv"
			],
			[
				"strin",
				"string"
			],
			[
				"tex",
				"texFormat"
			],
			[
				"Gp",
				"GpuFence"
			],
			[
				"to",
				"to_string"
			],
			[
				"Scri",
				"ScriptBindings"
			],
			[
				"arg",
				"argv"
			],
			[
				"ar",
				"argc"
			],
			[
				"file",
				"filePath"
			],
			[
				"ins",
				"instanceIndexBits"
			],
			[
				"tr",
				"triangleCount"
			],
			[
				"me",
				"meshInstanceCount"
			],
			[
				"ex",
				"executableDirectory"
			],
			[
				"h",
				"height"
			],
			[
				"wi",
				"width"
			],
			[
				"vect",
				"vector\tstandard header"
			],
			[
				"un",
				"unordered_map\tstandard header (since c++11)"
			],
			[
				"vec",
				"vector\tstandard header"
			],
			[
				"str",
				"string\tstandard header"
			],
			[
				"__F",
				"__FRAMEWORK_H__"
			],
			[
				"Ren",
				"RenderTargetView"
			],
			[
				"Im",
				"ImageType"
			],
			[
				"T",
				"Texture"
			],
			[
				"VkR",
				"VkResourceType"
			],
			[
				"de",
				"device"
			],
			[
				"De",
				"Device"
			],
			[
				"st",
				"static_assert"
			],
			[
				"cre",
				"createViewCommon"
			],
			[
				"getD",
				"getDepthStencilView"
			],
			[
				"lo",
				"logError"
			],
			[
				"pB",
				"pBackBufferFBO"
			],
			[
				"msg",
				"msgBox"
			],
			[
				"t",
				"type"
			],
			[
				"run",
				"runtime_error"
			],
			[
				"init",
				"initVkShaderStageInfo"
			],
			[
				"pre",
				"prepareForDraw"
			],
			[
				"REnder",
				"RenderContext"
			],
			[
				"image",
				"imageCount"
			],
			[
				"files",
				"filesystem"
			],
			[
				"inc",
				"include"
			],
			[
				"end",
				"endif"
			],
			[
				"si",
				"size"
			],
			[
				"tmp",
				"tmp_objs"
			],
			[
				"tm",
				"tmp_objs"
			],
			[
				"obje",
				"objects"
			],
			[
				"dele",
				"deleted"
			],
			[
				"re",
				"rebuild_scene"
			],
			[
				"del",
				"_delete_objects"
			],
			[
				"Obj",
				"ObjectInfo"
			],
			[
				"im",
				"image_render_mode"
			],
			[
				"pbo",
				"pbo_buff_size"
			],
			[
				"pb",
				"pbo_ready"
			],
			[
				"nr",
				"nrm_"
			],
			[
				"cpu",
				"rtao_cpu_buffers"
			],
			[
				"bu",
				"buf_size"
			],
			[
				"ob",
				"ob_info"
			],
			[
				"ob_",
				"ob_item_ptr"
			],
			[
				"cast",
				"cast_shadow"
			],
			[
				"ao",
				"ao_use_bump"
			],
			[
				"sam",
				"sample_num"
			],
			[
				"ret",
				"return"
			],
			[
				"tri",
				"tri_count"
			],
			[
				"emb",
				"embree_mode"
			],
			[
				"em",
				"embree_mode"
			],
			[
				"eevee_occlu",
				"EEVEE_occlusion_trace_free"
			],
			[
				"NU",
				"NULL"
			],
			[
				"is",
				"is_edit_mode"
			],
			[
				"cas",
				"cast_shadow"
			],
			[
				"x",
				"xform"
			],
			[
				"rtcCo",
				"rtcCommitScene"
			],
			[
				"RTCG",
				"RTCGeometry"
			],
			[
				"rt",
				"rtcReleaseGeometry"
			],
			[
				"RTC",
				"RTCScene"
			],
			[
				"pi",
				"pixels"
			],
			[
				"pri",
				"printf\tprintf …"
			],
			[
				"ra",
				"ray"
			],
			[
				"num",
				"num_pixels"
			],
			[
				"ray",
				"rays"
			],
			[
				"RT",
				"RTCRay"
			],
			[
				"ma",
				"malloc"
			],
			[
				"R",
				"RTCRay"
			],
			[
				"STRE",
				"RAYS_STREAM_SIZE"
			],
			[
				"job",
				"job_id"
			],
			[
				"pr",
				"printf\tprintf …"
			],
			[
				"stre",
				"stream_size"
			],
			[
				"embre",
				"embree_context"
			],
			[
				"rtc",
				"rtcReleaseScene"
			],
			[
				"update_",
				"update_tlas"
			],
			[
				"def",
				"default"
			],
			[
				"gpu",
				"gpu_bias"
			],
			[
				"rta",
				"rtao_denoise_p_phi"
			],
			[
				"siz",
				"sizeof"
			],
			[
				"MEM_",
				"MEM_SAFE_FREE"
			],
			[
				"gtao_embree_",
				"gtao_embree_final"
			],
			[
				"sce",
				"scene"
			],
			[
				"MEM",
				"MEM_SAFE_FREE"
			],
			[
				"ocll",
				"datatoc_ambient_occlusion_lib_glsl"
			],
			[
				"N",
				"Ng_x"
			],
			[
				"dir",
				"dir_x"
			],
			[
				"r",
				"ray"
			],
			[
				"BLI_str",
				"BLI_string_joinN"
			],
			[
				"fra",
				"frag_shader_lib"
			],
			[
				"com",
				"common_data"
			],
			[
				"sei",
				"sizeof"
			],
			[
				"new",
				"new_item"
			],
			[
				"it",
				"item_in_tree"
			],
			[
				"Objec",
				"ObjectsMapItem"
			],
			[
				"Ob",
				"ObjectsMapItem"
			],
			[
				"ObjectMap",
				"ObjectsMapItem"
			],
			[
				"n",
				"NULL"
			],
			[
				"embe",
				"embree_objects_map"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp",
			"settings":
			{
				"buffer_size": 18914,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 1123 files for \"inline std::string to_string\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h:\n  369  };\n  370  \n  371: inline std::string to_string(const std::shared_ptr<Buffer>& buff) {\n  372      std::string s = \"Buffer: \";\n  373      s += \"cpu access \" + to_string(buff->getType());\n  ...\n  376  }\n  377  \n  378: inline std::string to_string(Buffer::CpuAccess c) {\n  379  #define a2s(ca_) case Buffer::CpuAccess::ca_: return #ca_;\n  380      switch (c) {\n  ...\n  389  }\n  390  \n  391: inline std::string to_string(Buffer::MapType mt) {\n  392  #define t2s(t_) case Buffer::MapType::t_: return #t_;\n  393      switch (mt) {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n   90  \n   91  #define to_string_case(a) case a: return #a;\n   92:     inline std::string to_string(D3D_FEATURE_LEVEL featureLevel)\n   93      {\n   94          switch (featureLevel)\n   ..\n  138  \n  139  #define rt_flags(a) case RtBuildFlags::a: return #a\n  140:     inline std::string to_string(RtBuildFlags flags)\n  141      {\n  142          switch (flags)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RasterizerState.h:\n  172  // FIXME: Added \"Cull\" prefix to the enum values as we can't register \"None\"\n  173  #define rasterizer_state_cm(a) case RasterizerState::CullMode::a: return \"Cull\" #a\n  174: inline std::string to_string(RasterizerState::CullMode st) {\n  175      switch (st) {\n  176          rasterizer_state_cm(None);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Sampler.h:\n  196  \n  197  #define filter_str(a) case Sampler::Filter::a: return #a\n  198: inline std::string to_string(Sampler::Filter f) {\n  199      switch (f) {\n  200          filter_str(Point);\n  ...\n  206  \n  207  #define address_str(a) case Sampler::AddressMode::a: return #a\n  208: inline std::string to_string(Sampler::AddressMode a) {\n  209      switch (a) {\n  210          address_str(Wrap);\n\n/home/max/dev/Falcor/src/Falcor/Core/Framework.h:\n  295  \n  296  #define compare_str(a) case ComparisonFunc::a: return #a\n  297: inline std::string to_string(ComparisonFunc f) {\n  298      switch (f) {\n  299          compare_str(Disabled);\n  ...\n  315  // Required to_string functions\n  316  using std::to_string;\n  317: inline std::string to_string(const std::string& s) { return '\"' + s + '\"'; }  // Here for completeness\n  318  // Use upper case True/False for compatibility with Python\n  319: inline std::string to_string(bool b) { return b ? \"True\" : \"False\"; }\n  320  \n  321  template<typename A, typename B>\n  ...\n  329  }\n  330  \n  331: inline std::string to_string(const std::wstring& wstr) {\n  332      return std::wstring_convert<std::codecvt_utf8<wchar_t>>().to_bytes(wstr);\n  333  }\n\n/home/max/dev/Falcor/src/Falcor/Core/Window.h:\n  139  };\n  140  \n  141: inline std::string to_string(Window::WindowMode wm) {\n  142      #define t2s(t_) case Window::WindowMode::t_: return #t_;\n  143      switch (wm) {\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerType.slangh:\n   57  #ifdef HOST_CODE\n   58  #define str(a) case EmissiveLightSamplerType::a: return #a\n   59: inline std::string to_string(EmissiveLightSamplerType type)\n   60  {\n   61      switch (type)\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h:\n  185  \n  186  #define str(a) case LightBVHBuilder::SplitHeuristic::a: return #a\n  187:     inline std::string to_string(LightBVHBuilder::SplitHeuristic a)\n  188      {\n  189          switch (a)\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSamplerSharedDefinitions.slang:\n   44  #ifdef HOST_CODE\n   45  #define str(a) case SolidAngleBoundMethod::a: return #a\n   46: inline std::string to_string(SolidAngleBoundMethod method)\n   47  {\n   48      switch (method)\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material/TexLODTypes.slang:\n   53  #ifdef HOST_CODE\n   54  #define str(a) case TexLODMode::a: return #a\n   55: inline std::string to_string(TexLODMode type)\n   56  {\n   57      switch (type)\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassReflection.h:\n  149      enum_class_operators(RenderPassReflection::Field::Flags);\n  150  \n  151:     inline std::string to_string(RenderPassReflection::Field::Type t)\n  152      {\n  153  #define t2s(ft) case RenderPassReflection::Field::Type::ft: return #ft;\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.h:\n  233      };\n  234  \n  235:     inline std::string to_string(SceneBuilder::Flags flags)\n  236      {\n  237  #define t2s(t_) case SceneBuilder::Flags::t_: return #t_;\n\n/home/max/dev/Falcor/src/Falcor/Utils/Math/Vector.h:\n   50      using bool4 = glm::bvec4;\n   51  \n   52:     inline std::string to_string(const float2& v) { return \"float2(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \")\"; }\n   53:     inline std::string to_string(const float3& v) { return \"float3(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \")\"; }\n   54:     inline std::string to_string(const float4& v) { return \"float4(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \",\" + std::to_string(v.w) + \")\"; }\n   55  \n   56:     inline std::string to_string(const uint2& v) { return \"uint2(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \")\"; }\n   57:     inline std::string to_string(const uint3& v) { return \"uint3(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \")\"; }\n   58:     inline std::string to_string(const uint4& v) { return \"uint4(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \",\" + std::to_string(v.w) + \")\"; }\n   59  \n   60:     inline std::string to_string(const int2& v) { return \"int2(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \")\"; }\n   61:     inline std::string to_string(const int3& v) { return \"int3(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \")\"; }\n   62:     inline std::string to_string(const int4& v) { return \"int4(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \",\" + std::to_string(v.w) + \")\"; }\n   63  \n   64:     inline std::string to_string(const bool2& v) { return \"bool2(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \")\"; }\n   65:     inline std::string to_string(const bool3& v) { return \"bool3(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \")\"; }\n   66:     inline std::string to_string(const bool4& v) { return \"bool4(\" + std::to_string(v.x) + \",\" + std::to_string(v.y) + \",\" + std::to_string(v.z) + \",\" + std::to_string(v.w) + \")\"; }\n   67  }\n   68  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/FrameRate.h:\n   95      };\n   96  \n   97:     inline std::string to_string(const FrameRate& fr, bool vsyncOn = false) { return fr.getMsg(vsyncOn); }\n   98  }\n   99  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Video/VideoEncoder.h:\n   94      };\n   95  \n   96:     inline std::string to_string(VideoEncoder::Codec c)\n   97      {\n   98  #define c2s(c_) case VideoEncoder::Codec::c_: return #c_\n\n/home/max/dev/Falcor/src/RenderPasses/AccumulatePass/AccumulatePass.h:\n   90  \n   91  #define enum2str(a) case  AccumulatePass::Precision::a: return #a\n   92: inline std::string to_string(AccumulatePass::Precision mode)\n   93  {\n   94      switch (mode)\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSM.h:\n  197  \n  198  #define str(a) case CSM::PartitionMode::a: return #a\n  199: inline std::string to_string(CSM::PartitionMode type)\n  200  {\n  201      switch (type)\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRT.h:\n   82  \n   83  #define lod_mode_cm(a) case GBufferRT::LODMode::a: return #a\n   84: inline std::string to_string(GBufferRT::LODMode st)\n   85  {\n   86      switch (st)\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBufferBase.h:\n   73  \n   74  #define str(a) case GBufferBase::SamplePattern::a: return #a\n   75: inline std::string to_string(GBufferBase::SamplePattern type)\n   76  {\n   77      switch (type)\n\n/home/max/dev/Falcor/src/RenderPasses/SSAO/SSAO.h:\n   99  \n  100  #define str(a) case SSAO::SampleDistribution::a: return #a\n  101: inline std::string to_string(SSAO::SampleDistribution type)\n  102  {\n  103      switch (type)\n\n/home/max/dev/Falcor/src/RenderPasses/ToneMapper/ToneMapperParams.slang:\n   48  #ifdef HOST_CODE\n   49  #define str(a) case ToneMapperOperator::a: return #a\n   50: inline std::string to_string(ToneMapperOperator type)\n   51  {\n   52      switch (type)\n\n39 matches across 21 files\n\n\nSearching 1123 files for \"findViewCommon\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n  183  \n  184      template<typename ViewClass, typename ViewMapType>\n  185:     typename ViewClass::SharedPtr findViewCommon(Buffer* pBuffer, uint32_t firstElement, uint32_t elementCount, ViewMapType& viewMap, CreateFuncType<ViewClass> createFunc)\n  186      {\n  187          ResourceViewInfo view = ResourceViewInfo(firstElement, elementCount);\n  ...\n  202          };\n  203  \n  204:         return findViewCommon<ShaderResourceView>(this, firstElement, elementCount, mSrvs, createFunc);\n  205      }\n  206  \n  ...\n  217          };\n  218  \n  219:         return findViewCommon<UnorderedAccessView>(this, firstElement, elementCount, mUavs, createFunc);\n  220      }\n  221  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  137  \n  138  template<typename ViewClass, typename ViewMapType>\n  139: typename ViewClass::SharedPtr findViewCommon(Texture* pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize, ViewMapType& viewMap, CreateFuncType<ViewClass> createFunc) {\n  140      uint32_t resMipCount = 1;\n  141      uint32_t resArraySize = 1;\n  ...\n  185      };\n  186  \n  187:     return findViewCommon<DepthStencilView>(this, mipLevel, 1, firstArraySlice, arraySize, mDsvs, createFunc);\n  188  }\n  189  \n  ...\n  193      };\n  194  \n  195:     return findViewCommon<UnorderedAccessView>(this, mipLevel, 1, firstArraySlice, arraySize, mUavs, createFunc);\n  196  }\n  197  \n  ...\n  210      };\n  211  \n  212:     auto result = findViewCommon<RenderTargetView>(this, mipLevel, 1, firstArraySlice, arraySize, mRtvs, createFunc);\n  213      if (!result) {\n  214:         LOG_ERR(\"ERROR findViewCommon<RenderTargetView> returned NULL\");\n  215      }\n  216  \n  ...\n  223      };\n  224  \n  225:     return findViewCommon<ShaderResourceView>(this, mostDetailedMip, mipCount, firstArraySlice, arraySize, mSrvs, createFunc);\n  226  }\n  227  \n\n9 matches across 2 files\n\n\nSearching 1123 files for \"mUavs\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n  217          };\n  218  \n  219:         return findViewCommon<UnorderedAccessView>(this, firstElement, elementCount, mUavs, createFunc);\n  220      }\n  221  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.cpp:\n   84      logInfo(\"Invalidating resource views\");\n   85      mSrvs.clear();\n   86:     mUavs.clear();\n   87      mRtvs.clear();\n   88      mDsvs.clear();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n  188      mutable std::unordered_map<ResourceViewInfo, RenderTargetView::SharedPtr, ViewInfoHashFunc> mRtvs;\n  189      mutable std::unordered_map<ResourceViewInfo, DepthStencilView::SharedPtr, ViewInfoHashFunc> mDsvs;\n  190:     mutable std::unordered_map<ResourceViewInfo, UnorderedAccessView::SharedPtr, ViewInfoHashFunc> mUavs;\n  191  };\n  192  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  193      };\n  194  \n  195:     return findViewCommon<UnorderedAccessView>(this, mipLevel, 1, firstArraySlice, arraySize, mUavs, createFunc);\n  196  }\n  197  \n\n4 matches across 4 files\n\n\nSearching 1123 files for \"mUavs\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n  217          };\n  218  \n  219:         return findViewCommon<UnorderedAccessView>(this, firstElement, elementCount, mUavs, createFunc);\n  220      }\n  221  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.cpp:\n   84      logInfo(\"Invalidating resource views\");\n   85      mSrvs.clear();\n   86:     mUavs.clear();\n   87      mRtvs.clear();\n   88      mDsvs.clear();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n  188      mutable std::unordered_map<ResourceViewInfo, RenderTargetView::SharedPtr, ViewInfoHashFunc> mRtvs;\n  189      mutable std::unordered_map<ResourceViewInfo, DepthStencilView::SharedPtr, ViewInfoHashFunc> mDsvs;\n  190:     mutable std::unordered_map<ResourceViewInfo, UnorderedAccessView::SharedPtr, ViewInfoHashFunc> mUavs;\n  191  };\n  192  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n  193      };\n  194  \n  195:     return findViewCommon<UnorderedAccessView>(this, mipLevel, 1, firstArraySlice, arraySize, mUavs, createFunc);\n  196  }\n  197  \n\n4 matches across 4 files\n\n\nSearching 1123 files for \"TypedBufferBase\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n   67  \n   68          if (handle.getType() == VkResourceType::Buffer) {\n   69:             // TypedBufferBase* pTypedBuffer = dynamic_cast<TypedBufferBase*>(pView->getResource());\n   70              // if (pTypedBuffer)\n   71              // {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n   33  namespace Falcor {\n   34  \n   35: using TypedBufferBase = Buffer;\n   36  \n   37  VkImageAspectFlags getAspectFlagsFromFormat(ResourceFormat format, bool ignoreStencil = false);\n   ..\n   95  }\n   96  \n   97: VkBufferViewCreateInfo initializeBufferViewInfo(const TypedBufferBase* pTypedBuffer) {\n   98      VkBufferViewCreateInfo outInfo = {};\n   99      outInfo.sType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;\n  ...\n  123              // We only create views for TypedBuffers\n  124              VkBufferView bufferView = {};\n  125:             const TypedBufferBase* pTypedBuffer = dynamic_cast<const TypedBufferBase*>(pResource);\n  126  \n  127              if (pTypedBuffer) {\n  ...\n  203  \n  204      VkBufferView bufferView = {};\n  205:     const TypedBufferBase* pTypedBuffer = dynamic_cast<const TypedBufferBase*>(pResource);\n  206  \n  207      if (pTypedBuffer) {\n\n8 matches across 2 files\n\n\nSearching 1123 files for \"setUav\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorSet.cpp:\n   99      }\n  100  \n  101:     void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav)\n  102      {\n  103          setCpuHandle(this, rangeIndex, descIndex, pUav->getApiHandle()->getCpuHandle(0));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DescriptorSet.h:\n  105  \n  106      void setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv);\n  107:     void setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav);\n  108      void setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler);\n  109      void setCbv(uint32_t rangeIndex, uint32_t descIndex, ConstantBufferView* pView);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n  101      }\n  102  \n  103:     void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav) {\n  104          setSrvUavCommon<true>(mApiHandle, mLayout.getRange(rangeIndex).baseRegIndex, descIndex, pUav, mLayout.getRange(rangeIndex).type);\n  105      }\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  724  }\n  725  \n  726: bool ParameterBlock::setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav) {\n  727:     if (!checkDescriptorSrvUavCommon(bindLocation, pUav, \"setUav()\")) return false;\n  728  \n  729      size_t flatIndex = getFlatIndex(bindLocation);\n  ...\n 1228                              auto pView = mUAVs[flatIndex].pView;\n 1229                              if(!pView) pView = UnorderedAccessView::getNullView();\n 1230:                             pDescSet->setUav(destRangeIndex, descriptorIndex, pView.get());\n 1231                          }\n 1232                          break;\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  227          \\param[in] pSrv The unordered-access-view object to bind\n  228      */\n  229:     bool setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav);\n  230  \n  231      /** Get an SRV object.\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.cpp:\n  304      }\n  305  \n  306:     bool ShaderVar::setUav(const UnorderedAccessView::SharedPtr& pUav) const\n  307      {\n  308:         return mpBlock->setUav(mOffset, pUav);\n  309      }\n  310  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.h:\n  226          Logs an error and returns `false` if this variable doesn't point at an unordered access view.\n  227      */\n  228:     bool setUav(const UnorderedAccessView::SharedPtr& pUav) const;\n  229  \n  230      /** Get the unordered access view that this variable points to.\n\n10 matches across 7 files\n\n\nSearching 1123 files for \"createTyped\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n   70  }\n   71  \n   72: Buffer::SharedPtr Buffer::createTyped(ResourceFormat format, uint32_t elementCount, BindFlags bindFlags, CpuAccess cpuAccess, const void* pInitData) {\n   73      size_t size = elementCount * getFormatBytesPerBlock(format);\n   74      SharedPtr pBuffer = create(size, bindFlags, cpuAccess, pInitData);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h:\n   96          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n   97      */\n   98:     static SharedPtr createTyped(\n   99          ResourceFormat format,\n  100          uint32_t elementCount,\n  ...\n  111      */\n  112      template<typename T>\n  113:     static SharedPtr createTyped(\n  114          uint32_t elementCount,\n  115          Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  ...\n  117          const T* pInitData = nullptr)\n  118      {\n  119:         return createTyped(FormatForElementType<T>::kFormat, elementCount, bindFlags, cpuAccess, pInitData);\n  120      }\n  121  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.cpp:\n  314          if (!mpNodeOffsetsBuffer || mpNodeOffsetsBuffer->getElementCount() < mNodeOffsets.size())\n  315          {\n  316:             mpNodeOffsetsBuffer = Buffer::createTyped<uint32_t>((uint32_t)mNodeOffsets.size(), ResourceBindFlags::ShaderResource);\n  317              mpNodeOffsetsBuffer->setName(\"LightBVH_NodeOffsetsBuffer\");\n  318          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp:\n   60          {\n   61              // Buffer 0 has one element per tile.\n   62:             mpBuffers[0] = Buffer::createTyped<uint4>(elementCount);\n   63  \n   64              // Buffer 1 has one element per N elements in buffer 0.\n   ..\n   66              if (mpBuffers[1] == nullptr || mpBuffers[1]->getElementCount() < numElem1)\n   67              {\n   68:                 mpBuffers[1] = Buffer::createTyped<uint4>(numElem1);\n   69              }\n   70          }\n\n/home/max/dev/Falcor/src/RenderPasses/Utils/GaussianBlur/GaussianBlur.cpp:\n  208      }\n  209  \n  210:     Buffer::SharedPtr pBuf = Buffer::createTyped<float>(mKernelWidth, Resource::BindFlags::ShaderResource);\n  211  \n  212      for (uint32_t i = 0; i <= center; i++)\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp:\n   62              Buffer::SharedPtr pBuffer;\n   63              if constexpr (type == Type::ByteAddressBuffer) pBuffer = Buffer::create(numElems * sizeof(uint32_t), ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n   64:             else if constexpr (type == Type::TypedBuffer) pBuffer = Buffer::createTyped<uint32_t>(numElems, ResourceBindFlags::UnorderedAccess);\n   65              else if constexpr (type == Type::StructuredBuffer) pBuffer = Buffer::createStructured(ctx.getProgram(), \"buffer\", numElems, ResourceBindFlags::UnorderedAccess);\n   66              else assert(false);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   78                  bufB[j].resize(kNumElems);\n   79                  for (uint32_t i = 0; i < kNumElems; i++) bufB[j][i] = (float)r();\n   80:                 block[\"bufB\"][j] = Buffer::createTyped<float>(kNumElems, Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None, bufB[j].data());\n   81              }\n   82              std::vector<uint32_t> bufC[4];\n   ..\n   85                  bufC[j].resize(kNumElems);\n   86                  for (uint32_t i = 0; i < kNumElems; i++) bufC[j][i] = r();\n   87:                 block[\"bufC\"][j] = Buffer::createTyped<uint32_t>(kNumElems, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, bufC[j].data());\n   88              }\n   89  \n   ..\n  112                  globalBufA.resize(kNumElems);\n  113                  for (uint32_t i = 0; i < kNumElems; i++) globalBufA[i] = r();\n  114:                 var[\"globalBufA\"] = Buffer::createTyped<uint32_t>(kNumElems, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, globalBufA.data());\n  115              }\n  116              std::vector<uint32_t> globalTestBuffer(kNumElems);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   54              {\n   55                  for (uint32_t i = 0; i < kNumElems; i++) buf[i] = r();\n   56:                 data[\"buf\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, buf.data());\n   57              }\n   58              std::vector<uint32_t> rwBuf(kNumElems);\n   59              {\n   60                  for (uint32_t i = 0; i < kNumElems; i++) rwBuf[i] = r();\n   61:                 data[\"rwBuf\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, rwBuf.data());\n   62              }\n   63  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n   77              {\n   78                  for (uint32_t i = 0; i < kNumElems; i++) typedBufferUint[i] = r();\n   79:                 var[\"typedBufferUint\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, typedBufferUint.data());\n   80              }\n   81  \n   ..\n   83              {\n   84                  for (uint32_t i = 0; i < kNumElems; i++) typedBufferFloat4[i] = { r() * 0.25f, r() * 0.5f, r() * 0.75f, r() };\n   85:                 var[\"typedBufferFloat4\"] = Buffer::createTyped<float4>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, typedBufferFloat4.data());\n   86              }\n   87  \n   ..\n  123              var[\"rawBuffer\"] = Buffer::create(kNumElems * sizeof(uint32_t), ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, rawBuffer.data());\n  124              for (uint32_t i = 0; i < kNumElems; i++) typedBufferFloat4[i] = { r() * 0.25f, r() * 0.5f, r() * 0.75f, r() };\n  125:             var[\"typedBufferFloat4\"] = Buffer::createTyped<float4>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, typedBufferFloat4.data());\n  126              var[\"CB\"][\"c0\"] = ++c0;\n  127  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangMutatingTests.cpp:\n   37          ShaderVar var = ctx.vars().getRootVar();\n   38          uint4 v = { 11, 22, 33, 44 };\n   39:         var[\"buffer\"] = Buffer::createTyped<uint4>(1, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, &v);\n   40  \n   41          ctx.runProgram();\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp:\n   77          auto var = ctx.vars().getRootVar();\n   78          uint32_t zero = 0;\n   79:         auto pLaneCount = Buffer::createTyped<uint32_t>(1, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, &zero);\n   80          var[\"laneCount\"] = pLaneCount;\n   81  \n   ..\n   95          auto var = ctx.vars().getRootVar();\n   96          uint32_t zero = 0;\n   97:         auto pLaneCount = Buffer::createTyped<uint32_t>(1, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, &zero);\n   98          var[\"laneCount\"] = pLaneCount;\n   99  \n  100          std::vector<uint32_t> matchData = generateMatchData(kNumElems);\n  101          assert(matchData.size() == kNumElems);\n  102:         var[\"testData\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, matchData.data());\n  103  \n  104          ctx.runProgram(kNumElems, 1, 1);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/HashUtilsTests.cpp:\n   55      {\n   56          // Allocate results buffer (64k dwords).\n   57:         Buffer::SharedPtr pResultBuffer = Buffer::createTyped<uint32_t>(1 << 16, ResourceBindFlags::UnorderedAccess);\n   58          ctx.getRenderContext()->clearUAV(pResultBuffer->getUAV().get(), uint4(0));\n   59  \n   ..\n   98      {\n   99          // Allocate results buffer (2^27 dwords).\n  100:         Buffer::SharedPtr pResultBuffer = Buffer::createTyped<uint32_t>(1 << 27, ResourceBindFlags::UnorderedAccess);\n  101          ctx.getRenderContext()->clearUAV(pResultBuffer->getUAV().get(), uint4(0));\n  102  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/MathHelpersTests.cpp:\n   45          void runBBoxTestComputeShader(GPUUnitTestContext& ctx, const BBoxTestCase* testCases, int nTests, const char* entrypoint)\n   46          {\n   47:             Buffer::SharedPtr pOriginBuffer = Buffer::createTyped<float3>(nTests);\n   48:             Buffer::SharedPtr pAABBMinBuffer = Buffer::createTyped<float3>(nTests);\n   49:             Buffer::SharedPtr pAABBMaxBuffer = Buffer::createTyped<float3>(nTests);\n   50  \n   51              for (int i = 0; i < nTests; ++i)\n   ..\n  218          int nTests = sizeof(testCases) / sizeof(testCases[0]);\n  219  \n  220:         Buffer::SharedPtr pTestCaseBuffer = Buffer::createTyped<float4>(nTests);\n  221  \n  222          for (int i = 0; i < nTests; ++i)\n\n27 matches across 13 files\n\n\nSearching 1123 files for \"createTyped\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n   70  }\n   71  \n   72: Buffer::SharedPtr Buffer::createTyped(ResourceFormat format, uint32_t elementCount, BindFlags bindFlags, CpuAccess cpuAccess, const void* pInitData) {\n   73      size_t size = elementCount * getFormatBytesPerBlock(format);\n   74      SharedPtr pBuffer = create(size, bindFlags, cpuAccess, pInitData);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h:\n   96          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n   97      */\n   98:     static SharedPtr createTyped(\n   99          ResourceFormat format,\n  100          uint32_t elementCount,\n  ...\n  111      */\n  112      template<typename T>\n  113:     static SharedPtr createTyped(\n  114          uint32_t elementCount,\n  115          Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  ...\n  117          const T* pInitData = nullptr)\n  118      {\n  119:         return createTyped(FormatForElementType<T>::kFormat, elementCount, bindFlags, cpuAccess, pInitData);\n  120      }\n  121  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.cpp:\n  314          if (!mpNodeOffsetsBuffer || mpNodeOffsetsBuffer->getElementCount() < mNodeOffsets.size())\n  315          {\n  316:             mpNodeOffsetsBuffer = Buffer::createTyped<uint32_t>((uint32_t)mNodeOffsets.size(), ResourceBindFlags::ShaderResource);\n  317              mpNodeOffsetsBuffer->setName(\"LightBVH_NodeOffsetsBuffer\");\n  318          }\n\n/home/max/dev/Falcor/src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp:\n   60          {\n   61              // Buffer 0 has one element per tile.\n   62:             mpBuffers[0] = Buffer::createTyped<uint4>(elementCount);\n   63  \n   64              // Buffer 1 has one element per N elements in buffer 0.\n   ..\n   66              if (mpBuffers[1] == nullptr || mpBuffers[1]->getElementCount() < numElem1)\n   67              {\n   68:                 mpBuffers[1] = Buffer::createTyped<uint4>(numElem1);\n   69              }\n   70          }\n\n/home/max/dev/Falcor/src/RenderPasses/Utils/GaussianBlur/GaussianBlur.cpp:\n  208      }\n  209  \n  210:     Buffer::SharedPtr pBuf = Buffer::createTyped<float>(mKernelWidth, Resource::BindFlags::ShaderResource);\n  211  \n  212      for (uint32_t i = 0; i <= center; i++)\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp:\n   62              Buffer::SharedPtr pBuffer;\n   63              if constexpr (type == Type::ByteAddressBuffer) pBuffer = Buffer::create(numElems * sizeof(uint32_t), ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n   64:             else if constexpr (type == Type::TypedBuffer) pBuffer = Buffer::createTyped<uint32_t>(numElems, ResourceBindFlags::UnorderedAccess);\n   65              else if constexpr (type == Type::StructuredBuffer) pBuffer = Buffer::createStructured(ctx.getProgram(), \"buffer\", numElems, ResourceBindFlags::UnorderedAccess);\n   66              else assert(false);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   78                  bufB[j].resize(kNumElems);\n   79                  for (uint32_t i = 0; i < kNumElems; i++) bufB[j][i] = (float)r();\n   80:                 block[\"bufB\"][j] = Buffer::createTyped<float>(kNumElems, Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None, bufB[j].data());\n   81              }\n   82              std::vector<uint32_t> bufC[4];\n   ..\n   85                  bufC[j].resize(kNumElems);\n   86                  for (uint32_t i = 0; i < kNumElems; i++) bufC[j][i] = r();\n   87:                 block[\"bufC\"][j] = Buffer::createTyped<uint32_t>(kNumElems, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, bufC[j].data());\n   88              }\n   89  \n   ..\n  112                  globalBufA.resize(kNumElems);\n  113                  for (uint32_t i = 0; i < kNumElems; i++) globalBufA[i] = r();\n  114:                 var[\"globalBufA\"] = Buffer::createTyped<uint32_t>(kNumElems, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, globalBufA.data());\n  115              }\n  116              std::vector<uint32_t> globalTestBuffer(kNumElems);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   54              {\n   55                  for (uint32_t i = 0; i < kNumElems; i++) buf[i] = r();\n   56:                 data[\"buf\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, buf.data());\n   57              }\n   58              std::vector<uint32_t> rwBuf(kNumElems);\n   59              {\n   60                  for (uint32_t i = 0; i < kNumElems; i++) rwBuf[i] = r();\n   61:                 data[\"rwBuf\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, rwBuf.data());\n   62              }\n   63  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n   77              {\n   78                  for (uint32_t i = 0; i < kNumElems; i++) typedBufferUint[i] = r();\n   79:                 var[\"typedBufferUint\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, typedBufferUint.data());\n   80              }\n   81  \n   ..\n   83              {\n   84                  for (uint32_t i = 0; i < kNumElems; i++) typedBufferFloat4[i] = { r() * 0.25f, r() * 0.5f, r() * 0.75f, r() };\n   85:                 var[\"typedBufferFloat4\"] = Buffer::createTyped<float4>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, typedBufferFloat4.data());\n   86              }\n   87  \n   ..\n  123              var[\"rawBuffer\"] = Buffer::create(kNumElems * sizeof(uint32_t), ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, rawBuffer.data());\n  124              for (uint32_t i = 0; i < kNumElems; i++) typedBufferFloat4[i] = { r() * 0.25f, r() * 0.5f, r() * 0.75f, r() };\n  125:             var[\"typedBufferFloat4\"] = Buffer::createTyped<float4>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, typedBufferFloat4.data());\n  126              var[\"CB\"][\"c0\"] = ++c0;\n  127  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangMutatingTests.cpp:\n   37          ShaderVar var = ctx.vars().getRootVar();\n   38          uint4 v = { 11, 22, 33, 44 };\n   39:         var[\"buffer\"] = Buffer::createTyped<uint4>(1, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, &v);\n   40  \n   41          ctx.runProgram();\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp:\n   77          auto var = ctx.vars().getRootVar();\n   78          uint32_t zero = 0;\n   79:         auto pLaneCount = Buffer::createTyped<uint32_t>(1, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, &zero);\n   80          var[\"laneCount\"] = pLaneCount;\n   81  \n   ..\n   95          auto var = ctx.vars().getRootVar();\n   96          uint32_t zero = 0;\n   97:         auto pLaneCount = Buffer::createTyped<uint32_t>(1, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, &zero);\n   98          var[\"laneCount\"] = pLaneCount;\n   99  \n  100          std::vector<uint32_t> matchData = generateMatchData(kNumElems);\n  101          assert(matchData.size() == kNumElems);\n  102:         var[\"testData\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, matchData.data());\n  103  \n  104          ctx.runProgram(kNumElems, 1, 1);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/HashUtilsTests.cpp:\n   55      {\n   56          // Allocate results buffer (64k dwords).\n   57:         Buffer::SharedPtr pResultBuffer = Buffer::createTyped<uint32_t>(1 << 16, ResourceBindFlags::UnorderedAccess);\n   58          ctx.getRenderContext()->clearUAV(pResultBuffer->getUAV().get(), uint4(0));\n   59  \n   ..\n   98      {\n   99          // Allocate results buffer (2^27 dwords).\n  100:         Buffer::SharedPtr pResultBuffer = Buffer::createTyped<uint32_t>(1 << 27, ResourceBindFlags::UnorderedAccess);\n  101          ctx.getRenderContext()->clearUAV(pResultBuffer->getUAV().get(), uint4(0));\n  102  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/MathHelpersTests.cpp:\n   45          void runBBoxTestComputeShader(GPUUnitTestContext& ctx, const BBoxTestCase* testCases, int nTests, const char* entrypoint)\n   46          {\n   47:             Buffer::SharedPtr pOriginBuffer = Buffer::createTyped<float3>(nTests);\n   48:             Buffer::SharedPtr pAABBMinBuffer = Buffer::createTyped<float3>(nTests);\n   49:             Buffer::SharedPtr pAABBMaxBuffer = Buffer::createTyped<float3>(nTests);\n   50  \n   51              for (int i = 0; i < nTests; ++i)\n   ..\n  218          int nTests = sizeof(testCases) / sizeof(testCases[0]);\n  219  \n  220:         Buffer::SharedPtr pTestCaseBuffer = Buffer::createTyped<float4>(nTests);\n  221  \n  222          for (int i = 0; i < nTests; ++i)\n\n27 matches across 13 files\n\n\nSearching 1123 files for \"TypedBufferBase\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n   67  \n   68          if (handle.getType() == VkResourceType::Buffer) {\n   69:             // TypedBufferBase* pTypedBuffer = dynamic_cast<TypedBufferBase*>(pView->getResource());\n   70              // if (pTypedBuffer)\n   71              // {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n   36  namespace Falcor {\n   37  \n   38: using TypedBufferBase = Buffer;\n   39  \n   40  \n   ..\n  100  }\n  101  \n  102: VkBufferViewCreateInfo initializeBufferViewInfo(const TypedBufferBase* pTypedBuffer) {\n  103      VkBufferViewCreateInfo outInfo = {};\n  104  \n  ...\n  132              // We only create views for TypedBuffers\n  133              VkBufferView bufferView = {};\n  134:             const TypedBufferBase* pTypedBuffer = dynamic_cast<const TypedBufferBase*>(pResource);\n  135  \n  136              if (pTypedBuffer) {\n  ...\n  222  \n  223      VkBufferView bufferView = {};\n  224:     const TypedBufferBase* pTypedBuffer = dynamic_cast<const TypedBufferBase*>(pResource);\n  225  \n  226      if (pTypedBuffer) {\n\n8 matches across 2 files\n\n\nSearching 1123 files for \"TypedBuffer\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorPool.cpp:\n   40          case DescriptorPool::Type::RawBufferSrv:\n   41          case DescriptorPool::Type::RawBufferUav:\n   42:         case DescriptorPool::Type::TypedBufferSrv:\n   43:         case DescriptorPool::Type::TypedBufferUav:\n   44          case DescriptorPool::Type::StructuredBufferSrv:\n   45          case DescriptorPool::Type::StructuredBufferUav:\n   ..\n   68          descCount[D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER] = mDesc.mDescCount[(uint32_t)Type::Sampler];\n   69          descCount[D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV] = mDesc.mDescCount[(uint32_t)Type::Cbv];\n   70:         descCount[D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV] += mDesc.mDescCount[(uint32_t)Type::TextureSrv] + mDesc.mDescCount[(uint32_t)Type::RawBufferSrv] + mDesc.mDescCount[(uint32_t)Type::TypedBufferSrv] + mDesc.mDescCount[(uint32_t)Type::StructuredBufferSrv];\n   71:         descCount[D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV] += mDesc.mDescCount[(uint32_t)Type::TextureUav] + mDesc.mDescCount[(uint32_t)Type::RawBufferUav] + mDesc.mDescCount[(uint32_t)Type::TypedBufferUav] + mDesc.mDescCount[(uint32_t)Type::StructuredBufferUav];\n   72  \n   73          mpApiData = std::make_shared<DescriptorPoolApiData>();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12State.cpp:\n  405          case RootSignature::DescType::TextureSrv:\n  406          case RootSignature::DescType::RawBufferSrv:\n  407:         case RootSignature::DescType::TypedBufferSrv:\n  408          case RootSignature::DescType::StructuredBufferSrv:\n  409              return D3D12_DESCRIPTOR_RANGE_TYPE_SRV;\n  410          case RootSignature::DescType::TextureUav:\n  411          case RootSignature::DescType::RawBufferUav:\n  412:         case RootSignature::DescType::TypedBufferUav:\n  413          case RootSignature::DescType::StructuredBufferUav:\n  414              return D3D12_DESCRIPTOR_RANGE_TYPE_UAV;\n  ...\n  463          {\n  464          case RootSignature::DescType::RawBufferSrv:\n  465:         case RootSignature::DescType::TypedBufferSrv:\n  466          case RootSignature::DescType::StructuredBufferSrv:\n  467              desc.ParameterType = D3D12_ROOT_PARAMETER_TYPE_SRV;\n  468              break;\n  469          case RootSignature::DescType::RawBufferUav:\n  470:         case RootSignature::DescType::TypedBufferUav:\n  471          case RootSignature::DescType::StructuredBufferUav:\n  472              desc.ParameterType = D3D12_ROOT_PARAMETER_TYPE_UAV;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DescriptorPool.h:\n   57          RawBufferSrv,\n   58          RawBufferUav,\n   59:         TypedBufferSrv,\n   60:         TypedBufferUav,\n   61          Cbv,\n   62          StructuredBufferUav,\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n   64      poolDesc.setDescCount(DescriptorPool::Type::StructuredBufferSrv, 2 * 1024)\n   65          .setDescCount(DescriptorPool::Type::StructuredBufferUav, 2 * 1024)\n   66:         .setDescCount(DescriptorPool::Type::TypedBufferSrv, 2 * 1024)\n   67:         .setDescCount(DescriptorPool::Type::TypedBufferUav, 2 * 1024)\n   68          .setDescCount(DescriptorPool::Type::RawBufferSrv, 2 * 1024)\n   69          .setDescCount(DescriptorPool::Type::RawBufferUav, 2 * 1024);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RootSignature.cpp:\n   94          case RootSignature::DescType::TextureSrv:\n   95          case RootSignature::DescType::RawBufferSrv:\n   96:         case RootSignature::DescType::TypedBufferSrv:\n   97          case RootSignature::DescType::StructuredBufferSrv:\n   98          case RootSignature::DescType::Cbv:\n   ..\n  101          case RootSignature::DescType::TextureUav:\n  102          case RootSignature::DescType::RawBufferUav:\n  103:         case RootSignature::DescType::TypedBufferUav:\n  104          case RootSignature::DescType::StructuredBufferUav:\n  105              return ReflectionResourceType::ShaderAccess::ReadWrite;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp:\n   40              return VK_DESCRIPTOR_TYPE_STORAGE_IMAGE;\n   41          case DescriptorPool::Type::RawBufferSrv:\n   42:         case DescriptorPool::Type::TypedBufferSrv:\n   43              return VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER;\n   44          case DescriptorPool::Type::RawBufferUav:\n   45:         case DescriptorPool::Type::TypedBufferUav:\n   46              return VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER;\n   47          case DescriptorPool::Type::Cbv:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n   67  \n   68          if (handle.getType() == VkResourceType::Buffer) {\n   69:             // TypedBufferBase* pTypedBuffer = dynamic_cast<TypedBufferBase*>(pView->getResource());\n   70:             // if (pTypedBuffer)\n   71              // {\n   72:             //     texelBufferView = pTypedBuffer->getUAV()->getApiHandle();\n   73              //     write.pTexelBufferView = &texelBufferView;\n   74              // } else {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n   36  namespace Falcor {\n   37  \n   38: using TypedBufferBase = Buffer;\n   39  \n   40  \n   ..\n  100  }\n  101  \n  102: VkBufferViewCreateInfo initializeBufferViewInfo(const TypedBufferBase* pTypedBuffer) {\n  103      VkBufferViewCreateInfo outInfo = {};\n  104  \n  105:     ResourceFormat buffFormat = pTypedBuffer->getFormat();\n  106      LOG_DBG(\"Buffer format: %s\", to_string(buffFormat).c_str()); \n  107  \n  108      outInfo.sType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;\n  109:     outInfo.buffer = pTypedBuffer->getApiHandle();\n  110      outInfo.offset = 0;\n  111      outInfo.range = VK_WHOLE_SIZE;\n  ...\n  130          case VkResourceType::Buffer: {\n  131              //LOG_DBG(\"VkResourceType Buffer\");\n  132:             // We only create views for TypedBuffers\n  133              VkBufferView bufferView = {};\n  134:             const TypedBufferBase* pTypedBuffer = dynamic_cast<const TypedBufferBase*>(pResource);\n  135  \n  136:             if (pTypedBuffer) {\n  137:                 VkBufferViewCreateInfo info = initializeBufferViewInfo(pTypedBuffer);\n  138                  vk_call(vkCreateBufferView(gpDevice->getApiHandle(), &info, nullptr, &bufferView));\n  139              }\n  ...\n  222  \n  223      VkBufferView bufferView = {};\n  224:     const TypedBufferBase* pTypedBuffer = dynamic_cast<const TypedBufferBase*>(pResource);\n  225  \n  226:     if (pTypedBuffer) {\n  227:         VkBufferViewCreateInfo info = initializeBufferViewInfo(pTypedBuffer);\n  228          vk_call(vkCreateBufferView(gpDevice->getApiHandle(), &info, nullptr, &bufferView));\n  229      } else {\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  124              }\n  125              break;\n  126:         case ReflectionResourceType::Type::TypedBuffer:\n  127              if (pBuffer && !pBuffer->isTyped()) {\n  128:                 logError(getErrorPrefix(funcName, varName) + \", but the variable is a TypedBuffer and the buffer wasn't create as one\");\n  129                  return false;\n  130              }\n  ...\n  150  const std::array<DescriptorSet::Type, 3> kRootSrvDescriptorTypes = {\n  151      DescriptorSet::Type::RawBufferSrv,\n  152:     DescriptorSet::Type::TypedBufferSrv,\n  153      DescriptorSet::Type::StructuredBufferSrv,\n  154  };\n  ...\n  156  const std::array<DescriptorSet::Type, 3> kRootUavDescriptorTypes = {\n  157      DescriptorSet::Type::RawBufferUav,\n  158:     DescriptorSet::Type::TypedBufferUav,\n  159      DescriptorSet::Type::StructuredBufferUav,\n  160  };\n  ...\n  163      DescriptorSet::Type::TextureSrv,\n  164      DescriptorSet::Type::RawBufferSrv,\n  165:     DescriptorSet::Type::TypedBufferSrv,\n  166      DescriptorSet::Type::StructuredBufferSrv,\n  167  };\n  ...\n  170      DescriptorSet::Type::TextureUav,\n  171      DescriptorSet::Type::RawBufferUav,\n  172:     DescriptorSet::Type::TypedBufferUav,\n  173      DescriptorSet::Type::StructuredBufferUav,\n  174  };\n  ...\n  267              case DescriptorSet::Type::TextureSrv:\n  268              case DescriptorSet::Type::RawBufferSrv:\n  269:             case DescriptorSet::Type::TypedBufferSrv:\n  270              case DescriptorSet::Type::StructuredBufferSrv:\n  271                  state.srvCount += range.count;\n  ...\n  273              case DescriptorSet::Type::TextureUav:\n  274              case DescriptorSet::Type::RawBufferUav:\n  275:             case DescriptorSet::Type::TypedBufferUav:\n  276              case DescriptorSet::Type::StructuredBufferUav:\n  277                  state.uavCount += range.count;\n  ...\n 1213                      case DescriptorSet::Type::TextureSrv:\n 1214                      case DescriptorSet::Type::RawBufferSrv:\n 1215:                     case DescriptorSet::Type::TypedBufferSrv:\n 1216                      case DescriptorSet::Type::StructuredBufferSrv:\n 1217                          {\n ....\n 1223                      case DescriptorSet::Type::TextureUav:\n 1224                      case DescriptorSet::Type::RawBufferUav:\n 1225:                     case DescriptorSet::Type::TypedBufferUav:\n 1226                      case DescriptorSet::Type::StructuredBufferUav:\n 1227                          {\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.cpp:\n  221                  return ReflectionResourceType::Type::RawBuffer;\n  222              case SLANG_TEXTURE_BUFFER:\n  223:                 return ReflectionResourceType::Type::TypedBuffer;\n  224              default:\n  225                  return ReflectionResourceType::Type::Texture;\n  ...\n 1326              case DescriptorSet::Type::TextureSrv:\n 1327              case DescriptorSet::Type::RawBufferSrv:\n 1328:             case DescriptorSet::Type::TypedBufferSrv:\n 1329              case DescriptorSet::Type::StructuredBufferSrv:\n 1330                  fieldRange.baseIndex = ioBuildState.srvCount;\n ....\n 1334              case DescriptorSet::Type::TextureUav:\n 1335              case DescriptorSet::Type::RawBufferUav:\n 1336:             case DescriptorSet::Type::TypedBufferUav:\n 1337              case DescriptorSet::Type::StructuredBufferUav:\n 1338                  fieldRange.baseIndex = ioBuildState.uavCount;\n ....\n 1455              case DescriptorSet::Type::TextureSrv:\n 1456              case DescriptorSet::Type::RawBufferSrv:\n 1457:             case DescriptorSet::Type::TypedBufferSrv:\n 1458              case DescriptorSet::Type::StructuredBufferSrv:\n 1459                  regIndex += counters.srvCount;\n ....\n 1463              case DescriptorSet::Type::TextureUav:\n 1464              case DescriptorSet::Type::RawBufferUav:\n 1465:             case DescriptorSet::Type::TypedBufferUav:\n 1466              case DescriptorSet::Type::StructuredBufferUav:\n 1467                  regIndex += counters.uavCount;\n ....\n 1544                  : DescriptorSet::Type::StructuredBufferUav;\n 1545              break;\n 1546:         case ReflectionResourceType::Type::TypedBuffer:\n 1547              return shaderAccess == ReflectionResourceType::ShaderAccess::Read\n 1548:                 ? DescriptorSet::Type::TypedBufferSrv\n 1549:                 : DescriptorSet::Type::TypedBufferUav;\n 1550              break;\n 1551          case ReflectionResourceType::Type::Sampler:\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n 1027          StructuredBuffer,\n 1028          RawBuffer,\n 1029:         TypedBuffer,\n 1030          Sampler,\n 1031          ConstantBuffer\n ....\n 1613          type_2_string(StructuredBuffer);\n 1614          type_2_string(RawBuffer);\n 1615:         type_2_string(TypedBuffer);\n 1616          type_2_string(Sampler);\n 1617      default:\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp:\n   37          {\n   38              ByteAddressBuffer = 0,\n   39:             TypedBuffer = 1,\n   40              StructuredBuffer = 2,\n   41          };\n   ..\n   62              Buffer::SharedPtr pBuffer;\n   63              if constexpr (type == Type::ByteAddressBuffer) pBuffer = Buffer::create(numElems * sizeof(uint32_t), ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n   64:             else if constexpr (type == Type::TypedBuffer) pBuffer = Buffer::createTyped<uint32_t>(numElems, ResourceBindFlags::UnorderedAccess);\n   65              else if constexpr (type == Type::StructuredBuffer) pBuffer = Buffer::createStructured(ctx.getProgram(), \"buffer\", numElems, ResourceBindFlags::UnorderedAccess);\n   66              else assert(false);\n   ..\n  125      }\n  126  \n  127:     GPU_TEST(TypedBuffer)\n  128      {\n  129:         auto testFunc = testBuffer<Type::TypedBuffer>;\n  130          for (uint32_t numElems = 1u << 8; numElems <= (1u << 16); numElems <<= 4)\n  131          {\n\n61 matches across 12 files\n\n\nSearching 1123 files for \"TypedBufferBase\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n   68          if (handle.getType() == VkResourceType::Buffer) {\n   69               Buffer* pBuffer = dynamic_cast<Buffer*>(pView->getResource());\n   70:             // TypedBufferBase* pTypedBuffer = dynamic_cast<TypedBufferBase*>(pView->getResource());\n   71              if (pBuffer->isTyped()) {\n   72                   texelBufferView = pBuffer->getUAV()->getApiHandle();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n   36  namespace Falcor {\n   37  \n   38: using TypedBufferBase = Buffer;\n   39  \n   40  \n   ..\n  100  }\n  101  \n  102: VkBufferViewCreateInfo initializeBufferViewInfo(const TypedBufferBase* pTypedBuffer) {\n  103      VkBufferViewCreateInfo outInfo = {};\n  104  \n  ...\n  132              // We only create views for TypedBuffers\n  133              VkBufferView bufferView = {};\n  134:             const TypedBufferBase* pTypedBuffer = dynamic_cast<const TypedBufferBase*>(pResource);\n  135  \n  136              if (pTypedBuffer) {\n  ...\n  222  \n  223      VkBufferView bufferView = {};\n  224:     const TypedBufferBase* pTypedBuffer = dynamic_cast<const TypedBufferBase*>(pResource);\n  225  \n  226      if (pTypedBuffer) {\n\n8 matches across 2 files\n\n\nSearching 1123 files for \"chooseFolderDialog\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.h:\n  191      \\return true if a folder was selected, otherwise false (if the user clicked 'Cancel').\n  192  */\n  193: dlldecl bool chooseFolderDialog(std::string& folder);\n  194  \n  195  /** Checks if a file exists in the file system. This function doesn't look in the common directories.\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp:\n  374      };\n  375  \n  376:     bool chooseFolderDialog(std::string& folder)\n  377      {\n  378          return fileDialogCommon<IFileOpenDialog>({}, folder, FOS_PICKFOLDERS | FOS_PATHMUSTEXIST, CLSID_FileOpenDialog);\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/CaptureTrigger.cpp:\n  154          w.text(\"Output Directory\\n\" + mOutputDir);\n  155          std::string folder;\n  156:         bool changed = w.button(\"Change Folder\") && chooseFolderDialog(mOutputDir);\n  157          changed = w.checkbox(\"Absolute Path\", mAbsolutePath, true) || changed; // Avoid short-circuit\n  158          if (changed) setOutputDirectory(mOutputDir);\n\n3 matches across 3 files\n\n\nSearching 1123 files for \"chooseFolderDialog\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.h:\n  191      \\return true if a folder was selected, otherwise false (if the user clicked 'Cancel').\n  192  */\n  193: dlldecl bool chooseFolderDialog(std::string& folder);\n  194  \n  195  /** Checks if a file exists in the file system. This function doesn't look in the common directories.\n\n/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp:\n  374      };\n  375  \n  376:     bool chooseFolderDialog(std::string& folder)\n  377      {\n  378          return fileDialogCommon<IFileOpenDialog>({}, folder, FOS_PICKFOLDERS | FOS_PATHMUSTEXIST, CLSID_FileOpenDialog);\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/CaptureTrigger.cpp:\n  155          std::string folder;\n  156          \n  157:         // TODO: make linux version on chooseFolderDialog\n  158:         bool changed = false; // changed = w.button(\"Change Folder\") && chooseFolderDialog(mOutputDir);\n  159          \n  160          changed = w.checkbox(\"Absolute Path\", mAbsolutePath, true) || changed; // Avoid short-circuit\n\n4 matches across 3 files\n\n\nSearching 1123 files for \"VK_NULL_HANDLE\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp:\n   48  \n   49      VkPipeline pipeline;\n   50:     if (VK_FAILED(vkCreateComputePipelines(gpDevice->getApiHandle(), VK_NULL_HANDLE, 1, &info, nullptr, &pipeline))) {\n   51          throw std::runtime_error(\"Could not create compute pipeline.\");\n   52      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDevice.cpp:\n  139  \n  140  void Device::destroyApiObjects() {\n  141:     PFN_vkDestroyDebugReportCallbackEXT DestroyDebugReportCallback = VK_NULL_HANDLE;\n  142      DestroyDebugReportCallback = (PFN_vkDestroyDebugReportCallbackEXT)vkGetInstanceProcAddr(mApiHandle, \"vkDestroyDebugReportCallbackEXT\");\n  143      if(DestroyDebugReportCallback) {\n  ...\n  205  \n  206      // Function to create a debug callback has to be dynamically queried from the instance...\n  207:     PFN_vkCreateDebugReportCallbackEXT CreateDebugReportCallback = VK_NULL_HANDLE;\n  208      CreateDebugReportCallback = (PFN_vkCreateDebugReportCallbackEXT)vkGetInstanceProcAddr(instance, \"vkCreateDebugReportCallbackEXT\");\n  209  \n  ...\n  272  VkPhysicalDevice selectPhysicalDevice(const std::vector<VkPhysicalDevice>& devices) {\n  273      LOG_DBG(\"selecting physical Vulkan device...\");\n  274:     VkPhysicalDevice bestDevice = VK_NULL_HANDLE;\n  275      uint64_t bestMemory = 0;\n  276  \n  ...\n  289  \n  290          // Save if best found so far\n  291:         if (bestDevice == VK_NULL_HANDLE || deviceMemory > bestMemory) {\n  292              bestDevice = device;\n  293              bestMemory = deviceMemory;\n  ...\n  546      info.clipped = true;\n  547      info.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;\n  548:     info.oldSwapchain = VK_NULL_HANDLE;\n  549  \n  550      if (VK_FAILED(vkCreateSwapchainKHR(mApiHandle, &info, nullptr, &mpApiData->swapchain))) {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp:\n  101  \n  102          VkPipeline pipeline;\n  103:         if (VK_FAILED(vkCreateGraphicsPipelines(gpDevice->getApiHandle(), VK_NULL_HANDLE, 1, &pipelineCreateInfo, nullptr, &pipeline))) {\n  104              throw std::runtime_error(\"Could not create graphics pipeline.\");\n  105          }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp:\n   36  namespace Falcor {\n   37  \n   38:     template<> VkHandle<VkSwapchainKHR>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroySwapchainKHR(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   39:     template<> VkHandle<VkCommandPool>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyCommandPool(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   40:     template<> VkHandle<VkSemaphore>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroySemaphore(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   41:     template<> VkHandle<VkSampler>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE && gpDevice) vkDestroySampler(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   42:     template<> VkHandle<VkDescriptorSetLayout>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyDescriptorSetLayout(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   43:     template<> VkHandle<VkPipeline>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyPipeline(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   44:     template<> VkHandle<VkShaderModule>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyShaderModule(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   45:     template<> VkHandle<VkPipelineLayout>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyPipelineLayout(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   46:     template<> VkHandle<VkDescriptorPool>::~VkHandle() { if(mApiHandle != VK_NULL_HANDLE) vkDestroyDescriptorPool(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   47:     template<> VkHandle<VkQueryPool>::~VkHandle() { if (mApiHandle != VK_NULL_HANDLE && gpDevice) vkDestroyQueryPool(gpDevice->getApiHandle(), mApiHandle, nullptr); }\n   48  \n   49      VkDeviceData::~VkDeviceData() {\n   50:         if (mInstance != VK_NULL_HANDLE && mLogicalDevice != VK_NULL_HANDLE && mInstance != VK_NULL_HANDLE) {\n   51              vkDestroySurfaceKHR(mInstance, mSurface, nullptr);\n   52              vkDestroyDevice(mLogicalDevice, nullptr);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKSmartHandle.h:\n  172  \n  173      VkResourceType mType = VkResourceType::None;\n  174:     ImageType mImage = VK_NULL_HANDLE;\n  175:     BufferType mBuffer = VK_NULL_HANDLE;\n  176:     VkDeviceMemory mDeviceMem = VK_NULL_HANDLE;\n  177  };\n  178  \n  ...\n  199      friend SharedPtr;\n  200      VkFbo(VkRenderPass renderPass, VkFramebuffer fbo) : mVkRenderPass(renderPass), mVkFbo(fbo) {}\n  201:     VkRenderPass mVkRenderPass = VK_NULL_HANDLE;\n  202:     VkFramebuffer mVkFbo = VK_NULL_HANDLE;\n  203  };\n  204  \n\n/home/max/dev/Falcor/src/Falcor/Core/State/GraphicsState.cpp:\n   98              mDesc.setFboFormats(mpFbo ? mpFbo->getDesc() : Fbo::Desc());\n   99  #ifdef FALCOR_VK\n  100:             mDesc.setRenderPass(mpFbo ? (VkRenderPass)mpFbo->getApiHandle() : VK_NULL_HANDLE);\n  101  #endif\n  102              mDesc.setVertexLayout(mpVao->getVertexLayout());\n\n26 matches across 6 files\n\n\nSearching 1123 files for \"GPUUnitTestContext\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.cpp:\n   96  \n   97          CPUUnitTestContext cpuCtx;\n   98:         GPUUnitTestContext gpuCtx(pRenderContext);\n   99  \n  100          std::string extraMessage;\n  ...\n  182      ///////////////////////////////////////////////////////////////////////////\n  183  \n  184:     void GPUUnitTestContext::createProgram(const std::string& path,\n  185                                             const std::string& entry,\n  186                                             const Program::DefineList& programDefines,\n  ...\n  198      }\n  199  \n  200:     void GPUUnitTestContext::createVars() {\n  201          // Create shader variables.\n  202          ProgramReflection::SharedConstPtr pReflection = mpProgram->getReflector();\n  ...\n  210      }\n  211  \n  212:     void GPUUnitTestContext::allocateStructuredBuffer(const std::string& name, uint32_t nElements, const void* pInitData, size_t initDataSize) {\n  213          assert(mpVars);\n  214          mStructuredBuffers[name].pBuffer = Buffer::createStructured(mpProgram.get(), name, nElements);\n  ...\n  222      }\n  223  \n  224:     void GPUUnitTestContext::runProgram(const uint3& dimensions) {\n  225          assert(mpVars);\n  226          for (const auto& buffer : mStructuredBuffers) {\n  ...\n  236      }\n  237  \n  238:     void GPUUnitTestContext::unmapBuffer(const char* bufferName)\n  239      {\n  240          assert(mStructuredBuffers.find(bufferName) != mStructuredBuffers.end());\n  ...\n  244      }\n  245  \n  246:     const void* GPUUnitTestContext::mapRawRead(const char* bufferName)\n  247      {\n  248          assert(mStructuredBuffers.find(bufferName) != mStructuredBuffers.end());\n\n/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.h:\n   53  \n   54      class CPUUnitTestContext;\n   55:     class GPUUnitTestContext;\n   56  \n   57      struct TooManyFailedTestsException : public std::exception { };\n   ..\n   69  \n   70      using CPUTestFunc = std::function<void(CPUUnitTestContext& ctx)>;\n   71:     using GPUTestFunc = std::function<void(GPUUnitTestContext& ctx)>;\n   72  \n   73      dlldecl void registerCPUTest(const std::string& filename, const std::string& name, const std::string& skipMessage, CPUTestFunc func);\n   ..\n  100      };\n  101  \n  102:     class dlldecl GPUUnitTestContext : public UnitTestContext\n  103      {\n  104      public:\n  105:         GPUUnitTestContext(RenderContext* pContext) : mpContext(pContext) { }\n  106  \n  107          /** createProgram creates a compute program from the source code at the\n  ...\n  214          StreamSink does the former, and if it has passed, it does the latter.)\n  215          In the event of a test failure, passes along the failure message to the\n  216:         provided GPUUnitTestContext's |reportFailure| method.\n  217      */\n  218      class StreamSink\n  ...\n  391  */\n  392  #define GPU_TEST(Name, ...)                                                     \\\n  393:     static void GPUUnitTest##Name(GPUUnitTestContext& ctx);                     \\\n  394      struct GPUUnitTestRegisterer##Name {                                        \\\n  395          GPUUnitTestRegisterer##Name()                                           \\\n  ...\n  399          }                                                                       \\\n  400      } RegisterGPUTest##Name;                                                    \\\n  401:     static void GPUUnitTest##Name(GPUUnitTestContext& ctx) /* over to the user for the braces */\n  402  \n  403  /** Macro definitions for the GPU unit testing framework. Note that they\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp:\n   47      The test binds the buffer to a compute program which reads back the data.\n   48  */\n   49: void testBufferReadback(GPUUnitTestContext& ctx, Buffer::CpuAccess cpuAccess) {\n   50      LOG_DBG(\"Create buffer\");\n   51      auto pBuf = createTestBuffer(cpuAccess);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp:\n   42  \n   43          template <Type type>\n   44:         void testBuffer(GPUUnitTestContext& ctx, uint32_t numElems, uint32_t index = 0, uint32_t count = 0)\n   45          {\n   46              numElems = div_round_up(numElems, 256u) * 256u; // Make sure we run full thread groups.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   44          auto r = [&]() -> uint32_t { return dist(rng); };\n   45  \n   46:         void testRootBuffer(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   47          {\n   48              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   40          auto r = [&]() -> uint32_t { return dist(rng); };\n   41  \n   42:         void testRootBufferInStruct(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   43          {\n   44              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n   49          };\n   50  \n   51:         void testRootBuffer(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   52          {\n   53              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Sampling/SampleGeneratorTests.cpp:\n   72          }\n   73  \n   74:         void testSampleGenerator(GPUUnitTestContext& ctx, uint32_t type, const double corrThreshold, bool testInstances)\n   75          {\n   76              // Create sample generator.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp:\n   43          std::mt19937 r;\n   44  \n   45:         void test(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   46          {\n   47              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp:\n   34          const uint32_t kNumElems = 256;\n   35  \n   36:         void test(GPUUnitTestContext& ctx, const std::string& shaderModel)\n   37          {\n   38              ctx.createProgram(\"Tests/Slang/ShaderModel.cs.slang\", \"main\", Program::DefineList(), Shader::CompilerFlags::None, shaderModel);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp:\n   43      namespace\n   44      {\n   45:         void testEnum(GPUUnitTestContext& ctx, const std::string& shaderModel)\n   46          {\n   47              ctx.createProgram(\"Tests/Slang/SlangTests.cs.slang\", \"testEnum\", Program::DefineList(), Shader::CompilerFlags::None, shaderModel);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/TraceRayFlags.cpp:\n   51  }\n   52  #endif\n   53: void testRayFlags(GPUUnitTestContext& ctx, uint32_t expected, const Program::DefineList& defines, const std::string& shaderModel) {\n   54      ctx.createProgram(\"Tests/Slang/TraceRayFlags.cs.slang\", \"testRayFlags\", defines, Shader::CompilerFlags::None, shaderModel);\n   55      ctx.allocateStructuredBuffer(\"result\", 1);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/BitonicSortTests.cpp:\n   45          }\n   46  \n   47:         void testGpuSort(GPUUnitTestContext& ctx, BitonicSort* pSort, const uint32_t n, const uint32_t chunkSize)\n   48          {\n   49              // Create a buffer of random data to use as test data.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/MathHelpersTests.cpp:\n   43          };\n   44  \n   45:         void runBBoxTestComputeShader(GPUUnitTestContext& ctx, const BBoxTestCase* testCases, int nTests, const char* entrypoint)\n   46          {\n   47              Buffer::SharedPtr pOriginBuffer = Buffer::createTyped<float3>(nTests);\n   ..\n   67          }\n   68  \n   69:         void testKnownBBoxes(GPUUnitTestContext& ctx, const char* entrypoint)\n   70          {\n   71              // Generate test data...\n   ..\n  112          }\n  113  \n  114:         void testRandomBBoxes(GPUUnitTestContext& ctx, const char* entrypoint)\n  115          {\n  116              // Generate test data.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/ParallelReductionTests.cpp:\n   87  \n   88          template<typename DataType, typename RefType>\n   89:         void testReduction(GPUUnitTestContext& ctx, const ComputeParallelReduction::SharedPtr& pReduction, ResourceFormat format, uint32_t width, uint32_t height)\n   90          {\n   91              // Create random test data.\n   ..\n  208          }\n  209  \n  210:         void testReduction(GPUUnitTestContext& ctx, const ComputeParallelReduction::SharedPtr& pReduction, ResourceFormat format, uint32_t width, uint32_t height)\n  211          {\n  212              const FormatType type = getFormatType(format);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/PrefixSumTests.cpp:\n   47          }\n   48  \n   49:         void testPrefixSum(GPUUnitTestContext& ctx, const PrefixSum::SharedPtr& pPrefixSum, uint32_t numElems)\n   50          {\n   51              // Create a buffer of random data to use as test data.\n\n31 matches across 16 files\n\n\nSearching 1123 files for \"MESA_device_select\" (case sensitive)\n\n0 matches\n\nSearching 1123 files for \"kSwapChainBuffersCount\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Device.cpp:\n  252      }\n  253  \n  254:     bool Device::getApiFboData(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat, ResourceHandle apiHandles[kSwapChainBuffersCount], uint32_t& currentBackBufferIndex)\n  255      {\n  256:         for (uint32_t i = 0; i < kSwapChainBuffersCount; i++)\n  257          {\n  258              HRESULT hr = mpApiData->pSwapChain->GetBuffer(i, IID_PPV_ARGS(&apiHandles[i]));\n  ...\n  281      {\n  282          mpApiData->pSwapChain->Present(mDesc.enableVsync ? 1 : 0, 0);\n  283:         mCurrentBackBufferIndex = (mCurrentBackBufferIndex + 1) % kSwapChainBuffersCount;\n  284      }\n  285  \n  ...\n  361      bool Device::createSwapChain(ResourceFormat colorFormat)\n  362      {\n  363:         mpApiData->pSwapChain = createDxgiSwapChain(mpApiData->pDxgiFactory, mpWindow.get(), getCommandQueueHandle(LowLevelContextData::CommandQueueType::Direct, 0), colorFormat, kSwapChainBuffersCount);\n  364          if (mpApiData->pSwapChain == nullptr) return false;\n  365          return true;\n  ...\n  370          DXGI_SWAP_CHAIN_DESC desc;\n  371          d3d_call(mpApiData->pSwapChain->GetDesc(&desc));\n  372:         d3d_call(mpApiData->pSwapChain->ResizeBuffers(kSwapChainBuffersCount, width, height, desc.BufferDesc.Format, desc.Flags));\n  373      }\n  374  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n  102  \n  103  bool Device::updateDefaultFBO(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat) {\n  104:     ResourceHandle apiHandles[kSwapChainBuffersCount] = {};\n  105      getApiFboData(width, height, colorFormat, depthFormat, apiHandles, mCurrentBackBufferIndex);\n  106  \n  107:     for (uint32_t i = 0; i < kSwapChainBuffersCount; i++) {\n  108          // Create a texture object\n  109          auto pColorTex = Texture::SharedPtr(new Texture(width, height, 1, 1, 1, 1, colorFormat, Texture::Type::Texture2D, Texture::BindFlags::RenderTarget));\n  ...\n  166      // Release all the bound resources. Need to do that before deleting the RenderContext\n  167      for (uint32_t i = 0; i < arraysize(mCmdQueues); i++) mCmdQueues[i].clear();\n  168:     for (uint32_t i = 0; i < kSwapChainBuffersCount; i++) mpSwapChainFbos[i].reset();\n  169      mDeferredReleases = decltype(mDeferredReleases)();\n  170      releaseNullViews();\n  ...\n  185      apiPresent();\n  186      mpFrameFence->gpuSignal(mpRenderContext->getLowLevelData()->getCommandQueue());\n  187:     if (mpFrameFence->getCpuValue() >= kSwapChainBuffersCount) mpFrameFence->syncCpu(mpFrameFence->getCpuValue() - kSwapChainBuffersCount);\n  188      executeDeferredReleases();\n  189      mFrameID++;\n  ...\n  213  #ifdef FALCOR_D3D12\n  214      // Save FBO resource states\n  215:     std::array<Resource::State, kSwapChainBuffersCount> fboColorStates;\n  216:     std::array<Resource::State, kSwapChainBuffersCount> fboDepthStates;\n  217:     for (uint32_t i = 0; i < kSwapChainBuffersCount; i++) {\n  218          assert(mpSwapChainFbos[i]->getColorTexture(0)->isStateGlobal());\n  219          fboColorStates[i] = mpSwapChainFbos[i]->getColorTexture(0)->getGlobalState();\n  ...\n  236  #ifdef FALCOR_D3D12\n  237      // Restore FBO resource states\n  238:     for (uint32_t i = 0; i < kSwapChainBuffersCount; i++) {\n  239          assert(mpSwapChainFbos[i]->getColorTexture(0)->isStateGlobal());\n  240          mpSwapChainFbos[i]->getColorTexture(0)->setGlobalState(fboColorStates[i]);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.h:\n  179  \n  180   private:\n  181:     static constexpr uint32_t kSwapChainBuffersCount = 3;\n  182  \n  183      struct ResourceRelease {\n  ...\n  189  \n  190      uint32_t mCurrentBackBufferIndex;\n  191:     Fbo::SharedPtr mpSwapChainFbos[kSwapChainBuffersCount];\n  192  \n  193      Device(Window::SharedPtr pWindow, const Desc& desc) : mpWindow(pWindow), mDesc(desc) {}\n  ...\n  216  \n  217      // API specific functions\n  218:     bool getApiFboData(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat, ResourceHandle apiHandles[kSwapChainBuffersCount], uint32_t& currentBackBufferIndex);\n  219      void destroyApiObjects();\n  220      void apiPresent();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDevice.cpp:\n  121  }\n  122  \n  123: bool Device::getApiFboData(uint32_t width, uint32_t height, ResourceFormat colorFormat, ResourceFormat depthFormat, ResourceHandle apiHandles[kSwapChainBuffersCount], uint32_t& currentBackBufferIndex) {\n  124      uint32_t imageCount = 0;\n  125      vkGetSwapchainImagesKHR(mApiHandle, mpApiData->swapchain, &imageCount, nullptr);\n  126      //assert(imageCount == apiHandles.size());\n  127:     assert(imageCount == kSwapChainBuffersCount);\n  128  \n  129      std::vector<VkImage> swapchainImages(imageCount);\n  ...\n  134  \n  135      // Get the back-buffer\n  136:     mCurrentBackBufferIndex = getCurrentBackBufferIndex(mApiHandle, kSwapChainBuffersCount, mpApiData);\n  137      return true;\n  138  }\n  ...\n  533      info.surface = mApiHandle;\n  534      uint32_t maxImageCount = surfaceCapabilities.maxImageCount ? surfaceCapabilities.maxImageCount : UINT32_MAX; // 0 means no limit on the number of images\n  535:     info.minImageCount = clamp(kSwapChainBuffersCount, surfaceCapabilities.minImageCount, maxImageCount);\n  536      info.imageFormat = requestedFormat;\n  537      info.imageColorSpace = requestedColorSpace;\n  ...\n  556      vkGetSwapchainImagesKHR(mApiHandle, mpApiData->swapchain, &swapChainCount, nullptr);\n  557      LOG_DBG(\"swapChainCount is %u\", swapChainCount);\n  558:     assert(swapChainCount == kSwapChainBuffersCount);\n  559  \n  560      return true;\n  ...\n  569      assert(pQueue);\n  570      vk_call(vkQueuePresentKHR(pQueue, &info));\n  571:     mCurrentBackBufferIndex = getCurrentBackBufferIndex(mApiHandle, kSwapChainBuffersCount, mpApiData);\n  572  }\n  573  \n  ...\n  593      }\n  594  \n  595:     mpApiData->presentFences.f.resize(kSwapChainBuffersCount);\n  596      for (auto& f : mpApiData->presentFences.f) {\n  597          VkFenceCreateInfo info = { VK_STRUCTURE_TYPE_FENCE_CREATE_INFO };\n\n24 matches across 4 files\n\n\nSearching 1123 files for \"ResourceBindFlags\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n   40      const std::string& varName,\n   41      uint32_t elementCount,\n   42:     ResourceBindFlags bindFlags,\n   43      Buffer::CpuAccess cpuAccess,\n   44      const void* pInitData,\n   ..\n   83      uint32_t structSize,\n   84      uint32_t elementCount,\n   85:     ResourceBindFlags bindFlags,\n   86      CpuAccess cpuAccess,\n   87      const void* pInitData,\n   ..\n  105      const ShaderVar& shaderVar,\n  106      uint32_t elementCount,\n  107:     ResourceBindFlags bindFlags,\n  108      CpuAccess cpuAccess,\n  109      const void* pInitData,\n  ...\n  117      const std::string& name,\n  118      uint32_t elementCount,\n  119:     ResourceBindFlags bindFlags,\n  120      CpuAccess cpuAccess,\n  121      const void* pInitData,\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h:\n  132          uint32_t structSize,\n  133          uint32_t elementCount,\n  134:         ResourceBindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  135          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  136          const void* pInitData = nullptr,\n  ...\n  151          const std::string& name,\n  152          uint32_t elementCount,\n  153:         ResourceBindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  154          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  155          const void* pInitData = nullptr,\n  ...\n  168          const ShaderVar& shaderVar,\n  169          uint32_t elementCount,\n  170:         ResourceBindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  171          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  172          const void* pInitData = nullptr,\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Buffer.cpp:\n   54          D3D12_RESOURCE_STATES d3dState = getD3D12ResourceState(initState);\n   55          ID3D12ResourcePtr pApiHandle;\n   56:         D3D12_HEAP_FLAGS heapFlags = is_set(bindFlags, ResourceBindFlags::Shared) ? D3D12_HEAP_FLAG_SHARED : D3D12_HEAP_FLAG_NONE;\n   57          d3d_call(pDevice->CreateCommittedResource(&heapProps, heapFlags, &bufDesc, d3dState, nullptr, IID_PPV_ARGS(&pApiHandle)));\n   58          \n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Formats.cpp:\n  114      static_assert(arraysize(kDxgiFormatDesc) == (uint32_t)ResourceFormat::BC7UnormSrgb + 1, \"DXGI format desc table has a wrong size\");\n  115  \n  116:     ResourceBindFlags getFormatBindFlags(ResourceFormat format)\n  117      {\n  118          D3D12_FEATURE_DATA_FORMAT_SUPPORT support;\n  ...\n  120          d3d_call(gpDevice->getApiHandle()->CheckFeatureSupport(D3D12_FEATURE_FORMAT_SUPPORT, &support, sizeof(support)));\n  121  \n  122:         ResourceBindFlags flags = ResourceBindFlags::None;\n  123          auto dxgi1 = support.Support1;\n  124:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_BUFFER) flags |= ResourceBindFlags::Constant;\n  125:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER) flags |= ResourceBindFlags::Vertex;\n  126:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER) flags |= ResourceBindFlags::Index;\n  127:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SO_BUFFER) flags |= ResourceBindFlags::StreamOutput;\n  128:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TEXTURE1D) flags |= ResourceBindFlags::ShaderResource;\n  129:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TEXTURE2D) flags |= ResourceBindFlags::ShaderResource;\n  130:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TEXTURE3D) flags |= ResourceBindFlags::ShaderResource;\n  131:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TEXTURECUBE) flags |= ResourceBindFlags::ShaderResource;\n  132:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_LOAD) flags |= ResourceBindFlags::ShaderResource;\n  133:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE) flags |= ResourceBindFlags::ShaderResource;\n  134:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON) flags |= ResourceBindFlags::ShaderResource;\n  135:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_GATHER) flags |= ResourceBindFlags::ShaderResource;\n  136:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON) flags |= ResourceBindFlags::ShaderResource;\n  137:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_RENDER_TARGET) flags |= ResourceBindFlags::RenderTarget;\n  138:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL) flags |= ResourceBindFlags::DepthStencil;\n  139:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW) flags |= ResourceBindFlags::UnorderedAccess;\n  140          \n  141          return flags;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Texture.cpp:\n  142          }\n  143  \n  144:         D3D12_HEAP_FLAGS heapFlags = is_set(mBindFlags, ResourceBindFlags::Shared) ? D3D12_HEAP_FLAG_SHARED : D3D12_HEAP_FLAG_NONE;\n  145          d3d_call(gpDevice->getApiHandle()->CreateCommittedResource(&kDefaultHeapProps, heapFlags, &desc, D3D12_RESOURCE_STATE_COMMON, pClearVal, IID_PPV_ARGS(&mApiHandle)));\n  146  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Formats.h:\n   41      /** These flags are hints the driver to what pipeline stages the resource will be bound to.\n   42  */\n   43:     enum class ResourceBindFlags : uint32_t {\n   44          None = 0x0,             ///< The resource will not be bound the pipeline. Use this to create a staging resource\n   45          Vertex = 0x1,           ///< The resource will be bound as a vertex-buffer\n   ..\n   61      };\n   62  \n   63:     enum_class_operators(ResourceBindFlags);\n   64  \n   65      /** Resource formats\n   ..\n  349      /** Get the supported bind-flags for a specific format\n  350      */\n  351:     ResourceBindFlags getFormatBindFlags(ResourceFormat format);\n  352  \n  353      inline const std::string& to_string(ResourceFormat format) {\n  ...\n  373      }\n  374  \n  375:     inline const std::string to_string(ResourceBindFlags flags) {\n  376          std::string s;\n  377:         if (flags == ResourceBindFlags::None) {\n  378              return \"None\";\n  379          }\n  380  \n  381: #define flag_to_str(f_) if (is_set(flags, ResourceBindFlags::f_)) (s += (s.size() ? \" | \" : \"\") + std::string(#f_))\n  382  \n  383          flag_to_str(Vertex);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n   45   public:\n   46      using ApiHandle = ResourceHandle;\n   47:     using BindFlags = ResourceBindFlags;\n   48  \n   49      /** Resource types. Notice there are no array types. Array are controlled using the array size parameter on texture creation.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n   43  \n   44      Texture::BindFlags supported = getFormatBindFlags(format);\n   45:     supported |= ResourceBindFlags::Shared;\n   46      if ((flags & supported) != flags) {\n   47          logError(\"Error when creating \" + texType + \" of format \" + to_string(format) + \". The requested bind-flags are not supported.\\n\"\n   ..\n  236  \n  237      if (type == FormatType::Float && channels < 3) {\n  238:         Texture::SharedPtr pOther = Texture::create2D(getWidth(mipLevel), getHeight(mipLevel), ResourceFormat::RGBA32Float, 1, 1, nullptr, ResourceBindFlags::RenderTarget | ResourceBindFlags::ShaderResource);\n  239          pContext->blit(getSRV(mipLevel, 1, arraySlice, 1), pOther->getRTV(0, 0, 1));\n  240          textureData = pContext->readTextureSubresource(pOther.get(), 0);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFormats.cpp:\n  112      };\n  113  \n  114:     ResourceBindFlags getFormatBindFlags(ResourceFormat format)\n  115      {\n  116          VkFormatProperties p;\n  117          vkGetPhysicalDeviceFormatProperties(gpDevice->getApiHandle(), getVkFormat(format), &p);\n  118  \n  119:         auto convertFlags = [](VkFormatFeatureFlags vk) -> ResourceBindFlags\n  120          {\n  121:             ResourceBindFlags f = ResourceBindFlags::None;\n  122:             if (vk & VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT) f |= ResourceBindFlags::ShaderResource;\n  123:             if (vk & VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT) f |= ResourceBindFlags::ShaderResource;\n  124:             if (vk & VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT) f |= ResourceBindFlags::ShaderResource;\n  125:             if (vk & VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT) f |= ResourceBindFlags::UnorderedAccess;\n  126:             if (vk & VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT) f |= ResourceBindFlags::UnorderedAccess;\n  127:             if (vk & VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT) f |= ResourceBindFlags::UnorderedAccess;\n  128:             if (vk & VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT) f |= ResourceBindFlags::UnorderedAccess;\n  129:             if (vk & VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT) f |= ResourceBindFlags::Vertex;\n  130:             if (vk & VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT) f |= ResourceBindFlags::RenderTarget;\n  131:             if (vk & VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT) f |= ResourceBindFlags::RenderTarget;\n  132:             if (vk & VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT) f |= ResourceBindFlags::DepthStencil;\n  133  \n  134              return f;\n  135          };\n  136          \n  137:         ResourceBindFlags flags = ResourceBindFlags::None;\n  138          flags |= convertFlags(p.bufferFeatures);\n  139          flags |= convertFlags(p.linearTilingFeatures);\n  ...\n  145          case ResourceFormat::R16Uint:\n  146          case ResourceFormat::R32Uint:\n  147:             flags |= ResourceBindFlags::Index;\n  148          }\n  149  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n   60  \n   61      #if _LOG_ENABLED\n   62:     ResourceBindFlags requiredFlag = ResourceBindFlags::None;\n   63      if (pType->getType() != ReflectionResourceType::Type::Sampler) {\n   64          switch (pType->getShaderAccess()) {\n   65              case ReflectionResourceType::ShaderAccess::Read:\n   66:                 requiredFlag = (pType->getType() == ReflectionResourceType::Type::ConstantBuffer) ? ResourceBindFlags::Constant : ResourceBindFlags::ShaderResource;\n   67                  break;\n   68              case ReflectionResourceType::ShaderAccess::ReadWrite:\n   69:                 requiredFlag = ResourceBindFlags::UnorderedAccess;\n   70                  break;\n   71              default:\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.cpp:\n  314          if (!mpNodeOffsetsBuffer || mpNodeOffsetsBuffer->getElementCount() < mNodeOffsets.size())\n  315          {\n  316:             mpNodeOffsetsBuffer = Buffer::createTyped<uint32_t>((uint32_t)mNodeOffsets.size(), ResourceBindFlags::ShaderResource);\n  317              mpNodeOffsetsBuffer->setName(\"LightBVH_NodeOffsetsBuffer\");\n  318          }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n  299              \"gMeshData\",\n  300              uint32_t(mMeshLights.size()),\n  301:             ResourceBindFlags::ShaderResource);\n  302          if (mpMeshData->getStructSize() != sizeof(MeshLightData)) {\n  303              throw std::runtime_error(\"Size mismatch for structured buffer of MeshLightData\");\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphCompiler.cpp:\n  280                      bool graphOutput = mGraph.isGraphOutput({ nodeIndex, field.getName() });\n  281                      uint32_t lifetime = graphOutput ? uint32_t(-1) : uint32_t(i);\n  282:                     if (graphOutput && field.getBindFlags() != ResourceBindFlags::None) field.bindFlags(field.getBindFlags() | ResourceBindFlags::ShaderResource); // Adding ShaderResource for graph outputs\n  283                      pResourceCache->registerField(fullFieldName, field, lifetime);\n  284                  }\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassHelpers.h:\n   80          \\param[in] bindFlags Optional bind flags. The default is 'ShaderResource' for all inputs.\n   81      */\n   82:     inline void addRenderPassInputs(RenderPassReflection& reflector, const ChannelList& channels, ResourceBindFlags bindFlags = ResourceBindFlags::ShaderResource)\n   83      {\n   84          for (const auto& it : channels)\n   ..\n   96          \\param[in] bindFlags Optional bind flags. The default is 'UnorderedAccess' for all outputs.\n   97      */\n   98:     inline void addRenderPassOutputs(RenderPassReflection& reflector, const ChannelList& channels, ResourceBindFlags bindFlags = ResourceBindFlags::UnorderedAccess)\n   99      {\n  100          for (const auto& it : channels)\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassReflection.h:\n   83  \n   84              Field& format(ResourceFormat f);\n   85:             Field& bindFlags(ResourceBindFlags flags);\n   86              Field& flags(Flags flags);\n   87              Field& visibility(Visibility vis);\n   ..\n   98              uint32_t getMipCount() const { return mMipCount; }\n   99              ResourceFormat getFormat() const { return mFormat; }\n  100:             ResourceBindFlags getBindFlags() const { return mBindFlags; }\n  101              Flags getFlags() const { return mFlags; }\n  102              Type getType() const { return mType; }\n  ...\n  123              uint32_t mArraySize = 1;                       ///< The required array-size. Only valid for textures\n  124              ResourceFormat mFormat = ResourceFormat::Unknown; ///< Unknown means use the back-buffer format for output resources, don't care for input resources\n  125:             ResourceBindFlags mBindFlags = ResourceBindFlags::None;  ///< The required bind flags. The default for outputs is RenderTarget, for inputs is ShaderResource and for InOut (RenderTarget | ShaderResource)\n  126              Flags mFlags = Flags::None;                    ///< The field flags\n  127              Visibility mVisibility = Visibility::Undefined;\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/ResourceCache.cpp:\n  101              assert(mNameToIndex.count(name) == 0);\n  102              mNameToIndex[name] = (uint32_t)mResourceData.size();\n  103:             bool resolveBindFlags = (field.getBindFlags() == ResourceBindFlags::None);\n  104              mResourceData.push_back({ field, {timePoint, timePoint}, nullptr, resolveBindFlags, name });\n  105          }\n  ...\n  111              mergeTimePoint(mResourceData[index].lifetime, timePoint);\n  112              mResourceData[index].pResource = nullptr;\n  113:             mResourceData[index].resolveBindFlags = mResourceData[index].resolveBindFlags || (field.getBindFlags() == ResourceBindFlags::None);\n  114          }\n  115      }\n  ...\n  132              if (resolveBindFlags)\n  133              {\n  134:                 ResourceBindFlags mask = Resource::BindFlags::UnorderedAccess | Resource::BindFlags::ShaderResource;\n  135                  bool isOutput = is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Output);\n  136                  bool isInternal = is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Internal);\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.cpp:\n   57              {\n   58                  mpParallelReduction = ComputeParallelReduction::create();\n   59:                 mpReductionResult = Buffer::create(32, ResourceBindFlags::None, Buffer::CpuAccess::Read);\n   60              }\n   61  \n   ..\n   63              if (!mpStatsRayCount || mpStatsRayCount->getWidth() != frameDim.x || mpStatsRayCount->getHeight() != frameDim.y)\n   64              {\n   65:                 mpStatsRayCount = Texture::create2D(frameDim.x, frameDim.y, ResourceFormat::R32Uint, 1, 1, nullptr, ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess);\n   66:                 mpStatsPathLength = Texture::create2D(frameDim.x, frameDim.y, ResourceFormat::R32Uint, 1, 1, nullptr, ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess);\n   67              }\n   68  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/AnimationController.cpp:\n  253              auto createBuffer = [&](const std::string& name, const auto& initData)\n  254              {\n  255:                 auto pBuffer = Buffer::createStructured(block[name], (uint32_t)initData.size(), ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  256                  pBuffer->setBlob(initData.data(), 0, pBuffer->getSize());\n  257                  block[name] = pBuffer;\n  ...\n  263              assert(mSkinningMatrices.size() * 4 < UINT32_MAX);\n  264              uint32_t float4Count = (uint32_t)mSkinningMatrices.size() * 4;\n  265:             mpSkinningMatricesBuffer = Buffer::createStructured(sizeof(float4), float4Count, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  266:             mpInvTransposeSkinningMatricesBuffer = Buffer::createStructured(sizeof(float4), float4Count, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  267              block[\"boneMatrices\"].setBuffer(mpSkinningMatricesBuffer);\n  268              block[\"inverseTransposeBoneMatrices\"].setBuffer(mpInvTransposeSkinningMatricesBuffer);\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp:\n  317  \n  318          // Create the index buffer\n  319:         ResourceBindFlags ibBindFlags = Resource::BindFlags::Index | ResourceBindFlags::ShaderResource;\n  320          Buffer::SharedPtr pIB = Buffer::create((uint32_t)ibSize, ibBindFlags, Buffer::CpuAccess::None, mBuffersData.indices.data());\n  321  \n  322          // Create the vertex data as structured buffers\n  323:         ResourceBindFlags vbBindFlags = ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess | ResourceBindFlags::Vertex;\n  324          Buffer::SharedPtr pStaticBuffer = Buffer::createStructured(sizeof(PackedStaticVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n  325          Buffer::SharedPtr pPrevBuffer = Buffer::createStructured(sizeof(PrevVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n  ...\n  330          std::vector<uint16_t> drawIDs(drawCount);\n  331          for (uint32_t i = 0; i < drawCount; i++) drawIDs[i] = i;\n  332:         pVBs[Scene::kDrawIdBufferIndex] = Buffer::create(drawCount * sizeof(uint16_t), ResourceBindFlags::Vertex, Buffer::CpuAccess::None, drawIDs.data());\n  333  \n  334          // The layout only initializes the vertex data and draw ID layout. The skinning data doesn't get passed into the vertex shader.\n\n/home/max/dev/Falcor/src/Falcor/Utils/Debug/PixelDebug.cpp:\n   76  \n   77                  // Allocate staging buffers for readback. These are shared, the data is stored consecutively.\n   78:                 mpCounterBuffer = Buffer::create(2 * sizeof(uint32_t), ResourceBindFlags::None, Buffer::CpuAccess::Read);\n   79:                 mpDataBuffer = Buffer::create(mpPixelLog->getSize() + mpAssertLog->getSize(), ResourceBindFlags::None, Buffer::CpuAccess::Read);\n   80              }\n   81  \n\n/home/max/dev/Falcor/src/RenderPasses/AccumulatePass/AccumulatePass.cpp:\n  103  {\n  104      RenderPassReflection reflector;\n  105:     reflector.addInput(kInputChannel, \"Input data to be temporally accumulated\").bindFlags(ResourceBindFlags::ShaderResource);\n  106:     reflector.addOutput(kOutputChannel, \"Output data that is temporally accumulated\").bindFlags(ResourceBindFlags::RenderTarget | ResourceBindFlags::UnorderedAccess | ResourceBindFlags::ShaderResource).format(ResourceFormat::RGBA32Float);\n  107      return reflector;\n  108  }\n\n/home/max/dev/Falcor/src/RenderPasses/BSDFViewer/BSDFViewer.cpp:\n   72  \n   73      // Create readback buffer.\n   74:     mPixelDataBuffer = Buffer::createStructured(mpViewerPass->getProgram().get(), \"gPixelData\", 1u, ResourceBindFlags::UnorderedAccess);\n   75  \n   76      mpPixelDebug = PixelDebug::create();\n   ..\n   85  {\n   86      RenderPassReflection r;\n   87:     r.addOutput(kOutput, \"Output buffer\").format(ResourceFormat::RGBA32Float).bindFlags(ResourceBindFlags::UnorderedAccess);\n   88      return r;\n   89  }\n\n/home/max/dev/Falcor/src/RenderPasses/Utils/Composite/Composite.cpp:\n   80  {\n   81      RenderPassReflection reflector;\n   82:     reflector.addInput(kInputA, \"Input A\").bindFlags(ResourceBindFlags::ShaderResource);\n   83:     reflector.addInput(kInputB, \"Input B\").bindFlags(ResourceBindFlags::ShaderResource);\n   84:     reflector.addOutput(kOutput, \"Output\").bindFlags(ResourceBindFlags::UnorderedAccess).format(ResourceFormat::RGBA32Float); // TODO: Allow user to specify output format\n   85      return reflector;\n   86  }\n\n/home/max/dev/Falcor/src/Samples/CudaInterop/CudaInterop.cpp:\n   33  {\n   34      // Create our input and output textures\n   35:     mpInputTex = Texture::createFromFile(\"smoke-puff.png\", false, false, ResourceBindFlags::Shared);\n   36      mWidth = mpInputTex->getWidth();\n   37      mHeight = mpInputTex->getHeight();\n   38:     mpOutputTex = Texture::create2D(mWidth, mHeight, mpInputTex->getFormat(), 1, 1, nullptr, ResourceBindFlags::Shared | ResourceBindFlags::ShaderResource);\n   39  \n   40      // Define our usage flags and then map the textures to CUDA surfaces. Surface values of 0\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp:\n   61              // Create test buffer.\n   62              Buffer::SharedPtr pBuffer;\n   63:             if constexpr (type == Type::ByteAddressBuffer) pBuffer = Buffer::create(numElems * sizeof(uint32_t), ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n   64:             else if constexpr (type == Type::TypedBuffer) pBuffer = Buffer::createTyped<uint32_t>(numElems, ResourceBindFlags::UnorderedAccess);\n   65:             else if constexpr (type == Type::StructuredBuffer) pBuffer = Buffer::createStructured(ctx.getProgram(), \"buffer\", numElems, ResourceBindFlags::UnorderedAccess);\n   66              else assert(false);\n   67  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   92              {\n   93                  for (uint32_t i = 0; i < kNumElems; i++) testBuffer[i] = r();\n   94:                 auto pTestBuffer = Buffer::create(kNumElems * sizeof(uint32_t), useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, testBuffer.data());\n   95                  bool ret = pParamBlock->setBuffer(kRootBufferName, pTestBuffer);\n   96                  EXPECT(ret);\n   ..\n  117              {\n  118                  for (uint32_t i = 0; i < kNumElems; i++) globalTestBuffer[i] = r();\n  119:                 var[kGlobalRootBufferName] = Buffer::create(kNumElems * sizeof(uint32_t), useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, globalTestBuffer.data());\n  120              }\n  121  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   54              {\n   55                  for (uint32_t i = 0; i < kNumElems; i++) buf[i] = r();\n   56:                 data[\"buf\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, buf.data());\n   57              }\n   58              std::vector<uint32_t> rwBuf(kNumElems);\n   59              {\n   60                  for (uint32_t i = 0; i < kNumElems; i++) rwBuf[i] = r();\n   61:                 data[\"rwBuf\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, rwBuf.data());\n   62              }\n   63  \n   ..\n   70                      data[kRootBufferName],\n   71                      kNumElems,\n   72:                     useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource,\n   73                      Buffer::CpuAccess::None,\n   74                      rootBuf.data(),\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n   65              {\n   66                  for (uint32_t i = 0; i < kNumElems; i++) rawBuffer[i] = r();\n   67:                 var[\"rawBuffer\"] = Buffer::create(kNumElems * sizeof(uint32_t), ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, rawBuffer.data());\n   68              }\n   69  \n   ..\n   71              {\n   72                  for (uint32_t i = 0; i < kNumElems; i++) structBuffer[i] = { r() + 0.5f, r() };\n   73:                 var[\"structBuffer\"] = Buffer::createStructured(var[\"structBuffer\"], kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, structBuffer.data());\n   74              }\n   75  \n   ..\n   77              {\n   78                  for (uint32_t i = 0; i < kNumElems; i++) typedBufferUint[i] = r();\n   79:                 var[\"typedBufferUint\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, typedBufferUint.data());\n   80              }\n   81  \n   ..\n   83              {\n   84                  for (uint32_t i = 0; i < kNumElems; i++) typedBufferFloat4[i] = { r() * 0.25f, r() * 0.5f, r() * 0.75f, r() };\n   85:                 var[\"typedBufferFloat4\"] = Buffer::createTyped<float4>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, typedBufferFloat4.data());\n   86              }\n   87  \n   ..\n   90              {\n   91                  for (uint32_t i = 0; i < kNumElems; i++) testBuffer[i] = r();\n   92:                 auto pTestBuffer = Buffer::create(kNumElems * sizeof(uint32_t), useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, testBuffer.data());\n   93                  var[kRootBufferName] = pTestBuffer;\n   94  \n   ..\n  121              // Change the binding of other resources to test that the root buffer stays correctly bound.\n  122              for (uint32_t i = 0; i < kNumElems; i++) rawBuffer[i] = r();\n  123:             var[\"rawBuffer\"] = Buffer::create(kNumElems * sizeof(uint32_t), ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, rawBuffer.data());\n  124              for (uint32_t i = 0; i < kNumElems; i++) typedBufferFloat4[i] = { r() * 0.25f, r() * 0.5f, r() * 0.75f, r() };\n  125:             var[\"typedBufferFloat4\"] = Buffer::createTyped<float4>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, typedBufferFloat4.data());\n  126              var[\"CB\"][\"c0\"] = ++c0;\n  127  \n  ...\n  132              {\n  133                  for (uint32_t i = 0; i < kNumElems; i++) testBuffer[i] = r();\n  134:                 auto pTestBuffer = Buffer::create(kNumElems * sizeof(uint32_t), useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, testBuffer.data());\n  135                  var[kRootBufferName] = pTestBuffer;\n  136  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp:\n   53              for (auto& v : elems) v = ((uint64_t)r() << 32) | r();\n   54              auto var = ctx.vars().getRootVar();\n   55:             auto pBuf = Buffer::createStructured(var[\"data\"], kNumElems, ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, elems.data());\n   56              var[\"data\"] = pBuf;\n   57  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangMutatingTests.cpp:\n   37          ShaderVar var = ctx.vars().getRootVar();\n   38          uint4 v = { 11, 22, 33, 44 };\n   39:         var[\"buffer\"] = Buffer::createTyped<uint4>(1, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, &v);\n   40  \n   41          ctx.runProgram();\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp:\n   77          auto var = ctx.vars().getRootVar();\n   78          uint32_t zero = 0;\n   79:         auto pLaneCount = Buffer::createTyped<uint32_t>(1, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, &zero);\n   80          var[\"laneCount\"] = pLaneCount;\n   81  \n   ..\n   95          auto var = ctx.vars().getRootVar();\n   96          uint32_t zero = 0;\n   97:         auto pLaneCount = Buffer::createTyped<uint32_t>(1, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, &zero);\n   98          var[\"laneCount\"] = pLaneCount;\n   99  \n  100          std::vector<uint32_t> matchData = generateMatchData(kNumElems);\n  101          assert(matchData.size() == kNumElems);\n  102:         var[\"testData\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, matchData.data());\n  103  \n  104          ctx.runProgram(kNumElems, 1, 1);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/HashUtilsTests.cpp:\n   55      {\n   56          // Allocate results buffer (64k dwords).\n   57:         Buffer::SharedPtr pResultBuffer = Buffer::createTyped<uint32_t>(1 << 16, ResourceBindFlags::UnorderedAccess);\n   58          ctx.getRenderContext()->clearUAV(pResultBuffer->getUAV().get(), uint4(0));\n   59  \n   ..\n   98      {\n   99          // Allocate results buffer (2^27 dwords).\n  100:         Buffer::SharedPtr pResultBuffer = Buffer::createTyped<uint32_t>(1 << 27, ResourceBindFlags::UnorderedAccess);\n  101          ctx.getRenderContext()->clearUAV(pResultBuffer->getUAV().get(), uint4(0));\n  102  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/ParallelReductionTests.cpp:\n  167              // Allocate buffer for the result on the GPU.\n  168              DataType nullValue = {};\n  169:             Buffer::SharedPtr pResultBuffer = Buffer::create(16, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, &nullValue);\n  170  \n  171              // Perform reduction operation.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/PrefixSumTests.cpp:\n   61              // Allocate buffer for the total sum on the GPU.\n   62              uint32_t nullValue = 0;\n   63:             Buffer::SharedPtr pSumBuffer = Buffer::create(4, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, &nullValue);\n   64  \n   65              // Execute prefix sum on the GPU.\n\n136 matches across 34 files\n\n\nSearching 1123 files for \"setResourceSrvUavCommon\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  544  }\n  545  \n  546: bool ParameterBlock::setResourceSrvUavCommon(const BindLocation& bindLoc, const Resource::SharedPtr& pResource, const char* funcName) {\n  547      size_t flatIndex = getFlatIndex(bindLoc);\n  548  \n  ...\n  617      if (!bindLocation.isValid()) return false;\n  618  \n  619:     return setResourceSrvUavCommon(bindLocation, pBuf, \"setBuffer()\");\n  620  }\n  621  \n  ...\n  696  \n  697  bool ParameterBlock::setTexture(const BindLocation& bindLocation, const Texture::SharedPtr& pTexture) {\n  698:     return setResourceSrvUavCommon(bindLocation, pTexture, \"setTexture()\");\n  699  }\n  700  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  414      bool checkRootDescriptorResourceCompatibility(const Resource::SharedPtr& pResource, const std::string& funcName) const;\n  415  \n  416:     bool setResourceSrvUavCommon(const BindLocation& bindLoc, const Resource::SharedPtr& pResource, const char* funcName);\n  417      Resource::SharedPtr getResourceSrvUavCommon(const BindLocation& bindLoc, const char* funcName) const;\n  418  \n\n4 matches across 2 files\n\n\nSearching 1123 files for \"GPUUnitTestContext\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.cpp:\n   96  \n   97          CPUUnitTestContext cpuCtx;\n   98:         GPUUnitTestContext gpuCtx(pRenderContext);\n   99  \n  100          std::string extraMessage;\n  ...\n  182      ///////////////////////////////////////////////////////////////////////////\n  183  \n  184:     void GPUUnitTestContext::createProgram(const std::string& path,\n  185                                             const std::string& entry,\n  186                                             const Program::DefineList& programDefines,\n  ...\n  198      }\n  199  \n  200:     void GPUUnitTestContext::createVars() {\n  201          // Create shader variables.\n  202          ProgramReflection::SharedConstPtr pReflection = mpProgram->getReflector();\n  ...\n  210      }\n  211  \n  212:     void GPUUnitTestContext::allocateStructuredBuffer(const std::string& name, uint32_t nElements, const void* pInitData, size_t initDataSize) {\n  213          assert(mpVars);\n  214          mStructuredBuffers[name].pBuffer = Buffer::createStructured(mpProgram.get(), name, nElements);\n  ...\n  222      }\n  223  \n  224:     void GPUUnitTestContext::runProgram(const uint3& dimensions) {\n  225          assert(mpVars);\n  226          for (const auto& buffer : mStructuredBuffers) {\n  ...\n  236      }\n  237  \n  238:     void GPUUnitTestContext::unmapBuffer(const char* bufferName) {\n  239          assert(mStructuredBuffers.find(bufferName) != mStructuredBuffers.end());\n  240          \n  ...\n  247      }\n  248  \n  249:     const void* GPUUnitTestContext::mapRawRead(const char* bufferName) {\n  250          assert(mStructuredBuffers.find(bufferName) != mStructuredBuffers.end());\n  251  \n\n/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.h:\n   53  \n   54      class CPUUnitTestContext;\n   55:     class GPUUnitTestContext;\n   56  \n   57      struct TooManyFailedTestsException : public std::exception { };\n   ..\n   69  \n   70      using CPUTestFunc = std::function<void(CPUUnitTestContext& ctx)>;\n   71:     using GPUTestFunc = std::function<void(GPUUnitTestContext& ctx)>;\n   72  \n   73      dlldecl void registerCPUTest(const std::string& filename, const std::string& name, const std::string& skipMessage, CPUTestFunc func);\n   ..\n  100      };\n  101  \n  102:     class dlldecl GPUUnitTestContext : public UnitTestContext\n  103      {\n  104      public:\n  105:         GPUUnitTestContext(RenderContext* pContext) : mpContext(pContext) { }\n  106  \n  107          /** createProgram creates a compute program from the source code at the\n  ...\n  214          StreamSink does the former, and if it has passed, it does the latter.)\n  215          In the event of a test failure, passes along the failure message to the\n  216:         provided GPUUnitTestContext's |reportFailure| method.\n  217      */\n  218      class StreamSink\n  ...\n  391  */\n  392  #define GPU_TEST(Name, ...)                                                     \\\n  393:     static void GPUUnitTest##Name(GPUUnitTestContext& ctx);                     \\\n  394      struct GPUUnitTestRegisterer##Name {                                        \\\n  395          GPUUnitTestRegisterer##Name()                                           \\\n  ...\n  399          }                                                                       \\\n  400      } RegisterGPUTest##Name;                                                    \\\n  401:     static void GPUUnitTest##Name(GPUUnitTestContext& ctx) /* over to the user for the braces */\n  402  \n  403  /** Macro definitions for the GPU unit testing framework. Note that they\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp:\n   47      The test binds the buffer to a compute program which reads back the data.\n   48  */\n   49: void testBufferReadback(GPUUnitTestContext& ctx, Buffer::CpuAccess cpuAccess) {\n   50      LOG_DBG(\"Create buffer ...\");\n   51      auto pBuf = createTestBuffer(cpuAccess);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp:\n   42  \n   43          template <Type type>\n   44:         void testBuffer(GPUUnitTestContext& ctx, uint32_t numElems, uint32_t index = 0, uint32_t count = 0)\n   45          {\n   46              numElems = div_round_up(numElems, 256u) * 256u; // Make sure we run full thread groups.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   44          auto r = [&]() -> uint32_t { return dist(rng); };\n   45  \n   46:         void testRootBuffer(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   47          {\n   48              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   40          auto r = [&]() -> uint32_t { return dist(rng); };\n   41  \n   42:         void testRootBufferInStruct(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   43          {\n   44              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n   49          };\n   50  \n   51:         void testRootBuffer(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   52          {\n   53              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Sampling/SampleGeneratorTests.cpp:\n   72          }\n   73  \n   74:         void testSampleGenerator(GPUUnitTestContext& ctx, uint32_t type, const double corrThreshold, bool testInstances)\n   75          {\n   76              // Create sample generator.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp:\n   43          std::mt19937 r;\n   44  \n   45:         void test(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   46          {\n   47              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp:\n   34          const uint32_t kNumElems = 256;\n   35  \n   36:         void test(GPUUnitTestContext& ctx, const std::string& shaderModel)\n   37          {\n   38              ctx.createProgram(\"Tests/Slang/ShaderModel.cs.slang\", \"main\", Program::DefineList(), Shader::CompilerFlags::None, shaderModel);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp:\n   43      namespace\n   44      {\n   45:         void testEnum(GPUUnitTestContext& ctx, const std::string& shaderModel)\n   46          {\n   47              ctx.createProgram(\"Tests/Slang/SlangTests.cs.slang\", \"testEnum\", Program::DefineList(), Shader::CompilerFlags::None, shaderModel);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/TraceRayFlags.cpp:\n   51  }\n   52  #endif\n   53: void testRayFlags(GPUUnitTestContext& ctx, uint32_t expected, const Program::DefineList& defines, const std::string& shaderModel) {\n   54      ctx.createProgram(\"Tests/Slang/TraceRayFlags.cs.slang\", \"testRayFlags\", defines, Shader::CompilerFlags::None, shaderModel);\n   55      ctx.allocateStructuredBuffer(\"result\", 1);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/BitonicSortTests.cpp:\n   45          }\n   46  \n   47:         void testGpuSort(GPUUnitTestContext& ctx, BitonicSort* pSort, const uint32_t n, const uint32_t chunkSize)\n   48          {\n   49              // Create a buffer of random data to use as test data.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/MathHelpersTests.cpp:\n   43          };\n   44  \n   45:         void runBBoxTestComputeShader(GPUUnitTestContext& ctx, const BBoxTestCase* testCases, int nTests, const char* entrypoint)\n   46          {\n   47              Buffer::SharedPtr pOriginBuffer = Buffer::createTyped<float3>(nTests);\n   ..\n   67          }\n   68  \n   69:         void testKnownBBoxes(GPUUnitTestContext& ctx, const char* entrypoint)\n   70          {\n   71              // Generate test data...\n   ..\n  112          }\n  113  \n  114:         void testRandomBBoxes(GPUUnitTestContext& ctx, const char* entrypoint)\n  115          {\n  116              // Generate test data.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/ParallelReductionTests.cpp:\n   87  \n   88          template<typename DataType, typename RefType>\n   89:         void testReduction(GPUUnitTestContext& ctx, const ComputeParallelReduction::SharedPtr& pReduction, ResourceFormat format, uint32_t width, uint32_t height)\n   90          {\n   91              // Create random test data.\n   ..\n  208          }\n  209  \n  210:         void testReduction(GPUUnitTestContext& ctx, const ComputeParallelReduction::SharedPtr& pReduction, ResourceFormat format, uint32_t width, uint32_t height)\n  211          {\n  212              const FormatType type = getFormatType(format);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/PrefixSumTests.cpp:\n   47          }\n   48  \n   49:         void testPrefixSum(GPUUnitTestContext& ctx, const PrefixSum::SharedPtr& pPrefixSum, uint32_t numElems)\n   50          {\n   51              // Create a buffer of random data to use as test data.\n\n31 matches across 16 files\n\n\nSearching 1123 files for \"Failed to link program\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.cpp:\n  897              if (pVersion == nullptr)\n  898              {\n  899:                 std::string error = \"Failed to link program:\\n\" + getProgramDescString() + \"\\n\\n\" + log;\n  900                  logError(error, Logger::MsgBox::RetryAbort);\n  901  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVersion.cpp:\n  203                  // Failure\n  204  \n  205:                 std::string error = \"Failed to link program:\\n\" + getName() + \"\\n\\n\" + log;\n  206                  logError(error, Logger::MsgBox::RetryAbort);\n  207  \n\n2 matches across 2 files\n\n\nSearching 1123 files for \"Failed to link program\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.cpp:\n  897              if (pVersion == nullptr)\n  898              {\n  899:                 std::string error = \"Failed to link program:\\n\" + getProgramDescString() + \"\\n\\n\" + log;\n  900                  logError(error, Logger::MsgBox::RetryAbort);\n  901:                 throw std::runtime_error(\"Failed to link program\");\n  902  \n  903                  // Continue loop to keep trying...\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVersion.cpp:\n  203                  // Failure\n  204  \n  205:                 std::string error = \"Failed to link program:\\n\" + getName() + \"\\n\\n\" + log;\n  206                  logError(error, Logger::MsgBox::RetryAbort);\n  207  \n\n3 matches across 2 files\n\n\nSearching 1123 files for \"5_1\" (case sensitive)\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/gtc/packing.hpp:\n  567  \t///\n  568  \t/// @see gtc_packing\n  569: \t/// @see vec3 unpackUnorm1x5_1x6_1x5(uint16 p)\n  570: \tGLM_FUNC_DECL uint16 packUnorm1x5_1x6_1x5(vec3 const& v);\n  571  \n  572  \t/// Convert a packed integer to a normalized floating-point vector.\n  573  \t///\n  574  \t/// @see gtc_packing\n  575: \t/// @see uint16 packUnorm1x5_1x6_1x5(vec3 const& v)\n  576: \tGLM_FUNC_DECL vec3 unpackUnorm1x5_1x6_1x5(uint16 p);\n  577  \n  578  \t/// Convert each component of the normalized floating-point vector into unsigned integer values.\n  579  \t///\n  580  \t/// @see gtc_packing\n  581: \t/// @see vec4 unpackUnorm3x5_1x1(uint16 p)\n  582: \tGLM_FUNC_DECL uint16 packUnorm3x5_1x1(vec4 const& v);\n  583  \n  584  \t/// Convert a packed integer to a normalized floating-point vector.\n  585  \t///\n  586  \t/// @see gtc_packing\n  587: \t/// @see uint16 packUnorm3x5_1x1(vec4 const& v)\n  588: \tGLM_FUNC_DECL vec4 unpackUnorm3x5_1x1(uint16 p);\n  589  \n  590  \t/// Convert each component of the normalized floating-point vector into unsigned integer values.\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/gtc/packing.inl:\n  741  \t}\n  742  \n  743: \tGLM_FUNC_QUALIFIER uint16 packUnorm1x5_1x6_1x5(vec3 const& v)\n  744  \t{\n  745  \t\tu32vec3 const Unpack(round(clamp(v, 0.0f, 1.0f) * vec3(31.f, 63.f, 31.f)));\n  ...\n  751  \t}\n  752  \n  753: \tGLM_FUNC_QUALIFIER vec3 unpackUnorm1x5_1x6_1x5(uint16 v)\n  754  \t{\n  755  \t\tvec3 const ScaleFactor(1.f / 31.f, 1.f / 63.f, 1.f / 31.f);\n  ...\n  759  \t}\n  760  \n  761: \tGLM_FUNC_QUALIFIER uint16 packUnorm3x5_1x1(vec4 const& v)\n  762  \t{\n  763  \t\tu32vec4 const Unpack(round(clamp(v, 0.0f, 1.0f) * vec4(31.f, 31.f, 31.f, 1.f)));\n  ...\n  770  \t}\n  771  \n  772: \tGLM_FUNC_QUALIFIER vec4 unpackUnorm3x5_1x1(uint16 v)\n  773  \t{\n  774  \t\tvec4 const ScaleFactor(1.f / 31.f, 1.f / 31.f, 1.f / 31.f, 1.f);\n\n/home/max/dev/Falcor/src/Externals/GLM/readme.md:\n  223  - Fixed GCC 4.8 with C++11 compilation option #550\n  224  - Fixed Visual Studio aligned type W4 warning #548\n  225: - Fixed packing/unpacking function fixed for 5_6_5 and 5_5_5_1 #552\n  226  \n  227  ---\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.cpp:\n   36      const std::string kSupportedShaderModels[] = { \"400\", \"410\", \"420\", \"430\", \"440\", \"450\" };\n   37  #elif defined FALCOR_D3D12\n   38:     const std::string kSupportedShaderModels[] = { \"4_0\", \"4_1\", \"5_0\", \"5_1\", \"6_0\", \"6_1\", \"6_2\", \"6_3\" };\n   39  #endif\n   40  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.h:\n   89  \n   90              /** Set the shader model string. This depends on the API you are using.\n   91:                 For DirectX it should be `4_0`, `4_1`, `5_0`, `5_1`, `6_0`, `6_1`, `6_2`, or `6_3`. The default is `6_0`. Shader model `6.x` will use dxcompiler, previous shader models use fxc.\n   92                  For Vulkan, it should be `400`, `410`, `420`, `430`, `440` or `450`. The default is `450`\n   93              */\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   53              Program::Desc reflDesc;\n   54              reflDesc.addShaderLibrary(kReflectionProgram).csEntry(\"main\");\n   55:             reflDesc.setShaderModel(\"5_1\"); // Note: Using 5.1 for the reflection, and the specified higher shading model for the actual test to make sure the reflection isn't affected.\n   56              auto pReflectionProgram = ComputePass::create(reflDesc, defines);\n   57              EXPECT(pReflectionProgram != nullptr);\n   ..\n  146      }\n  147  \n  148:     GPU_TEST(RootBufferParamBlockSRV_5_1) { testRootBuffer(ctx, \"5_1\", false); }\n  149:     GPU_TEST(RootBufferParamBlockUAV_5_1) { testRootBuffer(ctx, \"5_1\", true); }\n  150  \n  151      GPU_TEST(RootBufferParamBlockSRV_6_0) { testRootBuffer(ctx, \"6_0\", false); }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   97      }\n   98  \n   99:     GPU_TEST(RootBufferStructSRV_5_1) { testRootBufferInStruct(ctx, \"5_1\", false); }\n  100:     GPU_TEST(RootBufferStructUAV_5_1) { testRootBufferInStruct(ctx, \"5_1\", true); }\n  101  \n  102      GPU_TEST(RootBufferStructSRV_6_0) { testRootBufferInStruct(ctx, \"6_0\", false); }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n  144      }\n  145  \n  146:     GPU_TEST(RootBufferSRV_5_1) { testRootBuffer(ctx, \"5_1\", false); }\n  147:     GPU_TEST(RootBufferUAV_5_1) { testRootBuffer(ctx, \"5_1\", true); }\n  148  \n  149      GPU_TEST(RootBufferSRV_6_0) { testRootBuffer(ctx, \"6_0\", false); }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp:\n   50  \n   51      GPU_TEST(ShaderModel5_0) { test(ctx, \"5_0\"); }\n   52:     GPU_TEST(ShaderModel5_1) { test(ctx, \"5_1\"); }\n   53      GPU_TEST(ShaderModel6_0) { test(ctx, \"6_0\"); }\n   54      GPU_TEST(ShaderModel6_1) { test(ctx, \"6_1\"); }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp:\n   86      {\n   87          testEnum(ctx, \"\");      // Use default shader model for the unit test system\n   88:         testEnum(ctx, \"5_1\");   // Test SM 5.1 and higher explicitly\n   89          testEnum(ctx, \"6_0\");\n   90          testEnum(ctx, \"6_3\");\n   ..\n  174          // Test the default shader model, followed by specific models.\n  175          test(\"\");\n  176:         test(\"5_1\");\n  177          test(\"6_0\");\n  178          test(\"6_1\");\n\n32 matches across 10 files\n\n\nSearching 1123 files for \"5_1\" (case sensitive)\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/gtc/packing.hpp:\n  567  \t///\n  568  \t/// @see gtc_packing\n  569: \t/// @see vec3 unpackUnorm1x5_1x6_1x5(uint16 p)\n  570: \tGLM_FUNC_DECL uint16 packUnorm1x5_1x6_1x5(vec3 const& v);\n  571  \n  572  \t/// Convert a packed integer to a normalized floating-point vector.\n  573  \t///\n  574  \t/// @see gtc_packing\n  575: \t/// @see uint16 packUnorm1x5_1x6_1x5(vec3 const& v)\n  576: \tGLM_FUNC_DECL vec3 unpackUnorm1x5_1x6_1x5(uint16 p);\n  577  \n  578  \t/// Convert each component of the normalized floating-point vector into unsigned integer values.\n  579  \t///\n  580  \t/// @see gtc_packing\n  581: \t/// @see vec4 unpackUnorm3x5_1x1(uint16 p)\n  582: \tGLM_FUNC_DECL uint16 packUnorm3x5_1x1(vec4 const& v);\n  583  \n  584  \t/// Convert a packed integer to a normalized floating-point vector.\n  585  \t///\n  586  \t/// @see gtc_packing\n  587: \t/// @see uint16 packUnorm3x5_1x1(vec4 const& v)\n  588: \tGLM_FUNC_DECL vec4 unpackUnorm3x5_1x1(uint16 p);\n  589  \n  590  \t/// Convert each component of the normalized floating-point vector into unsigned integer values.\n\n/home/max/dev/Falcor/src/Externals/GLM/glm/gtc/packing.inl:\n  741  \t}\n  742  \n  743: \tGLM_FUNC_QUALIFIER uint16 packUnorm1x5_1x6_1x5(vec3 const& v)\n  744  \t{\n  745  \t\tu32vec3 const Unpack(round(clamp(v, 0.0f, 1.0f) * vec3(31.f, 63.f, 31.f)));\n  ...\n  751  \t}\n  752  \n  753: \tGLM_FUNC_QUALIFIER vec3 unpackUnorm1x5_1x6_1x5(uint16 v)\n  754  \t{\n  755  \t\tvec3 const ScaleFactor(1.f / 31.f, 1.f / 63.f, 1.f / 31.f);\n  ...\n  759  \t}\n  760  \n  761: \tGLM_FUNC_QUALIFIER uint16 packUnorm3x5_1x1(vec4 const& v)\n  762  \t{\n  763  \t\tu32vec4 const Unpack(round(clamp(v, 0.0f, 1.0f) * vec4(31.f, 31.f, 31.f, 1.f)));\n  ...\n  770  \t}\n  771  \n  772: \tGLM_FUNC_QUALIFIER vec4 unpackUnorm3x5_1x1(uint16 v)\n  773  \t{\n  774  \t\tvec4 const ScaleFactor(1.f / 31.f, 1.f / 31.f, 1.f / 31.f, 1.f);\n\n/home/max/dev/Falcor/src/Externals/GLM/readme.md:\n  223  - Fixed GCC 4.8 with C++11 compilation option #550\n  224  - Fixed Visual Studio aligned type W4 warning #548\n  225: - Fixed packing/unpacking function fixed for 5_6_5 and 5_5_5_1 #552\n  226  \n  227  ---\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.cpp:\n   36      const std::string kSupportedShaderModels[] = { \"400\", \"410\", \"420\", \"430\", \"440\", \"450\" };\n   37  #elif defined FALCOR_D3D12\n   38:     const std::string kSupportedShaderModels[] = { \"4_0\", \"4_1\", \"5_0\", \"5_1\", \"6_0\", \"6_1\", \"6_2\", \"6_3\" };\n   39  #endif\n   40  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/Program.h:\n   89  \n   90              /** Set the shader model string. This depends on the API you are using.\n   91:                 For DirectX it should be `4_0`, `4_1`, `5_0`, `5_1`, `6_0`, `6_1`, `6_2`, or `6_3`. The default is `6_0`. Shader model `6.x` will use dxcompiler, previous shader models use fxc.\n   92                  For Vulkan, it should be `400`, `410`, `420`, `430`, `440` or `450`. The default is `450`\n   93              */\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   53              Program::Desc reflDesc;\n   54              reflDesc.addShaderLibrary(kReflectionProgram).csEntry(\"main\");\n   55:             reflDesc.setShaderModel(\"5_1\"); // Note: Using 5.1 for the reflection, and the specified higher shading model for the actual test to make sure the reflection isn't affected.\n   56              auto pReflectionProgram = ComputePass::create(reflDesc, defines);\n   57              EXPECT(pReflectionProgram != nullptr);\n   ..\n  146      }\n  147  \n  148:     GPU_TEST(RootBufferParamBlockSRV_5_1) { testRootBuffer(ctx, \"5_1\", false); }\n  149:     GPU_TEST(RootBufferParamBlockUAV_5_1) { testRootBuffer(ctx, \"5_1\", true); }\n  150  \n  151      GPU_TEST(RootBufferParamBlockSRV_6_0) { testRootBuffer(ctx, \"6_0\", false); }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   97      }\n   98  \n   99:     GPU_TEST(RootBufferStructSRV_5_1) { testRootBufferInStruct(ctx, \"5_1\", false); }\n  100:     GPU_TEST(RootBufferStructUAV_5_1) { testRootBufferInStruct(ctx, \"5_1\", true); }\n  101  \n  102      GPU_TEST(RootBufferStructSRV_6_0) { testRootBufferInStruct(ctx, \"6_0\", false); }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n  144      }\n  145  \n  146:     GPU_TEST(RootBufferSRV_5_1) { testRootBuffer(ctx, \"5_1\", false); }\n  147:     GPU_TEST(RootBufferUAV_5_1) { testRootBuffer(ctx, \"5_1\", true); }\n  148  \n  149      GPU_TEST(RootBufferSRV_6_0) { testRootBuffer(ctx, \"6_0\", false); }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp:\n   50  \n   51      GPU_TEST(ShaderModel5_0) { test(ctx, \"5_0\"); }\n   52:     GPU_TEST(ShaderModel5_1) { test(ctx, \"5_1\"); }\n   53      GPU_TEST(ShaderModel6_0) { test(ctx, \"6_0\"); }\n   54      GPU_TEST(ShaderModel6_1) { test(ctx, \"6_1\"); }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp:\n   86      {\n   87          testEnum(ctx, \"\");      // Use default shader model for the unit test system\n   88:         testEnum(ctx, \"5_1\");   // Test SM 5.1 and higher explicitly\n   89          testEnum(ctx, \"6_0\");\n   90          testEnum(ctx, \"6_3\");\n   ..\n  174          // Test the default shader model, followed by specific models.\n  175          test(\"\");\n  176:         test(\"5_1\");\n  177          test(\"6_0\");\n  178          test(\"6_1\");\n\n32 matches across 10 files\n\n\nSearching 1124 files for \"VkBufferUsageFlagBits\" (case sensitive)\n\n0 matches\n\nSearching 1124 files for \"VkBufferCreateInfo\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKBuffer.cpp:\n   73  \n   74  Buffer::ApiHandle createBuffer(size_t size, Buffer::BindFlags bindFlags, GpuMemoryHeap::Type memType) {\n   75:     VkBufferCreateInfo bufferInfo = {};\n   76      bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;\n   77      bufferInfo.flags = 0;\n\n1 match in 1 file\n\n\nSearching 1124 files for \"setBit\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKBuffer.cpp:\n   57      // Assume every buffer can be read from and written into\n   58      VkBufferUsageFlags flags = VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n   59:     auto setBit = [&flags, &bindFlags](Buffer::BindFlags f, VkBufferUsageFlags vkBit) {if (is_set(bindFlags, f)) flags |= vkBit; };\n   60:     setBit(Buffer::BindFlags::Vertex,           VK_BUFFER_USAGE_VERTEX_BUFFER_BIT);\n   61:     setBit(Buffer::BindFlags::Index,            VK_BUFFER_USAGE_INDEX_BUFFER_BIT);\n   62:     //setBit(Buffer::BindFlags::UnorderedAccess,  VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT);\n   63:     setBit(Buffer::BindFlags::UnorderedAccess,  VK_BUFFER_USAGE_STORAGE_BUFFER_BIT);\n   64:     setBit(Buffer::BindFlags::ShaderResource,   VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT);\n   65:     setBit(Buffer::BindFlags::IndirectArg,      VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT);\n   66:     setBit(Buffer::BindFlags::Constant,         VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT);\n   67  \n   68      return flags;\n\n/home/max/dev/Falcor/src/Falcor/Utils/Video/VideoEncoderUI.h:\n   61          VideoEncoderUI& setCodec(VideoEncoder::Codec c) { mCodec = c; return *this; }\n   62          VideoEncoderUI& setFPS(uint32_t fps) { mFPS = fps; return *this; }\n   63:         VideoEncoderUI& setBitrate(float bitrate) { mBitrate = bitrate; return *this; }\n   64          VideoEncoderUI& setGopSize(uint32_t gopSize) { mGopSize = gopSize; return *this; }\n   65  \n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/VideoCapture.cpp:\n  154  \n  155          auto getBitrate = [](VideoCapture* pVC) {return pVC->mpEncoderUI->getBitrate(); };\n  156:         auto setBitrate = [](VideoCapture* pVC, float bitrate) {pVC->mpEncoderUI->setBitrate(bitrate); return pVC; };\n  157:         vc.property(kBitrate.c_str(), getBitrate, setBitrate);\n  158  \n  159          auto getGopSize = [](VideoCapture* pVC) {return pVC->mpEncoderUI->getGopSize(); };\n\n12 matches across 3 files\n\n\nSearching 1124 files for \"SrvHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  213      using RtvHandle = std::shared_ptr<DescriptorSet>;\n  214      using DsvHandle = std::shared_ptr<DescriptorSet>;\n  215:     using SrvHandle = std::shared_ptr<DescriptorSet>;\n  216      using SamplerHandle = std::shared_ptr<DescriptorSet>;\n  217      using UavHandle = std::shared_ptr<DescriptorSet>;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  107  };\n  108  \n  109: class dlldecl ShaderResourceView : public ResourceView<SrvHandle> {\n  110   public:\n  111      using SharedPtr = std::shared_ptr<ShaderResourceView>;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   94  using RtvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   95  using DsvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   96: using SrvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   97  using UavHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   98  using CbvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n\n3 matches across 3 files\n\n\nSearching 1124 files for \"getNullView\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Fbo.cpp:\n  112          else\n  113          {\n  114:             return RenderTargetView::getNullView();\n  115          }\n  116      }\n  ...\n  124          else\n  125          {\n  126:             return DepthStencilView::getNullView();\n  127          }\n  128      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  193          // We are setting the entire RTV array to make sure everything that was previously bound is detached\n  194          uint32_t colorTargets = Fbo::getMaxColorTargetCount();\n  195:         auto pNullRtv = RenderTargetView::getNullView();\n  196          std::vector<HeapCpuHandle> pRTV(colorTargets, pNullRtv->getApiHandle()->getCpuHandle(0));\n  197:         HeapCpuHandle pDSV = DepthStencilView::getNullView()->getApiHandle()->getCpuHandle(0);\n  198  \n  199          if (pFbo)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp:\n  283      ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize)\n  284      {\n  285:         if (!pTexture && getNullView()) return getNullView();\n  286  \n  287          D3D12_SHADER_RESOURCE_VIEW_DESC desc;\n  ...\n  306      ShaderResourceView::SharedPtr ShaderResourceView::create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount)\n  307      {\n  308:         if (!pBuffer && getNullView()) return getNullView();\n  309  \n  310          D3D12_SHADER_RESOURCE_VIEW_DESC desc;\n  ...\n  329      DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  330      {\n  331:         if (!pTexture && getNullView()) return getNullView();\n  332  \n  333          D3D12_DEPTH_STENCIL_VIEW_DESC desc;\n  ...\n  364      UnorderedAccessView::SharedPtr UnorderedAccessView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  365      {\n  366:         if (!pTexture && getNullView()) return getNullView();\n  367  \n  368          D3D12_UNORDERED_ACCESS_VIEW_DESC desc;\n  ...\n  386      UnorderedAccessView::SharedPtr UnorderedAccessView::create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount)\n  387      {\n  388:         if (!pBuffer && getNullView()) return getNullView();\n  389  \n  390          D3D12_UNORDERED_ACCESS_VIEW_DESC desc;\n  ...\n  416      RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize)\n  417      {\n  418:         if (!pTexture && getNullView()) return getNullView();\n  419  \n  420          D3D12_RENDER_TARGET_VIEW_DESC desc;\n  ...\n  443      ConstantBufferView::SharedPtr ConstantBufferView::create(ConstBufferSharedPtrRef pBuffer)\n  444      {\n  445:         if (!pBuffer && getNullView()) return getNullView();\n  446  \n  447          D3D12_CONSTANT_BUFFER_VIEW_DESC desc;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.cpp:\n   60  }\n   61  \n   62: ShaderResourceView::SharedPtr  ShaderResourceView::getNullView()  { return gNullViews.srv; }\n   63: DepthStencilView::SharedPtr    DepthStencilView::getNullView()    { return gNullViews.dsv; }\n   64: UnorderedAccessView::SharedPtr UnorderedAccessView::getNullView() { return gNullViews.uav; }\n   65: RenderTargetView::SharedPtr    RenderTargetView::getNullView()    { return gNullViews.rtv; }\n   66: ConstantBufferView::SharedPtr  ConstantBufferView::getNullView()  { return gNullViews.cbv; }\n   67  \n   68  SCRIPT_BINDING(ResourceView) {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  114      static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize);\n  115      static SharedPtr create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount);\n  116:     static SharedPtr getNullView();\n  117  \n  118      // This is currently used by RtScene to create an SRV for the TLAS, since the create() functions above assume texture or buffer types.\n  ...\n  131  \n  132      static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  133:     static SharedPtr getNullView();\n  134  \n  135   private:\n  ...\n  145      static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  146      static SharedPtr create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount);\n  147:     static SharedPtr getNullView();\n  148  \n  149   private:\n  ...\n  160      using SharedConstPtr = std::shared_ptr<const RenderTargetView>;\n  161      static SharedPtr create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize);\n  162:     static SharedPtr getNullView();\n  163      ~RenderTargetView();\n  164  \n  ...\n  173      using SharedConstPtr = std::shared_ptr<const ConstantBufferView>;\n  174      static SharedPtr create(ConstBufferSharedPtrRef pBuffer);\n  175:     static SharedPtr getNullView();\n  176  \n  177   private:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp:\n  119              return rt.pTexture->getRTV(rt.mipLevel, rt.firstArraySlice, rt.arraySize);\n  120          } else {\n  121:             return RenderTargetView::getNullView();\n  122          }\n  123      }\n  ...\n  127              return mDepthStencil.pTexture->getDSV(mDepthStencil.mipLevel, mDepthStencil.firstArraySlice, mDepthStencil.arraySize);\n  128          } else {\n  129:             return DepthStencilView::getNullView();\n  130          }\n  131      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  149  \n  150  ShaderResourceView::SharedPtr ShaderResourceView::create(ConstTextureSharedPtrRef pTexture, uint32_t mostDetailedMip, uint32_t mipCount, uint32_t firstArraySlice, uint32_t arraySize) {\n  151:     if (!pTexture && getNullView()) {\n  152:         LOG_WARN(\"getNullView\");\n  153:         return getNullView();\n  154      }\n  155  \n  ...\n  160  \n  161  ShaderResourceView::SharedPtr ShaderResourceView::create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount) {\n  162:     if (!pBuffer && getNullView()) {\n  163:         LOG_WARN(\"getNullView\");\n  164:         return getNullView();\n  165      }\n  166  \n  167      if (pBuffer->getApiHandle().getType() == VkResourceType::Image) {\n  168          logWarning(\"Cannot create DepthStencilView from a texture!\");\n  169:         return getNullView();\n  170      }\n  171      \n  ...\n  181  DepthStencilView::SharedPtr DepthStencilView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) {\n  182      // const Resource* pResource = pTexture.get();\n  183:     if (!pTexture && getNullView()) {\n  184:         LOG_WARN(\"getNullView\");\n  185:         return getNullView();\n  186      }\n  187  \n  188      if (pTexture->getApiHandle().getType() == VkResourceType::Buffer) {\n  189          logWarning(\"Cannot create DepthStencilView from a buffer!\");\n  190:         return getNullView();\n  191      }\n  192  \n  ...\n  197  UnorderedAccessView::SharedPtr UnorderedAccessView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) {\n  198      LOG_DBG(\"UnorderedAccessView::create texture\");\n  199:     if (!pTexture && getNullView()) {\n  200:         LOG_WARN(\"getNullView\");\n  201:         return getNullView();\n  202      }\n  203  \n  204      if (pTexture->getApiHandle().getType() == VkResourceType::Buffer) {\n  205          logWarning(\"Cannot create UnorderedAccessView from a buffer!\");\n  206:         return getNullView();;\n  207      }\n  208  \n  ...\n  223  UnorderedAccessView::SharedPtr UnorderedAccessView::create(ConstBufferSharedPtrRef pBuffer, uint32_t firstElement, uint32_t elementCount) {\n  224      LOG_DBG(\"UnorderedAccessView::create buffer\");\n  225:     if (!pBuffer && getNullView()) {\n  226:         LOG_WARN(\"getNullView\");\n  227:         return getNullView();\n  228      }\n  229  \n  230      if (pBuffer->getApiHandle().getType() == VkResourceType::Image) {\n  231          logWarning(\"Cannot create UnorderedAccessView from a texture!\");\n  232:         return getNullView();\n  233      }\n  234  \n  ...\n  266  \n  267  RenderTargetView::SharedPtr RenderTargetView::create(ConstTextureSharedPtrRef pTexture, uint32_t mipLevel, uint32_t firstArraySlice, uint32_t arraySize) {\n  268:     if (!pTexture && getNullView()) return getNullView();\n  269  \n  270      // Check type\n  271      if (pTexture->getApiHandle().getType() == VkResourceType::Buffer) {\n  272          logWarning(\"Cannot create RenderTargetView from a buffer!\");\n  273:         return getNullView();\n  274      }\n  275  \n  ...\n  280  \n  281  ConstantBufferView::SharedPtr ConstantBufferView::create(ConstBufferSharedPtrRef pBuffer) {\n  282:     if (!pBuffer && getNullView()) return getNullView();\n  283  \n  284      //DescriptorSet::Layout layout;\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  550          LOG_DBG(\"uav\");\n  551          if(pResource) { LOG_DBG(\"pResource present. getting pUAV\"); }\n  552:         auto pUAV = pResource ? pResource->getUAV() : UnorderedAccessView::getNullView();\n  553          \n  554          if (!checkDescriptorSrvUavCommon(bindLoc, pUAV, funcName)) {\n  ...\n  564          LOG_DBG(\"srv\");\n  565          if(pResource) { LOG_DBG(\"pResource present. getting pSRV\"); }\n  566:         auto pSRV = pResource ? pResource->getSRV() : ShaderResourceView::getNullView();\n  567          \n  568          if (!checkDescriptorSrvUavCommon(bindLoc, pSRV, funcName)) {\n  ...\n  729      auto& assignedSRV = mSRVs[flatIndex];\n  730  \n  731:     const ShaderResourceView::SharedPtr pView = pSrv ? pSrv : ShaderResourceView::getNullView();\n  732      if (assignedSRV.pView == pView) return true;\n  733  \n  ...\n  745      auto& assignedUAV = mUAVs[flatIndex];\n  746  \n  747:     UnorderedAccessView::SharedPtr pView = pUav ? pUav : UnorderedAccessView::getNullView();\n  748  \n  749      if (assignedUAV.pView == pView) return true;\n  ...\n 1213                              //\n 1214                              ParameterBlock* pCB = mCBs[flatIndex].get();\n 1215:                             ConstantBufferView::SharedPtr pView = pCB ? pCB->getCbv() : ConstantBufferView::getNullView();\n 1216                              pDescSet->setCbv(destRangeIndex, descriptorIndex, pView.get());\n 1217                          }\n ....\n 1234                              if(!pView) {\n 1235                                  LOG_WARN(\"No pView\");\n 1236:                                 pView = ShaderResourceView::getNullView();\n 1237                              }\n 1238                              if(!pView.get()) {\n ....\n 1248                          {\n 1249                              auto pView = mUAVs[flatIndex].pView;\n 1250:                             if(!pView) pView = UnorderedAccessView::getNullView();\n 1251                              pDescSet->setUav(destRangeIndex, descriptorIndex, pView.get());\n 1252                          }\n\n61 matches across 8 files\n\n\nSearching 1124 files for \"UavHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ComputeContext.cpp:\n  119      {\n  120          pContext->resourceBarrier(pUav->getResource(), Resource::State::UnorderedAccess);\n  121:         UavHandle uav = pUav->getApiHandle();\n  122          if (typeid(ClearType) == typeid(float4))\n  123          {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  215      using SrvHandle = std::shared_ptr<DescriptorSet>;\n  216      using SamplerHandle = std::shared_ptr<DescriptorSet>;\n  217:     using UavHandle = std::shared_ptr<DescriptorSet>;\n  218      using CbvHandle = std::shared_ptr<DescriptorSet>;\n  219      using FboHandle = void*;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.h:\n  138  };\n  139  \n  140: class dlldecl UnorderedAccessView : public ResourceView<UavHandle> {\n  141   public:\n  142      using SharedPtr = std::shared_ptr<UnorderedAccessView>;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   95  using DsvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   96  using SrvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   97: using UavHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   98  using CbvHandle = VkResource<VkImageView, VkBufferView>::SharedPtr;\n   99  using FboHandle = VkFbo::SharedPtr;\n\n4 matches across 4 files\n\n\nSearching 1124 files for \"loaded successfully\" (case sensitive)\n\n0 matches\n\nSearching 1124 files for \"loaded succesfully\" (case sensitive)\n\n0 matches\n\nSearching 1124 files for \"BindFlags\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.cpp:\n   40      const std::string& varName,\n   41      uint32_t elementCount,\n   42:     ResourceBindFlags bindFlags,\n   43      Buffer::CpuAccess cpuAccess,\n   44      const void* pInitData,\n   ..\n   59  void* mapBufferApi(const Buffer::ApiHandle& apiHandle, size_t size);\n   60  \n   61: Buffer::Buffer(size_t size, BindFlags bindFlags, CpuAccess cpuAccess)\n   62      : Resource(Type::Buffer, bindFlags, size)\n   63      , mCpuAccess(cpuAccess) {}\n   64  \n   65: Buffer::SharedPtr Buffer::create(size_t size, BindFlags bindFlags, CpuAccess cpuAccess, const void* pInitData) {\n   66      Buffer::SharedPtr pBuffer = SharedPtr(new Buffer(size, bindFlags, cpuAccess));\n   67      pBuffer->apiInit(pInitData != nullptr);\n   ..\n   70  }\n   71  \n   72: Buffer::SharedPtr Buffer::createTyped(ResourceFormat format, uint32_t elementCount, BindFlags bindFlags, CpuAccess cpuAccess, const void* pInitData) {\n   73      size_t size = elementCount * getFormatBytesPerBlock(format);\n   74      SharedPtr pBuffer = create(size, bindFlags, cpuAccess, pInitData);\n   ..\n   83      uint32_t structSize,\n   84      uint32_t elementCount,\n   85:     ResourceBindFlags bindFlags,\n   86      CpuAccess cpuAccess,\n   87      const void* pInitData,\n   ..\n   97      \n   98      if (createCounter) {\n   99:         pBuffer->mpUAVCounter = Buffer::create(sizeof(uint32_t), Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None, &zero);\n  100      }\n  101      return pBuffer;\n  ...\n  105      const ShaderVar& shaderVar,\n  106      uint32_t elementCount,\n  107:     ResourceBindFlags bindFlags,\n  108      CpuAccess cpuAccess,\n  109      const void* pInitData,\n  ...\n  117      const std::string& name,\n  118      uint32_t elementCount,\n  119:     ResourceBindFlags bindFlags,\n  120      CpuAccess cpuAccess,\n  121      const void* pInitData,\n  ...\n  130  }\n  131  \n  132: Buffer::SharedPtr Buffer::aliasResource(Resource::SharedPtr pBaseResource, GpuAddress offset, size_t size, Resource::BindFlags bindFlags) {\n  133      assert(pBaseResource->asBuffer()); // Only aliasing buffers for now\n  134      CpuAccess cpuAccess = pBaseResource->asBuffer() ? pBaseResource->asBuffer()->getCpuAccess() : CpuAccess::None;\n  ...\n  138      }\n  139  \n  140:     if ((pBaseResource->getBindFlags() & bindFlags) != bindFlags) {\n  141:         logError(\"Buffer::aliasResource() - requested buffer bind-flags don't match the aliased resource bind flags.\\nRequested = \" + to_string(bindFlags) + \"\\nAliased = \" + to_string(pBaseResource->getBindFlags()));\n  142          return nullptr;\n  143      }\n  ...\n  156  }\n  157  \n  158: Buffer::SharedPtr Buffer::createFromApiHandle(ApiHandle handle, size_t size, Resource::BindFlags bindFlags, CpuAccess cpuAccess)\n  159  {\n  160      assert(handle);\n  ...\n  260              return mDynamicData.pData;\n  261          } else if (mCpuAccess == CpuAccess::Read) {\n  262:             assert(mBindFlags == BindFlags::None);\n  263              return mapBufferApi(mApiHandle, mSize);\n  264          } else {\n  ...\n  267              if (mpStagingResource == nullptr) {\n  268                  LOG_DBG(\"create buffer\");\n  269:                 mpStagingResource = Buffer::create(mSize, Buffer::BindFlags::None, Buffer::CpuAccess::Read, nullptr);\n  270              }\n  271  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h:\n   84      static SharedPtr create(\n   85          size_t size,\n   86:         Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n   87          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n   88          const void* pInitData = nullptr);\n   ..\n   99          ResourceFormat format,\n  100          uint32_t elementCount,\n  101:         Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  102          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  103          const void* pInitData = nullptr);\n  ...\n  113      static SharedPtr createTyped(\n  114          uint32_t elementCount,\n  115:         Resource::BindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  116          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  117          const T* pInitData = nullptr)\n  ...\n  132          uint32_t structSize,\n  133          uint32_t elementCount,\n  134:         ResourceBindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  135          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  136          const void* pInitData = nullptr,\n  ...\n  151          const std::string& name,\n  152          uint32_t elementCount,\n  153:         ResourceBindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  154          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  155          const void* pInitData = nullptr,\n  ...\n  168          const ShaderVar& shaderVar,\n  169          uint32_t elementCount,\n  170:         ResourceBindFlags bindFlags = Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess,\n  171          CpuAccess cpuAccess = Buffer::CpuAccess::None,\n  172          const void* pInitData = nullptr,\n  173          bool createCounter = true);\n  174  \n  175:     static SharedPtr aliasResource(Resource::SharedPtr pBaseResource, GpuAddress offset, size_t size, Resource::BindFlags bindFlags);\n  176  \n  177      /** Create a new buffer from an existing API handle.\n  ...\n  182          \\return A pointer to a new buffer object, or throws an exception if creation failed.\n  183      */\n  184:     static SharedPtr createFromApiHandle(ApiHandle handle, size_t size, Resource::BindFlags bindFlags, CpuAccess cpuAccess);\n  185  \n  186      /** Get a shader-resource view.\n  ...\n  291  \n  292  protected:\n  293:     Buffer(size_t size, BindFlags bindFlags, CpuAccess cpuAccess);\n  294      void apiInit(bool hasInitData);\n  295  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/CopyContext.cpp:\n  176          mCommandsPending = true;\n  177          // Allocate a buffer on the upload heap\n  178:         Buffer::SharedPtr pUploadBuffer = Buffer::create(numBytes, Buffer::BindFlags::None, Buffer::CpuAccess::Write, pData);\n  179  \n  180          copyBufferRegion(pBuffer, offset, pUploadBuffer.get(), 0, numBytes);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Buffer.cpp:\n   33  namespace Falcor\n   34  {\n   35:     ID3D12ResourcePtr createBuffer(Buffer::State initState, size_t size, const D3D12_HEAP_PROPERTIES& heapProps, Buffer::BindFlags bindFlags)\n   36      {\n   37          assert(gpDevice);\n   ..\n   54          D3D12_RESOURCE_STATES d3dState = getD3D12ResourceState(initState);\n   55          ID3D12ResourcePtr pApiHandle;\n   56:         D3D12_HEAP_FLAGS heapFlags = is_set(bindFlags, ResourceBindFlags::Shared) ? D3D12_HEAP_FLAG_SHARED : D3D12_HEAP_FLAG_NONE;\n   57          d3d_call(pDevice->CreateCommittedResource(&heapProps, heapFlags, &bufDesc, d3dState, nullptr, IID_PPV_ARGS(&pApiHandle)));\n   58          \n   ..\n   64      {\n   65          // This in order of the alignment size\n   66:         const auto& bindFlags = pBuffer->getBindFlags();\n   67:         if (is_set(bindFlags, Buffer::BindFlags::Constant)) return D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT;\n   68:         if (is_set(bindFlags, Buffer::BindFlags::Index)) return sizeof(uint32_t); // This actually depends on the size of the index, but we can handle losing 2 bytes\n   69  \n   70          return D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT;\n   ..\n   81      void Buffer::apiInit(bool hasInitData)\n   82      {\n   83:         if (mCpuAccess != CpuAccess::None && is_set(mBindFlags, BindFlags::Shared))\n   84          {\n   85              throw std::exception(\"Can't create shared resource with CPU access other than 'None'.\");\n   86          }\n   87  \n   88:         if (mBindFlags == BindFlags::Constant)\n   89          {\n   90              mSize = align_to(D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT, mSize);\n   ..\n  102              }\n  103          }\n  104:         else if (mCpuAccess == CpuAccess::Read && mBindFlags == BindFlags::None)\n  105          {\n  106              mState.global = Resource::State::CopyDest;\n  107:             mApiHandle = createBuffer(mState.global, mSize, kReadbackHeapProps, mBindFlags);\n  108          }\n  109          else\n  110          {\n  111              mState.global = Resource::State::Common;\n  112:             if (is_set(mBindFlags, BindFlags::AccelerationStructure)) mState.global = Resource::State::AccelerationStructure;\n  113:             mApiHandle = createBuffer(mState.global, mSize, kDefaultHeapProps, mBindFlags);\n  114          }\n  115      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12CopyContext.cpp:\n  109  \n  110          // Allocate a buffer on the upload heap\n  111:         Buffer::SharedPtr pBuffer = Buffer::create(bufferSize, Buffer::BindFlags::None, Buffer::CpuAccess::Write, nullptr);\n  112          // Map the buffer\n  113          uint8_t* pDst = (uint8_t*)pBuffer->map(Buffer::MapType::WriteDiscard);\n  ...\n  156  \n  157          //Create buffer\n  158:         pThis->mpBuffer = Buffer::create(size, Buffer::BindFlags::None, Buffer::CpuAccess::Read, nullptr);\n  159  \n  160          //Copy from texture to buffer\n  ...\n  214          if (beforeOrAfterState & D3D12_RESOURCE_STATE_RENDER_TARGET)\n  215          {\n  216:             assert(is_set(pResource->getBindFlags(), Resource::BindFlags::RenderTarget));\n  217          }\n  218  \n  219          if (beforeOrAfterState & (D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE))\n  220          {\n  221:             assert(is_set(pResource->getBindFlags(), Resource::BindFlags::ShaderResource));\n  222          }\n  223  \n  224          if (beforeOrAfterState & D3D12_RESOURCE_STATE_UNORDERED_ACCESS)\n  225          {\n  226:             assert(is_set(pResource->getBindFlags(), Resource::BindFlags::UnorderedAccess));\n  227          }\n  228  \n  ...\n  271  \n  272          // Check that resource has required bind flags for UAV barrier to be supported\n  273:         static const Resource::BindFlags reqFlags = Resource::BindFlags::UnorderedAccess | Resource::BindFlags::AccelerationStructure;\n  274:         assert(is_set(pResource->getBindFlags(), reqFlags));\n  275          mpLowLevelData->getCommandList()->ResourceBarrier(1, &barrier);\n  276          mCommandsPending = true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Formats.cpp:\n  114      static_assert(arraysize(kDxgiFormatDesc) == (uint32_t)ResourceFormat::BC7UnormSrgb + 1, \"DXGI format desc table has a wrong size\");\n  115  \n  116:     ResourceBindFlags getFormatBindFlags(ResourceFormat format)\n  117      {\n  118          D3D12_FEATURE_DATA_FORMAT_SUPPORT support;\n  ...\n  120          d3d_call(gpDevice->getApiHandle()->CheckFeatureSupport(D3D12_FEATURE_FORMAT_SUPPORT, &support, sizeof(support)));\n  121  \n  122:         ResourceBindFlags flags = ResourceBindFlags::None;\n  123          auto dxgi1 = support.Support1;\n  124:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_BUFFER) flags |= ResourceBindFlags::Constant;\n  125:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER) flags |= ResourceBindFlags::Vertex;\n  126:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER) flags |= ResourceBindFlags::Index;\n  127:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SO_BUFFER) flags |= ResourceBindFlags::StreamOutput;\n  128:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TEXTURE1D) flags |= ResourceBindFlags::ShaderResource;\n  129:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TEXTURE2D) flags |= ResourceBindFlags::ShaderResource;\n  130:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TEXTURE3D) flags |= ResourceBindFlags::ShaderResource;\n  131:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TEXTURECUBE) flags |= ResourceBindFlags::ShaderResource;\n  132:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_LOAD) flags |= ResourceBindFlags::ShaderResource;\n  133:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE) flags |= ResourceBindFlags::ShaderResource;\n  134:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON) flags |= ResourceBindFlags::ShaderResource;\n  135:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_GATHER) flags |= ResourceBindFlags::ShaderResource;\n  136:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON) flags |= ResourceBindFlags::ShaderResource;\n  137:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_RENDER_TARGET) flags |= ResourceBindFlags::RenderTarget;\n  138:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL) flags |= ResourceBindFlags::DepthStencil;\n  139:         if (dxgi1 & D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW) flags |= ResourceBindFlags::UnorderedAccess;\n  140          \n  141          return flags;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12GpuMemoryHeap.cpp:\n   32  namespace Falcor\n   33  {\n   34:     ID3D12ResourcePtr createBuffer(Buffer::State initState, size_t size, const D3D12_HEAP_PROPERTIES& heapProps, Buffer::BindFlags bindFlags);\n   35  \n   36      namespace\n   ..\n   71      void GpuMemoryHeap::initBasePageData(BaseData& data, size_t size)\n   72      {\n   73:         data.pResourceHandle = createBuffer(getInitState(mType), size, getHeapProps(mType), Buffer::BindFlags::None);\n   74          data.offset = 0;\n   75          D3D12_RANGE readRange = {};\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  290          auto pGSO = pState->getGSO(pVars);\n  291  \n  292:         if (is_set(StateBindFlags::Vars, mBindFlags))\n  293          {\n  294              // Apply the vars. Must be first because applyGraphicsVars() might cause a flush\n  ...\n  308  \n  309  \n  310:         if (is_set(StateBindFlags::Topology, mBindFlags))           pList->IASetPrimitiveTopology(getD3DPrimitiveTopology(pState->getVao()->getPrimitiveTopology()));\n  311:         if (is_set(StateBindFlags::Vao, mBindFlags))                D3D12SetVao(this, pList, pState->getVao().get());\n  312:         if (is_set(StateBindFlags::Fbo, mBindFlags))                D3D12SetFbo(this, pState->getFbo().get());\n  313:         if (is_set(StateBindFlags::SamplePositions, mBindFlags))    D3D12SetSamplePositions(pList, pState->getFbo().get());\n  314:         if (is_set(StateBindFlags::Viewports, mBindFlags))          D3D12SetViewports(pList, &pState->getViewport(0));\n  315:         if (is_set(StateBindFlags::Scissors, mBindFlags))           D3D12SetScissors(pList, &pState->getScissors(0));\n  316:         if (is_set(StateBindFlags::PipelineState, mBindFlags))      pList->SetPipelineState(pGSO->getApiHandle());\n  317  \n  318          BlendState::SharedPtr blendState = pState->getBlendState();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Resource.cpp:\n   59      };\n   60  \n   61:     D3D12_RESOURCE_FLAGS getD3D12ResourceFlags(Resource::BindFlags flags)\n   62      {\n   63          D3D12_RESOURCE_FLAGS d3d = D3D12_RESOURCE_FLAG_NONE;\n   64  \n   65:         bool uavRequired = is_set(flags, Resource::BindFlags::UnorderedAccess) || is_set(flags, Resource::BindFlags::AccelerationStructure);\n   66  \n   67          if (uavRequired)\n   ..\n   70          }\n   71  \n   72:         if (is_set(flags, Resource::BindFlags::DepthStencil))\n   73          {\n   74:             if (is_set(flags, Resource::BindFlags::ShaderResource) == false)\n   75              {\n   76                  d3d |= D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE;\n   ..\n   79          }\n   80  \n   81:         if (is_set(flags, Resource::BindFlags::RenderTarget))\n   82          {\n   83              d3d |= D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Resource.h:\n   31  namespace Falcor\n   32  {\n   33:     D3D12_RESOURCE_FLAGS getD3D12ResourceFlags(Resource::BindFlags flags);\n   34      D3D12_RESOURCE_STATES getD3D12ResourceState(Resource::State s);\n   35  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Texture.cpp:\n  103          desc.Width = align_to(getFormatWidthCompressionRatio(mFormat), mWidth);\n  104          desc.Height = align_to(getFormatHeightCompressionRatio(mFormat), mHeight);\n  105:         desc.Flags = getD3D12ResourceFlags(mBindFlags);\n  106          desc.SampleDesc.Count = mSampleCount;\n  107          desc.SampleDesc.Quality = 0;\n  ...\n  125          D3D12_CLEAR_VALUE clearValue = {};\n  126          D3D12_CLEAR_VALUE* pClearVal = nullptr;\n  127:         if ((mBindFlags & (Texture::BindFlags::RenderTarget | Texture::BindFlags::DepthStencil)) != Texture::BindFlags::None)\n  128          {\n  129              clearValue.Format = desc.Format;\n  130:             if ((mBindFlags & Texture::BindFlags::DepthStencil) != Texture::BindFlags::None)\n  131              {\n  132                  clearValue.DepthStencil.Depth = 1.0f;\n  ...\n  136  \n  137          //If depth and either ua or sr, set to typeless\n  138:         if (isDepthFormat(mFormat) && is_set(mBindFlags, Texture::BindFlags::ShaderResource | Texture::BindFlags::UnorderedAccess))\n  139          {\n  140              desc.Format = getTypelessFormatFromDepthFormat(mFormat);\n  ...\n  142          }\n  143  \n  144:         D3D12_HEAP_FLAGS heapFlags = is_set(mBindFlags, ResourceBindFlags::Shared) ? D3D12_HEAP_FLAG_SHARED : D3D12_HEAP_FLAG_NONE;\n  145          d3d_call(gpDevice->getApiHandle()->CreateCommittedResource(&kDefaultHeapProps, heapFlags, &desc, D3D12_RESOURCE_STATE_COMMON, pClearVal, IID_PPV_ARGS(&mApiHandle)));\n  146  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n  107      for (uint32_t i = 0; i < kSwapChainBuffersCount; i++) {\n  108          // Create a texture object\n  109:         auto pColorTex = Texture::SharedPtr(new Texture(width, height, 1, 1, 1, 1, colorFormat, Texture::Type::Texture2D, Texture::BindFlags::RenderTarget));\n  110          pColorTex->mApiHandle = apiHandles[i];\n  111          // Create the FBO if it's required\n  ...\n  115          // Create a depth texture\n  116          if (depthFormat != ResourceFormat::Unknown) {\n  117:             auto pDepth = Texture::create2D(width, height, depthFormat, 1, 1, nullptr, Texture::BindFlags::DepthStencil);\n  118              mpSwapChainFbos[i]->attachDepthStencilTarget(pDepth);\n  119          }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/FBO.cpp:\n   83                  }\n   84  \n   85:                 if ((pTexture->getBindFlags() & Texture::BindFlags::DepthStencil) == Texture::BindFlags::None)\n   86                  {\n   87                      logError(\"Error when attaching texture to FBO. Attaching to depth-stencil target, the texture wasn't create with the DepthStencil bind flag\");\n   ..\n   98                  }\n   99  \n  100:                 if ((pTexture->getBindFlags() & Texture::BindFlags::RenderTarget) == Texture::BindFlags::None)\n  101                  {\n  102                      logError(\"Error when attaching texture to FBO. Attaching to color target, the texture wasn't create with the RenderTarget bind flag\");\n  ...\n  132          }\n  133  \n  134:         Texture::SharedPtr createTexture2D(uint32_t w, uint32_t h, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize, uint32_t mipLevels, Texture::BindFlags flags)\n  135          {\n  136              if (format == ResourceFormat::Unknown)\n  ...\n  153          }\n  154  \n  155:         Texture::BindFlags getBindFlags(bool isDepth, bool allowUav)\n  156          {\n  157:             Texture::BindFlags flags = Texture::BindFlags::ShaderResource;\n  158:             flags |= isDepth ? Texture::BindFlags::DepthStencil : Texture::BindFlags::RenderTarget;\n  159  \n  160              if (allowUav)\n  161              {\n  162:                 flags |= Texture::BindFlags::UnorderedAccess;\n  163              }\n  164              return flags;\n  ...\n  254          if (pDepthStencil)\n  255          {\n  256:             allowUav = ((pDepthStencil->getBindFlags() & Texture::BindFlags::UnorderedAccess) != Texture::BindFlags::None);\n  257          }\n  258  \n  ...\n  280          if (pTexture)\n  281          {\n  282:             allowUav = ((pTexture->getBindFlags() & Texture::BindFlags::UnorderedAccess) != Texture::BindFlags::None);\n  283          }\n  284  \n  ...\n  402          for (uint32_t i = 0; i < Fbo::getMaxColorTargetCount(); i++) {\n  403              if (fboDesc.getColorTargetFormat(i) != ResourceFormat::Unknown) {\n  404:                 Texture::BindFlags flags = getBindFlags(false, fboDesc.isColorTargetUav(i));\n  405                  Texture::SharedPtr pTex = createTexture2D(width, height, fboDesc.getColorTargetFormat(i), sampleCount, arraySize, mipLevels, flags);\n  406                  pFbo->attachColorTarget(pTex, i, 0, 0, kAttachEntireMipLevel);\n  ...\n  409          \n  410          if (fboDesc.getDepthStencilFormat() != ResourceFormat::Unknown) {\n  411:             Texture::BindFlags flags = getBindFlags(true, fboDesc.isDepthStencilUav());\n  412              Texture::SharedPtr pDepth = createTexture2D(width, height, fboDesc.getDepthStencilFormat(), sampleCount, arraySize, mipLevels, flags);\n  413              pFbo->attachDepthStencilTarget(pDepth, 0, 0, kAttachEntireMipLevel);\n  ...\n  429          // Create the color targets\n  430          for (uint32_t i = 0; i < getMaxColorTargetCount(); i++) {\n  431:             Texture::BindFlags flags = getBindFlags(false, fboDesc.isColorTargetUav(i));\n  432              auto pTex = Texture::createCube(width, height, fboDesc.getColorTargetFormat(i), arraySize, mipLevels, nullptr, flags);\n  433              pFbo->attachColorTarget(pTex, i, 0, kAttachEntireMipLevel);\n  ...\n  435  \n  436          if (fboDesc.getDepthStencilFormat() != ResourceFormat::Unknown) {\n  437:             Texture::BindFlags flags = getBindFlags(true, fboDesc.isDepthStencilUav());\n  438              auto pDepth = Texture::createCube(width, height, fboDesc.getDepthStencilFormat(), arraySize, mipLevels, nullptr, flags);\n  439              pFbo->attachDepthStencilTarget(pDepth, 0, kAttachEntireMipLevel);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Formats.h:\n   41      /** These flags are hints the driver to what pipeline stages the resource will be bound to.\n   42  */\n   43:     enum class ResourceBindFlags : uint32_t {\n   44          None = 0x0,             ///< The resource will not be bound the pipeline. Use this to create a staging resource\n   45          Vertex = 0x1,           ///< The resource will be bound as a vertex-buffer\n   ..\n   61      };\n   62  \n   63:     enum_class_operators(ResourceBindFlags);\n   64  \n   65      /** Resource formats\n   ..\n  349      /** Get the supported bind-flags for a specific format\n  350      */\n  351:     ResourceBindFlags getFormatBindFlags(ResourceFormat format);\n  352  \n  353      inline const std::string& to_string(ResourceFormat format) {\n  ...\n  373      }\n  374  \n  375:     inline const std::string to_string(ResourceBindFlags flags) {\n  376          std::string s;\n  377:         if (flags == ResourceBindFlags::None) {\n  378              return \"None\";\n  379          }\n  380  \n  381: #define flag_to_str(f_) if (is_set(flags, ResourceBindFlags::f_)) (s += (s.size() ? \" | \" : \"\") + std::string(#f_))\n  382  \n  383          flag_to_str(Vertex);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/GpuTimer.cpp:\n   47      assert(gpDevice);\n   48  #ifdef FALCOR_D3D12\n   49:     mpResolveBuffer = Buffer::create(sizeof(uint64_t) * 2, Buffer::BindFlags::None, Buffer::CpuAccess::Read, nullptr);\n   50  #endif\n   51      // Create timestamp query heap upon first use.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp:\n   70          }\n   71  \n   72:         auto bindFlags = pTexture->getBindFlags();\n   73          // Select the right clear based on the texture's binding flags\n   74:         if (is_set(bindFlags, Resource::BindFlags::RenderTarget)) {\n   75              clearRtv(pTexture->getRTV().get(), clearColor);\n   76:         } else if (is_set(bindFlags, Resource::BindFlags::UnorderedAccess)) {\n   77              clearUAV(pTexture->getUAV().get(), clearColor);\n   78:         } else if (is_set(bindFlags, Resource::BindFlags::DepthStencil)) {\n   79              if (isStencilFormat(format) && (clearColor.y != 0)) {\n   80                  logWarning(\"RenderContext::clearTexture() - when clearing a depth-stencil texture the stencil value(clearColor.y) must be 0. Received \" + std::to_string(clearColor.y) + \". Forcing stencil to 0\");\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n   57          It is useful in cases where the user wants to set a specific object using a raw-API call before calling one of the draw functions\n   58      */\n   59:     enum class StateBindFlags : uint32_t {\n   60          None            = 0x0,              /// <Bind Nothing\n   61          Vars            = 0x1,              /// <Bind Graphics Vars (root signature and sets)\n   ..\n  172      /** Tell the render context what it should and shouldn't bind before drawing\n  173      */\n  174:     void setBindFlags(StateBindFlags flags) { mBindFlags = flags; }\n  175  \n  176:     /** Get the render context bind flags so the user can restore the state after setBindFlags()\n  177      */\n  178:     StateBindFlags getBindFlags() const { return mBindFlags; }\n  179  \n  180      /** Resolve an entire multi-sampled resource. The dst and src resources must have the same dimensions, array-size, mip-count and format.\n  ...\n  198      bool prepareForDraw(GraphicsState* pState, GraphicsVars* pVars);\n  199  \n  200:     StateBindFlags mBindFlags = StateBindFlags::All;\n  201      GraphicsVars* mpLastBoundGraphicsVars = nullptr;\n  202  };\n  203  \n  204: enum_class_operators(RenderContext::StateBindFlags);\n  205  \n  206  }  // namespace Falcor\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h:\n   45   public:\n   46      using ApiHandle = ResourceHandle;\n   47:     using BindFlags = ResourceBindFlags;\n   48  \n   49      /** Resource types. Notice there are no array types. Array are controlled using the array size parameter on texture creation.\n   ..\n   99      /** Get the bind flags\n  100      */\n  101:     BindFlags getBindFlags() const { return mBindFlags; }\n  102  \n  103      bool isStateGlobal() const { return mState.isGlobal; }\n  ...\n  172      friend class CopyContext;\n  173  \n  174:     Resource(Type type, BindFlags bindFlags, uint64_t size) : mType(type), mBindFlags(bindFlags), mSize(size) {}\n  175  \n  176      Type mType;\n  177:     BindFlags mBindFlags;\n  178  \n  179      struct {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.cpp:\n   37  \n   38  // namespace {\n   39: Texture::BindFlags updateBindFlags(Texture::BindFlags flags, bool hasInitData, uint32_t mipLevels, ResourceFormat format, const std::string& texType) {\n   40      if ((mipLevels == Texture::kMaxPossible) && hasInitData) {\n   41:         flags |= Texture::BindFlags::RenderTarget;\n   42      }\n   43  \n   44:     Texture::BindFlags supported = getFormatBindFlags(format);\n   45:     supported |= ResourceBindFlags::Shared;\n   46      if ((flags & supported) != flags) {\n   47          logError(\"Error when creating \" + texType + \" of format \" + to_string(format) + \". The requested bind-flags are not supported.\\n\"\n   ..\n   55  // }\n   56  \n   57: Texture::SharedPtr Texture::createFromApiHandle(ApiHandle handle, Type type, uint32_t width, uint32_t height, uint32_t depth, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize, uint32_t mipLevels, State initState, BindFlags bindFlags) {\n   58      assert(handle);\n   59      switch (type) {\n   ..\n   85  }\n   86  \n   87: Texture::SharedPtr Texture::create1D(uint32_t width, ResourceFormat format, uint32_t arraySize, uint32_t mipLevels, const void* pData, BindFlags bindFlags) {\n   88:     bindFlags = updateBindFlags(bindFlags, pData != nullptr, mipLevels, format, \"Texture1D\");\n   89      Texture::SharedPtr pTexture = SharedPtr(new Texture(width, 1, 1, arraySize, mipLevels, 1, format, Type::Texture1D, bindFlags));\n   90      pTexture->apiInit(pData, (mipLevels == kMaxPossible));\n   ..\n   92  }\n   93  \n   94: Texture::SharedPtr Texture::create2D(uint32_t width, uint32_t height, ResourceFormat format, uint32_t arraySize, uint32_t mipLevels, const void* pData, BindFlags bindFlags) {\n   95:     bindFlags = updateBindFlags(bindFlags, pData != nullptr, mipLevels, format, \"Texture2D\");\n   96      Texture::SharedPtr pTexture = SharedPtr(new Texture(width, height, 1, arraySize, mipLevels, 1, format, Type::Texture2D, bindFlags));\n   97      pTexture->apiInit(pData, (mipLevels == kMaxPossible));\n   ..\n   99  }\n  100  \n  101: Texture::SharedPtr Texture::create3D(uint32_t width, uint32_t height, uint32_t depth, ResourceFormat format, uint32_t mipLevels, const void* pData, BindFlags bindFlags, bool isSparse) {\n  102:     bindFlags = updateBindFlags(bindFlags, pData != nullptr, mipLevels, format, \"Texture3D\");\n  103      Texture::SharedPtr pTexture = SharedPtr(new Texture(width, height, depth, 1, mipLevels, 1, format, Type::Texture3D, bindFlags));\n  104      pTexture->apiInit(pData, (mipLevels == kMaxPossible));\n  ...\n  106  }\n  107  \n  108: Texture::SharedPtr Texture::createCube(uint32_t width, uint32_t height, ResourceFormat format, uint32_t arraySize, uint32_t mipLevels, const void* pData, BindFlags bindFlags) {\n  109:     bindFlags = updateBindFlags(bindFlags, pData != nullptr, mipLevels, format, \"TextureCube\");\n  110      Texture::SharedPtr pTexture = SharedPtr(new Texture(width, height, 1, arraySize, mipLevels, 1, format, Type::TextureCube, bindFlags));\n  111      pTexture->apiInit(pData, (mipLevels == kMaxPossible));\n  ...\n  113  }\n  114  \n  115: Texture::SharedPtr Texture::create2DMS(uint32_t width, uint32_t height, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize, BindFlags bindFlags) {\n  116:     bindFlags = updateBindFlags(bindFlags, false, 1, format, \"Texture2DMultisample\");\n  117      Texture::SharedPtr pTexture = SharedPtr(new Texture(width, height, 1, arraySize, 1, sampleCount, format, Type::Texture2DMultisample, bindFlags));\n  118      pTexture->apiInit(nullptr, false);\n  ...\n  120  }\n  121  \n  122: Texture::Texture(uint32_t width, uint32_t height, uint32_t depth, uint32_t arraySize, uint32_t mipLevels, uint32_t sampleCount, ResourceFormat format, Type type, BindFlags bindFlags)\n  123      : Resource(type, bindFlags, 0), mWidth(width), mHeight(height), mDepth(depth), mMipLevels(mipLevels), mSampleCount(sampleCount), mArraySize(arraySize), mFormat(format) {\n  124      assert(width > 0 && height > 0 && depth > 0);\n  ...\n  236  \n  237      if (type == FormatType::Float && channels < 3) {\n  238:         Texture::SharedPtr pOther = Texture::create2D(getWidth(mipLevel), getHeight(mipLevel), ResourceFormat::RGBA32Float, 1, 1, nullptr, ResourceBindFlags::RenderTarget | ResourceBindFlags::ShaderResource);\n  239          pContext->blit(getSRV(mipLevel, 1, arraySlice, 1), pOther->getRTV(0, 0, 1));\n  240          textureData = pContext->readTextureSubresource(pOther.get(), 0);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Texture.h:\n  110          \\return A pointer to a new texture, or throws an exception if creation failed.\n  111      */\n  112:     static SharedPtr createFromApiHandle(ApiHandle handle, Type type, uint32_t width, uint32_t height, uint32_t depth, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize, uint32_t mipLevels, State initState, BindFlags bindFlags);\n  113  \n  114      /** Create a 1D texture.\n  ...\n  121          \\return A pointer to a new texture, or throws an exception if creation failed.\n  122      */\n  123:     static SharedPtr create1D(uint32_t width, ResourceFormat format, uint32_t arraySize = 1, uint32_t mipLevels = kMaxPossible, const void* pInitData = nullptr, BindFlags bindFlags = BindFlags::ShaderResource);\n  124  \n  125      /** Create a 2D texture.\n  ...\n  133          \\return A pointer to a new texture, or throws an exception if creation failed.\n  134      */\n  135:     static SharedPtr create2D(uint32_t width, uint32_t height, ResourceFormat format, uint32_t arraySize = 1, uint32_t mipLevels = kMaxPossible, const void* pInitData = nullptr, BindFlags bindFlags = BindFlags::ShaderResource);\n  136  \n  137      /** Create a 3D texture.\n  ...\n  146          \\return A pointer to a new texture, or throws an exception if creation failed.\n  147      */\n  148:     static SharedPtr create3D(uint32_t width, uint32_t height, uint32_t depth, ResourceFormat format, uint32_t mipLevels = kMaxPossible, const void* pInitData = nullptr, BindFlags bindFlags = BindFlags::ShaderResource, bool isSparse = false);\n  149  \n  150      /** Create a cube texture.\n  ...\n  158          \\return A pointer to a new texture, or throws an exception if creation failed.\n  159      */\n  160:     static SharedPtr createCube(uint32_t width, uint32_t height, ResourceFormat format, uint32_t arraySize = 1, uint32_t mipLevels = kMaxPossible, const void* pInitData = nullptr, BindFlags bindFlags = BindFlags::ShaderResource);\n  161  \n  162      /** Create a multi-sampled 2D texture.\n  ...\n  169          \\return A pointer to a new texture, or throws an exception if creation failed.\n  170      */\n  171:     static SharedPtr create2DMS(uint32_t width, uint32_t height, ResourceFormat format, uint32_t sampleCount, uint32_t arraySize = 1, BindFlags bindFlags = BindFlags::ShaderResource);\n  172  \n  173      /** Create a new texture object from a file.\n  ...\n  178          \\return A new texture, or nullptr if the texture failed to load.\n  179      */\n  180:     static SharedPtr createFromFile(const std::string& filename, bool generateMipLevels, bool loadAsSrgb, BindFlags bindFlags = BindFlags::ShaderResource);\n  181  \n  182      /** Get a shader-resource view for the entire resource\n  ...\n  243  \n  244   protected:\n  245:     Texture(uint32_t width, uint32_t height, uint32_t depth, uint32_t arraySize, uint32_t mipLevels, uint32_t sampleCount, ResourceFormat format, Type Type, BindFlags bindFlags);\n  246      void apiInit(const void* pData, bool autoGenMips);\n  247      void uploadInitData(const void* pData, bool autoGenMips);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/TextureLoader.cpp:\n  529  }\n  530  \n  531: Texture::SharedPtr createTextureFromDx10Dds(DdsData& ddsData, const std::string& filename, ResourceFormat format, uint32_t mipLevels, Texture::BindFlags bindFlags) {\n  532      format = convertBgrxFormatToBgra(ddsData, format);\n  533  \n  ...\n  559  }\n  560  \n  561: Texture::SharedPtr createTextureFromLegacyDds(DdsData& ddsData, const std::string& filename, ResourceFormat format, uint32_t mipLevels, Texture::BindFlags bindFlags) {\n  562      format = convertBgrxFormatToBgra(ddsData, format);\n  563  \n  ...\n  579  }\n  580  \n  581: Texture::SharedPtr createTextureFromDDSFile(const std::string filename, bool generateMips, bool loadAsSrgb, Texture::BindFlags bindFlags) {\n  582      DdsData ddsData;\n  583      if (!loadDDSDataFromFile(filename, ddsData)) return nullptr;\n  ...\n  607  }\n  608  \n  609: Texture::SharedPtr Texture::createFromFile(const std::string& filename, bool generateMipLevels, bool loadAsSrgb, Texture::BindFlags bindFlags) {\n  610      std::string fullpath;\n  611      //printf(\"Searching for texture %s ...\\n\", filename.c_str());\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKBuffer.cpp:\n   53  }\n   54  \n   55: VkBufferUsageFlags getBufferUsageFlag(Buffer::BindFlags bindFlags) {\n   56      LOG_DBG(\"Buffer usage flag from bind flags: %s\", to_string(bindFlags).c_str());       \n   57      // Assume every buffer can be read from and written into\n   58      VkBufferUsageFlags flags = VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n   59:     auto setBit = [&flags, &bindFlags](Buffer::BindFlags f, VkBufferUsageFlags vkBit) {if (is_set(bindFlags, f)) flags |= vkBit; };\n   60:     setBit(Buffer::BindFlags::Vertex,           VK_BUFFER_USAGE_VERTEX_BUFFER_BIT);\n   61:     setBit(Buffer::BindFlags::Index,            VK_BUFFER_USAGE_INDEX_BUFFER_BIT);\n   62:     //setBit(Buffer::BindFlags::UnorderedAccess,  VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT);\n   63:     setBit(Buffer::BindFlags::UnorderedAccess,  VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT);\n   64      \n   65:     //setBit(Buffer::BindFlags::ShaderResource,   VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT);\n   66:     setBit(Buffer::BindFlags::ShaderResource,   VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT);\n   67      \n   68  \n   69:     setBit(Buffer::BindFlags::IndirectArg,      VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT);\n   70:     setBit(Buffer::BindFlags::Constant,         VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT);\n   71  \n   72      return flags;\n   ..\n   79  }\n   80  \n   81: Buffer::ApiHandle createBuffer(size_t size, Buffer::BindFlags bindFlags, GpuMemoryHeap::Type memType) {\n   82      VkBufferCreateInfo bufferInfo = {};\n   83      bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;\n   ..\n  108          mApiHandle = mDynamicData.pResourceHandle;\n  109      } else {\n  110:         if (mCpuAccess == CpuAccess::Read && mBindFlags == BindFlags::None) {\n  111:             mApiHandle = createBuffer(mSize, mBindFlags, Device::MemoryType::Readback);\n  112          } else {\n  113:             mApiHandle = createBuffer(mSize, mBindFlags, Device::MemoryType::Default);\n  114          }\n  115      }\n  ...\n  125          mpStagingResource->unmap();\n  126          mpStagingResource = nullptr;\n  127:     } else if (mDynamicData.pData == nullptr && mBindFlags == BindFlags::None) {\n  128          // We only unmap staging buffers\n  129          assert(mCpuAccess == CpuAccess::Read);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n  186  \n  187          // Upload the data to a staging buffer\n  188:         pStaging = Buffer::create(dataSize, Buffer::BindFlags::None, pSrcData ? Buffer::CpuAccess::Write : Buffer::CpuAccess::Read, pSrcData);\n  189          vkCopy.bufferOffset = pStaging->getGpuAddressOffset();\n  190      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFormats.cpp:\n  112      };\n  113  \n  114:     ResourceBindFlags getFormatBindFlags(ResourceFormat format)\n  115      {\n  116          VkFormatProperties p;\n  117          vkGetPhysicalDeviceFormatProperties(gpDevice->getApiHandle(), getVkFormat(format), &p);\n  118  \n  119:         auto convertFlags = [](VkFormatFeatureFlags vk) -> ResourceBindFlags\n  120          {\n  121:             ResourceBindFlags f = ResourceBindFlags::None;\n  122:             if (vk & VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT) f |= ResourceBindFlags::ShaderResource;\n  123:             if (vk & VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT) f |= ResourceBindFlags::ShaderResource;\n  124:             if (vk & VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT) f |= ResourceBindFlags::ShaderResource;\n  125:             if (vk & VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT) f |= ResourceBindFlags::UnorderedAccess;\n  126:             if (vk & VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT) f |= ResourceBindFlags::UnorderedAccess;\n  127:             if (vk & VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT) f |= ResourceBindFlags::UnorderedAccess;\n  128:             if (vk & VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT) f |= ResourceBindFlags::UnorderedAccess;\n  129:             if (vk & VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT) f |= ResourceBindFlags::Vertex;\n  130:             if (vk & VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT) f |= ResourceBindFlags::RenderTarget;\n  131:             if (vk & VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT) f |= ResourceBindFlags::RenderTarget;\n  132:             if (vk & VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT) f |= ResourceBindFlags::DepthStencil;\n  133  \n  134              return f;\n  135          };\n  136          \n  137:         ResourceBindFlags flags = ResourceBindFlags::None;\n  138          flags |= convertFlags(p.bufferFeatures);\n  139          flags |= convertFlags(p.linearTilingFeatures);\n  ...\n  145          case ResourceFormat::R16Uint:\n  146          case ResourceFormat::R32Uint:\n  147:             flags |= ResourceBindFlags::Index;\n  148          }\n  149  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp:\n   33  namespace Falcor\n   34  {\n   35:     Buffer::ApiHandle createBuffer(size_t size, Buffer::BindFlags bindFlags, GpuMemoryHeap::Type memType);\n   36  \n   37      void GpuMemoryHeap::initBasePageData(BaseData& data, size_t size)\n   38      {\n   39          // Create a buffer\n   40:         data.pResourceHandle = createBuffer(size, Buffer::BindFlags::Constant | Buffer::BindFlags::Vertex | Buffer::BindFlags::Index, mType);\n   41          data.offset = 0;\n   42          vk_call(vkMapMemory(gpDevice->getApiHandle(), data.pResourceHandle, 0, VK_WHOLE_SIZE, 0, (void**)&data.pData));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n  187  \n  188          // Apply the vars. Must be first because applyGraphicsVars() might cause a flush\n  189:         if (is_set(RenderContext::StateBindFlags::Vars, mBindFlags))\n  190          {\n  191              if (pVars)\n  ...\n  194              }\n  195          }\n  196:         if (is_set(RenderContext::StateBindFlags::PipelineState, mBindFlags))\n  197          {\n  198              vkCmdBindPipeline(mpLowLevelData->getCommandList(), VK_PIPELINE_BIND_POINT_GRAPHICS, pGSO->getApiHandle());\n  199          }\n  200:         if (is_set(RenderContext::StateBindFlags::Fbo, mBindFlags))\n  201          {\n  202              transitionFboResources(this, pState->getFbo().get());\n  203          }\n  204:         if (is_set(StateBindFlags::SamplePositions, mBindFlags))\n  205          {\n  206              if (pState->getFbo() && pState->getFbo()->getSamplePositions().size())\n  ...\n  209              }\n  210          }\n  211:         if (is_set(RenderContext::StateBindFlags::Viewports, mBindFlags))\n  212          {\n  213              setViewports(mpLowLevelData->getCommandList(), pState->getViewports());\n  214          }\n  215:         if (is_set(RenderContext::StateBindFlags::Scissors, mBindFlags))\n  216          {\n  217              setScissors(mpLowLevelData->getCommandList(), pState->getScissors());\n  218          }\n  219:         if (is_set(RenderContext::StateBindFlags::Vao, mBindFlags))\n  220          {\n  221              setVao(this, pState->getVao().get());\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n   49  Texture::SharedPtr createBlackTexture() {\n   50      uint8_t blackPixel[4] = { 0 };\n   51:     return Texture::create2D(1, 1, ResourceFormat::RGBA8Unorm, 1, 1, blackPixel, Resource::BindFlags::ShaderResource | Resource::BindFlags::RenderTarget | Resource::BindFlags::UnorderedAccess);\n   52  }\n   53  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n   43  \n   44      // Like getD3D12ResourceFlags but for Images specifically\n   45:     VkImageUsageFlags getVkImageUsageFlags(Resource::BindFlags bindFlags) {\n   46          // Assume that every image can be updated/cleared, read from, and sampled\n   47          VkImageUsageFlags vkFlags = VK_IMAGE_USAGE_TRANSFER_SRC_BIT | VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT;\n   48  \n   49:         if (is_set(bindFlags, Resource::BindFlags::UnorderedAccess)) {\n   50              vkFlags |= VK_IMAGE_USAGE_STORAGE_BIT;\n   51          }\n   52  \n   53:         if (is_set(bindFlags, Resource::BindFlags::DepthStencil)) {\n   54              vkFlags |= VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT;\n   55          }\n   56  \n   57:         if (is_set(bindFlags, Resource::BindFlags::ShaderResource)) {\n   58              // #VKTODO what does VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT mean?\n   59              vkFlags |= VK_IMAGE_USAGE_SAMPLED_BIT;\n   60          }\n   61  \n   62:         if (is_set(bindFlags, Resource::BindFlags::RenderTarget)) {\n   63              vkFlags |= VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;\n   64          }\n   ..\n  131          imageInfo.sharingMode = VK_SHARING_MODE_EXCLUSIVE;\n  132          imageInfo.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;\n  133:         imageInfo.usage = getVkImageUsageFlags(mBindFlags);\n  134          imageInfo.tiling = getFormatImageTiling(imageInfo.format, imageInfo.usage);\n  135  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n   60  \n   61      #if _LOG_ENABLED\n   62:     ResourceBindFlags requiredFlag = ResourceBindFlags::None;\n   63      if (pType->getType() != ReflectionResourceType::Type::Sampler) {\n   64          switch (pType->getShaderAccess()) {\n   65              case ReflectionResourceType::ShaderAccess::Read:\n   66:                 requiredFlag = (pType->getType() == ReflectionResourceType::Type::ConstantBuffer) ? ResourceBindFlags::Constant : ResourceBindFlags::ShaderResource;\n   67                  break;\n   68              case ReflectionResourceType::ShaderAccess::ReadWrite:\n   69:                 requiredFlag = ResourceBindFlags::UnorderedAccess;\n   70                  break;\n   71              default:\n   ..\n   73          }\n   74  \n   75:         if (pResource && !is_set(pResource->getBindFlags(), requiredFlag)) {\n   76              logError(getErrorPrefix(funcName, varName) + \", but the resource is missing the \" + to_string(requiredFlag) + \" bind-flag\");\n   77              return nullptr;\n   ..\n  795  \n  796      if( !mUnderlyingConstantBuffer.pBuffer || mUnderlyingConstantBuffer.pBuffer->getSize() < requiredSize ) {\n  797:         mUnderlyingConstantBuffer.pBuffer = Buffer::create(requiredSize, Buffer::BindFlags::Constant, Buffer::CpuAccess::Write);\n  798      }\n  799  \n  ...\n 1162      bool insertBarrier = true;\n 1163  #ifdef FALCOR_D3D12\n 1164:     insertBarrier = (is_set(pResource->getBindFlags(), Resource::BindFlags::AccelerationStructure) == false);\n 1165  #endif\n 1166      if (insertBarrier) {\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EnvProbe.cpp:\n  115  \n  116          // Create importance map. We have to set the RTV flag to be able to use generateMips().\n  117:         mpImportanceMap = Texture::create2D(dimension, dimension, ResourceFormat::R32Float, 1, mips, nullptr, Resource::BindFlags::ShaderResource | Resource::BindFlags::RenderTarget | Resource::BindFlags::UnorderedAccess);\n  118          assert(mpImportanceMap);\n  119  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.cpp:\n  314          if (!mpNodeOffsetsBuffer || mpNodeOffsetsBuffer->getElementCount() < mNodeOffsets.size())\n  315          {\n  316:             mpNodeOffsetsBuffer = Buffer::createTyped<uint32_t>((uint32_t)mNodeOffsets.size(), ResourceBindFlags::ShaderResource);\n  317              mpNodeOffsetsBuffer->setName(\"LightBVH_NodeOffsetsBuffer\");\n  318          }\n  ...\n  329          {\n  330              // TODO: Test perf with Buffer::CpuAccess::Write flag. It'd speed up CPU->GPU copy below,\n  331:             mpBVHNodesBuffer = Buffer::create(bvhByteSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  332              mpBVHNodesBuffer->setName(\"LightBVH_BVHNodes\");\n  333          }\n  ...\n  336              mpTriangleBitmasksBuffer = Buffer::createStructured(\n  337                  mLeafUpdater->getRootVar()[\"CB\"][\"gLightBVH\"][\"triangleBitmasks\"],\n  338:                 uint32_t(triangleBitmasks.size()), Resource::BindFlags::ShaderResource);\n  339              mpTriangleBitmasksBuffer->setName(\"LightBVH_TriangleBitmasks\");\n  340          }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n  279          const size_t uvBufSize = mTriangleCount * 3 * sizeof(float2);\n  280  \n  281:         mpMeshLightsVertexPos = Buffer::create(bufSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  282          mpMeshLightsVertexPos->setName(\"LightCollection_MeshLightsVertexPos\");\n  283:         mpMeshLightsTexCoords = Buffer::create(uvBufSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  284          mpMeshLightsTexCoords->setName(\"LightCollection_MeshLightsTexCoords\");\n  285          mpTriangleData = Buffer::createStructured(mpTriangleListBuilder->getProgram().get(), \"gTriangleData\", mTriangleCount);\n  ...\n  299              \"gMeshData\",\n  300              uint32_t(mMeshLights.size()),\n  301:             ResourceBindFlags::ShaderResource);\n  302          if (mpMeshData->getStructSize() != sizeof(MeshLightData)) {\n  303              throw std::runtime_error(\"Size mismatch for structured buffer of MeshLightData\");\n  ...\n  319  \n  320          // Create the GPU buffer.\n  321:         mpPerMeshInstanceOffset = Buffer::createStructured(sizeof(uint32_t), instanceCount, Resource::BindFlags::ShaderResource);\n  322          mpPerMeshInstanceOffset->setName(\"LightCollection_PerMeshInstanceOffset\");\n  323  \n  ...\n  338              if (!mIntegrator.pResultBuffer || mIntegrator.pResultBuffer->getSize() < bufSize)\n  339              {\n  340:                 mIntegrator.pResultBuffer = Buffer::create(bufSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  341                  mIntegrator.pResultBuffer->setName(\"LightCollection_IntegratorResults\");\n  342                  assert(mIntegrator.pResultBuffer);\n  ...\n  529          if (!mpStagingBuffer || mpStagingBuffer->getSize() < stagingSize)\n  530          {\n  531:             mpStagingBuffer = Buffer::create(stagingSize, Resource::BindFlags::None, Buffer::CpuAccess::Read);\n  532              mpStagingBuffer->setName(\"LightCollection_StagingBuffer\");\n  533              mCPUInvalidData = CPUOutOfDateFlags::All;\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/ShaderTable.cpp:\n  134          if( !mpBuffer || mpBuffer->getSize() < shaderTableBufferSize )\n  135          {\n  136:             mpBuffer = Buffer::create(shaderTableBufferSize, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None);\n  137          }\n  138  \n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/BasePasses/FullScreenPass.cpp:\n   77              // First time we got here. create VB and VAO\n   78              const uint32_t vbSize = (uint32_t)(sizeof(Vertex)*arraysize(kVertices));\n   79:             pVB = Buffer::create(vbSize, Buffer::BindFlags::Vertex, Buffer::CpuAccess::Write, (void*)kVertices);\n   80              assert(pVB);\n   81  \n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphCompiler.cpp:\n  280                      bool graphOutput = mGraph.isGraphOutput({ nodeIndex, field.getName() });\n  281                      uint32_t lifetime = graphOutput ? uint32_t(-1) : uint32_t(i);\n  282:                     if (graphOutput && field.getBindFlags() != ResourceBindFlags::None) field.bindFlags(field.getBindFlags() | ResourceBindFlags::ShaderResource); // Adding ShaderResource for graph outputs\n  283                      pResourceCache->registerField(fullFieldName, field, lifetime);\n  284                  }\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphUI.cpp:\n  735          ImGui::TextUnformatted(to_string(field.getFormat()).c_str());\n  736  \n  737:         ImGui::TextUnformatted(\"BindFlags: \");\n  738          ImGui::SameLine();\n  739:         ImGui::TextUnformatted(to_string(field.getBindFlags()).c_str());\n  740  \n  741          ImGui::TextUnformatted(\"Flags: \");\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassHelpers.h:\n   80          \\param[in] bindFlags Optional bind flags. The default is 'ShaderResource' for all inputs.\n   81      */\n   82:     inline void addRenderPassInputs(RenderPassReflection& reflector, const ChannelList& channels, ResourceBindFlags bindFlags = ResourceBindFlags::ShaderResource)\n   83      {\n   84          for (const auto& it : channels)\n   ..\n   96          \\param[in] bindFlags Optional bind flags. The default is 'UnorderedAccess' for all outputs.\n   97      */\n   98:     inline void addRenderPassOutputs(RenderPassReflection& reflector, const ChannelList& channels, ResourceBindFlags bindFlags = ResourceBindFlags::UnorderedAccess)\n   99      {\n  100          for (const auto& it : channels)\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassReflection.cpp:\n  113  \n  114      RenderPassReflection::Field& RenderPassReflection::Field::format(ResourceFormat f) { mFormat = f; return *this; }\n  115:     RenderPassReflection::Field& RenderPassReflection::Field::bindFlags(Resource::BindFlags flags) { mBindFlags = flags; return *this; }\n  116      RenderPassReflection::Field& RenderPassReflection::Field::flags(Flags flags) { mFlags = flags; return *this; }\n  117      RenderPassReflection::Field& RenderPassReflection::Field::visibility(Visibility vis) { mVisibility = vis; return *this; }\n  ...\n  231          assert(is_set(mVisibility, RenderPassReflection::Field::Visibility::Internal) == false); // We can't alias/merge internal fields\n  232          mVisibility = mVisibility | other.mVisibility;\n  233:         mBindFlags = mBindFlags | other.mBindFlags;\n  234          return *this;\n  235      }\n  ...\n  249          check(mArraySize);\n  250          check(mFormat);\n  251:         check(mBindFlags);\n  252          check(mFlags);\n  253          check(mVisibility);\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassReflection.h:\n   83  \n   84              Field& format(ResourceFormat f);\n   85:             Field& bindFlags(ResourceBindFlags flags);\n   86              Field& flags(Flags flags);\n   87              Field& visibility(Visibility vis);\n   ..\n   98              uint32_t getMipCount() const { return mMipCount; }\n   99              ResourceFormat getFormat() const { return mFormat; }\n  100:             ResourceBindFlags getBindFlags() const { return mBindFlags; }\n  101              Flags getFlags() const { return mFlags; }\n  102              Type getType() const { return mType; }\n  ...\n  123              uint32_t mArraySize = 1;                       ///< The required array-size. Only valid for textures\n  124              ResourceFormat mFormat = ResourceFormat::Unknown; ///< Unknown means use the back-buffer format for output resources, don't care for input resources\n  125:             ResourceBindFlags mBindFlags = ResourceBindFlags::None;  ///< The required bind flags. The default for outputs is RenderTarget, for inputs is ShaderResource and for InOut (RenderTarget | ShaderResource)\n  126              Flags mFlags = Flags::None;                    ///< The field flags\n  127              Visibility mVisibility = Visibility::Undefined;\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/ResourceCache.cpp:\n  101              assert(mNameToIndex.count(name) == 0);\n  102              mNameToIndex[name] = (uint32_t)mResourceData.size();\n  103:             bool resolveBindFlags = (field.getBindFlags() == ResourceBindFlags::None);\n  104:             mResourceData.push_back({ field, {timePoint, timePoint}, nullptr, resolveBindFlags, name });\n  105          }\n  106          else // Add alias\n  ...\n  111              mergeTimePoint(mResourceData[index].lifetime, timePoint);\n  112              mResourceData[index].pResource = nullptr;\n  113:             mResourceData[index].resolveBindFlags = mResourceData[index].resolveBindFlags || (field.getBindFlags() == ResourceBindFlags::None);\n  114          }\n  115      }\n  116  \n  117:     Resource::SharedPtr createResourceForPass(const ResourceCache::DefaultProperties& params, const RenderPassReflection::Field& field, bool resolveBindFlags, const std::string& resourceName)\n  118      {\n  119          uint32_t width = field.getWidth() ? field.getWidth() : params.dims.x;\n  ...\n  121          uint32_t depth = field.getDepth() ? field.getDepth() : 1;\n  122          uint32_t sampleCount = field.getSampleCount() ? field.getSampleCount() : 1;\n  123:         auto bindFlags = field.getBindFlags();\n  124          auto arraySize = field.getArraySize();\n  125          auto mipLevels = field.getMipCount();\n  ...\n  130          {\n  131              format = field.getFormat() == ResourceFormat::Unknown ? params.format : field.getFormat();\n  132:             if (resolveBindFlags)\n  133              {\n  134:                 ResourceBindFlags mask = Resource::BindFlags::UnorderedAccess | Resource::BindFlags::ShaderResource;\n  135                  bool isOutput = is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Output);\n  136                  bool isInternal = is_set(field.getVisibility(), RenderPassReflection::Field::Visibility::Internal);\n  137:                 if (isOutput || isInternal) mask |= Resource::BindFlags::DepthStencil | Resource::BindFlags::RenderTarget;\n  138:                 auto supported = getFormatBindFlags(format);\n  139                  mask &= supported;\n  140                  bindFlags |= mask;\n  ...\n  143          else // RawBuffer\n  144          {\n  145:             if (resolveBindFlags) bindFlags = Resource::BindFlags::UnorderedAccess | Resource::BindFlags::ShaderResource;\n  146          }\n  147          Resource::SharedPtr pResource;\n  ...\n  185              if ((data.pResource == nullptr) && (data.field.isValid()))\n  186              {\n  187:                 data.pResource = createResourceForPass(params, data.field, data.resolveBindFlags, data.name);\n  188              }\n  189          }\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/ResourceCache.h:\n   91              std::pair<uint32_t, uint32_t> lifetime; // Time range where this resource is being used\n   92              Resource::SharedPtr pResource;          // The resource\n   93:             bool resolveBindFlags;                  // Whether or not we should resolve the field's bind-flags before creating the resource\n   94              std::string name;                       // Full name of the resource, including the pass name\n   95          };\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PixelStats.cpp:\n   57              {\n   58                  mpParallelReduction = ComputeParallelReduction::create();\n   59:                 mpReductionResult = Buffer::create(32, ResourceBindFlags::None, Buffer::CpuAccess::Read);\n   60              }\n   61  \n   ..\n   63              if (!mpStatsRayCount || mpStatsRayCount->getWidth() != frameDim.x || mpStatsRayCount->getHeight() != frameDim.y)\n   64              {\n   65:                 mpStatsRayCount = Texture::create2D(frameDim.x, frameDim.y, ResourceFormat::R32Uint, 1, 1, nullptr, ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess);\n   66:                 mpStatsPathLength = Texture::create2D(frameDim.x, frameDim.y, ResourceFormat::R32Uint, 1, 1, nullptr, ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess);\n   67              }\n   68  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/AnimationController.cpp:\n   45          uint32_t float4Count = (uint32_t)mLocalMatrices.size() * 4;\n   46  \n   47:         mpWorldMatricesBuffer = Buffer::createStructured(sizeof(float4), float4Count, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n   48          mpPrevWorldMatricesBuffer = mpWorldMatricesBuffer;\n   49:         mpInvTransposeWorldMatricesBuffer = Buffer::createStructured(sizeof(float4), float4Count, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n   50          createSkinningPass(staticVertexData, dynamicVertexData);\n   51      }\n   ..\n  218              if (mpWorldMatricesBuffer == mpPrevWorldMatricesBuffer)\n  219              {\n  220:                 mpPrevWorldMatricesBuffer = Buffer::createStructured(sizeof(float4), mpWorldMatricesBuffer->getElementCount(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  221              }\n  222          }\n  ...\n  253              auto createBuffer = [&](const std::string& name, const auto& initData)\n  254              {\n  255:                 auto pBuffer = Buffer::createStructured(block[name], (uint32_t)initData.size(), ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  256                  pBuffer->setBlob(initData.data(), 0, pBuffer->getSize());\n  257                  block[name] = pBuffer;\n  ...\n  263              assert(mSkinningMatrices.size() * 4 < UINT32_MAX);\n  264              uint32_t float4Count = (uint32_t)mSkinningMatrices.size() * 4;\n  265:             mpSkinningMatricesBuffer = Buffer::createStructured(sizeof(float4), float4Count, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  266:             mpInvTransposeSkinningMatricesBuffer = Buffer::createStructured(sizeof(float4), float4Count, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  267              block[\"boneMatrices\"].setBuffer(mpSkinningMatricesBuffer);\n  268              block[\"inverseTransposeBoneMatrices\"].setBuffer(mpInvTransposeSkinningMatricesBuffer);\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbe.cpp:\n   85              mpSpecularLDPass[\"DataCB\"][\"gSampleCount\"] = sampleCount;\n   86  \n   87:             Texture::SharedPtr pOutput = Texture::create2D(size, size, format, 1, Texture::kMaxPossible, nullptr, Resource::BindFlags::ShaderResource | Resource::BindFlags::RenderTarget);\n   88  \n   89              // Execute on each mip level\n   ..\n  164              Texture::SharedPtr pOrigTex = Texture::createFromFile(filename, false, loadAsSrgb);\n  165              if (pOrigTex) {\n  166:                 pTexture = Texture::create2D(pOrigTex->getWidth(), pOrigTex->getHeight(), overrideFormat, 1, Texture::kMaxPossible, nullptr, Resource::BindFlags::RenderTarget | Resource::BindFlags::ShaderResource);\n  167                  pTexture->setSourceFilename(pOrigTex->getSourceFilename());\n  168                  gpDevice->getRenderContext()->blit(pOrigTex->getSRV(0, 1, 0, 1), pTexture->getRTV(0, 0, 1));\n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp:\n  105  \n  106          // Indirect args\n  107:         Resource::BindFlags indirectBindFlags = Resource::BindFlags::IndirectArg | Resource::BindFlags::UnorderedAccess;\n  108:         mpIndirectArgs = Buffer::createStructured(pSimulateCs.get(), \"drawArgs\", 1, indirectBindFlags);\n  109  \n  110          //initialize the first member of the args, vert count per instance, to be 4 for particle billboards\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n  205  \n  206          mpSceneBlock = ParameterBlock::create(pReflection);\n  207:         mpMeshesBuffer = Buffer::createStructured(mpSceneBlock[kMeshBufferName], (uint32_t)mMeshDesc.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  208:         mpMeshInstancesBuffer = Buffer::createStructured(mpSceneBlock[kMeshInstanceBufferName], (uint32_t)mMeshInstanceData.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  209  \n  210:         mpMaterialsBuffer = Buffer::createStructured(mpSceneBlock[kMaterialsBufferName], (uint32_t)mMaterials.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  211  \n  212          if (mLights.size())\n  213          {\n  214:             mpLightsBuffer = Buffer::createStructured(mpSceneBlock[kLightsBufferName], (uint32_t)mLights.size(), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, nullptr, false);\n  215          }\n  216      }\n  ...\n  701          if (drawCounterClockwiseMeshes.size())\n  702          {\n  703:             mDrawCounterClockwiseMeshes.pBuffer = Buffer::create(sizeof(drawCounterClockwiseMeshes[0]) * drawCounterClockwiseMeshes.size(), Resource::BindFlags::IndirectArg, Buffer::CpuAccess::None, drawCounterClockwiseMeshes.data());\n  704              mDrawCounterClockwiseMeshes.count = (uint32_t)drawCounterClockwiseMeshes.size();\n  705          }\n  ...\n  707          if (drawClockwiseMeshes.size())\n  708          {\n  709:             mDrawClockwiseMeshes.pBuffer = Buffer::create(sizeof(drawClockwiseMeshes[0]) * drawClockwiseMeshes.size(), Resource::BindFlags::IndirectArg, Buffer::CpuAccess::None, drawClockwiseMeshes.data());\n  710              mDrawClockwiseMeshes.count = (uint32_t)drawClockwiseMeshes.size();\n  711          }\n  ...\n  890                  assert(blas.prebuildInfo.UpdateScratchDataSizeInBytes <= blas.prebuildInfo.ScratchDataSizeInBytes);\n  891  \n  892:                 blas.pScratchBuffer = Buffer::create(blas.prebuildInfo.ScratchDataSizeInBytes, Buffer::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  893:                 blas.pBlas = Buffer::create(blas.prebuildInfo.ResultDataMaxSizeInBytes, Buffer::BindFlags::AccelerationStructure, Buffer::CpuAccess::None);\n  894              }\n  895              // For any rebuild and refits, just add a barrier\n  ...\n 1009              GET_COM_INTERFACE(gpDevice->getApiHandle(), ID3D12Device5, pDevice5);\n 1010              pDevice5->GetRaytracingAccelerationStructurePrebuildInfo(&inputs, &mTlasPrebuildInfo);\n 1011:             mpTlasScratch = Buffer::create(mTlasPrebuildInfo.ScratchDataSizeInBytes, Buffer::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n 1012  \n 1013              // #SCENE This isn't guaranteed according to the spec, and the scratch buffer being stored should be sized differently depending on update mode\n ....\n 1023          {\n 1024              assert(tlas.pInstanceDescs == nullptr); // Instance desc should also be null if no TLAS\n 1025:             tlas.pTlas = Buffer::create(mTlasPrebuildInfo.ResultDataMaxSizeInBytes, Buffer::BindFlags::AccelerationStructure, Buffer::CpuAccess::None);\n 1026:             tlas.pInstanceDescs = Buffer::create((uint32_t)mInstanceDescs.size() * sizeof(D3D12_RAYTRACING_INSTANCE_DESC), Buffer::BindFlags::None, Buffer::CpuAccess::Write, mInstanceDescs.data());\n 1027          }\n 1028          // Else update instance descs and barrier TLAS buffers\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp:\n  317  \n  318          // Create the index buffer\n  319:         ResourceBindFlags ibBindFlags = Resource::BindFlags::Index | ResourceBindFlags::ShaderResource;\n  320:         Buffer::SharedPtr pIB = Buffer::create((uint32_t)ibSize, ibBindFlags, Buffer::CpuAccess::None, mBuffersData.indices.data());\n  321  \n  322          // Create the vertex data as structured buffers\n  323:         ResourceBindFlags vbBindFlags = ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess | ResourceBindFlags::Vertex;\n  324:         Buffer::SharedPtr pStaticBuffer = Buffer::createStructured(sizeof(PackedStaticVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n  325:         Buffer::SharedPtr pPrevBuffer = Buffer::createStructured(sizeof(PrevVertexData), (uint32_t)vertexCount, vbBindFlags, Buffer::CpuAccess::None, nullptr, false);\n  326  \n  327          Vao::BufferVec pVBs(Scene::kVertexBufferCount);\n  ...\n  330          std::vector<uint16_t> drawIDs(drawCount);\n  331          for (uint32_t i = 0; i < drawCount; i++) drawIDs[i] = i;\n  332:         pVBs[Scene::kDrawIdBufferIndex] = Buffer::create(drawCount * sizeof(uint16_t), ResourceBindFlags::Vertex, Buffer::CpuAccess::None, drawIDs.data());\n  333  \n  334          // The layout only initializes the vertex data and draw ID layout. The skinning data doesn't get passed into the vertex shader.\n\n/home/max/dev/Falcor/src/Falcor/Utils/Algorithm/PrefixSum.cpp:\n   51  \n   52          // Create and bind buffer for per-group sums.\n   53:         mpPrefixGroupSums = Buffer::create(kGroupSize * sizeof(uint32_t), Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None, nullptr);\n   54  \n   55          mpPrefixSumGroupVars[\"gPrefixGroupSums\"] = mpPrefixGroupSums;\n\n/home/max/dev/Falcor/src/Falcor/Utils/Debug/PixelDebug.cpp:\n   76  \n   77                  // Allocate staging buffers for readback. These are shared, the data is stored consecutively.\n   78:                 mpCounterBuffer = Buffer::create(2 * sizeof(uint32_t), ResourceBindFlags::None, Buffer::CpuAccess::Read);\n   79:                 mpDataBuffer = Buffer::create(mpPixelLog->getSize() + mpAssertLog->getSize(), ResourceBindFlags::None, Buffer::CpuAccess::Read);\n   80              }\n   81  \n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/DebugDrawer.cpp:\n  205      DebugDrawer::DebugDrawer(uint32_t maxVertices)\n  206      {\n  207:         Buffer::SharedPtr pVertexBuffer = Buffer::create(sizeof(LineVertex) * maxVertices, Resource::BindFlags::Vertex, Buffer::CpuAccess::Write, nullptr);\n  208  \n  209          VertexBufferLayout::SharedPtr pBufferLayout = VertexBufferLayout::create();\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.cpp:\n  235          // Need to create a new VAO\n  236          std::vector<Buffer::SharedPtr> pVB(1);\n  237:         pVB[0] = createVB ? Buffer::create(requiredVbSize + sizeof(ImDrawVert) * 1000, Buffer::BindFlags::Vertex, Buffer::CpuAccess::Write, nullptr) : mpVao->getVertexBuffer(0);\n  238:         Buffer::SharedPtr pIB = createIB ? Buffer::create(requiredIbSize, Buffer::BindFlags::Index, Buffer::CpuAccess::Write, nullptr) : mpVao->getIndexBuffer();\n  239          mpVao = Vao::create(Vao::Topology::TriangleList, mpLayout, pVB, pIB, ResourceFormat::R16Uint);\n  240      }\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.cpp:\n  152          // Create a vertex buffer\n  153          const uint32_t vbSize = (uint32_t)(sizeof(Vertex)*kMaxCharCount*arraysize(kVertexPos));\n  154:         gTextData.pVb = Buffer::create(vbSize, Buffer::BindFlags::Vertex, Buffer::CpuAccess::Write, nullptr);\n  155  \n  156          // Create the RenderState\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/VideoCapture.cpp:\n   47          {\n   48              assert(pSource->getType() == Texture::Type::Texture2D);\n   49:             return Texture::create2D(pSource->getWidth(), pSource->getHeight(), ResourceFormat::RGBA8UnormSrgb, 1, 1, nullptr, Texture::BindFlags::RenderTarget);\n   50          }\n   51      }\n\n/home/max/dev/Falcor/src/RenderPasses/AccumulatePass/AccumulatePass.cpp:\n  103  {\n  104      RenderPassReflection reflector;\n  105:     reflector.addInput(kInputChannel, \"Input data to be temporally accumulated\").bindFlags(ResourceBindFlags::ShaderResource);\n  106:     reflector.addOutput(kOutputChannel, \"Output data that is temporally accumulated\").bindFlags(ResourceBindFlags::RenderTarget | ResourceBindFlags::UnorderedAccess | ResourceBindFlags::ShaderResource).format(ResourceFormat::RGBA32Float);\n  107      return reflector;\n  108  }\n  ...\n  231          if (!pBuf || pBuf->getWidth() != width || pBuf->getHeight() != height)\n  232          {\n  233:             pBuf = Texture::create2D(width, height, format, 1, 1, nullptr, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess);\n  234              assert(pBuf);\n  235              mFrameCount = 0;\n\n/home/max/dev/Falcor/src/RenderPasses/Antialiasing/TAA/TAA.cpp:\n  113      assert(pColorOut->getSampleCount() == 1);\n  114  \n  115:     if (allocate) mpPrevColor = Texture::create2D(pColorOut->getWidth(), pColorOut->getHeight(), pColorOut->getFormat(), 1, 1, nullptr, Resource::BindFlags::RenderTarget | Resource::BindFlags::ShaderResource);\n  116  }\n  117  \n\n/home/max/dev/Falcor/src/RenderPasses/BSDFViewer/BSDFViewer.cpp:\n   72  \n   73      // Create readback buffer.\n   74:     mPixelDataBuffer = Buffer::createStructured(mpViewerPass->getProgram().get(), \"gPixelData\", 1u, ResourceBindFlags::UnorderedAccess);\n   75  \n   76      mpPixelDebug = PixelDebug::create();\n   ..\n   85  {\n   86      RenderPassReflection r;\n   87:     r.addOutput(kOutput, \"Output buffer\").format(ResourceFormat::RGBA32Float).bindFlags(ResourceBindFlags::UnorderedAccess);\n   88      return r;\n   89  }\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSM.cpp:\n  729          rebind = true;\n  730          ResourceFormat format = getVisBufferFormat(mVisibilityPassData.mapBitsPerChannel, mVisibilityPassData.shouldVisualizeCascades);\n  731:         pTex = Texture::create2D(mVisibilityPassData.screenDim.x, mVisibilityPassData.screenDim.y, format, 1, 1, nullptr, Resource::BindFlags::RenderTarget | Resource::BindFlags::ShaderResource);\n  732      }\n  733  \n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/ComparisonPass.cpp:\n   81  {\n   82      RenderPassReflection r;\n   83:     r.addInput(kLeftInput, \"Left side image\").bindFlags(Falcor::Resource::BindFlags::ShaderResource).texture2D(0, 0);\n   84:     r.addInput(kRightInput, \"Right side image\").bindFlags(Falcor::Resource::BindFlags::ShaderResource).texture2D(0, 0);\n   85:     r.addOutput(kOutput, \"Output image\").bindFlags(Falcor::Resource::BindFlags::RenderTarget).texture2D(0, 0);\n   86      return r;\n   87  }\n\n/home/max/dev/Falcor/src/RenderPasses/DepthPass/DepthPass.cpp:\n   92  {\n   93      RenderPassReflection reflector;\n   94:     reflector.addOutput(kDepth, \"Depth-buffer\").bindFlags(Resource::BindFlags::DepthStencil).format(mDepthFormat).texture2D(0, 0, 0);\n   95      return reflector;\n   96  }\n\n/home/max/dev/Falcor/src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp:\n  143      {\n  144          mpDifferenceTexture = Texture::create2D(width, height, ResourceFormat::RGBA32Float, 1, 1, nullptr,\n  145:                                                 Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess);\n  146          assert(mpDifferenceTexture);\n  147      }\n\n/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp:\n   98  \n   99      auto& depthField = mUsePreGenDepth ? reflector.addInputOutput(kDepth, \"Pre-initialized depth-buffer\") : reflector.addOutput(kDepth, \"Depth buffer\");\n  100:     depthField.bindFlags(Resource::BindFlags::DepthStencil).texture2D(0, 0, mSampleCount);\n  101  \n  102      if (mNormalMapFormat != ResourceFormat::Unknown)\n  ...\n  140          if (mpFbo->getDepthStencilTexture() == nullptr)\n  141          {\n  142:             auto pDepth = Texture::create2D(mpFbo->getWidth(), mpFbo->getHeight(), ResourceFormat::D32Float, 1, 1, nullptr, Resource::BindFlags::DepthStencil);\n  143              mpFbo->attachDepthStencilTarget(pDepth);\n  144          }\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp:\n   61  \n   62      // Add the required depth output. This always exists.\n   63:     reflector.addOutput(kDepthName, \"Depth buffer\").format(ResourceFormat::D32Float).bindFlags(Resource::BindFlags::DepthStencil);\n   64  \n   65      // Add all the other outputs.\n   66      // The default channels are written as render targets, the rest as UAVs as there is way to assign/pack render targets yet.\n   67:     addRenderPassOutputs(reflector, kGBufferChannels, Resource::BindFlags::RenderTarget);\n   68:     addRenderPassOutputs(reflector, kGBufferExtraChannels, Resource::BindFlags::UnorderedAccess);\n   69  \n   70      return reflector;\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp:\n   46      RenderPassReflection reflector;\n   47  \n   48:     reflector.addOutput(kDepthName, \"Depth buffer\").format(ResourceFormat::D32Float).bindFlags(Resource::BindFlags::DepthStencil);\n   49:     reflector.addOutput(kOutputName, kOutputDesc).bindFlags(Resource::BindFlags::RenderTarget | Resource::BindFlags::UnorderedAccess).format(ResourceFormat::RG32Uint);\n   50  \n   51      return reflector;\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp:\n   50      RenderPassReflection reflector;\n   51  \n   52:     reflector.addOutput(kOutputName, kOutputDesc).bindFlags(Resource::BindFlags::UnorderedAccess).format(ResourceFormat::RG32Uint);\n   53  \n   54      return reflector;\n\n/home/max/dev/Falcor/src/RenderPasses/SkyBox/SkyBox.cpp:\n  134      RenderPassReflection reflector;\n  135      reflector.addOutput(kTarget, \"Color buffer\").format(ResourceFormat::RGBA32Float);\n  136:     auto& depthField = reflector.addInputOutput(kDepth, \"Depth-buffer. Should be pre-initialized or cleared before calling the pass\").bindFlags(Resource::BindFlags::DepthStencil);\n  137      return reflector;\n  138  }\n\n/home/max/dev/Falcor/src/RenderPasses/SVGFPass/SVGFPass.cpp:\n  157      reflector.addInternal(kInternalBufferPreviousLinearZAndNormal, \"Previous Linear Z and Packed Normal\")\n  158          .format(ResourceFormat::RGBA32Float)\n  159:         .bindFlags(Resource::BindFlags::RenderTarget | Resource::BindFlags::ShaderResource)\n  160          ;\n  161      reflector.addInternal(kInternalBufferPreviousLighting, \"Previous Filtered Lighting\")\n  162          .format(ResourceFormat::RGBA32Float)\n  163:         .bindFlags(Resource::BindFlags::RenderTarget | Resource::BindFlags::ShaderResource)\n  164          ;\n  165      reflector.addInternal(kInternalBufferPreviousMoments, \"Previous Moments\")\n  166          .format(ResourceFormat::RG32Float)\n  167:         .bindFlags(Resource::BindFlags::RenderTarget | Resource::BindFlags::ShaderResource)\n  168          ;\n  169  \n\n/home/max/dev/Falcor/src/RenderPasses/Utils/Composite/Composite.cpp:\n   80  {\n   81      RenderPassReflection reflector;\n   82:     reflector.addInput(kInputA, \"Input A\").bindFlags(ResourceBindFlags::ShaderResource);\n   83:     reflector.addInput(kInputB, \"Input B\").bindFlags(ResourceBindFlags::ShaderResource);\n   84:     reflector.addOutput(kOutput, \"Output\").bindFlags(ResourceBindFlags::UnorderedAccess).format(ResourceFormat::RGBA32Float); // TODO: Allow user to specify output format\n   85      return reflector;\n   86  }\n\n/home/max/dev/Falcor/src/RenderPasses/Utils/GaussianBlur/GaussianBlur.cpp:\n  208      }\n  209  \n  210:     Buffer::SharedPtr pBuf = Buffer::createTyped<float>(mKernelWidth, Resource::BindFlags::ShaderResource);\n  211  \n  212      for (uint32_t i = 0; i <= center; i++)\n\n/home/max/dev/Falcor/src/Samples/CudaInterop/CudaInterop.cpp:\n   33  {\n   34      // Create our input and output textures\n   35:     mpInputTex = Texture::createFromFile(\"smoke-puff.png\", false, false, ResourceBindFlags::Shared);\n   36      mWidth = mpInputTex->getWidth();\n   37      mHeight = mpInputTex->getHeight();\n   38:     mpOutputTex = Texture::create2D(mWidth, mHeight, mpInputTex->getFormat(), 1, 1, nullptr, ResourceBindFlags::Shared | ResourceBindFlags::ShaderResource);\n   39  \n   40      // Define our usage flags and then map the textures to CUDA surfaces. Surface values of 0\n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n  160      }\n  161  \n  162:     mpRtOut = Texture::create2D(width, height, ResourceFormat::RGBA16Float, 1, 1, nullptr, Resource::BindFlags::UnorderedAccess | Resource::BindFlags::ShaderResource);\n  163  }\n  164  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp:\n   41      std::vector<uint32_t> initData(elems);\n   42      for (uint32_t i = 0; i < elems; i++) initData[i] = i;\n   43:     return Buffer::create(elems * sizeof(uint32_t), Resource::BindFlags::ShaderResource, cpuAccess, initialize ? initData.data() : nullptr);\n   44  }\n   45  \n   ..\n   91          // Copy buffer to staging buffer on the GPU.\n   92          // Note we have to use copyBufferRegion() as our buffer is allocated within a page on the upload heap.\n   93:         auto pStaging = Buffer::create(elems * sizeof(uint32_t), Resource::BindFlags::None, Buffer::CpuAccess::Read);\n   94          ctx.getRenderContext()->copyBufferRegion(pStaging.get(), 0, pBuf.get(), 0, elems * sizeof(uint32_t));\n   95  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp:\n   66              if constexpr (type == Type::ByteAddressBuffer) {\n   67                  LOG_DBG(\"Creating ByteAddressBuffer ...\");\n   68:                 pBuffer = Buffer::create(numElems * sizeof(uint32_t), ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n   69              } else if constexpr (type == Type::TypedBuffer) {\n   70                  LOG_DBG(\"Creating TypedBuffer ...\");\n   71:                 pBuffer = Buffer::createTyped<uint32_t>(numElems, ResourceBindFlags::UnorderedAccess);\n   72              } else if constexpr (type == Type::StructuredBuffer) {\n   73                  LOG_DBG(\"Creating StructuredBuffer ...\");\n   74:                 pBuffer = Buffer::createStructured(ctx.getProgram(), \"buffer\", numElems, ResourceBindFlags::UnorderedAccess);\n   75              } else assert(false);\n   76  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   77                  bufA[j].resize(kNumElems);\n   78                  for (uint32_t i = 0; i < kNumElems; i++) bufA[j][i] = r();\n   79:                 block[\"bufA\"][j] = Buffer::create(kNumElems * sizeof(uint32_t), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, bufA[j].data());\n   80              }\n   81              std::vector<float> bufB[3];\n   ..\n   84                  bufB[j].resize(kNumElems);\n   85                  for (uint32_t i = 0; i < kNumElems; i++) bufB[j][i] = (float)r();\n   86:                 block[\"bufB\"][j] = Buffer::createTyped<float>(kNumElems, Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None, bufB[j].data());\n   87              }\n   88              std::vector<uint32_t> bufC[4];\n   ..\n   91                  bufC[j].resize(kNumElems);\n   92                  for (uint32_t i = 0; i < kNumElems; i++) bufC[j][i] = r();\n   93:                 block[\"bufC\"][j] = Buffer::createTyped<uint32_t>(kNumElems, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, bufC[j].data());\n   94              }\n   95  \n   ..\n   98              {\n   99                  for (uint32_t i = 0; i < kNumElems; i++) testBuffer[i] = r();\n  100:                 auto pTestBuffer = Buffer::create(kNumElems * sizeof(uint32_t), useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, testBuffer.data());\n  101                  bool ret = pParamBlock->setBuffer(kRootBufferName, pTestBuffer);\n  102                  EXPECT(ret);\n  ...\n  118                  globalBufA.resize(kNumElems);\n  119                  for (uint32_t i = 0; i < kNumElems; i++) globalBufA[i] = r();\n  120:                 var[\"globalBufA\"] = Buffer::createTyped<uint32_t>(kNumElems, Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, globalBufA.data());\n  121              }\n  122              std::vector<uint32_t> globalTestBuffer(kNumElems);\n  123              {\n  124                  for (uint32_t i = 0; i < kNumElems; i++) globalTestBuffer[i] = r();\n  125:                 var[kGlobalRootBufferName] = Buffer::create(kNumElems * sizeof(uint32_t), useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, globalTestBuffer.data());\n  126              }\n  127  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   54              {\n   55                  for (uint32_t i = 0; i < kNumElems; i++) buf[i] = r();\n   56:                 data[\"buf\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, buf.data());\n   57              }\n   58              std::vector<uint32_t> rwBuf(kNumElems);\n   59              {\n   60                  for (uint32_t i = 0; i < kNumElems; i++) rwBuf[i] = r();\n   61:                 data[\"rwBuf\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, rwBuf.data());\n   62              }\n   63  \n   ..\n   70                      data[kRootBufferName],\n   71                      kNumElems,\n   72:                     useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource,\n   73                      Buffer::CpuAccess::None,\n   74                      rootBuf.data(),\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n   65              {\n   66                  for (uint32_t i = 0; i < kNumElems; i++) rawBuffer[i] = r();\n   67:                 var[\"rawBuffer\"] = Buffer::create(kNumElems * sizeof(uint32_t), ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, rawBuffer.data());\n   68              }\n   69  \n   ..\n   71              {\n   72                  for (uint32_t i = 0; i < kNumElems; i++) structBuffer[i] = { r() + 0.5f, r() };\n   73:                 var[\"structBuffer\"] = Buffer::createStructured(var[\"structBuffer\"], kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, structBuffer.data());\n   74              }\n   75  \n   ..\n   77              {\n   78                  for (uint32_t i = 0; i < kNumElems; i++) typedBufferUint[i] = r();\n   79:                 var[\"typedBufferUint\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, typedBufferUint.data());\n   80              }\n   81  \n   ..\n   83              {\n   84                  for (uint32_t i = 0; i < kNumElems; i++) typedBufferFloat4[i] = { r() * 0.25f, r() * 0.5f, r() * 0.75f, r() };\n   85:                 var[\"typedBufferFloat4\"] = Buffer::createTyped<float4>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, typedBufferFloat4.data());\n   86              }\n   87  \n   ..\n   90              {\n   91                  for (uint32_t i = 0; i < kNumElems; i++) testBuffer[i] = r();\n   92:                 auto pTestBuffer = Buffer::create(kNumElems * sizeof(uint32_t), useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, testBuffer.data());\n   93                  var[kRootBufferName] = pTestBuffer;\n   94  \n   ..\n  121              // Change the binding of other resources to test that the root buffer stays correctly bound.\n  122              for (uint32_t i = 0; i < kNumElems; i++) rawBuffer[i] = r();\n  123:             var[\"rawBuffer\"] = Buffer::create(kNumElems * sizeof(uint32_t), ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, rawBuffer.data());\n  124              for (uint32_t i = 0; i < kNumElems; i++) typedBufferFloat4[i] = { r() * 0.25f, r() * 0.5f, r() * 0.75f, r() };\n  125:             var[\"typedBufferFloat4\"] = Buffer::createTyped<float4>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, typedBufferFloat4.data());\n  126              var[\"CB\"][\"c0\"] = ++c0;\n  127  \n  ...\n  132              {\n  133                  for (uint32_t i = 0; i < kNumElems; i++) testBuffer[i] = r();\n  134:                 auto pTestBuffer = Buffer::create(kNumElems * sizeof(uint32_t), useUav ? ResourceBindFlags::UnorderedAccess : ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, testBuffer.data());\n  135                  var[kRootBufferName] = pTestBuffer;\n  136  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/UserConstantBufferTests.cpp:\n   53          // Creating and binding a constant buffer manually is expected to fail. It should give a hard error.\n   54          // TODO: We should add a test for this error condition if possible (i.e. catch exception).\n   55:         //auto pBuf = Buffer::create(12, Resource::BindFlags::Constant, Buffer::CpuAccess::None, initData.data());\n   56          //ctx[\"params\"] = pBuf;\n   57  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Sampling/PseudorandomTests.cpp:\n   84  \n   85              // Upload seeds to the GPU.\n   86:             Buffer::SharedPtr pSeedBuf = Buffer::create(seed.size() * sizeof(seed[0]), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, seed.data());\n   87              assert(pSeedBuf);\n   88              return pSeedBuf;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp:\n   57              for (auto& v : elems) v = ((uint64_t)r() << 32) | r();\n   58              auto var = ctx.vars().getRootVar();\n   59:             auto pBuf = Buffer::createStructured(var[\"data\"], kNumElems, ResourceBindFlags::ShaderResource | ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, elems.data());\n   60              var[\"data\"] = pBuf;\n   61  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangMutatingTests.cpp:\n   42          ShaderVar var = ctx.vars().getRootVar();\n   43          uint4 v = { 11, 22, 33, 44 };\n   44:         var[\"buffer\"] = Buffer::createTyped<uint4>(1, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, &v);\n   45  \n   46          ctx.runProgram();\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp:\n   81          auto var = ctx.vars().getRootVar();\n   82          uint32_t zero = 0;\n   83:         auto pLaneCount = Buffer::createTyped<uint32_t>(1, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, &zero);\n   84          var[\"laneCount\"] = pLaneCount;\n   85  \n   ..\n   99          auto var = ctx.vars().getRootVar();\n  100          uint32_t zero = 0;\n  101:         auto pLaneCount = Buffer::createTyped<uint32_t>(1, ResourceBindFlags::UnorderedAccess, Buffer::CpuAccess::None, &zero);\n  102          var[\"laneCount\"] = pLaneCount;\n  103  \n  104          std::vector<uint32_t> matchData = generateMatchData(kNumElems);\n  105          assert(matchData.size() == kNumElems);\n  106:         var[\"testData\"] = Buffer::createTyped<uint32_t>(kNumElems, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, matchData.data());\n  107  \n  108          ctx.runProgram(kNumElems, 1, 1);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/BitonicSortTests.cpp:\n   52              for (auto& it : testData) it = r();\n   53  \n   54:             Buffer::SharedPtr pTestDataBuffer = Buffer::create(n * sizeof(uint32_t), Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None, testData.data());\n   55  \n   56              // Execute sort on the GPU.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/BitTricksTests.cpp:\n   61          for (auto& it : testData) it = r();\n   62  \n   63:         Buffer::SharedPtr pTestDataBuffer = Buffer::create(n * sizeof(uint32_t), Resource::BindFlags::ShaderResource, Buffer::CpuAccess::None, testData.data());\n   64  \n   65          // Setup and run GPU test.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/HashUtilsTests.cpp:\n   55      {\n   56          // Allocate results buffer (64k dwords).\n   57:         Buffer::SharedPtr pResultBuffer = Buffer::createTyped<uint32_t>(1 << 16, ResourceBindFlags::UnorderedAccess);\n   58          ctx.getRenderContext()->clearUAV(pResultBuffer->getUAV().get(), uint4(0));\n   59  \n   ..\n   98      {\n   99          // Allocate results buffer (2^27 dwords).\n  100:         Buffer::SharedPtr pResultBuffer = Buffer::createTyped<uint32_t>(1 << 27, ResourceBindFlags::UnorderedAccess);\n  101          ctx.getRenderContext()->clearUAV(pResultBuffer->getUAV().get(), uint4(0));\n  102  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/ParallelReductionTests.cpp:\n  167              // Allocate buffer for the result on the GPU.\n  168              DataType nullValue = {};\n  169:             Buffer::SharedPtr pResultBuffer = Buffer::create(16, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, &nullValue);\n  170  \n  171              // Perform reduction operation.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/PrefixSumTests.cpp:\n   57              for (auto& it : testData) it = r() % maxVal;\n   58  \n   59:             Buffer::SharedPtr pTestDataBuffer = Buffer::create(numElems * sizeof(uint32_t), Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None, testData.data());\n   60  \n   61              // Allocate buffer for the total sum on the GPU.\n   62              uint32_t nullValue = 0;\n   63:             Buffer::SharedPtr pSumBuffer = Buffer::create(4, ResourceBindFlags::ShaderResource, Buffer::CpuAccess::None, &nullValue);\n   64  \n   65              // Execute prefix sum on the GPU.\n\n498 matches across 85 files\n\n\nSearching 1124 files for \"falcorToVkDescType\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp:\n   34  namespace Falcor {\n   35  \n   36: VkDescriptorType falcorToVkDescType(DescriptorPool::Type type) {\n   37      switch (type) {\n   38          case DescriptorPool::Type::TextureSrv:\n   ..\n  109      for (uint32_t i = 0; i < kTypeCount; i++) {\n  110          if(mDesc.mDescCount[i]) {\n  111:             poolSizeForType[usedSlots].type = falcorToVkDescType((DescriptorPool::Type)i);\n  112              poolSizeForType[usedSlots].descriptorCount = mDesc.mDescCount[i];\n  113              totalDescCount += mDesc.mDescCount[usedSlots];\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n   38  \n   39      VkDescriptorSetLayout createDescriptorSetLayout(const DescriptorSet::Layout& layout);\n   40:     VkDescriptorType falcorToVkDescType(DescriptorPool::Type type);\n   41  \n   42      void DescriptorSet::apiInit() {\n   ..\n  126  \n  127          write.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;\n  128:         write.descriptorType = falcorToVkDescType(type);\n  129          write.dstSet = set;\n  130          write.dstBinding = bindIndex;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRootSignature.cpp:\n   33  namespace Falcor\n   34  {\n   35:     VkDescriptorType falcorToVkDescType(DescriptorPool::Type type);\n   36  \n   37      VkShaderStageFlags getShaderVisibility(ShaderVisibility visibility)\n   ..\n   79              b.binding = range.baseRegIndex;\n   80              b.descriptorCount = range.descCount;\n   81:             b.descriptorType = falcorToVkDescType(range.type);\n   82              b.pImmutableSamplers = nullptr;\n   83              b.stageFlags = getShaderVisibility(layout.getVisibility());\n\n6 matches across 3 files\n\n\nSearching 1124 files for \"setUav\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorSet.cpp:\n   99      }\n  100  \n  101:     void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav)\n  102      {\n  103          setCpuHandle(this, rangeIndex, descIndex, pUav->getApiHandle()->getCpuHandle(0));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DescriptorSet.h:\n  105  \n  106      void setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv);\n  107:     void setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav);\n  108      void setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler);\n  109      void setCbv(uint32_t rangeIndex, uint32_t descIndex, ConstantBufferView* pView);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n  138      }\n  139  \n  140:     void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav) {\n  141:         LOG_DBG(\"setUav\");\n  142          setSrvUavCommon<true>(mApiHandle, mLayout.getRange(rangeIndex).baseRegIndex, descIndex, pUav, mLayout.getRange(rangeIndex).type);\n  143      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  271      //auto desc = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  272  \n  273:     //desc->setUav(0, 1, uav);\n  274  \n  275      //return SharedPtr(new UnorderedAccessView(pBuffer, VK_NULL_HANDLE, firstElement, elementCount));\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  747  }\n  748  \n  749: bool ParameterBlock::setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav) {\n  750:     if (!checkDescriptorSrvUavCommon(bindLocation, pUav, \"setUav()\")) return false;\n  751  \n  752      size_t flatIndex = getFlatIndex(bindLocation);\n  ...\n 1257                              auto pView = mUAVs[flatIndex].pView;\n 1258                              if(!pView) pView = UnorderedAccessView::getNullView();\n 1259:                             pDescSet->setUav(destRangeIndex, descriptorIndex, pView.get());\n 1260                          }\n 1261                          break;\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  227          \\param[in] pSrv The unordered-access-view object to bind\n  228      */\n  229:     bool setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav);\n  230  \n  231      /** Get an SRV object.\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.cpp:\n  304      }\n  305  \n  306:     bool ShaderVar::setUav(const UnorderedAccessView::SharedPtr& pUav) const\n  307      {\n  308:         return mpBlock->setUav(mOffset, pUav);\n  309      }\n  310  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.h:\n  226          Logs an error and returns `false` if this variable doesn't point at an unordered access view.\n  227      */\n  228:     bool setUav(const UnorderedAccessView::SharedPtr& pUav) const;\n  229  \n  230      /** Get the unordered access view that this variable points to.\n\n12 matches across 8 files\n\n\nSearching 1124 files for \"setUav\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorSet.cpp:\n   99      }\n  100  \n  101:     void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav)\n  102      {\n  103          setCpuHandle(this, rangeIndex, descIndex, pUav->getApiHandle()->getCpuHandle(0));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DescriptorSet.h:\n  105  \n  106      void setSrv(uint32_t rangeIndex, uint32_t descIndex, const ShaderResourceView* pSrv);\n  107:     void setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav);\n  108      void setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler);\n  109      void setCbv(uint32_t rangeIndex, uint32_t descIndex, ConstantBufferView* pView);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n  138      }\n  139  \n  140:     void DescriptorSet::setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav) {\n  141:         LOG_DBG(\"setUav\");\n  142          setSrvUavCommon<true>(mApiHandle, mLayout.getRange(rangeIndex).baseRegIndex, descIndex, pUav, mLayout.getRange(rangeIndex).type);\n  143      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKResourceViews.cpp:\n  271      //auto desc = DescriptorSet::create(gpDevice->getCpuDescriptorPool(), layout);\n  272  \n  273:     //desc->setUav(0, 1, uav);\n  274  \n  275      //return SharedPtr(new UnorderedAccessView(pBuffer, VK_NULL_HANDLE, firstElement, elementCount));\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  747  }\n  748  \n  749: bool ParameterBlock::setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav) {\n  750:     if (!checkDescriptorSrvUavCommon(bindLocation, pUav, \"setUav()\")) return false;\n  751  \n  752      size_t flatIndex = getFlatIndex(bindLocation);\n  ...\n 1257                              auto pView = mUAVs[flatIndex].pView;\n 1258                              if(!pView) pView = UnorderedAccessView::getNullView();\n 1259:                             pDescSet->setUav(destRangeIndex, descriptorIndex, pView.get());\n 1260                          }\n 1261                          break;\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  227          \\param[in] pSrv The unordered-access-view object to bind\n  228      */\n  229:     bool setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav);\n  230  \n  231      /** Get an SRV object.\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.cpp:\n  304      }\n  305  \n  306:     bool ShaderVar::setUav(const UnorderedAccessView::SharedPtr& pUav) const\n  307      {\n  308:         return mpBlock->setUav(mOffset, pUav);\n  309      }\n  310  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.h:\n  226          Logs an error and returns `false` if this variable doesn't point at an unordered access view.\n  227      */\n  228:     bool setUav(const UnorderedAccessView::SharedPtr& pUav) const;\n  229  \n  230      /** Get the unordered access view that this variable points to.\n\n12 matches across 8 files\n\n\nSearching 1124 files for \"getDescriptorSetLayout\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RootSignature.cpp:\n  122      uint32_t setCount = pBlock->getDescriptorSetCount();\n  123      for (uint32_t s = 0; s < setCount; ++s) {\n  124:         auto& setLayout = pBlock->getDescriptorSetLayout(s);\n  125          ioDesc.addDescriptorSet(setLayout);\n  126      }\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n 1520              if (pSet) continue;\n 1521  \n 1522:             auto pSetLayout = pReflector->getDescriptorSetLayout(setIndex);\n 1523              pSet = DescriptorSet::create(gpDevice->getGpuDescriptorPool(), pSetLayout);\n 1524  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n 1255      /** Get the layout for the `index`th descriptor set that needs to be created for an object of this type.\n 1256      */\n 1257:     const DescriptorSet::Layout& getDescriptorSetLayout(uint32_t index) const { return mDescriptorSets[index].layout; }\n 1258  \n 1259      /** Describes binding information for a resource range.\n\n3 matches across 3 files\n\n\nSearching 1124 files for \"loaded sucessfully\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/Clock.cpp:\n  285                  #endif\n  286              }\n  287:             printf(\"Texture: Framework/Textures/%s loaded sucessfully !!!\\n\", tex.c_str());\n  288              return pTex;\n  289          };\n\n1 match in 1 file\n\n\nSearching 1124 files for \"releaseNullViews\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Device.cpp:\n   34      \n   35  void createNullViews();\n   36: void releaseNullViews();\n   37  \n   38  Device::SharedPtr gpDevice;\n   ..\n  169      for (uint32_t i = 0; i < kSwapChainBuffersCount; i++) mpSwapChainFbos[i].reset();\n  170      mDeferredReleases = decltype(mDeferredReleases)();\n  171:     releaseNullViews();\n  172      mpRenderContext.reset();\n  173      mpUploadHeap.reset();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/ResourceViews.cpp:\n   53  }\n   54  \n   55: void releaseNullViews() {\n   56      gNullViews = {};\n   57  }\n\n3 matches across 2 files\n\n\nSearching 1124 files for \"vkCmdBeginRenderPass\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n  151          beginInfo.pClearValues = nullptr;\n  152  \n  153:         vkCmdBeginRenderPass(cmdList, &beginInfo, VK_SUBPASS_CONTENTS_INLINE);\n  154      }\n  155  \n\n1 match in 1 file\n\n\nSearching 1124 files for \"vkCmdBeginRenderPass\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n  151          beginInfo.pClearValues = nullptr;\n  152  \n  153:         vkCmdBeginRenderPass(cmdList, &beginInfo, VK_SUBPASS_CONTENTS_INLINE);\n  154      }\n  155  \n\n1 match in 1 file\n\n\nSearching 1124 files for \"clearRtv\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  138      }\n  139  \n  140:     void RenderContext::clearRtv(const RenderTargetView* pRtv, const float4& color)\n  141      {\n  142          resourceBarrier(pRtv->getResource(), Resource::State::RenderTarget);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp:\n   48              for (uint32_t i = 0; i < Fbo::getMaxColorTargetCount(); i++) {\n   49                  if (pFbo->getColorTexture(i)) {\n   50:                     clearRtv(pFbo->getRenderTargetView(i).get(), color);\n   51                  }\n   52              }\n   ..\n   73          // Select the right clear based on the texture's binding flags\n   74          if (is_set(bindFlags, Resource::BindFlags::RenderTarget)) {\n   75:             clearRtv(pTexture->getRTV().get(), clearColor);\n   76          } else if (is_set(bindFlags, Resource::BindFlags::UnorderedAccess)) {\n   77              clearUAV(pTexture->getUAV().get(), clearColor);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n   92          \\param[in] color The clear color\n   93      */\n   94:     void clearRtv(const RenderTargetView* pRtv, const float4& color);\n   95  \n   96      /** Clear a depth-stencil view.\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   49      void clearColorImageCommon(CopyContext* pCtx, const ViewType* pView, const ClearType& clearVal);\n   50  \n   51:     void RenderContext::clearRtv(const RenderTargetView* pRtv, const float4& color) {\n   52          LOG_DBG(\"clear rtv\");\n   53          clearColorImageCommon(this, pRtv, color);\n\n/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp:\n  158      {\n  159          const auto& pRtv = mpFbo->getRenderTargetView(i).get();\n  160:         if (pRtv->getResource() != nullptr) pContext->clearRtv(pRtv, float4(0));\n  161      }\n  162  \n\n/home/max/dev/Falcor/src/RenderPasses/ImageLoader/ImageLoader.cpp:\n  105      if (!mpTex)\n  106      {\n  107:         pContext->clearRtv(pDstTex->getRTV().get(), float4(0, 0, 0, 0));\n  108          return;\n  109      }\n\n/home/max/dev/Falcor/src/RenderPasses/SkyBox/SkyBox.cpp:\n  143      mpFbo->attachDepthStencilTarget(renderData[kDepth]->asTexture());\n  144  \n  145:     pRenderContext->clearRtv(mpFbo->getRenderTargetView(0).get(), float4(0));\n  146  \n  147      if (!mpScene) return;\n\n8 matches across 7 files\n\n\nSearching 1124 files for \"endVkDraw\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n  168      }\n  169  \n  170:     static void endVkDraw(VkCommandBuffer cmdBuffer) {\n  171          LOG_ERR(\"end vk draw\");\n  172          vkCmdEndRenderPass(cmdBuffer);\n  ...\n  222          if (prepareForDraw(pState, pVars) == false) return;\n  223          vkCmdDraw(mpLowLevelData->getCommandList(), vertexCount, instanceCount, startVertexLocation, startInstanceLocation);\n  224:         endVkDraw(mpLowLevelData->getCommandList());\n  225      }\n  226  \n  ...\n  234          if (prepareForDraw(pState, pVars) == false) return;\n  235          vkCmdDrawIndexed(mpLowLevelData->getCommandList(), indexCount, instanceCount, startIndexLocation, baseVertexLocation, startInstanceLocation);\n  236:         endVkDraw(mpLowLevelData->getCommandList());\n  237      }\n  238  \n  ...\n  247          if (prepareForDraw(pState, pVars) == false) return;\n  248          vkCmdDrawIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), 1, 0);\n  249:         endVkDraw(mpLowLevelData->getCommandList());\n  250      }\n  251      \n  ...\n  255          if (prepareForDraw(pState, pVars) == false) return;\n  256          vkCmdDrawIndexedIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), 1, 0);\n  257:         endVkDraw(mpLowLevelData->getCommandList());\n  258      }\n  259  \n\n5 matches in 1 file\n\n\nSearching 1124 files for \"CommandListHandle\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  348      }\n  349  \n  350:     void drawIndirectCommon(RenderContext* pContext, const CommandListHandle& pCommandList, ID3D12CommandSignature* pCommandSig, uint32_t maxCommandCount, const Buffer* pArgBuffer, uint64_t argBufferOffset, const Buffer* pCountBuffer, uint64_t countBufferOffset)\n  351      {\n  352          pContext->resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h:\n  204      using WindowHandle = HWND;\n  205      using DeviceHandle = ID3D12DevicePtr;\n  206:     using CommandListHandle = ID3D12GraphicsCommandListPtr;\n  207      using CommandQueueHandle = ID3D12CommandQueuePtr;\n  208      using ApiCommandQueueType = D3D12_COMMAND_LIST_TYPE;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/LowLevelContextData.h:\n   60      void flush();\n   61  \n   62:     const CommandListHandle& getCommandList() const { return mpList; }\n   63      const CommandQueueHandle& getCommandQueue() const { return mpQueue; }\n   64      const CommandAllocatorHandle& getCommandAllocator() const { return mpAllocator; }\n   ..\n   68  #ifdef FALCOR_D3D12\n   69      // Used in DXR\n   70:     void setCommandList(CommandListHandle pList) { mpList = pList; }\n   71  #endif\n   72  \n   ..\n   76      LowLevelContextApiData* mpApiData = nullptr;\n   77      CommandQueueType mType;\n   78:     CommandListHandle mpList;\n   79      CommandQueueHandle mpQueue;  // Can be nullptr\n   80      CommandAllocatorHandle mpAllocator;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/FalcorVK.h:\n   85  \n   86  using DeviceHandle = VkDeviceData::SharedPtr;\n   87: using CommandListHandle = VkCommandBuffer;\n   88  using CommandQueueHandle = VkQueue;\n   89  using ApiCommandQueueType = uint32_t;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp:\n   52      }\n   53  \n   54:     void initCommandList(LowLevelContextApiData* pApiData, const CommandListHandle& list)\n   55      {\n   56          // Begin recording\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   76      }\n   77  \n   78:     void setViewports(CommandListHandle cmdList, const std::vector<GraphicsState::Viewport>& viewports) {\n   79          LOG_DBG(\"set viewports\");\n   80          static_assert(offsetof(GraphicsState::Viewport, originX) == offsetof(VkViewport, x), \"VP originX offset\");\n   ..\n   88      }\n   89  \n   90:     void setScissors(CommandListHandle cmdList, const std::vector<GraphicsState::Scissor>& scissors) {\n   91          LOG_DBG(\"set scissors\");\n   92          std::vector<VkRect2D> vkScissors(scissors.size());\n   ..\n  114      void setVao(CopyContext* pCtx, const Vao* pVao) {\n  115          LOG_DBG(\"set vao\");\n  116:         CommandListHandle cmdList = pCtx->getLowLevelData()->getCommandList();\n  117          for (uint32_t i = 0; i < pVao->getVertexBuffersCount(); i++) {\n  118              const Buffer* pVB = pVao->getVertexBuffer(i).get();\n  ...\n  132      }\n  133  \n  134:     void beginRenderPass(CommandListHandle cmdList, const Fbo* pFbo) {\n  135          LOG_DBG(\"begin render pass\");\n  136          // Begin Render Pass\n  ...\n  168      }\n  169  \n  170:     static void endVkDraw(CommandListHandle cmdList) {\n  171          LOG_ERR(\"end vk draw 1\");\n  172          vkCmdEndRenderPass(cmdBuffer);\n\n12 matches across 6 files\n\n\nSearching 1124 files for \"vkCmdDraw\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n  228          LOG_DBG(\"draw instanced\");\n  229          if (prepareForDraw(pState, pVars) == false) return;\n  230:         vkCmdDraw(mpLowLevelData->getCommandList(), vertexCount, instanceCount, startVertexLocation, startInstanceLocation);\n  231          endVkDraw(mpLowLevelData->getCommandList());\n  232      }\n  ...\n  243              return;\n  244          }\n  245:         LOG_ERR(\"call vkCmdDrawIndexed\");\n  246:         vkCmdDrawIndexed(mpLowLevelData->getCommandList(), indexCount, instanceCount, startIndexLocation, baseVertexLocation, startInstanceLocation);\n  247          LOG_ERR(\"call endVkDraw\");\n  248          endVkDraw(mpLowLevelData->getCommandList());\n  ...\n  258          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  259          if (prepareForDraw(pState, pVars) == false) return;\n  260:         vkCmdDrawIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), 1, 0);\n  261          endVkDraw(mpLowLevelData->getCommandList());\n  262      }\n  ...\n  266          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  267          if (prepareForDraw(pState, pVars) == false) return;\n  268:         vkCmdDrawIndexedIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), 1, 0);\n  269          endVkDraw(mpLowLevelData->getCommandList());\n  270      }\n\n5 matches in 1 file\n\n\nSearching 1124 files for \"TEST\" (case sensitive)\n\n/home/max/dev/Falcor/src/Externals/dear_imgui_addons/imguinodegrapheditor/imguinodegrapheditor.cpp:\n 2666  \n 2667  \n 2668: #ifndef IMGUINODEGRAPHEDITOR_NOTESTDEMO\n 2669  \n 2670  #ifndef NO_IMGUIFILESYSTEM\n ....\n 3135  }\t//nmespace ImGui\n 3136  \n 3137: #endif //IMGUINODEGRAPHEDITOR_NOTESTDEMO\n 3138  \n 3139  \n\n/home/max/dev/Falcor/src/Externals/dear_imgui_addons/imguinodegrapheditor/imguinodegrapheditor.h:\n  811  \n  812  \n  813: #ifndef IMGUINODEGRAPHEDITOR_NOTESTDEMO\n  814      void TestNodeGraphEditor(ImGui::NodeGraphEditor & nge);\n  815: #endif //IMGUINODEGRAPHEDITOR_NOTESTDEMO\n  816  \n  817  \n\n/home/max/dev/Falcor/src/Externals/GLM/CMakeLists.txt:\n   13  \n   14  option(GLM_QUIET \"No CMake Message\" OFF)\n   15: option(GLM_TEST_ENABLE_CXX_98 \"Enable C++ 98\" OFF)\n   16: option(GLM_TEST_ENABLE_CXX_11 \"Enable C++ 11\" OFF)\n   17: option(GLM_TEST_ENABLE_CXX_14 \"Enable C++ 14\" OFF)\n   18: option(GLM_TEST_ENABLE_CXX_17 \"Enable C++ 17\" OFF)\n   19: option(GLM_TEST_ENABLE_CXX_20 \"Enable C++ 20\" OFF)\n   20  \n   21  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n   22  \n   23: if(GLM_TEST_ENABLE_CXX_20)\n   24  \tset(CMAKE_CXX_STANDARD 20)\n   25  \tadd_definitions(-DGLM_FORCE_CXX2A)\n   ..\n   28  \tendif()\n   29  \n   30: elseif(GLM_TEST_ENABLE_CXX_17)\n   31  \tset(CMAKE_CXX_STANDARD 17)\n   32  \tadd_definitions(-DGLM_FORCE_CXX17)\n   ..\n   35  \tendif()\n   36  \n   37: elseif(GLM_TEST_ENABLE_CXX_14)\n   38  \tset(CMAKE_CXX_STANDARD 14)\n   39  \tadd_definitions(-DGLM_FORCE_CXX14)\n   ..\n   42  \tendif()\n   43  \n   44: elseif(GLM_TEST_ENABLE_CXX_11)\n   45  \tset(CMAKE_CXX_STANDARD 11)\n   46  \tadd_definitions(-DGLM_FORCE_CXX11)\n   ..\n   49  \tendif()\n   50  \n   51: elseif(GLM_TEST_ENABLE_CXX_98)\n   52  \tset(CMAKE_CXX_STANDARD 98)\n   53  \tadd_definitions(-DGLM_FORCE_CXX98)\n   ..\n   57  endif()\n   58  \n   59: option(GLM_TEST_ENABLE_LANG_EXTENSIONS \"Enable language extensions\" OFF)\n   60  \n   61  option(GLM_DISABLE_AUTO_DETECTION \"Enable language extensions\" OFF)\n   ..\n   65  endif()\n   66  \n   67: if(GLM_TEST_ENABLE_LANG_EXTENSIONS)\n   68  \tset(CMAKE_CXX_EXTENSIONS ON)\n   69  \tif((CMAKE_CXX_COMPILER_ID MATCHES \"Clang\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"GNU\"))\n   ..\n   81  endif()\n   82  \n   83: option(GLM_TEST_ENABLE_FAST_MATH \"Enable fast math optimizations\" OFF)\n   84: if(GLM_TEST_ENABLE_FAST_MATH)\n   85  \tif(NOT GLM_QUIET)\n   86  \t\tmessage(STATUS \"GLM: Build with fast math optimizations\")\n   ..\n   99  endif()\n  100  \n  101: option(GLM_TEST_ENABLE \"Build unit tests\" ON)\n  102: option(GLM_TEST_ENABLE_SIMD_SSE2 \"Enable SSE2 optimizations\" OFF)\n  103: option(GLM_TEST_ENABLE_SIMD_SSE3 \"Enable SSE3 optimizations\" OFF)\n  104: option(GLM_TEST_ENABLE_SIMD_SSSE3 \"Enable SSSE3 optimizations\" OFF)\n  105: option(GLM_TEST_ENABLE_SIMD_SSE4_1 \"Enable SSE 4.1 optimizations\" OFF)\n  106: option(GLM_TEST_ENABLE_SIMD_SSE4_2 \"Enable SSE 4.2 optimizations\" OFF)\n  107: option(GLM_TEST_ENABLE_SIMD_AVX \"Enable AVX optimizations\" OFF)\n  108: option(GLM_TEST_ENABLE_SIMD_AVX2 \"Enable AVX2 optimizations\" OFF)\n  109: option(GLM_TEST_FORCE_PURE \"Force 'pure' instructions\" OFF)\n  110  \n  111: if(GLM_TEST_FORCE_PURE)\n  112  \tadd_definitions(-DGLM_FORCE_PURE)\n  113  \n  ...\n  117  \tmessage(STATUS \"GLM: No SIMD instruction set\")\n  118  \n  119: elseif(GLM_TEST_ENABLE_SIMD_AVX2)\n  120  \tif((CMAKE_CXX_COMPILER_ID MATCHES \"GNU\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  121  \t\tadd_compile_options(-mavx2)\n  ...\n  127  \tmessage(STATUS \"GLM: AVX2 instruction set\")\n  128  \n  129: elseif(GLM_TEST_ENABLE_SIMD_AVX)\n  130  \tif((CMAKE_CXX_COMPILER_ID MATCHES \"GNU\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  131  \t\tadd_compile_options(-mavx)\n  ...\n  137  \tmessage(STATUS \"GLM: AVX instruction set\")\n  138  \n  139: elseif(GLM_TEST_ENABLE_SIMD_SSE4_2)\n  140  \tif((CMAKE_CXX_COMPILER_ID MATCHES \"GNU\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  141  \t\tadd_compile_options(-msse4.2)\n  ...\n  147  \tmessage(STATUS \"GLM: SSE4.2 instruction set\")\n  148  \n  149: elseif(GLM_TEST_ENABLE_SIMD_SSE4_1)\n  150  \tif((CMAKE_CXX_COMPILER_ID MATCHES \"GNU\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  151  \t\tadd_compile_options(-msse4.1)\n  ...\n  157  \tmessage(STATUS \"GLM: SSE4.1 instruction set\")\n  158  \n  159: elseif(GLM_TEST_ENABLE_SIMD_SSSE3)\n  160  \tif((CMAKE_CXX_COMPILER_ID MATCHES \"GNU\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  161  \t\tadd_compile_options(-mssse3)\n  ...\n  167  \tmessage(STATUS \"GLM: SSSE3 instruction set\")\n  168  \n  169: elseif(GLM_TEST_ENABLE_SIMD_SSE3)\n  170  \tif((CMAKE_CXX_COMPILER_ID MATCHES \"GNU\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  171  \t\tadd_compile_options(-msse3)\n  ...\n  177  \tmessage(STATUS \"GLM: SSE3 instruction set\")\n  178  \n  179: elseif(GLM_TEST_ENABLE_SIMD_SSE2)\n  180  \tif((CMAKE_CXX_COMPILER_ID MATCHES \"GNU\") OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  181  \t\tadd_compile_options(-msse2)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12Device.cpp:\n  377          if (mpApiData->isWindowOccluded)\n  378          {\n  379:             mpApiData->isWindowOccluded = (mpApiData->pSwapChain->Present(0, DXGI_PRESENT_TEST) == DXGI_STATUS_OCCLUDED);\n  380          }\n  381          return mpApiData->isWindowOccluded;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n  146              return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;\n  147          case Resource::State::DepthStencil:\n  148:             return src ? VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT : VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT;\n  149          case Resource::State::IndirectArg:\n  150              return VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT;\n\n/home/max/dev/Falcor/src/Falcor/Core/Framework.h:\n   88  #else  // _DEBUG\n   89  \n   90: #ifdef _AUTOTESTING\n   91  #define assert(a) if (!(a)) throw std::runtime_error(\"Assertion Failure\");\n   92: #else  // _AUTOTESTING\n   93  #define assert(a) ((void)(a))\n   94: #endif  // _AUTOTESTING\n   95  \n   96  #ifdef _MSC_VER\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n  391              mpGui->beginFrame();\n  392  \n  393:             ImGui::TextUnformatted(\"TEST\");\n  394  \n  395              if (mShowUI) mpRenderer->onGuiRender(mpGui.get());\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgram/RtProgram.cpp:\n  138          SharedPtr pProg = SharedPtr(new RtProgram(desc, maxPayloadSize, maxAttributesSize));\n  139          pProg->init(desc);\n  140:         pProg->addDefine(\"_MS_DISABLE_ALPHA_TEST\");\n  141:         pProg->addDefine(\"_DEFAULT_ALPHA_TEST\");\n  142  \n  143          return pProg;\n\n/home/max/dev/Falcor/src/Falcor/Scene/ShadingData.slang:\n  174  void applyAlphaTest(uint matFlags, float alpha, float threshold, float3 posW)\n  175  {\n  176: #ifndef _MS_DISABLE_ALPHA_TEST\n  177      if (evalAlphaTest(matFlags, alpha, threshold, posW))\n  178          discard;\n\n/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.cpp:\n  264      /** Simple tests of the testing framework. How meta.\n  265      */\n  266:     CPU_TEST(TestCPUTest)\n  267      {\n  268          EXPECT_EQ(1, 1);\n  ...\n  275      }\n  276  \n  277:     CPU_TEST(TestSingleEval)\n  278      {\n  279          // Make sure that arguments to test macros are only evaluated once.\n  ...\n  295      }\n  296  \n  297:     GPU_TEST(TestGPUTest)\n  298      {\n  299          ctx.createProgram(\"Testing/UnitTest.cs.slang\");\n\n/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_FALCOR_TESTING_UNITTEST_H_\n   29: #define SRC_FALCOR_TESTING_UNITTEST_H_\n   30  \n   31  #include <exception>\n   ..\n  375      the user should supply an open brace and start writing code.\n  376  */\n  377: #define CPU_TEST(Name, ...)                                                     \\\n  378      static void CPUUnitTest##Name(CPUUnitTestContext& ctx);                     \\\n  379      struct CPUUnitTestRegisterer##Name {                                        \\\n  ...\n  388  /** Macro to define a GPU unit test. The optional skip message will\n  389      disable the test from running without leading to a failure.\n  390:     The macro works in the same ways as CPU_TEST().\n  391  */\n  392: #define GPU_TEST(Name, ...)                                                     \\\n  393      static void GPUUnitTest##Name(GPUUnitTestContext& ctx);                     \\\n  394      struct GPUUnitTestRegisterer##Name {                                        \\\n  ...\n  424  } // namespace Falcor\n  425  \n  426: #endif  // SRC_FALCOR_TESTING_UNITTEST_H_\n  427  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Helpers.slang:\n  309  \n  310      /* Evaluate alpha test material modifier */\n  311: #ifdef _DEFAULT_ALPHA_TEST\n  312      return evalBasicAlphaTest(alpha, threshold);\n  313: #elif defined(_HASHED_ALPHA_TEST_ANISOTROPIC)\n  314      float hashedThreshold = calculateHashedAlpha(posW, hashedAlphaScale, true);\n  315      return evalHashedAlphaTest(alpha, threshold, hashedThreshold);\n\n/home/max/dev/Falcor/src/RenderPasses/BSDFViewer/BSDFViewer.cpp:\n   58      Program::DefineList defines =\n   59      {\n   60:         {\"_MS_DISABLE_ALPHA_TEST\", \"\"},\n   61:         {\"_DEFAULT_ALPHA_TEST\", \"\"},\n   62          {\"MATERIAL_COUNT\", \"1\"},\n   63      };\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSM.cpp:\n  199              }\n  200              pDefaultBlock->setSampler(mBindLocations.alphaMapSampler, 0, mpAlphaSampler);\n  201:             currentData.pState->getProgram()->addDefine(\"TEST_ALPHA\");\n  202          }\n  203          else\n  204          {\n  205:             currentData.pState->getProgram()->removeDefine(\"TEST_ALPHA\");\n  206          }\n  207          const auto& pRsState = getRasterizerState(currentData.pMaterial);\n  ...\n  265      Program::DefineList defines;\n  266      defines.add(\"_APPLY_PROJECTION\");\n  267:     defines.add(\"TEST_ALPHA\");\n  268      defines.add(\"_ALPHA_CHANNEL\", \"a\");\n  269  \n  ...\n  287  \n  288      Program::DefineList defines;\n  289:     defines.add(\"TEST_ALPHA\");\n  290      defines.add(\"_CASCADE_COUNT\", std::to_string(mCsmData.cascadeCount));\n  291      defines.add(\"_ALPHA_CHANNEL\", \"a\");\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/DepthPass.slang:\n   67  void psMain(ShadowPassVSOut pIn)\n   68  {\n   69: #ifdef TEST_ALPHA\n   70      float alpha = alphaMap.Sample(alphaSampler, pIn.texC)._ALPHA_CHANNEL;\n   71      if(alpha < alphaThreshold)\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/ShadowPass.slang:\n  107  #endif\n  108  {\n  109: #ifdef TEST_ALPHA\n  110      float alpha = alphaMap.Sample(alphaSampler, pIn.texC)._ALPHA_CHANNEL;\n  111      if(alpha < alphaThreshold)\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang:\n   75      VertexData v = prepareVertexData(vsOut, faceNormal);\n   76  \n   77: #if !DISABLE_ALPHA_TEST\n   78      if (alphaTest(v, gScene.materials[vsOut.materialID], gScene.materialResources[vsOut.materialID])) discard;\n   79  #endif\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp:\n   82  \n   83      // Create raster program\n   84:     Program::DefineList defines = { { \"_DEFAULT_ALPHA_TEST\", \"\" } };\n   85      Program::Desc desc;\n   86      desc.addShaderLibrary(kProgramFile).vsEntry(\"vsMain\").psEntry(\"psMain\");\n   ..\n  181      // Set program defines.\n  182      mRaster.pProgram->addDefine(\"USE_IRAY_BENT_NORMALS\", mUseBentShadingNormals ? \"1\" : \"0\");\n  183:     mRaster.pProgram->addDefine(\"DISABLE_ALPHA_TEST\", mDisableAlphaTest ? \"1\" : \"0\");\n  184  \n  185      // For optional I/O resources, set 'is_valid_<name>' defines to inform the program of which ones it can access.\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp:\n  171      mRaytrace.pProgram->addDefine(\"USE_RAY_DIFFERENTIALS\", mLODMode == LODMode::RayDifferentials ? \"1\" : \"0\");\n  172      mRaytrace.pProgram->addDefine(\"USE_IRAY_BENT_NORMALS\", mUseBentShadingNormals ? \"1\" : \"0\");\n  173:     mRaytrace.pProgram->addDefine(\"DISABLE_ALPHA_TEST\", mDisableAlphaTest ? \"1\" : \"0\");\n  174  \n  175      // For optional I/O resources, set 'is_valid_<name>' defines to inform the program of which ones it can access.\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRT.rt.slang:\n   71      inout RayData rayData : SV_RayPayload, BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   72  {\n   73: #if !DISABLE_ALPHA_TEST\n   74      // Alpha test for non-opaque geometry.\n   75      VertexData v = getVertexData(hitParams, PrimitiveIndex(), attribs);\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/VBuffer/VBufferRaster.3d.slang:\n   64      VBufferPSOut psOut;\n   65  \n   66: #if !DISABLE_ALPHA_TEST\n   67      // Alpha test.\n   68      // With the default alpha test, only texC of VertexData is needed.\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp:\n   63  \n   64      // Create raster program\n   65:     Program::DefineList defines = { { \"_DEFAULT_ALPHA_TEST\", \"\" } };\n   66      Program::Desc desc;\n   67      desc.addShaderLibrary(kProgramFile).vsEntry(\"vsMain\").psEntry(\"psMain\");\n   ..\n  120  \n  121      // Set program defines.\n  122:     mRaster.pProgram->addDefine(\"DISABLE_ALPHA_TEST\", mDisableAlphaTest ? \"1\" : \"0\");\n  123  \n  124      // Create program vars.\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp:\n  116      // Set program defines.\n  117      mRaytrace.pProgram->addDefine(\"USE_DEPTH_OF_FIELD\", useDOF ? \"1\" : \"0\");\n  118:     mRaytrace.pProgram->addDefine(\"DISABLE_ALPHA_TEST\", mDisableAlphaTest ? \"1\" : \"0\");\n  119  \n  120      // Create program vars.\n\n/home/max/dev/Falcor/src/RenderPasses/GBuffer/VBuffer/VBufferRT.rt.slang:\n   59      BuiltInTriangleIntersectionAttributes attribs : SV_IntersectionAttributes)\n   60  {\n   61: #if !DISABLE_ALPHA_TEST\n   62      // Alpha test for non-opaque geometry.\n   63      VertexData v = getVertexData(hitParams, PrimitiveIndex(), attribs);\n\n/home/max/dev/Falcor/src/Tools/CMakeLists.txt:\n   40      set( SHADERS_OUTPUT_DIRECTORY \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Shaders\" )\n   41      file( MAKE_DIRECTORY ${SHADERS_OUTPUT_DIRECTORY} )\n   42:     set( TEST_SHADERS_DIRECTORY \"${tool_dir}/Tests\" )\n   43      file(\n   44:         COPY ${TEST_SHADERS_DIRECTORY}\n   45          DESTINATION ${SHADERS_OUTPUT_DIRECTORY} \n   46          FILES_MATCHING\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/FalcorTest.h:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: #ifndef SRC_TOOLS_FALCORTEST_FALCORTEST_H_\n   29: #define SRC_TOOLS_FALCORTEST_FALCORTEST_H_\n   30  \n   31  #include \"Falcor/Falcor.h\"\n   ..\n   40  };\n   41  \n   42: #endif  // SRC_TOOLS_FALCORTEST_FALCORTEST_H_\n   43  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp:\n   86          The test copies the data to a staging buffer on the GPU.\n   87      */\n   88:     GPU_TEST(CopyBufferCpuAccessWrite) {\n   89          auto pBuf = createTestBuffer(Buffer::CpuAccess::Write);\n   90  \n   ..\n  111      /** Test setBlob() into buffer with CPU write access.\n  112      */\n  113:     GPU_TEST(SetBlobBufferCpuAccessWrite, \"Disabled due to issue with SRV/UAVs for resources on the upload heap (#638)\") {\n  114          auto pBuf = createTestBuffer(Buffer::CpuAccess::Write, false);\n  115  \n  ...\n  135      /** Test that GPU reads from buffer created without CPU access works.\n  136      */\n  137:     GPU_TEST(BufferCpuAccessNone) {\n  138          testBufferReadback(ctx, Buffer::CpuAccess::None);\n  139      }\n  ...\n  141      /** Test that GPU reads from buffer created with CPU read access works.\n  142      */\n  143:     GPU_TEST(BufferCpuAccessRead) {\n  144          testBufferReadback(ctx, Buffer::CpuAccess::Read);\n  145      }\n  ...\n  150      /** Test that GPU reads from buffer created with CPU write access works.\n  151      */\n  152:     GPU_TEST(BufferCpuAccessWrite, \"Disabled due to issue with SRV/UAVs for resources on the upload heap (#638)\") {\n  153          testBufferReadback(ctx, Buffer::CpuAccess::Write);\n  154      }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp:\n  131      }\n  132  \n  133:     GPU_TEST(RawBuffer)\n  134      {\n  135          auto testFunc = testBuffer<Type::ByteAddressBuffer>;\n  ...\n  144      }\n  145  \n  146:     GPU_TEST(TypedBuffer)\n  147      {\n  148          auto testFunc = testBuffer<Type::TypedBuffer>;\n  ...\n  157      }\n  158  \n  159:     GPU_TEST(StructuredBuffer)\n  160      {\n  161          auto testFunc = testBuffer<Type::StructuredBuffer>;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/ConstantBufferTests.cpp:\n   32      /** GPU test for builtin constant buffer using cbuffer syntax.\n   33      */\n   34:     GPU_TEST(BuiltinConstantBuffer1)\n   35      {\n   36          ctx.createProgram(\"Tests/Core/ConstantBufferTests.cs.slang\", \"testCbuffer1\", Program::DefineList(), Shader::CompilerFlags::None);\n   ..\n   50      /** GPU test for builtin constant buffer using ConstantBuffer<> syntax.\n   51      */\n   52:     GPU_TEST(BuiltinConstantBuffer2)\n   53      {\n   54          ctx.createProgram(\"Tests/Core/ConstantBufferTests.cs.slang\", \"testCbuffer2\", Program::DefineList(), Shader::CompilerFlags::None);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n  153  \n  154      #ifdef FALCOR_VK\n  155:     GPU_TEST(RootBufferParamBlockSRV_450) { testRootBuffer(ctx, \"450\", false); }\n  156:     GPU_TEST(RootBufferParamBlockUAV_450) { testRootBuffer(ctx, \"450\", true); }\n  157      #else\n  158:     GPU_TEST(RootBufferParamBlockSRV_5_1) { testRootBuffer(ctx, \"5_1\", false); }\n  159:     GPU_TEST(RootBufferParamBlockUAV_5_1) { testRootBuffer(ctx, \"5_1\", true); }\n  160  \n  161:     GPU_TEST(RootBufferParamBlockSRV_6_0) { testRootBuffer(ctx, \"6_0\", false); }\n  162:     GPU_TEST(RootBufferParamBlockUAV_6_0) { testRootBuffer(ctx, \"6_0\", true); }\n  163  \n  164:     GPU_TEST(RootBufferParamBlockSRV_6_3) { testRootBuffer(ctx, \"6_3\", false); }\n  165:     GPU_TEST(RootBufferParamBlockUAV_6_3) { testRootBuffer(ctx, \"6_3\", true); }\n  166      #endif\n  167  }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   98  \n   99      #ifdef FALCOR_VK\n  100:     GPU_TEST(RootBufferStructSRV_450) { testRootBufferInStruct(ctx, \"450\", false); }\n  101:     GPU_TEST(RootBufferStructUAV_450) { testRootBufferInStruct(ctx, \"450\", true); }\n  102      #else\n  103:     GPU_TEST(RootBufferStructSRV_5_1) { testRootBufferInStruct(ctx, \"5_1\", false); }\n  104:     GPU_TEST(RootBufferStructUAV_5_1) { testRootBufferInStruct(ctx, \"5_1\", true); }\n  105  \n  106:     GPU_TEST(RootBufferStructSRV_6_0) { testRootBufferInStruct(ctx, \"6_0\", false); }\n  107:     GPU_TEST(RootBufferStructUAV_6_0) { testRootBufferInStruct(ctx, \"6_0\", true); }\n  108  \n  109:     GPU_TEST(RootBufferStructSRV_6_3) { testRootBufferInStruct(ctx, \"6_3\", false); }\n  110:     GPU_TEST(RootBufferStructUAV_6_3) { testRootBufferInStruct(ctx, \"6_3\", true); }\n  111      #endif\n  112  }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n  145  \n  146      #ifdef FALCOR_VK\n  147:     GPU_TEST(RootBufferSRV_450) { testRootBuffer(ctx, \"450\", false); }\n  148:     GPU_TEST(RootBufferUAV_450) { testRootBuffer(ctx, \"450\", true); }\n  149      #else\n  150:     GPU_TEST(RootBufferSRV_5_1) { testRootBuffer(ctx, \"5_1\", false); }\n  151:     GPU_TEST(RootBufferUAV_5_1) { testRootBuffer(ctx, \"5_1\", true); }\n  152  \n  153:     GPU_TEST(RootBufferSRV_6_0) { testRootBuffer(ctx, \"6_0\", false); }\n  154:     GPU_TEST(RootBufferUAV_6_0) { testRootBuffer(ctx, \"6_0\", true); }\n  155  \n  156:     GPU_TEST(RootBufferSRV_6_3) { testRootBuffer(ctx, \"6_3\", false); }\n  157:     GPU_TEST(RootBufferUAV_6_3) { testRootBuffer(ctx, \"6_3\", true); }\n  158      #endif \n  159  }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/UserConstantBufferTests.cpp:\n   40      /** GPU test for user-allocated constant buffers.\n   41      */\n   42:     GPU_TEST(UserConstantBuffer)\n   43      {\n   44          ctx.createProgram(\"Tests/Core/UserConstantBufferTests.cs.slang\", \"test\", Program::DefineList(), Shader::CompilerFlags::None);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/DebugPasses/InvalidPixelDetectionTests.cpp:\n   30  namespace Falcor\n   31  {\n   32:     GPU_TEST(InvalidPixelDetectionPass)\n   33      {\n   34          RenderPassLibrary::instance().loadLibrary(\"DebugPasses.dll\");\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Sampling/PseudorandomTests.cpp:\n   92      /** GPU test for Xoshiro pseudorandom number generator.\n   93      */\n   94:     GPU_TEST(XoshiroPRNG)\n   95      {\n   96          // Create random seed (128 bits per instance).\n   ..\n  126      /** GPU test for SplitMix64 pseudorandom number generator.\n  127      */\n  128:     GPU_TEST(SplitMixPRNG)\n  129      {\n  130          // Create random seed (64 bits per instance).\n  ...\n  157      /** GPU test for LCG pseudorandom number generator.\n  158      */\n  159:     GPU_TEST(LCGPRNG)\n  160      {\n  161          // Create random seed (32 bits per instance).\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Sampling/SampleGeneratorTests.cpp:\n  159      */\n  160  \n  161:     GPU_TEST(SampleGenerator_TinyUniform)\n  162      {\n  163          testSampleGenerator(ctx, SAMPLE_GENERATOR_TINY_UNIFORM, 0.0025, true);\n  164      }\n  165  \n  166:     GPU_TEST(SampleGenerator_Uniform)\n  167      {\n  168          testSampleGenerator(ctx, SAMPLE_GENERATOR_UNIFORM, 0.002, true);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Scene/EnvProbeTests.cpp:\n   37      }\n   38  \n   39:     GPU_TEST(EnvProbe)\n   40      {\n   41          // Test loading a light probe.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/ShadingUtils/RaytracingTests.cpp:\n   60      }\n   61  \n   62:     GPU_TEST(ComputeRayOrigin)\n   63      {\n   64          const uint32_t n = 1 << 16;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/ShadingUtils/ShadingUtilsTests.cpp:\n  132  \n  133      // Just check the first four values.\n  134:     GPU_TEST(RadicalInverse)\n  135      {\n  136          ctx.createProgram(\"Tests/ShadingUtils/ShadingUtilsTests.cs.slang\", \"testRadicalInverse\");\n  ...\n  147      }\n  148  \n  149:     GPU_TEST(Random)\n  150      {\n  151          ctx.createProgram(\"Tests/ShadingUtils/ShadingUtilsTests.cs.slang\", \"testRand\");\n  ...\n  176      }\n  177  \n  178:     GPU_TEST(SphericalCoordinates)\n  179      {\n  180          ctx.createProgram(\"Tests/ShadingUtils/ShadingUtilsTests.cs.slang\", \"testSphericalCoordinates\");\n  ...\n  198      }\n  199  \n  200:     GPU_TEST(RaySphereIntersection)\n  201      {\n  202          std::mt19937 rng;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp:\n   75      }\n   76  \n   77:     GPU_TEST(StructuredBufferLoadUInt64)\n   78      {\n   79          for (auto sm : kShaderModels) test(ctx, sm, false);\n   80      }\n   81  \n   82:     GPU_TEST(RWStructuredBufferLoadUInt64)\n   83      {\n   84          for (auto sm : kShaderModels) test(ctx, sm, true);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp:\n   50  \n   51      #ifdef FALCOR_VK\n   52:     GPU_TEST(ShaderModel5_0) { test(ctx, \"450\"); }\n   53      #else\n   54:     GPU_TEST(ShaderModel5_0) { test(ctx, \"5_0\"); }\n   55:     GPU_TEST(ShaderModel5_1) { test(ctx, \"5_1\"); }\n   56:     GPU_TEST(ShaderModel6_0) { test(ctx, \"6_0\"); }\n   57:     GPU_TEST(ShaderModel6_1) { test(ctx, \"6_1\"); }\n   58:     GPU_TEST(ShaderModel6_2) { test(ctx, \"6_2\"); }\n   59:     GPU_TEST(ShaderModel6_3) { test(ctx, \"6_3\"); }\n   60:     GPU_TEST(ShaderModel6_4, \"Requires shader model 6.4\") { test(ctx, \"6_4\"); }\n   61:     GPU_TEST(ShaderModel6_5, \"Requires shader model 6.5\") { test(ctx, \"6_5\"); }\n   62      #endif\n   63  }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangMutatingTests.cpp:\n   30  namespace Falcor\n   31  {\n   32:     GPU_TEST(SlangMutating)\n   33      {\n   34          #ifdef FALCOR_VK\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp:\n   83          but certain uses (flags we OR together etc.) must match.\n   84      */\n   85:     GPU_TEST(SlangEnum)\n   86      {\n   87          testEnum(ctx, \"\");      // Use default shader model for the unit test system\n   ..\n  102          https://github.com/Microsoft/DirectXShaderCompiler/wiki/16-Bit-Scalar-Types\n  103      */\n  104:     GPU_TEST(SlangScalarTypes)\n  105      {\n  106          const uint32_t maxTests = 100;\n  ...\n  161      /** Test Slang default initializers for basic types and structs.\n  162      */\n  163:     GPU_TEST(SlangDefaultInitializers)\n  164      {\n  165          const uint32_t maxTests = 100, usedTests = 35;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/TraceRayFlags.cpp:\n   63  }  // namespace\n   64  \n   65: GPU_TEST(TraceRayFlagsDXR1_0) {\n   66      testRayFlags(ctx, getRayFlags1_0(), {}, \"6_3\");\n   67  }\n   68  #if 0\n   69: GPU_TEST(TraceRayFlagsDXR1_1, \"Requires shader model 6.5\") {\n   70      testRayFlags(ctx, getRayFlags1_1(), { { \"DXR_1_1\", \"\"} }, \"6_5\");\n   71  }\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/TraceRayInline.cpp:\n   31  namespace Falcor {\n   32  \n   33: GPU_TEST(testTraceRayInlineAPI, \"Requires shader model 6.5\") {\n   34      // We don't actually run the program, just make sure it compiles.\n   35      ctx.createProgram(\"Tests/Slang/TraceRayInline.cs.slang\", \"testTraceRayInlineAPI\", Program::DefineList(), Shader::CompilerFlags::None, \"6_5\");\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp:\n   71      }\n   72  \n   73:     GPU_TEST(WaveGetLaneCount)\n   74      {\n   75          #ifdef FALCOR_VK\n   ..\n   92      }\n   93  \n   94:     GPU_TEST(WaveMatch, \"Requires shader model 6.5\")\n   95      {\n   96          ctx.createProgram(\"Tests/Slang/WaveOps.cs.slang\", \"testWaveMatch\", Program::DefineList(), Shader::CompilerFlags::None, \"6_5\");\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/AABBTests.cpp:\n   43      }\n   44  \n   45:     GPU_TEST(AABB)\n   46      {\n   47          const uint32_t resultSize = 100;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/AlignedAllocatorTests.cpp:\n   36      };\n   37  \n   38:     CPU_TEST(AlignedAllocator)\n   39      {\n   40          AlignedAllocator alloc;\n   ..\n   69      }\n   70  \n   71:     CPU_TEST(AlignedAllocatorNoCacheLine)\n   72      {\n   73          AlignedAllocator alloc;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/BitonicSortTests.cpp:\n   74  \n   75  #if _ENABLE_NVAPI\n   76:     GPU_TEST(BitonicSort)\n   77  #else\n   78:     GPU_TEST(BitonicSort, \"Requires NVAPI\")\n   79  #endif\n   80      {\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/BitTricksTests.cpp:\n   47      }\n   48  \n   49:     GPU_TEST(BitInterleave)\n   50      {\n   51          const uint32_t tests = 5;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/ColorUtilsTests.cpp:\n   44      }\n   45  \n   46:     CPU_TEST(ColorTransforms)\n   47      {\n   48          const uint32_t n = 10000;\n   ..\n   75      }\n   76  \n   77:     CPU_TEST(WhiteBalance)\n   78      {\n   79          const float3 white = { 1, 1, 1 };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/HalfUtilsTests.cpp:\n  206      // This test currently fails due to difference in rounding modes for f32tof16() between CPU and GPU.\n  207      // TODO: Currently disabled until we figure out the rounding modes and have a matching CPU library.\n  208:     GPU_TEST(FP32ToFP16Conversion, \"Disabled due to lacking fp16 library (#391)\")\n  209      {\n  210          std::vector<float> testData = generateFP16TestData(ctx);\n  ...\n  226      }\n  227  \n  228:     GPU_TEST(FP16ToFP32Conversion)\n  229      {\n  230          std::vector<uint32_t> testData = generateAllFiniteFP16();\n  ...\n  248      /** Test our CPU-side functions for f32tof16 conversion with conservative rounding.\n  249      */\n  250:     CPU_TEST(FP32ToFP16ConservativeRoundingCPU)\n  251      {\n  252          // Test assumptions on fp16 encoding.\n  ...\n  280          back to fp32 on the CPU, to avoid shader compiler optimizations for interfering with the results.\n  281      */\n  282:     GPU_TEST(FP32ToFP16ConservativeRoundingGPU)\n  283      {\n  284          std::vector<float> testData = generateFP16TestData(ctx);\n  ...\n  315      // TODO: Currently disabled until we figure out the rounding modes and have a matching CPU library. See #391.\n  316      // TODO: Look into the spec (is it even strictly spec'ed in HLSL?) and add utility function to detect the mode used.\n  317:     GPU_TEST(FP16RoundingModeGPU, \"Disabled due to lacking fp16 library (#391)\")\n  318      {\n  319          std::vector<float> input, expected;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/HashUtilsTests.cpp:\n   32  // We test a subset of the space instead. The full tests are useful to re-run if the hash is modified.\n   33  // Running the full GPU test may require increasing the TDR delay.\n   34: //#define RUN_PERFECT_HASH_TESTS\n   35  \n   36  namespace Falcor\n   ..\n   52      }\n   53  \n   54:     GPU_TEST(JenkinsHash_CompareToCPU)\n   55      {\n   56          // Allocate results buffer (64k dwords).\n   ..\n   73      }\n   74  \n   75: #ifdef RUN_PERFECT_HASH_TESTS\n   76:     CPU_TEST(JenkinsHash_PerfectHashCPU)\n   77  #else\n   78:     CPU_TEST(JenkinsHash_PerfectHashCPU, \"Disabled for performance reasons\")\n   79  #endif\n   80      {\n   ..\n   91      }\n   92  \n   93: #ifdef RUN_PERFECT_HASH_TESTS\n   94:     GPU_TEST(JenkinsHash_PerfectHashGPU)\n   95  #else\n   96:     GPU_TEST(JenkinsHash_PerfectHashGPU, \"Disabled for performance reasons\")\n   97  #endif\n   98      {\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/MathHelpersTests.cpp:\n  173      }\n  174  \n  175:     GPU_TEST(BoxSubtendedConeAngleCenter)\n  176      {\n  177          testKnownBBoxes(ctx, \"testBoundingConeAngleCenter\");\n  178      }\n  179  \n  180:     GPU_TEST(BoxSubtendedConeAngleAverage)\n  181      {\n  182          testKnownBBoxes(ctx, \"testBoundingConeAngleAverage\");\n  ...\n  186      // cos(theta) = -1 for points that are close enough to the bounding box that\n  187      // their cos(theta) value is < 0.\n  188:     GPU_TEST(BoxSubtendedConeAngleCenterRandoms, \"Disabled as bounding cone is over-conservative (#699)\")\n  189      {\n  190          testRandomBBoxes(ctx, \"testBoundingConeAngleCenter\");\n  191      }\n  192  \n  193:     GPU_TEST(BoxSubtendedConeAngleAverageRandoms)\n  194      {\n  195          testRandomBBoxes(ctx, \"testBoundingConeAngleAverage\");\n  196      }\n  197  \n  198:     GPU_TEST(SphereSubtendedAngle)\n  199      {\n  200          // Generate test data...\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/ParallelReductionTests.cpp:\n  217      }\n  218  \n  219:     GPU_TEST(ParallelReduction)\n  220      {\n  221          // Quick test of the snorm/unorm data types we use.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/PrefixSumTests.cpp:\n   89      }\n   90  \n   91:     GPU_TEST(PrefixSum)\n   92      {\n   93          // Quick test of our reference function.\n\n/home/max/dev/Falcor/src/Tools/ImageCompare/args.h:\n   47  #include <cstddef>\n   48  \n   49: #ifdef ARGS_TESTNAMESPACE\n   50  namespace argstest\n   51  {\n\n181 matches across 57 files\n\n\nSearching 1124 files for \"VK_IMAGE_LAYOUT_PREINITIALIZED.\" (case sensitive)\n\n0 matches\n\nSearching 1124 files for \"clear fbo\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp:\n   40  \n   41      void RenderContext::clearFbo(const Fbo* pFbo, const float4& color, float depth, uint8_t stencil, FboAttachmentType flags) {\n   42:         LOG_DBG(\"clear fbo\");\n   43          bool hasDepthStencilTexture = pFbo->getDepthStencilTexture() != nullptr;\n   44          ResourceFormat depthStencilFormat = hasDepthStencilTexture ? pFbo->getDepthStencilTexture()->getFormat() : ResourceFormat::Unknown;\n\n1 match in 1 file\n\n\nSearching 1124 files for \"VK_IMAGE_LAYOUT\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n  115          range.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  116  \n  117:         vkCmdClearColorImage(pCtx->getLowLevelData()->getCommandList(), pView->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &colVal, 1, &range);\n  118      }\n  119  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n   63          {\n   64          case Resource::State::Undefined:\n   65:             return VK_IMAGE_LAYOUT_UNDEFINED;\n   66          case Resource::State::PreInitialized:\n   67:             return VK_IMAGE_LAYOUT_PREINITIALIZED;\n   68          case Resource::State::Common:\n   69          case Resource::State::UnorderedAccess:\n   70:             return VK_IMAGE_LAYOUT_GENERAL;\n   71          case Resource::State::RenderTarget:\n   72:             return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n   73          case Resource::State::DepthStencil:\n   74:             return VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n   75          case Resource::State::ShaderResource:\n   76:             return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;\n   77          case Resource::State::ResolveDest:\n   78          case Resource::State::CopyDest:\n   79:             return VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;\n   80          case Resource::State::ResolveSource:\n   81          case Resource::State::CopySource:\n   82:             return VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;\n   83              break;\n   84          case Resource::State::Present:\n   85:             return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;\n   86          default:\n   87              should_not_get_here();\n   ..\n  200          pCtx->resourceBarrier(pTexture, Resource::State::CopyDest);\n  201          pCtx->resourceBarrier(pStaging.get(), Resource::State::CopySource);\n  202:         vkCmdCopyBufferToImage(pCtx->getLowLevelData()->getCommandList(), pStaging->getApiHandle(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &vkCopy);\n  203      }\n  204  \n  ...\n  231          pCtx->resourceBarrier(pTexture, Resource::State::CopySource);\n  232          pCtx->resourceBarrier(pThis->mpBuffer.get(), Resource::State::CopyDest);\n  233:         vkCmdCopyImageToBuffer(pCtx->getLowLevelData()->getCommandList(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pThis->mpBuffer->getApiHandle(), 1, &vkCopy);\n  234  \n  235          // Create a fence and signal\n  ...\n  373              resourceBarrier(pDst, Resource::State::CopyDest);\n  374              resourceBarrier(pSrc, Resource::State::CopySource);\n  375:             vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, mipCount, regions.data());\n  376          }\n  377          mCommandsPending = true;\n  ...\n  398          region.extent.height = pDst->getHeight(mipLevel);\n  399          region.extent.depth = pDst->getDepth(mipLevel);\n  400:         vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &region);\n  401  \n  402          mCommandsPending = true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n  102              LOG_DBG(\"VkResourceType::Image\");\n  103              assert(handle.getType() == VkResourceType::Image);\n  104:             image.imageLayout = isUav ? VK_IMAGE_LAYOUT_GENERAL : VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;\n  105              image.imageView = handle;\n  106              image.sampler = nullptr;\n  ...\n  130      void DescriptorSet::setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler) {\n  131          VkDescriptorImageInfo info;\n  132:         info.imageLayout = VK_IMAGE_LAYOUT_GENERAL;\n  133          info.imageView = nullptr;\n  134          info.sampler = pSampler->getApiHandle();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   72          range.aspectMask |= clearStencil ? VK_IMAGE_ASPECT_STENCIL_BIT : 0;\n   73  \n   74:         vkCmdClearDepthStencilImage(mpLowLevelData->getCommandList(), pDsv->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &val, 1, &range);\n   75          mCommandsPending = true;\n   76      }\n   ..\n  307              resolve.extent.depth = 1;\n  308  \n  309:             vkCmdResolveImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &resolve);\n  310          } else {\n  311              VkImageBlit blt;\n  ...\n  315              // Vulkan spec requires VK_FILTER_NEAREST if blit source is a depth and/or stencil format\n  316              VkFilter vkFilter = isDepthStencilFormat(pTexture->getFormat()) ? VK_FILTER_NEAREST : getVkFilter(filter);\n  317:             vkCmdBlitImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &blt, vkFilter);\n  318          }\n  319          mCommandsPending = true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKState.cpp:\n  563                  desc.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE; // This is a color attachment\n  564                  desc.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE; // This is a color attachment\n  565:                 desc.initialLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n  566:                 desc.finalLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n  567              }\n  568          }\n  ...\n  585              depthDesc.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD;\n  586              depthDesc.stencilStoreOp = VK_ATTACHMENT_STORE_OP_STORE;\n  587:             depthDesc.initialLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n  588:             depthDesc.finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n  589          }\n  590  \n  ...\n  601              VkAttachmentReference& depthRef = infoOut.attachmentRefs.back();\n  602              depthRef.attachment = regToAttachmentIndex.back();\n  603:             depthRef.layout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n  604              subpassDesc.pDepthStencilAttachment = &infoOut.attachmentRefs.back();\n  605          }\n  ...\n  612                  VkAttachmentReference& ref = infoOut.attachmentRefs[i];\n  613                  ref.attachment = regToAttachmentIndex[i];\n  614:                 ref.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n  615              }\n  616  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  124          imageInfo.format = getVkFormat(mFormat);\n  125          imageInfo.imageType = getVkImageType(mType);\n  126:         imageInfo.initialLayout = pData ? VK_IMAGE_LAYOUT_PREINITIALIZED : VK_IMAGE_LAYOUT_UNDEFINED;\n  127          imageInfo.mipLevels = std::min(mMipLevels, getMaxMipCount(imageInfo.extent));\n  128          imageInfo.pQueueFamilyIndices = nullptr;\n\n32 matches across 6 files\n\n\nSearching 1124 files for \"VK_IMAGE_LAYOUT\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n  115          range.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  116  \n  117:         vkCmdClearColorImage(pCtx->getLowLevelData()->getCommandList(), pView->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &colVal, 1, &range);\n  118      }\n  119  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n   63          {\n   64          case Resource::State::Undefined:\n   65:             return VK_IMAGE_LAYOUT_UNDEFINED;\n   66          case Resource::State::PreInitialized:\n   67:             return VK_IMAGE_LAYOUT_PREINITIALIZED;\n   68          case Resource::State::Common:\n   69          case Resource::State::UnorderedAccess:\n   70:             return VK_IMAGE_LAYOUT_GENERAL;\n   71          case Resource::State::RenderTarget:\n   72:             return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n   73          case Resource::State::DepthStencil:\n   74:             return VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n   75          case Resource::State::ShaderResource:\n   76:             return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;\n   77          case Resource::State::ResolveDest:\n   78          case Resource::State::CopyDest:\n   79:             return VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;\n   80          case Resource::State::ResolveSource:\n   81          case Resource::State::CopySource:\n   82:             return VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;\n   83              break;\n   84          case Resource::State::Present:\n   85:             return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;\n   86          default:\n   87              should_not_get_here();\n   ..\n  200          pCtx->resourceBarrier(pTexture, Resource::State::CopyDest);\n  201          pCtx->resourceBarrier(pStaging.get(), Resource::State::CopySource);\n  202:         vkCmdCopyBufferToImage(pCtx->getLowLevelData()->getCommandList(), pStaging->getApiHandle(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &vkCopy);\n  203      }\n  204  \n  ...\n  231          pCtx->resourceBarrier(pTexture, Resource::State::CopySource);\n  232          pCtx->resourceBarrier(pThis->mpBuffer.get(), Resource::State::CopyDest);\n  233:         vkCmdCopyImageToBuffer(pCtx->getLowLevelData()->getCommandList(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pThis->mpBuffer->getApiHandle(), 1, &vkCopy);\n  234  \n  235          // Create a fence and signal\n  ...\n  373              resourceBarrier(pDst, Resource::State::CopyDest);\n  374              resourceBarrier(pSrc, Resource::State::CopySource);\n  375:             vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, mipCount, regions.data());\n  376          }\n  377          mCommandsPending = true;\n  ...\n  398          region.extent.height = pDst->getHeight(mipLevel);\n  399          region.extent.depth = pDst->getDepth(mipLevel);\n  400:         vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &region);\n  401  \n  402          mCommandsPending = true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n  102              LOG_DBG(\"VkResourceType::Image\");\n  103              assert(handle.getType() == VkResourceType::Image);\n  104:             image.imageLayout = isUav ? VK_IMAGE_LAYOUT_GENERAL : VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;\n  105              image.imageView = handle;\n  106              image.sampler = nullptr;\n  ...\n  130      void DescriptorSet::setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler) {\n  131          VkDescriptorImageInfo info;\n  132:         info.imageLayout = VK_IMAGE_LAYOUT_GENERAL;\n  133          info.imageView = nullptr;\n  134          info.sampler = pSampler->getApiHandle();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   72          range.aspectMask |= clearStencil ? VK_IMAGE_ASPECT_STENCIL_BIT : 0;\n   73  \n   74:         vkCmdClearDepthStencilImage(mpLowLevelData->getCommandList(), pDsv->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &val, 1, &range);\n   75          mCommandsPending = true;\n   76      }\n   ..\n  307              resolve.extent.depth = 1;\n  308  \n  309:             vkCmdResolveImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &resolve);\n  310          } else {\n  311              VkImageBlit blt;\n  ...\n  315              // Vulkan spec requires VK_FILTER_NEAREST if blit source is a depth and/or stencil format\n  316              VkFilter vkFilter = isDepthStencilFormat(pTexture->getFormat()) ? VK_FILTER_NEAREST : getVkFilter(filter);\n  317:             vkCmdBlitImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &blt, vkFilter);\n  318          }\n  319          mCommandsPending = true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKState.cpp:\n  563                  desc.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE; // This is a color attachment\n  564                  desc.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE; // This is a color attachment\n  565:                 desc.initialLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n  566:                 desc.finalLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n  567              }\n  568          }\n  ...\n  585              depthDesc.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD;\n  586              depthDesc.stencilStoreOp = VK_ATTACHMENT_STORE_OP_STORE;\n  587:             depthDesc.initialLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n  588:             depthDesc.finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n  589          }\n  590  \n  ...\n  601              VkAttachmentReference& depthRef = infoOut.attachmentRefs.back();\n  602              depthRef.attachment = regToAttachmentIndex.back();\n  603:             depthRef.layout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n  604              subpassDesc.pDepthStencilAttachment = &infoOut.attachmentRefs.back();\n  605          }\n  ...\n  612                  VkAttachmentReference& ref = infoOut.attachmentRefs[i];\n  613                  ref.attachment = regToAttachmentIndex[i];\n  614:                 ref.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n  615              }\n  616  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  124          imageInfo.format = getVkFormat(mFormat);\n  125          imageInfo.imageType = getVkImageType(mType);\n  126:         imageInfo.initialLayout = pData ? VK_IMAGE_LAYOUT_PREINITIALIZED : VK_IMAGE_LAYOUT_UNDEFINED;\n  127          imageInfo.mipLevels = std::min(mMipLevels, getMaxMipCount(imageInfo.extent));\n  128          imageInfo.pQueueFamilyIndices = nullptr;\n\n32 matches across 6 files\n\n\nSearching 1124 files for \"kOutfileDirSwitch\" (case sensitive)\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n   56  const char* kEditorExecutableName = \"RenderGraphEditor\";\n   57  const char* kEditorSwitch = \"editor\";\n   58: const char* kOutfileDirSwitch = \"outputdir\";\n   59  const char* kScriptSwitch = \"script\";\n   60  const char* kGraphFileSwitch = \"graphFile\";\n\n1 match in 1 file\n\n\nSearching 1125 files for \"VK_IMAGE_LAYOUT\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKComputeContext.cpp:\n  115          range.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT;\n  116  \n  117:         vkCmdClearColorImage(pCtx->getLowLevelData()->getCommandList(), pView->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &colVal, 1, &range);\n  118      }\n  119  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n   63          {\n   64          case Resource::State::Undefined:\n   65:             return VK_IMAGE_LAYOUT_UNDEFINED;\n   66          case Resource::State::PreInitialized:\n   67:             return VK_IMAGE_LAYOUT_PREINITIALIZED;\n   68          case Resource::State::Common:\n   69          case Resource::State::UnorderedAccess:\n   70:             return VK_IMAGE_LAYOUT_GENERAL;\n   71          case Resource::State::RenderTarget:\n   72:             return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n   73          case Resource::State::DepthStencil:\n   74:             return VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n   75          case Resource::State::ShaderResource:\n   76:             return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;\n   77          case Resource::State::ResolveDest:\n   78          case Resource::State::CopyDest:\n   79:             return VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;\n   80          case Resource::State::ResolveSource:\n   81          case Resource::State::CopySource:\n   82:             return VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;\n   83              break;\n   84          case Resource::State::Present:\n   85:             return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;\n   86          default:\n   87              should_not_get_here();\n   ..\n  200          pCtx->resourceBarrier(pTexture, Resource::State::CopyDest);\n  201          pCtx->resourceBarrier(pStaging.get(), Resource::State::CopySource);\n  202:         vkCmdCopyBufferToImage(pCtx->getLowLevelData()->getCommandList(), pStaging->getApiHandle(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &vkCopy);\n  203      }\n  204  \n  ...\n  231          pCtx->resourceBarrier(pTexture, Resource::State::CopySource);\n  232          pCtx->resourceBarrier(pThis->mpBuffer.get(), Resource::State::CopyDest);\n  233:         vkCmdCopyImageToBuffer(pCtx->getLowLevelData()->getCommandList(), pTexture->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pThis->mpBuffer->getApiHandle(), 1, &vkCopy);\n  234  \n  235          // Create a fence and signal\n  ...\n  373              resourceBarrier(pDst, Resource::State::CopyDest);\n  374              resourceBarrier(pSrc, Resource::State::CopySource);\n  375:             vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, mipCount, regions.data());\n  376          }\n  377          mCommandsPending = true;\n  ...\n  398          region.extent.height = pDst->getHeight(mipLevel);\n  399          region.extent.depth = pDst->getDepth(mipLevel);\n  400:         vkCmdCopyImage(mpLowLevelData->getCommandList(), pSrc->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &region);\n  401  \n  402          mCommandsPending = true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n  102              LOG_DBG(\"VkResourceType::Image\");\n  103              assert(handle.getType() == VkResourceType::Image);\n  104:             image.imageLayout = isUav ? VK_IMAGE_LAYOUT_GENERAL : VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;\n  105              image.imageView = handle;\n  106              image.sampler = nullptr;\n  ...\n  130      void DescriptorSet::setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler) {\n  131          VkDescriptorImageInfo info;\n  132:         info.imageLayout = VK_IMAGE_LAYOUT_GENERAL;\n  133          info.imageView = nullptr;\n  134          info.sampler = pSampler->getApiHandle();\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n   72          range.aspectMask |= clearStencil ? VK_IMAGE_ASPECT_STENCIL_BIT : 0;\n   73  \n   74:         vkCmdClearDepthStencilImage(mpLowLevelData->getCommandList(), pDsv->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, &val, 1, &range);\n   75          mCommandsPending = true;\n   76      }\n   ..\n  307              resolve.extent.depth = 1;\n  308  \n  309:             vkCmdResolveImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &resolve);\n  310          } else {\n  311              VkImageBlit blt;\n  ...\n  315              // Vulkan spec requires VK_FILTER_NEAREST if blit source is a depth and/or stencil format\n  316              VkFilter vkFilter = isDepthStencilFormat(pTexture->getFormat()) ? VK_FILTER_NEAREST : getVkFilter(filter);\n  317:             vkCmdBlitImage(mpLowLevelData->getCommandList(), pSrc->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, pDst->getResource()->getApiHandle(), VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, 1, &blt, vkFilter);\n  318          }\n  319          mCommandsPending = true;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKState.cpp:\n  563                  desc.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE; // This is a color attachment\n  564                  desc.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE; // This is a color attachment\n  565:                 desc.initialLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n  566:                 desc.finalLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n  567              }\n  568          }\n  ...\n  585              depthDesc.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_LOAD;\n  586              depthDesc.stencilStoreOp = VK_ATTACHMENT_STORE_OP_STORE;\n  587:             depthDesc.initialLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n  588:             depthDesc.finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n  589          }\n  590  \n  ...\n  601              VkAttachmentReference& depthRef = infoOut.attachmentRefs.back();\n  602              depthRef.attachment = regToAttachmentIndex.back();\n  603:             depthRef.layout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;\n  604              subpassDesc.pDepthStencilAttachment = &infoOut.attachmentRefs.back();\n  605          }\n  ...\n  612                  VkAttachmentReference& ref = infoOut.attachmentRefs[i];\n  613                  ref.attachment = regToAttachmentIndex[i];\n  614:                 ref.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;\n  615              }\n  616  \n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  125          imageInfo.imageType = getVkImageType(mType);\n  126          \n  127:         //imageInfo.initialLayout = pData ? VK_IMAGE_LAYOUT_PREINITIALIZED : VK_IMAGE_LAYOUT_UNDEFINED;\n  128:         imageInfo.initialLayout = pData ? VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL : VK_IMAGE_LAYOUT_UNDEFINED;\n  129          imageInfo.mipLevels = std::min(mMipLevels, getMaxMipCount(imageInfo.extent));\n  130          imageInfo.pQueueFamilyIndices = nullptr;\n\n34 matches across 6 files\n\n\nSearching 1125 files for \" test bindParameterBlockRootDescs\" (case sensitive)\n\n0 matches\n\nSearching 1125 files for \"bindParameterBlockRootDescs\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVars.cpp:\n  223  \n  224      template<bool forGraphics>\n  225:     bool bindParameterBlockRootDescs(\n  226          ParameterBlock*                 pParameterBlock,\n  227          const ParameterBlockReflection* pParameterBlockReflector,\n  ...\n  260              {\n  261                  auto pSubBlock = pParameterBlock->getParameterBlock(resourceRangeIndex, i);\n  262:                 if (!bindParameterBlockRootDescs<forGraphics>(pSubBlock.get(), pSubObjectReflector.get(), pContext, pRootSignature, bindRootSig, rootDescIndex))\n  263                  {\n  264                      return false;\n  ...\n  286          LOG_DBG(\"test bindParameterBlockSets\");\n  287          if (!bindParameterBlockSets<forGraphics>(pVars, pVars->getSpecializedReflector().get(), pContext, pRootSignature, bindRootSig, descSetIndex, rootConstIndex)) return false;\n  288:         LOG_DBG(\"test bindParameterBlockRootDescs\");\n  289:         if (!bindParameterBlockRootDescs<forGraphics>(pVars, pVars->getSpecializedReflector().get(), pContext, pRootSignature, bindRootSig, rootDescIndex)) return false;\n  290  \n  291          return true;\n\n4 matches in 1 file\n\n\nSearching 1125 files for \"VK_IMAGE_LAYOUT_PREINITIALIZED\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n   65              return VK_IMAGE_LAYOUT_UNDEFINED;\n   66          case Resource::State::PreInitialized:\n   67:             return VK_IMAGE_LAYOUT_PREINITIALIZED;\n   68          case Resource::State::Common:\n   69          case Resource::State::UnorderedAccess:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  125          imageInfo.imageType = getVkImageType(mType);\n  126          \n  127:         imageInfo.initialLayout = pData ? VK_IMAGE_LAYOUT_PREINITIALIZED : VK_IMAGE_LAYOUT_UNDEFINED;\n  128          imageInfo.mipLevels = std::min(mMipLevels, getMaxMipCount(imageInfo.extent));\n  129          imageInfo.pQueueFamilyIndices = nullptr;\n\n2 matches across 2 files\n\n\nSearching 1125 files for \"VK_IMAGE_LAYOUT_PREINITIALIZED\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKCopyContext.cpp:\n   66                  return VK_IMAGE_LAYOUT_UNDEFINED;\n   67              case Resource::State::PreInitialized:\n   68:                 return VK_IMAGE_LAYOUT_PREINITIALIZED;\n   69              case Resource::State::Common:\n   70              case Resource::State::UnorderedAccess:\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKTexture.cpp:\n  125          imageInfo.imageType = getVkImageType(mType);\n  126          \n  127:         imageInfo.initialLayout = pData ? VK_IMAGE_LAYOUT_PREINITIALIZED : VK_IMAGE_LAYOUT_UNDEFINED;\n  128          imageInfo.mipLevels = std::min(mMipLevels, getMaxMipCount(imageInfo.extent));\n  129          imageInfo.pQueueFamilyIndices = nullptr;\n\n2 matches across 2 files\n\n\nSearching 1125 files for \"apply GraphicsVars\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVars.cpp:\n  332  \n  333      bool GraphicsVars::apply(RenderContext* pContext, bool bindRootSig, RootSignature* pRootSignature) {\n  334:         LOG_DBG(\"apply GraphicsVars\");\n  335          return applyProgramVarsCommon<true>(this, pContext, bindRootSig, pRootSignature);\n  336      }\n\n1 match in 1 file\n\n\nSearching 1125 files for \"prepareDescriptorSets\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n 1484  \n 1485                      case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock:\n 1486:                         if (!pSubBlock->prepareDescriptorSets(pContext, pSubObjectReflector)) {\n 1487                              return false;\n 1488                          }\n ....\n 1504      }\n 1505  \n 1506:     bool ParameterBlock::prepareDescriptorSets(CopyContext* pContext) {\n 1507          // Note: allocating and filling in descriptor sets will always\n 1508          // use the specialized reflector, which is based on how the\n ....\n 1513          auto pReflector = mpSpecializedReflector.get();\n 1514  \n 1515:         return prepareDescriptorSets(pContext, pReflector);\n 1516      }\n 1517  \n 1518:     bool ParameterBlock::prepareDescriptorSets(CopyContext* pContext, const ParameterBlockReflection* pReflector) {\n 1519:         LOG_DBG(\"prepareDescriptorSets\");\n 1520          // We first need to check for \"indirect\" changes, where a write to\n 1521          // a sub-block (e.g., a constant buffer) will require invalidation\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  305      ParameterBlockReflection::SharedConstPtr getSpecializedReflector() const { return mpSpecializedReflector; }\n  306  \n  307:     bool prepareDescriptorSets(CopyContext* pCopyContext);\n  308  \n  309      uint32_t getDescriptorSetCount() const { return mpReflector->getDescriptorSetCount(); }\n  ...\n  359          size_t                          bufferSize);\n  360  \n  361:     bool prepareDescriptorSets(\n  362          CopyContext*                    pCopyContext,\n  363          const ParameterBlockReflection* pReflector);\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVars.cpp:\n  278      bool bindRootSetsCommon(ParameterBlock* pVars, CopyContext* pContext, bool bindRootSig, RootSignature* pRootSignature) {\n  279          LOG_DBG(\"bind root sets common\");\n  280:         if(!pVars->prepareDescriptorSets(pContext)) return false;\n  281  \n  282          LOG_DBG(\"descSetIndex\");\n\n8 matches across 3 files\n\n\nSearching 1125 files for \"setCbv\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12DescriptorSet.cpp:\n  119      }\n  120  \n  121:     void DescriptorSet::setCbv(uint32_t rangeIndex, uint32_t descIndex, ConstantBufferView* pView)\n  122      {\n  123          setCpuHandle(this, rangeIndex, descIndex, pView->getApiHandle()->getCpuHandle(0));\n\n/home/max/dev/Falcor/src/Falcor/Core/API/DescriptorSet.h:\n  107      void setUav(uint32_t rangeIndex, uint32_t descIndex, const UnorderedAccessView* pUav);\n  108      void setSampler(uint32_t rangeIndex, uint32_t descIndex, const Sampler* pSampler);\n  109:     void setCbv(uint32_t rangeIndex, uint32_t descIndex, ConstantBufferView* pView);\n  110  \n  111      void bindForGraphics(CopyContext* pCtx, const RootSignature* pRootSig, uint32_t rootIndex);\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp:\n  146      }\n  147  \n  148:     void DescriptorSet::setCbv(uint32_t rangeIndex, uint32_t descIndex, ConstantBufferView* pView) {\n  149:         LOG_DBG(\"setCbv\");\n  150          VkDescriptorBufferInfo info;\n  151          const auto& pBuffer = dynamic_cast<const Buffer*>(pView->getResource());\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n 1195  \n 1196              ConstantBufferView::SharedPtr pView = getUnderlyingConstantBufferView();\n 1197:             pDescSet->setCbv(destRangeIndex, 0, pView.get());\n 1198          }\n 1199      }\n ....\n 1216  \n 1217              // TODO(tfoley): We could swap the loop and `switch`\n 1218:             // and do something like a single `setCbvs(...)` call per range.\n 1219              for(uint32_t descriptorIndex = 0; descriptorIndex < descriptorCount; descriptorIndex++) {\n 1220                  size_t flatIndex = resourceRange.baseIndex + descriptorIndex;\n ....\n 1229                              ParameterBlock* pCB = mCBs[flatIndex].get();\n 1230                              ConstantBufferView::SharedPtr pView = pCB ? pCB->getCbv() : ConstantBufferView::getNullView();\n 1231:                             pDescSet->setCbv(destRangeIndex, descriptorIndex, pView.get());\n 1232                          }\n 1233      #endif\n\n7 matches across 4 files\n\n\nSearching 1125 files for \"prepareDescriptorSets\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n 1484  \n 1485                      case ParameterBlockReflection::ResourceRangeBindingInfo::Flavor::ParameterBlock:\n 1486:                         if (!pSubBlock->prepareDescriptorSets(pContext, pSubObjectReflector)) {\n 1487                              return false;\n 1488                          }\n ....\n 1504      }\n 1505  \n 1506:     bool ParameterBlock::prepareDescriptorSets(CopyContext* pContext) {\n 1507          // Note: allocating and filling in descriptor sets will always\n 1508          // use the specialized reflector, which is based on how the\n ....\n 1513          auto pReflector = mpSpecializedReflector.get();\n 1514  \n 1515:         return prepareDescriptorSets(pContext, pReflector);\n 1516      }\n 1517  \n 1518:     bool ParameterBlock::prepareDescriptorSets(CopyContext* pContext, const ParameterBlockReflection* pReflector) {\n 1519:         LOG_DBG(\"prepareDescriptorSets\");\n 1520          // We first need to check for \"indirect\" changes, where a write to\n 1521          // a sub-block (e.g., a constant buffer) will require invalidation\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  305      ParameterBlockReflection::SharedConstPtr getSpecializedReflector() const { return mpSpecializedReflector; }\n  306  \n  307:     bool prepareDescriptorSets(CopyContext* pCopyContext);\n  308  \n  309      uint32_t getDescriptorSetCount() const { return mpReflector->getDescriptorSetCount(); }\n  ...\n  359          size_t                          bufferSize);\n  360  \n  361:     bool prepareDescriptorSets(\n  362          CopyContext*                    pCopyContext,\n  363          const ParameterBlockReflection* pReflector);\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVars.cpp:\n  278      bool bindRootSetsCommon(ParameterBlock* pVars, CopyContext* pContext, bool bindRootSig, RootSignature* pRootSignature) {\n  279          LOG_DBG(\"bind root sets common\");\n  280:         if(!pVars->prepareDescriptorSets(pContext)) return false;\n  281  \n  282          LOG_DBG(\"descSetIndex\");\n\n8 matches across 3 files\n\n\nSearching 1126 files for \"prepareForDraw\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n  282      }\n  283  \n  284:     bool RenderContext::prepareForDraw(GraphicsState* pState, GraphicsVars* pVars)\n  285      {\n  286          assert(pState);\n  ...\n  328      void RenderContext::drawInstanced(GraphicsState* pState, GraphicsVars* pVars, uint32_t vertexCount, uint32_t instanceCount, uint32_t startVertexLocation, uint32_t startInstanceLocation)\n  329      {\n  330:         if (prepareForDraw(pState, pVars) == false) return;\n  331          mpLowLevelData->getCommandList()->DrawInstanced(vertexCount, instanceCount, startVertexLocation, startInstanceLocation);\n  332      }\n  ...\n  339      void RenderContext::drawIndexedInstanced(GraphicsState* pState, GraphicsVars* pVars, uint32_t indexCount, uint32_t instanceCount, uint32_t startIndexLocation, int32_t baseVertexLocation, uint32_t startInstanceLocation)\n  340      {\n  341:         if (prepareForDraw(pState, pVars) == false) return;\n  342          mpLowLevelData->getCommandList()->DrawIndexedInstanced(indexCount, instanceCount, startIndexLocation, baseVertexLocation, startInstanceLocation);\n  343      }\n  ...\n  357      void RenderContext::drawIndirect(GraphicsState* pState, GraphicsVars* pVars, uint32_t maxCommandCount, const Buffer* pArgBuffer, uint64_t argBufferOffset, const Buffer* pCountBuffer, uint64_t countBufferOffset)\n  358      {\n  359:         if (prepareForDraw(pState, pVars) == false) return;\n  360          drawIndirectCommon(this, mpLowLevelData->getCommandList(), sApiData.pDrawCommandSig, maxCommandCount, pArgBuffer, argBufferOffset, pCountBuffer, countBufferOffset);\n  361      }\n  ...\n  363      void RenderContext::drawIndexedIndirect(GraphicsState* pState, GraphicsVars* pVars, uint32_t maxCommandCount, const Buffer* pArgBuffer, uint64_t argBufferOffset, const Buffer* pCountBuffer, uint64_t countBufferOffset)\n  364      {\n  365:         if (prepareForDraw(pState, pVars) == false) return;\n  366          drawIndirectCommon(this, mpLowLevelData->getCommandList(), sApiData.pDrawIndexCommandSig, maxCommandCount, pArgBuffer, argBufferOffset, pCountBuffer, countBufferOffset);\n  367      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp:\n   91          bool bindRootSig = (pVars != mpLastBoundGraphicsVars);\n   92          if (pVars->apply(this, bindRootSig, pRootSignature) == false) {\n   93:             logWarning(\"RenderContext::prepareForDraw() - applying GraphicsVars failed, most likely because we ran out of descriptors. Flushing the GPU and retrying\");\n   94              flush(true);\n   95              if (!pVars->apply(this, bindRootSig, pRootSignature)) {\n\n/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h:\n  196      RenderContext(CommandQueueHandle queue);\n  197      bool applyGraphicsVars(GraphicsVars* pVars, RootSignature* pRootSignature);\n  198:     bool prepareForDraw(GraphicsState* pState, GraphicsVars* pVars);\n  199  \n  200      StateBindFlags mBindFlags = StateBindFlags::All;\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n  175      //}\n  176  \n  177:     //bool RenderContext::prepareForDraw()\n  178:     bool RenderContext::prepareForDraw(GraphicsState* pState, GraphicsVars* pVars) {\n  179          // LOG_DBG(\"prepare for draw\");\n  180          assert(pState);\n  ...\n  236  \n  237          // LOG_DBG(\"draw instanced\");\n  238:         if (prepareForDraw(pState, pVars) == false) return;\n  239          vkCmdDraw(mpLowLevelData->getCommandList(), vertexCount, instanceCount, startVertexLocation, startInstanceLocation);\n  240          endVkDraw(mpLowLevelData->getCommandList());\n  ...\n  248      void RenderContext::drawIndexedInstanced(GraphicsState* pState, GraphicsVars* pVars, uint32_t indexCount, uint32_t instanceCount, uint32_t startIndexLocation, int32_t baseVertexLocation, uint32_t startInstanceLocation) {\n  249          // LOG_DBG(\"draw indexed instanced\");\n  250:         if (prepareForDraw(pState, pVars) == false) {\n  251:             // LOG_WARN(\"prepareForDraw test failed !!!\");\n  252              return;\n  253          }\n  ...\n  266          // LOG_DBG(\"draw indirect\");\n  267          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  268:         if (prepareForDraw(pState, pVars) == false) return;\n  269          vkCmdDrawIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), 1, 0);\n  270          endVkDraw(mpLowLevelData->getCommandList());\n  ...\n  274          // LOG_DBG(\"draw indexed indirect\");\n  275          resourceBarrier(pArgBuffer, Resource::State::IndirectArg);\n  276:         if (prepareForDraw(pState, pVars) == false) return;\n  277          vkCmdDrawIndexedIndirect(mpLowLevelData->getCommandList(), pArgBuffer->getApiHandle(), argBufferOffset + pArgBuffer->getGpuAddressOffset(), 1, 0);\n  278          endVkDraw(mpLowLevelData->getCommandList());\n\n14 matches across 4 files\n\n\nSearching 1126 files for \"setVao\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/GraphicsStateObject.h:\n   96  #ifdef FALCOR_VK\n   97       public:\n   98:         Desc& setVao(const Vao::SharedConstPtr& pVao) { mpVao = pVao; return *this; }\n   99          Desc& setRenderPass(VkRenderPass renderPass) { mRenderPass = renderPass; return *this; }\n  100          const Vao::SharedConstPtr& getVao() const { return mpVao; }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRenderContext.cpp:\n  112      }\n  113  \n  114:     void setVao(CopyContext* pCtx, const Vao* pVao) {\n  115          // LOG_DBG(\"set vao\");\n  116          CommandListHandle cmdList = pCtx->getLowLevelData()->getCommandList();\n  ...\n  224          LOG_WARN(\"test is_set(RenderContext::StateBindFlags::Vao, mBindFlags)\");\n  225          if (is_set(RenderContext::StateBindFlags::Vao, mBindFlags)) {\n  226:             setVao(this, pState->getVao().get());\n  227          }\n  228  \n\n/home/max/dev/Falcor/src/Falcor/Core/State/GraphicsState.cpp:\n  153      }\n  154  \n  155:     GraphicsState& GraphicsState::setVao(const Vao::SharedConstPtr& pVao)\n  156      {\n  157          if(mpVao != pVao)\n  ...\n  160  \n  161  #ifdef FALCOR_VK\n  162:             mDesc.setVao(pVao);\n  163  #endif\n  164  \n\n/home/max/dev/Falcor/src/Falcor/Core/State/GraphicsState.h:\n  113              \\param[in] pVao The Vao object to bind. If this is nullptr, will unbind the current VAO.\n  114          */\n  115:         GraphicsState& setVao(const Vao::SharedConstPtr& pVao);\n  116  \n  117          /** Get the currently bound VAO.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n  169          // Set state.\n  170          mIntegrator.pState->setProgram(mIntegrator.pProgram);\n  171:         mIntegrator.pState->setVao(Vao::create(Vao::Topology::TriangleList));\n  172  \n  173          // Set viewport. Note we don't bind any render targets so the size just determines the dispatch limits.\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/BasePasses/FullScreenPass.cpp:\n  108          }\n  109          assert(gFullScreenData.pVao);\n  110:         mpState->setVao(gFullScreenData.pVao);\n  111      }\n  112  \n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp:\n  151          VertexLayout::SharedPtr pLayout = VertexLayout::create();\n  152          Vao::Topology topology = Vao::Topology::TriangleStrip;\n  153:         mDrawResources.pState->setVao(Vao::create(topology, pLayout, bufferVec));\n  154  \n  155          // Save bind locations for resourced updated during draw\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n  158          LOG_ERR(\"render\");\n  159  \n  160:         pState->setVao(mpVao);\n  161          pVars->setParameterBlock(\"gScene\", mpSceneBlock);\n  162  \n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/DebugDrawer.cpp:\n  189  \n  190          uploadBuffer();\n  191:         pState->setVao(mpVao);\n  192          pContext->draw(pState, pVars, (uint32_t)mVertexData.size(), 0);\n  193      }\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.cpp:\n  835          // Update the VAO\n  836          mpWrapper->createVao(pDrawData->TotalVtxCount, pDrawData->TotalIdxCount);\n  837:         mpWrapper->mpPipelineState->setVao(mpWrapper->mpVao);\n  838  \n  839          // Upload the data\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.cpp:\n  157          gTextData.pPass = RasterPass::create(kShaderFile, \"vs\", \"ps\");\n  158          auto& pState = gTextData.pPass->getState();\n  159:         pState->setVao(createVAO(gTextData.pVb));\n  160  \n  161          // create the depth-state\n\n13 matches across 11 files\n\n\nSearching 1126 files for \"setParameterBlock\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  315                      case ReflectionResourceType::Type::ConstantBuffer: {\n  316                              auto pCB = ParameterBlock::create(pResourceType->getParameterBlockReflector());\n  317:                             var.setParameterBlock(pCB);\n  318                          }\n  319                          break;\n  ...\n  471  }\n  472  \n  473: bool ParameterBlock::setParameterBlock(const std::string& name, const ParameterBlock::SharedPtr& pCB) {\n  474      auto var = getBufferBindLocation(this, name, ReflectionResourceType::Type::ConstantBuffer);\n  475      if (!var.isValid()) {\n  476:         logError(\"Parameter block \\\"\" + name + \"\\\" was not found. Ignoring setParameterBlock() call.\");\n  477          return false;\n  478      }\n  479:     return var.setParameterBlock(pCB);\n  480  }\n  481  \n  ...\n  510  }\n  511  \n  512: bool ParameterBlock::setParameterBlock(const BindLocation& bindLocation, const ParameterBlock::SharedPtr& pBlock) {\n  513:     if (!checkResourceIndices(bindLocation, \"setParameterBlock\")) return false;\n  514:     if (!checkDescriptorType(bindLocation, kCbvDescriptorType, \"setParameterBlock\")) return false;\n  515      auto& assigned = mParameterBlocks[getFlatIndex(bindLocation)];\n  516  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  181          \\return false is the call failed, otherwise true\n  182      */\n  183:     bool setParameterBlock(const std::string& name, const ParameterBlock::SharedPtr& pBlock);\n  184  \n  185      /** Bind a parameter block by index.\n  ...\n  189          \\return false is the call failed, otherwise true\n  190      */\n  191:     bool setParameterBlock(const BindLocation& bindLocation, const ParameterBlock::SharedPtr& pBlock);\n  192  \n  193      /** Get a parameter block.\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.cpp:\n  686  \n  687              pType->setStructType(pElementType);\n  688:             pType->setParameterBlockReflector(pSubBlock);\n  689  \n  690              // TODO: `pSubBlock` should probably get stored on the\n  ...\n  817              pPendingBlock->finalize();\n  818  \n  819:             pType->setParameterBlockReflector(pPendingBlock);\n  820  \n  821              bindingInfo.pSubObjectReflector = pPendingBlock;\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n 1047  \n 1048      const std::shared_ptr<const ParameterBlockReflection>& getParameterBlockReflector() const { return mpParameterBlockReflector; }\n 1049:     void setParameterBlockReflector(const std::shared_ptr<const ParameterBlockReflection>& pReflector)\n 1050      {\n 1051          mpParameterBlockReflector = pReflector;\n ....\n 1107  \n 1108      const std::shared_ptr<const ParameterBlockReflection>& getParameterBlockReflector() const { return mpParameterBlockReflector; }\n 1109:     void setParameterBlockReflector(const std::shared_ptr<const ParameterBlockReflection>& pReflector)\n 1110      {\n 1111          mpParameterBlockReflector = pReflector;\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.cpp:\n  309      }\n  310  \n  311:     bool ShaderVar::setParameterBlock(const std::shared_ptr<ParameterBlock>& pBlock) const\n  312      {\n  313:         return mpBlock->setParameterBlock(mOffset, pBlock);\n  314      }\n  315  \n  ...\n  331      bool ShaderVar::setImpl(const std::shared_ptr<ParameterBlock>& pBlock) const\n  332      {\n  333:         return mpBlock->setParameterBlock(mOffset, pBlock);\n  334      }\n  335  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.h:\n  236          Logs an error and returns `false` if this variable doesn't point at a parameter block.\n  237      */\n  238:     bool setParameterBlock(const std::shared_ptr<ParameterBlock>& pBlock) const;\n  239  \n  240      /** Get the parameter block that this variable points to.\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n  159  \n  160          pState->setVao(mpVao);\n  161:         pVars->setParameterBlock(\"gScene\", mpSceneBlock);\n  162  \n  163          bool overrideRS = !is_set(flags, RenderFlags::UserRasterizerState);\n\n/home/max/dev/Falcor/src/RenderPasses/MegakernelPathTracer/MegakernelPathTracer.cpp:\n  188  \n  189      // Bind the parameter block to the global program variables.\n  190:     mTracer.pVars->setParameterBlock(kParameterBlockName, mTracer.pParameterBlock);\n  191  }\n  192  \n\n19 matches across 8 files\n\n\nSearching 1126 files for \"BindLocation\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12NvApiExDesc.h:\n   89          if (!pVar) return std::optional<uint32_t>();\n   90  \n   91:         auto rangeInfo = pBlock->getResourceRangeBindingInfo(pVar->getBindLocation().getResourceRangeIndex());\n   92          return std::optional<uint32_t>(rangeInfo.regIndex);\n   93      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n   61                  UniformShaderVarOffset offsetVarOffset;\n   62                  UniformShaderVarOffset scaleVarOffset;\n   63:                 ProgramReflection::BindLocation texBindLoc;\n   64              } blitData;\n   65  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  342  }\n  343  \n  344: static ShaderVar getBufferBindLocation(ParameterBlock const* pObject, const std::string& name, ReflectionResourceType::Type bufferType) {\n  345      auto var = pObject->getRootVar()[name];\n  346      if (!var.isValid()) {\n  ...\n  355  }\n  356  \n  357: bool ParameterBlock::checkResourceIndices(const BindLocation& bindLocation, const char* funcName) const {\n  358  #if _LOG_ENABLED\n  359      auto rangeIndex = bindLocation.getResourceRangeIndex();\n  ...\n  378  \n  379  template<size_t N>\n  380: bool ParameterBlock::checkDescriptorType(const BindLocation& bindLocation, const std::array<DescriptorSet::Type, N>& allowedTypes, const char* funcName) const {\n  381  #if _LOG_ENABLED\n  382      auto rangeIndex = bindLocation.getResourceRangeIndex();\n  ...\n  392  \n  393  bool ParameterBlock::checkDescriptorSrvUavCommon(\n  394:     const BindLocation& bindLocation,\n  395      const std::variant<ShaderResourceView::SharedPtr, UnorderedAccessView::SharedPtr>& pView,\n  396      const char* funcName) const {\n  ...\n  465  }\n  466  \n  467: size_t ParameterBlock::getFlatIndex(const BindLocation& bindLocation) const {\n  468      auto rangeIndex = bindLocation.getResourceRangeIndex();\n  469      auto arrayIndex = bindLocation.getResourceArrayIndex();\n  ...\n  472  \n  473  bool ParameterBlock::setParameterBlock(const std::string& name, const ParameterBlock::SharedPtr& pCB) {\n  474:     auto var = getBufferBindLocation(this, name, ReflectionResourceType::Type::ConstantBuffer);\n  475      if (!var.isValid()) {\n  476          logError(\"Parameter block \\\"\" + name + \"\\\" was not found. Ignoring setParameterBlock() call.\");\n  ...\n  480  }\n  481  \n  482: uint32_t ParameterBlock::getDescriptorSetIndex(const BindLocation& bindLocation) {\n  483      return mpReflector->getResourceRangeBindingInfo(bindLocation.getResourceRangeIndex()).descriptorSetIndex;\n  484  }\n  485  \n  486: void ParameterBlock::markDescriptorSetDirty(const BindLocation& bindLocation) {\n  487      markDescriptorSetDirty(getDescriptorSetIndex(bindLocation));\n  488  }\n  ...\n  510  }\n  511  \n  512: bool ParameterBlock::setParameterBlock(const BindLocation& bindLocation, const ParameterBlock::SharedPtr& pBlock) {\n  513      LOG_WARN(\"setParameterBlock location: %u\", bindLocation);\n  514      if (!checkResourceIndices(bindLocation, \"setParameterBlock\")) return false;\n  ...\n  531  \n  532  ParameterBlock::SharedPtr ParameterBlock::getParameterBlock(const std::string& name) const {\n  533:     auto var = getBufferBindLocation(this, name, ReflectionResourceType::Type::ConstantBuffer);\n  534      if (!var.isValid()) {\n  535          logError(\"Parameter block \\\"\" + name + \"\\\" was not found. Ignoring getParameterBlock() call.\");\n  ...\n  539  }\n  540  \n  541: ParameterBlock::SharedPtr ParameterBlock::getParameterBlock(const BindLocation& bindLocation) const {\n  542      if (!checkResourceIndices(bindLocation, \"getParameterBlock\")) return nullptr;\n  543      if (!checkDescriptorType(bindLocation, kCbvDescriptorType, \"getParameterBlock\")) return nullptr;\n  ...\n  545  }\n  546  \n  547: bool ParameterBlock::setResourceSrvUavCommon(const BindLocation& bindLoc, const Resource::SharedPtr& pResource, const char* funcName) {\n  548      size_t flatIndex = getFlatIndex(bindLoc);\n  549  \n  ...\n  598  }\n  599  \n  600: Resource::SharedPtr ParameterBlock::getResourceSrvUavCommon(const BindLocation& bindLoc, const char* funcName) const {\n  601      if (!checkResourceIndices(bindLoc, funcName)) return nullptr;\n  602      size_t flatIndex = getFlatIndex(bindLoc);\n  ...\n  640  }\n  641  \n  642: bool ParameterBlock::setBuffer(const BindLocation& bindLocation, const Buffer::SharedPtr& pBuf) {\n  643      if (!bindLocation.isValid()) return false;\n  644  \n  ...\n  655  }\n  656  \n  657: Buffer::SharedPtr ParameterBlock::getBuffer(const BindLocation& bindLocation) const {\n  658      if (!bindLocation.isValid()) return nullptr;\n  659  \n  ...\n  661  }\n  662  \n  663: bool ParameterBlock::setSampler(const BindLocation& bindLocation, const Sampler::SharedPtr& pSampler) {\n  664      if (!checkResourceIndices(bindLocation, \"setSampler()\")) return false;\n  665      if (!checkDescriptorType(bindLocation, kSamplerDescriptorType, \"setSampler()\")) return false;\n  ...\n  691  }\n  692  \n  693: const Sampler::SharedPtr& ParameterBlock::getSampler(const BindLocation& bindLocation) const {\n  694      static Sampler::SharedPtr pNull = nullptr;\n  695      if (!checkResourceIndices(bindLocation, \"getSampler()\")) return pNull;\n  ...\n  699  }\n  700  \n  701: ShaderResourceView::SharedPtr ParameterBlock::getSrv(const BindLocation& bindLocation) const {\n  702      if (!checkResourceIndices(bindLocation, \"getSrv()\")) return nullptr;\n  703      if (!checkDescriptorType(bindLocation, kSrvDescriptorTypes, \"getSrv()\")) return nullptr;\n  ...\n  706  }\n  707  \n  708: UnorderedAccessView::SharedPtr ParameterBlock::getUav(const BindLocation& bindLocation) const {\n  709      if (!checkResourceIndices(bindLocation, \"getUav()\")) return nullptr;\n  710      if (!checkDescriptorType(bindLocation, kUavDescriptorTypes, \"getUav()\")) return nullptr;\n  ...\n  721  }\n  722  \n  723: bool ParameterBlock::setTexture(const BindLocation& bindLocation, const Texture::SharedPtr& pTexture) {\n  724      return setResourceSrvUavCommon(bindLocation, pTexture, \"setTexture()\");\n  725  }\n  ...\n  733  }\n  734  \n  735: Texture::SharedPtr ParameterBlock::getTexture(const BindLocation& bindLocation) const {\n  736      return getResourceSrvUavCommon(bindLocation, \"getTexture()\")->asTexture();\n  737  }\n  738  \n  739: bool ParameterBlock::setSrv(const BindLocation& bindLocation, const ShaderResourceView::SharedPtr& pSrv) {\n  740      if (!checkDescriptorSrvUavCommon(bindLocation, pSrv, \"setSrv()\")) return false;\n  741  \n  ...\n  753  }\n  754  \n  755: bool ParameterBlock::setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav) {\n  756      if (!checkDescriptorSrvUavCommon(bindLocation, pUav, \"setUav()\")) return false;\n  757  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  101      ~ParameterBlock();\n  102  \n  103:     using BindLocation = ParameterBlockReflection::BindLocation;\n  104  \n  105      /** Create a new object that holds a value of the given type.\n  ...\n  161          \\return false is the call failed, otherwise true\n  162      */\n  163:     bool setBuffer(const BindLocation& bindLocation, Buffer::ConstSharedPtrRef pBuffer);\n  164  \n  165      /** Get a buffer\n  ...\n  173          \\return If the name is valid, a shared pointer to the buffer. Otherwise returns nullptr\n  174      */\n  175:     Buffer::SharedPtr getBuffer(const BindLocation& bindLocation) const;\n  176  \n  177      /** Bind a parameter block by name.\n  ...\n  189          \\return false is the call failed, otherwise true\n  190      */\n  191:     bool setParameterBlock(const BindLocation& bindLocation, const ParameterBlock::SharedPtr& pBlock);\n  192  \n  193      /** Get a parameter block.\n  ...\n  201          \\return If the indices is valid, a shared pointer to the parameter block. Otherwise returns nullptr\n  202      */\n  203:     ParameterBlock::SharedPtr getParameterBlock(const BindLocation& bindLocation) const;\n  204  \n  205      /** Bind a texture. Based on the shader reflection, it will be bound as either an SRV or a UAV\n  ...\n  208      */\n  209      bool setTexture(const std::string& name, const Texture::SharedPtr& pTexture);\n  210:     bool setTexture(const BindLocation& bindLocation, const Texture::SharedPtr& pTexture);\n  211  \n  212      /** Get a texture object.\n  ...\n  215      */\n  216      Texture::SharedPtr getTexture(const std::string& name) const;\n  217:     Texture::SharedPtr getTexture(const BindLocation& bindLocation) const;\n  218  \n  219      /** Bind an SRV.\n  ...\n  221          \\param[in] pSrv The shader-resource-view object to bind\n  222      */\n  223:     bool setSrv(const BindLocation& bindLocation, const ShaderResourceView::SharedPtr& pSrv);\n  224  \n  225      /** Bind a UAV.\n  ...\n  227          \\param[in] pSrv The unordered-access-view object to bind\n  228      */\n  229:     bool setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav);\n  230  \n  231      /** Get an SRV object.\n  ...\n  233          \\return If the bind-location is valid, a shared pointer to the SRV. Otherwise returns nullptr\n  234      */\n  235:     ShaderResourceView::SharedPtr getSrv(const BindLocation& bindLocation) const;\n  236  \n  237      /** Get a UAV object\n  ...\n  239          \\return If the bind-location is valid, a shared pointer to the UAV. Otherwise returns nullptr\n  240      */\n  241:     UnorderedAccessView::SharedPtr getUav(const BindLocation& bindLocation) const;\n  242  \n  243      /** Bind a sampler to the program in the global namespace.\n  ...\n  253          \\return false if the sampler was not found in the program, otherwise true\n  254      */\n  255:     bool setSampler(const BindLocation& bindLocation, const Sampler::SharedPtr& pSampler);\n  256  \n  257      /** Gets a sampler object.\n  ...\n  259          \\return If the bind-location is valid, a shared pointer to the sampler. Otherwise returns nullptr\n  260      */\n  261:     const Sampler::SharedPtr& getSampler(const BindLocation& bindLocation) const;\n  262  \n  263      /** Gets a sampler object.\n  ...\n  403      AssignedParameterBlock const& getAssignedParameterBlock(uint32_t resourceRangeIndex, uint32_t arrayIndex) const;\n  404  \n  405:     size_t getFlatIndex(const BindLocation& bindLocation) const;\n  406  \n  407:     bool checkResourceIndices(const BindLocation& bindLocation, const char* funcName) const;\n  408      template<size_t N>\n  409:     bool checkDescriptorType(const BindLocation& bindLocation, const std::array<DescriptorSet::Type, N>& allowedTypes, const char* funcName) const;\n  410      bool checkDescriptorSrvUavCommon(\n  411:         const BindLocation& bindLocation,\n  412          const std::variant<ShaderResourceView::SharedPtr, UnorderedAccessView::SharedPtr>& pView,\n  413          const char* funcName) const;\n  414      bool checkRootDescriptorResourceCompatibility(const Resource::SharedPtr& pResource, const std::string& funcName) const;\n  415  \n  416:     bool setResourceSrvUavCommon(const BindLocation& bindLoc, const Resource::SharedPtr& pResource, const char* funcName);\n  417:     Resource::SharedPtr getResourceSrvUavCommon(const BindLocation& bindLoc, const char* funcName) const;\n  418  \n  419      mutable ChangeEpoch mEpochOfLastUniformDataChange = 1;\n  ...\n  427      mutable uint32_t mDescriptorSetResourceDataVersion = 0;\n  428  \n  429:     uint32_t getDescriptorSetIndex(const BindLocation& bindLocation);\n  430      void markDescriptorSetDirty(uint32_t index) const;\n  431:     void markDescriptorSetDirty(const BindLocation& bindLocation);\n  432  \n  433      struct UnderlyingConstantBuffer {\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.cpp:\n   59                  return TypedShaderVarOffset(\n   60                      pMember->getType().get(),\n   61:                     (*this) + pMember->getBindLocation());\n   62              }\n   63          }\n   ..\n 1396          : mName(name)\n 1397          , mpType(pType)\n 1398:         , mBindLocation(bindLocation)\n 1399      {}\n 1400  \n ....\n 1824          for (auto pMember : mMembers)\n 1825          {\n 1826:             auto memberOffset = pMember->getBindLocation();\n 1827              auto memberUniformOffset = memberOffset.getUniform().getByteOffset();\n 1828              auto pMemberType = pMember->getType();\n ....\n 2002          , mName(name) {}\n 2003  \n 2004:     ParameterBlockReflection::BindLocation ParameterBlockReflection::getResourceBinding(const std::string& name) const\n 2005      {\n 2006          return getElementType()->getMemberOffset(name);\n ....\n 2085      {\n 2086          if (*mpType != *other.mpType) return false;\n 2087:         if (mBindLocation != other.mBindLocation) return false;\n 2088          if (mName != other.mName) return false;\n 2089  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n 1147      /** Get the variable offset\n 1148      */\n 1149:     ShaderVarOffset getBindLocation() const { return mBindLocation; }\n 1150:     size_t getByteOffset() const { return mBindLocation.getByteOffset(); }\n 1151:     size_t getOffset() const { return mBindLocation.getByteOffset(); }\n 1152  \n 1153      bool operator==(const ReflectionVar& other) const;\n ....\n 1162      std::string mName;\n 1163      ReflectionType::SharedConstPtr mpType;\n 1164:     ShaderVarOffset mBindLocation;\n 1165  };\n 1166  \n ....\n 1193      ReflectionType::SharedConstPtr getElementType() const { return mpElementType; }\n 1194  \n 1195:     using BindLocation = TypedShaderVarOffset;\n 1196  \n 1197      // TODO(tfoley): The following two functions really pertain to members, not just resources.\n ....\n 1203      /** Get the bind-location for a resource in the block\n 1204      */\n 1205:     BindLocation getResourceBinding(const std::string& name) const;\n 1206  \n 1207      /// Information on how a particular descriptor set should be filled in.\n ....\n 1429      using VariableMap = std::unordered_map<std::string, ShaderVariable>;\n 1430  \n 1431:     using BindLocation = ParameterBlockReflection::BindLocation;\n 1432  \n 1433      /** Create a new object for a Slang reflector object\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.cpp:\n   63              {\n   64                  // Need to apply the offsets from member\n   65:                 TypedShaderVarOffset newOffset = TypedShaderVarOffset(pMember->getType().get(), mOffset + pMember->getBindLocation());\n   66                  return ShaderVar(mpBlock, newOffset);\n   67              }\n   ..\n  100  \n  101                  // Need to apply the offsets from member\n  102:                 TypedShaderVarOffset newOffset = TypedShaderVarOffset(pMember->getType().get(), mOffset + pMember->getBindLocation());\n  103                  return ShaderVar( mpBlock, newOffset);\n  104              }\n  ...\n  180                  auto pMember = pStructType->getMember(index);\n  181                  // Need to apply the offsets from member\n  182:                 TypedShaderVarOffset newOffset = TypedShaderVarOffset(pMember->getType().get(), mOffset + pMember->getBindLocation());\n  183                  return ShaderVar(mpBlock, newOffset);\n  184              }\n  ...\n  269  \n  270                  auto offsetIntoMember = byteOffset - memberByteOffset;\n  271:                 TypedShaderVarOffset memberOffset = TypedShaderVarOffset(pMember->getType().get(), mOffset + pMember->getBindLocation());\n  272                  ShaderVar memberCursor(mpBlock, memberOffset);\n  273                  return memberCursor[UniformShaderVarOffset(offsetIntoMember)];\n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp:\n  154  \n  155          // Save bind locations for resourced updated during draw\n  156:         mBindLocations.simulateCB = pSimulateCs->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"PerFrame\");\n  157:         mBindLocations.drawCB = pDrawProgram->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"PerFrame\");\n  158:         mBindLocations.emitCB = pEmitCs->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"PerEmit\");\n  159      }\n  160  \n  ...\n  185  \n  186          //Send vars and call\n  187:         mEmitResources.pVars->getParameterBlock(mBindLocations.emitCB)->setBlob(&emitData, 0u, sizeof(EmitData));\n  188          uint32_t numGroups = div_round_up(num, kParticleEmitThreads);\n  189          pCtx->dispatch(mEmitResources.pState.get(), mEmitResources.pVars.get(), {1, numGroups, 1});\n  ...\n  207              perFrame.dt = dt;\n  208              perFrame.maxParticles = mMaxParticles;\n  209:             mSimulateResources.pVars->getParameterBlock(mBindLocations.simulateCB)->setBlob(&perFrame, 0u, sizeof(SimulateWithSortPerFrame));\n  210              mpAliveList->setBlob(mSortDataReset.data(), 0, sizeof(SortData) * mMaxParticles);\n  211          }\n  ...\n  215              perFrame.dt = dt;\n  216              perFrame.maxParticles = mMaxParticles;\n  217:             mSimulateResources.pVars->getParameterBlock(mBindLocations.simulateCB)->setBlob(&perFrame, 0u, sizeof(SimulatePerFrame));\n  218          }\n  219  \n  ...\n  233          cbuf.view = view;\n  234          cbuf.proj = proj;\n  235:         mDrawResources.pVars->getParameterBlock(mBindLocations.drawCB)->setBlob(&cbuf, 0, sizeof(cbuf));\n  236  \n  237          //particle draw uses many of render context's existing state's properties\n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.h:\n  198          struct\n  199          {\n  200:             ProgramReflection::BindLocation simulateCB;\n  201:             ProgramReflection::BindLocation drawCB;\n  202:             ProgramReflection::BindLocation emitCB;\n  203:         } mBindLocations;\n  204  \n  205          uint32_t mMaxParticles;\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.cpp:\n   76          GraphicsVars::SharedPtr mpProgramVars;\n   77          std::vector<Texture::SharedPtr> mpImages;\n   78:         ParameterBlockReflection::BindLocation mGuiImageLoc;\n   79          float mScaleFactor = 1.0f;\n   80          std::unordered_map<std::string, ImFont*> mFontMap;\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSM.cpp:\n  117  public:\n  118      using UniquePtr = std::unique_ptr<CsmSceneRenderer>;\n  119:     static UniquePtr create(const Scene::SharedConstPtr& pScene, const ProgramReflection::BindLocation& alphaMapCbLoc, const ProgramReflection::BindLocation& alphaMapLoc, const ProgramReflection::BindLocation& alphaMapSamplerLoc)\n  120      {\n  121          return UniquePtr(new CsmSceneRenderer(pScene, alphaMapCbLoc, alphaMapLoc, alphaMapSamplerLoc));\n  ...\n  132  \n  133  protected:\n  134:     CsmSceneRenderer(const Scene::SharedConstPtr& pScene, const ProgramReflection::BindLocation& alphaMapCbLoc, const ProgramReflection::BindLocation& alphaMapLoc, const ProgramReflection::BindLocation& alphaMapSamplerLoc)\n  135          : SceneRenderer(std::const_pointer_cast<Scene>(pScene))\n  136      {\n  137:         mBindLocations.alphaCB = alphaMapCbLoc;\n  138:         mBindLocations.alphaMap = alphaMapLoc;\n  139:         mBindLocations.alphaMapSampler = alphaMapSamplerLoc;\n  140  \n  141          toggleMeshCulling(false);\n  ...\n  158      struct\n  159      {\n  160:         ProgramReflection::BindLocation alphaMap;\n  161:         ProgramReflection::BindLocation alphaCB;\n  162:         ProgramReflection::BindLocation alphaMapSampler;\n  163:     } mBindLocations;\n  164  \n  165      bool mDepthClamp;\n  ...\n  189              float alphaThreshold = currentData.pMaterial->getAlphaThreshold();\n  190              auto& pDefaultBlock = currentData.pVars;\n  191:             pDefaultBlock->getParameterBlock(mBindLocations.alphaCB, 0)->setBlob(&alphaThreshold, 0u, sizeof(float));\n  192              if (currentData.pMaterial->getBaseColorTexture())\n  193              {\n  194:                 pDefaultBlock->setSrv(mBindLocations.alphaMap, 0, currentData.pMaterial->getBaseColorTexture()->getSRV());\n  195              }\n  196              else\n  197              {\n  198:                 pDefaultBlock->setSrv(mBindLocations.alphaMap, 0, nullptr);\n  199              }\n  200:             pDefaultBlock->setSampler(mBindLocations.alphaMapSampler, 0, mpAlphaSampler);\n  201              currentData.pState->getProgram()->addDefine(\"TEST_ALPHA\");\n  202          }\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSM.h:\n  190      void onResize(uint32_t width, uint32_t height);\n  191      void setupVisibilityPassFbo(const Texture::SharedPtr& pVisBuffer);\n  192:     ProgramReflection::BindLocation mPerLightCbLoc;\n  193  \n  194      void resizeShadowMap(const uint2& smDims);\n\n96 matches across 12 files\n\n\nSearching 1126 files for \"BindLocation\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12NvApiExDesc.h:\n   89          if (!pVar) return std::optional<uint32_t>();\n   90  \n   91:         auto rangeInfo = pBlock->getResourceRangeBindingInfo(pVar->getBindLocation().getResourceRangeIndex());\n   92          return std::optional<uint32_t>(rangeInfo.regIndex);\n   93      }\n\n/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12RenderContext.cpp:\n   61                  UniformShaderVarOffset offsetVarOffset;\n   62                  UniformShaderVarOffset scaleVarOffset;\n   63:                 ProgramReflection::BindLocation texBindLoc;\n   64              } blitData;\n   65  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp:\n  342  }\n  343  \n  344: static ShaderVar getBufferBindLocation(ParameterBlock const* pObject, const std::string& name, ReflectionResourceType::Type bufferType) {\n  345      auto var = pObject->getRootVar()[name];\n  346      if (!var.isValid()) {\n  ...\n  355  }\n  356  \n  357: bool ParameterBlock::checkResourceIndices(const BindLocation& bindLocation, const char* funcName) const {\n  358  #if _LOG_ENABLED\n  359      auto rangeIndex = bindLocation.getResourceRangeIndex();\n  ...\n  378  \n  379  template<size_t N>\n  380: bool ParameterBlock::checkDescriptorType(const BindLocation& bindLocation, const std::array<DescriptorSet::Type, N>& allowedTypes, const char* funcName) const {\n  381  #if _LOG_ENABLED\n  382      auto rangeIndex = bindLocation.getResourceRangeIndex();\n  ...\n  392  \n  393  bool ParameterBlock::checkDescriptorSrvUavCommon(\n  394:     const BindLocation& bindLocation,\n  395      const std::variant<ShaderResourceView::SharedPtr, UnorderedAccessView::SharedPtr>& pView,\n  396      const char* funcName) const {\n  ...\n  465  }\n  466  \n  467: size_t ParameterBlock::getFlatIndex(const BindLocation& bindLocation) const {\n  468      auto rangeIndex = bindLocation.getResourceRangeIndex();\n  469      auto arrayIndex = bindLocation.getResourceArrayIndex();\n  ...\n  472  \n  473  bool ParameterBlock::setParameterBlock(const std::string& name, const ParameterBlock::SharedPtr& pCB) {\n  474:     auto var = getBufferBindLocation(this, name, ReflectionResourceType::Type::ConstantBuffer);\n  475      if (!var.isValid()) {\n  476          logError(\"Parameter block \\\"\" + name + \"\\\" was not found. Ignoring setParameterBlock() call.\");\n  ...\n  480  }\n  481  \n  482: uint32_t ParameterBlock::getDescriptorSetIndex(const BindLocation& bindLocation) {\n  483      return mpReflector->getResourceRangeBindingInfo(bindLocation.getResourceRangeIndex()).descriptorSetIndex;\n  484  }\n  485  \n  486: void ParameterBlock::markDescriptorSetDirty(const BindLocation& bindLocation) {\n  487      markDescriptorSetDirty(getDescriptorSetIndex(bindLocation));\n  488  }\n  ...\n  510  }\n  511  \n  512: bool ParameterBlock::setParameterBlock(const BindLocation& bindLocation, const ParameterBlock::SharedPtr& pBlock) {\n  513      LOG_WARN(\"setParameterBlock location: %u\", bindLocation);\n  514      if (!checkResourceIndices(bindLocation, \"setParameterBlock\")) return false;\n  ...\n  531  \n  532  ParameterBlock::SharedPtr ParameterBlock::getParameterBlock(const std::string& name) const {\n  533:     auto var = getBufferBindLocation(this, name, ReflectionResourceType::Type::ConstantBuffer);\n  534      if (!var.isValid()) {\n  535          logError(\"Parameter block \\\"\" + name + \"\\\" was not found. Ignoring getParameterBlock() call.\");\n  ...\n  539  }\n  540  \n  541: ParameterBlock::SharedPtr ParameterBlock::getParameterBlock(const BindLocation& bindLocation) const {\n  542      if (!checkResourceIndices(bindLocation, \"getParameterBlock\")) return nullptr;\n  543      if (!checkDescriptorType(bindLocation, kCbvDescriptorType, \"getParameterBlock\")) return nullptr;\n  ...\n  545  }\n  546  \n  547: bool ParameterBlock::setResourceSrvUavCommon(const BindLocation& bindLoc, const Resource::SharedPtr& pResource, const char* funcName) {\n  548      size_t flatIndex = getFlatIndex(bindLoc);\n  549  \n  ...\n  598  }\n  599  \n  600: Resource::SharedPtr ParameterBlock::getResourceSrvUavCommon(const BindLocation& bindLoc, const char* funcName) const {\n  601      if (!checkResourceIndices(bindLoc, funcName)) return nullptr;\n  602      size_t flatIndex = getFlatIndex(bindLoc);\n  ...\n  640  }\n  641  \n  642: bool ParameterBlock::setBuffer(const BindLocation& bindLocation, const Buffer::SharedPtr& pBuf) {\n  643      if (!bindLocation.isValid()) return false;\n  644  \n  ...\n  655  }\n  656  \n  657: Buffer::SharedPtr ParameterBlock::getBuffer(const BindLocation& bindLocation) const {\n  658      if (!bindLocation.isValid()) return nullptr;\n  659  \n  ...\n  661  }\n  662  \n  663: bool ParameterBlock::setSampler(const BindLocation& bindLocation, const Sampler::SharedPtr& pSampler) {\n  664      if (!checkResourceIndices(bindLocation, \"setSampler()\")) return false;\n  665      if (!checkDescriptorType(bindLocation, kSamplerDescriptorType, \"setSampler()\")) return false;\n  ...\n  691  }\n  692  \n  693: const Sampler::SharedPtr& ParameterBlock::getSampler(const BindLocation& bindLocation) const {\n  694      static Sampler::SharedPtr pNull = nullptr;\n  695      if (!checkResourceIndices(bindLocation, \"getSampler()\")) return pNull;\n  ...\n  699  }\n  700  \n  701: ShaderResourceView::SharedPtr ParameterBlock::getSrv(const BindLocation& bindLocation) const {\n  702      if (!checkResourceIndices(bindLocation, \"getSrv()\")) return nullptr;\n  703      if (!checkDescriptorType(bindLocation, kSrvDescriptorTypes, \"getSrv()\")) return nullptr;\n  ...\n  706  }\n  707  \n  708: UnorderedAccessView::SharedPtr ParameterBlock::getUav(const BindLocation& bindLocation) const {\n  709      if (!checkResourceIndices(bindLocation, \"getUav()\")) return nullptr;\n  710      if (!checkDescriptorType(bindLocation, kUavDescriptorTypes, \"getUav()\")) return nullptr;\n  ...\n  721  }\n  722  \n  723: bool ParameterBlock::setTexture(const BindLocation& bindLocation, const Texture::SharedPtr& pTexture) {\n  724      return setResourceSrvUavCommon(bindLocation, pTexture, \"setTexture()\");\n  725  }\n  ...\n  733  }\n  734  \n  735: Texture::SharedPtr ParameterBlock::getTexture(const BindLocation& bindLocation) const {\n  736      return getResourceSrvUavCommon(bindLocation, \"getTexture()\")->asTexture();\n  737  }\n  738  \n  739: bool ParameterBlock::setSrv(const BindLocation& bindLocation, const ShaderResourceView::SharedPtr& pSrv) {\n  740      if (!checkDescriptorSrvUavCommon(bindLocation, pSrv, \"setSrv()\")) return false;\n  741  \n  ...\n  753  }\n  754  \n  755: bool ParameterBlock::setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav) {\n  756      if (!checkDescriptorSrvUavCommon(bindLocation, pUav, \"setUav()\")) return false;\n  757  \n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  101      ~ParameterBlock();\n  102  \n  103:     using BindLocation = ParameterBlockReflection::BindLocation;\n  104  \n  105      /** Create a new object that holds a value of the given type.\n  ...\n  161          \\return false is the call failed, otherwise true\n  162      */\n  163:     bool setBuffer(const BindLocation& bindLocation, Buffer::ConstSharedPtrRef pBuffer);\n  164  \n  165      /** Get a buffer\n  ...\n  173          \\return If the name is valid, a shared pointer to the buffer. Otherwise returns nullptr\n  174      */\n  175:     Buffer::SharedPtr getBuffer(const BindLocation& bindLocation) const;\n  176  \n  177      /** Bind a parameter block by name.\n  ...\n  189          \\return false is the call failed, otherwise true\n  190      */\n  191:     bool setParameterBlock(const BindLocation& bindLocation, const ParameterBlock::SharedPtr& pBlock);\n  192  \n  193      /** Get a parameter block.\n  ...\n  201          \\return If the indices is valid, a shared pointer to the parameter block. Otherwise returns nullptr\n  202      */\n  203:     ParameterBlock::SharedPtr getParameterBlock(const BindLocation& bindLocation) const;\n  204  \n  205      /** Bind a texture. Based on the shader reflection, it will be bound as either an SRV or a UAV\n  ...\n  208      */\n  209      bool setTexture(const std::string& name, const Texture::SharedPtr& pTexture);\n  210:     bool setTexture(const BindLocation& bindLocation, const Texture::SharedPtr& pTexture);\n  211  \n  212      /** Get a texture object.\n  ...\n  215      */\n  216      Texture::SharedPtr getTexture(const std::string& name) const;\n  217:     Texture::SharedPtr getTexture(const BindLocation& bindLocation) const;\n  218  \n  219      /** Bind an SRV.\n  ...\n  221          \\param[in] pSrv The shader-resource-view object to bind\n  222      */\n  223:     bool setSrv(const BindLocation& bindLocation, const ShaderResourceView::SharedPtr& pSrv);\n  224  \n  225      /** Bind a UAV.\n  ...\n  227          \\param[in] pSrv The unordered-access-view object to bind\n  228      */\n  229:     bool setUav(const BindLocation& bindLocation, const UnorderedAccessView::SharedPtr& pUav);\n  230  \n  231      /** Get an SRV object.\n  ...\n  233          \\return If the bind-location is valid, a shared pointer to the SRV. Otherwise returns nullptr\n  234      */\n  235:     ShaderResourceView::SharedPtr getSrv(const BindLocation& bindLocation) const;\n  236  \n  237      /** Get a UAV object\n  ...\n  239          \\return If the bind-location is valid, a shared pointer to the UAV. Otherwise returns nullptr\n  240      */\n  241:     UnorderedAccessView::SharedPtr getUav(const BindLocation& bindLocation) const;\n  242  \n  243      /** Bind a sampler to the program in the global namespace.\n  ...\n  253          \\return false if the sampler was not found in the program, otherwise true\n  254      */\n  255:     bool setSampler(const BindLocation& bindLocation, const Sampler::SharedPtr& pSampler);\n  256  \n  257      /** Gets a sampler object.\n  ...\n  259          \\return If the bind-location is valid, a shared pointer to the sampler. Otherwise returns nullptr\n  260      */\n  261:     const Sampler::SharedPtr& getSampler(const BindLocation& bindLocation) const;\n  262  \n  263      /** Gets a sampler object.\n  ...\n  403      AssignedParameterBlock const& getAssignedParameterBlock(uint32_t resourceRangeIndex, uint32_t arrayIndex) const;\n  404  \n  405:     size_t getFlatIndex(const BindLocation& bindLocation) const;\n  406  \n  407:     bool checkResourceIndices(const BindLocation& bindLocation, const char* funcName) const;\n  408      template<size_t N>\n  409:     bool checkDescriptorType(const BindLocation& bindLocation, const std::array<DescriptorSet::Type, N>& allowedTypes, const char* funcName) const;\n  410      bool checkDescriptorSrvUavCommon(\n  411:         const BindLocation& bindLocation,\n  412          const std::variant<ShaderResourceView::SharedPtr, UnorderedAccessView::SharedPtr>& pView,\n  413          const char* funcName) const;\n  414      bool checkRootDescriptorResourceCompatibility(const Resource::SharedPtr& pResource, const std::string& funcName) const;\n  415  \n  416:     bool setResourceSrvUavCommon(const BindLocation& bindLoc, const Resource::SharedPtr& pResource, const char* funcName);\n  417:     Resource::SharedPtr getResourceSrvUavCommon(const BindLocation& bindLoc, const char* funcName) const;\n  418  \n  419      mutable ChangeEpoch mEpochOfLastUniformDataChange = 1;\n  ...\n  427      mutable uint32_t mDescriptorSetResourceDataVersion = 0;\n  428  \n  429:     uint32_t getDescriptorSetIndex(const BindLocation& bindLocation);\n  430      void markDescriptorSetDirty(uint32_t index) const;\n  431:     void markDescriptorSetDirty(const BindLocation& bindLocation);\n  432  \n  433      struct UnderlyingConstantBuffer {\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.cpp:\n   59                  return TypedShaderVarOffset(\n   60                      pMember->getType().get(),\n   61:                     (*this) + pMember->getBindLocation());\n   62              }\n   63          }\n   ..\n 1396          : mName(name)\n 1397          , mpType(pType)\n 1398:         , mBindLocation(bindLocation)\n 1399      {}\n 1400  \n ....\n 1824          for (auto pMember : mMembers)\n 1825          {\n 1826:             auto memberOffset = pMember->getBindLocation();\n 1827              auto memberUniformOffset = memberOffset.getUniform().getByteOffset();\n 1828              auto pMemberType = pMember->getType();\n ....\n 2002          , mName(name) {}\n 2003  \n 2004:     ParameterBlockReflection::BindLocation ParameterBlockReflection::getResourceBinding(const std::string& name) const\n 2005      {\n 2006          return getElementType()->getMemberOffset(name);\n ....\n 2085      {\n 2086          if (*mpType != *other.mpType) return false;\n 2087:         if (mBindLocation != other.mBindLocation) return false;\n 2088          if (mName != other.mName) return false;\n 2089  \n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramReflection.h:\n 1147      /** Get the variable offset\n 1148      */\n 1149:     ShaderVarOffset getBindLocation() const { return mBindLocation; }\n 1150:     size_t getByteOffset() const { return mBindLocation.getByteOffset(); }\n 1151:     size_t getOffset() const { return mBindLocation.getByteOffset(); }\n 1152  \n 1153      bool operator==(const ReflectionVar& other) const;\n ....\n 1162      std::string mName;\n 1163      ReflectionType::SharedConstPtr mpType;\n 1164:     ShaderVarOffset mBindLocation;\n 1165  };\n 1166  \n ....\n 1193      ReflectionType::SharedConstPtr getElementType() const { return mpElementType; }\n 1194  \n 1195:     using BindLocation = TypedShaderVarOffset;\n 1196  \n 1197      // TODO(tfoley): The following two functions really pertain to members, not just resources.\n ....\n 1203      /** Get the bind-location for a resource in the block\n 1204      */\n 1205:     BindLocation getResourceBinding(const std::string& name) const;\n 1206  \n 1207      /// Information on how a particular descriptor set should be filled in.\n ....\n 1429      using VariableMap = std::unordered_map<std::string, ShaderVariable>;\n 1430  \n 1431:     using BindLocation = ParameterBlockReflection::BindLocation;\n 1432  \n 1433      /** Create a new object for a Slang reflector object\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ShaderVar.cpp:\n   63              {\n   64                  // Need to apply the offsets from member\n   65:                 TypedShaderVarOffset newOffset = TypedShaderVarOffset(pMember->getType().get(), mOffset + pMember->getBindLocation());\n   66                  return ShaderVar(mpBlock, newOffset);\n   67              }\n   ..\n  100  \n  101                  // Need to apply the offsets from member\n  102:                 TypedShaderVarOffset newOffset = TypedShaderVarOffset(pMember->getType().get(), mOffset + pMember->getBindLocation());\n  103                  return ShaderVar( mpBlock, newOffset);\n  104              }\n  ...\n  180                  auto pMember = pStructType->getMember(index);\n  181                  // Need to apply the offsets from member\n  182:                 TypedShaderVarOffset newOffset = TypedShaderVarOffset(pMember->getType().get(), mOffset + pMember->getBindLocation());\n  183                  return ShaderVar(mpBlock, newOffset);\n  184              }\n  ...\n  269  \n  270                  auto offsetIntoMember = byteOffset - memberByteOffset;\n  271:                 TypedShaderVarOffset memberOffset = TypedShaderVarOffset(pMember->getType().get(), mOffset + pMember->getBindLocation());\n  272                  ShaderVar memberCursor(mpBlock, memberOffset);\n  273                  return memberCursor[UniformShaderVarOffset(offsetIntoMember)];\n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp:\n  154  \n  155          // Save bind locations for resourced updated during draw\n  156:         mBindLocations.simulateCB = pSimulateCs->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"PerFrame\");\n  157:         mBindLocations.drawCB = pDrawProgram->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"PerFrame\");\n  158:         mBindLocations.emitCB = pEmitCs->getReflector()->getDefaultParameterBlock()->getResourceBinding(\"PerEmit\");\n  159      }\n  160  \n  ...\n  185  \n  186          //Send vars and call\n  187:         mEmitResources.pVars->getParameterBlock(mBindLocations.emitCB)->setBlob(&emitData, 0u, sizeof(EmitData));\n  188          uint32_t numGroups = div_round_up(num, kParticleEmitThreads);\n  189          pCtx->dispatch(mEmitResources.pState.get(), mEmitResources.pVars.get(), {1, numGroups, 1});\n  ...\n  207              perFrame.dt = dt;\n  208              perFrame.maxParticles = mMaxParticles;\n  209:             mSimulateResources.pVars->getParameterBlock(mBindLocations.simulateCB)->setBlob(&perFrame, 0u, sizeof(SimulateWithSortPerFrame));\n  210              mpAliveList->setBlob(mSortDataReset.data(), 0, sizeof(SortData) * mMaxParticles);\n  211          }\n  ...\n  215              perFrame.dt = dt;\n  216              perFrame.maxParticles = mMaxParticles;\n  217:             mSimulateResources.pVars->getParameterBlock(mBindLocations.simulateCB)->setBlob(&perFrame, 0u, sizeof(SimulatePerFrame));\n  218          }\n  219  \n  ...\n  233          cbuf.view = view;\n  234          cbuf.proj = proj;\n  235:         mDrawResources.pVars->getParameterBlock(mBindLocations.drawCB)->setBlob(&cbuf, 0, sizeof(cbuf));\n  236  \n  237          //particle draw uses many of render context's existing state's properties\n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.h:\n  198          struct\n  199          {\n  200:             ProgramReflection::BindLocation simulateCB;\n  201:             ProgramReflection::BindLocation drawCB;\n  202:             ProgramReflection::BindLocation emitCB;\n  203:         } mBindLocations;\n  204  \n  205          uint32_t mMaxParticles;\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.cpp:\n   76          GraphicsVars::SharedPtr mpProgramVars;\n   77          std::vector<Texture::SharedPtr> mpImages;\n   78:         ParameterBlockReflection::BindLocation mGuiImageLoc;\n   79          float mScaleFactor = 1.0f;\n   80          std::unordered_map<std::string, ImFont*> mFontMap;\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSM.cpp:\n  117  public:\n  118      using UniquePtr = std::unique_ptr<CsmSceneRenderer>;\n  119:     static UniquePtr create(const Scene::SharedConstPtr& pScene, const ProgramReflection::BindLocation& alphaMapCbLoc, const ProgramReflection::BindLocation& alphaMapLoc, const ProgramReflection::BindLocation& alphaMapSamplerLoc)\n  120      {\n  121          return UniquePtr(new CsmSceneRenderer(pScene, alphaMapCbLoc, alphaMapLoc, alphaMapSamplerLoc));\n  ...\n  132  \n  133  protected:\n  134:     CsmSceneRenderer(const Scene::SharedConstPtr& pScene, const ProgramReflection::BindLocation& alphaMapCbLoc, const ProgramReflection::BindLocation& alphaMapLoc, const ProgramReflection::BindLocation& alphaMapSamplerLoc)\n  135          : SceneRenderer(std::const_pointer_cast<Scene>(pScene))\n  136      {\n  137:         mBindLocations.alphaCB = alphaMapCbLoc;\n  138:         mBindLocations.alphaMap = alphaMapLoc;\n  139:         mBindLocations.alphaMapSampler = alphaMapSamplerLoc;\n  140  \n  141          toggleMeshCulling(false);\n  ...\n  158      struct\n  159      {\n  160:         ProgramReflection::BindLocation alphaMap;\n  161:         ProgramReflection::BindLocation alphaCB;\n  162:         ProgramReflection::BindLocation alphaMapSampler;\n  163:     } mBindLocations;\n  164  \n  165      bool mDepthClamp;\n  ...\n  189              float alphaThreshold = currentData.pMaterial->getAlphaThreshold();\n  190              auto& pDefaultBlock = currentData.pVars;\n  191:             pDefaultBlock->getParameterBlock(mBindLocations.alphaCB, 0)->setBlob(&alphaThreshold, 0u, sizeof(float));\n  192              if (currentData.pMaterial->getBaseColorTexture())\n  193              {\n  194:                 pDefaultBlock->setSrv(mBindLocations.alphaMap, 0, currentData.pMaterial->getBaseColorTexture()->getSRV());\n  195              }\n  196              else\n  197              {\n  198:                 pDefaultBlock->setSrv(mBindLocations.alphaMap, 0, nullptr);\n  199              }\n  200:             pDefaultBlock->setSampler(mBindLocations.alphaMapSampler, 0, mpAlphaSampler);\n  201              currentData.pState->getProgram()->addDefine(\"TEST_ALPHA\");\n  202          }\n\n/home/max/dev/Falcor/src/RenderPasses/CSM/CSM.h:\n  190      void onResize(uint32_t width, uint32_t height);\n  191      void setupVisibilityPassFbo(const Texture::SharedPtr& pVisBuffer);\n  192:     ProgramReflection::BindLocation mPerLightCbLoc;\n  193  \n  194      void resizeShadowMap(const uint2& smDims);\n\n96 matches across 12 files\n\n\nSearching 1126 files for \"[[vk::binding\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.slang:\n   30  Texture2D guiImage;\n   31  \n   32: [[vk::binding(0,0)]]\n   33  cbuffer PerFrameCB : register(b0)\n   34  {\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.slang:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: [[vk::binding(0,0)]]\n   29  cbuffer PerFrameCB : register(b0)\n   30  {\n   ..\n   33  };\n   34  \n   35: [[vk::binding(2,0)]]\n   36  Texture2D gFontTex : register(t2);\n   37  \n\n/home/max/dev/Falcor/src/Samples/ModelViewer/ModelViewer.ps.slang:\n   28  import Scene.Raster;\n   29  \n   30: [[vk::binding(0, 0)]]\n   31  cbuffer PerFrameCB : register(b0)\n   32  {\n\n4 matches across 3 files\n\n\nSearching 1126 files for \"vk::binding\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang:\n   30  import Scene.Material.BRDF;\n   31  \n   32: [[vk::binding(0, 0)]]\n   33  SamplerState gSampler : register(s0);\n   34  \n   35: [[vk::binding(0, 0)]]\n   36  Texture2D gInputTex : register(t1);\n   37  \n   38: [[vk::binding(0, 0)]]\n   39  cbuffer DataCB : register(b0)\n   40  {\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.slang:\n   30  Texture2D guiImage;\n   31  \n   32: [[vk::binding(0,0)]]\n   33  cbuffer PerFrameCB : register(b0)\n   34  {\n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/TextRenderer.slang:\n   26   # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   27   **************************************************************************/\n   28: [[vk::binding(0,0)]]\n   29  cbuffer PerFrameCB : register(b0)\n   30  {\n   ..\n   33  };\n   34  \n   35: [[vk::binding(2,0)]]\n   36  Texture2D gFontTex : register(t2);\n   37  \n\n/home/max/dev/Falcor/src/Samples/ModelViewer/ModelViewer.ps.slang:\n   28  import Scene.Raster;\n   29  \n   30: [[vk::binding(0, 0)]]\n   31  cbuffer PerFrameCB : register(b0)\n   32  {\n\n7 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 374873,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp",
			"settings":
			{
				"buffer_size": 8584,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cs.slang",
			"settings":
			{
				"buffer_size": 3086,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
			"settings":
			{
				"buffer_size": 8125,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.cpp",
			"settings":
			{
				"buffer_size": 23683,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphIR.cpp",
			"settings":
			{
				"buffer_size": 5922,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphIR.h",
			"settings":
			{
				"buffer_size": 3409,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/AssimpImporter.cpp",
			"settings":
			{
				"buffer_size": 46137,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
			"settings":
			{
				"buffer_size": 4143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GraphicsStateObject.h",
			"settings":
			{
				"buffer_size": 6065,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeStateObject.h",
			"settings":
			{
				"buffer_size": 3237,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeContext.h",
			"settings":
			{
				"buffer_size": 3917,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuTimer.h",
			"settings":
			{
				"buffer_size": 3717,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/LowLevelContextData.h",
			"settings":
			{
				"buffer_size": 3534,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Profiler.h",
			"settings":
			{
				"buffer_size": 7984,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Windows/Windows.cpp",
			"settings":
			{
				"buffer_size": 26025,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
			"settings":
			{
				"buffer_size": 139342,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/vulkan/render-vk.cpp",
			"settings":
			{
				"buffer_size": 99401,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgramVarsHelper.cpp",
			"settings":
			{
				"buffer_size": 6214,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/FalcorD3D12.h",
			"settings":
			{
				"buffer_size": 9709,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.cpp",
			"settings":
			{
				"buffer_size": 8771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/PythonImporter.cpp",
			"settings":
			{
				"buffer_size": 3792,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/SceneImporter.cpp",
			"settings":
			{
				"buffer_size": 41892,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.h",
			"settings":
			{
				"buffer_size": 12317,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/GraphicsProgram.h",
			"settings":
			{
				"buffer_size": 3729,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ComputeProgram.h",
			"settings":
			{
				"buffer_size": 3738,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.slang",
			"settings":
			{
				"buffer_size": 5388,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/ArgList.h",
			"settings":
			{
				"buffer_size": 4141,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.cpp",
			"settings":
			{
				"buffer_size": 22968,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/stdafx.h",
			"settings":
			{
				"buffer_size": 1851,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Renderer.h",
			"settings":
			{
				"buffer_size": 6577,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassLibrary.cpp",
			"settings":
			{
				"buffer_size": 10251,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassLibrary.h",
			"settings":
			{
				"buffer_size": 5171,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/UserInput.h",
			"settings":
			{
				"buffer_size": 7610,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.h",
			"settings":
			{
				"buffer_size": 7293,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.h",
			"settings":
			{
				"buffer_size": 26171,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Window.cpp",
			"settings":
			{
				"buffer_size": 19191,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Window.h",
			"settings":
			{
				"buffer_size": 5627,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/ArgList.cpp",
			"settings":
			{
				"buffer_size": 6596,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.h",
			"settings":
			{
				"buffer_size": 7395,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cpp",
			"settings":
			{
				"buffer_size": 6996,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/DebugPasses/InvalidPixelDetectionTests.cpp",
			"settings":
			{
				"buffer_size": 3615,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Testing/UnitTest.h",
			"settings":
			{
				"buffer_size": 18163,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Testing/UnitTest.cpp",
			"settings":
			{
				"buffer_size": 11789,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ComputeProgram.cpp",
			"settings":
			{
				"buffer_size": 2536,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp",
			"settings":
			{
				"buffer_size": 6728,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cs.slang",
			"settings":
			{
				"buffer_size": 1913,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.cpp",
			"settings":
			{
				"buffer_size": 5154,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.h",
			"settings":
			{
				"buffer_size": 11375,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.cpp",
			"settings":
			{
				"buffer_size": 5551,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RasterizerState.h",
			"settings":
			{
				"buffer_size": 7490,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RasterizerState.cpp",
			"settings":
			{
				"buffer_size": 2247,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRasterizerState.cpp",
			"settings":
			{
				"buffer_size": 2034,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/QueryHeap.h",
			"settings":
			{
				"buffer_size": 3488,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Formats.h",
			"settings":
			{
				"buffer_size": 13737,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.h",
			"settings":
			{
				"buffer_size": 17286,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvProbe.h",
			"settings":
			{
				"buffer_size": 3717,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1908,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Extensions/Capture/CaptureTrigger.cpp",
			"settings":
			{
				"buffer_size": 7876,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Extensions/Capture/FrameCapture.cpp",
			"settings":
			{
				"buffer_size": 6741,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/RenderGraphEditor/RenderGraphEditor.cpp",
			"settings":
			{
				"buffer_size": 20892,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Externals/dear_imgui_addons/imguinodegrapheditor/imguinodegrapheditor.h",
			"settings":
			{
				"buffer_size": 47853,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/ImageCompare/ImageCompare.cpp",
			"settings":
			{
				"buffer_size": 14050,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.h",
			"settings":
			{
				"buffer_size": 8004,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphImportExport.cpp",
			"settings":
			{
				"buffer_size": 6264,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/ResourceCache.cpp",
			"settings":
			{
				"buffer_size": 8268,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassReflection.cpp",
			"settings":
			{
				"buffer_size": 12090,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPass.cpp",
			"settings":
			{
				"buffer_size": 2424,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderPasses/ResolvePass.h",
			"settings":
			{
				"buffer_size": 2569,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderPasses/ResolvePass.cpp",
			"settings":
			{
				"buffer_size": 2997,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4984,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "file( GLOB SOURCES"
			}
		},
		{
			"file": "src/Falcor/Scene/ParticleSystem/ParticleSystem.h",
			"settings":
			{
				"buffer_size": 10388,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp",
			"settings":
			{
				"buffer_size": 16300,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/HitInfo.h",
			"settings":
			{
				"buffer_size": 3774,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1201,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/RenderGraphEditor/RenderGraphEditor.h",
			"settings":
			{
				"buffer_size": 3325,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/DebugPasses.cpp",
			"settings":
			{
				"buffer_size": 2436,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.h",
			"settings":
			{
				"buffer_size": 3014,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.h",
			"settings":
			{
				"buffer_size": 2457,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.h",
			"settings":
			{
				"buffer_size": 2592,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CSM.h",
			"settings":
			{
				"buffer_size": 8927,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CSM.cpp",
			"settings":
			{
				"buffer_size": 40072,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.slang",
			"settings":
			{
				"buffer_size": 2501,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/TextRenderer.slang",
			"settings":
			{
				"buffer_size": 2282,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp",
			"settings":
			{
				"buffer_size": 16602,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.h",
			"settings":
			{
				"buffer_size": 4765,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.h",
			"settings":
			{
				"buffer_size": 3454,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.cpp",
			"settings":
			{
				"buffer_size": 15261,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.h",
			"settings":
			{
				"buffer_size": 3282,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.cpp",
			"settings":
			{
				"buffer_size": 7947,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
			"settings":
			{
				"buffer_size": 4461,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
			"settings":
			{
				"buffer_size": 9683,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ImageLoader/ImageLoader.h",
			"settings":
			{
				"buffer_size": 2863,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ImageLoader/ImageLoader.cpp",
			"settings":
			{
				"buffer_size": 5049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ToneMapper/ToneMapper.h",
			"settings":
			{
				"buffer_size": 5456,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ToneMapper/ToneMapper.cpp",
			"settings":
			{
				"buffer_size": 16164,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/AccumulatePass/AccumulatePass.cpp",
			"settings":
			{
				"buffer_size": 10798,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBufferBase.h",
			"settings":
			{
				"buffer_size": 3654,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBufferBase.cpp",
			"settings":
			{
				"buffer_size": 6505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.h",
			"settings":
			{
				"buffer_size": 2997,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp",
			"settings":
			{
				"buffer_size": 9899,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.cpp",
			"settings":
			{
				"buffer_size": 5179,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SSAO/SSAO.cpp",
			"settings":
			{
				"buffer_size": 11689,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.h",
			"settings":
			{
				"buffer_size": 3442,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.h",
			"settings":
			{
				"buffer_size": 3281,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.h",
			"settings":
			{
				"buffer_size": 3771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp",
			"settings":
			{
				"buffer_size": 5767,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp",
			"settings":
			{
				"buffer_size": 5566,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp",
			"settings":
			{
				"buffer_size": 9623,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Antialiasing/Antialiasing.cpp",
			"settings":
			{
				"buffer_size": 2797,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BlitPass/BlitPass.cpp",
			"settings":
			{
				"buffer_size": 3965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
			"settings":
			{
				"buffer_size": 19104,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BlitPass/BlitPass.h",
			"settings":
			{
				"buffer_size": 2776,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/AccumulatePass/AccumulatePass.h",
			"settings":
			{
				"buffer_size": 5423,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 3422,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 287,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/StringUtils.h",
			"settings":
			{
				"buffer_size": 12635,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/ModelViewer/ModelViewer.cpp",
			"settings":
			{
				"buffer_size": 9979,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/ModelViewer/ModelViewer.ps.slang.bak",
			"settings":
			{
				"buffer_size": 2408,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/ModelViewer/ModelViewer.ps.slang",
			"settings":
			{
				"buffer_size": 1931,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang",
			"settings":
			{
				"buffer_size": 7921,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1429,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/ShaderToy/ShaderToy.cpp",
			"settings":
			{
				"buffer_size": 4229,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/FullScreenPass.cpp",
			"settings":
			{
				"buffer_size": 5500,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
			"settings":
			{
				"buffer_size": 3831,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/BaseGraphicsPass.cpp",
			"settings":
			{
				"buffer_size": 2717,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/FrameRate.h",
			"settings":
			{
				"buffer_size": 3768,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/FrameRate.cpp",
			"settings":
			{
				"buffer_size": 2279,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
			"settings":
			{
				"buffer_size": 6356,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
			"settings":
			{
				"buffer_size": 7799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
			"settings":
			{
				"buffer_size": 29474,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
			"settings":
			{
				"buffer_size": 66954,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
			"settings":
			{
				"buffer_size": 15340,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cs.slang",
			"settings":
			{
				"buffer_size": 2850,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ShaderVar.cpp",
			"settings":
			{
				"buffer_size": 15515,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
			"settings":
			{
				"buffer_size": 11254,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.cpp",
			"settings":
			{
				"buffer_size": 3251,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphCompiler.cpp",
			"settings":
			{
				"buffer_size": 19890,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
			"settings":
			{
				"buffer_size": 30778,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Dictionary.h",
			"settings":
			{
				"buffer_size": 4523,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphUI.cpp",
			"settings":
			{
				"buffer_size": 64727,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/PixelDebug.cpp",
			"settings":
			{
				"buffer_size": 10326,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ParallelReduction.cpp",
			"settings":
			{
				"buffer_size": 5991,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/BitonicSort.cpp",
			"settings":
			{
				"buffer_size": 4343,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp",
			"settings":
			{
				"buffer_size": 9405,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Console.cpp",
			"settings":
			{
				"buffer_size": 4108,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/ScriptBindings.cpp",
			"settings":
			{
				"buffer_size": 4848,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
			"settings":
			{
				"buffer_size": 3485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Clock.cpp",
			"settings":
			{
				"buffer_size": 11030,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/TextureLoader.cpp",
			"settings":
			{
				"buffer_size": 24290,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/assimp/include/assimp/Bitmap.h",
			"settings":
			{
				"buffer_size": 4295,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.h",
			"settings":
			{
				"buffer_size": 5124,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Logger.h",
			"settings":
			{
				"buffer_size": 5415,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Logger.cpp",
			"settings":
			{
				"buffer_size": 6794,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
			"settings":
			{
				"buffer_size": 5721,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Profiler.cpp",
			"settings":
			{
				"buffer_size": 10243,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.cpp",
			"settings":
			{
				"buffer_size": 55968,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/render-test/bind-location.h",
			"settings":
			{
				"buffer_size": 19257,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Font.cpp",
			"settings":
			{
				"buffer_size": 5058,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
			"settings":
			{
				"buffer_size": 84145,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.cpp",
			"settings":
			{
				"buffer_size": 14926,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.h",
			"settings":
			{
				"buffer_size": 6650,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ShaderVar.h",
			"settings":
			{
				"buffer_size": 16925,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramReflection.h",
			"settings":
			{
				"buffer_size": 54804,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.cpp",
			"settings":
			{
				"buffer_size": 37217,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.cpp",
			"settings":
			{
				"buffer_size": 12009,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.cpp",
			"settings":
			{
				"buffer_size": 18095,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.h",
			"settings":
			{
				"buffer_size": 13680,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.h",
			"settings":
			{
				"buffer_size": 14778,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/ShadingUtils/RaytracingTests.cpp",
			"settings":
			{
				"buffer_size": 4882,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp",
			"settings":
			{
				"buffer_size": 7671,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp",
			"settings":
			{
				"buffer_size": 2978,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp",
			"settings":
			{
				"buffer_size": 3625,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/TraceRayFlags.cpp",
			"settings":
			{
				"buffer_size": 3163,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/TraceRayInline.cpp",
			"settings":
			{
				"buffer_size": 2113,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp",
			"settings":
			{
				"buffer_size": 5681,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/SlangMutatingTests.cpp",
			"settings":
			{
				"buffer_size": 2588,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Utils/HalfUtilsTests.cpp",
			"settings":
			{
				"buffer_size": 15238,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
			"settings":
			{
				"buffer_size": 5550,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuTimer.cpp",
			"settings":
			{
				"buffer_size": 4393,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGpuTimer.cpp",
			"settings":
			{
				"buffer_size": 2936,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
			"settings":
			{
				"buffer_size": 5750,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
			"settings":
			{
				"buffer_size": 27058,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
			"settings":
			{
				"buffer_size": 7764,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/FalcorTest.h",
			"settings":
			{
				"buffer_size": 2143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/FalcorTest.cpp",
			"settings":
			{
				"buffer_size": 3605,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Sampling/SampleGeneratorTests.cpp",
			"settings":
			{
				"buffer_size": 7287,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp",
			"settings":
			{
				"buffer_size": 7721,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp",
			"settings":
			{
				"buffer_size": 5291,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp",
			"settings":
			{
				"buffer_size": 2373,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
			"settings":
			{
				"buffer_size": 15074,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Windows/ProgressBarWin.cpp",
			"settings":
			{
				"buffer_size": 4513,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.h",
			"settings":
			{
				"buffer_size": 15995,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.h",
			"settings":
			{
				"buffer_size": 3819,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.cpp",
			"settings":
			{
				"buffer_size": 15842,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/MogwaiSettings.h",
			"settings":
			{
				"buffer_size": 2575,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/MogwaiSettings.cpp",
			"settings":
			{
				"buffer_size": 10767,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/MogwaiScripting.cpp",
			"settings":
			{
				"buffer_size": 6779,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Shader.h",
			"settings":
			{
				"buffer_size": 8299,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Sampler.h",
			"settings":
			{
				"buffer_size": 7691,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Sampler.cpp",
			"settings":
			{
				"buffer_size": 3799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/stdafx.h",
			"settings":
			{
				"buffer_size": 1831,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/CopyContext.cpp",
			"settings":
			{
				"buffer_size": 7371,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.cpp",
			"settings":
			{
				"buffer_size": 3603,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
			"settings":
			{
				"buffer_size": 6616,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
			"settings":
			{
				"buffer_size": 8174,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeContext.cpp",
			"settings":
			{
				"buffer_size": 2991,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12ComputeContext.cpp",
			"settings":
			{
				"buffer_size": 6740,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12LowLevelContextData.cpp",
			"settings":
			{
				"buffer_size": 4664,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
			"settings":
			{
				"buffer_size": 5474,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FencedPool.h",
			"settings":
			{
				"buffer_size": 4110,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
			"settings":
			{
				"buffer_size": 17609,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
			"settings":
			{
				"buffer_size": 2878,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
			"settings":
			{
				"buffer_size": 14122,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2187,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/render-test/cuda/cuda-compute-util.cpp",
			"settings":
			{
				"buffer_size": 53192,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp",
			"settings":
			{
				"buffer_size": 7287,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
			"settings":
			{
				"buffer_size": 5474,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVersion.h",
			"settings":
			{
				"buffer_size": 10308,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/examples/model-viewer/main.cpp",
			"settings":
			{
				"buffer_size": 86920,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.h",
			"settings":
			{
				"buffer_size": 8568,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RootSignature.h",
			"settings":
			{
				"buffer_size": 6505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RootSignature.cpp",
			"settings":
			{
				"buffer_size": 8573,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/render.h",
			"settings":
			{
				"buffer_size": 28476,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
			"settings":
			{
				"buffer_size": 5151,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.h",
			"settings":
			{
				"buffer_size": 9745,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuMemoryHeap.h",
			"settings":
			{
				"buffer_size": 3971,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp",
			"settings":
			{
				"buffer_size": 2682,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
			"settings":
			{
				"buffer_size": 22140,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
			"settings":
			{
				"buffer_size": 5775,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 8736,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorData.h",
			"settings":
			{
				"buffer_size": 2468,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
			"settings":
			{
				"buffer_size": 27801,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGpuFence.cpp",
			"settings":
			{
				"buffer_size": 9726,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12GpuFence.cpp",
			"settings":
			{
				"buffer_size": 3766,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuFence.h",
			"settings":
			{
				"buffer_size": 3246,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
			"settings":
			{
				"buffer_size": 9322,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "falcor.sublime-project",
			"settings":
			{
				"buffer_size": 2302,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeLinter-cpplint\n---------------------\n\n  SublimeLinter-cpplint\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to cpplint.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-cpplint\n\n\nSublimeLinter-cppcheck\n----------------------\n\n  SublimeLinter-cppcheck\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to cppcheck.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-cppcheck\n\n\nSublimeLinter-clang\n-------------------\n\n  SublimeLinter-clang\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to clang.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-clang\n\n\nSublimeLinter\n-------------\n\n  \n    ____        _     _ _                _     _       _\n   / ___| _   _| |__ | (_)_ __ ___   ___| |   (_)_ __ | |_ ___ _ __\n   \\___ \\| | | | '_ \\| | | '_ ` _ \\ / _ \\ |   | | '_ \\| __/ _ \\ '__|\n    ___) | |_| | |_) | | | | | | | |  __/ |___| | | | | ||  __/ |\n   |____/ \\__,_|_.__/|_|_|_| |_| |_|\\___|_____|_|_| |_|\\__\\___|_|\n  \n  \n  Welcome to SublimeLinter, a linter framework for Sublime Text 3.\n  Linters are not included, they must be installed separately.\n  \n  \n  For complete documentation on how to use and configure SublimeLinter,\n  please see: http://www.sublimelinter.com\n  \n  To report issues: https://github.com/SublimeLinter/SublimeLinter\n\n\nSublimeLinter-gcc\n-----------------\n\n  SublimeLinter-gcc\n  =================\n  \n  This linter plugin for [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter) provides an interface to [gcc](https://gcc.gnu.org/) or other gcc-like (cross-)compiler.\n  It will be used with files that have the C/C++ syntax.\n  If you are using [clang](https://clang.llvm.org), you may want to check [SublimeLinter-clang](https://github.com/SublimeLinter/SublimeLinter-clang).\n  \n  \n  Installation\n  ============\n  \n  SublimeLinter must be installed in order to use this plugin.\n  If SublimeLinter is not installed, please follow the instructions\n  [here](http://sublimelinter.readthedocs.org/en/stable/installation.html).\n  \n  \n  Linter installation\n  -------------------\n  \n  Before using this plugin, you must ensure that `gcc` or other gcc-like (cross-)compiler is installed on your system.\n  \n  You may install `gcc` with the following method:\n  \n  - Mac OS X: [OSX GCC Installer](https://github.com/kennethreitz/osx-gcc-installer)\n  - Linux: `gcc` could be installed by using most package managers.\n  - Windows: [MinGW-w64](https://sourceforge.net/projects/mingw-w64)\n  \n  Once `gcc` is installed, you must ensure it is in your system PATH so that SublimeLinter can find it.\n  This may not be as straightforward as you think, so please read [How linter executables are located](http://sublimelinter.readthedocs.org/en/stable/usage.html#how-linter-executables-are-located) in the documentation.\n  \n  \n  Plugin installation\n  -------------------\n  \n  Please use [Package Control](https://sublime.wbond.net/installation) to install the linter plugin.\n  This will ensure that the plugin will be updated when new versions are available.\n  If you want to install from source so you can modify the source code,\n  you probably know what you are doing so we won't cover that here.\n  \n  To install via Package Control, do the following:\n  \n  1. Within Sublime Text, bring up the [Command Palette](http://docs.sublimetext.info/en/sublime-text-3/extensibility/command_palette.html) and type `install`.\n     Among the commands you should see `Package Control: Install Package`.\n     If that command is not highlighted, use the keyboard or mouse to select it.\n     There will be a pause of a few seconds while Package Control fetches the list of available plugins.\n  \n  1. When the plugin list appears, type `gcc`. Among the entries you should see `SublimeLinter-gcc`.\n     If that entry is not highlighted, use the keyboard or mouse to select it.\n  \n  \n  Settings\n  ========\n  \n  Here are some most frequently used custom settings.\n  \n  | Setting | Description |\n  | :------ | :---------- |\n  | executable | The compiler binary path. This is `[\"gcc\"]` or `[\"g++\"]` by default. If you are not using them, you have to set this to your compiler binary such as `[\"arm-none-eabi-gcc\"]`. |\n  | I | A list of directories to be added to the header search paths. I.e., paths for `-I` flags. |\n  | args | A list of extra flags to pass to the compiler. These should be used carefully, as they may cause linting to fail. |\n  \n  \n  Here is an example settings:\n  \n  ```javascript\n  {\n      \"linters\":\n      {\n          \"gcc\": {\n              \"disable\": false,\n              \"executable\": [\"gcc\"],\n              \"args\": [\"-fsyntax-only\", \"-std=c90\"],\n              \"I\": [\n                  \"${file_path}/include\",\n                  \"${folder}/include\",\n                  \"/usr/local/include\",\n              ],\n              \"excludes\": [],\n          },\n          \"g++\": {\n              \"disable\": false,\n              \"executable\": [\"g++\"],\n              \"args\": [\"-fsyntax-only\", \"-std=c++17\"],\n              \"I\": [\n                  \"${file_path}/include\",\n                  \"${folder}/include\",\n                  \"/usr/local/include\",\n              ],\n              \"excludes\": [],\n          },\n      },\n  }\n  ```\n  \n  Here are some useful docs for SublimeLinter settings.\n  \n  - [General information on how SublimeLinter works with settings](http://sublimelinter.readthedocs.org/en/stable/settings.html).\n  - [Variables that can be used in settings](http://www.sublimelinter.com/en/stable/settings.html#settings-expansion).\n  - [Information on generic linter settings](http://sublimelinter.readthedocs.org/en/stable/linter_settings.html).\n  \n  \n  Notes\n  =====\n  \n  - [Here](https://gcc.gnu.org/onlinedocs/gcc-9.1.0/gcc/Warning-Options.html#Warning-Options)\n    is the official list of warning options in gcc 8.2.0. I prefer turn on all warnings\n    via `-Wall` (this is default for this plugin) and then suppress unwanted warnings via `-Wno-` prefix.\n  \n  - Flag `-fsyntax-only` gives a much faster syntax-only checking but\n    [some warnings](https://github.com/SublimeLinter/SublimeLinter-gcc/issues/4)\n    which are emitted in the code optimization phase would not be caught.\n  \n  \n  Demo\n  ====\n  \n  ![linting_example](https://raw.githubusercontent.com/SublimeLinter/SublimeLinter-gcc/gh-pages/images/linting_example_sl4.png)\n  \n  \n  Troubleshooting\n  ===============\n  \n  C/C++ linting is not always straightforward.\n  A few things to try when there's (almost) no linting information available:\n  \n  - Try to compile from the command line, and verify it works.\n  - The linter might be missing some header files. They can be added with settings `I`.\n  - Sometimes gcc fails to locate the C/C++ standard library headers.\n  \n  Assuming the compilation works when executed via command line, try to compile with `g++ -v`.\n  This will display all of the hidden flags that gcc uses.\n  As a last resort, they can all be added in settings `args`.\n  \n  \n  Contributing\n  ============\n  \n  If you would like to contribute enhancements or fixes, please do the following:\n  \n  1. Fork the plugin repository.\n  1. Hack on a separate topic branch created from the latest `master`.\n  1. Commit and push the topic branch.\n  1. Make sure your modification could pass unittests.\n  1. Make a pull request.\n  1. Be patient.\n  \n  Please note that modifications should follow these coding guidelines:\n  \n  - Indent is 4 spaces.\n  - Code should pass flake8 and pep257 linters.\n  - Probably format codes with [black](https://github.com/psf/black) code formatter.\n  - Vertical whitespace helps readability, don’t be afraid to use it.\n  - Please use descriptive variable names, no abbreviations unless they are very well known.\n  \n  Thank you for helping out!\n  \n  \n  Supporters <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ATXYY9Y78EQ3Y\" target=\"_blank\"><img src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" /></a>\n  ==========\n  \n  Thank you guys for sending me some cups of coffee.\n",
			"settings":
			{
				"buffer_size": 8286,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "third_party/slang/external/vulkan/include/vulkan/vulkan.hpp",
			"settings":
			{
				"buffer_size": 2369181,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/include/vulkan/vulkan.hpp",
			"settings":
			{
				"buffer_size": 3544623,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/vulkan/include/vulkan/vulkan_core.h",
			"settings":
			{
				"buffer_size": 451013,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/FalcorMath.h",
			"settings":
			{
				"buffer_size": 8456,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.h",
			"settings":
			{
				"buffer_size": 13038,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/type.h",
			"settings":
			{
				"buffer_size": 6550,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.cpp",
			"settings":
			{
				"buffer_size": 2253,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/CopyContext.h",
			"settings":
			{
				"buffer_size": 7485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VertexLayout.cpp",
			"settings":
			{
				"buffer_size": 1862,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/FalcorConfig.h",
			"settings":
			{
				"buffer_size": 2513,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
			"settings":
			{
				"buffer_size": 2479,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Falcor.h",
			"settings":
			{
				"buffer_size": 6959,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/PixelDebug.h",
			"settings":
			{
				"buffer_size": 5658,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
			"settings":
			{
				"buffer_size": 10241,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Console.h",
			"settings":
			{
				"buffer_size": 2101,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.h",
			"settings":
			{
				"buffer_size": 5726,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorPool.h",
			"settings":
			{
				"buffer_size": 4744,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorPool.cpp",
			"settings":
			{
				"buffer_size": 2589,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.h",
			"settings":
			{
				"buffer_size": 10483,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.cpp",
			"settings":
			{
				"buffer_size": 9191,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/ComputeState.cpp",
			"settings":
			{
				"buffer_size": 3479,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/ComputeState.h",
			"settings":
			{
				"buffer_size": 3532,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/StateGraph.h",
			"settings":
			{
				"buffer_size": 4323,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgram/RtProgram.cpp",
			"settings":
			{
				"buffer_size": 7986,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgram/RtProgram.h",
			"settings":
			{
				"buffer_size": 6561,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/AppData.h",
			"settings":
			{
				"buffer_size": 2896,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Linux/ProgressBarLinux.cpp",
			"settings":
			{
				"buffer_size": 5059,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/AppData.cpp",
			"settings":
			{
				"buffer_size": 5386,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Extensions/Capture/CaptureTrigger.h",
			"settings":
			{
				"buffer_size": 3663,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.cpp",
			"settings":
			{
				"buffer_size": 24010,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VertexLayout.h",
			"settings":
			{
				"buffer_size": 7327,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.cpp",
			"settings":
			{
				"buffer_size": 11479,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.h",
			"settings":
			{
				"buffer_size": 5235,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 2524,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.cpp",
			"settings":
			{
				"buffer_size": 3685,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Falcor.sln",
			"settings":
			{
				"buffer_size": 19418,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.h",
			"settings":
			{
				"buffer_size": 24873,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphUI.h",
			"settings":
			{
				"buffer_size": 8554,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.h",
			"settings":
			{
				"buffer_size": 11049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/ResourceCache.h",
			"settings":
			{
				"buffer_size": 5280,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.h",
			"settings":
			{
				"buffer_size": 4132,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/DebugConsole.h",
			"settings":
			{
				"buffer_size": 4137,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/debug.h",
			"settings":
			{
				"buffer_size": 1646,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#ifndef __FALCOR_DEBUG_H__"
			}
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
			"settings":
			{
				"buffer_size": 20152,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.cpp",
			"settings":
			{
				"buffer_size": 53426,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12Resource.cpp",
			"settings":
			{
				"buffer_size": 6227,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/max/dev/Falcor",
		"/home/max/dev/Falcor/src",
		"/home/max/dev/Falcor/src/Falcor",
		"/home/max/dev/Falcor/src/Falcor/Core",
		"/home/max/dev/Falcor/src/Falcor/Core/API",
		"/home/max/dev/Falcor/src/Falcor/Core/API/D3D12",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
		"/home/max/dev/Falcor/src/Falcor/Core/BufferTypes",
		"/home/max/dev/Falcor/src/Falcor/Core/Platform",
		"/home/max/dev/Falcor/src/Falcor/Core/Program",
		"/home/max/dev/Falcor/src/Falcor/Core/State",
		"/home/max/dev/Falcor/src/Falcor/Experimental",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Material",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/BasePasses",
		"/home/max/dev/Falcor/src/Falcor/RenderPasses",
		"/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared",
		"/home/max/dev/Falcor/src/Falcor/Scene",
		"/home/max/dev/Falcor/src/Falcor/Scene/Lights",
		"/home/max/dev/Falcor/src/Falcor/Testing",
		"/home/max/dev/Falcor/src/Falcor/Utils",
		"/home/max/dev/Falcor/src/Mogwai",
		"/home/max/dev/Falcor/src/Mogwai/Data",
		"/home/max/dev/Falcor/src/RenderPasses",
		"/home/max/dev/Falcor/src/RenderPasses/BSDFViewer",
		"/home/max/dev/Falcor/src/RenderPasses/DepthPass",
		"/home/max/dev/Falcor/src/Samples",
		"/home/max/dev/Falcor/src/Samples/ModelViewer",
		"/home/max/dev/Falcor/src/Samples/ShaderToy",
		"/home/max/dev/Falcor/src/Tools",
		"/home/max/dev/Falcor/src/Tools/FalcorTest",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Sampling",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Scene",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/ShadingUtils",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils",
		"/home/max/dev/Falcor/src/Tools/ImageCompare",
		"/home/max/dev/Falcor/src/Tools/RenderGraphEditor"
	],
	"file_history":
	[
		"/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
		"/home/max/dev/Falcor/src/Falcor/Data/LightProbes/20050806-03_hd.hdr",
		"/home/max/dev/Falcor/build/bin/Data/cube.obj",
		"/home/max/.config/sublime-text-3/Packages/SublimeLinter-gcc/miscellaneous/demo.cpp",
		"/home/max/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
		"/home/max/Downloads/Telegram Desktop/scene.v001.usda",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/eevee_occlusion_trace.c",
		"/home/max/dev/blender/release/scripts/startup/bl_ui/__init__.py",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/shaders/common_fullscreen_embree_vert.glsl",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/shaders/common_uniforms_embree_lib.glsl",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/eevee_objects_map.h",
		"/home/max/dev/blender/source/blender/blenlib/intern/winstuff_dir.c",
		"/home/max/dev/blender/source/blender/draw/intern/draw_cache_extract.h",
		"/home/max/dev/blender/source/blender/draw/engines/workbench/workbench_engine.c",
		"/home/max/dev/blender/source/blender/draw/DRW_engine_types.h",
		"/home/max/dev/blender/source/blender/blenlib/BLI_hash.h",
		"/home/max/dev/blender/source/blender/blenlib/BLI_index_range.h",
		"/home/max/dev/blender/source/blender/bmesh/intern/bmesh_operators_private.h",
		"/home/max/dev/blender/source/blender/bmesh/intern/bmesh_operators.h",
		"/home/max/dev/blender/source/blender/python/intern/CMakeLists.txt",
		"/home/max/dev/blender/source/blender/blenlib/intern/BLI_ghash_utils.c",
		"/home/max/dev/blender/source/blender/blenlib/intern/BLI_ghash.c",
		"/home/max/dev/blender/source/blender/blenloader/intern/versioning_280.c",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/shaders/ambient_occlusion_trace_lib.glsl",
		"/home/max/dev/bivis/src/blender/addon/ui.py",
		"/home/max/dev/bivis/src/blender/addon/presets.py",
		"/home/max/dev/bivis/src/blender/addon/properties.py",
		"/home/max/dev/bivis/src/blender/addon/osl.py",
		"/home/max/dev/bivis/src/blender/addon/operators.py",
		"/home/max/dev/bivis/src/blender/blender_python.cpp",
		"/home/max/dev/bivis/src/blender/addon/engine.py",
		"/home/max/dev/bivis/src/blender/addon/__init__.py",
		"/home/max/dev/bivis/src/blender/CMakeLists.txt",
		"/home/max/dev/blender/intern/CMakeLists.txt",
		"/home/max/dev/unity/scripts/mesh_smoother.cs",
		"/home/max/dev/unity/scripts/mesh_helper.cs",
		"/home/max/dev/fasta/src/fasta_lib/renderer.h",
		"/home/max/dev/fasta/CMakeLists.txt",
		"/home/max/dev/fasta/third_party/glad/include/KHR/khrplatform.h",
		"/home/max/dev/fasta/third_party/glad/include/glad/glad.h",
		"/home/max/dev/fasta/src/locomotive_lib/logging.h",
		"/home/max/dev/fasta/src/locomotive_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/locomotive_lib/logging.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.h",
		"/home/max/dev/fasta/src/xenon_py/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.h",
		"/home/max/dev/fasta/src/xenon_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_cmd/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Mesh.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.cpp",
		"/home/max/dev/fasta/src/xenon_cmd/fsquad.h",
		"/home/max/dev/fasta/src/xenon_cmd/xenon.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.cpp",
		"/home/max/projects/Xenon/xenon.sublime-project",
		"/home/max/projects/Xenon/src/ROP_Xenon.h",
		"/home/max/projects/Xenon/src/ROP_Xenon.cpp",
		"/home/max/projects/Xenon/makefile"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/Build",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/",
			"/home/max/dev/Falcor/src/Mogwai",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"sPrograms",
			"vk::binding",
			"[[vk::binding",
			"BindLocation",
			"setParameterBlock",
			"setVao",
			"prepareForDraw",
			"prepareDescriptorSets",
			"setCbv",
			"prepareDescriptorSets",
			"apply GraphicsVars",
			"VK_IMAGE_LAYOUT_PREINITIALIZED",
			"bindParameterBlockRootDescs",
			" test bindParameterBlockRootDescs",
			"VK_IMAGE_LAYOUT",
			"kOutfileDirSwitch",
			"VK_IMAGE_LAYOUT",
			"clear fbo",
			"VK_IMAGE_LAYOUT_PREINITIALIZED.",
			"TEST",
			"vkCmdDraw",
			"CommandListHandle",
			"endVkDraw",
			"clearRtv",
			"vkCmdBeginRenderPass",
			"releaseNullViews",
			"loaded sucessfully",
			"mUAVs",
			"getDescriptorSetLayout",
			"setUav",
			"falcorToVkDescType",
			"BindFlags",
			"loaded succesfully",
			"loaded successfully",
			"UavHandle",
			"getNullView",
			"SrvHandle",
			"setBit",
			"VK_BUFFER_USAGE_STORAGE_BUFFER_BIT",
			"VkBufferCreateInfo",
			"VkBufferUsageFlagBits",
			"5_1",
			"Failed to link program",
			"GPUUnitTestContext",
			"setResourceSrvUavCommon",
			"ResourceBindFlags",
			"kSwapChainBuffersCount",
			"MESA_device_select",
			"GPUUnitTestContext",
			"VK_NULL_HANDLE",
			"chooseFolderDialog",
			"TypedBufferBase",
			"TypedBuffer",
			"TypedBufferBase",
			"createTyped",
			"setUav",
			"TypedBufferBase",
			"mUavs",
			"findViewCommon",
			"inline std::string to_string",
			"to_string",
			"enable to_string",
			"Utils/HostDevice",
			"nullptr_t",
			"std::exception",
			"_WIN_32",
			"Can't generate tange",
			"Can't generate tangetn",
			"Trying to create",
			"Can't load",
			"unload",
			"can't unload",
			"kDllSuffix",
			"boost/file",
			"loadRenderPassLibrary",
			"importing graph from file",
			"CreateShaderResourceView",
			"ResourceHandle",
			"setSrvUavCommon",
			"TypedBufferBase",
			"getVkFormat",
			"Can't find model file",
			"FileDialogFilterVec",
			"loadDll",
			"GLM",
			"glm",
			"GLM_CLIP_SPACE_Y_TOPDOWN",
			"beginFrame",
			"renderGlobalUI",
			"Core/API",
			"Utils/Host",
			"Core/Program",
			"Core/Buffer",
			"Core/Program",
			"Utils/String",
			"loadLibrary",
			"HitInfo",
			"_PROJECT_DIR_",
			"PROJECT_DIR",
			"boost",
			"Dictionary",
			"renderUI",
			"mShowUI",
			"Failed to create font resource",
			"gShaderDirectories",
			"Can't find file",
			"DescriptorSetApiHandle",
			"Utils/String",
			"Core/API/GpuFenc",
			"Core/API/LowLevel",
			"Core/API/GpuTimer",
			"RtvHandle",
			"VULKAN_HPP_TYPESAFE_CONVERSION",
			"VkImageView",
			"RtvHandle",
			"RenderTargetView",
			"gRTV-1",
			"createViewCommon",
			"createCommonView",
			"ConstTextureSharedPtrRef",
			"bad_weak_ptr",
			"printf(\"Exe",
			"sBlackTexture",
			"createBlackTexture",
			"printf(\"222",
			"createViewCommon",
			"printf(\"11",
			"111"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"kPassTempLibSuffix",
			"PROJECT_DIR",
			"spData"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 205,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18914,
						"regions":
						{
						},
						"selection":
						[
							[
								13689,
								13689
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5803.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 374873,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										150,
										178
									],
									[
										347,
										375
									],
									[
										519,
										547
									],
									[
										790,
										818
									],
									[
										985,
										1013
									],
									[
										1319,
										1347
									],
									[
										1579,
										1607
									],
									[
										1778,
										1806
									],
									[
										2021,
										2049
									],
									[
										2213,
										2241
									],
									[
										2389,
										2417
									],
									[
										2537,
										2565
									],
									[
										2761,
										2789
									],
									[
										3097,
										3125
									],
									[
										3361,
										3389
									],
									[
										3657,
										3685
									],
									[
										3915,
										3943
									],
									[
										4152,
										4180
									],
									[
										4398,
										4426
									],
									[
										4642,
										4670
									],
									[
										4777,
										4805
									],
									[
										4940,
										4968
									],
									[
										5139,
										5167
									],
									[
										5272,
										5300
									],
									[
										5433,
										5461
									],
									[
										5630,
										5658
									],
									[
										5761,
										5789
									],
									[
										5920,
										5948
									],
									[
										6115,
										6143
									],
									[
										6248,
										6276
									],
									[
										6409,
										6437
									],
									[
										6696,
										6724
									],
									[
										6910,
										6938
									],
									[
										7199,
										7227
									],
									[
										7419,
										7447
									],
									[
										7658,
										7686
									],
									[
										7887,
										7915
									],
									[
										8116,
										8144
									],
									[
										8375,
										8403
									],
									[
										8717,
										8731
									],
									[
										9007,
										9021
									],
									[
										9171,
										9185
									],
									[
										9440,
										9454
									],
									[
										9748,
										9762
									],
									[
										9911,
										9925
									],
									[
										10084,
										10098
									],
									[
										10240,
										10254
									],
									[
										10357,
										10371
									],
									[
										10740,
										10745
									],
									[
										10925,
										10930
									],
									[
										11372,
										11377
									],
									[
										11575,
										11580
									],
									[
										11862,
										11867
									],
									[
										12047,
										12052
									],
									[
										12494,
										12499
									],
									[
										12697,
										12702
									],
									[
										12987,
										13002
									],
									[
										13032,
										13047
									],
									[
										13254,
										13269
									],
									[
										13475,
										13490
									],
									[
										13766,
										13781
									],
									[
										13817,
										13832
									],
									[
										13966,
										13981
									],
									[
										14017,
										14032
									],
									[
										14289,
										14295
									],
									[
										14660,
										14666
									],
									[
										15050,
										15056
									],
									[
										15406,
										15412
									],
									[
										15558,
										15564
									],
									[
										15863,
										15869
									],
									[
										16158,
										16164
									],
									[
										16395,
										16401
									],
									[
										16496,
										16502
									],
									[
										16738,
										16744
									],
									[
										17068,
										17079
									],
									[
										17537,
										17548
									],
									[
										17706,
										17717
									],
									[
										17966,
										17977
									],
									[
										18325,
										18336
									],
									[
										18705,
										18716
									],
									[
										18989,
										19000
									],
									[
										19198,
										19209
									],
									[
										19709,
										19720
									],
									[
										20271,
										20282
									],
									[
										20640,
										20651
									],
									[
										20976,
										20987
									],
									[
										21407,
										21418
									],
									[
										21741,
										21752
									],
									[
										22121,
										22132
									],
									[
										22488,
										22499
									],
									[
										22987,
										22998
									],
									[
										23375,
										23386
									],
									[
										23697,
										23708
									],
									[
										23977,
										23988
									],
									[
										24299,
										24310
									],
									[
										24668,
										24679
									],
									[
										24967,
										24978
									],
									[
										25425,
										25436
									],
									[
										25516,
										25527
									],
									[
										25607,
										25618
									],
									[
										25839,
										25850
									],
									[
										26114,
										26125
									],
									[
										26583,
										26594
									],
									[
										26752,
										26763
									],
									[
										27012,
										27023
									],
									[
										27371,
										27382
									],
									[
										27751,
										27762
									],
									[
										28035,
										28046
									],
									[
										28244,
										28255
									],
									[
										28755,
										28766
									],
									[
										29317,
										29328
									],
									[
										29686,
										29697
									],
									[
										30022,
										30033
									],
									[
										30453,
										30464
									],
									[
										30787,
										30798
									],
									[
										31167,
										31178
									],
									[
										31534,
										31545
									],
									[
										32033,
										32044
									],
									[
										32421,
										32432
									],
									[
										32743,
										32754
									],
									[
										33023,
										33034
									],
									[
										33345,
										33356
									],
									[
										33714,
										33725
									],
									[
										34013,
										34024
									],
									[
										34471,
										34482
									],
									[
										34562,
										34573
									],
									[
										34653,
										34664
									],
									[
										34885,
										34896
									],
									[
										35225,
										35240
									],
									[
										35270,
										35285
									],
									[
										35492,
										35507
									],
									[
										35618,
										35633
									],
									[
										35847,
										35862
									],
									[
										35898,
										35913
									],
									[
										36047,
										36062
									],
									[
										36098,
										36113
									],
									[
										36478,
										36489
									],
									[
										36536,
										36547
									],
									[
										37093,
										37104
									],
									[
										37363,
										37374
									],
									[
										37739,
										37750
									],
									[
										38041,
										38052
									],
									[
										38309,
										38320
									],
									[
										38592,
										38603
									],
									[
										38878,
										38889
									],
									[
										38909,
										38920
									],
									[
										39254,
										39265
									],
									[
										39331,
										39342
									],
									[
										39730,
										39741
									],
									[
										40029,
										40040
									],
									[
										40415,
										40426
									],
									[
										40596,
										40607
									],
									[
										40891,
										40902
									],
									[
										40909,
										40920
									],
									[
										40936,
										40947
									],
									[
										41004,
										41015
									],
									[
										41086,
										41097
									],
									[
										41342,
										41353
									],
									[
										41468,
										41479
									],
									[
										41486,
										41497
									],
									[
										41597,
										41608
									],
									[
										41803,
										41814
									],
									[
										42059,
										42070
									],
									[
										42146,
										42157
									],
									[
										42164,
										42175
									],
									[
										42197,
										42208
									],
									[
										42259,
										42270
									],
									[
										42353,
										42364
									],
									[
										42567,
										42578
									],
									[
										42585,
										42596
									],
									[
										42618,
										42629
									],
									[
										42672,
										42683
									],
									[
										42758,
										42769
									],
									[
										43058,
										43069
									],
									[
										43221,
										43232
									],
									[
										43490,
										43501
									],
									[
										43729,
										43740
									],
									[
										43936,
										43947
									],
									[
										44143,
										44154
									],
									[
										44389,
										44400
									],
									[
										44692,
										44703
									],
									[
										45019,
										45030
									],
									[
										45333,
										45344
									],
									[
										45702,
										45713
									],
									[
										45979,
										45990
									],
									[
										46297,
										46308
									],
									[
										46615,
										46626
									],
									[
										46918,
										46929
									],
									[
										47203,
										47214
									],
									[
										47347,
										47358
									],
									[
										47408,
										47419
									],
									[
										47650,
										47661
									],
									[
										47841,
										47852
									],
									[
										48063,
										48074
									],
									[
										48425,
										48436
									],
									[
										48791,
										48802
									],
									[
										48865,
										48876
									],
									[
										49315,
										49330
									],
									[
										49360,
										49375
									],
									[
										49640,
										49655
									],
									[
										49766,
										49781
									],
									[
										49995,
										50010
									],
									[
										50046,
										50061
									],
									[
										50195,
										50210
									],
									[
										50246,
										50261
									],
									[
										50587,
										50605
									],
									[
										50851,
										50869
									],
									[
										51256,
										51274
									],
									[
										51729,
										51747
									],
									[
										51993,
										52011
									],
									[
										52343,
										52361
									],
									[
										52441,
										52459
									],
									[
										52876,
										52890
									],
									[
										53207,
										53221
									],
									[
										53603,
										53617
									],
									[
										53968,
										53982
									],
									[
										54119,
										54133
									],
									[
										54389,
										54403
									],
									[
										54715,
										54729
									],
									[
										55061,
										55075
									],
									[
										55227,
										55241
									],
									[
										55390,
										55404
									],
									[
										55549,
										55563
									],
									[
										55730,
										55744
									],
									[
										55900,
										55914
									],
									[
										56063,
										56077
									],
									[
										56232,
										56246
									],
									[
										56403,
										56417
									],
									[
										56570,
										56584
									],
									[
										56750,
										56764
									],
									[
										56786,
										56800
									],
									[
										56817,
										56831
									],
									[
										57126,
										57140
									],
									[
										57174,
										57188
									],
									[
										57229,
										57243
									],
									[
										57443,
										57457
									],
									[
										57493,
										57507
									],
									[
										57779,
										57793
									],
									[
										58090,
										58108
									],
									[
										58299,
										58317
									],
									[
										58570,
										58588
									],
									[
										58781,
										58799
									],
									[
										59101,
										59119
									],
									[
										59296,
										59314
									],
									[
										59503,
										59521
									],
									[
										59774,
										59792
									],
									[
										60018,
										60036
									],
									[
										60251,
										60269
									],
									[
										60342,
										60360
									],
									[
										60710,
										60728
									],
									[
										60943,
										60961
									],
									[
										61394,
										61412
									],
									[
										61748,
										61766
									],
									[
										62039,
										62057
									],
									[
										62440,
										62458
									],
									[
										62810,
										62828
									],
									[
										63119,
										63137
									],
									[
										63441,
										63459
									],
									[
										63728,
										63746
									],
									[
										64053,
										64071
									],
									[
										64408,
										64426
									],
									[
										64754,
										64772
									],
									[
										65191,
										65209
									],
									[
										65519,
										65537
									],
									[
										65785,
										65803
									],
									[
										65963,
										65981
									],
									[
										66257,
										66275
									],
									[
										66522,
										66540
									],
									[
										66875,
										66893
									],
									[
										67461,
										67483
									],
									[
										67573,
										67595
									],
									[
										67887,
										67909
									],
									[
										68205,
										68227
									],
									[
										68498,
										68520
									],
									[
										68823,
										68845
									],
									[
										69001,
										69023
									],
									[
										69465,
										69487
									],
									[
										69783,
										69805
									],
									[
										69859,
										69881
									],
									[
										70056,
										70078
									],
									[
										70135,
										70157
									],
									[
										70211,
										70233
									],
									[
										70526,
										70548
									],
									[
										70841,
										70863
									],
									[
										71014,
										71036
									],
									[
										71342,
										71364
									],
									[
										71698,
										71720
									],
									[
										71973,
										71995
									],
									[
										72190,
										72212
									],
									[
										72505,
										72527
									],
									[
										72880,
										72902
									],
									[
										73099,
										73121
									],
									[
										73224,
										73246
									],
									[
										73615,
										73632
									],
									[
										73801,
										73818
									],
									[
										73986,
										74003
									],
									[
										74168,
										74185
									],
									[
										74404,
										74421
									],
									[
										74719,
										74736
									],
									[
										75037,
										75054
									],
									[
										75507,
										75524
									],
									[
										75965,
										75982
									],
									[
										76254,
										76271
									],
									[
										76280,
										76297
									],
									[
										76417,
										76434
									],
									[
										76522,
										76539
									],
									[
										76624,
										76641
									],
									[
										76719,
										76736
									],
									[
										76821,
										76838
									],
									[
										76925,
										76942
									],
									[
										77029,
										77046
									],
									[
										77135,
										77152
									],
									[
										77241,
										77258
									],
									[
										77349,
										77366
									],
									[
										77468,
										77485
									],
									[
										77576,
										77593
									],
									[
										77695,
										77712
									],
									[
										77803,
										77820
									],
									[
										77909,
										77926
									],
									[
										78029,
										78046
									],
									[
										78264,
										78281
									],
									[
										78717,
										78734
									],
									[
										79025,
										79042
									],
									[
										79182,
										79199
									],
									[
										79396,
										79413
									],
									[
										79481,
										79498
									],
									[
										79616,
										79633
									],
									[
										79878,
										79895
									],
									[
										80199,
										80216
									],
									[
										80638,
										80655
									],
									[
										80672,
										80689
									],
									[
										80977,
										80994
									],
									[
										81264,
										81281
									],
									[
										81318,
										81335
									],
									[
										81340,
										81357
									],
									[
										81435,
										81452
									],
									[
										81547,
										81564
									],
									[
										81666,
										81683
									],
									[
										81771,
										81788
									],
									[
										81884,
										81901
									],
									[
										81997,
										82014
									],
									[
										82117,
										82134
									],
									[
										82223,
										82240
									],
									[
										82323,
										82340
									],
									[
										82435,
										82452
									],
									[
										82549,
										82566
									],
									[
										82668,
										82685
									],
									[
										82694,
										82711
									],
									[
										82961,
										82978
									],
									[
										83129,
										83146
									],
									[
										83162,
										83179
									],
									[
										83489,
										83506
									],
									[
										83519,
										83536
									],
									[
										83695,
										83712
									],
									[
										84086,
										84103
									],
									[
										84398,
										84415
									],
									[
										84939,
										84956
									],
									[
										85003,
										85020
									],
									[
										85487,
										85504
									],
									[
										85517,
										85534
									],
									[
										85845,
										85862
									],
									[
										85875,
										85892
									],
									[
										86136,
										86153
									],
									[
										86429,
										86446
									],
									[
										86923,
										86940
									],
									[
										86954,
										86971
									],
									[
										87542,
										87559
									],
									[
										87966,
										87983
									],
									[
										88113,
										88130
									],
									[
										88700,
										88717
									],
									[
										89062,
										89079
									],
									[
										89098,
										89115
									],
									[
										89260,
										89277
									],
									[
										89296,
										89313
									],
									[
										89650,
										89667
									],
									[
										90112,
										90129
									],
									[
										90301,
										90318
									],
									[
										90684,
										90701
									],
									[
										90745,
										90762
									],
									[
										91006,
										91023
									],
									[
										91038,
										91055
									],
									[
										91074,
										91091
									],
									[
										91111,
										91128
									],
									[
										91725,
										91742
									],
									[
										92209,
										92226
									],
									[
										92361,
										92378
									],
									[
										92665,
										92682
									],
									[
										92804,
										92821
									],
									[
										92838,
										92855
									],
									[
										92875,
										92892
									],
									[
										93204,
										93221
									],
									[
										93442,
										93459
									],
									[
										93691,
										93708
									],
									[
										93787,
										93804
									],
									[
										93883,
										93900
									],
									[
										94242,
										94259
									],
									[
										94460,
										94477
									],
									[
										94488,
										94505
									],
									[
										94912,
										94929
									],
									[
										95089,
										95106
									],
									[
										95269,
										95286
									],
									[
										95640,
										95657
									],
									[
										95677,
										95694
									],
									[
										96105,
										96122
									],
									[
										96142,
										96159
									],
									[
										96515,
										96532
									],
									[
										96849,
										96866
									],
									[
										97084,
										97101
									],
									[
										97121,
										97138
									],
									[
										97518,
										97535
									],
									[
										97858,
										97875
									],
									[
										98175,
										98192
									],
									[
										98540,
										98557
									],
									[
										98864,
										98881
									],
									[
										98901,
										98918
									],
									[
										99329,
										99346
									],
									[
										99623,
										99640
									],
									[
										99969,
										99986
									],
									[
										100006,
										100023
									],
									[
										100433,
										100450
									],
									[
										100469,
										100486
									],
									[
										100833,
										100850
									],
									[
										101158,
										101175
									],
									[
										101438,
										101455
									],
									[
										101768,
										101785
									],
									[
										102135,
										102152
									],
									[
										102434,
										102451
									],
									[
										102833,
										102850
									],
									[
										103219,
										103236
									],
									[
										103567,
										103590
									],
									[
										103829,
										103852
									],
									[
										104049,
										104072
									],
									[
										104354,
										104377
									],
									[
										104800,
										104818
									],
									[
										105009,
										105027
									],
									[
										105280,
										105298
									],
									[
										105491,
										105509
									],
									[
										105811,
										105829
									],
									[
										106006,
										106024
									],
									[
										106218,
										106236
									],
									[
										106486,
										106504
									],
									[
										106730,
										106748
									],
									[
										106963,
										106981
									],
									[
										107054,
										107072
									],
									[
										107422,
										107440
									],
									[
										107655,
										107673
									],
									[
										108106,
										108124
									],
									[
										108460,
										108478
									],
									[
										108755,
										108773
									],
									[
										109156,
										109174
									],
									[
										109526,
										109544
									],
									[
										109835,
										109853
									],
									[
										110157,
										110175
									],
									[
										110444,
										110462
									],
									[
										110769,
										110787
									],
									[
										111124,
										111142
									],
									[
										111470,
										111488
									],
									[
										111907,
										111925
									],
									[
										112235,
										112253
									],
									[
										112501,
										112519
									],
									[
										112679,
										112697
									],
									[
										112973,
										112991
									],
									[
										113238,
										113256
									],
									[
										113591,
										113609
									],
									[
										114031,
										114053
									],
									[
										114327,
										114349
									],
									[
										114721,
										114743
									],
									[
										114906,
										114928
									],
									[
										115150,
										115172
									],
									[
										115494,
										115497
									],
									[
										115554,
										115557
									],
									[
										115740,
										115743
									],
									[
										115805,
										115808
									],
									[
										116015,
										116018
									],
									[
										116071,
										116074
									],
									[
										116253,
										116256
									],
									[
										116314,
										116317
									],
									[
										116568,
										116571
									],
									[
										116757,
										116760
									],
									[
										116925,
										116928
									],
									[
										117115,
										117118
									],
									[
										117448,
										117451
									],
									[
										117751,
										117754
									],
									[
										118035,
										118038
									],
									[
										118555,
										118558
									],
									[
										118918,
										118921
									],
									[
										118946,
										118949
									],
									[
										119006,
										119009
									],
									[
										119034,
										119037
									],
									[
										119287,
										119290
									],
									[
										119323,
										119326
									],
									[
										119379,
										119382
									],
									[
										119415,
										119418
									],
									[
										119660,
										119663
									],
									[
										119688,
										119691
									],
									[
										119738,
										119741
									],
									[
										119766,
										119769
									],
									[
										120036,
										120039
									],
									[
										120054,
										120057
									],
									[
										120385,
										120388
									],
									[
										120635,
										120638
									],
									[
										120913,
										120916
									],
									[
										120973,
										120976
									],
									[
										121159,
										121162
									],
									[
										121224,
										121227
									],
									[
										121434,
										121437
									],
									[
										121490,
										121493
									],
									[
										121672,
										121675
									],
									[
										121733,
										121736
									],
									[
										121987,
										121990
									],
									[
										122176,
										122179
									],
									[
										122344,
										122347
									],
									[
										122534,
										122537
									],
									[
										122867,
										122870
									],
									[
										123170,
										123173
									],
									[
										123454,
										123457
									],
									[
										123974,
										123977
									],
									[
										124337,
										124340
									],
									[
										124365,
										124368
									],
									[
										124425,
										124428
									],
									[
										124453,
										124456
									],
									[
										124706,
										124709
									],
									[
										124742,
										124745
									],
									[
										124798,
										124801
									],
									[
										124834,
										124837
									],
									[
										125079,
										125082
									],
									[
										125107,
										125110
									],
									[
										125157,
										125160
									],
									[
										125185,
										125188
									],
									[
										125455,
										125458
									],
									[
										125473,
										125476
									],
									[
										125804,
										125807
									],
									[
										126054,
										126057
									],
									[
										126481,
										126499
									],
									[
										126944,
										126950
									],
									[
										127078,
										127084
									],
									[
										127169,
										127175
									],
									[
										127261,
										127267
									],
									[
										127396,
										127402
									],
									[
										127488,
										127494
									],
									[
										127586,
										127592
									],
									[
										127679,
										127685
									],
									[
										128062,
										128068
									],
									[
										128428,
										128434
									],
									[
										128497,
										128503
									],
									[
										128590,
										128596
									],
									[
										128994,
										129003
									],
									[
										129303,
										129312
									],
									[
										129622,
										129631
									],
									[
										130061,
										130072
									],
									[
										130193,
										130204
									],
									[
										130545,
										130556
									],
									[
										130719,
										130730
									],
									[
										131111,
										131122
									],
									[
										131133,
										131144
									],
									[
										131406,
										131417
									],
									[
										131428,
										131439
									],
									[
										131719,
										131730
									],
									[
										131741,
										131752
									],
									[
										132036,
										132047
									],
									[
										132058,
										132069
									],
									[
										132334,
										132345
									],
									[
										132356,
										132367
									],
									[
										132648,
										132659
									],
									[
										132670,
										132681
									],
									[
										132895,
										132906
									],
									[
										132917,
										132928
									],
									[
										133129,
										133140
									],
									[
										133227,
										133238
									],
									[
										133330,
										133341
									],
									[
										133427,
										133438
									],
									[
										133529,
										133540
									],
									[
										133981,
										133992
									],
									[
										134328,
										134339
									],
									[
										134653,
										134664
									],
									[
										134938,
										134949
									],
									[
										135173,
										135184
									],
									[
										135435,
										135446
									],
									[
										135692,
										135703
									],
									[
										136035,
										136046
									],
									[
										136077,
										136088
									],
									[
										136114,
										136125
									],
									[
										136336,
										136347
									],
									[
										136378,
										136389
									],
									[
										136415,
										136426
									],
									[
										136627,
										136638
									],
									[
										136921,
										136932
									],
									[
										136963,
										136974
									],
									[
										137000,
										137011
									],
									[
										137213,
										137224
									],
									[
										137510,
										137521
									],
									[
										137552,
										137563
									],
									[
										137589,
										137600
									],
									[
										137805,
										137816
									],
									[
										138080,
										138091
									],
									[
										138122,
										138133
									],
									[
										138159,
										138170
									],
									[
										138374,
										138385
									],
									[
										138614,
										138625
									],
									[
										138636,
										138647
									],
									[
										138861,
										138872
									],
									[
										139037,
										139048
									],
									[
										139059,
										139070
									],
									[
										139385,
										139396
									],
									[
										139687,
										139698
									],
									[
										139946,
										139957
									],
									[
										140173,
										140184
									],
									[
										140491,
										140502
									],
									[
										140820,
										140831
									],
									[
										141112,
										141123
									],
									[
										141540,
										141549
									],
									[
										141857,
										141866
									],
									[
										142138,
										142147
									],
									[
										142458,
										142467
									],
									[
										143017,
										143026
									],
									[
										143237,
										143246
									],
									[
										143431,
										143440
									],
									[
										143753,
										143762
									],
									[
										144061,
										144070
									],
									[
										144280,
										144289
									],
									[
										144479,
										144488
									],
									[
										144661,
										144670
									],
									[
										144895,
										144904
									],
									[
										145180,
										145189
									],
									[
										145430,
										145439
									],
									[
										145606,
										145615
									],
									[
										145822,
										145831
									],
									[
										145835,
										145844
									],
									[
										146119,
										146128
									],
									[
										146341,
										146350
									],
									[
										146373,
										146382
									],
									[
										146411,
										146420
									],
									[
										146657,
										146666
									],
									[
										146689,
										146698
									],
									[
										146727,
										146736
									],
									[
										146976,
										146985
									],
									[
										147008,
										147017
									],
									[
										147046,
										147055
									],
									[
										147284,
										147293
									],
									[
										147316,
										147325
									],
									[
										147354,
										147363
									],
									[
										147599,
										147608
									],
									[
										147631,
										147640
									],
									[
										147669,
										147678
									],
									[
										147917,
										147926
									],
									[
										147949,
										147958
									],
									[
										147987,
										147996
									],
									[
										148295,
										148304
									],
									[
										148598,
										148607
									],
									[
										148755,
										148764
									],
									[
										149085,
										149094
									],
									[
										149454,
										149463
									],
									[
										149724,
										149733
									],
									[
										150070,
										150079
									],
									[
										150128,
										150137
									],
									[
										150250,
										150259
									],
									[
										150577,
										150586
									],
									[
										150588,
										150597
									],
									[
										150778,
										150787
									],
									[
										150791,
										150800
									],
									[
										151023,
										151032
									],
									[
										151036,
										151045
									],
									[
										151220,
										151229
									],
									[
										151377,
										151386
									],
									[
										151388,
										151397
									],
									[
										151566,
										151575
									],
									[
										151819,
										151828
									],
									[
										152098,
										152107
									],
									[
										152349,
										152358
									],
									[
										152372,
										152381
									],
									[
										152623,
										152632
									],
									[
										152646,
										152655
									],
									[
										152843,
										152852
									],
									[
										152866,
										152875
									],
									[
										153067,
										153076
									],
									[
										153098,
										153107
									],
									[
										153137,
										153146
									],
									[
										153214,
										153223
									],
									[
										153594,
										153603
									],
									[
										153613,
										153622
									],
									[
										153883,
										153892
									],
									[
										153909,
										153918
									],
									[
										154046,
										154055
									],
									[
										154151,
										154160
									],
									[
										154253,
										154262
									],
									[
										154348,
										154357
									],
									[
										154450,
										154459
									],
									[
										154554,
										154563
									],
									[
										154658,
										154667
									],
									[
										154764,
										154773
									],
									[
										154870,
										154879
									],
									[
										154978,
										154987
									],
									[
										155097,
										155106
									],
									[
										155205,
										155214
									],
									[
										155324,
										155333
									],
									[
										155432,
										155441
									],
									[
										155538,
										155547
									],
									[
										155658,
										155667
									],
									[
										155964,
										155973
									],
									[
										156218,
										156227
									],
									[
										156472,
										156481
									],
									[
										156490,
										156499
									],
									[
										156672,
										156681
									],
									[
										156694,
										156703
									],
									[
										156845,
										156854
									],
									[
										156862,
										156871
									],
									[
										156970,
										156979
									],
									[
										156987,
										156996
									],
									[
										157088,
										157097
									],
									[
										157117,
										157126
									],
									[
										157219,
										157228
									],
									[
										157242,
										157251
									],
									[
										157345,
										157354
									],
									[
										157367,
										157376
									],
									[
										157470,
										157479
									],
									[
										157497,
										157506
									],
									[
										157797,
										157806
									],
									[
										157961,
										157970
									],
									[
										158016,
										158025
									],
									[
										158165,
										158174
									],
									[
										158255,
										158264
									],
									[
										158459,
										158468
									],
									[
										158731,
										158740
									],
									[
										159126,
										159135
									],
									[
										159367,
										159376
									],
									[
										159389,
										159398
									],
									[
										159424,
										159433
									],
									[
										159462,
										159471
									],
									[
										159573,
										159582
									],
									[
										159594,
										159603
									],
									[
										159631,
										159640
									],
									[
										159860,
										159869
									],
									[
										159880,
										159889
									],
									[
										159917,
										159926
									],
									[
										160122,
										160131
									],
									[
										160141,
										160150
									],
									[
										160699,
										160708
									],
									[
										161041,
										161050
									],
									[
										161282,
										161291
									],
									[
										161305,
										161314
									],
									[
										161342,
										161351
									],
									[
										161634,
										161643
									],
									[
										161657,
										161666
									],
									[
										161694,
										161703
									],
									[
										162097,
										162106
									],
									[
										162244,
										162253
									],
									[
										162257,
										162266
									],
									[
										162341,
										162350
									],
									[
										162368,
										162377
									],
									[
										162442,
										162451
									],
									[
										162477,
										162486
									],
									[
										162605,
										162614
									],
									[
										162794,
										162803
									],
									[
										162817,
										162826
									],
									[
										162857,
										162866
									],
									[
										162997,
										163006
									],
									[
										163020,
										163029
									],
									[
										163060,
										163069
									],
									[
										163304,
										163313
									],
									[
										163325,
										163334
									],
									[
										163745,
										163754
									],
									[
										163766,
										163775
									],
									[
										164204,
										164213
									],
									[
										164225,
										164234
									],
									[
										164612,
										164621
									],
									[
										164633,
										164642
									],
									[
										165100,
										165109
									],
									[
										165408,
										165417
									],
									[
										165565,
										165574
									],
									[
										165584,
										165593
									],
									[
										165779,
										165788
									],
									[
										165864,
										165873
									],
									[
										165999,
										166008
									],
									[
										166295,
										166304
									],
									[
										166550,
										166559
									],
									[
										166688,
										166697
									],
									[
										166837,
										166846
									],
									[
										166989,
										166998
									],
									[
										167554,
										167563
									],
									[
										167874,
										167883
									],
									[
										167889,
										167898
									],
									[
										167909,
										167918
									],
									[
										168030,
										168039
									],
									[
										168072,
										168081
									],
									[
										168085,
										168094
									],
									[
										168113,
										168122
									],
									[
										168388,
										168397
									],
									[
										168399,
										168408
									],
									[
										168416,
										168425
									],
									[
										168558,
										168567
									],
									[
										168740,
										168749
									],
									[
										168760,
										168769
									],
									[
										168981,
										168990
									],
									[
										168994,
										169003
									],
									[
										169022,
										169031
									],
									[
										169191,
										169200
									],
									[
										169243,
										169252
									],
									[
										169322,
										169331
									],
									[
										169333,
										169342
									],
									[
										169473,
										169482
									],
									[
										169489,
										169498
									],
									[
										169508,
										169517
									],
									[
										169719,
										169728
									],
									[
										169785,
										169794
									],
									[
										169816,
										169825
									],
									[
										169867,
										169876
									],
									[
										170339,
										170348
									],
									[
										170581,
										170590
									],
									[
										170633,
										170642
									],
									[
										171092,
										171101
									],
									[
										171144,
										171153
									],
									[
										171604,
										171613
									],
									[
										171671,
										171680
									],
									[
										172133,
										172142
									],
									[
										172185,
										172194
									],
									[
										172638,
										172647
									],
									[
										172690,
										172699
									],
									[
										173149,
										173158
									],
									[
										173636,
										173645
									],
									[
										173670,
										173679
									],
									[
										174259,
										174268
									],
									[
										174607,
										174616
									],
									[
										174629,
										174638
									],
									[
										175000,
										175009
									],
									[
										175022,
										175031
									],
									[
										175385,
										175394
									],
									[
										175407,
										175416
									],
									[
										175805,
										175814
									],
									[
										175827,
										175836
									],
									[
										176168,
										176177
									],
									[
										176190,
										176199
									],
									[
										176495,
										176504
									],
									[
										176517,
										176526
									],
									[
										176816,
										176825
									],
									[
										177197,
										177206
									],
									[
										177465,
										177474
									],
									[
										177705,
										177714
									],
									[
										177980,
										177989
									],
									[
										178242,
										178251
									],
									[
										178592,
										178601
									],
									[
										178703,
										178712
									],
									[
										178794,
										178803
									],
									[
										178886,
										178895
									],
									[
										179021,
										179030
									],
									[
										179170,
										179179
									],
									[
										179268,
										179277
									],
									[
										179423,
										179432
									],
									[
										179516,
										179525
									],
									[
										179697,
										179706
									],
									[
										180001,
										180010
									],
									[
										180014,
										180023
									],
									[
										180086,
										180095
									],
									[
										180205,
										180214
									],
									[
										180425,
										180434
									],
									[
										180438,
										180447
									],
									[
										180748,
										180757
									],
									[
										181027,
										181036
									],
									[
										181046,
										181055
									],
									[
										181314,
										181323
									],
									[
										181368,
										181377
									],
									[
										181390,
										181399
									],
									[
										181485,
										181494
									],
									[
										181597,
										181606
									],
									[
										181716,
										181725
									],
									[
										181821,
										181830
									],
									[
										181934,
										181943
									],
									[
										182047,
										182056
									],
									[
										182167,
										182176
									],
									[
										182273,
										182282
									],
									[
										182373,
										182382
									],
									[
										182485,
										182494
									],
									[
										182599,
										182608
									],
									[
										182718,
										182727
									],
									[
										182744,
										182753
									],
									[
										183011,
										183020
									],
									[
										183220,
										183229
									],
									[
										183468,
										183477
									],
									[
										183498,
										183507
									],
									[
										183526,
										183535
									],
									[
										183931,
										183940
									],
									[
										183949,
										183958
									],
									[
										184098,
										184107
									],
									[
										184125,
										184134
									],
									[
										184344,
										184353
									],
									[
										184361,
										184370
									],
									[
										184511,
										184520
									],
									[
										184540,
										184549
									],
									[
										184749,
										184758
									],
									[
										184772,
										184781
									],
									[
										184955,
										184964
									],
									[
										184977,
										184986
									],
									[
										185158,
										185167
									],
									[
										185175,
										185184
									],
									[
										185520,
										185529
									],
									[
										185558,
										185567
									],
									[
										185594,
										185603
									],
									[
										185841,
										185850
									],
									[
										186147,
										186156
									],
									[
										186308,
										186317
									],
									[
										186483,
										186492
									],
									[
										186725,
										186734
									],
									[
										187034,
										187043
									],
									[
										187270,
										187279
									],
									[
										187303,
										187312
									],
									[
										187630,
										187639
									],
									[
										187660,
										187669
									],
									[
										187836,
										187845
									],
									[
										188007,
										188016
									],
									[
										188435,
										188444
									],
									[
										188624,
										188633
									],
									[
										188647,
										188656
									],
									[
										189049,
										189058
									],
									[
										189087,
										189096
									],
									[
										189123,
										189132
									],
									[
										189505,
										189514
									],
									[
										189837,
										189846
									],
									[
										189875,
										189884
									],
									[
										190249,
										190258
									],
									[
										190615,
										190624
									],
									[
										190653,
										190662
									],
									[
										190868,
										190877
									],
									[
										190906,
										190915
									],
									[
										191294,
										191303
									],
									[
										191662,
										191671
									],
									[
										192001,
										192010
									],
									[
										192039,
										192048
									],
									[
										192426,
										192435
									],
									[
										192842,
										192851
									],
									[
										193208,
										193217
									],
									[
										193626,
										193635
									],
									[
										193649,
										193658
									],
									[
										193691,
										193700
									],
									[
										193713,
										193722
									],
									[
										194087,
										194096
									],
									[
										194193,
										194202
									],
									[
										194572,
										194581
									],
									[
										194602,
										194611
									],
									[
										194930,
										194939
									],
									[
										194960,
										194969
									],
									[
										195341,
										195350
									],
									[
										195361,
										195370
									],
									[
										195879,
										195888
									],
									[
										195892,
										195901
									],
									[
										195911,
										195920
									],
									[
										196057,
										196066
									],
									[
										196307,
										196316
									],
									[
										196600,
										196609
									],
									[
										196613,
										196622
									],
									[
										196641,
										196650
									],
									[
										197094,
										197103
									],
									[
										197105,
										197114
									],
									[
										197125,
										197134
									],
									[
										197668,
										197677
									],
									[
										197690,
										197699
									],
									[
										197713,
										197722
									],
									[
										197823,
										197832
									],
									[
										198084,
										198093
									],
									[
										198124,
										198133
									],
									[
										198147,
										198156
									],
									[
										198170,
										198179
									],
									[
										198381,
										198390
									],
									[
										198734,
										198743
									],
									[
										199017,
										199026
									],
									[
										199080,
										199089
									],
									[
										199107,
										199116
									],
									[
										199146,
										199155
									],
									[
										199484,
										199493
									],
									[
										199520,
										199529
									],
									[
										199594,
										199603
									],
									[
										199783,
										199792
									],
									[
										199816,
										199825
									],
									[
										199855,
										199864
									],
									[
										200144,
										200153
									],
									[
										200480,
										200489
									],
									[
										200979,
										200988
									],
									[
										201341,
										201350
									],
									[
										201377,
										201386
									],
									[
										201539,
										201548
									],
									[
										201575,
										201584
									],
									[
										201893,
										201902
									],
									[
										202143,
										202152
									],
									[
										202543,
										202552
									],
									[
										202878,
										202887
									],
									[
										203340,
										203349
									],
									[
										203529,
										203538
									],
									[
										204060,
										204069
									],
									[
										204098,
										204107
									],
									[
										204482,
										204491
									],
									[
										204518,
										204527
									],
									[
										204884,
										204893
									],
									[
										204902,
										204911
									],
									[
										204924,
										204933
									],
									[
										204959,
										204968
									],
									[
										205086,
										205095
									],
									[
										205472,
										205481
									],
									[
										205690,
										205699
									],
									[
										205902,
										205911
									],
									[
										206161,
										206170
									],
									[
										206494,
										206503
									],
									[
										206902,
										206911
									],
									[
										207330,
										207339
									],
									[
										207487,
										207496
									],
									[
										207938,
										207947
									],
									[
										208392,
										208401
									],
									[
										208590,
										208599
									],
									[
										208874,
										208883
									],
									[
										208886,
										208895
									],
									[
										208908,
										208917
									],
									[
										208935,
										208944
									],
									[
										209036,
										209045
									],
									[
										209196,
										209205
									],
									[
										209208,
										209217
									],
									[
										209228,
										209237
									],
									[
										209264,
										209273
									],
									[
										209301,
										209310
									],
									[
										209451,
										209460
									],
									[
										209625,
										209634
									],
									[
										209986,
										209995
									],
									[
										210422,
										210431
									],
									[
										210460,
										210469
									],
									[
										210880,
										210889
									],
									[
										211032,
										211041
									],
									[
										211342,
										211351
									],
									[
										211746,
										211755
									],
									[
										211918,
										211927
									],
									[
										212387,
										212396
									],
									[
										212796,
										212805
									],
									[
										213084,
										213093
									],
									[
										213223,
										213232
									],
									[
										213257,
										213266
									],
									[
										213294,
										213303
									],
									[
										213597,
										213606
									],
									[
										213635,
										213644
									],
									[
										214012,
										214021
									],
									[
										214048,
										214057
									],
									[
										214320,
										214329
									],
									[
										214558,
										214567
									],
									[
										214981,
										214990
									],
									[
										215017,
										215026
									],
									[
										215262,
										215271
									],
									[
										215389,
										215398
									],
									[
										215509,
										215518
									],
									[
										215772,
										215781
									],
									[
										216146,
										216155
									],
									[
										216184,
										216193
									],
									[
										216564,
										216573
									],
									[
										216915,
										216924
									],
									[
										217277,
										217286
									],
									[
										217557,
										217566
									],
									[
										217659,
										217668
									],
									[
										217962,
										217971
									],
									[
										218065,
										218074
									],
									[
										218101,
										218110
									],
									[
										218398,
										218407
									],
									[
										218852,
										218861
									],
									[
										219179,
										219188
									],
									[
										219215,
										219224
									],
									[
										219443,
										219452
									],
									[
										219479,
										219488
									],
									[
										219694,
										219703
									],
									[
										219730,
										219739
									],
									[
										219972,
										219981
									],
									[
										220068,
										220077
									],
									[
										220164,
										220173
									],
									[
										220496,
										220505
									],
									[
										220793,
										220802
									],
									[
										221011,
										221020
									],
									[
										221039,
										221048
									],
									[
										221362,
										221371
									],
									[
										221401,
										221410
									],
									[
										221707,
										221716
									],
									[
										222069,
										222078
									],
									[
										222527,
										222536
									],
									[
										222791,
										222800
									],
									[
										223063,
										223072
									],
									[
										223455,
										223464
									],
									[
										223827,
										223836
									],
									[
										224199,
										224208
									],
									[
										224513,
										224522
									],
									[
										224550,
										224559
									],
									[
										224984,
										224993
									],
									[
										225373,
										225382
									],
									[
										225410,
										225419
									],
									[
										225783,
										225792
									],
									[
										226117,
										226126
									],
									[
										226352,
										226361
									],
									[
										226389,
										226398
									],
									[
										226786,
										226795
									],
									[
										227126,
										227135
									],
									[
										227443,
										227452
									],
									[
										227808,
										227817
									],
									[
										228132,
										228141
									],
									[
										228169,
										228178
									],
									[
										228597,
										228606
									],
									[
										228891,
										228900
									],
									[
										229237,
										229246
									],
									[
										229274,
										229283
									],
									[
										229776,
										229785
									],
									[
										230127,
										230136
									],
									[
										230554,
										230563
									],
									[
										230590,
										230599
									],
									[
										230954,
										230963
									],
									[
										231279,
										231288
									],
									[
										231559,
										231568
									],
									[
										231889,
										231898
									],
									[
										232258,
										232267
									],
									[
										232616,
										232625
									],
									[
										232976,
										232985
									],
									[
										233275,
										233284
									],
									[
										233674,
										233683
									],
									[
										234054,
										234063
									],
									[
										234320,
										234329
									],
									[
										234669,
										234687
									],
									[
										234953,
										234971
									],
									[
										235352,
										235370
									],
									[
										235571,
										235589
									],
									[
										235808,
										235826
									],
									[
										236093,
										236111
									],
									[
										236458,
										236464
									],
									[
										236829,
										236835
									],
									[
										237219,
										237225
									],
									[
										237326,
										237332
									],
									[
										237681,
										237687
									],
									[
										237932,
										237938
									],
									[
										238084,
										238090
									],
									[
										238389,
										238395
									],
									[
										238684,
										238690
									],
									[
										238921,
										238927
									],
									[
										239022,
										239028
									],
									[
										239264,
										239270
									],
									[
										239609,
										239615
									],
									[
										239980,
										239986
									],
									[
										240370,
										240376
									],
									[
										240477,
										240483
									],
									[
										240832,
										240838
									],
									[
										241083,
										241089
									],
									[
										241235,
										241241
									],
									[
										241540,
										241546
									],
									[
										241835,
										241841
									],
									[
										242072,
										242078
									],
									[
										242173,
										242179
									],
									[
										242415,
										242421
									],
									[
										242871,
										242893
									],
									[
										243128,
										243150
									],
									[
										243502,
										243524
									],
									[
										243921,
										243939
									],
									[
										244203,
										244219
									],
									[
										244438,
										244454
									],
									[
										244617,
										244633
									],
									[
										244910,
										244930
									],
									[
										245230,
										245250
									],
									[
										245520,
										245528
									],
									[
										245902,
										245910
									],
									[
										246179,
										246187
									],
									[
										246516,
										246524
									],
									[
										246845,
										246853
									],
									[
										247230,
										247238
									],
									[
										247407,
										247415
									],
									[
										247668,
										247676
									],
									[
										247963,
										247972
									],
									[
										248307,
										248316
									],
									[
										248618,
										248627
									],
									[
										248927,
										248936
									],
									[
										249247,
										249256
									],
									[
										249557,
										249574
									],
									[
										250025,
										250042
									],
									[
										250315,
										250332
									],
									[
										250640,
										250657
									],
									[
										250815,
										250832
									],
									[
										251081,
										251098
									],
									[
										251375,
										251392
									],
									[
										251567,
										251584
									],
									[
										251869,
										251886
									],
									[
										252174,
										252191
									],
									[
										252453,
										252470
									],
									[
										252640,
										252657
									],
									[
										253033,
										253042
									],
									[
										253302,
										253311
									],
									[
										253337,
										253346
									],
									[
										253743,
										253752
									],
									[
										254118,
										254127
									],
									[
										254565,
										254569
									],
									[
										254695,
										254699
									],
									[
										254873,
										254877
									],
									[
										254988,
										254992
									],
									[
										255143,
										255147
									],
									[
										255201,
										255205
									],
									[
										255259,
										255263
									],
									[
										255317,
										255321
									],
									[
										255375,
										255379
									],
									[
										255488,
										255492
									],
									[
										255634,
										255638
									],
									[
										255780,
										255784
									],
									[
										255926,
										255930
									],
									[
										256072,
										256076
									],
									[
										256217,
										256221
									],
									[
										256405,
										256409
									],
									[
										256611,
										256615
									],
									[
										256685,
										256689
									],
									[
										256848,
										256852
									],
									[
										256901,
										256905
									],
									[
										256974,
										256978
									],
									[
										257047,
										257051
									],
									[
										257122,
										257126
									],
									[
										257200,
										257204
									],
									[
										257278,
										257282
									],
									[
										257349,
										257353
									],
									[
										257422,
										257426
									],
									[
										257493,
										257497
									],
									[
										257647,
										257651
									],
									[
										257884,
										257888
									],
									[
										258118,
										258122
									],
									[
										258361,
										258365
									],
									[
										258604,
										258608
									],
									[
										258844,
										258848
									],
									[
										259081,
										259085
									],
									[
										259461,
										259465
									],
									[
										259817,
										259821
									],
									[
										259862,
										259866
									],
									[
										260088,
										260092
									],
									[
										260200,
										260204
									],
									[
										260268,
										260272
									],
									[
										260448,
										260452
									],
									[
										260788,
										260792
									],
									[
										260844,
										260848
									],
									[
										261074,
										261078
									],
									[
										261315,
										261319
									],
									[
										261420,
										261424
									],
									[
										261579,
										261583
									],
									[
										261915,
										261919
									],
									[
										261927,
										261931
									],
									[
										261961,
										261965
									],
									[
										261973,
										261977
									],
									[
										262124,
										262128
									],
									[
										262575,
										262579
									],
									[
										262612,
										262616
									],
									[
										262932,
										262936
									],
									[
										262944,
										262948
									],
									[
										263106,
										263110
									],
									[
										263202,
										263206
									],
									[
										263536,
										263540
									],
									[
										263580,
										263584
									],
									[
										263880,
										263884
									],
									[
										264015,
										264019
									],
									[
										264242,
										264246
									],
									[
										264389,
										264393
									],
									[
										264654,
										264658
									],
									[
										264882,
										264886
									],
									[
										265189,
										265193
									],
									[
										265505,
										265509
									],
									[
										265831,
										265835
									],
									[
										266348,
										266352
									],
									[
										266753,
										266757
									],
									[
										267031,
										267035
									],
									[
										267319,
										267323
									],
									[
										267552,
										267556
									],
									[
										267879,
										267883
									],
									[
										268157,
										268161
									],
									[
										268504,
										268508
									],
									[
										268588,
										268592
									],
									[
										268949,
										268953
									],
									[
										268960,
										268964
									],
									[
										268999,
										269003
									],
									[
										269010,
										269014
									],
									[
										269118,
										269122
									],
									[
										269129,
										269133
									],
									[
										269323,
										269327
									],
									[
										269535,
										269539
									],
									[
										269852,
										269856
									],
									[
										270076,
										270080
									],
									[
										270301,
										270305
									],
									[
										270595,
										270599
									],
									[
										270734,
										270738
									],
									[
										270869,
										270873
									],
									[
										271154,
										271158
									],
									[
										271459,
										271463
									],
									[
										271782,
										271786
									],
									[
										271870,
										271874
									],
									[
										271974,
										271978
									],
									[
										272062,
										272066
									],
									[
										272157,
										272161
									],
									[
										272245,
										272249
									],
									[
										272340,
										272344
									],
									[
										272428,
										272432
									],
									[
										272659,
										272663
									],
									[
										272751,
										272755
									],
									[
										272859,
										272863
									],
									[
										272951,
										272955
									],
									[
										273050,
										273054
									],
									[
										273142,
										273146
									],
									[
										273241,
										273245
									],
									[
										273333,
										273337
									],
									[
										273562,
										273566
									],
									[
										273640,
										273644
									],
									[
										273734,
										273738
									],
									[
										273812,
										273816
									],
									[
										273897,
										273901
									],
									[
										273975,
										273979
									],
									[
										274060,
										274064
									],
									[
										274138,
										274142
									],
									[
										274401,
										274405
									],
									[
										274721,
										274725
									],
									[
										275020,
										275024
									],
									[
										275218,
										275222
									],
									[
										275409,
										275413
									],
									[
										275618,
										275622
									],
									[
										275787,
										275791
									],
									[
										276020,
										276024
									],
									[
										276213,
										276217
									],
									[
										276448,
										276452
									],
									[
										276629,
										276633
									],
									[
										276792,
										276796
									],
									[
										276985,
										276989
									],
									[
										277166,
										277170
									],
									[
										277315,
										277319
									],
									[
										277552,
										277556
									],
									[
										277627,
										277631
									],
									[
										277685,
										277689
									],
									[
										277743,
										277747
									],
									[
										277801,
										277805
									],
									[
										277859,
										277863
									],
									[
										277917,
										277921
									],
									[
										277975,
										277979
									],
									[
										278062,
										278066
									],
									[
										278288,
										278292
									],
									[
										278525,
										278529
									],
									[
										278772,
										278776
									],
									[
										278965,
										278969
									],
									[
										279187,
										279191
									],
									[
										279307,
										279311
									],
									[
										279570,
										279574
									],
									[
										279963,
										279967
									],
									[
										280073,
										280077
									],
									[
										280379,
										280383
									],
									[
										280570,
										280574
									],
									[
										280687,
										280691
									],
									[
										280898,
										280902
									],
									[
										280944,
										280948
									],
									[
										281118,
										281122
									],
									[
										281304,
										281308
									],
									[
										281422,
										281426
									],
									[
										281816,
										281820
									],
									[
										282017,
										282021
									],
									[
										282260,
										282264
									],
									[
										282514,
										282518
									],
									[
										282909,
										282913
									],
									[
										283339,
										283343
									],
									[
										283419,
										283423
									],
									[
										283577,
										283581
									],
									[
										283598,
										283602
									],
									[
										283659,
										283663
									],
									[
										283813,
										283817
									],
									[
										283834,
										283838
									],
									[
										283895,
										283899
									],
									[
										284104,
										284108
									],
									[
										284255,
										284259
									],
									[
										284526,
										284530
									],
									[
										284742,
										284746
									],
									[
										284903,
										284907
									],
									[
										285102,
										285106
									],
									[
										285317,
										285321
									],
									[
										285508,
										285512
									],
									[
										285958,
										285967
									],
									[
										286544,
										286559
									],
									[
										286783,
										286798
									],
									[
										286889,
										286904
									],
									[
										287046,
										287061
									],
									[
										287148,
										287163
									],
									[
										287267,
										287282
									],
									[
										287396,
										287411
									],
									[
										287561,
										287576
									],
									[
										287726,
										287741
									],
									[
										287862,
										287877
									],
									[
										288258,
										288273
									],
									[
										288608,
										288623
									],
									[
										288980,
										288995
									],
									[
										289040,
										289055
									],
									[
										289382,
										289397
									],
									[
										289442,
										289457
									],
									[
										289781,
										289796
									],
									[
										289807,
										289822
									],
									[
										290131,
										290146
									],
									[
										290528,
										290543
									],
									[
										290804,
										290819
									],
									[
										290879,
										290894
									],
									[
										291337,
										291352
									],
									[
										291412,
										291427
									],
									[
										291849,
										291864
									],
									[
										291933,
										291948
									],
									[
										292213,
										292228
									],
									[
										292306,
										292321
									],
									[
										292578,
										292593
									],
									[
										292920,
										292935
									],
									[
										293220,
										293235
									],
									[
										293253,
										293268
									],
									[
										293775,
										293790
									],
									[
										294014,
										294029
									],
									[
										294120,
										294135
									],
									[
										294277,
										294292
									],
									[
										294379,
										294394
									],
									[
										294498,
										294513
									],
									[
										294627,
										294642
									],
									[
										294792,
										294807
									],
									[
										294957,
										294972
									],
									[
										295093,
										295108
									],
									[
										295489,
										295504
									],
									[
										295839,
										295854
									],
									[
										296211,
										296226
									],
									[
										296271,
										296286
									],
									[
										296613,
										296628
									],
									[
										296673,
										296688
									],
									[
										297012,
										297027
									],
									[
										297038,
										297053
									],
									[
										297362,
										297377
									],
									[
										297759,
										297774
									],
									[
										298035,
										298050
									],
									[
										298110,
										298125
									],
									[
										298568,
										298583
									],
									[
										298643,
										298658
									],
									[
										299080,
										299095
									],
									[
										299164,
										299179
									],
									[
										299444,
										299459
									],
									[
										299537,
										299552
									],
									[
										299809,
										299824
									],
									[
										300151,
										300166
									],
									[
										300451,
										300466
									],
									[
										300484,
										300499
									],
									[
										300924,
										300941
									],
									[
										301391,
										301406
									],
									[
										301630,
										301645
									],
									[
										301736,
										301751
									],
									[
										301893,
										301908
									],
									[
										301995,
										302010
									],
									[
										302114,
										302129
									],
									[
										302243,
										302258
									],
									[
										302408,
										302423
									],
									[
										302573,
										302588
									],
									[
										302709,
										302724
									],
									[
										303105,
										303120
									],
									[
										303455,
										303470
									],
									[
										303827,
										303842
									],
									[
										303887,
										303902
									],
									[
										304229,
										304244
									],
									[
										304289,
										304304
									],
									[
										304628,
										304643
									],
									[
										304654,
										304669
									],
									[
										304978,
										304993
									],
									[
										305375,
										305390
									],
									[
										305651,
										305666
									],
									[
										305726,
										305741
									],
									[
										306184,
										306199
									],
									[
										306259,
										306274
									],
									[
										306696,
										306711
									],
									[
										306780,
										306795
									],
									[
										307060,
										307075
									],
									[
										307153,
										307168
									],
									[
										307425,
										307440
									],
									[
										307767,
										307782
									],
									[
										308029,
										308044
									],
									[
										308062,
										308077
									],
									[
										308138,
										308153
									],
									[
										308181,
										308196
									],
									[
										308673,
										308700
									],
									[
										308993,
										309020
									],
									[
										309476,
										309503
									],
									[
										309527,
										309554
									],
									[
										310018,
										310048
									],
									[
										310338,
										310368
									],
									[
										310862,
										310892
									],
									[
										311190,
										311220
									],
									[
										311697,
										311715
									],
									[
										312149,
										312170
									],
									[
										312346,
										312367
									],
									[
										312645,
										312666
									],
									[
										312743,
										312764
									],
									[
										312858,
										312879
									],
									[
										313258,
										313279
									],
									[
										313505,
										313526
									],
									[
										313919,
										313940
									],
									[
										314217,
										314223
									],
									[
										314670,
										314676
									],
									[
										314979,
										314985
									],
									[
										315080,
										315086
									],
									[
										315421,
										315427
									],
									[
										315631,
										315637
									],
									[
										316116,
										316122
									],
									[
										316548,
										316569
									],
									[
										316745,
										316766
									],
									[
										317044,
										317065
									],
									[
										317142,
										317163
									],
									[
										317257,
										317278
									],
									[
										317657,
										317678
									],
									[
										317904,
										317925
									],
									[
										318318,
										318339
									],
									[
										318624,
										318638
									],
									[
										318962,
										318976
									],
									[
										319427,
										319441
									],
									[
										319909,
										319923
									],
									[
										320417,
										320431
									],
									[
										320919,
										320933
									],
									[
										321369,
										321383
									],
									[
										321623,
										321637
									],
									[
										321671,
										321685
									],
									[
										321888,
										321902
									],
									[
										322438,
										322452
									],
									[
										322512,
										322526
									],
									[
										322733,
										322747
									],
									[
										323147,
										323161
									],
									[
										323627,
										323633
									],
									[
										323985,
										323991
									],
									[
										324344,
										324350
									],
									[
										324532,
										324538
									],
									[
										324681,
										324687
									],
									[
										324934,
										324940
									],
									[
										325244,
										325250
									],
									[
										325583,
										325589
									],
									[
										325889,
										325895
									],
									[
										326135,
										326141
									],
									[
										326344,
										326350
									],
									[
										326667,
										326673
									],
									[
										326955,
										326961
									],
									[
										327434,
										327451
									],
									[
										327580,
										327597
									],
									[
										327881,
										327898
									],
									[
										327974,
										327991
									],
									[
										328066,
										328083
									],
									[
										328213,
										328230
									],
									[
										328319,
										328336
									],
									[
										328598,
										328615
									],
									[
										328839,
										328856
									],
									[
										329137,
										329154
									],
									[
										329344,
										329361
									],
									[
										329693,
										329710
									],
									[
										330024,
										330041
									],
									[
										330295,
										330312
									],
									[
										330410,
										330427
									],
									[
										330605,
										330622
									],
									[
										330853,
										330870
									],
									[
										331120,
										331137
									],
									[
										331446,
										331463
									],
									[
										331827,
										331839
									],
									[
										332187,
										332199
									],
									[
										332371,
										332383
									],
									[
										332645,
										332657
									],
									[
										332888,
										332900
									],
									[
										333181,
										333193
									],
									[
										333423,
										333435
									],
									[
										333749,
										333761
									],
									[
										334048,
										334060
									],
									[
										334269,
										334281
									],
									[
										334455,
										334467
									],
									[
										334827,
										334839
									],
									[
										335139,
										335151
									],
									[
										335453,
										335465
									],
									[
										335695,
										335707
									],
									[
										335941,
										335953
									],
									[
										336144,
										336156
									],
									[
										336312,
										336324
									],
									[
										336654,
										336666
									],
									[
										336915,
										336927
									],
									[
										337221,
										337233
									],
									[
										337505,
										337517
									],
									[
										337745,
										337757
									],
									[
										337925,
										337937
									],
									[
										338161,
										338173
									],
									[
										338457,
										338469
									],
									[
										338498,
										338510
									],
									[
										338709,
										338721
									],
									[
										338977,
										338989
									],
									[
										339191,
										339203
									],
									[
										339503,
										339515
									],
									[
										339794,
										339806
									],
									[
										340044,
										340056
									],
									[
										340235,
										340247
									],
									[
										340463,
										340475
									],
									[
										340761,
										340773
									],
									[
										341020,
										341032
									],
									[
										341275,
										341287
									],
									[
										341573,
										341585
									],
									[
										341829,
										341841
									],
									[
										341915,
										341927
									],
									[
										342044,
										342056
									],
									[
										342223,
										342235
									],
									[
										342585,
										342597
									],
									[
										342730,
										342742
									],
									[
										342985,
										342997
									],
									[
										343121,
										343133
									],
									[
										343426,
										343438
									],
									[
										343565,
										343577
									],
									[
										343733,
										343745
									],
									[
										343979,
										343991
									],
									[
										344242,
										344254
									],
									[
										344265,
										344277
									],
									[
										344506,
										344518
									],
									[
										344537,
										344549
									],
									[
										344603,
										344615
									],
									[
										344681,
										344693
									],
									[
										344897,
										344909
									],
									[
										345051,
										345063
									],
									[
										345295,
										345307
									],
									[
										345561,
										345573
									],
									[
										345602,
										345614
									],
									[
										345959,
										345971
									],
									[
										346261,
										346273
									],
									[
										346625,
										346637
									],
									[
										346944,
										346956
									],
									[
										347287,
										347299
									],
									[
										347419,
										347431
									],
									[
										347548,
										347560
									],
									[
										347782,
										347794
									],
									[
										348196,
										348208
									],
									[
										348564,
										348576
									],
									[
										348794,
										348806
									],
									[
										349096,
										349108
									],
									[
										349159,
										349171
									],
									[
										349218,
										349230
									],
									[
										349257,
										349269
									],
									[
										349522,
										349534
									],
									[
										349885,
										349897
									],
									[
										349939,
										349951
									],
									[
										349991,
										350003
									],
									[
										350271,
										350283
									],
									[
										350325,
										350337
									],
									[
										350377,
										350389
									],
									[
										350511,
										350523
									],
									[
										350566,
										350578
									],
									[
										350620,
										350632
									],
									[
										350792,
										350804
									],
									[
										350849,
										350861
									],
									[
										350905,
										350917
									],
									[
										350949,
										350961
									],
									[
										351206,
										351218
									],
									[
										351414,
										351426
									],
									[
										351610,
										351622
									],
									[
										351714,
										351726
									],
									[
										352077,
										352089
									],
									[
										352468,
										352480
									],
									[
										352828,
										352840
									],
									[
										353012,
										353024
									],
									[
										353286,
										353298
									],
									[
										353529,
										353541
									],
									[
										353822,
										353834
									],
									[
										354064,
										354076
									],
									[
										354390,
										354402
									],
									[
										354689,
										354701
									],
									[
										354910,
										354922
									],
									[
										355096,
										355108
									],
									[
										355468,
										355480
									],
									[
										355780,
										355792
									],
									[
										356094,
										356106
									],
									[
										356336,
										356348
									],
									[
										356582,
										356594
									],
									[
										356785,
										356797
									],
									[
										356953,
										356965
									],
									[
										357295,
										357307
									],
									[
										357556,
										357568
									],
									[
										357862,
										357874
									],
									[
										358146,
										358158
									],
									[
										358386,
										358398
									],
									[
										358566,
										358578
									],
									[
										358802,
										358814
									],
									[
										359098,
										359110
									],
									[
										359139,
										359151
									],
									[
										359350,
										359362
									],
									[
										359618,
										359630
									],
									[
										359832,
										359844
									],
									[
										360144,
										360156
									],
									[
										360435,
										360447
									],
									[
										360685,
										360697
									],
									[
										360876,
										360888
									],
									[
										361104,
										361116
									],
									[
										361402,
										361414
									],
									[
										361661,
										361673
									],
									[
										361916,
										361928
									],
									[
										362214,
										362226
									],
									[
										362470,
										362482
									],
									[
										362556,
										362568
									],
									[
										362685,
										362697
									],
									[
										362864,
										362876
									],
									[
										363226,
										363238
									],
									[
										363371,
										363383
									],
									[
										363626,
										363638
									],
									[
										363762,
										363774
									],
									[
										364067,
										364079
									],
									[
										364206,
										364218
									],
									[
										364374,
										364386
									],
									[
										364620,
										364632
									],
									[
										364883,
										364895
									],
									[
										364906,
										364918
									],
									[
										365147,
										365159
									],
									[
										365178,
										365190
									],
									[
										365244,
										365256
									],
									[
										365322,
										365334
									],
									[
										365538,
										365550
									],
									[
										365692,
										365704
									],
									[
										365936,
										365948
									],
									[
										366202,
										366214
									],
									[
										366243,
										366255
									],
									[
										366600,
										366612
									],
									[
										366902,
										366914
									],
									[
										367266,
										367278
									],
									[
										367585,
										367597
									],
									[
										367928,
										367940
									],
									[
										368060,
										368072
									],
									[
										368189,
										368201
									],
									[
										368423,
										368435
									],
									[
										368837,
										368849
									],
									[
										369205,
										369217
									],
									[
										369435,
										369447
									],
									[
										369737,
										369749
									],
									[
										369800,
										369812
									],
									[
										369859,
										369871
									],
									[
										369898,
										369910
									],
									[
										370163,
										370175
									],
									[
										370526,
										370538
									],
									[
										370580,
										370592
									],
									[
										370632,
										370644
									],
									[
										370912,
										370924
									],
									[
										370966,
										370978
									],
									[
										371018,
										371030
									],
									[
										371152,
										371164
									],
									[
										371207,
										371219
									],
									[
										371261,
										371273
									],
									[
										371433,
										371445
									],
									[
										371490,
										371502
									],
									[
										371546,
										371558
									],
									[
										371590,
										371602
									],
									[
										371847,
										371859
									],
									[
										372055,
										372067
									],
									[
										372251,
										372263
									],
									[
										372355,
										372367
									],
									[
										372718,
										372730
									],
									[
										372992,
										373005
									],
									[
										373295,
										373308
									],
									[
										373397,
										373410
									],
									[
										373579,
										373592
									],
									[
										373865,
										373876
									],
									[
										373947,
										373958
									],
									[
										374027,
										374038
									],
									[
										374190,
										374201
									],
									[
										374493,
										374504
									],
									[
										374595,
										374606
									],
									[
										374777,
										374788
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								373954,
								373954
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 67,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 132073.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8584,
						"regions":
						{
						},
						"selection":
						[
							[
								4667,
								4667
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 894.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cs.slang",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 3086,
						"regions":
						{
						},
						"selection":
						[
							[
								2527,
								2527
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8125,
						"regions":
						{
						},
						"selection":
						[
							[
								4937,
								4937
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1706.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/Falcor/Scene/SceneBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23683,
						"regions":
						{
						},
						"selection":
						[
							[
								21813,
								21813
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6976.0,
						"zoom_level": 1.0
					},
					"stack_index": 134,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Falcor/RenderGraph/RenderGraphIR.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5922,
						"regions":
						{
						},
						"selection":
						[
							[
								2350,
								2350
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 873.0,
						"zoom_level": 1.0
					},
					"stack_index": 180,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/Falcor/RenderGraph/RenderGraphIR.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3409,
						"regions":
						{
						},
						"selection":
						[
							[
								1773,
								1773
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 182,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/Falcor/Scene/Importers/AssimpImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 46137,
						"regions":
						{
						},
						"selection":
						[
							[
								43004,
								43004
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 135,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4143,
						"regions":
						{
						},
						"selection":
						[
							[
								1743,
								1743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 189,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Falcor/Core/API/GraphicsStateObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6065,
						"regions":
						{
						},
						"selection":
						[
							[
								2078,
								2078
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Falcor/Core/API/ComputeStateObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3237,
						"regions":
						{
						},
						"selection":
						[
							[
								1838,
								1838
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 190,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/Falcor/Core/API/ComputeContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3917,
						"regions":
						{
						},
						"selection":
						[
							[
								2450,
								2450
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 532.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/Falcor/Core/API/GpuTimer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3717,
						"regions":
						{
						},
						"selection":
						[
							[
								1849,
								1849
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 245,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/Falcor/Core/API/LowLevelContextData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3534,
						"regions":
						{
						},
						"selection":
						[
							[
								2678,
								2678
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 438.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/Falcor/Utils/Timing/Profiler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7984,
						"regions":
						{
						},
						"selection":
						[
							[
								3494,
								3494
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 341.0,
						"zoom_level": 1.0
					},
					"stack_index": 243,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/Falcor/Core/Platform/Windows/Windows.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26025,
						"regions":
						{
						},
						"selection":
						[
							[
								25040,
								25040
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11154.0,
						"zoom_level": 1.0
					},
					"stack_index": 186,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 139342,
						"regions":
						{
						},
						"selection":
						[
							[
								17858,
								17858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7779.0,
						"zoom_level": 1.0
					},
					"stack_index": 268,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "third_party/slang/tools/gfx/vulkan/render-vk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 99401,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7701.0,
						"zoom_level": 1.0
					},
					"stack_index": 267,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/Falcor/Raytracing/RtProgramVarsHelper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6214,
						"regions":
						{
						},
						"selection":
						[
							[
								4632,
								4632
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1438.0,
						"zoom_level": 1.0
					},
					"stack_index": 269,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/Falcor/Core/API/D3D12/FalcorD3D12.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9709,
						"regions":
						{
						},
						"selection":
						[
							[
								1759,
								1759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 270,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/Falcor/Core/Platform/OS.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8771,
						"regions":
						{
						},
						"selection":
						[
							[
								1858,
								1858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 138,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/Falcor/Scene/Importers/PythonImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3792,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 137,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/Falcor/Scene/Importers/SceneImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41892,
						"regions":
						{
						},
						"selection":
						[
							[
								15491,
								15491
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18249.0,
						"zoom_level": 1.0
					},
					"stack_index": 136,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/Falcor/Core/Program/Program.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12317,
						"regions":
						{
						},
						"selection":
						[
							[
								6204,
								6204
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1751.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/Falcor/Core/Program/GraphicsProgram.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3729,
						"regions":
						{
						},
						"selection":
						[
							[
								3605,
								3605
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "src/Falcor/Core/Program/ComputeProgram.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3738,
						"regions":
						{
						},
						"selection":
						[
							[
								3616,
								3616
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "src/Falcor/Scene/Camera/Camera.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5388,
						"regions":
						{
						},
						"selection":
						[
							[
								4265,
								4265
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1098.0,
						"zoom_level": 1.0
					},
					"stack_index": 279,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "src/Falcor/Utils/ArgList.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4141,
						"regions":
						{
						},
						"selection":
						[
							[
								3062,
								3062
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 274,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "src/Mogwai/Mogwai.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22968,
						"regions":
						{
						},
						"selection":
						[
							[
								2332,
								2332
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 234.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "src/Mogwai/stdafx.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1851,
						"regions":
						{
						},
						"selection":
						[
							[
								1850,
								1850
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 236,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "src/Falcor/Core/Renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6577,
						"regions":
						{
						},
						"selection":
						[
							[
								2608,
								2608
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19.0,
						"zoom_level": 1.0
					},
					"stack_index": 152,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "src/Falcor/RenderGraph/RenderPassLibrary.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10251,
						"regions":
						{
						},
						"selection":
						[
							[
								5292,
								5292
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1938.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "src/Falcor/RenderGraph/RenderPassLibrary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5171,
						"regions":
						{
						},
						"selection":
						[
							[
								4461,
								4461
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 177,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "src/Falcor/Utils/UI/UserInput.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7610,
						"regions":
						{
						},
						"selection":
						[
							[
								2848,
								2848
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 867.0,
						"zoom_level": 1.0
					},
					"stack_index": 248,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "src/Falcor/Core/Sample.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7293,
						"regions":
						{
						},
						"selection":
						[
							[
								2144,
								2144
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 341.0,
						"zoom_level": 1.0
					},
					"stack_index": 145,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "src/Falcor/Utils/UI/Gui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26171,
						"regions":
						{
						},
						"selection":
						[
							[
								2311,
								2311
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1790.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "src/Falcor/Core/Window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19191,
						"regions":
						{
						},
						"selection":
						[
							[
								1788,
								1788
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 148.0,
						"zoom_level": 1.0
					},
					"stack_index": 230,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "src/Falcor/Core/Window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5627,
						"regions":
						{
						},
						"selection":
						[
							[
								1906,
								1906
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 150,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "src/Falcor/Utils/ArgList.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6596,
						"regions":
						{
						},
						"selection":
						[
							[
								3285,
								3285
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 266,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "src/Falcor/Core/API/Resource.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7395,
						"regions":
						{
						},
						"selection":
						[
							[
								5412,
								5412
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2526.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6996,
						"regions":
						{
						},
						"selection":
						[
							[
								1742,
								1742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "src/Tools/FalcorTest/Tests/DebugPasses/InvalidPixelDetectionTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3615,
						"regions":
						{
						},
						"selection":
						[
							[
								3596,
								3596
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 149,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "src/Falcor/Testing/UnitTest.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18163,
						"regions":
						{
						},
						"selection":
						[
							[
								8310,
								8310
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 710.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "src/Falcor/Testing/UnitTest.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11789,
						"regions":
						{
						},
						"selection":
						[
							[
								4889,
								4889
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1399.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "src/Falcor/Core/Program/ComputeProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2536,
						"regions":
						{
						},
						"selection":
						[
							[
								1826,
								1826
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6728,
						"regions":
						{
						},
						"selection":
						[
							[
								2463,
								2463
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1913,
						"regions":
						{
						},
						"selection":
						[
							[
								1913,
								1913
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "src/Falcor/Core/API/Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5154,
						"regions":
						{
						},
						"selection":
						[
							[
								4887,
								4887
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1428.0,
						"zoom_level": 1.0
					},
					"stack_index": 123,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "src/Falcor/Core/API/RenderContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11375,
						"regions":
						{
						},
						"selection":
						[
							[
								1854,
								1854
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2720.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "src/Falcor/Core/API/RenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5551,
						"regions":
						{
						},
						"selection":
						[
							[
								4681,
								4681
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1043.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "src/Falcor/Core/API/RasterizerState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7490,
						"regions":
						{
						},
						"selection":
						[
							[
								1841,
								1841
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1892.0,
						"zoom_level": 1.0
					},
					"stack_index": 228,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "src/Falcor/Core/API/RasterizerState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2247,
						"regions":
						{
						},
						"selection":
						[
							[
								1768,
								1768
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "src/Falcor/Core/API/Vulkan/VKRasterizerState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2034,
						"regions":
						{
						},
						"selection":
						[
							[
								1761,
								1761
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "src/Falcor/Core/API/QueryHeap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3488,
						"regions":
						{
						},
						"selection":
						[
							[
								3487,
								3487
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 239,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "src/Falcor/Core/API/Formats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13737,
						"regions":
						{
						},
						"selection":
						[
							[
								3678,
								3678
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 414.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "src/Falcor/Core/API/Buffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17286,
						"regions":
						{
						},
						"selection":
						[
							[
								13636,
								13636
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4477.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvProbe.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3717,
						"regions":
						{
						},
						"selection":
						[
							[
								3676,
								3676
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 370.0,
						"zoom_level": 1.0
					},
					"stack_index": 111,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "src/Mogwai/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1908,
						"regions":
						{
						},
						"selection":
						[
							[
								1509,
								1509
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 129,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "src/Mogwai/Extensions/Capture/CaptureTrigger.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7876,
						"regions":
						{
						},
						"selection":
						[
							[
								5671,
								5671
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2131.0,
						"zoom_level": 1.0
					},
					"stack_index": 124,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "src/Mogwai/Extensions/Capture/FrameCapture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6741,
						"regions":
						{
						},
						"selection":
						[
							[
								1782,
								1782
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2142.0,
						"zoom_level": 1.0
					},
					"stack_index": 128,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "src/Tools/RenderGraphEditor/RenderGraphEditor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20892,
						"regions":
						{
						},
						"selection":
						[
							[
								20771,
								20771
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8472.0,
						"zoom_level": 1.0
					},
					"stack_index": 170,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "src/Externals/dear_imgui_addons/imguinodegrapheditor/imguinodegrapheditor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47853,
						"regions":
						{
						},
						"selection":
						[
							[
								23852,
								23852
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6018.0,
						"zoom_level": 1.0
					},
					"stack_index": 187,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "src/Tools/ImageCompare/ImageCompare.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14050,
						"regions":
						{
						},
						"selection":
						[
							[
								13223,
								13223
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6069.0,
						"zoom_level": 1.0
					},
					"stack_index": 139,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "src/Mogwai/Mogwai.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8004,
						"regions":
						{
						},
						"selection":
						[
							[
								2007,
								2007
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 669.0,
						"zoom_level": 1.0
					},
					"stack_index": 127,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "src/Falcor/RenderGraph/RenderGraphImportExport.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6264,
						"regions":
						{
						},
						"selection":
						[
							[
								2379,
								2379
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2182.0,
						"zoom_level": 1.0
					},
					"stack_index": 160,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "src/Falcor/RenderGraph/ResourceCache.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8268,
						"regions":
						{
						},
						"selection":
						[
							[
								3950,
								3950
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 988.0,
						"zoom_level": 1.0
					},
					"stack_index": 157,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "src/Falcor/RenderGraph/RenderPassReflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12090,
						"regions":
						{
						},
						"selection":
						[
							[
								9644,
								9644
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4246.0,
						"zoom_level": 1.0
					},
					"stack_index": 159,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "src/Falcor/RenderGraph/RenderPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2424,
						"regions":
						{
						},
						"selection":
						[
							[
								2237,
								2237
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "src/Falcor/RenderPasses/ResolvePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2569,
						"regions":
						{
						},
						"selection":
						[
							[
								2569,
								2569
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 197,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "src/Falcor/RenderPasses/ResolvePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2997,
						"regions":
						{
						},
						"selection":
						[
							[
								2879,
								2879
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 196,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "src/Falcor/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4984,
						"regions":
						{
						},
						"selection":
						[
							[
								10,
								10
							]
						],
						"settings":
						{
							"auto_name": "file( GLOB SOURCES",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "src/Falcor/Scene/ParticleSystem/ParticleSystem.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10388,
						"regions":
						{
						},
						"selection":
						[
							[
								1769,
								1769
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 192,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16300,
						"regions":
						{
						},
						"selection":
						[
							[
								1827,
								1827
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 194,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "src/Falcor/Scene/HitInfo.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3774,
						"regions":
						{
						},
						"selection":
						[
							[
								3051,
								3051
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 185,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "src/Samples/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1201,
						"regions":
						{
						},
						"selection":
						[
							[
								1105,
								1105
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 133,
					"type": "text"
				},
				{
					"buffer": 76,
					"file": "src/Tools/RenderGraphEditor/RenderGraphEditor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3325,
						"regions":
						{
						},
						"selection":
						[
							[
								1883,
								1883
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 179,
					"type": "text"
				},
				{
					"buffer": 77,
					"file": "src/RenderPasses/DebugPasses/DebugPasses.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2436,
						"regions":
						{
						},
						"selection":
						[
							[
								1981,
								1981
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 205,
					"type": "text"
				},
				{
					"buffer": 78,
					"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3014,
						"regions":
						{
						},
						"selection":
						[
							[
								1743,
								1743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 204,
					"type": "text"
				},
				{
					"buffer": 79,
					"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2457,
						"regions":
						{
						},
						"selection":
						[
							[
								1743,
								1743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 203,
					"type": "text"
				},
				{
					"buffer": 80,
					"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2592,
						"regions":
						{
						},
						"selection":
						[
							[
								1743,
								1743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 202,
					"type": "text"
				},
				{
					"buffer": 81,
					"file": "src/RenderPasses/CSM/CSM.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8927,
						"regions":
						{
						},
						"selection":
						[
							[
								1725,
								1725
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 206,
					"type": "text"
				},
				{
					"buffer": 82,
					"file": "src/RenderPasses/CSM/CSM.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40072,
						"regions":
						{
						},
						"selection":
						[
							[
								19081,
								19081
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7089.0,
						"zoom_level": 1.0
					},
					"stack_index": 200,
					"type": "text"
				},
				{
					"buffer": 83,
					"file": "src/Falcor/Utils/UI/Gui.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2501,
						"regions":
						{
						},
						"selection":
						[
							[
								1773,
								1773
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 199,
					"type": "text"
				},
				{
					"buffer": 84,
					"file": "src/Falcor/Utils/UI/TextRenderer.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2282,
						"regions":
						{
						},
						"selection":
						[
							[
								1872,
								1872
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 198,
					"type": "text"
				},
				{
					"buffer": 85,
					"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16602,
						"regions":
						{
						},
						"selection":
						[
							[
								9419,
								9419
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3011.0,
						"zoom_level": 1.0
					},
					"stack_index": 171,
					"type": "text"
				},
				{
					"buffer": 86,
					"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4765,
						"regions":
						{
						},
						"selection":
						[
							[
								1725,
								1725
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 201,
					"type": "text"
				},
				{
					"buffer": 87,
					"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3454,
						"regions":
						{
						},
						"selection":
						[
							[
								1743,
								1743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 211,
					"type": "text"
				},
				{
					"buffer": 88,
					"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15261,
						"regions":
						{
						},
						"selection":
						[
							[
								1740,
								1740
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 210,
					"type": "text"
				},
				{
					"buffer": 89,
					"file": "src/RenderPasses/SkyBox/SkyBox.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3282,
						"regions":
						{
						},
						"selection":
						[
							[
								1743,
								1743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 213,
					"type": "text"
				},
				{
					"buffer": 90,
					"file": "src/RenderPasses/SkyBox/SkyBox.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7947,
						"regions":
						{
						},
						"selection":
						[
							[
								2155,
								2155
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 212,
					"type": "text"
				},
				{
					"buffer": 91,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4461,
						"regions":
						{
						},
						"selection":
						[
							[
								1725,
								1725
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 214,
					"type": "text"
				},
				{
					"buffer": 92,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9683,
						"regions":
						{
						},
						"selection":
						[
							[
								7549,
								7549
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2002.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 93,
					"file": "src/RenderPasses/ImageLoader/ImageLoader.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2863,
						"regions":
						{
						},
						"selection":
						[
							[
								1742,
								1742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 216,
					"type": "text"
				},
				{
					"buffer": 94,
					"file": "src/RenderPasses/ImageLoader/ImageLoader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5049,
						"regions":
						{
						},
						"selection":
						[
							[
								1911,
								1911
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 215,
					"type": "text"
				},
				{
					"buffer": 95,
					"file": "src/RenderPasses/ToneMapper/ToneMapper.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5456,
						"regions":
						{
						},
						"selection":
						[
							[
								1742,
								1742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 176,
					"type": "text"
				},
				{
					"buffer": 96,
					"file": "src/RenderPasses/ToneMapper/ToneMapper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16164,
						"regions":
						{
						},
						"selection":
						[
							[
								4985,
								4985
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 175,
					"type": "text"
				},
				{
					"buffer": 97,
					"file": "src/RenderPasses/AccumulatePass/AccumulatePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10798,
						"regions":
						{
						},
						"selection":
						[
							[
								1736,
								1736
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 208,
					"type": "text"
				},
				{
					"buffer": 98,
					"file": "src/RenderPasses/GBuffer/GBufferBase.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3654,
						"regions":
						{
						},
						"selection":
						[
							[
								2955,
								2955
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 224,
					"type": "text"
				},
				{
					"buffer": 99,
					"file": "src/RenderPasses/GBuffer/GBufferBase.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6505,
						"regions":
						{
						},
						"selection":
						[
							[
								2311,
								2311
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 223,
					"type": "text"
				},
				{
					"buffer": 100,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2997,
						"regions":
						{
						},
						"selection":
						[
							[
								2997,
								2997
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 222,
					"type": "text"
				},
				{
					"buffer": 101,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9899,
						"regions":
						{
						},
						"selection":
						[
							[
								6774,
								6774
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2448.0,
						"zoom_level": 1.0
					},
					"stack_index": 169,
					"type": "text"
				},
				{
					"buffer": 102,
					"file": "src/RenderPasses/DepthPass/DepthPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5179,
						"regions":
						{
						},
						"selection":
						[
							[
								2843,
								2843
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 103,
					"file": "src/RenderPasses/SSAO/SSAO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11689,
						"regions":
						{
						},
						"selection":
						[
							[
								1856,
								1856
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 218,
					"type": "text"
				},
				{
					"buffer": 104,
					"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3442,
						"regions":
						{
						},
						"selection":
						[
							[
								2317,
								2317
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 217,
					"type": "text"
				},
				{
					"buffer": 105,
					"file": "src/RenderPasses/DepthPass/DepthPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3281,
						"regions":
						{
						},
						"selection":
						[
							[
								2110,
								2110
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 106,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3771,
						"regions":
						{
						},
						"selection":
						[
							[
								1726,
								1726
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 220,
					"type": "text"
				},
				{
					"buffer": 107,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5767,
						"regions":
						{
						},
						"selection":
						[
							[
								1771,
								1771
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 219,
					"type": "text"
				},
				{
					"buffer": 108,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5566,
						"regions":
						{
						},
						"selection":
						[
							[
								3985,
								3985
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1549.0,
						"zoom_level": 1.0
					},
					"stack_index": 168,
					"type": "text"
				},
				{
					"buffer": 109,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9623,
						"regions":
						{
						},
						"selection":
						[
							[
								9623,
								9623
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1905.0,
						"zoom_level": 1.0
					},
					"stack_index": 221,
					"type": "text"
				},
				{
					"buffer": 110,
					"file": "src/RenderPasses/Antialiasing/Antialiasing.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2797,
						"regions":
						{
						},
						"selection":
						[
							[
								2506,
								2506
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 174,
					"type": "text"
				},
				{
					"buffer": 111,
					"file": "src/RenderPasses/BlitPass/BlitPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3965,
						"regions":
						{
						},
						"selection":
						[
							[
								1830,
								1830
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 173,
					"type": "text"
				},
				{
					"buffer": 112,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19104,
						"regions":
						{
						},
						"selection":
						[
							[
								18841,
								18841
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6987.0,
						"zoom_level": 1.0
					},
					"stack_index": 172,
					"type": "text"
				},
				{
					"buffer": 113,
					"file": "src/RenderPasses/BlitPass/BlitPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2776,
						"regions":
						{
						},
						"selection":
						[
							[
								1743,
								1743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 209,
					"type": "text"
				},
				{
					"buffer": 114,
					"file": "src/RenderPasses/AccumulatePass/AccumulatePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5423,
						"regions":
						{
						},
						"selection":
						[
							[
								1725,
								1725
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 207,
					"type": "text"
				},
				{
					"buffer": 115,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3422,
						"regions":
						{
						},
						"selection":
						[
							[
								2486,
								2486
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 68.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 116,
					"file": "src/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 287,
						"regions":
						{
						},
						"selection":
						[
							[
								287,
								287
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 117,
					"file": "src/Falcor/Utils/StringUtils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12635,
						"regions":
						{
						},
						"selection":
						[
							[
								12119,
								12119
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4845.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 118,
					"file": "src/Samples/ModelViewer/ModelViewer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9979,
						"regions":
						{
						},
						"selection":
						[
							[
								3916,
								3916
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2397.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 119,
					"file": "src/Samples/ModelViewer/ModelViewer.ps.slang.bak",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2408,
						"regions":
						{
						},
						"selection":
						[
							[
								1756,
								1756
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 120,
					"file": "src/Samples/ModelViewer/ModelViewer.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1931,
						"regions":
						{
						},
						"selection":
						[
							[
								1747,
								1747
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 121,
					"file": "src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7921,
						"regions":
						{
						},
						"selection":
						[
							[
								1944,
								1944
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 116.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 122,
					"file": "src/Tools/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1429,
						"regions":
						{
						},
						"selection":
						[
							[
								1133,
								1133
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 123,
					"file": "src/Samples/ShaderToy/ShaderToy.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4229,
						"regions":
						{
						},
						"selection":
						[
							[
								4138,
								4138
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 482.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 124,
					"file": "src/Falcor/RenderGraph/BasePasses/FullScreenPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5500,
						"regions":
						{
						},
						"selection":
						[
							[
								5475,
								5475
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1467.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 125,
					"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3831,
						"regions":
						{
						},
						"selection":
						[
							[
								1785,
								1785
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 311.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 126,
					"file": "src/Falcor/RenderGraph/BasePasses/BaseGraphicsPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2717,
						"regions":
						{
						},
						"selection":
						[
							[
								1790,
								1790
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 127,
					"file": "src/Falcor/Utils/Timing/FrameRate.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3768,
						"regions":
						{
						},
						"selection":
						[
							[
								3649,
								3649
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1130.0,
						"zoom_level": 1.0
					},
					"stack_index": 255,
					"type": "text"
				},
				{
					"buffer": 128,
					"file": "src/Falcor/Utils/Timing/FrameRate.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2279,
						"regions":
						{
						},
						"selection":
						[
							[
								2242,
								2242
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 256,
					"type": "text"
				},
				{
					"buffer": 129,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6356,
						"regions":
						{
						},
						"selection":
						[
							[
								2964,
								2964
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 259,
					"type": "text"
				},
				{
					"buffer": 130,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7799,
						"regions":
						{
						},
						"selection":
						[
							[
								7005,
								7005
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2420.0,
						"zoom_level": 1.0
					},
					"stack_index": 163,
					"type": "text"
				},
				{
					"buffer": 131,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29474,
						"regions":
						{
						},
						"selection":
						[
							[
								29474,
								29474
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10080.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"type": "text"
				},
				{
					"buffer": 132,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 66954,
						"regions":
						{
						},
						"selection":
						[
							[
								66712,
								66712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26309.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 133,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15340,
						"regions":
						{
						},
						"selection":
						[
							[
								13165,
								13165
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5355.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 134,
					"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2850,
						"regions":
						{
						},
						"selection":
						[
							[
								2587,
								2587
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 622.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 135,
					"file": "src/Falcor/Core/Program/ShaderVar.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15515,
						"regions":
						{
						},
						"selection":
						[
							[
								12657,
								12657
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4745.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 136,
					"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11254,
						"regions":
						{
						},
						"selection":
						[
							[
								8783,
								8783
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3634.0,
						"zoom_level": 1.0
					},
					"stack_index": 158,
					"type": "text"
				},
				{
					"buffer": 137,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3251,
						"regions":
						{
						},
						"selection":
						[
							[
								1789,
								1789
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 278.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 138,
					"file": "src/Falcor/RenderGraph/RenderGraphCompiler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19890,
						"regions":
						{
						},
						"selection":
						[
							[
								4887,
								4887
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7119.0,
						"zoom_level": 1.0
					},
					"stack_index": 161,
					"type": "text"
				},
				{
					"buffer": 139,
					"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30778,
						"regions":
						{
						},
						"selection":
						[
							[
								30084,
								30084
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11692.0,
						"zoom_level": 1.0
					},
					"stack_index": 162,
					"type": "text"
				},
				{
					"buffer": 140,
					"file": "src/Falcor/Utils/Scripting/Dictionary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4523,
						"regions":
						{
						},
						"selection":
						[
							[
								1943,
								1943
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 181,
					"type": "text"
				},
				{
					"buffer": 141,
					"file": "src/Falcor/RenderGraph/RenderGraphUI.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64727,
						"regions":
						{
						},
						"selection":
						[
							[
								39130,
								39130
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14966.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 142,
					"file": "src/Falcor/Utils/Debug/PixelDebug.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10326,
						"regions":
						{
						},
						"selection":
						[
							[
								1845,
								1845
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 212.0,
						"zoom_level": 1.0
					},
					"stack_index": 265,
					"type": "text"
				},
				{
					"buffer": 143,
					"file": "src/Falcor/Utils/Algorithm/ParallelReduction.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5991,
						"regions":
						{
						},
						"selection":
						[
							[
								2720,
								2720
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 264,
					"type": "text"
				},
				{
					"buffer": 144,
					"file": "src/Falcor/Utils/Algorithm/BitonicSort.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4343,
						"regions":
						{
						},
						"selection":
						[
							[
								2566,
								2566
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 159.0,
						"zoom_level": 1.0
					},
					"stack_index": 156,
					"type": "text"
				},
				{
					"buffer": 145,
					"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9405,
						"regions":
						{
						},
						"selection":
						[
							[
								5074,
								5074
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1428.0,
						"zoom_level": 1.0
					},
					"stack_index": 263,
					"type": "text"
				},
				{
					"buffer": 146,
					"file": "src/Falcor/Utils/Scripting/Console.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4108,
						"regions":
						{
						},
						"selection":
						[
							[
								1760,
								1760
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 227,
					"type": "text"
				},
				{
					"buffer": 147,
					"file": "src/Falcor/Utils/Scripting/ScriptBindings.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4848,
						"regions":
						{
						},
						"selection":
						[
							[
								1751,
								1751
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 226,
					"type": "text"
				},
				{
					"buffer": 148,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3485,
						"regions":
						{
						},
						"selection":
						[
							[
								2291,
								2291
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 262,
					"type": "text"
				},
				{
					"buffer": 149,
					"file": "src/Falcor/Utils/Timing/Clock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11030,
						"regions":
						{
						},
						"selection":
						[
							[
								11030,
								11030
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4358.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"type": "text"
				},
				{
					"buffer": 150,
					"file": "src/Falcor/Core/API/TextureLoader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24290,
						"regions":
						{
						},
						"selection":
						[
							[
								23239,
								23239
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"type": "text"
				},
				{
					"buffer": 151,
					"file": "third_party/assimp/include/assimp/Bitmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4295,
						"regions":
						{
						},
						"selection":
						[
							[
								2138,
								2138
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1162.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"type": "text"
				},
				{
					"buffer": 152,
					"file": "src/Falcor/Core/API/VAO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5124,
						"regions":
						{
						},
						"selection":
						[
							[
								2235,
								2235
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1732.0,
						"zoom_level": 1.0
					},
					"stack_index": 240,
					"type": "text"
				},
				{
					"buffer": 153,
					"file": "src/Falcor/Utils/Logger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5415,
						"regions":
						{
						},
						"selection":
						[
							[
								5143,
								5143
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1439.0,
						"zoom_level": 1.0
					},
					"stack_index": 254,
					"type": "text"
				},
				{
					"buffer": 154,
					"file": "src/Falcor/Utils/Logger.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6794,
						"regions":
						{
						},
						"selection":
						[
							[
								4818,
								4818
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2697.0,
						"zoom_level": 1.0
					},
					"stack_index": 253,
					"type": "text"
				},
				{
					"buffer": 155,
					"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5721,
						"regions":
						{
						},
						"selection":
						[
							[
								1749,
								1749
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 74.0,
						"zoom_level": 1.0
					},
					"stack_index": 178,
					"type": "text"
				},
				{
					"buffer": 156,
					"file": "src/Falcor/Utils/Timing/Profiler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10243,
						"regions":
						{
						},
						"selection":
						[
							[
								5510,
								5510
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2007.0,
						"zoom_level": 1.0
					},
					"stack_index": 246,
					"type": "text"
				},
				{
					"buffer": 157,
					"file": "src/Falcor/Utils/UI/Gui.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 55968,
						"regions":
						{
						},
						"selection":
						[
							[
								3320,
								3320
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 792.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 158,
					"file": "third_party/slang/tools/render-test/bind-location.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19257,
						"regions":
						{
						},
						"selection":
						[
							[
								10547,
								10547
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3980.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 159,
					"file": "src/Falcor/Utils/UI/Font.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5058,
						"regions":
						{
						},
						"selection":
						[
							[
								3129,
								3129
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 231,
					"type": "text"
				},
				{
					"buffer": 160,
					"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 84145,
						"regions":
						{
						},
						"selection":
						[
							[
								63462,
								63462
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 27284.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"type": "text"
				},
				{
					"buffer": 161,
					"file": "src/Falcor/Core/Program/ProgramVars.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14926,
						"regions":
						{
						},
						"selection":
						[
							[
								12154,
								12154
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3853.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 162,
					"file": "src/Falcor/Core/Program/ProgramVars.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6650,
						"regions":
						{
						},
						"selection":
						[
							[
								1768,
								1768
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1632.0,
						"zoom_level": 1.0
					},
					"stack_index": 121,
					"type": "text"
				},
				{
					"buffer": 163,
					"file": "src/Falcor/Core/Program/ShaderVar.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16925,
						"regions":
						{
						},
						"selection":
						[
							[
								3217,
								3217
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 87.0,
						"zoom_level": 1.0
					},
					"stack_index": 153,
					"type": "text"
				},
				{
					"buffer": 164,
					"file": "src/Falcor/Core/Program/ProgramReflection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 54804,
						"regions":
						{
						},
						"selection":
						[
							[
								47055,
								47055
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 189.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 165,
					"file": "src/Falcor/Core/Program/Program.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37217,
						"regions":
						{
						},
						"selection":
						[
							[
								35330,
								35330
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2606.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 166,
					"file": "src/Falcor/Core/API/Buffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12009,
						"regions":
						{
						},
						"selection":
						[
							[
								4124,
								4124
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 926.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"type": "text"
				},
				{
					"buffer": 167,
					"file": "src/Falcor/Core/API/FBO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18095,
						"regions":
						{
						},
						"selection":
						[
							[
								18060,
								18060
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6997.0,
						"zoom_level": 1.0
					},
					"stack_index": 167,
					"type": "text"
				},
				{
					"buffer": 168,
					"file": "src/Falcor/Core/API/FBO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13680,
						"regions":
						{
						},
						"selection":
						[
							[
								13680,
								13680
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 107.0,
						"zoom_level": 1.0
					},
					"stack_index": 247,
					"type": "text"
				},
				{
					"buffer": 169,
					"file": "src/Falcor/Core/API/Texture.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14778,
						"regions":
						{
						},
						"selection":
						[
							[
								13927,
								13927
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3649.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 170,
					"file": "src/Tools/FalcorTest/Tests/ShadingUtils/RaytracingTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4882,
						"regions":
						{
						},
						"selection":
						[
							[
								4881,
								4881
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"type": "text"
				},
				{
					"buffer": 171,
					"file": "src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7671,
						"regions":
						{
						},
						"selection":
						[
							[
								4852,
								4852
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1326.0,
						"zoom_level": 1.0
					},
					"stack_index": 118,
					"type": "text"
				},
				{
					"buffer": 172,
					"file": "src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2978,
						"regions":
						{
						},
						"selection":
						[
							[
								2488,
								2488
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 120,
					"type": "text"
				},
				{
					"buffer": 173,
					"file": "src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3625,
						"regions":
						{
						},
						"selection":
						[
							[
								3625,
								3625
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 510.0,
						"zoom_level": 1.0
					},
					"stack_index": 115,
					"type": "text"
				},
				{
					"buffer": 174,
					"file": "src/Tools/FalcorTest/Tests/Slang/TraceRayFlags.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3163,
						"regions":
						{
						},
						"selection":
						[
							[
								1762,
								1743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 268.0,
						"zoom_level": 1.0
					},
					"stack_index": 117,
					"type": "text"
				},
				{
					"buffer": 175,
					"file": "src/Tools/FalcorTest/Tests/Slang/TraceRayInline.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2113,
						"regions":
						{
						},
						"selection":
						[
							[
								2113,
								2113
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 148,
					"type": "text"
				},
				{
					"buffer": 176,
					"file": "src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5681,
						"regions":
						{
						},
						"selection":
						[
							[
								3242,
								3242
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 727.0,
						"zoom_level": 1.0
					},
					"stack_index": 116,
					"type": "text"
				},
				{
					"buffer": 177,
					"file": "src/Tools/FalcorTest/Tests/Slang/SlangMutatingTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2588,
						"regions":
						{
						},
						"selection":
						[
							[
								2588,
								2588
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 119,
					"type": "text"
				},
				{
					"buffer": 178,
					"file": "src/Tools/FalcorTest/Tests/Utils/HalfUtilsTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15238,
						"regions":
						{
						},
						"selection":
						[
							[
								15238,
								15238
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5635.0,
						"zoom_level": 1.0
					},
					"stack_index": 147,
					"type": "text"
				},
				{
					"buffer": 179,
					"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5550,
						"regions":
						{
						},
						"selection":
						[
							[
								5137,
								5137
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 229,
					"type": "text"
				},
				{
					"buffer": 180,
					"file": "src/Falcor/Core/API/GpuTimer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4393,
						"regions":
						{
						},
						"selection":
						[
							[
								1748,
								1748
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 165,
					"type": "text"
				},
				{
					"buffer": 181,
					"file": "src/Falcor/Core/API/Vulkan/VKGpuTimer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2936,
						"regions":
						{
						},
						"selection":
						[
							[
								2742,
								2742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 273,
					"type": "text"
				},
				{
					"buffer": 182,
					"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5750,
						"regions":
						{
						},
						"selection":
						[
							[
								3237,
								3237
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 550.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 183,
					"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27058,
						"regions":
						{
						},
						"selection":
						[
							[
								11956,
								11956
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3978.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 184,
					"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7764,
						"regions":
						{
						},
						"selection":
						[
							[
								6093,
								6093
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1683.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 185,
					"file": "src/Tools/FalcorTest/FalcorTest.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2143,
						"regions":
						{
						},
						"selection":
						[
							[
								1866,
								1866
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 186,
					"file": "src/Tools/FalcorTest/FalcorTest.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3605,
						"regions":
						{
						},
						"selection":
						[
							[
								3312,
								3312
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 691.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 187,
					"file": "src/Tools/FalcorTest/Tests/Sampling/SampleGeneratorTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7287,
						"regions":
						{
						},
						"selection":
						[
							[
								5097,
								5097
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 114,
					"type": "text"
				},
				{
					"buffer": 188,
					"file": "src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7721,
						"regions":
						{
						},
						"selection":
						[
							[
								7281,
								7281
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1836.0,
						"zoom_level": 1.0
					},
					"stack_index": 113,
					"type": "text"
				},
				{
					"buffer": 189,
					"file": "src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5291,
						"regions":
						{
						},
						"selection":
						[
							[
								5291,
								5291
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1275.0,
						"zoom_level": 1.0
					},
					"stack_index": 112,
					"type": "text"
				},
				{
					"buffer": 190,
					"file": "src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2373,
						"regions":
						{
						},
						"selection":
						[
							[
								1833,
								1833
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 272,
					"type": "text"
				},
				{
					"buffer": 191,
					"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15074,
						"regions":
						{
						},
						"selection":
						[
							[
								2333,
								2333
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1111.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 192,
					"file": "src/Falcor/Core/Platform/Windows/ProgressBarWin.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4513,
						"regions":
						{
						},
						"selection":
						[
							[
								2360,
								2360
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 258,
					"type": "text"
				},
				{
					"buffer": 193,
					"file": "src/Falcor/Core/Platform/OS.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15995,
						"regions":
						{
						},
						"selection":
						[
							[
								1983,
								1983
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2550.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 194,
					"file": "src/Falcor/Core/API/Vulkan/VKState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3819,
						"regions":
						{
						},
						"selection":
						[
							[
								1747,
								1747
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 91.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 195,
					"file": "src/Falcor/Core/API/Texture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15842,
						"regions":
						{
						},
						"selection":
						[
							[
								4357,
								4357
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1036.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 196,
					"file": "src/Mogwai/MogwaiSettings.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2575,
						"regions":
						{
						},
						"selection":
						[
							[
								1742,
								1742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 136.0,
						"zoom_level": 1.0
					},
					"stack_index": 235,
					"type": "text"
				},
				{
					"buffer": 197,
					"file": "src/Mogwai/MogwaiSettings.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10767,
						"regions":
						{
						},
						"selection":
						[
							[
								8705,
								8705
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3995.0,
						"zoom_level": 1.0
					},
					"stack_index": 234,
					"type": "text"
				},
				{
					"buffer": 198,
					"file": "src/Mogwai/MogwaiScripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6779,
						"regions":
						{
						},
						"selection":
						[
							[
								3314,
								3314
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 935.0,
						"zoom_level": 1.0
					},
					"stack_index": 233,
					"type": "text"
				},
				{
					"buffer": 199,
					"file": "src/Falcor/Core/API/Shader.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8299,
						"regions":
						{
						},
						"selection":
						[
							[
								2021,
								2021
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 363.0,
						"zoom_level": 1.0
					},
					"stack_index": 154,
					"type": "text"
				},
				{
					"buffer": 200,
					"file": "src/Falcor/Core/API/Sampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7691,
						"regions":
						{
						},
						"selection":
						[
							[
								1825,
								1825
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 238,
					"type": "text"
				},
				{
					"buffer": 201,
					"file": "src/Falcor/Core/API/Sampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3799,
						"regions":
						{
						},
						"selection":
						[
							[
								1749,
								1749
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 237,
					"type": "text"
				},
				{
					"buffer": 202,
					"file": "src/Falcor/stdafx.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1831,
						"regions":
						{
						},
						"selection":
						[
							[
								1788,
								1788
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 144,
					"type": "text"
				},
				{
					"buffer": 203,
					"file": "src/Falcor/Core/API/CopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7371,
						"regions":
						{
						},
						"selection":
						[
							[
								6858,
								6858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 538.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 204,
					"file": "src/Falcor/Core/API/VAO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3603,
						"regions":
						{
						},
						"selection":
						[
							[
								3603,
								3603
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1111.0,
						"zoom_level": 1.0
					},
					"stack_index": 164,
					"type": "text"
				},
				{
					"buffer": 205,
					"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6616,
						"regions":
						{
						},
						"selection":
						[
							[
								3832,
								3832
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 824.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 206,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8174,
						"regions":
						{
						},
						"selection":
						[
							[
								3104,
								3104
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2555.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 207,
					"file": "src/Falcor/Core/API/ComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2991,
						"regions":
						{
						},
						"selection":
						[
							[
								2217,
								2217
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 181.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 208,
					"file": "src/Falcor/Core/API/D3D12/D3D12ComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6740,
						"regions":
						{
						},
						"selection":
						[
							[
								4580,
								4580
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1383.0,
						"zoom_level": 1.0
					},
					"stack_index": 132,
					"type": "text"
				},
				{
					"buffer": 209,
					"file": "src/Falcor/Core/API/D3D12/D3D12LowLevelContextData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4664,
						"regions":
						{
						},
						"selection":
						[
							[
								2929,
								2929
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 775.0,
						"zoom_level": 1.0
					},
					"stack_index": 257,
					"type": "text"
				},
				{
					"buffer": 210,
					"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5474,
						"regions":
						{
						},
						"selection":
						[
							[
								3334,
								3334
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 459.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 211,
					"file": "src/Falcor/Core/API/FencedPool.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4110,
						"regions":
						{
						},
						"selection":
						[
							[
								3800,
								3800
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1020.0,
						"zoom_level": 1.0
					},
					"stack_index": 166,
					"type": "text"
				},
				{
					"buffer": 212,
					"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17609,
						"regions":
						{
						},
						"selection":
						[
							[
								5607,
								5607
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1557.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 213,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2878,
						"regions":
						{
						},
						"selection":
						[
							[
								1827,
								1827
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 214,
					"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14122,
						"regions":
						{
						},
						"selection":
						[
							[
								3729,
								3729
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 421.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"type": "text"
				},
				{
					"buffer": 215,
					"file": "src/RenderPasses/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2187,
						"regions":
						{
						},
						"selection":
						[
							[
								457,
								457
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 130,
					"type": "text"
				},
				{
					"buffer": 216,
					"file": "third_party/slang/tools/render-test/cuda/cuda-compute-util.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53192,
						"regions":
						{
						},
						"selection":
						[
							[
								1255,
								1255
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 232,
					"type": "text"
				},
				{
					"buffer": 217,
					"file": "src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7287,
						"regions":
						{
						},
						"selection":
						[
							[
								7263,
								7263
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1683.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 218,
					"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5474,
						"regions":
						{
						},
						"selection":
						[
							[
								1794,
								1794
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1428.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"type": "text"
				},
				{
					"buffer": 219,
					"file": "src/Falcor/Core/Program/ProgramVersion.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10308,
						"regions":
						{
						},
						"selection":
						[
							[
								9012,
								9012
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3308.0,
						"zoom_level": 1.0
					},
					"stack_index": 275,
					"type": "text"
				},
				{
					"buffer": 220,
					"file": "third_party/slang/examples/model-viewer/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86920,
						"regions":
						{
						},
						"selection":
						[
							[
								7215,
								7215
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3835.0,
						"zoom_level": 1.0
					},
					"stack_index": 276,
					"type": "text"
				},
				{
					"buffer": 221,
					"file": "src/Falcor/Core/API/ResourceViews.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8568,
						"regions":
						{
						},
						"selection":
						[
							[
								8491,
								8491
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 459.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"type": "text"
				},
				{
					"buffer": 222,
					"file": "src/Falcor/Core/API/RootSignature.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6505,
						"regions":
						{
						},
						"selection":
						[
							[
								1837,
								1837
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 289.0,
						"zoom_level": 1.0
					},
					"stack_index": 193,
					"type": "text"
				},
				{
					"buffer": 223,
					"file": "src/Falcor/Core/API/RootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8573,
						"regions":
						{
						},
						"selection":
						[
							[
								5300,
								5300
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1594.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"type": "text"
				},
				{
					"buffer": 224,
					"file": "third_party/slang/tools/gfx/render.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28476,
						"regions":
						{
						},
						"selection":
						[
							[
								14530,
								14530
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9715.0,
						"zoom_level": 1.0
					},
					"stack_index": 252,
					"type": "text"
				},
				{
					"buffer": 225,
					"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5151,
						"regions":
						{
						},
						"selection":
						[
							[
								4947,
								4947
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1428.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 226,
					"file": "src/Falcor/Core/API/Device.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9745,
						"regions":
						{
						},
						"selection":
						[
							[
								7942,
								7942
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 64.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 227,
					"file": "src/Falcor/Core/API/GpuMemoryHeap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3971,
						"regions":
						{
						},
						"selection":
						[
							[
								3897,
								3897
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 244,
					"type": "text"
				},
				{
					"buffer": 228,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2682,
						"regions":
						{
						},
						"selection":
						[
							[
								2682,
								2682
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 346.0,
						"zoom_level": 1.0
					},
					"stack_index": 155,
					"type": "text"
				},
				{
					"buffer": 229,
					"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22140,
						"regions":
						{
						},
						"selection":
						[
							[
								1858,
								1858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 230,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5775,
						"regions":
						{
						},
						"selection":
						[
							[
								2486,
								2486
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 510.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 231,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8736,
						"regions":
						{
						},
						"selection":
						[
							[
								3530,
								3530
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 924.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 232,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2468,
						"regions":
						{
						},
						"selection":
						[
							[
								2467,
								2467
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"type": "text"
				},
				{
					"buffer": 233,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27801,
						"regions":
						{
						},
						"selection":
						[
							[
								24946,
								24946
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1989.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				},
				{
					"buffer": 234,
					"file": "src/Falcor/Core/API/Vulkan/VKGpuFence.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9726,
						"regions":
						{
						},
						"selection":
						[
							[
								8619,
								8619
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 271,
					"type": "text"
				},
				{
					"buffer": 235,
					"file": "src/Falcor/Core/API/D3D12/D3D12GpuFence.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3766,
						"regions":
						{
						},
						"selection":
						[
							[
								3204,
								3204
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 278,
					"type": "text"
				},
				{
					"buffer": 236,
					"file": "src/Falcor/Core/API/GpuFence.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3246,
						"regions":
						{
						},
						"selection":
						[
							[
								3221,
								3221
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 353.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"type": "text"
				},
				{
					"buffer": 237,
					"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9322,
						"regions":
						{
						},
						"selection":
						[
							[
								7307,
								7307
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3294.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 238,
					"file": "falcor.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2302,
						"regions":
						{
						},
						"selection":
						[
							[
								2299,
								2299
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 438.0,
						"zoom_level": 1.0
					},
					"stack_index": 131,
					"type": "text"
				},
				{
					"buffer": 239,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8286,
						"regions":
						{
						},
						"selection":
						[
							[
								1551,
								1597
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 249,
					"type": "text"
				},
				{
					"buffer": 240,
					"file": "third_party/slang/external/vulkan/include/vulkan/vulkan.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2369181,
						"regions":
						{
						},
						"selection":
						[
							[
								556758,
								556758
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 211357.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"type": "text"
				},
				{
					"buffer": 241,
					"file": "/usr/include/vulkan/vulkan.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3544623,
						"regions":
						{
						},
						"selection":
						[
							[
								2684,
								2684
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 919.0,
						"zoom_level": 1.0
					},
					"stack_index": 250,
					"type": "text"
				},
				{
					"buffer": 242,
					"file": "third_party/slang/external/vulkan/include/vulkan/vulkan_core.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 451013,
						"regions":
						{
						},
						"selection":
						[
							[
								58189,
								58189
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16435.0,
						"zoom_level": 1.0
					},
					"stack_index": 122,
					"type": "text"
				},
				{
					"buffer": 243,
					"file": "src/Falcor/Utils/Math/FalcorMath.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8456,
						"regions":
						{
						},
						"selection":
						[
							[
								6714,
								6714
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2725.0,
						"zoom_level": 1.0
					},
					"stack_index": 280,
					"type": "text"
				},
				{
					"buffer": 244,
					"file": "src/Falcor/Core/Framework.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13038,
						"regions":
						{
						},
						"selection":
						[
							[
								11875,
								11875
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5826.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 245,
					"file": "src/Falcor/Core/type.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6550,
						"regions":
						{
						},
						"selection":
						[
							[
								4968,
								4968
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 969.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 246,
					"file": "src/Falcor/Core/Framework.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2253,
						"regions":
						{
						},
						"selection":
						[
							[
								1759,
								1759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 146,
					"type": "text"
				},
				{
					"buffer": 247,
					"file": "src/Falcor/Core/API/CopyContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7485,
						"regions":
						{
						},
						"selection":
						[
							[
								1815,
								1815
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 231.0,
						"zoom_level": 1.0
					},
					"stack_index": 140,
					"type": "text"
				},
				{
					"buffer": 248,
					"file": "src/Falcor/Core/API/VertexLayout.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1862,
						"regions":
						{
						},
						"selection":
						[
							[
								1729,
								1729
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 241,
					"type": "text"
				},
				{
					"buffer": 249,
					"file": "src/Falcor/Core/FalcorConfig.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2513,
						"regions":
						{
						},
						"selection":
						[
							[
								2513,
								2513
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 151,
					"type": "text"
				},
				{
					"buffer": 250,
					"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2479,
						"regions":
						{
						},
						"selection":
						[
							[
								1897,
								1897
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 195,
					"type": "text"
				},
				{
					"buffer": 251,
					"file": "src/Falcor/Falcor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6959,
						"regions":
						{
						},
						"selection":
						[
							[
								1940,
								1940
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 143,
					"type": "text"
				},
				{
					"buffer": 252,
					"file": "src/Falcor/Utils/Debug/PixelDebug.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5658,
						"regions":
						{
						},
						"selection":
						[
							[
								1867,
								1867
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 284,
					"type": "text"
				},
				{
					"buffer": 253,
					"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10241,
						"regions":
						{
						},
						"selection":
						[
							[
								3988,
								3988
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 254,
					"file": "src/Falcor/Utils/Scripting/Console.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2101,
						"regions":
						{
						},
						"selection":
						[
							[
								1818,
								1818
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 225,
					"type": "text"
				},
				{
					"buffer": 255,
					"file": "src/Falcor/Utils/Scripting/Scripting.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5726,
						"regions":
						{
						},
						"selection":
						[
							[
								4879,
								4879
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1271.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 256,
					"file": "src/Falcor/Core/API/DescriptorPool.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4744,
						"regions":
						{
						},
						"selection":
						[
							[
								4744,
								4744
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 142,
					"type": "text"
				},
				{
					"buffer": 257,
					"file": "src/Falcor/Core/API/DescriptorPool.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2589,
						"regions":
						{
						},
						"selection":
						[
							[
								1766,
								1766
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"type": "text"
				},
				{
					"buffer": 258,
					"file": "src/Falcor/Core/State/GraphicsState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10483,
						"regions":
						{
						},
						"selection":
						[
							[
								8729,
								8729
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 329.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 259,
					"file": "src/Falcor/Core/State/GraphicsState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9191,
						"regions":
						{
						},
						"selection":
						[
							[
								5982,
								5982
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2233.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 260,
					"file": "src/Falcor/Core/State/ComputeState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3479,
						"regions":
						{
						},
						"selection":
						[
							[
								1954,
								1954
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 300.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 261,
					"file": "src/Falcor/Core/State/ComputeState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3532,
						"regions":
						{
						},
						"selection":
						[
							[
								1864,
								1864
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 396.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 262,
					"file": "src/Falcor/Core/State/StateGraph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4323,
						"regions":
						{
						},
						"selection":
						[
							[
								4323,
								4323
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 263,
					"file": "src/Falcor/Raytracing/RtProgram/RtProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7986,
						"regions":
						{
						},
						"selection":
						[
							[
								5461,
								5461
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17.0,
						"zoom_level": 1.0
					},
					"stack_index": 283,
					"type": "text"
				},
				{
					"buffer": 264,
					"file": "src/Falcor/Raytracing/RtProgram/RtProgram.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6561,
						"regions":
						{
						},
						"selection":
						[
							[
								1881,
								1881
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2244.0,
						"zoom_level": 1.0
					},
					"stack_index": 282,
					"type": "text"
				},
				{
					"buffer": 265,
					"file": "src/Mogwai/AppData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2896,
						"regions":
						{
						},
						"selection":
						[
							[
								2896,
								2896
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 188,
					"type": "text"
				},
				{
					"buffer": 266,
					"file": "src/Falcor/Core/Platform/Linux/ProgressBarLinux.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5059,
						"regions":
						{
						},
						"selection":
						[
							[
								2626,
								2626
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 260,
					"type": "text"
				},
				{
					"buffer": 267,
					"file": "src/Mogwai/AppData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5386,
						"regions":
						{
						},
						"selection":
						[
							[
								5386,
								5386
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1666.0,
						"zoom_level": 1.0
					},
					"stack_index": 125,
					"type": "text"
				},
				{
					"buffer": 268,
					"file": "src/Mogwai/Extensions/Capture/CaptureTrigger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3663,
						"regions":
						{
						},
						"selection":
						[
							[
								2637,
								2637
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 126,
					"type": "text"
				},
				{
					"buffer": 269,
					"file": "src/Falcor/Core/Sample.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24010,
						"regions":
						{
						},
						"selection":
						[
							[
								3160,
								3160
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 484.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 270,
					"file": "src/Falcor/Core/API/VertexLayout.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7327,
						"regions":
						{
						},
						"selection":
						[
							[
								1853,
								1853
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2550.0,
						"zoom_level": 1.0
					},
					"stack_index": 242,
					"type": "text"
				},
				{
					"buffer": 271,
					"file": "src/Falcor/Core/API/Device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11479,
						"regions":
						{
						},
						"selection":
						[
							[
								2608,
								2608
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 295.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 272,
					"file": "src/Falcor/Core/API/DescriptorSet.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5235,
						"regions":
						{
						},
						"selection":
						[
							[
								5235,
								5235
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 141,
					"type": "text"
				},
				{
					"buffer": 273,
					"file": "src/Falcor/Core/API/DescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2524,
						"regions":
						{
						},
						"selection":
						[
							[
								2092,
								2092
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"type": "text"
				},
				{
					"buffer": 274,
					"file": "src/Falcor/Core/API/ResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3685,
						"regions":
						{
						},
						"selection":
						[
							[
								1981,
								1981
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 370.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"type": "text"
				},
				{
					"buffer": 275,
					"file": "Falcor.sln",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19418,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 281,
					"type": "text"
				},
				{
					"buffer": 276,
					"file": "src/Falcor/Scene/Scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24873,
						"regions":
						{
						},
						"selection":
						[
							[
								15547,
								15547
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5137.0,
						"zoom_level": 1.0
					},
					"stack_index": 261,
					"type": "text"
				},
				{
					"buffer": 277,
					"file": "src/Falcor/RenderGraph/RenderGraphUI.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8554,
						"regions":
						{
						},
						"selection":
						[
							[
								1725,
								1725
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 278,
					"file": "src/Falcor/RenderGraph/RenderGraph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11049,
						"regions":
						{
						},
						"selection":
						[
							[
								2099,
								2099
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3774.0,
						"zoom_level": 1.0
					},
					"stack_index": 183,
					"type": "text"
				},
				{
					"buffer": 279,
					"file": "src/Falcor/RenderGraph/ResourceCache.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5280,
						"regions":
						{
						},
						"selection":
						[
							[
								1798,
								1798
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 191,
					"type": "text"
				},
				{
					"buffer": 280,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4132,
						"regions":
						{
						},
						"selection":
						[
							[
								2066,
								2066
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 285,
					"type": "text"
				},
				{
					"buffer": 281,
					"file": "src/Falcor/Utils/Debug/DebugConsole.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4137,
						"regions":
						{
						},
						"selection":
						[
							[
								3723,
								3723
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 251,
					"type": "text"
				},
				{
					"buffer": 282,
					"file": "src/Falcor/Utils/Debug/debug.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1646,
						"regions":
						{
						},
						"selection":
						[
							[
								1646,
								1646
							]
						],
						"settings":
						{
							"auto_name": "#ifndef __FALCOR_DEBUG_H__",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 184,
					"type": "text"
				},
				{
					"buffer": 283,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20152,
						"regions":
						{
						},
						"selection":
						[
							[
								4448,
								4448
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1272.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 284,
					"file": "src/Falcor/Scene/Scene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53426,
						"regions":
						{
						},
						"selection":
						[
							[
								5592,
								5592
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2244.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 285,
					"file": "src/Falcor/Core/API/D3D12/D3D12Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6227,
						"regions":
						{
						},
						"selection":
						[
							[
								5858,
								5858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 277,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 120.0
	},
	"output.unsaved_changes":
	{
		"height": 120.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 404.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
