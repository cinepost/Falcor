{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Rend",
				"RenderGraph"
			],
			[
				"wi",
				"width"
			],
			[
				"mpD",
				"mpDisplay"
			],
			[
				"mp",
				"mpDisplay"
			],
			[
				"mD",
				"mpDisplay"
			],
			[
				"Frame",
				"FrameData"
			],
			[
				"mI",
				"mImageWidth"
			],
			[
				"push",
				"pushBgeo"
			],
			[
				"bge",
				"bgeo_json_found"
			],
			[
				"b",
				"bgeo"
			],
			[
				"nam",
				"name"
			],
			[
				"str",
				"string"
			],
			[
				"UT_",
				"UT_IStream"
			],
			[
				"pars",
				"parseStream"
			],
			[
				"LOG",
				"LLOG_ERR"
			],
			[
				"st",
				"stream"
			],
			[
				"file",
				"filename"
			],
			[
				"int",
				"int64_t"
			],
			[
				"bgeo",
				"bgeo_arr"
			],
			[
				"LLOG_",
				"LLOG_ERR"
			],
			[
				"bg",
				"bgeo_json_found"
			],
			[
				"li",
				"line"
			],
			[
				"cha",
				"char_ptr"
			],
			[
				"ge",
				"geo_read_result"
			],
			[
				"is",
				"istream"
			],
			[
				"fla",
				"flag_stack"
			],
			[
				"be",
				"begin"
			],
			[
				"star",
				"start_it"
			],
			[
				"Vec",
				"Vector3"
			],
			[
				"attr",
				"attrib"
			],
			[
				"A",
				"Attrib"
			],
			[
				"obj",
				"obj_name"
			],
			[
				"ve",
				"vector3"
			],
			[
				"Ve",
				"Vector3"
			],
			[
				"MA",
				"MATERIAL"
			],
			[
				"GEO",
				"GEOMETRY"
			],
			[
				"atrib",
				"Attrib"
			],
			[
				"v",
				"value"
			],
			[
				"At",
				"Attrib"
			],
			[
				"re",
				"return"
			],
			[
				"Att",
				"AttribsContainer"
			],
			[
				"AT",
				"Attrib"
			],
			[
				"Attr",
				"AttribType"
			],
			[
				"Int",
				"Int3"
			],
			[
				"def",
				"default"
			],
			[
				"cre",
				"createCompileRequest"
			],
			[
				"SLA",
				"SLANG_FAILED"
			],
			[
				"requ",
				"required"
			],
			[
				"Pr",
				"Program"
			],
			[
				"Compute",
				"ComputeContext"
			],
			[
				"Co",
				"ComputeContext"
			],
			[
				"e",
				"execute"
			],
			[
				"Com",
				"ComputePass"
			],
			[
				"ex",
				"executeIndirect"
			],
			[
				"p",
				"pDevice"
			],
			[
				"get",
				"getCSO"
			],
			[
				"Comp",
				"ComputeState"
			],
			[
				"S",
				"SkyBox"
			],
			[
				"Re",
				"RenderPass"
			],
			[
				"pa",
				"parseStream"
			],
			[
				"Render",
				"RendererIface"
			],
			[
				"RendererI",
				"RendererIfaceBase"
			],
			[
				"m",
				"mInitialized"
			],
			[
				"LLO",
				"LLOG_DBG"
			],
			[
				"pI",
				"pIface"
			],
			[
				"ini",
				"initRenderer"
			],
			[
				"R",
				"RendererIfaceLSD"
			],
			[
				"add",
				"addGraph"
			],
			[
				"Script",
				"ScriptBindings"
			],
			[
				"LLOG",
				"LLOG_WRN"
			],
			[
				"Sc",
				"ScriptBindings"
			],
			[
				"LL",
				"LLOG_DBG"
			],
			[
				"ou",
				"output"
			],
			[
				"Ren",
				"RenderGraph"
			],
			[
				"set",
				"setScene"
			],
			[
				"RE",
				"RendererIfaceLSD"
			],
			[
				"render",
				"renderFrame"
			],
			[
				"he",
				"height"
			],
			[
				"de",
				"device"
			],
			[
				"up",
				"updateOffscreenFBO"
			],
			[
				"rele",
				"releaseFboData"
			],
			[
				"onR",
				"onResizeSwapChain"
			],
			[
				"getO",
				"getOffscreenFbo"
			],
			[
				"fi",
				"file_name"
			],
			[
				"D",
				"DisplayType"
			],
			[
				"d",
				"display_type"
			],
			[
				"an",
				"any_filename_"
			],
			[
				"any",
				"any_filename"
			],
			[
				"O",
				"OPENEXR"
			],
			[
				"Op",
				"OpenEXR"
			],
			[
				"Rendere",
				"RendererIfaceLSD"
			],
			[
				"h",
				"height"
			],
			[
				"ima",
				"image_name"
			],
			[
				"cmd_de",
				"cmd_declare"
			],
			[
				"cmd_d",
				"cmd_defaults"
			],
			[
				"cm",
				"cmd_version"
			],
			[
				"cmd_op",
				"cmd_deviceoption"
			],
			[
				"cmd",
				"cmd_defaults"
			],
			[
				"c",
				"cmd_quit"
			],
			[
				"cme",
				"cmd_property"
			],
			[
				"V",
				"Vector4"
			],
			[
				"I",
				"Int4"
			],
			[
				"in",
				"Int3"
			],
			[
				"if",
				"ifthen"
			],
			[
				"end",
				"endif"
			],
			[
				"en",
				"endif"
			],
			[
				"C",
				"Command"
			],
			[
				"oper",
				"operator"
			],
			[
				"ope",
				"operator"
			],
			[
				"op_",
				"op_type"
			],
			[
				"opea",
				"operand"
			],
			[
				"op",
				"operand"
			],
			[
				"ski",
				"skipper"
			],
			[
				"prop",
				"prop_value"
			],
			[
				"LSD",
				"LSDEchoVisitor"
			],
			[
				"ass",
				"assign_bgeo"
			],
			[
				"Read",
				"ReaderLSD"
			],
			[
				"LOG_",
				"LOG_DBG"
			],
			[
				"LS",
				"LSDEchoVisitor"
			],
			[
				"ech",
				"echo_input"
			],
			[
				"em",
				"empty_array"
			],
			[
				"null_",
				"null_value"
			],
			[
				"array",
				"array_t"
			],
			[
				"value",
				"value_t"
			],
			[
				"valu",
				"value_t"
			],
			[
				"num",
				"number_t"
			],
			[
				"std",
				"stdin"
			],
			[
				"as",
				"assign_array_value"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Falcor/Core/Program/GraphicsProgram.cpp",
			"settings":
			{
				"buffer_size": 2616,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 1642 files for \"toStdString\" (case sensitive)\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/PackedFragment.cpp:\n   30  std::string PackedFragment::getNameAttribute() const\n   31  {\n   32:     return m_fragment.attribute.toStdString();\n   33  }\n   34  \n   35  std::string PackedFragment::getName() const\n   36  {\n   37:     return m_fragment.name.toStdString();\n   38  }\n   39  \n   40  std::string PackedFragment::getEmbeddedKey() const\n   41  {\n   42:     return m_fragment.getEmbeddedKey().toStdString();\n   43  }\n   44  \n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser/util.cpp:\n   47      UT_WorkBuffer buffer;\n   48      BGEO_CHECK(parser.parseValue(buffer));\n   49:     value = buffer.toStdString();\n   50  }\n   51  \n   ..\n   80      UT_WorkBuffer buffer;\n   81      BGEO_CHECK(parser.parseValue(buffer));\n   82:     value = buffer.toStdString();\n   83  }\n   84  \n\n5 matches across 2 files\n\n\nSearching 1642 files for \"UT_IFStream\" (case sensitive)\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/Bgeo.cpp:\n   79  \n   80  Bgeo::Impl::Impl(const char *bgeoPath, bool checkVersion): detail(new parser::Detail(checkVersion)) {\n   81:     UT_IFStream stream(bgeoPath, UT_ISTREAM_BINARY);\n   82      if (stream.isError()) {\n   83          UT_String message;\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/BgeoHeader.cpp:\n   34  \n   35  BgeoHeader::Impl::Impl(const char* bgeoPath) {\n   36:     UT_IFStream stream(bgeoPath, UT_ISTREAM_BINARY);\n   37      if (stream.isError()) {\n   38          UT_String message;\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/check_bgeo/check_bgeo.cpp:\n  130  \n  131      {\n  132:         UT_IFStream stream(argv[1], UT_ISTREAM_BINARY);\n  133          if (stream.isError())\n  134          {\n\n/home/max/dev/Falcor/src/lava_lib/reader_bgeo/ginfo/ginfo.cpp:\n   36      // NOTE: this is split into to to mimic what the SGG does.\n   37      {\n   38:         UT_IFStream stream(argv[1], UT_ISTREAM_BINARY);\n   39          if (stream.isError())\n   40          {\n   ..\n   52      {\n   53          hboost::timer t;\n   54:         UT_IFStream stream(argv[1], UT_ISTREAM_BINARY);\n   55          if (stream.isError())\n   56          {\n\n5 matches across 4 files\n\n\nSearching 1642 files for \".close(\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.cpp:\n  564              // Close the file\n  565              dotfile << \"}\" << std::endl; // closing graph scope\n  566:             dotfile.close();\n  567          }\n  568  \n\n/home/max/dev/Falcor/src/Falcor/Utils/BinaryFileStream.h:\n   79      */\n   80      void close() {\n   81:         mStream.close();\n   82      }\n   83  \n\n/home/max/dev/Falcor/src/Falcor/Utils/Perception/Experiment.cpp:\n  187                  }\n  188              }\n  189:             ResultFile.close();\n  190          }\n  191  \n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Font.cpp:\n  103  \n  104          if (bValid == false) {\n  105:             Data.close();\n  106              return false;\n  107          }\n  ...\n  116              Data.read((char*)&CharData, sizeof(FontCharData));\n  117              if (CharData.Char != i + mFirstChar) {\n  118:                 Data.close();\n  119                  return false;\n  120              }\n\n/home/max/dev/Falcor/src/houdini/soho/LSDframe.py:\n 1147          fp, temphippath = tempfile.mkstemp(dir=tmpdir)\n 1148          temphippath = temphippath.replace(\"\\\\\", \"/\")\n 1149:         os.close(fp)\n 1150          hobj.parent().saveChildrenToFile(\n 1151              [hobj], [], temphippath)\n ....\n 1162          fp, hdapath = tempfile.mkstemp(dir=tmpdir)\n 1163          hdapath = temphippath.replace(\"\\\\\", \"/\")\n 1164:         os.close(fp)\n 1165          if unlock:\n 1166              tempobj.allowEditingOfContents()\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Profiler/TimingCapture.cpp:\n   62      {\n   63          if (mFrameTimeFile.is_open())\n   64:             mFrameTimeFile.close();\n   65  \n   66          if (!filename.empty())\n\n8 matches across 6 files\n",
			"settings":
			{
				"buffer_size": 4013,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PackedFragment.cpp",
			"settings":
			{
				"buffer_size": 1063,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.cpp",
			"settings":
			{
				"buffer_size": 1867,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.cpp",
			"settings":
			{
				"buffer_size": 3111,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/util.cpp",
			"settings":
			{
				"buffer_size": 3965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/BgeoHeader.cpp",
			"settings":
			{
				"buffer_size": 3185,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.cpp",
			"settings":
			{
				"buffer_size": 7102,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.cpp",
			"settings":
			{
				"buffer_size": 5899,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.cpp",
			"settings":
			{
				"buffer_size": 5351,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.cpp",
			"settings":
			{
				"buffer_size": 7411,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
			"settings":
			{
				"buffer_size": 4150,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeContext.cpp",
			"settings":
			{
				"buffer_size": 3000,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
			"settings":
			{
				"buffer_size": 3050,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
			"settings":
			{
				"buffer_size": 8267,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/ShaderTable.cpp",
			"settings":
			{
				"buffer_size": 5792,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/ComputeState.cpp",
			"settings":
			{
				"buffer_size": 3442,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
			"settings":
			{
				"buffer_size": 19126,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.h",
			"settings":
			{
				"buffer_size": 12423,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKShader.cpp",
			"settings":
			{
				"buffer_size": 2775,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.cpp",
			"settings":
			{
				"buffer_size": 14498,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
			"settings":
			{
				"buffer_size": 27538,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.cpp",
			"settings":
			{
				"buffer_size": 8496,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
			"settings":
			{
				"buffer_size": 2479,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
			"settings":
			{
				"buffer_size": 7857,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.cpp",
			"settings":
			{
				"buffer_size": 8922,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.h",
			"settings":
			{
				"buffer_size": 15995,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
			"settings":
			{
				"buffer_size": 15074,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
			"settings":
			{
				"buffer_size": 8187,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.cpp",
			"settings":
			{
				"buffer_size": 35294,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_GRAMMAR_LSD_H_\n#define SRC_LAVA_LIB_GRAMMAR_LSD_H_\n\n#include <array>\n#include <memory>\n#include <string>\n#include <algorithm>\n#include <iostream>\n#include <variant>\n\n#include <boost/array.hpp>\n#include <boost/filesystem.hpp>\n#include <boost/range.hpp>\n//#include <boost/range/join.hpp>\n//#include <boost/algorithm/string/join.hpp>\n\n#ifdef DEBUG\n   // #define BOOST_SPIRIT_X3_DEBUG\n#endif\n\n#include <boost/spirit/home/x3.hpp>\n#include <boost/spirit/home/x3/support/ast/variant.hpp>\n#include <boost/spirit/home/x3/support/traits/container_traits.hpp>\n#include <boost/spirit/include/support_istream_iterator.hpp>\n#include <boost/fusion/include/adapt_struct.hpp>\n#include <boost/fusion/include/io.hpp>\n#include <boost/fusion/sequence/io.hpp>\n#include <boost/fusion/include/io.hpp>\n#include <boost/fusion/adapted/array.hpp>\n#include <boost/fusion/adapted/std_pair.hpp>\n\n#include <boost/container/static_vector.hpp>\n\n#include \"grammar_bgeo.h\"\n#include \"grammar_lsd_expr.h\"\n\n#include \"lava_utils_lib/logging.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\nnamespace lava {\n\nnamespace lsd {\n    using boost::container::static_vector;\n\n    struct NoValue {\n        bool operator==(NoValue const &) const { return true; }\n    };\n\n    typedef static_vector<uint, 3> Version;\n    \n    typedef static_vector<int, 2> Int2;\n    typedef static_vector<int, 3> Int3;\n    typedef static_vector<int, 4> Int4; \n\n    typedef static_vector<double, 2> Vector2; \n    typedef static_vector<double, 3> Vector3;\n    typedef static_vector<double, 4> Vector4; \n    typedef static_vector<double, 9> Matrix3;\n    typedef static_vector<double, 16> Matrix4;\n    typedef x3::variant<int, Int2, Int3, Int4, double, Vector2, Vector3, Vector4, std::string> PropValue;\n\nnamespace ast {\n\n    enum class Type { FLOAT, BOOL, INT, VECTOR2, VECTOR3, VECTOR4, MATRIX3, MATRIX4, STRING };\n    enum class Object { GLOBAL, MATERIAL, GEO, GEOMERTY, SEGMENT, CAMERA, LIGHT, FOG, OBJECT, INSTANCE, PLANE, IMAGE, RENDERER, UNKNOWN };\n    enum class DisplayType { NONE, IP, MD, OPENEXR, JPEG, TIFF, PNG };\n\n    struct ifthen;\n    struct setenv;\n    struct cmd_time;\n    struct cmd_version;\n    struct cmd_config;\n    struct cmd_defaults;\n    struct cmd_transform;\n    struct cmd_quit;\n    struct cmd_start;\n    struct cmd_end;\n    struct cmd_detail;\n    struct cmd_geometry;\n    struct cmd_property;\n    struct cmd_raytrace;\n    struct cmd_image;\n    struct cmd_declare;\n    struct cmd_deviceoption;\n\n    struct NoValue {\n        bool operator==(NoValue const &) const { return true; }\n    };\n\n    typedef x3::variant<\n        NoValue,\n        ifthen,\n        setenv,\n        cmd_start,\n        cmd_time,\n        cmd_version,\n        cmd_config,\n        cmd_defaults,\n        cmd_transform,\n        cmd_end,\n        cmd_quit,\n        cmd_detail,\n        cmd_geometry,\n        cmd_property,\n        cmd_raytrace,\n        cmd_image,\n        cmd_declare,\n        cmd_deviceoption\n    > Command;\n\n    // nullary commands\n    struct cmd_end { };\n    struct cmd_quit { };\n    struct cmd_raytrace { };\n\n    // non-nullary commands\n    struct ifthen{\n        expr::ast::Expr expr;\n        std::vector<Command> commands;\n    };\n\n    struct setenv {\n        std::string key;\n        std::string value;\n    };\n\n    struct cmd_time {\n        float time;\n    };\n\n    struct cmd_start {\n        Object type;\n    };\n\n    struct cmd_transform {\n        Matrix4 m;\n    };\n\n    struct cmd_version {\n        Version version;\n    };\n\n    struct cmd_defaults {\n        std::string filename;\n    };\n\n    struct cmd_config {\n        std::string filename;\n    };\n\n    struct cmd_geometry {\n        std::string geometry_object;\n    };\n\n    struct cmd_detail {\n        bool temporary;\n        std::string name;\n        std::string filename;\n        bgeo::ast::Bgeo bgeo;\n    };\n\n    struct cmd_image {\n        DisplayType display_type;\n        std::string filename;\n    };\n\n    struct cmd_property {\n        Object style;\n        std::string token;\n        std::vector<PropValue> values;\n    };\n\n    struct cmd_deviceoption {\n        Type type;\n        std::string name;\n        std::vector<PropValue> values;\n    };\n\n    struct cmd_declare {\n        Object style;\n        Type type;\n        std::string token;\n        std::vector<PropValue> values;\n    };\n\n}  // namespace ast\n\nstatic inline std::ostream& operator<<(std::ostream& os, const std::vector<std::string>& v) {\n    std::copy(v.begin(), v.end(), std::ostream_iterator<std::string>(os, \" \"));\n    return os;\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Int2& m) {\n    os << \"Int2[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<int>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Int3& m) {\n    os << \"Int3[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<int>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Int4& m) {\n    os << \"Int4[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<int>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Vector2& m) {\n    os << \"Vector2[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Vector3& m) {\n    os << \"Vector3[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Vector4& m) {\n    os << \"Vector4[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Matrix3& m) {\n    os << \"Matrix3[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, const Matrix4& m) {\n    os << \"Matrix4[ \";\n    std::copy(m.begin(), m.end(), std::ostream_iterator<double>(os, \" \"));\n    return os << \"]\";\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, Version v) {\n    return os << \"Version: \" << v[0] << \".\" << v[1] << \".\" << v[2];\n};\n\nstatic inline std::ostream& operator<<(std::ostream& os, std::vector<PropValue> v) {\n    std::copy(v.begin(), v.end(), std::ostream_iterator<PropValue>(os, \" \"));\n    return os;\n};\n\nusing Type = ast::Type;\nstatic inline std::ostream& operator<<(std::ostream& os, Type t) {\n    switch(t) {\n        case Type::INT: return os << \"int\";\n        case Type::BOOL: return os << \"bool\";\n        case Type::FLOAT: return os << \"float\";\n        case Type::STRING: return os << \"string\";\n        case Type::VECTOR2: return os << \"vector2\";\n        case Type::VECTOR3: return os << \"vector3\";\n        case Type::VECTOR4: return os << \"vector4\";\n        case Type::MATRIX3: return os << \"matrix3\";\n        case Type::MATRIX4: return os << \"matrix4\";\n        default: os << \"unknown\";\n    }\n    return os;\n};\n\nusing Object = ast::Object;\nstatic inline std::ostream& operator<<(std::ostream& os, Object o) {\n    switch(o) {\n        case Object::GLOBAL: return os << \"global\";\n        case Object::GEO: return os << \"geo\";\n        case Object::GEOMERTY: return os << \"geometry\";\n        case Object::MATERIAL: return os << \"material\";\n        case Object::SEGMENT: return os << \"segment\";\n        case Object::CAMERA: return os << \"camera\";\n        case Object::LIGHT: return os << \"light\";\n        case Object::FOG: return os << \"fog\";\n        case Object::OBJECT: return os << \"object\";\n        case Object::INSTANCE: return os << \"instance\";\n        case Object::PLANE: return os << \"plane\";\n        case Object::IMAGE: return os << \"image\";\n        case Object::RENDERER: return os << \"renderer\";\n        default: os << \"unknown\";\n    }\n    return os;\n};\n\n}  // namespace lsd\n\n}  // namespace lava\n\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::ifthen, expr, commands)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::setenv, key, value)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_end)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_quit)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_raytrace)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_time, time)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_start, type)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_transform, m)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_image, display_type, filename)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_defaults, filename)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_config, filename)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_version, version)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_detail, temporary, name, filename, bgeo)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_geometry, geometry_object)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_property, style, token, values)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_deviceoption, type, name, values)\nBOOST_FUSION_ADAPT_STRUCT(lava::lsd::ast::cmd_declare, style, type, token, values)\n\nnamespace lava { \n\nclass SessionLSD;\n\nnamespace lsd { \n\nstruct Visitor: public boost::static_visitor<> {\n public:\n    Visitor(std::unique_ptr<SessionLSD>& pSession);\n\n    virtual void operator()(ast::NoValue const& c) const {};\n    virtual void operator()(ast::ifthen const& c) const;\n    virtual void operator()(ast::setenv const& c) const;\n    virtual void operator()(ast::cmd_image const& c) const;\n    virtual void operator()(ast::cmd_end const& c) const;\n    virtual void operator()(ast::cmd_quit const& c) const;\n    virtual void operator()(ast::cmd_start const& c) const;\n    virtual void operator()(ast::cmd_time const& c) const;\n    virtual void operator()(ast::cmd_detail const& c) const;\n    virtual void operator()(ast::cmd_version const& c) const;\n    virtual void operator()(ast::cmd_config const& c) const;\n    virtual void operator()(ast::cmd_defaults const& c) const;\n    virtual void operator()(ast::cmd_transform const& c) const;\n    virtual void operator()(ast::cmd_geometry const& c) const;\n    virtual void operator()(ast::cmd_property const& c) const;\n    virtual void operator()(ast::cmd_deviceoption const& c) const;\n    virtual void operator()(ast::cmd_declare const& c) const;\n    virtual void operator()(ast::cmd_raytrace const& c) const;\n\n protected:\n    std::unique_ptr<SessionLSD> mpSession;\n};\n\n\nstruct EchoVisitor: public Visitor {\n public:\n    EchoVisitor(std::unique_ptr<SessionLSD>& pSession);\n    EchoVisitor(std::unique_ptr<SessionLSD>& pSession, std::ostream& os);\n\n    void operator()(ast::NoValue const& c) const override {};\n    void operator()(ast::ifthen const& c) const override;\n    void operator()(ast::setenv const& c) const override;\n    void operator()(ast::cmd_image const& c) const override;\n    void operator()(ast::cmd_end const& c) const override;\n    void operator()(ast::cmd_quit const& c) const override;\n    void operator()(ast::cmd_start const& c) const override;\n    void operator()(ast::cmd_time const& c) const override;\n    void operator()(ast::cmd_detail const& c) const override;\n    void operator()(ast::cmd_version const& c) const override;\n    void operator()(ast::cmd_config const& c) const override;\n    void operator()(ast::cmd_defaults const& c) const override;\n    void operator()(ast::cmd_transform const& c) const override;\n    void operator()(ast::cmd_geometry const& c) const override;\n    void operator()(ast::cmd_property const& c) const override;\n    void operator()(ast::cmd_deviceoption const& c) const override;\n    void operator()(ast::cmd_declare const& c) const override;\n    void operator()(ast::cmd_raytrace const& c) const override;\n\n //private:\n    void operator()(std::vector<PropValue> const& v) const;\n    void operator()(int v) const;\n    void operator()(double v) const;\n    void operator()(std::string const& v) const;\n    void operator()(Int2 const& v) const;\n    void operator()(Int3 const& v) const;\n    void operator()(Int4 const& v) const;\n    void operator()(Vector2 const& v) const;\n    void operator()(Vector3 const& v) const;\n    void operator()(Vector4 const& v) const;\n    void operator()(PropValue const& v) const;\n\n private:\n    std::ostream& _os;\n};\n\n\nnamespace validators {\n    auto is_valid_vector2 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 2);\n    };\n\n    auto is_valid_vector3 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 3);\n    };\n\n    auto is_valid_vector4 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 4);\n    };\n\n    auto is_valid_matrix3 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 9);\n    };\n\n    auto is_valid_matrix4 = [](auto& ctx) {\n        _pass(ctx) = 0 == (_val(ctx).size() % 16);\n    };\n}\n\nnamespace parser {\n    namespace ascii = boost::spirit::x3::ascii;\n    using namespace x3;\n\n    //\n    // Since a double parser also parses an integer, we will always get a double, even if the input is \"12\"\n    // In order to prevent this, we need a strict double parser\n    //\n    boost::spirit::x3::real_parser<double, boost::spirit::x3::strict_real_policies<double> > const double_ = {};\n\n    template <typename T> auto as = [](auto p) { return x3::rule<struct _, T> {} = p; };\n    //auto const uintPair = as<ast::uintPair_t> ( uint_ >> '-' >> uint_       );\n    //auto const uintObj  = as<ast::uintObj>    ( uintPair | uint_            );\n    //auto const varVec   = as<ast::varVec>     ( '[' >> uintObj % ',' >> ']' );\n\n    auto const esc_char \n        = x3::rule<struct esc_char_, char> {\"esc_char\"}\n        = '\\\\' >> char_(\"\\\"\");\n\n    auto const string \n        = x3::rule<struct string_, std::string> {\"string\"}\n        = lexeme[+graph];\n\n    auto const string_char\n        = esc_char | alnum | char_(\"$/_.:-+@!~\");\n\n    x3::rule<class unquoted_string_, std::string> const unquoted_string = \"unquoted_string\";\n    auto const unquoted_string_def = //lexeme[+(~char_(\" \\\"\\'\"))];\n        lexeme[+string_char];\n    BOOST_SPIRIT_DEFINE(unquoted_string)\n\n    x3::rule<class empty_string_> const empty_string = \"empty_string\";\n    auto const empty_string_def = (char_('\"') >> char_('\"')) | (char_('\\'') >> char_('\\''));\n    BOOST_SPIRIT_DEFINE(empty_string)\n\n    x3::rule<class quoted_string_, std::string> const quoted_string = \"quoted_string\";\n    auto const quoted_string_def = \n        x3::lexeme['\"' > *(esc_char | ~x3::char_('\"')) > '\"'] | \n        x3::lexeme['\\'' > *(esc_char | ~x3::char_('\\'')) > '\\''] | lexeme[empty_string];\n\n    BOOST_SPIRIT_DEFINE(quoted_string)\n\n    x3::rule<class any_string_, std::string> const any_string = \"any_string\";\n    auto const any_string_def = quoted_string | unquoted_string;\n    BOOST_SPIRIT_DEFINE(any_string)\n\n    x3::rule<class identifier_, std::string> const identifier = \"identifier\";\n    auto const identifier_def = lexeme[(alnum | char_('_')) >> *(alnum | char_('_'))];\n    BOOST_SPIRIT_DEFINE(identifier)\n\n    x3::rule<class prop_name_, std::string> const prop_name = \"prop_name\";\n    auto const prop_name_def = lexeme[identifier >> *(char_(\".:/\") >> identifier)];\n    BOOST_SPIRIT_DEFINE(prop_name)\n\n    x3::rule<class obj_name_, std::string> const obj_name = \"obj_name\";\n    auto const obj_name_def = lexeme[(alnum | char_(\"/_\")) >> *(alnum | char_(\"/_\"))];\n    BOOST_SPIRIT_DEFINE(obj_name)\n\n    x3::rule<class unquoted_filename_, std::string> const unquoted_filename = \"unquoted_filename\";\n    auto const unquoted_filename_def = lexeme[+string_char];\n    BOOST_SPIRIT_DEFINE(unquoted_filename)\n\n    x3::rule<class quoted_filename_filename_, std::string> const quoted_filename = \"quoted_filename\";\n    auto const quoted_filename_def = \n        x3::lexeme['\"' > *(esc_char | ~x3::char_('\"')) > '\"'] | \n        x3::lexeme['\\'' > *(esc_char | ~x3::char_('\\'')) > '\\''] | lexeme[empty_string];\n    BOOST_SPIRIT_DEFINE(quoted_filename)\n\n    x3::rule<class any_filename_, std::string> const any_filename = \"any_filename\";\n    auto const any_filename_def = quoted_filename | unquoted_filename;\n    BOOST_SPIRIT_DEFINE(any_filename)\n\n    x3::rule<class int2_, Int2> const int2 = \"int2\";\n    auto const int2_def = repeat(2) [ int_ ];\n    BOOST_SPIRIT_DEFINE(int2)\n\n    x3::rule<class int3_, Int3> const int3 = \"int3\";\n    auto const int3_def = repeat(3) [ int_ ];\n    BOOST_SPIRIT_DEFINE(int3)\n\n    x3::rule<class int4_, Int4> const int4 = \"int4\";\n    auto const int4_def = repeat(4) [ int_ ];\n    BOOST_SPIRIT_DEFINE(int4)\n\n    x3::rule<class vector2_, Vector2> const vector2 = \"vector2\";\n    auto const vector2_def = repeat(2) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(vector2)\n\n    x3::rule<class vector3_, Vector3> const vector3 = \"vector3\";\n    auto const vector3_def = repeat(3) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(vector3)\n\n    x3::rule<class vector4_, Vector4> const vector4 = \"vector4\";\n    auto const vector4_def = repeat(4) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(vector4)\n\n    x3::rule<class matrix3_, Matrix3> const matrix3 = \"matrix3\";\n    auto const matrix3_def = repeat(9) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(matrix3)\n\n    x3::rule<class matrix4_, Matrix4> const matrix4 = \"matrix4\";\n    auto const matrix4_def = repeat(16) [ double_ | int_ ];\n    BOOST_SPIRIT_DEFINE(matrix4)\n\n    x3::rule<class version_, Version> const version = \"version\";\n    auto const version_def = lexeme[-lexeme[\"VER\"] >> int_ >> \".\" >> int_ >> \".\" >> int_];\n    BOOST_SPIRIT_DEFINE(version)\n\n    x3::rule<class bgeo_inline_, bgeo::ast::Bgeo> const bgeo_inline = \"bgeo_inline\";\n    auto const bgeo_inline_def = bgeo::parser::input;\n    BOOST_SPIRIT_DEFINE(bgeo_inline)\n\n    x3::rule<class lsd_expr_, lsd::expr::ast::Expr> const lsd_expr = \"lsd_expr\";\n    auto const lsd_expr_def = lsd::expr::parser::input;\n    BOOST_SPIRIT_DEFINE(lsd_expr)\n\n    using boost::fusion::at_c;\n    auto assign_prop = [](auto& ctx) { \n        _val(ctx).push_back(PropValue(_attr(ctx)));\n    };\n\n    x3::rule<class prop_value_, PropValue> const prop_value = \"prop_value\";\n    auto const prop_value_def = \n        vector4 | vector3 | vector2 | double_\n      | int4 | int3 | int2 | int_\n      | any_string ;\n    BOOST_SPIRIT_DEFINE(prop_value)\n\n    auto const keyword\n        = x3::rule<class keyword>{\"keyword\"}\n        = x3::lit(\"setenv\") | lit(\"cmd_time\") | lit(\"cmd_property\") | lit(\"cmd_image\") | lit(\"cmd_transform\") | lit(\"cmd_end\") | lit(\"cmd_detail\") | lit(\"cmd_deviceoption\") | lit(\"cmd_start\")\n        | lit(\"cmd_version\") | lit(\"cmd_defaults\") | lit(\"cmd_declare\") | lit(\"cmd_config\");\n\n    x3::rule<class prop_values_, std::vector<PropValue>> const prop_values = \"prop_values\";\n    auto const prop_values_def = *(prop_value - keyword);\n    BOOST_SPIRIT_DEFINE(prop_values)\n\n    x3::rule<class image_values_, std::vector<std::string>> const image_values = \"image_values\";\n    auto const image_values_def = *(quoted_string);\n    BOOST_SPIRIT_DEFINE(image_values)\n\n\n    struct ObjectsTable : x3::symbols<ast::Object> {\n        ObjectsTable() {\n            add (\"global\"   , ast::Object::GLOBAL)\n                (\"geo\"      , ast::Object::GEO)\n                (\"geometry\" , ast::Object::GEO)\n                (\"material\" , ast::Object::GEOMERTY)\n                (\"segment\"  , ast::Object::SEGMENT)\n                (\"camera\"   , ast::Object::CAMERA)\n                (\"light\"    , ast::Object::LIGHT)\n                (\"fog\"      , ast::Object::FOG)\n                (\"object\"   , ast::Object::OBJECT)\n                (\"instance\" , ast::Object::INSTANCE)\n                (\"plane\"    , ast::Object::PLANE)\n                (\"image\"    , ast::Object::IMAGE)\n                (\"renderer\" , ast::Object::RENDERER);\n        }\n    } const object;\n\n    struct PropTypesTable : x3::symbols<ast::Type> {\n        PropTypesTable() {\n            add (\"float\"    , ast::Type::FLOAT)\n                (\"bool\"     , ast::Type::BOOL)\n                (\"int\"      , ast::Type::INT)\n                (\"vector2\"  , ast::Type::VECTOR2)\n                (\"vector3\"  , ast::Type::VECTOR3)\n                (\"vector4\"  , ast::Type::VECTOR4)\n                (\"matrix3\"  , ast::Type::MATRIX3)\n                (\"matrix4\"  , ast::Type::MATRIX4)\n                (\"string\"   , ast::Type::STRING);\n        }\n    } const prop_type;\n\n        struct DisplayTypesTable : x3::symbols<ast::DisplayType> {\n        DisplayTypesTable() {\n            add (\"\\\"ip\\\"\"       , ast::DisplayType::IP)\n                (\"\\\"md\\\"\"       , ast::DisplayType::MD)\n                (\"\\\"JPEG\\\"\"     , ast::DisplayType::JPEG)\n                (\"\\\"PNG\\\"\"      , ast::DisplayType::PNG)\n                (\"\\\"OpenEXR\\\"\"  , ast::DisplayType::OPENEXR)\n                (\"\\\"TIFF\\\"\"     , ast::DisplayType::TIFF)\n                ;\n        }\n    } const display_type;\n\n    //x3::rule<class object_, ast::Object> const object = \"object\";\n    //auto const object_def = lexeme[\"global\" | \"geo\" | \"geometry\"];\n    //BOOST_SPIRIT_DEFINE(object)\n\n    using boost::fusion::at_c;\n    //auto assign_objtype = [](auto& ctx) { _val(ctx).type = _attr(ctx); };\n    //auto assign_time = [](auto& ctx) { _val(ctx).time = _attr(ctx); };\n    //auto assign_version = [](auto& ctx) { \n    //    _val(ctx).version[0] = at_c<0>(_attr(ctx)); \n    //    _val(ctx).version[1] = at_c<1>(_attr(ctx));\n    //    _val(ctx).version[2] = at_c<2>(_attr(ctx));\n    //};\n    //auto assign_comment = [](auto& ctx) {};\n    //auto assign_prop_values = [](auto& ctx) { std::cout << \"PROP: \" << _attr(ctx); };\n    //auto assign_bgeo = [](auto& ctx) { \n    //    std::cout << \"BGEO!!!\";\n    //    _val(ctx).bgeo = _attr(ctx); \n    //};\n\n    static auto const skipper = lexeme[ \n        \"/*\" >> *(char_ - \"*/\") >> \"*/\"\n        | \"//\" >> *~char_(\"\\r\\n\")\n        | '#' >> *~char_(\"\\r\\n\")\n        | blank\n    ] | blank;\n\n    auto const setenv\n        = x3::rule<class setenv, ast::setenv>{\"setenv\"}\n        = \"setenv\" >> identifier >> \"=\" >> any_string >> eps;\n\n    auto const cmd_image\n        = x3::rule<class cmd_image, ast::cmd_image>{\"cmd_image\"}\n        = \"cmd_image\" >> lit(\"\\\"-f\\\"\") >> display_type >> any_filename >> eps\n        | \"cmd_image\" >> display_type >> attr(\"\") >> eps\n        | \"cmd_image\" >> attr(ast::DisplayType::NONE) >> any_filename >> eps;\n\n    auto const cmd_property\n        = x3::rule<class cmd_property, ast::cmd_property>{\"cmd_property\"}\n        = \"cmd_property\" >> object >> identifier >> prop_values;\n    \n    auto const cmd_deviceoption\n        = x3::rule<class cmd_deviceoption, ast::cmd_deviceoption>{\"cmd_deviceoption\"}\n        = \"cmd_deviceoption\" >> prop_type >> prop_name >> prop_values;\n\n    auto const cmd_declare\n        = x3::rule<class cmd_declare, ast::cmd_declare>{\"cmd_declare\"}\n        = \"cmd_declare\" >> object >> prop_type >> prop_name >> prop_values;\n\n    auto const cmd_transform\n        = x3::rule<class cmd_transform, ast::cmd_transform>{\"cmd_transform\"}\n        = \"cmd_transform\" >> matrix4 >> eps;\n\n    auto const cmd_start\n        = x3::rule<class cmd_start, ast::cmd_start>{\"cmd_start\"}\n        = \"cmd_start\" >> object >> eps;\n\n    auto const cmd_time\n        = x3::rule<class cmd_time, ast::cmd_time>{\"cmd_time\"}\n        = \"cmd_time\" >> float_ >> eps;\n\n    auto const cmd_version\n        = x3::rule<class cmd_version, ast::cmd_version>{\"cmd_version\"}\n        = \"cmd_version\" >> version >> eps;\n\n    auto const cmd_config\n        = x3::rule<class cmd_config, ast::cmd_config>{\"cmd_config\"}\n        = \"cmd_config\" >> any_filename >> eps;\n\n    auto const cmd_defaults\n        = x3::rule<class cmd_defaults, ast::cmd_defaults>{\"cmd_defaults\"}\n        = \"cmd_defaults\" >> any_filename >> eps;\n\n    auto const cmd_detail\n        = x3::rule<class cmd_detail, ast::cmd_detail>{\"cmd_detail\"}\n        = \"cmd_detail\" >> lit(\"-T\") >> attr(true) >> obj_name >> any_filename >> attr(bgeo::ast::Bgeo())\n        | \"cmd_detail\" >> attr(false) >> obj_name >> \"stdin\" >> attr(\"stdin\") >> bgeo_inline\n        | \"cmd_detail\" >> attr(false) >> obj_name >> any_filename >> attr(bgeo::ast::Bgeo());\n\n    auto const cmd_geometry\n        = x3::rule<class cmd_geometry, ast::cmd_geometry>{\"cmd_geometry\"}\n        = \"cmd_geometry\" >> obj_name >> eps;\n\n    auto const cmd_raytrace\n        = x3::rule<class cmd_raytrace, ast::cmd_raytrace>{\"cmd_raytrace\"}\n        = \"cmd_raytrace\" >> eps;\n\n    auto const cmd_quit\n        = x3::rule<class cmd_quit, ast::cmd_quit>{\"cmd_quit\"}\n        = \"cmd_quit\" >> eps;\n\n    auto const cmd_end\n        = x3::rule<class cmd_end, ast::cmd_end>{\"cmd_end\"}\n        = \"cmd_end\" >> eps;\n\n    auto const cmd = setenv | cmd_image | cmd_time | cmd_version | cmd_config | cmd_defaults | cmd_end | cmd_quit | cmd_start | \n        cmd_transform | cmd_detail | cmd_geometry | cmd_property | cmd_raytrace | cmd_declare | cmd_deviceoption;\n    \n    auto const ifthen\n        = x3::rule<class ifthen, ast::ifthen>{\"ifthen\"}\n        = \"if\" >> lsd_expr >> \"then\" >> (+cmd)  >> \"endif\";\n\n    auto const input  = skip(skipper | char_(\"\\n\\t\")) [*(cmd | ifthen) % eol];\n\n}}  // namespace lsd::parser\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_GRAMMAR_LSD_H_",
			"file": "src/lava_lib/readers/grammar_lsd.h",
			"file_size": 25009,
			"file_write_time": 132457257089790980,
			"settings":
			{
				"buffer_size": 25009,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.slang",
			"settings":
			{
				"buffer_size": 2541,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/slang.cpp",
			"settings":
			{
				"buffer_size": 123225,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.cpp",
			"settings":
			{
				"buffer_size": 57140,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/slang.h",
			"settings":
			{
				"buffer_size": 133488,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.h",
			"settings":
			{
				"buffer_size": 13546,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.cpp",
			"settings":
			{
				"buffer_size": 18222,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
			"settings":
			{
				"buffer_size": 5790,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.cpp",
			"settings":
			{
				"buffer_size": 17116,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.h",
			"settings":
			{
				"buffer_size": 16166,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.h",
			"settings":
			{
				"buffer_size": 9621,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
			"settings":
			{
				"buffer_size": 13548,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.cpp",
			"settings":
			{
				"buffer_size": 5611,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.cpp",
			"settings":
			{
				"buffer_size": 18398,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
			"settings":
			{
				"buffer_size": 30042,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Formats.h",
			"settings":
			{
				"buffer_size": 13822,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
			"settings":
			{
				"buffer_size": 6579,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 493,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.cpp",
			"settings":
			{
				"buffer_size": 25155,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
			"settings":
			{
				"buffer_size": 5902,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphExe.h",
			"settings":
			{
				"buffer_size": 4072,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Renderer.h",
			"settings":
			{
				"buffer_size": 7238,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.h",
			"settings":
			{
				"buffer_size": 8364,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.h",
			"settings":
			{
				"buffer_size": 11497,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.cpp",
			"settings":
			{
				"buffer_size": 25381,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer.cpp",
			"settings":
			{
				"buffer_size": 9143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.h",
			"settings":
			{
				"buffer_size": 11637,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphCompiler.h",
			"settings":
			{
				"buffer_size": 3226,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/prelude/slang-cpp-types.h",
			"settings":
			{
				"buffer_size": 37133,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
			"settings":
			{
				"buffer_size": 30608,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/display.h",
			"settings":
			{
				"buffer_size": 1490,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/display.cpp",
			"settings":
			{
				"buffer_size": 6313,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/visitor.cpp",
			"settings":
			{
				"buffer_size": 4357,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/session_lsd.cpp",
			"settings":
			{
				"buffer_size": 2574,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/lava_cmd.cpp",
			"settings":
			{
				"buffer_size": 6519,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/reader_lsd.h",
			"settings":
			{
				"buffer_size": 1459,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/grammar_lsd_expr.h",
			"settings":
			{
				"buffer_size": 7071,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/visitor.h",
			"settings":
			{
				"buffer_size": 3810,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/grammar_lsd.h",
			"settings":
			{
				"buffer_size": 23489,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/bgeo_handler.cpp",
			"settings":
			{
				"buffer_size": 1063,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/bgeo_handler.h",
			"settings":
			{
				"buffer_size": 1622,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/bgeo.h",
			"settings":
			{
				"buffer_size": 514,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/simple_inline_ascii3.lsd",
			"settings":
			{
				"buffer_size": 4685,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/visitor_echo.cpp",
			"settings":
			{
				"buffer_size": 5832,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/session_lsd.h",
			"settings":
			{
				"buffer_size": 1051,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
			"settings":
			{
				"buffer_size": 2672,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4879,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4686,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 939,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/simple_inline_ascii2.lsd",
			"settings":
			{
				"buffer_size": 514,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/lava/test/test_inline_ascii.lsd",
			"settings":
			{
				"buffer_size": 65835,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/LSDgeo.py",
			"settings":
			{
				"buffer_size": 40221,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/LSDframe.py",
			"settings":
			{
				"buffer_size": 64676,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/LSDapi.py",
			"settings":
			{
				"buffer_size": 8282,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/LSD.py",
			"settings":
			{
				"buffer_size": 22594,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/LSDmantra.py",
			"settings":
			{
				"buffer_size": 21971,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/LSDmisc.py",
			"settings":
			{
				"buffer_size": 15617,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/soho/LSDsettings.py",
			"settings":
			{
				"buffer_size": 31540,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/backtracking.h",
			"settings":
			{
				"buffer_size": 2087,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 613,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Info.cpp",
			"settings":
			{
				"buffer_size": 3449,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitives.cpp",
			"settings":
			{
				"buffer_size": 4953,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Run.cpp",
			"settings":
			{
				"buffer_size": 3045,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/StorageTraits.cpp",
			"settings":
			{
				"buffer_size": 433,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 673,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.h",
			"settings":
			{
				"buffer_size": 2322,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.cpp",
			"settings":
			{
				"buffer_size": 8613,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/opt/hfs17.5.460/toolkit/include/UT/UT_IStream.h",
			"settings":
			{
				"buffer_size": 23162,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Detail.cpp",
			"settings":
			{
				"buffer_size": 8408,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Attribute.cpp",
			"settings":
			{
				"buffer_size": 5347,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n *  Copyright 2018 Laika, LLC. Authored by Peter Stuart\n *\n *  Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or\n *  http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or\n *  http://opensource.org/licenses/MIT>, at your option. This file may not be\n *  copied, modified, or distributed except according to those terms.\n */\n\n#include \"compression.h\"\n#include \"ReadError.h\"\n\nnamespace ika {\nnamespace bgeo {\nnamespace parser {\n\nstd::unique_ptr<UT_IStream>\ngetDecompressionStream(const std::string& filename, UT_IStream& stream) {\n    auto extpos = filename.find_last_of('.');\n    if (extpos == std::string::npos) {\n        return nullptr;\n    }\n\n    std::string extension = filename.substr(extpos + 1);\n    if (extension == \"sc\") {\n#if HVERSION_MAJOR >= 15\n        return std::unique_ptr<UT_IStream>(stream.getSCStream());\n#else // HVERSION_MAJOR < 15\n        UT_String message;\n        message.sprintf(\"blosc compressed files are not supported: %s\", filename.c_str());\n        throw parser::ReadError(message);\n#endif // HVERSION_MAJOR > 15\n    }\n    else if (extension == \"gz\") {\n        return std::unique_ptr<UT_IStream>(stream.getGzipStream());\n    }\n\n    return nullptr;\n}\n\n\n} // namespace parser\n} // namespace bgeo\n} // namespace ika\n",
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/compression.cpp",
			"file_size": 1317,
			"file_write_time": 132460489159568724,
			"settings":
			{
				"buffer_size": 1281,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.h",
			"settings":
			{
				"buffer_size": 2876,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/PrimType.cpp",
			"settings":
			{
				"buffer_size": 962,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/Run.cpp",
			"settings":
			{
				"buffer_size": 776,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.h",
			"settings":
			{
				"buffer_size": 2221,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/houdini/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 207,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_utils_lib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 658,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/reader_lsd/global.h",
			"settings":
			{
				"buffer_size": 443,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_cmd/conf/default.py",
			"settings":
			{
				"buffer_size": 2233,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer.h",
			"settings":
			{
				"buffer_size": 4575,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer_scripting.cpp",
			"settings":
			{
				"buffer_size": 4793,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/scene_reader_base.h",
			"settings":
			{
				"buffer_size": 1126,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nPackage Control\n---------------\n\n  Version 3.4.0 Release Notes\n  \n   -----------------------------------------------------------------------\n  | NOTICE: This will be the final release of Package Control supporting  |\n  | - Sublime Text 2                                                      |\n  | - Sublime Text 3 beta builds (<3143)                                  |\n   -----------------------------------------------------------------------\n  | Please see https://sublimetext.com for an updated build               |\n   -----------------------------------------------------------------------\n  \n  New features include:\n  \n   - Support for repositories hosted on https://gitlab.com - by TheSecEng\n  \n   - An alternative TLS implementation based on the oscrypto Python\n     library, which uses native operating system TLS libraries and\n     certificate handling. See the \"downloader_precedence\" setting to enable.\n  \n   - Preferences now use the side-by-side edit mode\n  \n   - Added command palette entries to enable and disable debug mode for\n     troubleshooting and bug reports\n  \n  Bug fixes include:\n  \n   - Fixed operation on macOS 11.0 Big Sur - by TheSecEng\n  \n   - Improved handling of invalid dependencies - by deathaxe\n  \n   - Corrected handling of unsuccessful downloads with wget - by deathaxe\n  \n   - Fixed various issues with the HTTP caching - by deathaxe\n  \n   - Updated the BitBucket provider to use the 2.0 API - deathaxe\n  \n   - Packages installed via symlinks are now unlinked instead of being\n     deleted when being removed or cleaned up - by rchl\n  \n   - Improved install performance of packages with large numbers of\n     files - by BenjaminSchaaf\n  \n   - Fixed handling of auth with the wininet downloader - by NicholasBuse\n  \n   - Fixed handling BitBucket repositories without a nickname\n  \n   - Resolved deadlocks and ignored packages occuring when removing multiple\n     dependencies at once\n  \n   - Package messages are no longer printed with trailing whitespace on lines\n     with no text - by dnicolson\n",
			"settings":
			{
				"buffer_size": 2087,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "src/lava_lib/scene_reader_base.cpp",
			"settings":
			{
				"buffer_size": 622,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer_iface.h",
			"settings":
			{
				"buffer_size": 951,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/lava_lib/renderer_iface.cpp",
			"settings":
			{
				"buffer_size": 1317,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"grammar_lsd.h\"\n#include \"session_lsd.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\nnamespace lava { \n\nnamespace lsd {\n\nVisitor::Visitor(std::unique_ptr<SessionLSD>& pSession): mpSession(std::move(pSession)) {\n\n} \n\nvoid Visitor::operator()(ast::ifthen const& c) const {\n    \n}\n\nvoid Visitor::operator()(ast::setenv const& c) const {\n    std::cout << \"Visitor setenv\\n\";\n    mpSession->cmdSetEnv(c.key, c.value);\n};\n\nvoid Visitor::operator()(ast::cmd_image const& c) const { \n    std::cout << \"LSDVisitor cmd_image\\n\";\n    if (c.display_type != ast::DisplayType::NONE) {\n        mpSession->loadDisplayByType(c.display_type);\n    } else {\n        mpSession->loadDisplayByFileName(c.filename);\n    }\n}\n\nvoid Visitor::operator()(ast::cmd_end const& c) const { \n    std::cout << \"LSDVisitor cmd_end\\n\";\n}\n\nvoid Visitor::operator()(ast::cmd_quit const& c) const { \n    std::cout << \"LSDVisitor cmd_quit\\n\";\n}\n\nvoid Visitor::operator()(ast::cmd_start const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_time const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_detail const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_version const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_config const& c) const {\n    mpSession->cmdConfig(c.filename);\n}\n\nvoid Visitor::operator()(ast::cmd_defaults const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_transform const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_geometry const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_property const& c) const {\n   //ast::Object style = getPropertyStyle(c.style);\n}\n\nvoid Visitor::operator()(ast::cmd_deviceoption const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_declare const& c) const {\n\n}\n\nvoid Visitor::operator()(ast::cmd_raytrace const& c) const {\n    mpSession->cmdRaytrace();\n}\n\n}  // namespace lsd\n\n}  // namespace lava\n",
			"file": "src/lava_lib/readers/lsd_visitor.cpp",
			"file_size": 1871,
			"file_write_time": 132457254940187570,
			"settings":
			{
				"buffer_size": 1871,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"grammar_lsd.h\"\n#include \"session_lsd.h\"\n\nnamespace x3 = boost::spirit::x3;\nnamespace fs = boost::filesystem;\n\n\nnamespace lava { \n\nnamespace lsd {\n\nEchoVisitor::EchoVisitor(std::unique_ptr<SessionLSD>& pSession): Visitor(pSession), _os(std::cout){ \n\n}\n\nEchoVisitor::EchoVisitor(std::unique_ptr<SessionLSD>& pSession, std::ostream& os): Visitor(pSession), _os(os){ \n\n}\n\nvoid EchoVisitor::operator()(int v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(double v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(std::string const& v) const {\n    _os << '\"' << v << '\"';\n}\n\nvoid EchoVisitor::operator()(Int2 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Int3 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Int4 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Vector2 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Vector3 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(Vector4 const& v) const {\n    _os << v;\n}\n\nvoid EchoVisitor::operator()(PropValue const& v) const { \n    boost::apply_visitor(*this, v);\n}\n\nvoid EchoVisitor::operator()(std::vector<PropValue> const& v) const {\n    if (!v.empty()) {\n        _os << \"[ \";\n        for(std::vector<PropValue>::const_iterator it = v.begin(); it != (v.end() - 1); it++) {\n            boost::apply_visitor(*this, *it);\n            _os << \" \";\n        }\n        boost::apply_visitor(*this, v.back());\n        _os << \" ]\";\n    } else {\n        _os << \"!!! EMPTY !!!\";\n    }\n}\n\nvoid EchoVisitor::operator()(ast::ifthen const& c) const {\n    _os << \"\\x1b[32m\" << \"> ifthen: \" << c.expr << \"\\x1b[0m\\n\";\n\n    if( c.expr) {\n        for( auto const& cmd: c.commands) {\n            boost::apply_visitor(*this, cmd);\n        }\n    }\n}\n\nvoid EchoVisitor::operator()(ast::setenv const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> setenv: \" << c.key << \" = \" << c.value << \"\\x1b[0m\\n\"; \n};\n\nvoid EchoVisitor::operator()(ast::cmd_image const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_image: \";\n    if(c.display_type != ast::DisplayType::NONE) {\n        _os << \"type: \";\n        switch(c.display_type) {\n            case ast::DisplayType::IP:\n                _os << \"md\";\n                break;\n            case ast::DisplayType::MD:\n                _os << \"ip\";\n                break;\n            case ast::DisplayType::OPENEXR:\n                _os << \"openexr\";\n                break;\n            case ast::DisplayType::JPEG:\n                _os << \"jpeg\";\n                break;\n            case ast::DisplayType::TIFF:\n                _os << \"tiff\";\n                break;\n            case ast::DisplayType::PNG:\n                _os << \"png\";\n                break;\n            default:\n                _os << \"unknown\";\n                break;\n        }\n        _os << \" \";\n    }\n    if(!c.filename.empty()) {\n        _os << \"filename: \" << c.filename;\n    }\n    _os << \"\\x1b[0m\\n\"; \n}\n\nvoid EchoVisitor::operator()(ast::cmd_end const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_end: \" << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_quit const& c) const { \n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_quit: \" << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_start const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_start: \" << c.type << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_time const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_time: \" << c.time << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_detail const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_detail: name: \" << c.name << \" filename: \" << c.filename << \"\\n\";\n    boost::apply_visitor(bgeo::EchoVisitor(), c.bgeo);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_version const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_version: \" << c.version << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_defaults const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_defaults: filename: \" << c.filename << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_config const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_config: filename: \" << c.filename << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_transform const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_transform: \" << c.m << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_geometry const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_geometry: geometry_object: \" << c.geometry_object << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_property const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_property: style: \" << c.style << \" token: \" << c.token << \" values: \";\n    EchoVisitor::operator()(c.values);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_deviceoption const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_deviceoption: type: \" << c.type << \" name: \" << c.name << \" values: \";\n    EchoVisitor::operator()(c.values);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_declare const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_declare: style: \" << c.style << \" token: \" << c.token << \" type: \" << c.type << \" values: \";\n    EchoVisitor::operator()(c.values);\n    _os << \"\\x1b[0m\\n\";\n}\n\nvoid EchoVisitor::operator()(ast::cmd_raytrace const& c) const {\n    Visitor::operator()(c);\n    _os << \"\\x1b[32m\" << \"> cmd_raytrace: \" << \"\\x1b[0m\\n\";\n}\n\n}  // namespace lsd\n\n}  // namespace lava\n",
			"file": "src/lava_lib/readers/lsd_echo_visitor.cpp",
			"file_size": 5756,
			"file_write_time": 132457254875628693,
			"settings":
			{
				"buffer_size": 5756,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_SESSION_LSD_H_\n#define SRC_LAVA_LIB_SESSION_LSD_H_\n\n#include <memory>\n\n#include \"grammar_lsd.h\"\n#include \"../renderer_iface.h\"\n\nnamespace lava {\n\nclass SessionLSD {\n\n public:\n    SessionLSD(std::unique_ptr<RendererIface> pRendererIface);\n    ~SessionLSD();\n\n public:\n \tbool loadDisplayByType(const lsd::ast::DisplayType& display_type);\n \tbool loadDisplayByFileName(const std::string& file_name);\n\n \tvoid cmdSetEnv(const std::string& key, const std::string& value);\n \tvoid cmdRaytrace();\n    void cmdConfig(const std::string& file_name);\n\n private:\n \tbool initRenderData();\n\n private:\n \tstd::unique_ptr<RendererIface> mpRendererIface;\n \tstd::vector<std::string> mGraphConfigs;\n\n};\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_SESSION_LSD_H_",
			"file": "src/lava_lib/readers/session_lsd.h",
			"file_size": 762,
			"file_write_time": 132457252424072702,
			"settings":
			{
				"buffer_size": 762,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"session_lsd.h\"\n\n#include \"lava_utils_lib/ut_fsys.h\"\n#include \"lava_utils_lib/logging.h\"\n\nnamespace lava {\n\nnamespace lsd {\n\nstd::string resolveDisplayDriverByFileName(const std::string& file_name) {\n\tstd::string ext = ut::fsys::getFileExtension(file_name);\n\n    if( ext == \".exr\" ) return std::move(\"openexr\");\n    if( ext == \".jpg\" ) return std::move(\"jpeg\");\n    if( ext == \".jpeg\" ) return std::move(\"jpeg\");\n    if( ext == \".png\" ) return std::move(\"png\");\n    if( ext == \".tif\" ) return std::move(\"tiff\");\n    if( ext == \".tiff\" ) return std::move(\"tiff\");\n    return std::move(\"openexr\");\n}\n\n}  // namespace lsd\n\nSessionLSD::SessionLSD(std::unique_ptr<RendererIface> pRendererIface) { \n\tmpRendererIface = std::move(pRendererIface);\n}\n\nSessionLSD::~SessionLSD() { }\n\n\nbool SessionLSD::loadDisplayByType(const lsd::ast::DisplayType& display_type) {\n\tstd::string display_name;\n\n\tswitch(display_type) {\n\t\tcase lsd::ast::DisplayType::IP:\n\t\tcase lsd::ast::DisplayType::MD:\n\t\t\tdisplay_name = \"houdini\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::OPENEXR:\n\t\t\tdisplay_name = \"openexr\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::JPEG:\n\t\t\tdisplay_name = \"jpeg\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::TIFF:\n\t\t\tdisplay_name = \"tiff\";\n\t\t\tbreak;\n\t\tcase lsd::ast::DisplayType::PNG:\n\t\tdefault:\n\t\t\tdisplay_name = \"png\";\n\t\t\tbreak;\n\t}\n\n\treturn mpRendererIface->loadDisplay(display_name);\n}\n\nbool SessionLSD::loadDisplayByFileName(const std::string& file_name) {\n\treturn mpRendererIface->loadDisplay(lsd::resolveDisplayDriverByFileName(file_name));\n}\n\nvoid SessionLSD::cmdSetEnv(const std::string& key, const std::string& value) {\n\tmpRendererIface->setEnvVariable(key, value);\n}\n\nvoid SessionLSD::cmdConfig(const std::string& file_name) {\n\t// actual render graph configs loading postponed unitl renderer is initialized\n\tmGraphConfigs.push_back(file_name);\n}\n\n// initialize renderer and push render data\nbool SessionLSD::initRenderData() {\n\tLLOG_DBG << \"initRenderData\";\n\tif(!mpRendererIface->initRenderer()) return false;\n\n\tfor(auto const& graph_conf_file: mGraphConfigs) {\n\t\tif(!mpRendererIface->loadScript(graph_conf_file)) return false;\n\t}\n\n\treturn true;\n}\n\nvoid SessionLSD::cmdRaytrace() {\n\tLLOG_DBG << \"cmdRaytrace\";\n\tinitRenderData(); // push postponed data\n\tmpRendererIface->renderFrame();\n}\n\n}  // namespace lava",
			"file": "src/lava_lib/readers/session_lsd.cpp",
			"file_size": 2312,
			"file_write_time": 132457252701107573,
			"settings":
			{
				"buffer_size": 2312,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include <vector>\n#include <fstream>\n#include <iterator>\n#include <regex>\n\n#include <boost/spirit/include/support_istream_iterator.hpp>\n\n#include \"reader_lsd.h\"\n#include \"grammar_lsd.h\"\n\n#include \"lava_utils_lib/logging.h\"\n\nnamespace x3 = boost::spirit::x3;\n\nnamespace lava {\n\n\nReaderLSD::ReaderLSD(): ReaderBase(), mInitialized(false) { }\n\nReaderLSD::~ReaderLSD() { }\n\nvoid ReaderLSD::init(std::unique_ptr<RendererIface> pRendererInterface, bool echo) {\n    auto pSession = std::make_unique<SessionLSD>(std::move(pRendererInterface));\n\n    if (!echo) {\n        // standard LSD visitor\n        mpVisitor = std::make_unique<lsd::Visitor>(pSession);\n    } else {\n        // LSD visitor with parsed console echo (for debug purposes)\n        mpVisitor = std::make_unique<lsd::EchoVisitor>(pSession);\n    }\n\n    mInitialized = true;\n\n    LLOG_DBG << \"ReaderLSD::init done\";\n}\n\nbool ReaderLSD::isInitialized() {\n    return mInitialized;\n}\n\nconst char *ReaderLSD::formatName() const{\n    return \"Lava LSD\";\n}\n\nbool ReaderLSD::checkExtension(const char *name) {\n    if (strcmp(name, \".lsd\")) return true;\n    return false;\n}\n\nvoid ReaderLSD::getFileExtensions(std::vector<std::string> &extensions) const{\n    extensions.insert(extensions.end(), _lsd_extensions.begin(), _lsd_extensions.end());\n}\n\nbool ReaderLSD::checkMagicNumber(unsigned magic) {\n  return true;\n}\n\nbool ReaderLSD::parseStream(std::istream& in) {\n    in.unsetf(std::ios_base::skipws);\n    boost::spirit::istream_iterator iter(in), end;\n\n    std::vector<lsd::ast::Command> commands; // ast tree\n    bool result = x3::parse(iter, end, lsd::parser::input, commands); \n\n    if (!result) {\n        LLOG_ERR << \"Parsing LSD scene failed !!!\" << std::endl;\n        return false;\n    }\n\n    if (iter != end) {\n        //unparsed = std::string(iter, end);\n        LLOG_DBG << \"Remaining unparsed: \" << std::string(iter, end);\n        return true;\n    }\n\n    for (auto& cmd : commands) {\n        boost::apply_visitor(*mpVisitor, cmd);\n    }\n\n    return true;\n}\n\nbool ReaderLSD::parseLine(const std::string& line, std::string& unparsed) {\n    unparsed = \"\";\n    auto iter = line.begin(), end = line.end();\n    \n    std::vector<lsd::ast::Command> commands; // ast tree\n    bool result = x3::parse(iter, end, lsd::parser::input, commands);\n\n    if (!result) {\n        LLOG_ERR << \"Parsing LSD scene failed !!!\" << std::endl;\n        return false;\n    }\n\n    if (iter != end) {\n        unparsed = std::string(iter, end);\n        //LOG_DBG << \"Parsed: \" << (100.0 * std::distance(line.begin(), iter) / line.size()) << \"%\";\n        //LOG_DBG << \"Remaining unparsed: \" << unparsed << \"\\n\";\n        return true;\n    }\n\n    for (auto& cmd : commands) {\n        boost::apply_visitor(*mpVisitor, cmd);\n    }\n\n    return true;\n}\n\n// factory methods\nstd::vector<std::string> *ReaderLSD::myExtensions() {\n    return &_lsd_extensions;\n}\n\nReaderBase::SharedPtr ReaderLSD::myConstructor() {\n    return ReaderBase::SharedPtr(new ReaderLSD());\n}\n\n}  // namespace lava",
			"file": "src/lava_lib/readers/reader_lsd.cpp",
			"file_size": 2997,
			"file_write_time": 132457255870731555,
			"settings":
			{
				"buffer_size": 2997,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#ifndef SRC_LAVA_LIB_LOADER_LSD_H_\n#define SRC_LAVA_LIB_LOADER_LSD_H_\n\n//#include <boost/lambda/bind.hpp>\n//#include <boost/spirit/include/qi.hpp>\n//#include <boost/spirit/include/classic.hpp>\n\n#include <memory>\n\n#include \"../scene_reader_base.h\"\n#include \"session_lsd.h\"\n#include \"grammar_lsd.h\"\n\n\nnamespace lava {\n\nstatic std::vector<std::string> _lsd_extensions = {\".lsd\",\".lsd.gz\",\".lsd.zip\"};\n\ntypedef std::string::const_iterator It;\n\nclass ReaderLSD: public ReaderBase {\n public:\n \tReaderLSD();\n \t~ReaderLSD() override;\n\n    virtual void    init(std::unique_ptr<RendererIface> pRendererInterface, bool echo) override;\n\n    const char*     formatName() const override;\n    bool            checkExtension(const char *name) override;\n    void            getFileExtensions(std::vector<std::string> &extensions) const override;\n\n    // Method to check if the given magic number matches the magic number. Return true on a match.\n    bool            checkMagicNumber(unsigned magic) override;\n\n private:\n    virtual bool    isInitialized() override;\n \tvirtual bool    parseStream(std::istream& in) override;\n    virtual bool    parseLine(const std::string& line, std::string& unparsed) override;\n\n private:\n    std::unique_ptr<lsd::Visitor>   mpVisitor;\n    bool mInitialized;\n\n public:\n    // factory methods\n    static ReaderBase::SharedPtr        myConstructor();\n    static std::vector<std::string>*    myExtensions();\n};\n\n}  // namespace lava\n\n#endif  // SRC_LAVA_LIB_LOADER_LSD_H_\n",
			"file": "src/lava_lib/readers/reader_lsd.h",
			"file_size": 1486,
			"file_write_time": 132457255612895963,
			"settings":
			{
				"buffer_size": 1486,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/max/dev/Falcor",
		"/home/max/dev/Falcor/cmake",
		"/home/max/dev/Falcor/contrib",
		"/home/max/dev/Falcor/contrib/houdini",
		"/home/max/dev/Falcor/contrib/houdini/config",
		"/home/max/dev/Falcor/contrib/houdini/otls",
		"/home/max/dev/Falcor/contrib/linux",
		"/home/max/dev/Falcor/contrib/linux/etc",
		"/home/max/dev/Falcor/src",
		"/home/max/dev/Falcor/src/Falcor",
		"/home/max/dev/Falcor/src/Falcor/Core",
		"/home/max/dev/Falcor/src/Falcor/Core/API",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
		"/home/max/dev/Falcor/src/Falcor/Core/Program",
		"/home/max/dev/Falcor/src/Falcor/Core/State",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/BasePasses",
		"/home/max/dev/Falcor/src/Falcor/Utils",
		"/home/max/dev/Falcor/src/Falcor/Utils/Debug",
		"/home/max/dev/Falcor/src/Falcor/Utils/Scripting",
		"/home/max/dev/Falcor/src/Falcor/Utils/UI",
		"/home/max/dev/Falcor/src/houdini",
		"/home/max/dev/Falcor/src/houdini/ropLava",
		"/home/max/dev/Falcor/src/houdini/soho",
		"/home/max/dev/Falcor/src/lava_cmd",
		"/home/max/dev/Falcor/src/lava_cmd/bin",
		"/home/max/dev/Falcor/src/lava_cmd/conf",
		"/home/max/dev/Falcor/src/lava_lib",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo",
		"/home/max/dev/Falcor/src/lava_lib/reader_bgeo/bgeo/parser",
		"/home/max/dev/Falcor/src/lava_lib/reader_lsd",
		"/home/max/dev/Falcor/src/lava_utils_lib"
	],
	"file_history":
	[
		"/opt/hfs17.5.460/toolkit/include/UT/UT_IStreamBuf.h",
		"/home/max/dev/Falcor/Tests/models/Eagle_custom_Normals.obj",
		"/home/max/dev/Falcor/src/USD/hgiVk/pipeline.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp",
		"/home/max/dev/Falcor/third_party/antlr4/runtime/Cpp/runtime/src/atn/LexerATNSimulator.cpp",
		"/home/max/dev/Falcor/third_party/antlr4/runtime/Cpp/runtime/src/UnbufferedTokenStream.cpp",
		"/home/max/dev/RadeonProRenderUSD/deps/RPR/RadeonProRender/inc/RadeonProRender_v2.h",
		"/home/max/dev/Falcor/src/lava/lava.h",
		"/home/max/dev/Falcor/src/lava/types.h",
		"/home/max/dev/RadeonProRenderUSD/deps/RPR/RadeonProRender/inc/RadeonProRender.cs",
		"/home/max/dev/RadeonProRenderUSD/pxr/imaging/plugin/hdRpr/python/generateRenderSettingFiles.py",
		"/home/max/dev/Falcor/third_party/USD/cmake/macros/Private.cmake",
		"/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/D3D12NvApiExDesc.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VkResource.cpp",
		"/home/max/dev/Falcor/src/Mogwai/Data/ForwardRenderer.py",
		"/home/max/dev/Falcor/src/Mogwai/Data/BSDFViewer.py",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/Include/BaseTypes.h",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Raster.slang",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/ShadingData.slang",
		"/home/max/dev/Falcor/src/RenderPasses/Antialiasing/TAA/TAA.ps.slang",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.cpp",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Algorithm/ParallelReduction.ps.slang",
		"/home/max/dev/Falcor/src/RenderPasses/BSDFViewer/BSDFViewerParams.slang",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/MachineIndependent/ParseHelper.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.cpp",
		"/home/max/dev/Falcor/third_party/slang/source/slang/slang-ir.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/SpvBuilder.h",
		"/home/max/dev/Falcor/third_party/slang/source/slang-glslang/slang-glslang.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/spirv-tools/source/spirv_target_env.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/spirv-tools/CHANGES",
		"/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/SceneTypes.slang",
		"/home/max/dev/Falcor/third_party/slang/source/slang/slang-type-layout.cpp",
		"/home/max/dev/Falcor/third_party/slang/source/slang/slang-type-layout.h",
		"/home/max/dev/Falcor/third_party/slang/slang.h",
		"/home/max/dev/Falcor/third_party/slang/external/glm/test/core/core_type_aligned.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Formats.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glm/glm/gtx/compatibility.hpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFormats.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/glslang/Include/intermediate.h",
		"/home/max/dev/Falcor/third_party/slang/docs/language-reference/04-types.md",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/CMakeLists.txt",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp",
		"/home/max/dev/Falcor/third_party/slang/external/glslang/Test/100.frag",
		"/home/max/dev/Falcor/third_party/slang/external/glext.h",
		"/home/max/dev/Falcor/third_party/slang/docs/wave-intrinsics.md",
		"/home/max/dev/Falcor/src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cs.slang",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/ParamBlockDefinition.slang",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVersion.cpp",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphIR.cpp",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderGraphIR.h",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.h",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/PythonImporter.h",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Sampling/SampleGenerator.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/SampleGenerators/StratifiedSamplePattern.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/SampleGenerators/CPUSampleGenerator.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/GraphicsStateObject.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/GraphicsStateObject.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/ComputeStateObject.h",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EnvProbe.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/ComputeContext.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/GpuTimer.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/LowLevelContextData.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/Timing/Profiler.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Platform/Windows/Windows.cpp",
		"/home/max/dev/Falcor/third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
		"/home/max/dev/Falcor/third_party/slang/tools/gfx/vulkan/render-vk.cpp",
		"/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgramVarsHelper.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/D3D12/FalcorD3D12.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Platform/OS.cpp",
		"/home/max/dev/Falcor/src/RenderPasses/SkyBox/SkyBox.slang",
		"/home/max/dev/Falcor/src/RenderPasses/CSM/VisibilityPass.ps.slang",
		"/home/max/dev/Falcor/src/RenderPasses/ToneMapper/ToneMapping.ps.slang",
		"/home/max/dev/Falcor/src/RenderPasses/ToneMapper/Luminance.ps.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/PythonImporter.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/SceneImporter.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers/SceneImporter.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/Program.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/GraphicsProgram.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/ComputeProgram.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/GraphicsProgram.cpp",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera/Camera.slang",
		"/home/max/dev/Falcor/src/Falcor/Utils/ArgList.h",
		"/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp",
		"/home/max/dev/Falcor/src/Mogwai/stdafx.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Renderer.h",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassLibrary.cpp",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassLibrary.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/UI/UserInput.h",
		"/home/max/dev/Falcor/src/Externals/GLM/glm/gtx/compatibility.hpp",
		"/home/max/dev/Falcor/src/Falcor/Core/Sample.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/UI/Gui.h",
		"/home/max/dev/Falcor/src/Falcor/Core/Window.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/Window.h",
		"/home/max/dev/Falcor/src/Falcor/Utils/ArgList.cpp",
		"/home/max/dev/Falcor/src/Falcor/Utils/AlignedAllocator.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Resource.h",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/DebugPasses/InvalidPixelDetectionTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/ShadingUtils/ShadingUtilsTests.cpp",
		"/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.h",
		"/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/Program/ComputeProgram.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cs.slang",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Resource.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/RenderContext.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/RasterizerState.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/RasterizerState.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKRasterizerState.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/QueryHeap.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Formats.h",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Buffer.h",
		"/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EnvProbe.h",
		"/home/max/dev/Falcor/src/Mogwai/CMakeLists.txt",
		"/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/CaptureTrigger.cpp"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/third_party/antlr4/runtime/Cpp/runtime/src",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/contrib",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/opt/USD",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/pxr/imaging/plugin/hdLava",
			"/home/max/dev/RadeonProRenderUSD",
			"/home/max/dev/Falcor",
			"/home/max/dev/RadeonProRenderUSD",
			"/home/max/dev/Falcor",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src,/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor,/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang/source",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/Build",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/",
			"/home/max/dev/Falcor/src/Mogwai",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			".close(",
			"UT_IFStream",
			"toStdString",
			"UT_String",
			"getTemplatePrimitive",
			"());",
			"soho_compression",
			"vm_",
			"vm_inline",
			"lv_inline",
			"ComponentType",
			"init(",
			"dispatchIndirect",
			"prepareForDispatch",
			"getCSO",
			"getKernels",
			"preprocessAndCreateProgramKernels",
			"getKernels",
			"preprocessAndCreateProgramKernels",
			"link",
			"terminate called recursively",
			".ctor",
			"ctor",
			"registerScriptBindings",
			"kRenderPassRefreshFlags",
			"vkCreateImage",
			"mpTargetFBO",
			"GraphicsProgram::createFromFile",
			"GuiImpl::create",
			"GuiImpl",
			"Failed to link program",
			"findFileInShaderDirectories",
			"Shaders",
			"build",
			"Failed to link program",
			"RenderGraph::create",
			"mpTargetFBO",
			"gpFramework",
			"Can't construct RenderGraph",
			"tcur",
			"Operand",
			" ]",
			"build",
			"addParseListener",
			"getText",
			"context",
			"ctx",
			"IFD",
			"ExternalProject_Add_Step",
			"ray_",
			"lv_samples",
			"lv_samplesx",
			"vm_samples",
			"samples",
			"lv_samples",
			"vm_",
			"vm_picture",
			"vm_device",
			"vm_display",
			"ri_",
			"ri_device",
			"Unable to find:",
			"LSDapilavatext",
			"RIB",
			"IFD",
			"ray_",
			"IFD",
			"ray_",
			"IFD",
			"ray_",
			"IFD",
			"ray_",
			"IFD",
			"ray_",
			"outputCamera",
			"ray_",
			"ray_geometry",
			"ROP_Xenon",
			"Xenon",
			"fasta",
			"Render",
			"_Execute",
			"HdLavaRenderBuffer",
			"PYBIND11_EMBEDDED_MODULE",
			"pybind11::module",
			"pybind11",
			"initialize_interpreter",
			"Can't add new modules after the interpreter has been initialized",
			"Scripting::start",
			"Can't add new modules after the interpreter has been initialized",
			"GetNumActivePixels",
			"m_delegate",
			"m_rprContext",
			"CONTEXT",
			"RPR",
			"RPR_CONTEXT_LAST_ERROR_MESSAGE",
			"RPR",
			"RPR_SUCCESS",
			"RPR",
			"rpr_aov",
			"Aov",
			"class Aov",
			"enum Aov",
			"Rpr",
			"RPR",
			"Rpr",
			"RPR",
			"HdRpr",
			"LavaRenderSettingsTokens",
			"HdRpr",
			"HDRPR",
			"HdRpr",
			"GetRenderSettingDescriptors",
			"config.h",
			"HdOSPRay",
			"HdRpr",
			"HDRPR",
			"HdRpr",
			"HDRPR",
			"HdRpr",
			"copyHeaderForBuild",
			"HDRPR",
			"HdRpr",
			"HDRPR",
			"HdRpr",
			"HDRPR",
			"HdRpr",
			"OSPRay"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"lv_",
			"ExprValue",
			"ctx",
			"context",
			"LSD",
			"cmd_",
			"lv_",
			"li_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"LSD",
			"cmd_",
			"ROP_Lava",
			"Lava",
			"lava",
			"mRenderer",
			"RENDERER",
			"LAVA",
			"Lava",
			"LAVA",
			"Lava",
			"LAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"HDLAVA",
			"HdLava",
			"Lava",
			"mSceneVersion",
			"mModelVersion",
			"mSceneVersion",
			"mRenderer",
			"Falcor::LavaRenderer",
			"Lava",
			"LAVA",
			"Lava",
			"LAVA",
			"mSceneVersion",
			"mSettingDescriptors",
			"mLastCommittedModelVersion",
			"mRenderParam",
			"LAVA",
			"Lava",
			"LAVA",
			"Lava",
			"mpDevice",
			"kPassTempLibSuffix",
			"PROJECT_DIR",
			"spData"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 74,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Core/Program/GraphicsProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2616,
						"regions":
						{
						},
						"selection":
						[
							[
								2182,
								2182
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4013,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										236,
										247
									],
									[
										362,
										373
									],
									[
										507,
										518
									],
									[
										717,
										728
									],
									[
										864,
										875
									],
									[
										1170,
										1181
									],
									[
										1429,
										1440
									],
									[
										1657,
										1668
									],
									[
										1921,
										1932
									],
									[
										2089,
										2100
									],
									[
										2474,
										2481
									],
									[
										2630,
										2637
									],
									[
										2802,
										2809
									],
									[
										2958,
										2965
									],
									[
										3179,
										3186
									],
									[
										3438,
										3445
									],
									[
										3679,
										3686
									],
									[
										3931,
										3938
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								2219,
								2219
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1292.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/lava_lib/reader_bgeo/bgeo/PackedFragment.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1063,
						"regions":
						{
						},
						"selection":
						[
							[
								828,
								828
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 147.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/FileVersion.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1867,
						"regions":
						{
						},
						"selection":
						[
							[
								1363,
								1363
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedDisk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3111,
						"regions":
						{
						},
						"selection":
						[
							[
								2934,
								2934
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1796.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/util.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3965,
						"regions":
						{
						},
						"selection":
						[
							[
								2242,
								2242
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/lava_lib/reader_bgeo/bgeo/BgeoHeader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3185,
						"regions":
						{
						},
						"selection":
						[
							[
								389,
								389
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 170.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7102,
						"regions":
						{
						},
						"selection":
						[
							[
								2193,
								2193
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1082.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolygonRun.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5899,
						"regions":
						{
						},
						"selection":
						[
							[
								2342,
								2342
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1269.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PolySoup.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5351,
						"regions":
						{
						},
						"selection":
						[
							[
								2285,
								2285
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1252.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7411,
						"regions":
						{
						},
						"selection":
						[
							[
								2128,
								2128
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1065.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4150,
						"regions":
						{
						},
						"selection":
						[
							[
								2809,
								2809
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 278.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/Falcor/Core/API/ComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3000,
						"regions":
						{
						},
						"selection":
						[
							[
								1967,
								1967
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3050,
						"regions":
						{
						},
						"selection":
						[
							[
								2269,
								2269
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8267,
						"regions":
						{
						},
						"selection":
						[
							[
								3268,
								3268
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 737.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/Falcor/Raytracing/ShaderTable.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5792,
						"regions":
						{
						},
						"selection":
						[
							[
								2893,
								2893
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 861.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/Falcor/Core/State/ComputeState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3442,
						"regions":
						{
						},
						"selection":
						[
							[
								2035,
								2035
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 96.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19126,
						"regions":
						{
						},
						"selection":
						[
							[
								2268,
								2268
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/Falcor/Core/Program/Program.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12423,
						"regions":
						{
						},
						"selection":
						[
							[
								12079,
								12079
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4057.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "src/Falcor/Core/API/Vulkan/VKShader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2775,
						"regions":
						{
						},
						"selection":
						[
							[
								1987,
								1987
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 79.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "src/Falcor/Core/Program/ProgramVars.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14498,
						"regions":
						{
						},
						"selection":
						[
							[
								13879,
								13879
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4550.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27538,
						"regions":
						{
						},
						"selection":
						[
							[
								3093,
								3093
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 606.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/Falcor/Core/State/GraphicsState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8496,
						"regions":
						{
						},
						"selection":
						[
							[
								2480,
								2480
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 470.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2479,
						"regions":
						{
						},
						"selection":
						[
							[
								2215,
								2215
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 160.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7857,
						"regions":
						{
						},
						"selection":
						[
							[
								1889,
								1889
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 115,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "src/Falcor/Core/Platform/OS.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8922,
						"regions":
						{
						},
						"selection":
						[
							[
								1976,
								1976
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 878.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "src/Falcor/Core/Platform/OS.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15995,
						"regions":
						{
						},
						"selection":
						[
							[
								9532,
								9532
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3534.0,
						"zoom_level": 1.0
					},
					"stack_index": 121,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15074,
						"regions":
						{
						},
						"selection":
						[
							[
								7478,
								7478
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3162.0,
						"zoom_level": 1.0
					},
					"stack_index": 120,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8187,
						"regions":
						{
						},
						"selection":
						[
							[
								5216,
								5216
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1813.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "src/Falcor/Core/Program/Program.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35294,
						"regions":
						{
						},
						"selection":
						[
							[
								15565,
								15565
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6171.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "src/lava_lib/readers/grammar_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25009,
						"regions":
						{
						},
						"selection":
						[
							[
								7052,
								7052
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4182.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "src/Falcor/Utils/UI/Gui.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2541,
						"regions":
						{
						},
						"selection":
						[
							[
								1773,
								1773
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "third_party/slang/source/slang/slang.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 123225,
						"regions":
						{
						},
						"selection":
						[
							[
								62930,
								62930
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 32855.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "src/Falcor/Utils/UI/Gui.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 57140,
						"regions":
						{
						},
						"selection":
						[
							[
								41072,
								41072
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12862.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "third_party/slang/slang.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 133488,
						"regions":
						{
						},
						"selection":
						[
							[
								22600,
								22600
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11707.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "src/Falcor/Core/API/FBO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13546,
						"regions":
						{
						},
						"selection":
						[
							[
								10599,
								10599
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3084.0,
						"zoom_level": 1.0
					},
					"stack_index": 119,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "src/Falcor/Core/API/FBO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18222,
						"regions":
						{
						},
						"selection":
						[
							[
								9617,
								9617
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3381.0,
						"zoom_level": 1.0
					},
					"stack_index": 112,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5790,
						"regions":
						{
						},
						"selection":
						[
							[
								4966,
								4966
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 789.0,
						"zoom_level": 1.0
					},
					"stack_index": 111,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "src/Falcor/Core/API/Texture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17116,
						"regions":
						{
						},
						"selection":
						[
							[
								12761,
								12761
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3402.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "src/Falcor/Core/API/Texture.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16166,
						"regions":
						{
						},
						"selection":
						[
							[
								3876,
								3876
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1089.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "src/Falcor/Core/API/ResourceViews.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9621,
						"regions":
						{
						},
						"selection":
						[
							[
								8152,
								8152
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2271.0,
						"zoom_level": 1.0
					},
					"stack_index": 117,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13548,
						"regions":
						{
						},
						"selection":
						[
							[
								6809,
								6809
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2227.0,
						"zoom_level": 1.0
					},
					"stack_index": 116,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "src/Falcor/Core/API/ResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5611,
						"regions":
						{
						},
						"selection":
						[
							[
								2490,
								2490
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 333.0,
						"zoom_level": 1.0
					},
					"stack_index": 118,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "src/Falcor/Core/API/Device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18398,
						"regions":
						{
						},
						"selection":
						[
							[
								7714,
								7714
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6130.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30042,
						"regions":
						{
						},
						"selection":
						[
							[
								5538,
								5538
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1902.0,
						"zoom_level": 1.0
					},
					"stack_index": 113,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "src/Falcor/Core/API/Formats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13822,
						"regions":
						{
						},
						"selection":
						[
							[
								3997,
								3997
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1031.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6579,
						"regions":
						{
						},
						"selection":
						[
							[
								2495,
								2495
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 58.0,
						"zoom_level": 1.0
					},
					"stack_index": 114,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "src/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 493,
						"regions":
						{
						},
						"selection":
						[
							[
								448,
								448
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "src/Mogwai/Mogwai.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25155,
						"regions":
						{
						},
						"selection":
						[
							[
								14040,
								14040
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5600.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5902,
						"regions":
						{
						},
						"selection":
						[
							[
								5453,
								5453
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 194.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "src/Falcor/RenderGraph/RenderGraphExe.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4072,
						"regions":
						{
						},
						"selection":
						[
							[
								1991,
								1991
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 143.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "src/Falcor/Core/Renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7238,
						"regions":
						{
						},
						"selection":
						[
							[
								7168,
								7168
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2642.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "src/Mogwai/Mogwai.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8364,
						"regions":
						{
						},
						"selection":
						[
							[
								1851,
								1851
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2550.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "src/Falcor/Core/API/Device.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11497,
						"regions":
						{
						},
						"selection":
						[
							[
								7350,
								7350
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2259.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "src/Falcor/Core/Sample.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25381,
						"regions":
						{
						},
						"selection":
						[
							[
								7264,
								7264
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5916.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "src/lava_lib/renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9143,
						"regions":
						{
						},
						"selection":
						[
							[
								5906,
								5906
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3264.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "src/Falcor/RenderGraph/RenderGraph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11637,
						"regions":
						{
						},
						"selection":
						[
							[
								7521,
								7521
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1938.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "src/Falcor/RenderGraph/RenderGraphCompiler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3226,
						"regions":
						{
						},
						"selection":
						[
							[
								1895,
								1895
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 96.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "third_party/slang/prelude/slang-cpp-types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37133,
						"regions":
						{
						},
						"selection":
						[
							[
								2142,
								2142
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1259.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30608,
						"regions":
						{
						},
						"selection":
						[
							[
								20578,
								20578
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8408.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "src/lava_lib/display.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1490,
						"regions":
						{
						},
						"selection":
						[
							[
								420,
								420
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "src/lava_lib/display.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6313,
						"regions":
						{
						},
						"selection":
						[
							[
								2047,
								2047
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "src/lava_lib/reader_lsd/visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4357,
						"regions":
						{
						},
						"selection":
						[
							[
								2724,
								2724
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "src/lava_lib/reader_lsd/session_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2574,
						"regions":
						{
						},
						"selection":
						[
							[
								1422,
								1422
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "src/lava_cmd/lava_cmd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6519,
						"regions":
						{
						},
						"selection":
						[
							[
								4705,
								4705
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1377.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "src/lava_lib/reader_lsd/reader_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1459,
						"regions":
						{
						},
						"selection":
						[
							[
								1129,
								1129
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "src/lava_lib/reader_lsd/grammar_lsd_expr.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7071,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "src/lava_lib/reader_lsd/visitor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3810,
						"regions":
						{
						},
						"selection":
						[
							[
								1678,
								1678
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "src/lava_lib/reader_lsd/grammar_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23489,
						"regions":
						{
						},
						"selection":
						[
							[
								8746,
								8746
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4845.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "src/lava_lib/reader_lsd/bgeo_handler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1063,
						"regions":
						{
						},
						"selection":
						[
							[
								22,
								22
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "src/lava_lib/reader_lsd/bgeo_handler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1622,
						"regions":
						{
						},
						"selection":
						[
							[
								660,
								660
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "src/lava_lib/reader_lsd/bgeo.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 514,
						"regions":
						{
						},
						"selection":
						[
							[
								422,
								422
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "/opt/lava/test/simple_inline_ascii3.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4685,
						"regions":
						{
						},
						"selection":
						[
							[
								872,
								872
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1683.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "src/lava_lib/reader_lsd/visitor_echo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5832,
						"regions":
						{
						},
						"selection":
						[
							[
								3299,
								3299
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2142.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "src/lava_lib/reader_lsd/session_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1051,
						"regions":
						{
						},
						"selection":
						[
							[
								513,
								513
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "src/lava_lib/reader_lsd/reader_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2672,
						"regions":
						{
						},
						"selection":
						[
							[
								2305,
								2305
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 969.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 76,
					"file": "src/Falcor/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4879,
						"regions":
						{
						},
						"selection":
						[
							[
								4870,
								4870
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1354.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 77,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4686,
						"regions":
						{
						},
						"selection":
						[
							[
								3978,
								3978
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 78,
					"file": "src/lava_lib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 939,
						"regions":
						{
						},
						"selection":
						[
							[
								673,
								673
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 79,
					"file": "/opt/lava/test/simple_inline_ascii2.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 514,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 80,
					"file": "/opt/lava/test/test_inline_ascii.lsd",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65835,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 81,
					"file": "src/houdini/soho/LSDgeo.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40221,
						"regions":
						{
						},
						"selection":
						[
							[
								24897,
								24897
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10648.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 82,
					"file": "src/houdini/soho/LSDframe.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64676,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 83,
					"file": "src/houdini/soho/LSDapi.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8282,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 84,
					"file": "src/houdini/soho/LSD.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22594,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 85,
					"file": "src/houdini/soho/LSDmantra.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21971,
						"regions":
						{
						},
						"selection":
						[
							[
								731,
								731
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 86,
					"file": "src/houdini/soho/LSDmisc.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15617,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 87,
					"file": "src/houdini/soho/LSDsettings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31540,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 88,
					"file": "src/lava_lib/reader_lsd/backtracking.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2087,
						"regions":
						{
						},
						"selection":
						[
							[
								1711,
								1711
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 89,
					"file": "src/lava_lib/reader_bgeo/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 613,
						"regions":
						{
						},
						"selection":
						[
							[
								381,
								381
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 90,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Info.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3449,
						"regions":
						{
						},
						"selection":
						[
							[
								365,
								365
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 91,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Primitives.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4953,
						"regions":
						{
						},
						"selection":
						[
							[
								409,
								409
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 92,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Run.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3045,
						"regions":
						{
						},
						"selection":
						[
							[
								402,
								402
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 93,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/StorageTraits.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 433,
						"regions":
						{
						},
						"selection":
						[
							[
								433,
								433
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 94,
					"file": "src/lava_lib/reader_lsd/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 673,
						"regions":
						{
						},
						"selection":
						[
							[
								32,
								32
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 95,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/PackedGeometry.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2322,
						"regions":
						{
						},
						"selection":
						[
							[
								479,
								479
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 96,
					"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8613,
						"regions":
						{
						},
						"selection":
						[
							[
								2432,
								2432
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 827.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 97,
					"file": "/opt/hfs17.5.460/toolkit/include/UT/UT_IStream.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23162,
						"regions":
						{
						},
						"selection":
						[
							[
								8219,
								8219
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3111.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 98,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Detail.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8408,
						"regions":
						{
						},
						"selection":
						[
							[
								6908,
								6908
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 362.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 99,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Attribute.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5347,
						"regions":
						{
						},
						"selection":
						[
							[
								2438,
								2438
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 997.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 100,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/compression.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1281,
						"regions":
						{
						},
						"selection":
						[
							[
								990,
								990
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 101,
					"file": "src/lava_lib/reader_bgeo/bgeo/Bgeo.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2876,
						"regions":
						{
						},
						"selection":
						[
							[
								949,
								949
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 334.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 102,
					"file": "src/lava_lib/reader_bgeo/bgeo/PrimType.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 962,
						"regions":
						{
						},
						"selection":
						[
							[
								819,
								819
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 103,
					"file": "src/lava_lib/reader_bgeo/bgeo/Run.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 776,
						"regions":
						{
						},
						"selection":
						[
							[
								733,
								733
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 104,
					"file": "src/lava_lib/reader_bgeo/bgeo/parser/Volume.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2221,
						"regions":
						{
						},
						"selection":
						[
							[
								477,
								477
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 105,
					"file": "src/houdini/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 207,
						"regions":
						{
						},
						"selection":
						[
							[
								136,
								136
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 106,
					"file": "src/lava_utils_lib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 658,
						"regions":
						{
						},
						"selection":
						[
							[
								392,
								392
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 107,
					"file": "src/lava_lib/reader_lsd/global.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 443,
						"regions":
						{
						},
						"selection":
						[
							[
								350,
								350
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 108,
					"file": "src/lava_cmd/conf/default.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2233,
						"regions":
						{
						},
						"selection":
						[
							[
								464,
								464
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"type": "text"
				},
				{
					"buffer": 109,
					"file": "src/lava_lib/renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4575,
						"regions":
						{
						},
						"selection":
						[
							[
								1208,
								1208
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 110,
					"file": "src/lava_lib/renderer_scripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4793,
						"regions":
						{
						},
						"selection":
						[
							[
								2464,
								2464
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 571.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"type": "text"
				},
				{
					"buffer": 111,
					"file": "src/lava_lib/scene_reader_base.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1126,
						"regions":
						{
						},
						"selection":
						[
							[
								417,
								417
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 112,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2087,
						"regions":
						{
						},
						"selection":
						[
							[
								2087,
								2087
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 113,
					"file": "src/lava_lib/scene_reader_base.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 622,
						"regions":
						{
						},
						"selection":
						[
							[
								578,
								578
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 114,
					"file": "src/lava_lib/renderer_iface.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 951,
						"regions":
						{
						},
						"selection":
						[
							[
								855,
								855
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 115,
					"file": "src/lava_lib/renderer_iface.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1317,
						"regions":
						{
						},
						"selection":
						[
							[
								888,
								888
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 116,
					"file": "src/lava_lib/readers/lsd_visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1871,
						"regions":
						{
						},
						"selection":
						[
							[
								42,
								42
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 117,
					"file": "src/lava_lib/readers/lsd_echo_visitor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5756,
						"regions":
						{
						},
						"selection":
						[
							[
								42,
								42
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 118,
					"file": "src/lava_lib/readers/session_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 762,
						"regions":
						{
						},
						"selection":
						[
							[
								274,
								274
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 119,
					"file": "src/lava_lib/readers/session_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2312,
						"regions":
						{
						},
						"selection":
						[
							[
								17,
								17
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 120,
					"file": "src/lava_lib/readers/reader_lsd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2997,
						"regions":
						{
						},
						"selection":
						[
							[
								793,
								793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 121,
					"file": "src/lava_lib/readers/reader_lsd.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1486,
						"regions":
						{
						},
						"selection":
						[
							[
								1210,
								1210
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 120.0
	},
	"output.unsaved_changes":
	{
		"height": 120.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 362.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
