{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"GBu",
				"GBufferBase"
			],
			[
				"Render",
				"RenderPasses"
			],
			[
				"Ren",
				"RenderPasses"
			],
			[
				"uint",
				"uint8_t"
			],
			[
				"uin",
				"uint8_t"
			],
			[
				"dev",
				"device"
			],
			[
				"pRe",
				"pRenderContext"
			],
			[
				"c",
				"ctx"
			],
			[
				"mp",
				"mpDevice"
			],
			[
				"Pro",
				"Profiler"
			],
			[
				"cur",
				"curEventName"
			],
			[
				"De",
				"Device"
			],
			[
				"shared",
				"shared_ptr"
			],
			[
				"p",
				"pDevice"
			],
			[
				"Shader",
				"ShaderVar"
			],
			[
				"Gr",
				"GraphicsStateObject"
			],
			[
				"st",
				"stack\tstandard header"
			],
			[
				"str",
				"string\tstandard header"
			],
			[
				"VkB",
				"VkBaseApiHandle"
			],
			[
				"sem",
				"semaphoreQueue"
			],
			[
				"fe",
				"fenceQueue"
			],
			[
				"Fe",
				"FenceApiData"
			],
			[
				"Sha",
				"SharedPtr"
			],
			[
				"sha",
				"shared_ptr"
			],
			[
				"de",
				"device"
			],
			[
				"rele",
				"release"
			],
			[
				"n",
				"nullptr"
			],
			[
				"re",
				"return"
			],
			[
				"colo",
				"colorFormat"
			],
			[
				"init",
				"initHeadless"
			],
			[
				"hea",
				"headless"
			],
			[
				"render",
				"renderer"
			],
			[
				"g",
				"getWidth"
			],
			[
				"mD",
				"mDrawCounterClockwiseMeshes"
			],
			[
				"FA",
				"FALCOR_VK"
			],
			[
				"un",
				"unordered_set\tstandard header (since c++11)"
			],
			[
				"FALC",
				"FALCOR_D3D12"
			],
			[
				"fl",
				"float3"
			],
			[
				"mS",
				"mStructSize"
			],
			[
				"RE",
				"ResourceFormat"
			],
			[
				"LO",
				"LOG_WARN"
			],
			[
				"ins",
				"instanceCount"
			],
			[
				"inde",
				"indexCount"
			],
			[
				"co",
				"common"
			],
			[
				"LOG",
				"LOG_DBG"
			],
			[
				"bin",
				"bind"
			],
			[
				"A",
				"API"
			],
			[
				"desc",
				"descriptor"
			],
			[
				"des",
				"descSetIndex"
			],
			[
				"ad",
				"addRange"
			],
			[
				"reg",
				"regSpace"
			],
			[
				"max",
				"maxIndex"
			],
			[
				"getR",
				"getRootDescriptorCount"
			],
			[
				"mDe",
				"mDesc"
			],
			[
				"Vis",
				"ShaderVisibility"
			],
			[
				"G",
				"GraphicsStateObject"
			],
			[
				"bind",
				"binding"
			],
			[
				"get",
				"getRange"
			],
			[
				"cre",
				"createDescriptorSetLayout"
			],
			[
				"VkP",
				"VkPipelineLayoutCreateInfo"
			],
			[
				"inf",
				"infosOut"
			],
			[
				"Sh",
				"ShaderType"
			],
			[
				"LOG_",
				"LOG_DBG"
			],
			[
				"sp",
				"spaceIndex"
			],
			[
				"add",
				"addRootDescriptor"
			],
			[
				"set",
				"setCount"
			],
			[
				"Roo",
				"RootSignature"
			],
			[
				"ma",
				"map\tstandard header"
			],
			[
				"DESCRIPT",
				"descriptor"
			],
			[
				"e",
				"else"
			],
			[
				"ele",
				"numElems"
			],
			[
				"log_",
				"LOG_ERR"
			],
			[
				"ima",
				"imageLayout"
			],
			[
				"ass",
				"assignedUAV"
			],
			[
				"prepare",
				"prepareDescriptorSets"
			],
			[
				"Comp",
				"ComputeVars"
			],
			[
				"ap",
				"applyComputeVars"
			],
			[
				"Lo",
				"LOG_DBG"
			],
			[
				"bi",
				"bindFlags"
			],
			[
				"sw",
				"swapchainCount"
			],
			[
				"se",
				"setUav"
			],
			[
				"strin",
				"string"
			],
			[
				"tex",
				"texFormat"
			],
			[
				"Gp",
				"GpuFence"
			],
			[
				"to",
				"to_string"
			],
			[
				"Scri",
				"ScriptBindings"
			],
			[
				"arg",
				"argv"
			],
			[
				"ar",
				"argc"
			],
			[
				"file",
				"filePath"
			],
			[
				"tr",
				"triangleCount"
			],
			[
				"me",
				"meshInstanceCount"
			],
			[
				"ex",
				"executableDirectory"
			],
			[
				"h",
				"height"
			],
			[
				"wi",
				"width"
			],
			[
				"vect",
				"vector\tstandard header"
			],
			[
				"vec",
				"vector\tstandard header"
			],
			[
				"__F",
				"__FRAMEWORK_H__"
			],
			[
				"Im",
				"ImageType"
			],
			[
				"T",
				"Texture"
			],
			[
				"VkR",
				"VkResourceType"
			],
			[
				"getD",
				"getDepthStencilView"
			],
			[
				"lo",
				"logError"
			],
			[
				"pB",
				"pBackBufferFBO"
			],
			[
				"msg",
				"msgBox"
			],
			[
				"t",
				"type"
			],
			[
				"run",
				"runtime_error"
			],
			[
				"pre",
				"prepareForDraw"
			],
			[
				"REnder",
				"RenderContext"
			],
			[
				"image",
				"imageCount"
			],
			[
				"files",
				"filesystem"
			],
			[
				"inc",
				"include"
			],
			[
				"end",
				"endif"
			],
			[
				"si",
				"size"
			],
			[
				"tmp",
				"tmp_objs"
			],
			[
				"tm",
				"tmp_objs"
			],
			[
				"obje",
				"objects"
			],
			[
				"dele",
				"deleted"
			],
			[
				"del",
				"_delete_objects"
			],
			[
				"Obj",
				"ObjectInfo"
			],
			[
				"im",
				"image_render_mode"
			],
			[
				"pbo",
				"pbo_buff_size"
			],
			[
				"pb",
				"pbo_ready"
			],
			[
				"nr",
				"nrm_"
			],
			[
				"cpu",
				"rtao_cpu_buffers"
			],
			[
				"bu",
				"buf_size"
			],
			[
				"ob",
				"ob_info"
			],
			[
				"ob_",
				"ob_item_ptr"
			],
			[
				"cast",
				"cast_shadow"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp",
			"settings":
			{
				"buffer_size": 18914,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 1282 files for \"= delete\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.h:\n  317  \n  318      // Delete some functions. If they are not deleted, the compiler will try to convert the uints to string, resulting in runtime error\n  319:     Sampler::SharedPtr getSampler(uint32_t) = delete;\n  320:     bool setSampler(uint32_t, const Sampler::SharedPtr&) = delete;\n  321  \n  322      using SpecializationArgs = std::vector<slang::SpecializationArg>;\n\n/home/max/dev/Falcor/src/Falcor/Core/Program/ProgramVersion.h:\n   58      protected:\n   59          EntryPointGroup() = default;\n   60:         EntryPointGroup(const EntryPointGroup&) = delete;\n   61:         EntryPointGroup& operator=(const EntryPointGroup&) = delete;\n   62  \n   63          Type mType;\n   ..\n   94          EntryPointGroupKernels(Type type, const Shaders& shaders);\n   95          EntryPointGroupKernels() = default;\n   96:         EntryPointGroupKernels(const EntryPointGroupKernels&) = delete;\n   97:         EntryPointGroupKernels& operator=(const EntryPointGroupKernels&) = delete;\n   98  \n   99          Type mType;\n\n/home/max/dev/Falcor/src/Falcor/Core/Renderer.h:\n  172  \n  173      // Deleted copy operators (copy a pointer type!)\n  174:     IRenderer(const IRenderer&) = delete;\n  175:     IRenderer& operator=(const IRenderer &) = delete;\n  176  };\n  177  \n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.h:\n  149  \n  150      Sample(IRenderer::UniquePtr& pRenderer) : mpRenderer(std::move(pRenderer)) {}\n  151:     Sample(const Sample&) = delete;\n  152:     Sample& operator=(const Sample&) = delete;\n  153  \n  154      Device::SharedPtr mpDevice;\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.h:\n  102              // Assignment is unsafe given how |triangleIndices| is allocated.\n  103              LeafNode() = default;\n  104:             LeafNode(const LeafNode &) = delete;\n  105:             LeafNode &operator=(const LeafNode &) = delete;\n  106          };\n  107  \n\n/home/max/dev/Falcor/src/Falcor/Raytracing/RtProgram/RtProgram.h:\n  133  \n  134      private:\n  135:         RtProgram(RtProgram const&) = delete;\n  136:         RtProgram& operator=(RtProgram const&) = delete;\n  137  \n  138          RtProgram(const Desc& desc, uint32_t maxPayloadSize = FALCOR_RT_MAX_PAYLOAD_SIZE_IN_BYTES, uint32_t maxAttributesSize = D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES);\n\n/home/max/dev/Falcor/src/Falcor/RenderGraph/RenderPassLibrary.h:\n   36       public:\n   37          RenderPassLibrary() = default;\n   38:         RenderPassLibrary(RenderPassLibrary&) = delete;\n   39          ~RenderPassLibrary();\n   40          using CreateFunc = std::function<RenderPass::SharedPtr(RenderContext*, const Dictionary&)>;\n\n/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.h:\n   40      private:\n   41          AssimpImporter() = default;\n   42:         AssimpImporter(const AssimpImporter&) = delete;\n   43:         void operator=(const AssimpImporter&) = delete;\n   44      };\n   45  }\n\n/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem/ParticleSystem.h:\n  144  \n  145      private:\n  146:         ParticleSystem() = delete;\n  147          ParticleSystem(RenderContext* pCtx, uint32_t maxParticles, uint32_t maxEmitPerFrame,\n  148              std::string drawPixelShader, std::string simulateComputeShader, bool sorted);\n\n/home/max/dev/Falcor/src/Falcor/Utils/Logger.h:\n   99  \n  100          static void log(Level L, const std::string& msg, MsgBox mbox = Logger::MsgBox::Auto);\n  101:         Logger() = delete;\n  102      };\n  103  \n\n/home/max/dev/Falcor/src/Falcor/Utils/UI/Font.h:\n   81      private:\n   82          Font();\n   83:         Font(const Font&) = delete;\n   84:         Font& operator=(const Font&) = delete;\n   85  \n   86          bool loadFromFile(const std::string& fontName, float size);\n\n/home/max/dev/Falcor/src/Tools/ImageCompare/args.h:\n 1646              }\n 1647  \n 1648:             Subparser(const Subparser&) = delete;\n 1649:             Subparser(Subparser&&) = delete;\n 1650:             Subparser &operator = (const Subparser&) = delete;\n 1651:             Subparser &operator = (Subparser&&) = delete;\n 1652  \n 1653              const Command &GetCommand()\n\n/home/max/dev/Falcor/src/USD/hgiVk/blitEncoder.h:\n   45  \n   46  private:\n   47:     HgiVkBlitEncoder() = delete;\n   48:     HgiVkBlitEncoder & operator=(const HgiVkBlitEncoder&) = delete;\n   49:     HgiVkBlitEncoder(const HgiVkBlitEncoder&) = delete;\n   50  \n   51  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/buffer.h:\n   64  \n   65  private:\n   66:     HgiVkBuffer() = delete;\n   67:     HgiVkBuffer & operator=(const HgiVkBuffer&) = delete;\n   68:     HgiVkBuffer(const HgiVkBuffer&) = delete;\n   69  \n   70  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/commandBuffer.h:\n  110  \n  111  private:\n  112:     HgiVkCommandBuffer() = delete;\n  113:     HgiVkCommandBuffer & operator= (const HgiVkCommandBuffer&) = delete;\n  114:     HgiVkCommandBuffer(const HgiVkCommandBuffer&) = delete;\n  115  \n  116      // Ensures a command buffer is ready to record commands.\n\n/home/max/dev/Falcor/src/USD/hgiVk/commandBufferManager.h:\n  102  \n  103  private:\n  104:     HgiVkCommandBufferManager() = delete;\n  105      HgiVkCommandBufferManager & operator= (\n  106:         const HgiVkCommandBufferManager&) = delete;\n  107      HgiVkCommandBufferManager(\n  108:         const HgiVkCommandBufferManager&) = delete;\n  109  \n  110      // Create pools and command buffers for parallel recording.\n\n/home/max/dev/Falcor/src/USD/hgiVk/commandPool.h:\n   41  \n   42  private:\n   43:     HgiVkCommandPool() = delete;\n   44:     HgiVkCommandPool & operator= (const HgiVkCommandPool&) = delete;\n   45:     HgiVkCommandPool(const HgiVkCommandPool&) = delete;\n   46  \n   47  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/computeEncoder.h:\n   55  \n   56  private:\n   57:     HgiVkComputeEncoder() = delete;\n   58:     HgiVkComputeEncoder & operator=(const HgiVkComputeEncoder&) = delete;\n   59:     HgiVkComputeEncoder(const HgiVkComputeEncoder&) = delete;\n   60  \n   61  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/device.h:\n  167  \n  168  private:\n  169:     HgiVkDevice() = delete;\n  170:     HgiVkDevice & operator=(const HgiVkDevice&) = delete;\n  171:     HgiVkDevice(const HgiVkDevice&) = delete;\n  172  \n  173      // Returns true if the provided extension is supported by the device\n\n/home/max/dev/Falcor/src/USD/hgiVk/frame.h:\n   56  \n   57  private:\n   58:     HgiVkRenderFrame() = delete;\n   59:     HgiVkRenderFrame & operator=(const HgiVkRenderFrame&) = delete;\n   60:     HgiVkRenderFrame(const HgiVkRenderFrame&) = delete;\n   61  \n   62  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/garbageCollector.h:\n   41  \n   42  private:\n   43:     HgiVkGarbageCollector & operator=(const HgiVkGarbageCollector&) = delete;\n   44:     HgiVkGarbageCollector(const HgiVkGarbageCollector&) = delete;\n   45  \n   46      typedef std::vector<HgiVkObject> VkObjectVector;\n\n/home/max/dev/Falcor/src/USD/hgiVk/glslang/glslang/MachineIndependent/ShaderLang.cpp:\n  982                             std::string* output)\n  983        : getLastSourceIndex(lastSourceIndex), output(output), lastSource(-1), lastLine(0) {}\n  984: //    SourceLineSynchronizer(const SourceLineSynchronizer&) = delete;\n  985: //    SourceLineSynchronizer& operator=(const SourceLineSynchronizer&) = delete;\n  986  \n  987      // Sets the internally tracked source string index to that of the most\n\n/home/max/dev/Falcor/src/USD/hgiVk/graphicsEncoder.h:\n   94  \n   95  private:\n   96:     HgiVkGraphicsEncoder() = delete;\n   97:     HgiVkGraphicsEncoder & operator=(const HgiVkGraphicsEncoder&) = delete;\n   98:     HgiVkGraphicsEncoder(const HgiVkGraphicsEncoder&) = delete;\n   99  \n  100  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/hgi.h:\n  150  \n  151  private:\n  152:     HgiVk & operator=(const HgiVk&) = delete;\n  153:     HgiVk(const HgiVk&) = delete;\n  154  \n  155      // Begin a new frame of rendering.\n\n/home/max/dev/Falcor/src/USD/hgiVk/parallelGraphicsEncoder.h:\n   44  \n   45  private:\n   46:     HgiVkParallelGraphicsEncoder() = delete;\n   47      HgiVkParallelGraphicsEncoder & operator=(\n   48:         const HgiVkParallelGraphicsEncoder&) = delete;\n   49      HgiVkParallelGraphicsEncoder(\n   50:         const HgiVkParallelGraphicsEncoder&) = delete;\n   51  \n   52  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/pipeline.h:\n   46  \n   47  private:\n   48:     HgiVkPipeline() = delete;\n   49:     HgiVkPipeline & operator=(const HgiVkPipeline&) = delete;\n   50:     HgiVkPipeline(const HgiVkPipeline&) = delete;\n   51  \n   52      // In Vulkan pipelines require compatibility with render passes.\n\n/home/max/dev/Falcor/src/USD/hgiVk/renderPass.h:\n  121  \n  122  private:\n  123:     HgiVkRenderPass() = delete;\n  124:     HgiVkRenderPass & operator=(const HgiVkRenderPass&) = delete;\n  125:     HgiVkRenderPass(const HgiVkRenderPass&) = delete;\n  126  \n  127      // Extracts the render pass information for one texture.\n\n/home/max/dev/Falcor/src/USD/hgiVk/renderPassPipelineCache.h:\n   71  private:\n   72      HgiVkRenderPassPipelineCache & operator= (\n   73:         const HgiVkRenderPassPipelineCache&) = delete;\n   74:     HgiVkRenderPassPipelineCache(const HgiVkRenderPassPipelineCache&) = delete;\n   75  \n   76  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/resourceBindings.h:\n   78  \n   79  private:\n   80:     HgiVkResourceBindings() = delete;\n   81:     HgiVkResourceBindings & operator=(const HgiVkResourceBindings&) = delete;\n   82:     HgiVkResourceBindings(const HgiVkResourceBindings&) = delete;\n   83  \n   84  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/shaderCompiler.h:\n   50  \n   51  private:\n   52:     HgiVkShaderCompiler & operator=(const HgiVkShaderCompiler&) = delete;\n   53:     HgiVkShaderCompiler(const HgiVkShaderCompiler&) = delete;\n   54  \n   55  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/shaderFunction.h:\n   48  \n   49  private:\n   50:     HgiVkShaderFunction() = delete;\n   51:     HgiVkShaderFunction & operator=(const HgiVkShaderFunction&) = delete;\n   52:     HgiVkShaderFunction(const HgiVkShaderFunction&) = delete;\n   53  \n   54  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/shaderProgram.h:\n   29  \n   30  private:\n   31:     HgiVkShaderProgram() = delete;\n   32:     HgiVkShaderProgram & operator=(const HgiVkShaderProgram&) = delete;\n   33:     HgiVkShaderProgram(const HgiVkShaderProgram&) = delete;\n   34  \n   35  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/surface.h:\n   53  \n   54  private:\n   55:     HgiVkSurface() = delete;\n   56:     HgiVkSurface & operator=(const HgiVkSurface&) = delete;\n   57:     HgiVkSurface(const HgiVkSurface&) = delete;\n   58  \n   59  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/swapchain.h:\n   58  \n   59  private:\n   60:     HgiVkSwapchain() = delete;\n   61:     HgiVkSwapchain & operator=(const HgiVkSwapchain&) = delete;\n   62:     HgiVkSwapchain(const HgiVkSwapchain&) = delete;\n   63  \n   64      // Create a new swapchain (e.g. during resize)\n\n/home/max/dev/Falcor/src/USD/hgiVk/texture.h:\n   80  \n   81  private:\n   82:     HgiVkTexture() = delete;\n   83:     HgiVkTexture & operator=(const HgiVkTexture&) = delete;\n   84:     HgiVkTexture(const HgiVkTexture&) = delete;\n   85  \n   86  private:\n\n/home/max/dev/Falcor/src/USD/hgiVk/vulkanMemoryAllocator/vk_mem_alloc.h:\n 3842      #define VMA_CLASS_NO_COPY(className) \\\n 3843          private: \\\n 3844:             className(const className&) = delete; \\\n 3845:             className& operator=(const className&) = delete;\n 3846  #endif\n 3847  \n ....\n 4370      }\n 4371  \n 4372:     VmaStlAllocator& operator=(const VmaStlAllocator& x) = delete;\n 4373  };\n 4374  \n\n92 matches across 36 files\n\n\nSearching 1282 files for \"LightCollection\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/BuildTriangleList.cs.slang:\n   30  import Scene.Scene;\n   31  import Utils.Color.ColorHelpers;\n   32: import Experimental.Scene.Lights.LightCollection;\n   33  \n   34  cbuffer CB\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveIntegrator.ps.slang:\n   31  */\n   32  import Scene.Scene;\n   33: import Experimental.Scene.Lights.LightCollection;\n   34  \n   35  // Setup NvApi. We need this for fp32 atomics.\n   ..\n   43  #endif\n   44  \n   45: ParameterBlock<LightCollection> gLightCollection;\n   46  \n   47  RWByteAddressBuffer gTexelSum;          ///< Sum over texels (RGB) + number of texels (A) in RGBA32Float format. Using raw buffer for fp32 atomics compatibility.\n   ..\n   65      // Fetch light index\n   66      const uint triIdx = vtxIdx / 3;\n   67:     const uint id = gLightCollection.getLightIdx(triIdx);\n   68  \n   69      VsOut vsOut;\n   ..\n   73  \n   74      // Check if triangle is textured.\n   75:     if (gScene.isEmissiveTextured(gLightCollection.getMaterialID(triIdx)))\n   76      {\n   77          // TODO: We could do these computations in a geometry shader once per triangle,\n   ..\n   82          for (uint j = 0; j < 3; j++)\n   83          {\n   84:             uv[j] = gLightCollection.getVtxTexCoord(triIdx + j);\n   85          }\n   86          const float2 uvMin = min(min(uv[0], uv[1]), uv[2]);\n   ..\n   88  \n   89          // Pass on texture coordinate unmodified for pixel to use.\n   90:         vsOut.uv = gLightCollection.getVtxTexCoord(vtxIdx);                 // Normalized (u,v) coordinate.\n   91  \n   92          // Query texture dimensions.\n   93          float width = 0, height = 0, mips = 0;\n   94:         gScene.materialResources[gLightCollection.meshData[id].materialID].emissive.GetDimensions(0, width, height, mips);\n   95  \n   96          // Compute raster position in texture space.\n   ..\n  125      const float2 uv = vsIn.uv;        // Interpolated texture coordinate.\n  126      const uint lightIdx = vsIn.lightIdx;\n  127:     float3 color = gScene.materialResources[gLightCollection.meshData[lightIdx].materialID].emissive.SampleLevel(gPointSampler, uv, 0.f).rgb;  // Sampler at mip 0\n  128  \n  129      // Compute weighted color. TODO: For now assume full coverage (= 1.0 in weight).\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveLightSamplerHelpers.slang:\n   29  /** Shared utility functions for emissive light sampler implementations.\n   30  \n   31:      These functions rely on LightCollection, which is a container holding the\n   32       global list of all emissive triangles in the scene.\n   33  \n   ..\n   41  import Scene.ShadingData;\n   42  import Utils.Math.MathHelpers;\n   43: import Experimental.Scene.Lights.LightCollection;\n   44  import Experimental.Scene.Lights.EmissiveLightSamplerInterface;\n   45  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.cpp:\n   41      {\n   42          // Make sure the light collection is created.\n   43:         mpScene->getLightCollection(pRenderContext);\n   44      }\n   45  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.h:\n   28  #pragma once\n   29  #include \"EmissiveLightSampler.h\"\n   30: #include \"LightCollection.h\"\n   31  \n   32  namespace Falcor\n   ..\n   34      /** Emissive light sampler using uniform sampling of the lights.\n   35  \n   36:         This class wraps a LightCollection object, which holds the set of lights to sample.\n   37      */\n   38      class dlldecl EmissiveUniformSampler : public EmissiveLightSampler, public inherit_shared_from_this<EmissiveLightSampler, EmissiveUniformSampler>\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/EmissiveUniformSampler.slang:\n   38      EmissiveLightSamplerInterface.slang for usage information).\n   39  \n   40:     The struct wraps a LightCollection that stores the pre-processed lights.\n   41      The program should instantiate the struct below. See EmissiveLightSampler.slang.\n   42  */\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/FinalizeIntegration.cs.slang:\n   30  import Scene.Scene;\n   31  import Utils.Color.ColorHelpers;\n   32: import Experimental.Scene.Lights.LightCollection;\n   33  \n   34  cbuffer CB\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.cpp:\n   35  namespace Falcor {\n   36  \n   37:     LightBVH::SharedPtr LightBVH::create(std::shared_ptr<Device> device, const LightCollection::SharedConstPtr& pLightCollection) {\n   38:         return SharedPtr(new LightBVH(device, pLightCollection));\n   39      }\n   40  \n   ..\n   46  \n   47          const ComputeVars::SharedPtr& pLeafUpdaterVars = mLeafUpdater->getVars();\n   48:         mpLightCollection->setShaderData(pLeafUpdaterVars[\"CB\"][\"gLights\"]);\n   49          pLeafUpdaterVars[\"CB\"][\"gLightBVH\"][\"nodes\"] = mpBVHNodesBuffer;\n   50          pLeafUpdaterVars[\"gNodeOffsets\"] = mpNodeOffsetsBuffer;\n   51  \n   52          const ComputeVars::SharedPtr& pInternalUpdaterVars = mInternalUpdater->getVars();\n   53:         mpLightCollection->setShaderData(pInternalUpdaterVars[\"CB\"][\"gLights\"]);\n   54          pInternalUpdaterVars[\"CB\"][\"gLightBVH\"][\"nodes\"] = mpBVHNodesBuffer;\n   55          pInternalUpdaterVars[\"gNodeOffsets\"] = mpNodeOffsetsBuffer;\n   ..\n  178      }\n  179  \n  180:     LightBVH::LightBVH(std::shared_ptr<Device> device, const LightCollection::SharedConstPtr& pLightCollection) : mpDevice(device), mpLightCollection(pLightCollection) {\n  181          verifyStaticParams();\n  182          mAlignedAllocator.setMinimumAlignment(16);\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVH.h:\n   30  \n   31  #include \"LightBVHStaticParams.slang\"\n   32: #include \"LightCollection.h\"\n   33  \n   34  #include \"Utils/AlignedAllocator.h\"\n   ..\n  127  \n  128          /** Creates an empty LightBVH object. Use a LightBVHBuilder to build the BVH.\n  129:             \\param[in] pLightCollection The light collection around which the BVH will be built.\n  130          */\n  131:         static SharedPtr create(std::shared_ptr<Device> device, const LightCollection::SharedConstPtr& pLightCollection);\n  132  \n  133          /** Refit all the BVH nodes to the underlying geometry, without changing the hierarchy.\n  ...\n  195  \n  196       protected:\n  197:         LightBVH(std::shared_ptr<Device> device, const LightCollection::SharedConstPtr& pLightCollection);\n  198  \n  199          void computeStats();\n  ...\n  226  \n  227          // Internal state\n  228:         const LightCollection::SharedConstPtr mpLightCollection;\n  229  \n  230          ComputePass::SharedPtr                mLeafUpdater;             ///< Compute pass for refitting the leaf nodes.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp:\n  221  \n  222          // Get global list of emissive triangles.\n  223:         assert(bvh.mpLightCollection);\n  224:         const auto& triangles = bvh.mpLightCollection->getMeshLightTriangles();\n  225          if (triangles.empty()) return;\n  226  \n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHRefit.cs.slang:\n   29  \n   30  import Experimental.Scene.Lights.LightBVH;\n   31: import Experimental.Scene.Lights.LightCollection;\n   32  \n   33  cbuffer CB\n   34  {\n   35:     LightCollection     gLights;              ///< The light sources.\n   36      RWLightBVH          gLightBVH;            ///< The BVH around the light sources.\n   37      uint                gFirstNodeIndex;      ///< The index of the first node to be processed.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp:\n   58  \n   59          // Check if light collection has changed.\n   60:         if (is_set(mpScene->getUpdates(), Scene::UpdateFlags::LightCollectionChanged))\n   61          {\n   62              if (mOptions.buildOptions.allowRefitting && !mNeedsRebuild) needsRefit = true;\n   ..\n  172              throw std::runtime_error(\"Failed to create BVH builder\");\n  173          }\n  174:         mpBVH = LightBVH::create(pRenderContext->device(), pScene->getLightCollection(pRenderContext));\n  175          if (!mpBVH) {\n  176              throw std::runtime_error(\"Failed to create BVH\");\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h:\n   31  #include \"LightBVH.h\"\n   32  #include \"LightBVHBuilder.h\"\n   33: #include \"LightCollection.h\"\n   34  #include \"LightBVHSamplerSharedDefinitions.slang\"\n   35  \n   ..\n   44      /** Emissive light sampler using a light BVH.\n   45  \n   46:         This class wraps a LightCollection object, which holds the set of lights to sample.\n   47          Internally, the class build a BVH over the light sources.\n   48      */\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightBVHSampler.slang:\n   34  import Experimental.Scene.Lights.LightBVH;\n   35  import Experimental.Scene.Lights.LightBVHSamplerSharedDefinitions;\n   36: import Experimental.Scene.Lights.LightCollection;\n   37  import Experimental.Scene.Lights.EmissiveLightSamplerHelpers;\n   38  import Experimental.Scene.Lights.EmissiveLightSamplerInterface;\n   ..\n   55      EmissiveLightSamplerInterface.slang for usage information).\n   56  \n   57:     The struct wraps a LightCollection that stores the pre-processed lights,\n   58      and a LightBVH that stores the data structure used for sampling.\n   59      The program should instantiate the struct below. See EmissiveLightSampler.slang.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"LightCollection.h\"\n   30: #include \"LightCollectionShared.slang\"\n   31  #include \"Scene/Scene.h\"\n   32  #include <sstream>\n   ..\n   46      }\n   47  \n   48:     LightCollection::SharedPtr LightCollection::create(RenderContext* pRenderContext, const std::shared_ptr<Scene>& pScene) {\n   49:         SharedPtr ptr = SharedPtr(new LightCollection());\n   50          return ptr->init(pRenderContext, pScene) ? ptr : nullptr;\n   51      }\n   52  \n   53:     bool LightCollection::update(RenderContext* pRenderContext, UpdateStatus* pUpdateStatus) {\n   54:         PROFILE(\"LightCollection::update()\");\n   55  \n   56          if (pUpdateStatus) {\n   ..\n   94      }\n   95  \n   96:     void LightCollection::renderUI(Gui::Widgets& widget) {\n   97          // Prints stats about the number of lights etc.\n   98          const MeshLightStats& stats = getStats();\n   ..\n  113      }\n  114  \n  115:     bool LightCollection::init(RenderContext* pRenderContext, const std::shared_ptr<Scene>& pScene) {\n  116          assert(pScene);\n  117          mpScene = pScene;\n  ...\n  138      }\n  139  \n  140:     bool LightCollection::initIntegrator(RenderContext* pRenderContext) {\n  141          // The current algorithm rasterizes emissive triangles in texture space,\n  142          // and uses atomic operations to sum up the contribution from all covered texels.\n  ...\n  146          std::string s;\n  147          if (findFileInShaderDirectories(\"NVAPI/nvHLSLExtns.h\", s) == false) {\n  148:             logError(\"LightCollection relies on NVAPI, which appears to be missing. Please make sure you have NVAPI installed (instructions are in the readme file)\");\n  149              return false;\n  150          }\n  ...\n  187      }\n  188  \n  189:     bool LightCollection::setupMeshLights() {\n  190          mMeshLights.clear();\n  191          mpSamplerState = nullptr;\n  ...\n  228      }\n  229  \n  230:     void LightCollection::build(RenderContext* pRenderContext) {\n  231          if (mTriangleCount == 0) {\n  232              // If there are no emissive triangle, clear everything and mark the CPU data/stats as valid.\n  ...\n  254      }\n  255  \n  256:     void LightCollection::prepareTriangleData(RenderContext* pRenderContext) {\n  257          // Create GPU buffers.\n  258          assert(mTriangleCount > 0);\n  ...\n  261  \n  262          mpMeshLightsVertexPos = Buffer::create(pRenderContext->device(), bufSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  263:         mpMeshLightsVertexPos->setName(\"LightCollection_MeshLightsVertexPos\");\n  264          mpMeshLightsTexCoords = Buffer::create(pRenderContext->device(), uvBufSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  265:         mpMeshLightsTexCoords->setName(\"LightCollection_MeshLightsTexCoords\");\n  266          mpTriangleData = Buffer::createStructured(pRenderContext->device(), mpTriangleListBuilder->getProgram().get(), \"gTriangleData\", mTriangleCount);\n  267:         mpTriangleData->setName(\"LightCollection_TriangleData\");\n  268  \n  269          // Compute triangle data (vertices, uv-coordinates, materialID) for all mesh lights.\n  ...\n  271      }\n  272  \n  273:     void LightCollection::prepareMeshData(RenderContext* pRenderContext) {\n  274          assert(mMeshLights.size() > 0);\n  275  \n  ...\n  299          // Create the GPU buffer.\n  300          mpPerMeshInstanceOffset = Buffer::createStructured(pRenderContext->device(), sizeof(uint32_t), instanceCount, Resource::BindFlags::ShaderResource);\n  301:         mpPerMeshInstanceOffset->setName(\"LightCollection_PerMeshInstanceOffset\");\n  302  \n  303          const size_t sizeInBytes = triangleOffsets.size() * sizeof(triangleOffsets[0]);\n  ...\n  306      }\n  307  \n  308:     void LightCollection::integrateEmissive(RenderContext* pRenderContext) {\n  309          assert(mTriangleCount > 0);\n  310          assert(mMeshLights.size() > 0);\n  ...\n  317              if (!mIntegrator.pResultBuffer || mIntegrator.pResultBuffer->getSize() < bufSize) {\n  318                  mIntegrator.pResultBuffer = Buffer::create(pRenderContext->device(), bufSize, Resource::BindFlags::ShaderResource | Resource::BindFlags::UnorderedAccess, Buffer::CpuAccess::None);\n  319:                 mIntegrator.pResultBuffer->setName(\"LightCollection_IntegratorResults\");\n  320                  assert(mIntegrator.pResultBuffer);\n  321              }\n  ...\n  331  \n  332              // Bind light collection.\n  333:             setShaderData(mIntegrator.pVars[\"gLightCollection\"]);\n  334  \n  335              // Bind our resources.\n  ...\n  359      }\n  360  \n  361:     void LightCollection::computeStats() const {\n  362          if (mStatsValid) return;\n  363  \n  ...\n  402      }\n  403  \n  404:     void LightCollection::buildTriangleList(RenderContext* pRenderContext) {\n  405          assert(mMeshLights.size() > 0);\n  406  \n  ...\n  429      }\n  430  \n  431:     void LightCollection::updateTrianglePositions(RenderContext* pRenderContext, const std::vector<uint32_t>& updatedLights) {\n  432          // This pass pre-transforms all emissive triangles into world space and updates their area and face normals.\n  433          // It is executed if any geometry in the scene has moved, which is wasteful since it will update also things\n  ...\n  454      }\n  455  \n  456:     bool LightCollection::setShaderData(const ShaderVar& var) const {\n  457          assert(var.isValid());\n  458  \n  ...\n  486      }\n  487  \n  488:     void LightCollection::copyDataToStagingBuffer(RenderContext* pRenderContext) const {\n  489          if (mStagingBufferValid) return;\n  490  \n  ...\n  493          if (!mpStagingBuffer || mpStagingBuffer->getSize() < stagingSize) {\n  494              mpStagingBuffer = Buffer::create(pRenderContext->device(), stagingSize, Resource::BindFlags::None, Buffer::CpuAccess::Read);\n  495:             mpStagingBuffer->setName(\"LightCollection_StagingBuffer\");\n  496              mCPUInvalidData = CPUOutOfDateFlags::All;\n  497          }\n  ...\n  520      }\n  521  \n  522:     void LightCollection::syncCPUData() const {\n  523          if (mCPUInvalidData == CPUOutOfDateFlags::None) return;\n  524  \n  ...\n  526          // This should normally have done by calling prepareSyncCPUData().\n  527          if (!mStagingBufferValid) {\n  528:             logWarning(\"LightCollection::syncCPUData() performance warning - Call LightCollection::prepareSyncCPUData() ahead of time if possible\");\n  529              prepareSyncCPUData(gpDevice->getRenderContext());\n  530          }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.h:\n   41  \n   42      This class has utility functions for updating and pre-processing the mesh lights.\n   43:     The LightCollection can be used standalone, but more commonly it will be wrapped\n   44      by an emissive light sampler.\n   45  */\n   46: class dlldecl LightCollection : public std::enable_shared_from_this<LightCollection> {\n   47   public:\n   48:     using SharedPtr = std::shared_ptr<LightCollection>;\n   49:     using ConstSharedPtrRef = const std::shared_ptr<LightCollection>&;\n   50:     using SharedConstPtr = std::shared_ptr<const LightCollection>;\n   51  \n   52      enum class UpdateFlags : uint32_t {\n   ..\n  102  \n  103  \n  104:     ~LightCollection() = default;\n  105  \n  106      /** Creates a light collection for the given scene.\n  ...\n  170  \n  171   protected:\n  172:     LightCollection() = default;\n  173  \n  174      bool init(RenderContext* pRenderContext, const std::shared_ptr<Scene>& pScene);\n  ...\n  227  };\n  228  \n  229: enum_class_operators(LightCollection::CPUOutOfDateFlags);\n  230: enum_class_operators(LightCollection::UpdateFlags);\n  231  \n  232  }  // namespace Falcor\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.slang:\n   29  \n   30  import Scene.ShadingData;\n   31: __exported import Experimental.Scene.Lights.LightCollectionShared;\n   32  __exported import Experimental.Scene.Lights.MeshLightData;\n   33  \n   ..\n   37      quantities such as emitted flux are pre-computed.\n   38  \n   39:     The user code instantiates LightCollection in e.g. a parameter block and\n   40      calls member functions on the CPU-side class to update/bind it to their program.\n   41  */\n   42: struct LightCollection\n   43  {\n   44      uint                                triangleCount;          ///< Total number of triangles in all mesh lights.\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/MeshLightData.slang:\n   42  {\n   43      uint        meshInstanceID      = kInvalidIndex;    ///< Mesh instance ID in the scene (= getGlobalHitID()).\n   44:     uint        triangleOffset      = kInvalidIndex;    ///< Offset into LightCollection's global list of emissive triangles.\n   45      uint        triangleCount       = 0;                ///< Number of triangles in mesh light.\n   46      uint        materialID          = kInvalidIndex;    ///< Material ID (index into scene.materials array).\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/UpdateTriangleVertices.cs.slang:\n   29  \n   30  import Scene.Scene;\n   31: import Experimental.Scene.Lights.LightCollection;\n   32  \n   33  cbuffer CB\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj:\n  130      <ClInclude Include=\"Experimental\\Scene\\Lights\\LightBVHSampler.h\" />\n  131      <ShaderSource Include=\"Experimental\\Scene\\Lights\\EmissiveLightSamplerType.slangh\" />\n  132:     <ClInclude Include=\"Experimental\\Scene\\Lights\\LightCollection.h\" />\n  133      <ShaderSource Include=\"Experimental\\Scene\\Lights\\FinalizeIntegration.cs.slang\" />\n  134      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightBVHSamplerSharedDefinitions.slang\" />\n  135      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightBVHStaticParams.slang\" />\n  136:     <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightCollectionShared.slang\" />\n  137      <ClInclude Include=\"Raytracing\\RtProgramVars.h\" />\n  138      <ClInclude Include=\"Raytracing\\RtProgramVarsHelper.h\" />\n  ...\n  586      <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVHBuilder.cpp\" />\n  587      <ClCompile Include=\"Experimental\\Scene\\Lights\\LightBVHSampler.cpp\" />\n  588:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightCollection.cpp\" />\n  589      <ClCompile Include=\"Raytracing\\RtProgramVars.cpp\" />\n  590      <ClCompile Include=\"Raytracing\\RtProgramVarsHelper.cpp\" />\n  ...\n  672      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightBVHRefit.cs.slang\" />\n  673      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightBVHSampler.slang\" />\n  674:     <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightCollection.slang\" />\n  675      <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightHelpers.slang\" />\n  676      <ShaderSource Include=\"Experimental\\Scene\\Material\\MaterialHelpers.slang\" />\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj.filters:\n  473        <Filter>Experimental\\Scene\\Lights</Filter>\n  474      </ClInclude>\n  475:     <ClInclude Include=\"Experimental\\Scene\\Lights\\LightCollection.h\">\n  476        <Filter>Experimental\\Scene\\Lights</Filter>\n  477      </ClInclude>\n  ...\n 1150        <Filter>Experimental\\Scene\\Lights</Filter>\n 1151      </ClCompile>\n 1152:     <ClCompile Include=\"Experimental\\Scene\\Lights\\LightCollection.cpp\">\n 1153        <Filter>Experimental\\Scene\\Lights</Filter>\n 1154      </ClCompile>\n ....\n 1230        <Filter>Experimental\\Scene\\Lights</Filter>\n 1231      </ShaderSource>\n 1232:     <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightCollection.slang\">\n 1233        <Filter>Experimental\\Scene\\Lights</Filter>\n 1234      </ShaderSource>\n ....\n 1398        <Filter>Experimental\\Scene\\Lights</Filter>\n 1399      </ShaderSource>\n 1400:     <ShaderSource Include=\"Experimental\\Scene\\Lights\\LightCollectionShared.slang\">\n 1401        <Filter>Experimental\\Scene\\Lights</Filter>\n 1402      </ShaderSource>\n\n/home/max/dev/Falcor/src/Falcor/RenderPasses/Shared/PathTracer/PathTracer.cpp:\n  452                  lightingChanged = mpEmissiveSampler->update(pRenderContext);\n  453  \n  454:                 const auto& lightCollection = mpScene->getLightCollection(pRenderContext);\n  455  \n  456                  // Update shared parameters.\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.cpp:\n  137  }\n  138  \n  139: LightCollection::ConstSharedPtrRef Scene::getLightCollection(RenderContext* pContext) {\n  140:     if (!mpLightCollection) {\n  141:         mpLightCollection = LightCollection::create(pContext, shared_from_this());\n  142:         mpLightCollection->setShaderData(mpSceneBlock[\"lightCollection\"]);\n  143      }\n  144:     return mpLightCollection;\n  145  }\n  146  \n  ...\n  443  \n  444      // Update light collection\n  445:     if (mpLightCollection && mpLightCollection->update(pContext)) mUpdates |= UpdateFlags::LightCollectionChanged;\n  446  \n  447      return mUpdates;\n  ...\n  521          statsGroup.text(oss.str());\n  522  \n  523:         if (mpLightCollection) {\n  524              auto lightCollectionGroup = Gui::Group(widget, \"Mesh lights\", true);\n  525:             if (lightCollectionGroup.open()) mpLightCollection->renderUI(lightCollectionGroup);\n  526              lightCollectionGroup.release();\n  527          } else {\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.h:\n   38  #include \"Animation/AnimationController.h\"\n   39  #include \"Camera/CameraController.h\"\n   40: #include \"Experimental/Scene/Lights/LightCollection.h\"\n   41  #include \"SceneTypes.slang\"\n   42  \n   ..\n  105              LightPropertiesChanged      = 0x20, ///< Other light changes not included in LightIntensityChanged and LightsMoved\n  106              SceneGraphChanged           = 0x40, ///< Any transform in the scene graph changed.\n  107:             LightCollectionChanged      = 0x80, ///< Light collection changed (mesh lights)\n  108              MaterialsChanged            = 0x100,///< Materials changed\n  109  \n  ...\n  241              \\return Returns the light collection.\n  242          */\n  243:         LightCollection::ConstSharedPtrRef getLightCollection(RenderContext* pContext);\n  244  \n  245          /** Get the light probe or nullptr if it doesn't exist.\n  ...\n  470          std::vector<Material::SharedPtr> mMaterials;        ///< Bound to parameter block\n  471          std::vector<AnimatedObject<Light>> mLights;         ///< Bound to parameter block\n  472:         LightCollection::SharedPtr mpLightCollection;       ///< Bound to parameter block\n  473          LightProbe::SharedPtr mpLightProbe;                 ///< Bound to parameter block\n  474          Texture::SharedPtr mpEnvMap;                        ///< Not bound to anything, not rendered automatically. Can be used to render a skybox\n\n/home/max/dev/Falcor/src/Falcor/Scene/Scene.slang:\n   37  import TextureSampler;\n   38  import Utils.Attributes;\n   39: import Experimental.Scene.Lights.LightCollection;\n   40  import Experimental.Scene.Material.TexLODHelpers;\n   41  \n   ..\n   68      // Lights and camera\n   69      StructuredBuffer<LightData> lights;\n   70:     LightCollection lightCollection;\n   71      LightProbeData lightProbe;\n   72      Texture2D envMap;\n\n119 matches across 25 files\n\n\nSearching 1282 files for \"Scene* pScene\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Raytracing/ShaderTable.h:\n   60          /** Create a new object\n   61          */\n   62:         static SharedPtr create();//RtProgram* pProgram, const Scene* pScene);\n   63  \n   64          /** Update the shader table.\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/AnimationController.cpp:\n   38  }  // namespace\n   39  \n   40:     AnimationController::AnimationController(Scene* pScene, const StaticVertexVector& staticVertexData, const DynamicVertexVector& dynamicVertexData) :\n   41          mpScene(pScene), mLocalMatrices(pScene->mSceneGraph.size()), mInvTransposeGlobalMatrices(pScene->mSceneGraph.size()), mMatricesChanged(pScene->mSceneGraph.size())\n   42      {\n   ..\n   50      }\n   51  \n   52:     AnimationController::UniquePtr AnimationController::create(Scene* pScene, const StaticVertexVector& staticVertexData, const DynamicVertexVector& dynamicVertexData) {\n   53          return UniquePtr(new AnimationController(pScene, staticVertexData, dynamicVertexData));\n   54      }\n\n/home/max/dev/Falcor/src/Falcor/Scene/Animation/AnimationController.h:\n   63          /** Create a new object\n   64          */\n   65:         static UniquePtr create(Scene* pScene, const StaticVertexVector& staticVertexData, const DynamicVertexVector& dynamicVertexData);\n   66          \n   67          /** Add an animation for a mesh\n   ..\n  116      private:\n  117          friend class SceneBuilder;\n  118:         AnimationController(Scene* pScene, const StaticVertexVector& staticVertexData, const DynamicVertexVector& dynamicVertexData);\n  119  \n  120          void allocatePrevWorldMatrixBuffer();\n\n/home/max/dev/Falcor/src/Falcor/Scene/HitInfo.h:\n   40      /** Returns defines needed packing/unpacking a HitInfo struct.\n   41      */\n   42:     static Shader::DefineList getDefines(const Scene* pScene) {\n   43          // Setup bit allocations for encoding the meshInstanceID and primitive indices.\n   44  \n\n/home/max/dev/Falcor/src/Falcor/Scene/Importers/AssimpImporter.cpp:\n  184          public:\n  185              ImporterData(const aiScene* pAiScene, SceneBuilder& sceneBuilder, const SceneBuilder::InstanceMatrices& modelInstances_) : pScene(pAiScene), modelInstances(modelInstances_), builder(sceneBuilder) {}\n  186:             const aiScene* pScene;\n  187  \n  188              SceneBuilder& builder;\n  ...\n  531          bool createMeshes(ImporterData& data)\n  532          {\n  533:             const aiScene* pScene = data.pScene;\n  534              for (uint32_t i = 0; i < pScene->mNumMeshes; i++)\n  535              {\n  ...\n  661          void createBoneList(ImporterData& data)\n  662          {\n  663:             const aiScene* pScene = data.pScene;\n  664              auto& boneMatrices = data.localToBindPoseMatrices;\n  665  \n  ...\n  927          }\n  928  \n  929:         BoneMeshMap createBoneMap(const aiScene* pScene)\n  930          {\n  931              BoneMeshMap boneMap;\n  ...\n  952          }\n  953  \n  954:         MeshInstanceList countMeshInstances(const aiScene* pScene)\n  955          {\n  956              MeshInstanceList meshInstances(pScene->mNumMeshes);\n  ...\n  973          }\n  974  \n  975:         bool validateBones(const aiScene* pScene)\n  976          {\n  977              // Make sure that each bone is only affecting a single mesh.\n  ...\n 1002          }\n 1003  \n 1004:         void verifyScene(const aiScene* pScene)\n 1005          {\n 1006              bool b = true;\n ....\n 1039  \n 1040          Assimp::Importer importer;\n 1041:         const aiScene* pScene = importer.ReadFile(fullpath, assimpFlags);\n 1042  \n 1043          if (pScene == nullptr)\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp:\n  352      }\n  353  \n  354:     void SceneBuilder::createGlobalMatricesBuffer(Scene* pScene)\n  355      {\n  356          pScene->mSceneGraph.resize(mSceneGraph.size());\n  ...\n  363      }\n  364  \n  365:     uint32_t SceneBuilder::createMeshData(Scene* pScene)\n  366      {\n  367          auto& meshData = pScene->mMeshDesc;\n  ...\n  444      }\n  445  \n  446:     void SceneBuilder::calculateMeshBoundingBoxes(Scene* pScene)\n  447      {\n  448          // Calculate mesh bounding boxes\n  ...\n  474      }\n  475  \n  476:     void SceneBuilder::createAnimationController(Scene* pScene)\n  477      {\n  478          pScene->mpAnimationController = AnimationController::create(pScene, mBuffersData.staticData, mBuffersData.dynamicData);\n\n/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.h:\n  221      Vao::SharedPtr createVao(uint16_t drawCount);\n  222  \n  223:     uint32_t createMeshData(Scene* pScene);\n  224:     void createGlobalMatricesBuffer(Scene* pScene);\n  225:     void calculateMeshBoundingBoxes(Scene* pScene);\n  226:     void createAnimationController(Scene* pScene);\n  227      std::string mFilename;\n  228  };\n\n22 matches across 7 files\n\n\nSearching 1282 files for \"UnitTestContext\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.cpp:\n   94          auto startTime = std::chrono::steady_clock::now();\n   95  \n   96:         CPUUnitTestContext cpuCtx;\n   97:         GPUUnitTestContext gpuCtx(pRenderContext);\n   98  \n   99          std::string extraMessage;\n  ...\n  180      ///////////////////////////////////////////////////////////////////////////\n  181  \n  182:     void GPUUnitTestContext::createProgram( const std::string& path,\n  183                                              const std::string& entry,\n  184                                              const Program::DefineList& programDefines,\n  ...\n  196      }\n  197  \n  198:     void GPUUnitTestContext::createVars() {\n  199          // Create shader variables.\n  200          ProgramReflection::SharedConstPtr pReflection = mpProgram->getReflector();\n  ...\n  208      }\n  209  \n  210:     void GPUUnitTestContext::allocateStructuredBuffer(const std::string& name, uint32_t nElements, const void* pInitData, size_t initDataSize) {\n  211          assert(mpVars);\n  212          mStructuredBuffers[name].pBuffer = Buffer::createStructured(mpProgram.get(), name, nElements);\n  ...\n  220      }\n  221  \n  222:     void GPUUnitTestContext::runProgram(const uint3& dimensions) {\n  223          assert(mpVars);\n  224          for (const auto& buffer : mStructuredBuffers) {\n  ...\n  232      }\n  233  \n  234:     void GPUUnitTestContext::unmapBuffer(const char* bufferName) {\n  235          assert(mStructuredBuffers.find(bufferName) != mStructuredBuffers.end());\n  236          \n  ...\n  243      }\n  244  \n  245:     const void* GPUUnitTestContext::mapRawRead(const char* bufferName) {\n  246          assert(mStructuredBuffers.find(bufferName) != mStructuredBuffers.end());\n  247  \n\n/home/max/dev/Falcor/src/Falcor/Testing/UnitTest.h:\n   54      static constexpr int kMaxTestFailures = 25;\n   55  \n   56:     class CPUUnitTestContext;\n   57:     class GPUUnitTestContext;\n   58  \n   59      struct TooManyFailedTestsException : public std::exception { };\n   ..\n   69      };\n   70  \n   71:     using CPUTestFunc = std::function<void(CPUUnitTestContext& ctx)>;\n   72:     using GPUTestFunc = std::function<void(GPUUnitTestContext& ctx)>;\n   73  \n   74      dlldecl void registerCPUTest(const std::string& filename, const std::string& name, const std::string& skipMessage, CPUTestFunc func);\n   ..\n   76      dlldecl int32_t runTests(std::ostream& stream, RenderContext* pRenderContext, const std::string& testFilterRegexp);\n   77  \n   78:     class dlldecl UnitTestContext {\n   79       public:\n   80          /** reportFailure is called with an error message to report a failing\n   ..\n   95      };\n   96  \n   97:     class dlldecl CPUUnitTestContext : public UnitTestContext { };\n   98  \n   99:     class dlldecl GPUUnitTestContext : public UnitTestContext {\n  100       public:\n  101:         GPUUnitTestContext(RenderContext* pContext) : mpContext(pContext) { }\n  102  \n  103          /** createProgram creates a compute program from the source code at the\n  ...\n  207          StreamSink does the former, and if it has passed, it does the latter.)\n  208          In the event of a test failure, passes along the failure message to the\n  209:         provided GPUUnitTestContext's |reportFailure| method.\n  210      */\n  211      class StreamSink {\n  ...\n  218  \n  219          /** Construct a StreamSink for a test context.\n  220:             If a non-nullptr UnitTestContext is provided, the values printed\n  221              will be accumulated and passed to the context's reportFailure()\n  222              method when the StreamSink destructor runs.\n  223          */\n  224:         StreamSink(UnitTestContext* ctx) : mpCtx(ctx) {}\n  225  \n  226          ~StreamSink() {\n  ...\n  268      private:\n  269          std::stringstream mSs;\n  270:         UnitTestContext* mpCtx = nullptr;\n  271      };\n  272  \n  273      template <typename T, typename U>\n  274      inline StreamSink expectEqInternal(T x, const char* xString, U y, const char* yString,\n  275:                                        UnitTestContext& ctx, const char* file, int line) {\n  276          if (x == y) return StreamSink(nullptr);\n  277  \n  ...\n  285      template <typename T, typename U>\n  286      inline StreamSink expectNeInternal(T x, const char* xString, U y, const char* yString,\n  287:                                        UnitTestContext& ctx, const char* file, int line) {\n  288          if (x != y) return StreamSink(nullptr);\n  289  \n  ...\n  297      template <typename T, typename U>\n  298      inline StreamSink expectGeInternal(T x, const char* xString, U y, const char* yString,\n  299:                                        UnitTestContext& ctx, const char* file, int line) {\n  300          if (x >= y) return StreamSink(nullptr);\n  301  \n  ...\n  309      template <typename T, typename U>\n  310      inline StreamSink expectGtInternal(T x, const char* xString, U y, const char* yString,\n  311:                                        UnitTestContext& ctx, const char* file, int line) {\n  312          if (x > y) return StreamSink(nullptr);\n  313  \n  ...\n  321      template <typename T, typename U>\n  322      inline StreamSink expectLeInternal(T x, const char* xString, U y, const char* yString,\n  323:                                        UnitTestContext& ctx, const char* file, int line) {\n  324          if (x <= y) return StreamSink(nullptr);\n  325  \n  ...\n  333      template <typename T, typename U>\n  334      inline StreamSink expectLtInternal(T x, const char* xString, U y, const char* yString,\n  335:                                        UnitTestContext& ctx, const char* file, int line) {\n  336          if (x < y) return StreamSink(nullptr);\n  337  \n  ...\n  344  \n  345      template <typename T>\n  346:     inline StreamSink expectInternal(T x, const char* xString, UnitTestContext& ctx,\n  347                                       const char* file, int line) {\n  348          if (x) return StreamSink(nullptr);\n  ...\n  368  */\n  369  #define CPU_TEST(Name, ...)                                                     \\\n  370:     static void CPUUnitTest##Name(CPUUnitTestContext& ctx);                     \\\n  371      struct CPUUnitTestRegisterer##Name {                                        \\\n  372          CPUUnitTestRegisterer##Name()                                           \\\n  ...\n  376          }                                                                       \\\n  377      } RegisterCPUTest##Name;                                                    \\\n  378:     static void CPUUnitTest##Name(CPUUnitTestContext& ctx) /* over to the user for the braces */\n  379  \n  380  /** Macro to define a GPU unit test. The optional skip message will\n  ...\n  383  */\n  384  #define GPU_TEST(Name, ...)                                                     \\\n  385:     static void GPUUnitTest##Name(GPUUnitTestContext& ctx);                     \\\n  386      struct GPUUnitTestRegisterer##Name {                                        \\\n  387          GPUUnitTestRegisterer##Name()                                           \\\n  ...\n  391          }                                                                       \\\n  392      } RegisterGPUTest##Name;                                                    \\\n  393:     static void GPUUnitTest##Name(GPUUnitTestContext& ctx) /* over to the user for the braces */\n  394  \n  395  /** Macro definitions for the GPU unit testing framework. Note that they\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp:\n   47      The test binds the buffer to a compute program which reads back the data.\n   48  */\n   49: void testBufferReadback(GPUUnitTestContext& ctx, Buffer::CpuAccess cpuAccess) {\n   50      auto pBuf = createTestBuffer(cpuAccess);\n   51  \n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/BufferTests.cpp:\n   42  \n   43          template <Type type>\n   44:         void testBuffer(GPUUnitTestContext& ctx, uint32_t numElems, uint32_t index = 0, uint32_t count = 0)\n   45          {\n   46              numElems = div_round_up(numElems, 256u) * 256u; // Make sure we run full thread groups.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp:\n   46          auto r = [&]() -> uint32_t { return dist(rng); };\n   47  \n   48:         void testRootBuffer(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   49          {\n   50              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp:\n   40          auto r = [&]() -> uint32_t { return dist(rng); };\n   41  \n   42:         void testRootBufferInStruct(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   43          {\n   44              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp:\n   49          };\n   50  \n   51:         void testRootBuffer(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   52          {\n   53              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Sampling/SampleGeneratorTests.cpp:\n   72          }\n   73  \n   74:         void testSampleGenerator(GPUUnitTestContext& ctx, uint32_t type, const double corrThreshold, bool testInstances)\n   75          {\n   76              // Create sample generator.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp:\n   50          std::mt19937 r;\n   51  \n   52:         void test(GPUUnitTestContext& ctx, const std::string& shaderModel, bool useUav)\n   53          {\n   54              Program::DefineList defines = { {\"USE_UAV\", useUav ? \"1\" : \"0\"} };\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp:\n   34          const uint32_t kNumElems = 256;\n   35  \n   36:         void test(GPUUnitTestContext& ctx, const std::string& shaderModel)\n   37          {\n   38              ctx.createProgram(\"Tests/Slang/ShaderModel.cs.slang\", \"main\", Program::DefineList(), Shader::CompilerFlags::None, shaderModel);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp:\n   45      namespace\n   46      {\n   47:         void testEnum(GPUUnitTestContext& ctx, const std::string& shaderModel)\n   48          {\n   49              ctx.createProgram(\"Tests/Slang/SlangTests.cs.slang\", \"testEnum\", Program::DefineList(), Shader::CompilerFlags::None, shaderModel);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/TraceRayFlags.cpp:\n   51  }\n   52  #endif\n   53: void testRayFlags(GPUUnitTestContext& ctx, uint32_t expected, const Program::DefineList& defines, const std::string& shaderModel) {\n   54      ctx.createProgram(\"Tests/Slang/TraceRayFlags.cs.slang\", \"testRayFlags\", defines, Shader::CompilerFlags::None, shaderModel);\n   55      ctx.allocateStructuredBuffer(\"result\", 1);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/BitonicSortTests.cpp:\n   45          }\n   46  \n   47:         void testGpuSort(GPUUnitTestContext& ctx, BitonicSort* pSort, const uint32_t n, const uint32_t chunkSize)\n   48          {\n   49              // Create a buffer of random data to use as test data.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/HalfUtilsTests.cpp:\n  175          }\n  176  \n  177:         std::vector<float> generateFP16TestData(UnitTestContext& ctx)\n  178          {\n  179              std::vector<float> data;\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/MathHelpersTests.cpp:\n   43          };\n   44  \n   45:         void runBBoxTestComputeShader(GPUUnitTestContext& ctx, const BBoxTestCase* testCases, int nTests, const char* entrypoint)\n   46          {\n   47              Buffer::SharedPtr pOriginBuffer = Buffer::createTyped<float3>(nTests);\n   ..\n   67          }\n   68  \n   69:         void testKnownBBoxes(GPUUnitTestContext& ctx, const char* entrypoint)\n   70          {\n   71              // Generate test data...\n   ..\n  112          }\n  113  \n  114:         void testRandomBBoxes(GPUUnitTestContext& ctx, const char* entrypoint)\n  115          {\n  116              // Generate test data.\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/ParallelReductionTests.cpp:\n   87  \n   88          template<typename DataType, typename RefType>\n   89:         void testReduction(GPUUnitTestContext& ctx, const ComputeParallelReduction::SharedPtr& pReduction, ResourceFormat format, uint32_t width, uint32_t height)\n   90          {\n   91              // Create random test data.\n   ..\n  208          }\n  209  \n  210:         void testReduction(GPUUnitTestContext& ctx, const ComputeParallelReduction::SharedPtr& pReduction, ResourceFormat format, uint32_t width, uint32_t height)\n  211          {\n  212              const FormatType type = getFormatType(format);\n\n/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/PrefixSumTests.cpp:\n   49          }\n   50  \n   51:         void testPrefixSum(GPUUnitTestContext& ctx, const PrefixSum::SharedPtr& pPrefixSum, uint32_t numElems)\n   52          {\n   53              // Create a buffer of random data to use as test data.\n\n51 matches across 17 files\n\n\nSearching 1282 files for \"FrameRate\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Renderer.h:\n   35  \n   36  class Clock;\n   37: class FrameRate;\n   38  \n   39  /** Sample configuration\n   ..\n   64      virtual Clock& getGlobalClock() = 0;\n   65  \n   66:     /** Get the global FrameRate object\n   67      */\n   68:     virtual FrameRate& getFrameRate() = 0;\n   69  \n   70      /** Resize the swap-chain buffers*/\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.cpp:\n   51  Sample::Sample(Device::SharedPtr pDevice, IRenderer::UniquePtr& pRenderer) : mpRenderer(std::move(pRenderer)), mpDevice(pDevice) {\n   52      mClock = nullptr;\n   53:     mFrameRate = nullptr;\n   54  }\n   55  \n   ..\n  124                          mVsyncOn = !mVsyncOn;\n  125                          mpDevice->toggleVSync(mVsyncOn);\n  126:                         mFrameRate.reset();\n  127                          mClock.setTime(0);\n  128                          break;\n  ...\n  288          pBar = nullptr;\n  289  \n  290:         mFrameRate->reset();\n  291          mpWindow->msgLoop();\n  292  \n  ...\n  418              }\n  419  \n  420:             mpGui->render(getRenderContext(), mpDevice->getSwapChainFbo(), (float)mFrameRate.getLastFrameTime());\n  421          }\n  422      }\n  ...\n  429  \n  430          mClock.tick();\n  431:         mFrameRate.newFrame();\n  432          if (mVideoCapture.fixedTimeDelta) { mClock.setTime(mVideoCapture.currentTime); }\n  433  \n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.h:\n   39  #include \"Renderer.h\"\n   40  #include \"Falcor/Utils/ArgList.h\"\n   41: #include \"Falcor/Utils/Timing/FrameRate.h\"\n   42  #include \"Falcor/Utils/UI/Gui.h\"\n   43  #include \"Falcor/Utils/UI/TextRenderer.h\"\n   ..\n   81      Window* getWindow() override { return mpWindow.get(); }\n   82      Clock& getGlobalClock() override { return mClock; }\n   83:     FrameRate& getFrameRate() override { return mFrameRate; }\n   84      void resizeSwapChain(uint32_t width, uint32_t height) override;\n   85      bool isKeyPressed(const KeyboardEvent::Key& key) override;\n   ..\n  132      bool mCaptureScreen = false;\n  133      \n  134:     FrameRate *mFrameRate;\n  135      Clock *mClock;\n  136  \n\n/home/max/dev/Falcor/src/Falcor/Falcor.h:\n  148  #include \"Falcor/Utils/Timing/CpuTimer.h\"\n  149  #include \"Falcor/Utils/Timing/Clock.h\"\n  150: #include \"Falcor/Utils/Timing/FrameRate.h\"\n  151  #include \"Falcor/Utils/Timing/Profiler.h\"\n  152  #include \"Falcor/Utils/UI/Font.h\"\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj:\n  271      <ClInclude Include=\"Utils\\Timing\\Clock.h\" />\n  272      <ClInclude Include=\"Utils\\Timing\\CpuTimer.h\" />\n  273:     <ClInclude Include=\"Utils\\Timing\\FrameRate.h\" />\n  274      <ClInclude Include=\"Utils\\Timing\\Profiler.h\" />\n  275      <ClInclude Include=\"Utils\\UI\\DebugDrawer.h\" />\n  ...\n  651      <ClCompile Include=\"Utils\\Threading.cpp\" />\n  652      <ClCompile Include=\"Utils\\Timing\\Clock.cpp\" />\n  653:     <ClCompile Include=\"Utils\\Timing\\FrameRate.cpp\" />\n  654      <ClCompile Include=\"Utils\\Timing\\Profiler.cpp\" />\n  655      <ClCompile Include=\"Utils\\UI\\DebugDrawer.cpp\" />\n\n/home/max/dev/Falcor/src/Falcor/Falcor.vcxproj.filters:\n  196        <Filter>Utils\\Timing</Filter>\n  197      </ClInclude>\n  198:     <ClInclude Include=\"Utils\\Timing\\FrameRate.h\">\n  199        <Filter>Utils\\Timing</Filter>\n  200      </ClInclude>\n  ...\n 1054        <Filter>Utils</Filter>\n 1055      </ClCompile>\n 1056:     <ClCompile Include=\"Utils\\Timing\\FrameRate.cpp\">\n 1057        <Filter>Utils\\Timing</Filter>\n 1058      </ClCompile>\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/FrameRate.cpp:\n   27   **************************************************************************/\n   28  #include \"stdafx.h\"\n   29: #include \"Falcor/Utils/Timing/FrameRate.h\"\n   30  #include <sstream>\n   31  \n   32  namespace Falcor {\n   33  \n   34: std::string FrameRate::getMsg(bool vsyncOn) const {\n   35      float msPerFrame = (float)getAverageFrameTime();\n   36      std::stringstream strstr;\n   ..\n   43  }  // namespace Falcor\n   44  \n   45: const uint64_t Falcor::FrameRate::sFrameWindow = 60;\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/FrameRate.h:\n   39  /** Framerate calculator\n   40  */\n   41: class dlldecl FrameRate {\n   42  public:\n   43:     FrameRate(std::shared_ptr<Device> pDevice) {\n   44          mClock = new Clock(pDevice);\n   45          mFrameTimes.resize(sFrameWindow);\n   ..\n   47      }\n   48  \n   49:     ~FrameRate() {\n   50          delete mClock;\n   51      }\n   ..\n   99  };\n  100  \n  101: inline std::string to_string(const FrameRate& fr, bool vsyncOn = false) { return fr.getMsg(vsyncOn); }\n  102  \n  103  }  // namespace Falcor\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Profiler/TimingCapture.cpp:\n   83          if (!mFrameTimeFile.is_open()) return;\n   84  \n   85:         // The FrameRate object is updated at the start of each frame, the first valid time is available on the second frame.\n   86:         auto& frameRate = gpFramework->getFrameRate();\n   87          if (frameRate.getFrameCount() > 1)\n   88              mFrameTimeFile << frameRate.getLastFrameTime() << std::endl;\n\n/home/max/dev/Falcor/src/Mogwai/MogwaiSettings.cpp:\n   57  void showFps(Gui* pGui) {\n   58      Gui::Window w(pGui, \"##FPS\", { 0, 0 }, { 10, 25 }, Gui::WindowFlags::AllowMove | Gui::WindowFlags::AutoResize | Gui::WindowFlags::SetFocus);\n   59:     std::string msg = gpFramework->getFrameRate().getMsg(gpFramework->isVsyncEnabled());\n   60      w.text(msg);\n   61  }\n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n  129      }\n  130  \n  131:     TextRenderer::render(pRenderContext, gpFramework->getFrameRate().getMsg(), pTargetFbo, { 20, 20 });\n  132  }\n  133  \n\n/home/max/dev/Falcor/src/Tools/RenderGraphEditor/RenderGraphEditor.cpp:\n  265  \n  266      if (mUpdateFilePath.size()) {\n  267:         mRenderGraphUIs[mCurrentGraphIndex].writeUpdateScriptToFile(pRenderContext, mUpdateFilePath, (float)gpFramework->getFrameRate().getLastFrameTime());\n  268      }\n  269  \n\n32 matches across 12 files\n\n\nSearching 1282 files for \"getGlobalClock\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.h:\n   81      Window* getWindow() override { return mpWindow.get(); }\n   82      \n   83:     //Clock& getGlobalClock() override { return mClock; }\n   84  \n   85      Clock& getClock() override { return *mClock; }\n\n/home/max/dev/Falcor/src/Falcor/Experimental/Scene/Lights/LightCollection.cpp:\n   73              if (mpScene->getAnimationController()->getMeshAnimationCount(instanceData.meshID) > 0) {\n   74                  bool hasAnimation = mpScene->getAnimationController()->getActiveAnimation(instanceData.meshID) != AnimationController::kBindPoseAnimationId;\n   75:                 bool isPaused = gpFramework->getGlobalClock().isPaused();\n   76                  if (hasAnimation && !isPaused) updateFlags |= UpdateFlags::AnimationChanged;\n   77              }\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/CaptureTrigger.cpp:\n  101          RenderGraph* pGraph = mpRenderer->getActiveGraph();\n  102          if (!pGraph) return;\n  103:         uint64_t frameId = gpFramework->getGlobalClock().getFrame();\n  104          if (mGraphRanges.find(pGraph) == mGraphRanges.end()) return;\n  105          const auto& ranges = mGraphRanges.at(pGraph);\n  ...\n  127      {\n  128          if (!mCurrent.pGraph) return;\n  129:         uint64_t frameId = gpFramework->getGlobalClock().getFrame();\n  130          const auto& ranges = mGraphRanges.at(mCurrent.pGraph);\n  131  \n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/FrameCapture.cpp:\n  125              Texture* pTex = pGraph->getOutput(i)->asTexture().get();\n  126              assert(pTex);\n  127:             std::string filename = getOutputNamePrefix(pGraph->getOutputName(i)) + to_string(gpFramework->getGlobalClock().getFrame()) + \".\";;\n  128              auto ext = Bitmap::getFileExtFromResourceFormat(pTex->getFormat());\n  129              filename += ext;\n  ...\n  157          auto pGraph = mpRenderer->getActiveGraph();\n  158          if (!pGraph) return;\n  159:         uint64_t frameID = gpFramework->getGlobalClock().getFrame();\n  160          triggerFrame(gpDevice->getRenderContext(), pGraph, frameID);\n  161      }\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  419  \n  420      for (auto& g : mGraphs) g.pGraph->setScene(mpScene);\n  421:     gpFramework->getGlobalClock().setTime(0);\n  422  }\n  423  \n  ...\n  492          // Update scene and camera.\n  493          if (mpScene) {\n  494:             mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  495          }\n  496  \n\n/home/max/dev/Falcor/src/Mogwai/MogwaiScripting.cpp:\n  105  \n  106      s += \"# Time Settings\\n\";\n  107:     s += gpFramework->getGlobalClock().getScript(kTimeVar) + \"\\n\";\n  108  \n  109      for (auto& pe : mpExtensions) {\n  ...\n  138      Extension::Bindings b(m, c);\n  139      b.addGlobalObject(kRendererVar, this, \"The engine\");\n  140:     b.addGlobalObject(kTimeVar, &gpFramework->getGlobalClock(), \"Time Utilities\");\n  141      for (auto& pe : mpExtensions) pe->scriptBindings(b);\n  142      mGlobalHelpMessage = prepareHelpMessage(b.mGlobalObjects);\n\n/home/max/dev/Falcor/src/Mogwai/MogwaiSettings.cpp:\n  132      Gui::Window w(pGui, \"Time\", mShowTime, { 0, 0 }, { 350, 25 }, Gui::WindowFlags::AllowMove | Gui::WindowFlags::AutoResize | Gui::WindowFlags::ShowTitleBar | Gui::WindowFlags::CloseButton);\n  133  \n  134:     Clock& clock = gpFramework->getGlobalClock();\n  135      clock.renderUI(w);\n  136      w.separator(2);\n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp:\n   61  {\n   62      mpArrowTex = Texture::create2D(16, 16, ResourceFormat::R8Unorm, 1, Texture::kMaxPossible, kArrowArray);\n   63:     mClock = gpFramework->getGlobalClock();\n   64      createProgram();\n   65  }\n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n  124      if(mpScene)\n  125      {\n  126:         mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  127          if (mRayTrace) renderRT(pRenderContext, pTargetFbo.get());\n  128          else mpRasterPass->renderScene(pRenderContext, pTargetFbo);\n\n/home/max/dev/Falcor/src/Samples/ModelViewer/ModelViewer.cpp:\n  165  \n  166      if(mpScene) {\n  167:         mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  168  \n  169          // Set render state\n\n/home/max/dev/Falcor/src/Samples/ShaderToy/ShaderToy.cpp:\n   58      float height = (float)pTargetFbo->getHeight();\n   59      mpMainPass[\"ToyCB\"][\"iResolution\"] = float2(width, height);\n   60:     mpMainPass[\"ToyCB\"][\"iGlobalTime\"] = (float)gpFramework->getGlobalClock().getTime();\n   61  \n   62      // run final pass\n\n15 matches across 11 files\n\n\nSearching 1282 files for \"getGlobalClock\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.h:\n   81      Window* getWindow() override { return mpWindow.get(); }\n   82      \n   83:     //Clock& getGlobalClock() override { return mClock; }\n   84  \n   85      Clock& getClock() override { return *mClock; }\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/CaptureTrigger.cpp:\n  101          RenderGraph* pGraph = mpRenderer->getActiveGraph();\n  102          if (!pGraph) return;\n  103:         uint64_t frameId = gpFramework->getGlobalClock().getFrame();\n  104          if (mGraphRanges.find(pGraph) == mGraphRanges.end()) return;\n  105          const auto& ranges = mGraphRanges.at(pGraph);\n  ...\n  127      {\n  128          if (!mCurrent.pGraph) return;\n  129:         uint64_t frameId = gpFramework->getGlobalClock().getFrame();\n  130          const auto& ranges = mGraphRanges.at(mCurrent.pGraph);\n  131  \n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/FrameCapture.cpp:\n  125              Texture* pTex = pGraph->getOutput(i)->asTexture().get();\n  126              assert(pTex);\n  127:             std::string filename = getOutputNamePrefix(pGraph->getOutputName(i)) + to_string(gpFramework->getGlobalClock().getFrame()) + \".\";;\n  128              auto ext = Bitmap::getFileExtFromResourceFormat(pTex->getFormat());\n  129              filename += ext;\n  ...\n  157          auto pGraph = mpRenderer->getActiveGraph();\n  158          if (!pGraph) return;\n  159:         uint64_t frameID = gpFramework->getGlobalClock().getFrame();\n  160          triggerFrame(gpDevice->getRenderContext(), pGraph, frameID);\n  161      }\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  419  \n  420      for (auto& g : mGraphs) g.pGraph->setScene(mpScene);\n  421:     gpFramework->getGlobalClock().setTime(0);\n  422  }\n  423  \n  ...\n  492          // Update scene and camera.\n  493          if (mpScene) {\n  494:             mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  495          }\n  496  \n\n/home/max/dev/Falcor/src/Mogwai/MogwaiScripting.cpp:\n  105  \n  106      s += \"# Time Settings\\n\";\n  107:     s += gpFramework->getGlobalClock().getScript(kTimeVar) + \"\\n\";\n  108  \n  109      for (auto& pe : mpExtensions) {\n  ...\n  138      Extension::Bindings b(m, c);\n  139      b.addGlobalObject(kRendererVar, this, \"The engine\");\n  140:     b.addGlobalObject(kTimeVar, &gpFramework->getGlobalClock(), \"Time Utilities\");\n  141      for (auto& pe : mpExtensions) pe->scriptBindings(b);\n  142      mGlobalHelpMessage = prepareHelpMessage(b.mGlobalObjects);\n\n/home/max/dev/Falcor/src/Mogwai/MogwaiSettings.cpp:\n  132      Gui::Window w(pGui, \"Time\", mShowTime, { 0, 0 }, { 350, 25 }, Gui::WindowFlags::AllowMove | Gui::WindowFlags::AutoResize | Gui::WindowFlags::ShowTitleBar | Gui::WindowFlags::CloseButton);\n  133  \n  134:     Clock& clock = gpFramework->getGlobalClock();\n  135      clock.renderUI(w);\n  136      w.separator(2);\n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp:\n   61  {\n   62      mpArrowTex = Texture::create2D(16, 16, ResourceFormat::R8Unorm, 1, Texture::kMaxPossible, kArrowArray);\n   63:     mClock = gpFramework->getGlobalClock();\n   64      createProgram();\n   65  }\n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n  124      if(mpScene)\n  125      {\n  126:         mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  127          if (mRayTrace) renderRT(pRenderContext, pTargetFbo.get());\n  128          else mpRasterPass->renderScene(pRenderContext, pTargetFbo);\n\n/home/max/dev/Falcor/src/Samples/ModelViewer/ModelViewer.cpp:\n  165  \n  166      if(mpScene) {\n  167:         mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  168  \n  169          // Set render state\n\n/home/max/dev/Falcor/src/Samples/ShaderToy/ShaderToy.cpp:\n   58      float height = (float)pTargetFbo->getHeight();\n   59      mpMainPass[\"ToyCB\"][\"iResolution\"] = float2(width, height);\n   60:     mpMainPass[\"ToyCB\"][\"iGlobalTime\"] = (float)gpFramework->getGlobalClock().getTime();\n   61  \n   62      // run final pass\n\n14 matches across 10 files\n\n\nSearching 1282 files for \"getGlobalClock\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.h:\n   81      Window* getWindow() override { return mpWindow.get(); }\n   82      \n   83:     //Clock& getGlobalClock() override { return mClock; }\n   84  \n   85      Clock& getClock() override { return *mClock; }\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/FrameCapture.cpp:\n  125              Texture* pTex = pGraph->getOutput(i)->asTexture().get();\n  126              assert(pTex);\n  127:             std::string filename = getOutputNamePrefix(pGraph->getOutputName(i)) + to_string(gpFramework->getGlobalClock().getFrame()) + \".\";;\n  128              auto ext = Bitmap::getFileExtFromResourceFormat(pTex->getFormat());\n  129              filename += ext;\n  ...\n  157          auto pGraph = mpRenderer->getActiveGraph();\n  158          if (!pGraph) return;\n  159:         uint64_t frameID = gpFramework->getGlobalClock().getFrame();\n  160          triggerFrame(gpDevice->getRenderContext(), pGraph, frameID);\n  161      }\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  419  \n  420      for (auto& g : mGraphs) g.pGraph->setScene(mpScene);\n  421:     gpFramework->getGlobalClock().setTime(0);\n  422  }\n  423  \n  ...\n  492          // Update scene and camera.\n  493          if (mpScene) {\n  494:             mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  495          }\n  496  \n\n/home/max/dev/Falcor/src/Mogwai/MogwaiScripting.cpp:\n  105  \n  106      s += \"# Time Settings\\n\";\n  107:     s += gpFramework->getGlobalClock().getScript(kTimeVar) + \"\\n\";\n  108  \n  109      for (auto& pe : mpExtensions) {\n  ...\n  138      Extension::Bindings b(m, c);\n  139      b.addGlobalObject(kRendererVar, this, \"The engine\");\n  140:     b.addGlobalObject(kTimeVar, &gpFramework->getGlobalClock(), \"Time Utilities\");\n  141      for (auto& pe : mpExtensions) pe->scriptBindings(b);\n  142      mGlobalHelpMessage = prepareHelpMessage(b.mGlobalObjects);\n\n/home/max/dev/Falcor/src/Mogwai/MogwaiSettings.cpp:\n  132      Gui::Window w(pGui, \"Time\", mShowTime, { 0, 0 }, { 350, 25 }, Gui::WindowFlags::AllowMove | Gui::WindowFlags::AutoResize | Gui::WindowFlags::ShowTitleBar | Gui::WindowFlags::CloseButton);\n  133  \n  134:     Clock& clock = gpFramework->getGlobalClock();\n  135      clock.renderUI(w);\n  136      w.separator(2);\n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp:\n   61  {\n   62      mpArrowTex = Texture::create2D(16, 16, ResourceFormat::R8Unorm, 1, Texture::kMaxPossible, kArrowArray);\n   63:     mClock = gpFramework->getGlobalClock();\n   64      createProgram();\n   65  }\n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n  124      if(mpScene)\n  125      {\n  126:         mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  127          if (mRayTrace) renderRT(pRenderContext, pTargetFbo.get());\n  128          else mpRasterPass->renderScene(pRenderContext, pTargetFbo);\n\n/home/max/dev/Falcor/src/Samples/ModelViewer/ModelViewer.cpp:\n  165  \n  166      if(mpScene) {\n  167:         mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  168  \n  169          // Set render state\n\n/home/max/dev/Falcor/src/Samples/ShaderToy/ShaderToy.cpp:\n   58      float height = (float)pTargetFbo->getHeight();\n   59      mpMainPass[\"ToyCB\"][\"iResolution\"] = float2(width, height);\n   60:     mpMainPass[\"ToyCB\"][\"iGlobalTime\"] = (float)gpFramework->getGlobalClock().getTime();\n   61  \n   62      // run final pass\n\n12 matches across 9 files\n\n\nSearching 1282 files for \"getGlobalClock\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Core/Sample.h:\n   81      Window* getWindow() override { return mpWindow.get(); }\n   82      \n   83:     //Clock& getGlobalClock() override { return mClock; }\n   84  \n   85      Clock& getClock() override { return *mClock; }\n\n/home/max/dev/Falcor/src/Mogwai/Extensions/Capture/FrameCapture.cpp:\n  157          auto pGraph = mpRenderer->getActiveGraph();\n  158          if (!pGraph) return;\n  159:         uint64_t frameID = gpFramework->getGlobalClock().getFrame();\n  160          triggerFrame(gpDevice->getRenderContext(), pGraph, frameID);\n  161      }\n\n/home/max/dev/Falcor/src/Mogwai/Mogwai.cpp:\n  419  \n  420      for (auto& g : mGraphs) g.pGraph->setScene(mpScene);\n  421:     gpFramework->getGlobalClock().setTime(0);\n  422  }\n  423  \n  ...\n  492          // Update scene and camera.\n  493          if (mpScene) {\n  494:             mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  495          }\n  496  \n\n/home/max/dev/Falcor/src/Mogwai/MogwaiScripting.cpp:\n  105  \n  106      s += \"# Time Settings\\n\";\n  107:     s += gpFramework->getGlobalClock().getScript(kTimeVar) + \"\\n\";\n  108  \n  109      for (auto& pe : mpExtensions) {\n  ...\n  138      Extension::Bindings b(m, c);\n  139      b.addGlobalObject(kRendererVar, this, \"The engine\");\n  140:     b.addGlobalObject(kTimeVar, &gpFramework->getGlobalClock(), \"Time Utilities\");\n  141      for (auto& pe : mpExtensions) pe->scriptBindings(b);\n  142      mGlobalHelpMessage = prepareHelpMessage(b.mGlobalObjects);\n\n/home/max/dev/Falcor/src/Mogwai/MogwaiSettings.cpp:\n  132      Gui::Window w(pGui, \"Time\", mShowTime, { 0, 0 }, { 350, 25 }, Gui::WindowFlags::AllowMove | Gui::WindowFlags::AutoResize | Gui::WindowFlags::ShowTitleBar | Gui::WindowFlags::CloseButton);\n  133  \n  134:     Clock& clock = gpFramework->getGlobalClock();\n  135      clock.renderUI(w);\n  136      w.separator(2);\n\n/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp:\n   61  {\n   62      mpArrowTex = Texture::create2D(16, 16, ResourceFormat::R8Unorm, 1, Texture::kMaxPossible, kArrowArray);\n   63:     mClock = gpFramework->getGlobalClock();\n   64      createProgram();\n   65  }\n\n/home/max/dev/Falcor/src/Samples/HelloDXR/HelloDXR.cpp:\n  124      if(mpScene)\n  125      {\n  126:         mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  127          if (mRayTrace) renderRT(pRenderContext, pTargetFbo.get());\n  128          else mpRasterPass->renderScene(pRenderContext, pTargetFbo);\n\n/home/max/dev/Falcor/src/Samples/ModelViewer/ModelViewer.cpp:\n  165  \n  166      if(mpScene) {\n  167:         mpScene->update(pRenderContext, gpFramework->getGlobalClock().getTime());\n  168  \n  169          // Set render state\n\n/home/max/dev/Falcor/src/Samples/ShaderToy/ShaderToy.cpp:\n   58      float height = (float)pTargetFbo->getHeight();\n   59      mpMainPass[\"ToyCB\"][\"iResolution\"] = float2(width, height);\n   60:     mpMainPass[\"ToyCB\"][\"iGlobalTime\"] = (float)gpFramework->getGlobalClock().getTime();\n   61  \n   62      // run final pass\n\n11 matches across 9 files\n\n\nSearching 1282 files for \"_profileEvent\" (case sensitive)\n\n/home/max/dev/Falcor/src/Falcor/Utils/Timing/Profiler.h:\n  189  \n  190  #if _PROFILING_ENABLED\n  191: #define PROFILE_ALL_FLAGS(_name) Falcor::ProfilerEvent _profileEvent##__LINE__(_name)\n  192: #define PROFILE_SOME_FLAGS(_name, _flags) Falcor::ProfilerEvent _profileEvent##__LINE__(_name, _flags)\n  193  \n  194  #define GET_PROFILE(_1, _2, NAME, ...) NAME\n\n2 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 76983,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/Mogwai/Data/ForwardRenderer.py",
			"settings":
			{
				"buffer_size": 1872,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Data/BSDFViewer.py",
			"settings":
			{
				"buffer_size": 634,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/Include/BaseTypes.h",
			"settings":
			{
				"buffer_size": 18643,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp",
			"settings":
			{
				"buffer_size": 477356,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Raster.slang",
			"settings":
			{
				"buffer_size": 4526,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang",
			"settings":
			{
				"buffer_size": 7187,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/ShadingData.slang",
			"settings":
			{
				"buffer_size": 15181,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Antialiasing/TAA/TAA.ps.slang",
			"settings":
			{
				"buffer_size": 5743,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.cpp",
			"settings":
			{
				"buffer_size": 18635,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h",
			"settings":
			{
				"buffer_size": 11295,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp",
			"settings":
			{
				"buffer_size": 41661,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.h",
			"settings":
			{
				"buffer_size": 12420,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ParallelReduction.ps.slang",
			"settings":
			{
				"buffer_size": 4191,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewerParams.slang",
			"settings":
			{
				"buffer_size": 6511,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/MachineIndependent/ParseHelper.cpp",
			"settings":
			{
				"buffer_size": 364782,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/SPIRV/SpvBuilder.cpp",
			"settings":
			{
				"buffer_size": 105150,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/slang-ir.cpp",
			"settings":
			{
				"buffer_size": 150177,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/SPIRV/SpvBuilder.h",
			"settings":
			{
				"buffer_size": 35460,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang-glslang/slang-glslang.cpp",
			"settings":
			{
				"buffer_size": 18679,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/spirv-tools/source/spirv_target_env.cpp",
			"settings":
			{
				"buffer_size": 10524,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/spirv-tools/CHANGES",
			"settings":
			{
				"buffer_size": 47890,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.cpp",
			"settings":
			{
				"buffer_size": 23587,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneTypes.slang",
			"settings":
			{
				"buffer_size": 5249,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/slang-type-layout.cpp",
			"settings":
			{
				"buffer_size": 149248,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/slang-type-layout.h",
			"settings":
			{
				"buffer_size": 34158,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/slang.h",
			"settings":
			{
				"buffer_size": 132132,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glm/test/core/core_type_aligned.cpp",
			"settings":
			{
				"buffer_size": 5440,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Formats.cpp",
			"settings":
			{
				"buffer_size": 19719,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glm/glm/gtx/compatibility.hpp",
			"settings":
			{
				"buffer_size": 14979,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKFormats.cpp",
			"settings":
			{
				"buffer_size": 10446,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/glslang/Include/intermediate.h",
			"settings":
			{
				"buffer_size": 54763,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/docs/language-reference/04-types.md",
			"settings":
			{
				"buffer_size": 14365,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 4705,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp",
			"settings":
			{
				"buffer_size": 339007,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/glslang/Test/100.frag",
			"settings":
			{
				"buffer_size": 4744,
				"line_ending": "Windows"
			}
		},
		{
			"file": "third_party/slang/external/glext.h",
			"settings":
			{
				"buffer_size": 811328,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/docs/wave-intrinsics.md",
			"settings":
			{
				"buffer_size": 13145,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.cpp",
			"settings":
			{
				"buffer_size": 4278,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp",
			"settings":
			{
				"buffer_size": 8904,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cs.slang",
			"settings":
			{
				"buffer_size": 3086,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/ParamBlockDefinition.slang",
			"settings":
			{
				"buffer_size": 2225,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
			"settings":
			{
				"buffer_size": 8252,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphIR.cpp",
			"settings":
			{
				"buffer_size": 5922,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphIR.h",
			"settings":
			{
				"buffer_size": 3409,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/AssimpImporter.cpp",
			"settings":
			{
				"buffer_size": 44987,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/AssimpImporter.h",
			"settings":
			{
				"buffer_size": 2484,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/PythonImporter.h",
			"settings":
			{
				"buffer_size": 2145,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.h",
			"settings":
			{
				"buffer_size": 11607,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
			"settings":
			{
				"buffer_size": 4312,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/SampleGenerators/StratifiedSamplePattern.h",
			"settings":
			{
				"buffer_size": 3466,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.h",
			"settings":
			{
				"buffer_size": 3159,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/SampleGenerators/CPUSampleGenerator.h",
			"settings":
			{
				"buffer_size": 2791,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GraphicsStateObject.h",
			"settings":
			{
				"buffer_size": 6433,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GraphicsStateObject.cpp",
			"settings":
			{
				"buffer_size": 4274,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
			"settings":
			{
				"buffer_size": 5357,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeStateObject.h",
			"settings":
			{
				"buffer_size": 3496,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvProbe.cpp",
			"settings":
			{
				"buffer_size": 6616,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeContext.h",
			"settings":
			{
				"buffer_size": 3967,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuTimer.h",
			"settings":
			{
				"buffer_size": 3787,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/LowLevelContextData.h",
			"settings":
			{
				"buffer_size": 3656,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Profiler.h",
			"settings":
			{
				"buffer_size": 8484,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Windows/Windows.cpp",
			"settings":
			{
				"buffer_size": 26025,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
			"settings":
			{
				"buffer_size": 139342,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/vulkan/render-vk.cpp",
			"settings":
			{
				"buffer_size": 99401,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgramVarsHelper.cpp",
			"settings":
			{
				"buffer_size": 6214,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/FalcorD3D12.h",
			"settings":
			{
				"buffer_size": 9709,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.cpp",
			"settings":
			{
				"buffer_size": 8771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.slang",
			"settings":
			{
				"buffer_size": 2520,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/VisibilityPass.ps.slang",
			"settings":
			{
				"buffer_size": 2953,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ToneMapper/ToneMapping.ps.slang",
			"settings":
			{
				"buffer_size": 5616,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ToneMapper/Luminance.ps.slang",
			"settings":
			{
				"buffer_size": 2106,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/PythonImporter.cpp",
			"settings":
			{
				"buffer_size": 3931,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/SceneImporter.cpp",
			"settings":
			{
				"buffer_size": 36435,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Importers/SceneImporter.h",
			"settings":
			{
				"buffer_size": 2157,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.h",
			"settings":
			{
				"buffer_size": 12423,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/GraphicsProgram.h",
			"settings":
			{
				"buffer_size": 3809,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ComputeProgram.h",
			"settings":
			{
				"buffer_size": 3818,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/GraphicsProgram.cpp",
			"settings":
			{
				"buffer_size": 2616,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.slang",
			"settings":
			{
				"buffer_size": 5388,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/ArgList.h",
			"settings":
			{
				"buffer_size": 4051,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.cpp",
			"settings":
			{
				"buffer_size": 22921,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/stdafx.h",
			"settings":
			{
				"buffer_size": 1851,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Renderer.h",
			"settings":
			{
				"buffer_size": 6779,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassLibrary.cpp",
			"settings":
			{
				"buffer_size": 11235,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassLibrary.h",
			"settings":
			{
				"buffer_size": 5360,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/UserInput.h",
			"settings":
			{
				"buffer_size": 7116,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Externals/GLM/glm/gtx/compatibility.hpp",
			"settings":
			{
				"buffer_size": 14969,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.h",
			"settings":
			{
				"buffer_size": 7503,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.h",
			"settings":
			{
				"buffer_size": 26357,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Window.cpp",
			"settings":
			{
				"buffer_size": 17937,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Window.h",
			"settings":
			{
				"buffer_size": 5627,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/ArgList.cpp",
			"settings":
			{
				"buffer_size": 6269,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/AlignedAllocator.h",
			"settings":
			{
				"buffer_size": 6544,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.h",
			"settings":
			{
				"buffer_size": 7620,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cpp",
			"settings":
			{
				"buffer_size": 6996,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/DebugPasses/InvalidPixelDetectionTests.cpp",
			"settings":
			{
				"buffer_size": 3746,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/ShadingUtils/ShadingUtilsTests.cpp",
			"settings":
			{
				"buffer_size": 12331,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Testing/UnitTest.h",
			"settings":
			{
				"buffer_size": 18208,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Testing/UnitTest.cpp",
			"settings":
			{
				"buffer_size": 11972,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ComputeProgram.cpp",
			"settings":
			{
				"buffer_size": 2634,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp",
			"settings":
			{
				"buffer_size": 6233,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cs.slang",
			"settings":
			{
				"buffer_size": 1913,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Resource.cpp",
			"settings":
			{
				"buffer_size": 5154,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.h",
			"settings":
			{
				"buffer_size": 11439,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RenderContext.cpp",
			"settings":
			{
				"buffer_size": 5599,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RasterizerState.h",
			"settings":
			{
				"buffer_size": 7490,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RasterizerState.cpp",
			"settings":
			{
				"buffer_size": 2247,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRasterizerState.cpp",
			"settings":
			{
				"buffer_size": 2034,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/QueryHeap.h",
			"settings":
			{
				"buffer_size": 3576,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Formats.h",
			"settings":
			{
				"buffer_size": 13822,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.h",
			"settings":
			{
				"buffer_size": 19233,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/EnvProbe.h",
			"settings":
			{
				"buffer_size": 3717,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1908,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Extensions/Capture/CaptureTrigger.cpp",
			"settings":
			{
				"buffer_size": 7579,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Extensions/Capture/VideoCapture.cpp",
			"settings":
			{
				"buffer_size": 9655,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Extensions/Capture/VideoCapture.h",
			"settings":
			{
				"buffer_size": 2996,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Extensions/Capture/FrameCapture.cpp",
			"settings":
			{
				"buffer_size": 6569,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Extensions/Capture/FrameCapture.h",
			"settings":
			{
				"buffer_size": 2710,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/RenderGraphEditor/RenderGraphEditor.cpp",
			"settings":
			{
				"buffer_size": 20892,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Externals/dear_imgui_addons/imguinodegrapheditor/imguinodegrapheditor.h",
			"settings":
			{
				"buffer_size": 47853,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/ImageCompare/ImageCompare.cpp",
			"settings":
			{
				"buffer_size": 14050,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Mogwai.h",
			"settings":
			{
				"buffer_size": 8268,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphImportExport.cpp",
			"settings":
			{
				"buffer_size": 6264,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/ResourceCache.cpp",
			"settings":
			{
				"buffer_size": 8382,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Animation/AnimationController.cpp",
			"settings":
			{
				"buffer_size": 13034,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassReflection.cpp",
			"settings":
			{
				"buffer_size": 12090,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPass.cpp",
			"settings":
			{
				"buffer_size": 2449,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderPasses/ResolvePass.h",
			"settings":
			{
				"buffer_size": 2584,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderPasses/ResolvePass.cpp",
			"settings":
			{
				"buffer_size": 3100,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 5056,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "file( GLOB SOURCES"
			}
		},
		{
			"file": "src/Falcor/Scene/ParticleSystem/ParticleSystem.h",
			"settings":
			{
				"buffer_size": 10438,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp",
			"settings":
			{
				"buffer_size": 16405,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/HitInfo.h",
			"settings":
			{
				"buffer_size": 3622,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1201,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/RenderGraphEditor/RenderGraphEditor.h",
			"settings":
			{
				"buffer_size": 3325,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/DebugPasses.cpp",
			"settings":
			{
				"buffer_size": 2436,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.h",
			"settings":
			{
				"buffer_size": 3041,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp",
			"settings":
			{
				"buffer_size": 6309,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.h",
			"settings":
			{
				"buffer_size": 2482,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.cpp",
			"settings":
			{
				"buffer_size": 3134,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.h",
			"settings":
			{
				"buffer_size": 2619,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CSM.h",
			"settings":
			{
				"buffer_size": 8949,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CSM/CSM.cpp",
			"settings":
			{
				"buffer_size": 35619,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.slang",
			"settings":
			{
				"buffer_size": 2501,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/TextRenderer.slang",
			"settings":
			{
				"buffer_size": 2282,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp",
			"settings":
			{
				"buffer_size": 16567,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.h",
			"settings":
			{
				"buffer_size": 2960,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.h",
			"settings":
			{
				"buffer_size": 4795,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.h",
			"settings":
			{
				"buffer_size": 3479,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPass.h",
			"settings":
			{
				"buffer_size": 7147,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.cpp",
			"settings":
			{
				"buffer_size": 15137,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SSAO/SSAO.h",
			"settings":
			{
				"buffer_size": 4465,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.h",
			"settings":
			{
				"buffer_size": 3377,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/SkyBox.cpp",
			"settings":
			{
				"buffer_size": 8099,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Antialiasing/FXAA/FXAA.h",
			"settings":
			{
				"buffer_size": 3316,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Antialiasing/TAA/TAA.h",
			"settings":
			{
				"buffer_size": 3086,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Antialiasing/TAA/TAA.cpp",
			"settings":
			{
				"buffer_size": 5446,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Antialiasing/FXAA/FXAA.cpp",
			"settings":
			{
				"buffer_size": 4663,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SkyBox/Data/cube.obj",
			"settings":
			{
				"buffer_size": 401,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
			"settings":
			{
				"buffer_size": 4522,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
			"settings":
			{
				"buffer_size": 9750,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ImageLoader/ImageLoader.h",
			"settings":
			{
				"buffer_size": 2888,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ImageLoader/ImageLoader.cpp",
			"settings":
			{
				"buffer_size": 5146,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ToneMapper/ToneMapper.h",
			"settings":
			{
				"buffer_size": 5483,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/ToneMapper/ToneMapper.cpp",
			"settings":
			{
				"buffer_size": 16177,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/AccumulatePass/AccumulatePass.cpp",
			"settings":
			{
				"buffer_size": 10804,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBufferBase.h",
			"settings":
			{
				"buffer_size": 3675,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBufferBase.cpp",
			"settings":
			{
				"buffer_size": 6613,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.cpp",
			"settings":
			{
				"buffer_size": 2647,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.h",
			"settings":
			{
				"buffer_size": 2997,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp",
			"settings":
			{
				"buffer_size": 9973,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.h",
			"settings":
			{
				"buffer_size": 3089,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.h",
			"settings":
			{
				"buffer_size": 3189,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.cpp",
			"settings":
			{
				"buffer_size": 5817,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.cpp",
			"settings":
			{
				"buffer_size": 5263,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.cpp",
			"settings":
			{
				"buffer_size": 8197,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SSAO/SSAO.cpp",
			"settings":
			{
				"buffer_size": 11771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.h",
			"settings":
			{
				"buffer_size": 3547,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/Composite/Composite.cpp",
			"settings":
			{
				"buffer_size": 4310,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/TemporalDelayPass/TemporalDelayPass.h",
			"settings":
			{
				"buffer_size": 2703,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/Composite/Composite.h",
			"settings":
			{
				"buffer_size": 2924,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DepthPass/DepthPass.h",
			"settings":
			{
				"buffer_size": 3357,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.h",
			"settings":
			{
				"buffer_size": 3771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp",
			"settings":
			{
				"buffer_size": 5767,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp",
			"settings":
			{
				"buffer_size": 5657,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp",
			"settings":
			{
				"buffer_size": 9623,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Antialiasing/Antialiasing.cpp",
			"settings":
			{
				"buffer_size": 2797,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BlitPass/BlitPass.cpp",
			"settings":
			{
				"buffer_size": 3995,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.h",
			"settings":
			{
				"buffer_size": 4307,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SVGFPass/SVGFPass.cpp",
			"settings":
			{
				"buffer_size": 18970,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/TemporalDelayPass/TemporalDelayPass.cpp",
			"settings":
			{
				"buffer_size": 6201,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/SVGFPass/SVGFPass.h",
			"settings":
			{
				"buffer_size": 4511,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
			"settings":
			{
				"buffer_size": 18949,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/ComparisonPass.h",
			"settings":
			{
				"buffer_size": 3108,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/DebugPasses/ComparisonPass.cpp",
			"settings":
			{
				"buffer_size": 5202,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BlitPass/BlitPass.h",
			"settings":
			{
				"buffer_size": 2803,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/AccumulatePass/AccumulatePass.h",
			"settings":
			{
				"buffer_size": 5448,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 3602,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 289,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/StringUtils.h",
			"settings":
			{
				"buffer_size": 12635,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/ModelViewer/ModelViewer.cpp",
			"settings":
			{
				"buffer_size": 9979,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/ModelViewer/ModelViewer.ps.slang.bak",
			"settings":
			{
				"buffer_size": 2408,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/ModelViewer/ModelViewer.ps.slang",
			"settings":
			{
				"buffer_size": 2391,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang",
			"settings":
			{
				"buffer_size": 7921,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1429,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Samples/ShaderToy/ShaderToy.cpp",
			"settings":
			{
				"buffer_size": 4229,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/FullScreenPass.cpp",
			"settings":
			{
				"buffer_size": 5668,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.h",
			"settings":
			{
				"buffer_size": 6372,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/FullScreenPass.h",
			"settings":
			{
				"buffer_size": 4025,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
			"settings":
			{
				"buffer_size": 4013,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/BaseGraphicsPass.cpp",
			"settings":
			{
				"buffer_size": 2819,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/FrameRate.h",
			"settings":
			{
				"buffer_size": 3811,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/FrameRate.cpp",
			"settings":
			{
				"buffer_size": 2265,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
			"settings":
			{
				"buffer_size": 6356,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
			"settings":
			{
				"buffer_size": 7714,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
			"settings":
			{
				"buffer_size": 29489,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/BaseGraphicsPass.h",
			"settings":
			{
				"buffer_size": 3738,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.h",
			"settings":
			{
				"buffer_size": 12783,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
			"settings":
			{
				"buffer_size": 67085,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
			"settings":
			{
				"buffer_size": 15202,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cs.slang",
			"settings":
			{
				"buffer_size": 2850,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ShaderVar.cpp",
			"settings":
			{
				"buffer_size": 15515,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
			"settings":
			{
				"buffer_size": 11503,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#ifndef SRC_FALCOR_SCENE_LIGHTS_LIGHTPROBE_H_\n#define SRC_FALCOR_SCENE_LIGHTS_LIGHTPROBE_H_\n\n#include \"LightProbeData.slang\"\n#include \"Falcor/Core/API/Texture.h\"\n#include \"Falcor/Core/API/Sampler.h\"\n\nnamespace Falcor {\n\nclass Device;\nclass RenderContext;\nclass Gui;\nclass ProgramVars;\nclass ParameterBlock;\n\nclass dlldecl LightProbe {\n public:\n    using SharedPtr = std::shared_ptr<LightProbe>;\n    using SharedConstPtr = std::shared_ptr<const LightProbe>;\n    using ConstSharedPtrRef = const SharedPtr&;\n\n    static const uint32_t kDataSize = sizeof(LightProbeData) - sizeof(LightProbeResources);\n    static const uint32_t kDefaultDiffSamples = 4096;\n    static const uint32_t kDefaultSpecSamples = 1024;\n    static const uint32_t kDefaultDiffSize = 128;\n    static const uint32_t kDefaultSpecSize = 1024;\n\n    /** Create a light-probe from a file\n        \\param[in] pContext The current render context to be used for pre-integration.\n        \\param[in] filename Texture filename\n        \\param[in] loadAsSrgb Indicates whether the source texture is in sRGB or linear color space\n        \\param[in] overrideFormat Override the format of the original texture. ResourceFormat::Unknown means keep the original format. Useful in cases where generateMips is true, but the original format doesn't support automatic mip generation\n        \\param[in] diffSampleCount How many times to sample when generating diffuse texture.\n        \\param[in] specSampleCount How many times to sample when generating specular texture.\n        \\param[in] diffSize The width and height of the pre-filtered diffuse texture. We always create a square texture.\n        \\param[in] specSize The width and height of the pre-filtered specular texture. We always create a square texture.\n        \\param[in] preFilteredFormat The format of the pre-filtered texture\n    */\n    static SharedPtr create(RenderContext* pContext, const std::string& filename, bool loadAsSrgb, ResourceFormat overrideFormat = ResourceFormat::Unknown, uint32_t diffSampleCount = kDefaultDiffSamples, uint32_t specSampleCount = kDefaultSpecSamples, uint32_t diffSize = kDefaultDiffSize, uint32_t specSize = kDefaultSpecSize, ResourceFormat preFilteredFormat = ResourceFormat::RGBA16Float);\n\n    /** Create a light-probe from a texture\n        \\param[in] pContext The current render context to be used for pre-integration.\n        \\param[in] pTexture The source texture\n        \\param[in] diffSampleCount How many times to sample when generating diffuse texture.\n        \\param[in] specSampleCount How many times to sample when generating specular texture.\n        \\param[in] diffSize The width and height of the pre-filtered diffuse texture. We always create a square texture.\n        \\param[in] specSize The width and height of the pre-filtered specular texture. We always create a square texture.\n        \\param[in] preFilteredFormat The format of the pre-filtered texture\n    */\n    static SharedPtr create(RenderContext* pContext, const Texture::SharedPtr& pTexture, uint32_t diffSampleCount = kDefaultDiffSamples, uint32_t specSampleCount = kDefaultSpecSamples, uint32_t diffSize = kDefaultDiffSize, uint32_t specSize = kDefaultSpecSize, ResourceFormat preFilteredFormat = ResourceFormat::RGBA16Float);\n\n    ~LightProbe();\n\n    /** Render UI elements for this light.\n        \\param[in] pGui The GUI to create the elements with\n        \\param[in] group Optional. If specified, creates a UI group to display elements within\n    */\n    void renderUI(Gui* pGui, const char* group = nullptr);\n\n    /** Set the light probe's world-space position\n    */\n    void setPosW(const float3& posW) { mData.posW = posW; }\n\n    /** Get the light probe's world-space position\n    */\n    const float3& getPosW() const { return mData.posW; }\n\n    /** Set the spherical radius the light probe encompasses. Set radius to negative to sample as an infinite-distance global light probe.\n    */\n    void setRadius(float radius) { mData.radius = radius; }\n\n    /** Get the light probe's radius.\n    */\n    float getRadius() const { return mData.radius; }\n\n    /** Get the sample count used to generate the diffuse texture.\n    */\n    uint32_t getDiffSampleCount() const { return mDiffSampleCount; }\n\n    /** Get the sample count used to generate the specular texture.\n    */\n    uint32_t getSpecSampleCount() const { return mSpecSampleCount; }\n\n    /** Set the light probe's light intensity\n    */\n    void setIntensity(const float3& intensity) { mData.intensity = intensity; }\n\n    /** Get the light probe's light intensity\n    */\n    const float3& getIntensity() const { return mData.intensity; }\n\n    /** Attach a sampler to the light probe\n    */\n    void setSampler(const Sampler::SharedPtr& pSampler) { mData.resources.sampler = pSampler; }\n\n    /** Get the sampler state\n    */\n    const Sampler::SharedPtr& getSampler() const { return mData.resources.sampler; }\n\n    /** Get the light probe's source texture.\n    */\n    const Texture::SharedPtr& getOrigTexture() const { return mData.resources.origTexture; }\n\n    /** Get the light probe's diffuse texture.\n    */\n    const Texture::SharedPtr& getDiffuseTexture() const { return mData.resources.diffuseTexture; }\n\n    /** Get the light probe's specular texture.\n    */\n    const Texture::SharedPtr& getSpecularTexture() const { return mData.resources.specularTexture; }\n\n    /** Get the texture storing the pre-integrated DFG term shared by all light probes.\n    */\n    static const Texture::SharedPtr& getDfgTexture() { return sSharedResources.dfgTexture; }\n\n    /** Bind the light data into a shader var\n    */\n    void setShaderData(const ShaderVar& var);\n\n private:\n    static uint32_t sLightProbeCount;\n    static LightProbeSharedResources sSharedResources;\n\n    LightProbeData mData;\n    uint32_t mDiffSampleCount;\n    uint32_t mSpecSampleCount;\n\n    LightProbe(RenderContext* pContext, const Texture::SharedPtr& pTexture, uint32_t diffSamples, uint32_t specSamples, uint32_t diffSize, uint32_t specSize, ResourceFormat preFilteredFormat);\n};\n\n}  // namespace Falcor\n\n#endif  // SRC_FALCOR_SCENE_LIGHTS_LIGHTPROBE_H_\n",
			"file": "src/Falcor/Scene/Lights/LightProbe.h",
			"file_size": 7852,
			"file_write_time": 132406993613157651,
			"settings":
			{
				"buffer_size": 7813,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.cpp",
			"settings":
			{
				"buffer_size": 3371,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphCompiler.cpp",
			"settings":
			{
				"buffer_size": 18153,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
			"settings":
			{
				"buffer_size": 28487,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphExe.cpp",
			"settings":
			{
				"buffer_size": 4177,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphExe.h",
			"settings":
			{
				"buffer_size": 4072,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Dictionary.h",
			"settings":
			{
				"buffer_size": 4523,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphUI.cpp",
			"settings":
			{
				"buffer_size": 64727,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/PixelDebug.cpp",
			"settings":
			{
				"buffer_size": 9625,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ParallelReduction.cpp",
			"settings":
			{
				"buffer_size": 6148,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Utils/ParallelReductionTests.cpp",
			"settings":
			{
				"buffer_size": 11656,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Utils/PrefixSumTests.cpp",
			"settings":
			{
				"buffer_size": 4850,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/PrefixSum.cpp",
			"settings":
			{
				"buffer_size": 7112,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/BitonicSort.cpp",
			"settings":
			{
				"buffer_size": 4470,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.h",
			"settings":
			{
				"buffer_size": 4901,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ParallelReduction.h",
			"settings":
			{
				"buffer_size": 3575,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/BitonicSort.h",
			"settings":
			{
				"buffer_size": 4169,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/PrefixSum.h",
			"settings":
			{
				"buffer_size": 4191,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp",
			"settings":
			{
				"buffer_size": 9541,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Console.cpp",
			"settings":
			{
				"buffer_size": 4108,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/ScriptBindings.cpp",
			"settings":
			{
				"buffer_size": 4848,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
			"settings":
			{
				"buffer_size": 3452,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Clock.cpp",
			"settings":
			{
				"buffer_size": 9831,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Clock.h",
			"settings":
			{
				"buffer_size": 8564,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/TextureLoader.cpp",
			"settings":
			{
				"buffer_size": 24304,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/assimp/include/assimp/Bitmap.h",
			"settings":
			{
				"buffer_size": 4295,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.h",
			"settings":
			{
				"buffer_size": 5144,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Logger.h",
			"settings":
			{
				"buffer_size": 5549,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Logger.cpp",
			"settings":
			{
				"buffer_size": 5968,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/BinaryFileStream.h",
			"settings":
			{
				"buffer_size": 5898,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
			"settings":
			{
				"buffer_size": 5721,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Timing/Profiler.cpp",
			"settings":
			{
				"buffer_size": 10754,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Gui.cpp",
			"settings":
			{
				"buffer_size": 56167,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/PixelZoom.cpp",
			"settings":
			{
				"buffer_size": 5190,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/TextRenderer.cpp",
			"settings":
			{
				"buffer_size": 7231,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/TextRenderer.h",
			"settings":
			{
				"buffer_size": 3353,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/PixelZoom.h",
			"settings":
			{
				"buffer_size": 3368,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/DebugDrawer.h",
			"settings":
			{
				"buffer_size": 4027,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/DebugDrawer.cpp",
			"settings":
			{
				"buffer_size": 8927,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Font.h",
			"settings":
			{
				"buffer_size": 4060,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/render-test/bind-location.h",
			"settings":
			{
				"buffer_size": 19257,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/UI/Font.cpp",
			"settings":
			{
				"buffer_size": 5156,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
			"settings":
			{
				"buffer_size": 85503,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
			"settings":
			{
				"buffer_size": 5776,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/slang-reflection.cpp",
			"settings":
			{
				"buffer_size": 50216,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/slang-compiler.h",
			"settings":
			{
				"buffer_size": 90183,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/slang/slang-name.cpp",
			"settings":
			{
				"buffer_size": 800,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/source/core/slang-dictionary.h",
			"settings":
			{
				"buffer_size": 13988,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.cpp",
			"settings":
			{
				"buffer_size": 14700,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgramVarsHelper.h",
			"settings":
			{
				"buffer_size": 14339,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVars.h",
			"settings":
			{
				"buffer_size": 6787,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ShaderVar.h",
			"settings":
			{
				"buffer_size": 17036,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramReflection.h",
			"settings":
			{
				"buffer_size": 54819,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/Program.cpp",
			"settings":
			{
				"buffer_size": 34062,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Buffer.cpp",
			"settings":
			{
				"buffer_size": 13350,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.cpp",
			"settings":
			{
				"buffer_size": 18015,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/BlendState.h",
			"settings":
			{
				"buffer_size": 9346,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/BlendState.cpp",
			"settings":
			{
				"buffer_size": 3664,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FBO.h",
			"settings":
			{
				"buffer_size": 13352,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.h",
			"settings":
			{
				"buffer_size": 15073,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/ShadingUtils/RaytracingTests.cpp",
			"settings":
			{
				"buffer_size": 4882,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp",
			"settings":
			{
				"buffer_size": 8055,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/SlangTests.cs.slang",
			"settings":
			{
				"buffer_size": 6527,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/SlangShared.slang",
			"settings":
			{
				"buffer_size": 2435,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp",
			"settings":
			{
				"buffer_size": 3182,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp",
			"settings":
			{
				"buffer_size": 3694,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/TraceRayFlags.cpp",
			"settings":
			{
				"buffer_size": 3163,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/TraceRayInline.cpp",
			"settings":
			{
				"buffer_size": 2113,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp",
			"settings":
			{
				"buffer_size": 6067,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Utils/AABBTests.cpp",
			"settings":
			{
				"buffer_size": 7752,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/prelude/slang-cpp-types.h",
			"settings":
			{
				"buffer_size": 28997,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/FalcorTest.h",
			"settings":
			{
				"buffer_size": 2143,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/FalcorTest.cpp",
			"settings":
			{
				"buffer_size": 3605,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Sampling/SampleGeneratorTests.cpp",
			"settings":
			{
				"buffer_size": 7287,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp",
			"settings":
			{
				"buffer_size": 8005,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp",
			"settings":
			{
				"buffer_size": 5631,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp",
			"settings":
			{
				"buffer_size": 2413,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
			"settings":
			{
				"buffer_size": 15074,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Windows/ProgressBarWin.cpp",
			"settings":
			{
				"buffer_size": 4513,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/OS.h",
			"settings":
			{
				"buffer_size": 15995,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.h",
			"settings":
			{
				"buffer_size": 3960,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Texture.cpp",
			"settings":
			{
				"buffer_size": 16074,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 47,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2011,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/commandBuffer.cpp",
			"settings":
			{
				"buffer_size": 8461,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/commandBufferManager.cpp",
			"settings":
			{
				"buffer_size": 13416,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/commandPool.cpp",
			"settings":
			{
				"buffer_size": 1629,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/computeEncoder.cpp",
			"settings":
			{
				"buffer_size": 1791,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/conversions.cpp",
			"settings":
			{
				"buffer_size": 9785,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/device.cpp",
			"settings":
			{
				"buffer_size": 17769,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/diagnostic.cpp",
			"settings":
			{
				"buffer_size": 6577,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/frame.cpp",
			"settings":
			{
				"buffer_size": 2455,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/garbageCollector.cpp",
			"settings":
			{
				"buffer_size": 3957,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/graphicsEncoder.cpp",
			"settings":
			{
				"buffer_size": 6479,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/hgi.cpp",
			"settings":
			{
				"buffer_size": 14444,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/instance.cpp",
			"settings":
			{
				"buffer_size": 1940,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/parallelGraphicsEncoder.cpp",
			"settings":
			{
				"buffer_size": 3913,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/pipeline.cpp",
			"settings":
			{
				"buffer_size": 15055,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/renderPass.cpp",
			"settings":
			{
				"buffer_size": 15805,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/pipeline.h",
			"settings":
			{
				"buffer_size": 1831,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/renderPassPipelineCache.cpp",
			"settings":
			{
				"buffer_size": 8095,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/resourceBindings.cpp",
			"settings":
			{
				"buffer_size": 16563,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/shaderCompiler.cpp",
			"settings":
			{
				"buffer_size": 10186,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/shaderFunction.cpp",
			"settings":
			{
				"buffer_size": 2509,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/shaderProgram.cpp",
			"settings":
			{
				"buffer_size": 437,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/surface.cpp",
			"settings":
			{
				"buffer_size": 3812,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/swapchain.cpp",
			"settings":
			{
				"buffer_size": 17443,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/texture.cpp",
			"settings":
			{
				"buffer_size": 15437,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/buffer.cpp",
			"settings":
			{
				"buffer_size": 9825,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/blitEncoder.cpp",
			"settings":
			{
				"buffer_size": 6180,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/blitEncoder.h",
			"settings":
			{
				"buffer_size": 1319,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/buffer.h",
			"settings":
			{
				"buffer_size": 1965,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/commandBuffer.h",
			"settings":
			{
				"buffer_size": 3844,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/commandBufferManager.h",
			"settings":
			{
				"buffer_size": 5853,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/commandPool.h",
			"settings":
			{
				"buffer_size": 1102,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/computeEncoder.h",
			"settings":
			{
				"buffer_size": 1631,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/conversions.h",
			"settings":
			{
				"buffer_size": 1688,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/device.h",
			"settings":
			{
				"buffer_size": 6599,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/diagnostic.h",
			"settings":
			{
				"buffer_size": 1085,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/frame.h",
			"settings":
			{
				"buffer_size": 2289,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/garbageCollector.h",
			"settings":
			{
				"buffer_size": 1637,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/graphicsEncoder.h",
			"settings":
			{
				"buffer_size": 2732,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/hgi.h",
			"settings":
			{
				"buffer_size": 4470,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/instance.h",
			"settings":
			{
				"buffer_size": 693,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/USD/hgiVk/parallelGraphicsEncoder.h",
			"settings":
			{
				"buffer_size": 1608,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/MogwaiSettings.h",
			"settings":
			{
				"buffer_size": 2575,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/MogwaiSettings.cpp",
			"settings":
			{
				"buffer_size": 10761,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/MogwaiScripting.cpp",
			"settings":
			{
				"buffer_size": 6767,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Shader.h",
			"settings":
			{
				"buffer_size": 8437,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Sampler.h",
			"settings":
			{
				"buffer_size": 7871,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Sampler.cpp",
			"settings":
			{
				"buffer_size": 3887,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKShader.cpp",
			"settings":
			{
				"buffer_size": 2775,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/stdafx.h",
			"settings":
			{
				"buffer_size": 1831,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/CopyContext.cpp",
			"settings":
			{
				"buffer_size": 6896,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VAO.cpp",
			"settings":
			{
				"buffer_size": 3603,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
			"settings":
			{
				"buffer_size": 6571,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeContext.cpp",
			"settings":
			{
				"buffer_size": 2998,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12ComputeContext.cpp",
			"settings":
			{
				"buffer_size": 6740,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12LowLevelContextData.cpp",
			"settings":
			{
				"buffer_size": 4664,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
			"settings":
			{
				"buffer_size": 5608,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/FencedPool.h",
			"settings":
			{
				"buffer_size": 4321,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
			"settings":
			{
				"buffer_size": 8062,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Tools/FalcorTest/Tests/Utils/MathHelpersTests.cpp",
			"settings":
			{
				"buffer_size": 12262,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
			"settings":
			{
				"buffer_size": 16737,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
			"settings":
			{
				"buffer_size": 2998,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.h",
			"settings":
			{
				"buffer_size": 4407,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
			"settings":
			{
				"buffer_size": 12833,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 3482,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/max/Desktop/gbuffer.py",
			"settings":
			{
				"buffer_size": 574,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/GBuffer/GBuffer/GBufferParams.slang",
			"settings":
			{
				"buffer_size": 2388,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Threading.cpp",
			"settings":
			{
				"buffer_size": 2799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/TermColor.cpp",
			"settings":
			{
				"buffer_size": 3484,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/TermColor.h",
			"settings":
			{
				"buffer_size": 2499,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Threading.h",
			"settings":
			{
				"buffer_size": 3003,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/***************************************************************************\n # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.\n #\n # Redistribution and use in source and binary forms, with or without\n # modification, are permitted provided that the following conditions\n # are met:\n #  * Redistributions of source code must retain the above copyright\n #    notice, this list of conditions and the following disclaimer.\n #  * Redistributions in binary form must reproduce the above copyright\n #    notice, this list of conditions and the following disclaimer in the\n #    documentation and/or other materials provided with the distribution.\n #  * Neither the name of NVIDIA CORPORATION nor the names of its\n #    contributors may be used to endorse or promote products derived\n #    from this software without specific prior written permission.\n #\n # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n **************************************************************************/\n#include \"Utils/Math/MathConstants.slangh\"\n#include \"Scene/Material/MaterialDefines.slangh\"\n\nimport Scene.Scene;\nimport Scene.TextureSampler;\nimport Experimental.Scene.Material.MaterialShading;\nimport Experimental.Scene.Lights.EnvProbe;\nimport Utils.Sampling.SampleGenerator;\nimport Utils.Debug.PixelDebug;\nimport Utils.Math.BitTricks;\nimport Utils.Math.MathHelpers;\nimport BSDFViewerParams;\n\ncbuffer PerFrameCB\n{\n    BSDFViewerParams gParams;\n    EnvProbe gEnvProbe;\n}\n\nRWTexture2D<float4> gOutput;\nRWStructuredBuffer<PixelData> gPixelData;\n\nstatic const float3 kGroundPlaneColor = float3(0.05f);\n\nstruct SurfaceData\n{\n    ShadingData sd;\n\n    // Additional fields we want to inspect that are not part of Falcor's ShadingData.\n    float3 baseColor;\n    float3 wi;\n};\n\n\n/** Get normalized viewport coordinate.\n    The viewport is centered on the image with square aspect and height 1.0. The y-axis points down.\n    TODO: Change to a more standard definition.\n    \\return Viewport coordinate.\n*/\nfloat2 getViewportCoord(uint2 pixel)\n{\n    float2 p = pixel + float2(0.5f);\n    return (p - gParams.viewportOffset) * gParams.viewportScale;\n}\n\n/** Setup geometric frame of reference for BRDF slice.\n    \\param[in] uv Viewport coordinate in [0,1].\n    \\param[out] v Interpolated attributes for the point on the sphere.\n    \\param[out] viewDir View direction.\n    \\return Normalized incident direction (light vector).\n*/\nfloat3 calculateSliceGeometry(float2 uv, out VertexData v, out float3 viewDir)\n{\n    // Setup local surface frame as T,B,N (right-handed).\n    v.posW = float3(0, 0, 0);\n    v.normalW = float3(0, 0, 1);\n    v.bitangentW = float3(0, 1, 0);\n    v.texC = gParams.texCoords;\n    v.faceNormalW = v.normalW;\n\n    // Compute dot products.\n    // These are based on the axes in the 2D slice (theta_h, theta_d) with origin in lower-left corner.\n    // This is the same format as the slices in Burley et al. 2012, 2015.\n    float theta_h = uv.x * (M_PI / 2);\n    float theta_d = (1.f - uv.y) * (M_PI / 2);\n\n    float NdotH = cos(theta_h);\n    float HdotL = cos(theta_d);     // Note: HdotL = HdotV\n\n    // Place the H vector at (0,0,1) to start.\n    // Compute L, V that are mirrored about the yz-plane.\n    float3 L = float3(sqrt(1.f - HdotL * HdotL), 0, HdotL);\n    float3 V = float3(-L.x, 0.f, L.z);\n\n    // Rotate L, V about the x-axis by an angle theta_h.\n    float cos_h = NdotH;\n    float sin_h = sqrt(1 - NdotH * NdotH);\n    L = float3(L.x, cos_h * L.y - sin_h * L.z, sin_h * L.y + cos_h * L.z);\n    V = float3(V.x, cos_h * V.y - sin_h * V.z, sin_h * V.y + cos_h * V.z);\n\n    // Return vectors.\n    viewDir = V;\n    return normalize(L);\n}\n\n/** Ray-sphere intersection.\n    This function implements the standard analytic test and returns the closest hit.\n    \\param[in] rayOrigin Ray origin.\n    \\param[in] rayDir Ray direction (does not have to be normalized).\n    \\param[in] center Sphere center.\n    \\param[in] radius Sphere radius.\n    \\param[in] intersectionPos Position on the sphere for the closest intersection (if any).\n    \\return True if the ray intersects the sphere.\n*/\nbool raySphereIntersection(float3 rayOrigin, float3 rayDir, float3 center, float radius, out float3 intersectionPos)\n{\n    // The sphere equation is ||P-C||^2 = r^2 and the ray P = A+tB.\n    // Solve for minimum positive t to find the closest intersection.\n    float3 oc = rayOrigin - center;\n    float a = dot(rayDir, rayDir); // = 1.0 if direction is normalized\n    float b = 2.f * dot(rayDir, oc);\n    float c = dot(oc, oc) - radius * radius;\n    float discriminant = b * b - 4.f * a * c;\n\n    // Negative discriminant means ray missed sphere.\n    if (discriminant < 0.f) return false;\n\n    // There are two solutions t0 and t1, but one or both may be negative.\n    float t0 = -b - sqrt(discriminant);\n    float t1 = -b + sqrt(discriminant);\n    float tc = t0 < 0.f ? t1 : t0; // tc is the closest hit we care about\n    if (tc < 0.f) return false;\n\n    float t = tc / (2.f * a);\n    intersectionPos = rayOrigin + t * rayDir;\n    return true;\n}\n\n/** Calculate sphere geometry for the given viewport coordinate.\n    \\param[in] uv Viewport coordinate in [0,1].\n    \\param[out] v Interpolated attributes for the point on the sphere (if hit).\n    \\param[out] rayDir Ray direction for the camera ray (normalized).\n    \\return True if we're on the sphere.\n*/\nbool calculateSphereGeometry(float2 uv, out VertexData v, out float3 rayDir)\n{\n    const float2 ndc = float2(2.f * uv.x - 1.f, -2.f * uv.y + 1.f);\n\n    if (gParams.orthographicCamera)\n    {\n        // Calculate intersection with the unit sphere.\n        // The orthographic camera's viewport is +-1 units vertically so the sphere fits exactly.\n        float3 p = float3(ndc, 0);\n        float d = 1.f - p.x * p.x - p.y * p.y;\n        rayDir = float3(0, 0, -1);\n\n        if (d < 0.f) return false;\n        p.z = sqrt(d);\n        v.posW = p;\n    }\n    else // Projective camera\n    {\n        // Setup camera ray and calculate ray-sphere intersection.\n        float3 origin = { 0, 0, gParams.cameraDistance };\n        float3 target = float3(ndc * gParams.cameraViewportScale, 0);\n        rayDir = normalize(target - origin);\n\n        float3 p;\n        if (!raySphereIntersection(origin, rayDir, float3(0), 1.f, p)) return false;\n        v.posW = p;\n    }\n\n    // Setup surface attributes for the unit sphere.\n    v.normalW = v.posW;\n    v.bitangentW = perp_stark(v.normalW); // Make up a bitangent\n    v.faceNormalW = v.normalW;\n\n    if (gParams.useFixedTexCoords)\n    {\n        v.texC = gParams.texCoords;\n    }\n    else\n    {\n        // Compute texture coords using cylindrical mapping of the visible hemisphere.\n        // We place u=0 on the left side and and u=1 on the right, and v=0 at the bottom and v=1 at the top.\n        float3 p = v.posW;\n        float texU = atan2(p.z, -p.x) / M_PI;\n        float texV = acos(-p.y) / M_PI;\n        v.texC = float2(texU, texV);\n    }\n\n    return true;\n}\n\n/** Prepare SurfaceData struct with material parameters.\n    All unused fields are initialized to their default values.\n*/\nSurfaceData prepareMaterial(VertexData v, float3 viewDir)\n{\n    SurfaceData data = {};\n\n    if (gParams.useSceneMaterial)\n    {\n        // Setup Falcor's ShadingData based on scene material.\n        ExplicitLodTextureSampler lod = { 0.f };\n        data.sd = _prepareShadingData(v, gParams.materialID, gScene.materials[gParams.materialID], gScene.materialResources[gParams.materialID], viewDir, lod, gParams.useNormalMapping);\n\n        // Setup additional fields not currently available in ShadingData.\n        MaterialData md = gScene.getMaterial(gParams.materialID);\n        MaterialResources mr = gScene.materialResources[gParams.materialID];\n        data.baseColor = sampleTexture(mr.baseColor, mr.samplerState, v.texC, md.baseColor, EXTRACT_DIFFUSE_TYPE(md.flags), lod).rgb;\n    }\n    else\n    {\n        ShadingData sd = {};\n\n        // Set geometric parameters.\n        sd.posW = v.posW;\n        sd.uv = v.texC;\n        sd.V = normalize(viewDir);\n        sd.N = normalize(v.normalW);\n        sd.B = normalize(v.bitangentW - sd.N * (dot(v.bitangentW, sd.N)));\n        sd.T = normalize(cross(sd.B, sd.N));\n        sd.NdotV = dot(sd.N, sd.V);\n        sd.faceN = v.faceNormalW;\n        sd.frontFacing = dot(sd.V, sd.faceN) >= 0.f;\n        sd.doubleSided = false;\n\n        // Set material parameters.\n        // Calculate the specular reflectance for dielectrics from the IoR.\n        sd.IoR = gParams.IoR;\n        float f = (sd.IoR - 1.f) / (sd.IoR + 1.f);\n        float F0 = f * f;\n        sd.diffuse = lerp(gParams.baseColor.rgb, float3(0), gParams.metallic);\n        sd.specular = lerp(float3(F0), gParams.baseColor.rgb, gParams.metallic);\n        sd.linearRoughness = gParams.linearRoughness;\n        sd.ggxAlpha = sd.linearRoughness * sd.linearRoughness;\n        sd.metallic = gParams.metallic;\n\n        // Unused\n        sd.opacity = 1;\n        sd.occlusion = 1;\n\n        // Store outputs\n        data.sd = sd;\n        data.baseColor = gParams.baseColor;\n    }\n\n    return data;\n}\n\n/** Returns the color to use for background pixels.\n    \\param[in] uv Viewport coordinates.\n    \\param[in] dir Normalized ray direction.\n*/\nfloat3 evalBackground(float2 uv, float3 dir)\n{\n    if (gParams.useGroundPlane)\n    {\n        bool hitGround = gParams.orthographicCamera ? (uv.y >= 0.5f) : (dir.y < 0.f);\n        if (hitGround) return kGroundPlaneColor;\n    }\n    if (gParams.useDirectionalLight) return float3(0);\n\n    float3 L = gParams.useEnvMap ? evalEnvProbe(gEnvProbe, dir) : gParams.lightColor;\n    return L * gParams.lightIntensity;\n}\n\n/** Evaluates the incident lighting from a given direction.\n    If directional lighting is enabled, it can be assumed 'dir' is light's direction.\n*/\nfloat3 evalLighting(float3 dir)\n{\n    if (gParams.useGroundPlane && dir.y < 0.f)\n    {\n        return float3(0.f);\n    }\n\n    float3 L = gParams.useEnvMap ? evalEnvProbe(gEnvProbe, dir) : gParams.lightColor;\n    return L * gParams.lightIntensity;\n}\n\n/** Returns the BSDF lobe mask for the currently enabled lobes.\n*/\nuint getActiveLobes()\n{\n    uint lobes = 0;\n    if (gParams.enableDiffuse) lobes |= (uint)LobeType::DiffuseReflection;\n    if (gParams.enableSpecular) lobes |= (uint)LobeType::SpecularReflection;\n    // TODO: Viewer doesn't support transmission lobes yet\n    return lobes;\n}\n\n/** Evaluates the BSDF slice for a given viewport coordinate.\n    \\return Evaluated BSDF value.\n*/\nfloat3 evalBSDFSlice(float2 uv, inout SurfaceData data)\n{\n    // Calculate geometry and incident/outgoing directions.\n    VertexData v;\n    float3 viewDir;\n    float3 lightDir = calculateSliceGeometry(uv, v, viewDir);\n\n    // Setup shading data based on the current material.\n    data = prepareMaterial(v, viewDir);\n    data.wi = lightDir;\n\n    // Evaluate BRDF at this point.\n    float3 f = evalBSDFCosine(data.sd, data.wi, getActiveLobes());\n\n    // Remove cosine term if it's disabled in the viewer.\n    if (!gParams.applyNdotL)\n    {\n        float NdotL = dot(data.sd.N, data.wi);\n        f = NdotL > 0.f ? f / NdotL : float3(0);\n    }\n\n    return f;\n}\n\n/** Samples the BSDF to evaluate incident illumination.\n    This is done differently depending on the configuration.\n    \\param[in] sd Shading point data.\n    \\param[in] sg Sample generator.\n    \\param[out] s Generated sample. Only valid if true is returned.\n    \\return True if a sample was generated, false otherwise.\n*/\nbool generateBSDFSample(const ShadingData sd, inout SampleGenerator sg, out BSDFSample s)\n{\n    if (gParams.useDirectionalLight)\n    {\n        // With directional light, disable BSDF sampling and just return a sample in the light's direction.\n        s.wi = -normalize(gParams.lightDir);\n        s.weight = evalBSDFCosine(sd, s.wi);\n        s.pdf = 1.f;\n        return dot(sd.N, s.wi) > 0.f;\n    }\n    else\n    {\n        if (gParams.useBrdfSampling) return sampleBSDF(sd, sg, s);\n        else return sampleBSDF_Reference(sd, sg, s);\n    }\n}\n\n/** Evaluates the lit sphere for a given viewport coordinate.\n    The viewport shows an analytic sphere of the specified material at infinite distance.\n    When each pixel is evaluated using a random light direction and omnidirectional white light,\n    the result converges to the total reflectance (integral of BSDF times the dot(N,L) factor.\n    \\return Outgoing radiance value.\n*/\nfloat3 evalSphere(float2 uv, inout SurfaceData data, inout SampleGenerator sg)\n{\n    // Calculate the local surface frame.\n    VertexData v;\n    float3 rayDir;\n    if (!calculateSphereGeometry(uv, v, rayDir)) return evalBackground(uv, rayDir);\n\n    // Setup shading data based on the current material.\n    data = prepareMaterial(v, -rayDir);\n\n    float3 output = 0;\n    \n    BSDFSample s = {};\n    \n    if (generateBSDFSample(data.sd, sg, s)) {\n        data.wi = s.wi;\n        float3 L = evalLighting(s.wi);\n\n        // Use computed pdf explicitly (for debugging).\n        if (gParams.usePdf) {\n            output = L * evalBSDFCosine(data.sd, s.wi) / s.pdf;\n        } else {\n            output = L * s.weight;\n        }\n    }\n\n    return output;\n}\n\n/** BSDF viewer pass entry point.\n*/\n[numthreads(16, 16, 1)]\nvoid main(uint3 dispatchThreadID : SV_DispatchThreadID)\n{\n    const uint2 pixel = dispatchThreadID.xy;\n    if (any(pixel >= gParams.frameDim)) return;\n\n    printSetPixel(pixel);\n\n    SurfaceData data = {};\n    float3 output = 0;\n    float2 uv = getViewportCoord(pixel);\n\n    if (gParams.sliceViewer)\n    {\n        if (all(uv >= 0.f && uv < 1.f))\n        {\n            output = evalBSDFSlice(uv, data);\n        }\n    }\n    else\n    {\n        // Create pseudorandom number generator.\n        SampleGenerator sg = SampleGenerator.create(pixel, gParams.frameCount);\n        output = evalSphere(uv, data, sg);\n    }\n\n    // DEBUG\n    //if (gParams.debugSwitch0)\n    //{\n    //    if (sd.N.z < 0.f) output = float3(1, 0, 0);\n    //}\n\n    // Write output data.\n    gOutput[pixel] = float4(output, 1);\n\n    if (gParams.readback && all(pixel == gParams.selectedPixel))\n    {\n        PixelData px;\n        px.texC = data.sd.uv;\n        px.baseColor = data.baseColor;\n        px.diffuse = data.sd.diffuse;\n        px.specular = data.sd.specular;\n        px.linearRoughness = data.sd.linearRoughness;\n        px.metallic = data.sd.metallic;\n        px.N = data.sd.N;\n        px.T = data.sd.T;\n        px.B = data.sd.B;\n        px.wo = data.sd.V;\n        px.wi = data.wi;\n        px.output = output;\n        gPixelData[0] = px;\n    }\n}\n",
			"file": "build/bin/Shaders/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
			"file_size": 15202,
			"file_write_time": 132389801358286917,
			"settings":
			{
				"buffer_size": 15202,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/RenderPasses/Utils/Utils.cpp",
			"settings":
			{
				"buffer_size": 2234,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/render-test/cuda/cuda-compute-util.cpp",
			"settings":
			{
				"buffer_size": 53192,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp",
			"settings":
			{
				"buffer_size": 6680,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
			"settings":
			{
				"buffer_size": 8748,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Program/ProgramVersion.h",
			"settings":
			{
				"buffer_size": 10447,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/examples/model-viewer/main.cpp",
			"settings":
			{
				"buffer_size": 86920,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.h",
			"settings":
			{
				"buffer_size": 8714,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RootSignature.h",
			"settings":
			{
				"buffer_size": 6716,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/RootSignature.cpp",
			"settings":
			{
				"buffer_size": 8993,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKSampler.cpp",
			"settings":
			{
				"buffer_size": 2442,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/tools/gfx/render.h",
			"settings":
			{
				"buffer_size": 28476,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
			"settings":
			{
				"buffer_size": 5196,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Engine.h",
			"settings":
			{
				"buffer_size": 3761,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.h",
			"settings":
			{
				"buffer_size": 11137,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuMemoryHeap.h",
			"settings":
			{
				"buffer_size": 4090,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuMemoryHeap.cpp",
			"settings":
			{
				"buffer_size": 5126,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp",
			"settings":
			{
				"buffer_size": 2823,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
			"settings":
			{
				"buffer_size": 22189,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
			"settings":
			{
				"buffer_size": 5083,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 7792,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDescriptorData.h",
			"settings":
			{
				"buffer_size": 2550,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
			"settings":
			{
				"buffer_size": 28832,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGpuFence.cpp",
			"settings":
			{
				"buffer_size": 10228,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKGpuTimer.cpp",
			"settings":
			{
				"buffer_size": 2646,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12GpuFence.cpp",
			"settings":
			{
				"buffer_size": 3766,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuFence.h",
			"settings":
			{
				"buffer_size": 3526,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
			"settings":
			{
				"buffer_size": 9717,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
			"settings":
			{
				"buffer_size": 27538,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
			"settings":
			{
				"buffer_size": 7814,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "falcor.sublime-project",
			"settings":
			{
				"buffer_size": 2302,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeLinter-cpplint\n---------------------\n\n  SublimeLinter-cpplint\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to cpplint.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-cpplint\n\n\nSublimeLinter-cppcheck\n----------------------\n\n  SublimeLinter-cppcheck\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to cppcheck.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-cppcheck\n\n\nSublimeLinter-clang\n-------------------\n\n  SublimeLinter-clang\n  -------------------------------\n  This linter plugin for SublimeLinter provides an interface to clang.\n  \n  Please read the installation instructions at:\n  \n  https://github.com/SublimeLinter/SublimeLinter-clang\n\n\nSublimeLinter\n-------------\n\n  \n    ____        _     _ _                _     _       _\n   / ___| _   _| |__ | (_)_ __ ___   ___| |   (_)_ __ | |_ ___ _ __\n   \\___ \\| | | | '_ \\| | | '_ ` _ \\ / _ \\ |   | | '_ \\| __/ _ \\ '__|\n    ___) | |_| | |_) | | | | | | | |  __/ |___| | | | | ||  __/ |\n   |____/ \\__,_|_.__/|_|_|_| |_| |_|\\___|_____|_|_| |_|\\__\\___|_|\n  \n  \n  Welcome to SublimeLinter, a linter framework for Sublime Text 3.\n  Linters are not included, they must be installed separately.\n  \n  \n  For complete documentation on how to use and configure SublimeLinter,\n  please see: http://www.sublimelinter.com\n  \n  To report issues: https://github.com/SublimeLinter/SublimeLinter\n\n\nSublimeLinter-gcc\n-----------------\n\n  SublimeLinter-gcc\n  =================\n  \n  This linter plugin for [SublimeLinter](https://github.com/SublimeLinter/SublimeLinter) provides an interface to [gcc](https://gcc.gnu.org/) or other gcc-like (cross-)compiler.\n  It will be used with files that have the C/C++ syntax.\n  If you are using [clang](https://clang.llvm.org), you may want to check [SublimeLinter-clang](https://github.com/SublimeLinter/SublimeLinter-clang).\n  \n  \n  Installation\n  ============\n  \n  SublimeLinter must be installed in order to use this plugin.\n  If SublimeLinter is not installed, please follow the instructions\n  [here](http://sublimelinter.readthedocs.org/en/stable/installation.html).\n  \n  \n  Linter installation\n  -------------------\n  \n  Before using this plugin, you must ensure that `gcc` or other gcc-like (cross-)compiler is installed on your system.\n  \n  You may install `gcc` with the following method:\n  \n  - Mac OS X: [OSX GCC Installer](https://github.com/kennethreitz/osx-gcc-installer)\n  - Linux: `gcc` could be installed by using most package managers.\n  - Windows: [MinGW-w64](https://sourceforge.net/projects/mingw-w64)\n  \n  Once `gcc` is installed, you must ensure it is in your system PATH so that SublimeLinter can find it.\n  This may not be as straightforward as you think, so please read [How linter executables are located](http://sublimelinter.readthedocs.org/en/stable/usage.html#how-linter-executables-are-located) in the documentation.\n  \n  \n  Plugin installation\n  -------------------\n  \n  Please use [Package Control](https://sublime.wbond.net/installation) to install the linter plugin.\n  This will ensure that the plugin will be updated when new versions are available.\n  If you want to install from source so you can modify the source code,\n  you probably know what you are doing so we won't cover that here.\n  \n  To install via Package Control, do the following:\n  \n  1. Within Sublime Text, bring up the [Command Palette](http://docs.sublimetext.info/en/sublime-text-3/extensibility/command_palette.html) and type `install`.\n     Among the commands you should see `Package Control: Install Package`.\n     If that command is not highlighted, use the keyboard or mouse to select it.\n     There will be a pause of a few seconds while Package Control fetches the list of available plugins.\n  \n  1. When the plugin list appears, type `gcc`. Among the entries you should see `SublimeLinter-gcc`.\n     If that entry is not highlighted, use the keyboard or mouse to select it.\n  \n  \n  Settings\n  ========\n  \n  Here are some most frequently used custom settings.\n  \n  | Setting | Description |\n  | :------ | :---------- |\n  | executable | The compiler binary path. This is `[\"gcc\"]` or `[\"g++\"]` by default. If you are not using them, you have to set this to your compiler binary such as `[\"arm-none-eabi-gcc\"]`. |\n  | I | A list of directories to be added to the header search paths. I.e., paths for `-I` flags. |\n  | args | A list of extra flags to pass to the compiler. These should be used carefully, as they may cause linting to fail. |\n  \n  \n  Here is an example settings:\n  \n  ```javascript\n  {\n      \"linters\":\n      {\n          \"gcc\": {\n              \"disable\": false,\n              \"executable\": [\"gcc\"],\n              \"args\": [\"-fsyntax-only\", \"-std=c90\"],\n              \"I\": [\n                  \"${file_path}/include\",\n                  \"${folder}/include\",\n                  \"/usr/local/include\",\n              ],\n              \"excludes\": [],\n          },\n          \"g++\": {\n              \"disable\": false,\n              \"executable\": [\"g++\"],\n              \"args\": [\"-fsyntax-only\", \"-std=c++17\"],\n              \"I\": [\n                  \"${file_path}/include\",\n                  \"${folder}/include\",\n                  \"/usr/local/include\",\n              ],\n              \"excludes\": [],\n          },\n      },\n  }\n  ```\n  \n  Here are some useful docs for SublimeLinter settings.\n  \n  - [General information on how SublimeLinter works with settings](http://sublimelinter.readthedocs.org/en/stable/settings.html).\n  - [Variables that can be used in settings](http://www.sublimelinter.com/en/stable/settings.html#settings-expansion).\n  - [Information on generic linter settings](http://sublimelinter.readthedocs.org/en/stable/linter_settings.html).\n  \n  \n  Notes\n  =====\n  \n  - [Here](https://gcc.gnu.org/onlinedocs/gcc-9.1.0/gcc/Warning-Options.html#Warning-Options)\n    is the official list of warning options in gcc 8.2.0. I prefer turn on all warnings\n    via `-Wall` (this is default for this plugin) and then suppress unwanted warnings via `-Wno-` prefix.\n  \n  - Flag `-fsyntax-only` gives a much faster syntax-only checking but\n    [some warnings](https://github.com/SublimeLinter/SublimeLinter-gcc/issues/4)\n    which are emitted in the code optimization phase would not be caught.\n  \n  \n  Demo\n  ====\n  \n  ![linting_example](https://raw.githubusercontent.com/SublimeLinter/SublimeLinter-gcc/gh-pages/images/linting_example_sl4.png)\n  \n  \n  Troubleshooting\n  ===============\n  \n  C/C++ linting is not always straightforward.\n  A few things to try when there's (almost) no linting information available:\n  \n  - Try to compile from the command line, and verify it works.\n  - The linter might be missing some header files. They can be added with settings `I`.\n  - Sometimes gcc fails to locate the C/C++ standard library headers.\n  \n  Assuming the compilation works when executed via command line, try to compile with `g++ -v`.\n  This will display all of the hidden flags that gcc uses.\n  As a last resort, they can all be added in settings `args`.\n  \n  \n  Contributing\n  ============\n  \n  If you would like to contribute enhancements or fixes, please do the following:\n  \n  1. Fork the plugin repository.\n  1. Hack on a separate topic branch created from the latest `master`.\n  1. Commit and push the topic branch.\n  1. Make sure your modification could pass unittests.\n  1. Make a pull request.\n  1. Be patient.\n  \n  Please note that modifications should follow these coding guidelines:\n  \n  - Indent is 4 spaces.\n  - Code should pass flake8 and pep257 linters.\n  - Probably format codes with [black](https://github.com/psf/black) code formatter.\n  - Vertical whitespace helps readability, don’t be afraid to use it.\n  - Please use descriptive variable names, no abbreviations unless they are very well known.\n  \n  Thank you for helping out!\n  \n  \n  Supporters <a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ATXYY9Y78EQ3Y\" target=\"_blank\"><img src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" /></a>\n  ==========\n  \n  Thank you guys for sending me some cups of coffee.\n",
			"settings":
			{
				"buffer_size": 8286,
				"line_ending": "Unix",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "third_party/slang/external/vulkan/include/vulkan/vulkan.hpp",
			"settings":
			{
				"buffer_size": 2369181,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/usr/include/vulkan/vulkan.hpp",
			"settings":
			{
				"buffer_size": 4010350,
				"line_ending": "Unix"
			}
		},
		{
			"file": "third_party/slang/external/vulkan/include/vulkan/vulkan_core.h",
			"settings":
			{
				"buffer_size": 451013,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Math/FalcorMath.h",
			"settings":
			{
				"buffer_size": 8456,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.h",
			"settings":
			{
				"buffer_size": 13038,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/type.h",
			"settings":
			{
				"buffer_size": 6550,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Framework.cpp",
			"settings":
			{
				"buffer_size": 2253,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/CopyContext.h",
			"settings":
			{
				"buffer_size": 7675,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VertexLayout.cpp",
			"settings":
			{
				"buffer_size": 1862,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/FalcorConfig.h",
			"settings":
			{
				"buffer_size": 2513,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
			"settings":
			{
				"buffer_size": 2479,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Falcor.h",
			"settings":
			{
				"buffer_size": 6959,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/PixelDebug.h",
			"settings":
			{
				"buffer_size": 5769,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/Bitmap.h",
			"settings":
			{
				"buffer_size": 6060,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Image/Bitmap.cpp",
			"settings":
			{
				"buffer_size": 21119,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
			"settings":
			{
				"buffer_size": 10241,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Console.h",
			"settings":
			{
				"buffer_size": 2101,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Scripting/Scripting.h",
			"settings":
			{
				"buffer_size": 5726,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorPool.h",
			"settings":
			{
				"buffer_size": 5594,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorPool.cpp",
			"settings":
			{
				"buffer_size": 2661,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.h",
			"settings":
			{
				"buffer_size": 10063,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/GraphicsState.cpp",
			"settings":
			{
				"buffer_size": 8458,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/ComputeState.cpp",
			"settings":
			{
				"buffer_size": 3405,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ComputeStateObject.cpp",
			"settings":
			{
				"buffer_size": 2465,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/GpuTimer.cpp",
			"settings":
			{
				"buffer_size": 4479,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/ComputeState.h",
			"settings":
			{
				"buffer_size": 3782,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/State/StateGraph.h",
			"settings":
			{
				"buffer_size": 4323,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgram/RtProgram.cpp",
			"settings":
			{
				"buffer_size": 7986,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Raytracing/RtProgram/RtProgram.h",
			"settings":
			{
				"buffer_size": 6561,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/AppData.h",
			"settings":
			{
				"buffer_size": 2896,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Platform/Linux/ProgressBarLinux.cpp",
			"settings":
			{
				"buffer_size": 5059,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/AppData.cpp",
			"settings":
			{
				"buffer_size": 5386,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Mogwai/Extensions/Capture/CaptureTrigger.h",
			"settings":
			{
				"buffer_size": 3849,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/Sample.cpp",
			"settings":
			{
				"buffer_size": 24565,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/VertexLayout.h",
			"settings":
			{
				"buffer_size": 7327,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Engine.cpp",
			"settings":
			{
				"buffer_size": 6374,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Device.cpp",
			"settings":
			{
				"buffer_size": 16485,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/Vulkan/VkQueryHeap.cpp",
			"settings":
			{
				"buffer_size": 2776,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12Device.cpp",
			"settings":
			{
				"buffer_size": 15156,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.h",
			"settings":
			{
				"buffer_size": 5712,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/DescriptorSet.cpp",
			"settings":
			{
				"buffer_size": 2524,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/ResourceViews.cpp",
			"settings":
			{
				"buffer_size": 4602,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Falcor.sln",
			"settings":
			{
				"buffer_size": 19418,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.h",
			"settings":
			{
				"buffer_size": 25118,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraphUI.h",
			"settings":
			{
				"buffer_size": 8554,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/RenderGraph.h",
			"settings":
			{
				"buffer_size": 11348,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/ResourceCache.h",
			"settings":
			{
				"buffer_size": 5357,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.h",
			"settings":
			{
				"buffer_size": 4422,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/DebugConsole.h",
			"settings":
			{
				"buffer_size": 4292,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/SceneBuilder.h",
			"settings":
			{
				"buffer_size": 11802,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Utils/Debug/debug.h",
			"settings":
			{
				"buffer_size": 2463,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#ifndef __FALCOR_DEBUG_H__"
			}
		},
		{
			"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
			"settings":
			{
				"buffer_size": 20399,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Scene.cpp",
			"settings":
			{
				"buffer_size": 49068,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/CameraController.cpp",
			"settings":
			{
				"buffer_size": 9863,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Scene/Camera/Camera.cpp",
			"settings":
			{
				"buffer_size": 13365,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/Falcor/Core/API/D3D12/D3D12Resource.cpp",
			"settings":
			{
				"buffer_size": 6227,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 320.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/max/dev/Falcor",
		"/home/max/dev/Falcor/src",
		"/home/max/dev/Falcor/src/Falcor",
		"/home/max/dev/Falcor/src/Falcor/RenderGraph",
		"/home/max/dev/Falcor/src/Falcor/RenderPasses",
		"/home/max/dev/Falcor/src/Falcor/Scene",
		"/home/max/dev/Falcor/src/Falcor/Scene/Animation",
		"/home/max/dev/Falcor/src/Falcor/Scene/Camera",
		"/home/max/dev/Falcor/src/Falcor/Scene/Importers",
		"/home/max/dev/Falcor/src/Falcor/Scene/Lights",
		"/home/max/dev/Falcor/src/Falcor/Scene/ParticleSystem",
		"/home/max/dev/Falcor/src/Falcor/Testing",
		"/home/max/dev/Falcor/src/Falcor/Utils",
		"/home/max/dev/Falcor/src/Mogwai",
		"/home/max/dev/Falcor/src/Mogwai/Extensions",
		"/home/max/dev/Falcor/src/Mogwai/Extensions/Capture",
		"/home/max/dev/Falcor/src/RenderPasses",
		"/home/max/dev/Falcor/src/RenderPasses/AccumulatePass",
		"/home/max/dev/Falcor/src/RenderPasses/Antialiasing",
		"/home/max/dev/Falcor/src/RenderPasses/Antialiasing/FXAA",
		"/home/max/dev/Falcor/src/RenderPasses/Antialiasing/TAA",
		"/home/max/dev/Falcor/src/RenderPasses/BlitPass",
		"/home/max/dev/Falcor/src/RenderPasses/BSDFViewer",
		"/home/max/dev/Falcor/src/RenderPasses/CSM",
		"/home/max/dev/Falcor/src/RenderPasses/DebugPasses",
		"/home/max/dev/Falcor/src/RenderPasses/DebugPasses/InvalidPixelDetectionPass",
		"/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SideBySidePass",
		"/home/max/dev/Falcor/src/RenderPasses/DebugPasses/SplitScreenPass",
		"/home/max/dev/Falcor/src/RenderPasses/DepthPass",
		"/home/max/dev/Falcor/src/RenderPasses/ErrorMeasurePass",
		"/home/max/dev/Falcor/src/RenderPasses/ForwardLightingPass",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer/GBuffer",
		"/home/max/dev/Falcor/src/RenderPasses/GBuffer/VBuffer",
		"/home/max/dev/Falcor/src/RenderPasses/ImageLoader",
		"/home/max/dev/Falcor/src/RenderPasses/MinimalPathTracer",
		"/home/max/dev/Falcor/src/RenderPasses/PixelInspectorPass",
		"/home/max/dev/Falcor/src/RenderPasses/SkyBox",
		"/home/max/dev/Falcor/src/RenderPasses/SSAO",
		"/home/max/dev/Falcor/src/RenderPasses/SVGFPass",
		"/home/max/dev/Falcor/src/RenderPasses/TemporalDelayPass",
		"/home/max/dev/Falcor/src/RenderPasses/ToneMapper",
		"/home/max/dev/Falcor/src/RenderPasses/Utils",
		"/home/max/dev/Falcor/src/RenderPasses/Utils/Composite",
		"/home/max/dev/Falcor/src/RenderPasses/Utils/GaussianBlur"
	],
	"file_history":
	[
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGpuFence.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Engine.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/AABB_VKTests.cs.slang",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/AABB_VKTests.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKFbo.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKTexture.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKState.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan/VKGpuTimer.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/API/GpuTimer.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Utils/HalfUtilsTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/SlangMutatingTests.cpp",
		"/home/max/dev/Falcor/src/Tools/FalcorTest/Tests/Slang/WaveOps.cs.slang",
		"/home/max/dev/Falcor/src/Falcor/Scene/SceneBuilder.cpp",
		"/home/max/dev/Falcor/src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
		"/home/max/dev/Falcor/src/Falcor/Data/LightProbes/20050806-03_hd.hdr",
		"/home/max/dev/Falcor/build/bin/Data/cube.obj",
		"/home/max/.config/sublime-text-3/Packages/SublimeLinter-gcc/miscellaneous/demo.cpp",
		"/home/max/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
		"/home/max/Downloads/Telegram Desktop/scene.v001.usda",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/eevee_occlusion_trace.c",
		"/home/max/dev/blender/release/scripts/startup/bl_ui/__init__.py",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/shaders/common_fullscreen_embree_vert.glsl",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/shaders/common_uniforms_embree_lib.glsl",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/eevee_objects_map.h",
		"/home/max/dev/blender/source/blender/blenlib/intern/winstuff_dir.c",
		"/home/max/dev/blender/source/blender/draw/intern/draw_cache_extract.h",
		"/home/max/dev/blender/source/blender/draw/engines/workbench/workbench_engine.c",
		"/home/max/dev/blender/source/blender/draw/DRW_engine_types.h",
		"/home/max/dev/blender/source/blender/blenlib/BLI_hash.h",
		"/home/max/dev/blender/source/blender/blenlib/BLI_index_range.h",
		"/home/max/dev/blender/source/blender/bmesh/intern/bmesh_operators_private.h",
		"/home/max/dev/blender/source/blender/bmesh/intern/bmesh_operators.h",
		"/home/max/dev/blender/source/blender/python/intern/CMakeLists.txt",
		"/home/max/dev/blender/source/blender/blenlib/intern/BLI_ghash_utils.c",
		"/home/max/dev/blender/source/blender/blenlib/intern/BLI_ghash.c",
		"/home/max/dev/blender/source/blender/blenloader/intern/versioning_280.c",
		"/home/max/dev/blender/source/blender/draw/engines/eevee/shaders/ambient_occlusion_trace_lib.glsl",
		"/home/max/dev/bivis/src/blender/addon/ui.py",
		"/home/max/dev/bivis/src/blender/addon/presets.py",
		"/home/max/dev/bivis/src/blender/addon/properties.py",
		"/home/max/dev/bivis/src/blender/addon/osl.py",
		"/home/max/dev/bivis/src/blender/addon/operators.py",
		"/home/max/dev/bivis/src/blender/blender_python.cpp",
		"/home/max/dev/bivis/src/blender/addon/engine.py",
		"/home/max/dev/bivis/src/blender/addon/__init__.py",
		"/home/max/dev/bivis/src/blender/CMakeLists.txt",
		"/home/max/dev/blender/intern/CMakeLists.txt",
		"/home/max/dev/unity/scripts/mesh_smoother.cs",
		"/home/max/dev/unity/scripts/mesh_helper.cs",
		"/home/max/dev/fasta/src/fasta_lib/renderer.h",
		"/home/max/dev/fasta/CMakeLists.txt",
		"/home/max/dev/fasta/third_party/glad/include/KHR/khrplatform.h",
		"/home/max/dev/fasta/third_party/glad/include/glad/glad.h",
		"/home/max/dev/fasta/src/locomotive_lib/logging.h",
		"/home/max/dev/fasta/src/locomotive_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/locomotive_lib/logging.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.h",
		"/home/max/dev/fasta/src/xenon_py/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.h",
		"/home/max/dev/fasta/src/xenon_lib/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_cmd/CMakeLists.txt",
		"/home/max/dev/fasta/src/xenon_lib/XN_Mesh.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Shader.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_GBuffer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.h",
		"/home/max/dev/fasta/src/xenon_lib/XN_Renderer.cpp",
		"/home/max/dev/fasta/src/xenon_cmd/fsquad.h",
		"/home/max/dev/fasta/src/xenon_cmd/xenon.cpp",
		"/home/max/dev/fasta/src/xenon_lib/XN_RendererIPR.cpp",
		"/home/max/projects/Xenon/xenon.sublime-project",
		"/home/max/projects/Xenon/src/ROP_Xenon.h",
		"/home/max/projects/Xenon/src/ROP_Xenon.cpp",
		"/home/max/projects/Xenon/makefile"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 125.0,
		"where_history":
		[
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src,/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor,/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/third_party/slang/source",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/third_party/slang",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/Build",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/",
			"/home/max/dev/Falcor/src/Mogwai",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor/src",
			"/home/max/dev/Falcor/src/Falcor",
			"/home/max/dev/Falcor/src/Falcor/Core/API/Vulkan",
			"/home/max/dev/Falcor"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"_profileEvent",
			"getGlobalClock",
			"FrameRate",
			"UnitTestContext",
			"Scene* pScene",
			"LightCollection",
			"= delete",
			"GraphicsState",
			"gpDevice",
			"ResourceHandle",
			"gpDevice",
			"mpDevice",
			"kSwapChainBuffersCount",
			"gpDevice",
			"mpSwapChainFbos",
			"gpDevice",
			"IFramework",
			"IRenderer",
			"_pass",
			"dso",
			"D3D12_DRAW_INDEXED_ARGUMENTS",
			"createDrawList",
			"uavBarrier",
			"initGeomDesc",
			"PixelData",
			"ShadingData",
			"getCurrentBackBufferIndex",
			"vkAcquireNextImageKHR",
			"AMD_EXTENSIONS",
			"gl_BaryCoordSmoothAMD",
			"setDefines",
			"gl_BaryCoordSmoothAMD",
			"vulkan",
			"availableFor",
			"SV_Barycentrics",
			"GL_AMD_shader_explicit_vertex_parameter",
			"SV_Barycentrics",
			"SV_PrimitiveID",
			"SV_Barycentrics",
			"register(",
			"asTexture",
			"DebugConsole",
			"unordered_set",
			"gProfileEnabled",
			"FrameRate",
			"gProfileEnabled",
			"enableDebugLayer",
			"generateBSDFSample",
			"[[vk::binding",
			"uavBarrier",
			"spvVersion",
			"requires SPIR-V 1.3",
			"SPV_ENV_VULKAN_1_1_SPIRV_1_4",
			"SPIR-V 1.3",
			"SLANG_SPIRV",
			"SPIR",
			"<float3>",
			"ReflectionResourceType",
			"float3",
			"kFormatDesc",
			"RGB32Float",
			"GLM_ENABLE_EXPERIMENTAL",
			"float3",
			"RGB16Float",
			"float3",
			"RGB32Float",
			"WaveGetLaneCount",
			"FormatForElementType",
			"falcorToVkDescType",
			"VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER",
			"WaveGetLaneCount",
			"int16_t",
			"int16_T",
			"AMD_EXTENSIONS",
			"extension",
			"420.430",
			"Test failed",
			"printToDebugWindow",
			"mapBuffer",
			"Dispatch dimension exceeds maximum",
			"InvalidPixel",
			"vkCreateImage",
			"asTexture",
			"flush",
			"getRootDescriptorRangeCount",
			"mRootDescriptorRangeIndices",
			"VkDescriptorSet",
			"createDescriptorSetLayout",
			"RootSignature",
			"mRootConstants",
			"mRootDescriptors",
			"VkPipeline",
			"bindForCompute",
			"applyComputeVars",
			"applyProgramVarsCommon",
			"bindForCompute",
			"mRootDescriptors",
			"mpRootSignature",
			"mpRootSignature->apiInit",
			"RootSignature",
			"falcorToVkDescType",
			"reflectType",
			"reflectResourceType",
			"reflectType",
			"reflectResourceType",
			"root",
			"ResourceBindFlags",
			"getRenderContext",
			"performance warning",
			"sPrograms",
			"vk::binding",
			"[[vk::binding",
			"BindLocation",
			"setParameterBlock",
			"setVao",
			"prepareForDraw",
			"prepareDescriptorSets",
			"setCbv",
			"prepareDescriptorSets",
			"apply GraphicsVars",
			"VK_IMAGE_LAYOUT_PREINITIALIZED",
			"bindParameterBlockRootDescs",
			" test bindParameterBlockRootDescs",
			"VK_IMAGE_LAYOUT",
			"kOutfileDirSwitch",
			"VK_IMAGE_LAYOUT",
			"clear fbo",
			"VK_IMAGE_LAYOUT_PREINITIALIZED."
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"mpDevice",
			"kPassTempLibSuffix",
			"PROJECT_DIR",
			"spData"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 351,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/Falcor/Core/API/D3D12/D3D12ResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18914,
						"regions":
						{
						},
						"selection":
						[
							[
								11151,
								11151
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4150.0,
						"zoom_level": 1.0
					},
					"stack_index": 186,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 76983,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										323,
										331
									],
									[
										397,
										405
									],
									[
										677,
										685
									],
									[
										753,
										761
									],
									[
										998,
										1006
									],
									[
										1088,
										1096
									],
									[
										1290,
										1298
									],
									[
										1351,
										1359
									],
									[
										1557,
										1565
									],
									[
										1611,
										1619
									],
									[
										1911,
										1919
									],
									[
										1978,
										1986
									],
									[
										2152,
										2160
									],
									[
										2216,
										2224
									],
									[
										2601,
										2609
									],
									[
										2938,
										2946
									],
									[
										3001,
										3009
									],
									[
										3166,
										3174
									],
									[
										3555,
										3563
									],
									[
										3713,
										3721
									],
									[
										3767,
										3775
									],
									[
										3989,
										3997
									],
									[
										4041,
										4049
									],
									[
										4111,
										4119
									],
									[
										4176,
										4184
									],
									[
										4346,
										4354
									],
									[
										4421,
										4429
									],
									[
										4484,
										4492
									],
									[
										4613,
										4621
									],
									[
										4678,
										4686
									],
									[
										4731,
										4739
									],
									[
										4874,
										4882
									],
									[
										4954,
										4962
									],
									[
										5021,
										5029
									],
									[
										5230,
										5238
									],
									[
										5340,
										5348
									],
									[
										5437,
										5445
									],
									[
										5631,
										5639
									],
									[
										5707,
										5715
									],
									[
										5770,
										5778
									],
									[
										5915,
										5923
									],
									[
										5996,
										6004
									],
									[
										6065,
										6073
									],
									[
										6194,
										6202
									],
									[
										6259,
										6267
									],
									[
										6312,
										6320
									],
									[
										6509,
										6517
									],
									[
										6584,
										6592
									],
									[
										6647,
										6655
									],
									[
										6836,
										6844
									],
									[
										6909,
										6917
									],
									[
										7295,
										7303
									],
									[
										7383,
										7391
									],
									[
										7596,
										7604
									],
									[
										7679,
										7687
									],
									[
										7750,
										7758
									],
									[
										7894,
										7902
									],
									[
										7935,
										7943
									],
									[
										8128,
										8136
									],
									[
										8243,
										8251
									],
									[
										8346,
										8354
									],
									[
										8479,
										8487
									],
									[
										8548,
										8556
									],
									[
										8605,
										8613
									],
									[
										8802,
										8810
									],
									[
										8875,
										8883
									],
									[
										8936,
										8944
									],
									[
										9207,
										9215
									],
									[
										9294,
										9302
									],
									[
										9443,
										9451
									],
									[
										9528,
										9536
									],
									[
										9601,
										9609
									],
									[
										9784,
										9792
									],
									[
										9853,
										9861
									],
									[
										9998,
										10006
									],
									[
										10079,
										10087
									],
									[
										10148,
										10156
									],
									[
										10291,
										10299
									],
									[
										10370,
										10378
									],
									[
										10437,
										10445
									],
									[
										10568,
										10576
									],
									[
										10635,
										10643
									],
									[
										10690,
										10698
									],
									[
										10825,
										10833
									],
									[
										10896,
										10904
									],
									[
										10955,
										10963
									],
									[
										11128,
										11136
									],
									[
										11195,
										11203
									],
									[
										11250,
										11258
									],
									[
										11481,
										11489
									],
									[
										11551,
										11559
									],
									[
										11674,
										11682
									],
									[
										11986,
										12001
									],
									[
										12194,
										12209
									],
									[
										12323,
										12338
									],
									[
										12341,
										12356
									],
									[
										12644,
										12659
									],
									[
										12814,
										12829
									],
									[
										13057,
										13072
									],
									[
										13300,
										13315
									],
									[
										13535,
										13550
									],
									[
										13879,
										13894
									],
									[
										14315,
										14330
									],
									[
										14554,
										14569
									],
									[
										14838,
										14853
									],
									[
										15055,
										15070
									],
									[
										15230,
										15245
									],
									[
										15664,
										15679
									],
									[
										16016,
										16031
									],
									[
										16252,
										16267
									],
									[
										16286,
										16301
									],
									[
										16359,
										16374
									],
									[
										16519,
										16534
									],
									[
										16859,
										16874
									],
									[
										17184,
										17199
									],
									[
										17218,
										17233
									],
									[
										17257,
										17272
									],
									[
										17274,
										17289
									],
									[
										17529,
										17544
									],
									[
										17737,
										17752
									],
									[
										17905,
										17920
									],
									[
										17939,
										17954
									],
									[
										18167,
										18182
									],
									[
										18201,
										18216
									],
									[
										18331,
										18346
									],
									[
										18365,
										18380
									],
									[
										18690,
										18705
									],
									[
										18753,
										18768
									],
									[
										19030,
										19045
									],
									[
										19093,
										19108
									],
									[
										19568,
										19583
									],
									[
										19885,
										19900
									],
									[
										20177,
										20192
									],
									[
										20366,
										20381
									],
									[
										20764,
										20779
									],
									[
										21036,
										21051
									],
									[
										21466,
										21481
									],
									[
										21502,
										21517
									],
									[
										21627,
										21642
									],
									[
										21654,
										21669
									],
									[
										21794,
										21809
									],
									[
										21924,
										21939
									],
									[
										22034,
										22049
									],
									[
										22150,
										22165
									],
									[
										22363,
										22378
									],
									[
										22563,
										22578
									],
									[
										22963,
										22978
									],
									[
										23201,
										23216
									],
									[
										23358,
										23373
									],
									[
										23611,
										23626
									],
									[
										24014,
										24029
									],
									[
										24293,
										24308
									],
									[
										24532,
										24547
									],
									[
										24715,
										24730
									],
									[
										25095,
										25110
									],
									[
										25282,
										25297
									],
									[
										25811,
										25826
									],
									[
										26039,
										26054
									],
									[
										26152,
										26167
									],
									[
										26283,
										26298
									],
									[
										26449,
										26464
									],
									[
										26858,
										26873
									],
									[
										27008,
										27023
									],
									[
										27422,
										27437
									],
									[
										27576,
										27591
									],
									[
										27856,
										27871
									],
									[
										27914,
										27929
									],
									[
										28261,
										28276
									],
									[
										28410,
										28425
									],
									[
										28464,
										28479
									],
									[
										28544,
										28559
									],
									[
										28621,
										28636
									],
									[
										28696,
										28711
									],
									[
										28803,
										28818
									],
									[
										28947,
										28962
									],
									[
										29127,
										29142
									],
									[
										29192,
										29207
									],
									[
										29435,
										29450
									],
									[
										29645,
										29660
									],
									[
										29807,
										29822
									],
									[
										30243,
										30258
									],
									[
										30682,
										30697
									],
									[
										31006,
										31021
									],
									[
										31375,
										31390
									],
									[
										31762,
										31777
									],
									[
										32159,
										32174
									],
									[
										32550,
										32565
									],
									[
										32793,
										32808
									],
									[
										33044,
										33059
									],
									[
										33300,
										33315
									],
									[
										33650,
										33665
									],
									[
										33817,
										33832
									],
									[
										33862,
										33877
									],
									[
										33923,
										33938
									],
									[
										33959,
										33974
									],
									[
										33977,
										33992
									],
									[
										34049,
										34064
									],
									[
										34147,
										34162
									],
									[
										34250,
										34265
									],
									[
										34271,
										34286
									],
									[
										34331,
										34346
									],
									[
										34469,
										34484
									],
									[
										34630,
										34645
									],
									[
										34939,
										34954
									],
									[
										35262,
										35277
									],
									[
										35524,
										35539
									],
									[
										35562,
										35577
									],
									[
										35898,
										35913
									],
									[
										35927,
										35942
									],
									[
										36385,
										36400
									],
									[
										36563,
										36578
									],
									[
										36938,
										36951
									],
									[
										37163,
										37176
									],
									[
										37558,
										37571
									],
									[
										37949,
										37962
									],
									[
										38221,
										38234
									],
									[
										38580,
										38593
									],
									[
										39037,
										39050
									],
									[
										39205,
										39218
									],
									[
										39429,
										39442
									],
									[
										39616,
										39629
									],
									[
										39778,
										39791
									],
									[
										39954,
										39967
									],
									[
										40137,
										40150
									],
									[
										40282,
										40295
									],
									[
										40521,
										40534
									],
									[
										40688,
										40701
									],
									[
										40851,
										40864
									],
									[
										41010,
										41023
									],
									[
										41328,
										41341
									],
									[
										41387,
										41400
									],
									[
										41446,
										41459
									],
									[
										41504,
										41517
									],
									[
										41800,
										41815
									],
									[
										41842,
										41857
									],
									[
										42051,
										42066
									],
									[
										42325,
										42340
									],
									[
										42536,
										42551
									],
									[
										42856,
										42871
									],
									[
										43051,
										43066
									],
									[
										43263,
										43278
									],
									[
										43549,
										43564
									],
									[
										43586,
										43601
									],
									[
										43767,
										43782
									],
									[
										43844,
										43859
									],
									[
										44187,
										44202
									],
									[
										44366,
										44381
									],
									[
										44391,
										44406
									],
									[
										44448,
										44463
									],
									[
										44473,
										44488
									],
									[
										44529,
										44544
									],
									[
										44897,
										44912
									],
									[
										45095,
										45110
									],
									[
										45333,
										45348
									],
									[
										45489,
										45504
									],
									[
										45734,
										45749
									],
									[
										46044,
										46059
									],
									[
										46354,
										46369
									],
									[
										46664,
										46679
									],
									[
										46973,
										46988
									],
									[
										47283,
										47298
									],
									[
										47514,
										47529
									],
									[
										47809,
										47824
									],
									[
										48260,
										48275
									],
									[
										48552,
										48567
									],
									[
										49003,
										49018
									],
									[
										49357,
										49372
									],
									[
										49619,
										49634
									],
									[
										50020,
										50035
									],
									[
										50390,
										50405
									],
									[
										50699,
										50714
									],
									[
										51021,
										51036
									],
									[
										51308,
										51323
									],
									[
										51633,
										51648
									],
									[
										51988,
										52003
									],
									[
										52334,
										52349
									],
									[
										52771,
										52786
									],
									[
										53103,
										53118
									],
									[
										53337,
										53352
									],
									[
										53603,
										53618
									],
									[
										53781,
										53796
									],
									[
										54075,
										54090
									],
									[
										54340,
										54355
									],
									[
										54693,
										54708
									],
									[
										55040,
										55049
									],
									[
										55183,
										55192
									],
									[
										55233,
										55242
									],
									[
										55247,
										55256
									],
									[
										55548,
										55557
									],
									[
										55741,
										55750
									],
									[
										55909,
										55918
									],
									[
										56098,
										56107
									],
									[
										56219,
										56228
									],
									[
										56500,
										56509
									],
									[
										56749,
										56758
									],
									[
										56763,
										56772
									],
									[
										56794,
										56803
									],
									[
										57021,
										57030
									],
									[
										57033,
										57042
									],
									[
										57253,
										57262
									],
									[
										57564,
										57573
									],
									[
										57860,
										57869
									],
									[
										58167,
										58176
									],
									[
										58358,
										58367
									],
									[
										58650,
										58659
									],
									[
										58750,
										58759
									],
									[
										58961,
										58970
									],
									[
										59113,
										59122
									],
									[
										59151,
										59160
									],
									[
										59328,
										59337
									],
									[
										59451,
										59460
									],
									[
										59713,
										59722
									],
									[
										59873,
										59882
									],
									[
										60299,
										60308
									],
									[
										60525,
										60534
									],
									[
										60842,
										60851
									],
									[
										61132,
										61146
									],
									[
										61647,
										61661
									],
									[
										62019,
										62033
									],
									[
										62296,
										62310
									],
									[
										62695,
										62709
									],
									[
										63003,
										63017
									],
									[
										63262,
										63276
									],
									[
										63451,
										63465
									],
									[
										63633,
										63647
									],
									[
										63892,
										63906
									],
									[
										64362,
										64376
									],
									[
										64682,
										64696
									],
									[
										64890,
										64904
									],
									[
										65224,
										65238
									],
									[
										65552,
										65566
									],
									[
										65853,
										65867
									],
									[
										66186,
										66200
									],
									[
										66463,
										66477
									],
									[
										66862,
										66876
									],
									[
										67170,
										67184
									],
									[
										67429,
										67443
									],
									[
										67618,
										67632
									],
									[
										67800,
										67814
									],
									[
										68059,
										68073
									],
									[
										68529,
										68543
									],
									[
										68849,
										68863
									],
									[
										69057,
										69071
									],
									[
										69391,
										69405
									],
									[
										69719,
										69733
									],
									[
										70020,
										70034
									],
									[
										70423,
										70437
									],
									[
										70731,
										70745
									],
									[
										70990,
										71004
									],
									[
										71179,
										71193
									],
									[
										71361,
										71375
									],
									[
										71620,
										71634
									],
									[
										72090,
										72104
									],
									[
										72410,
										72424
									],
									[
										72618,
										72632
									],
									[
										72952,
										72966
									],
									[
										73280,
										73294
									],
									[
										73580,
										73594
									],
									[
										73903,
										73917
									],
									[
										74162,
										74176
									],
									[
										74351,
										74365
									],
									[
										74533,
										74547
									],
									[
										74792,
										74806
									],
									[
										75262,
										75276
									],
									[
										75582,
										75596
									],
									[
										75790,
										75804
									],
									[
										76124,
										76138
									],
									[
										76452,
										76466
									],
									[
										76762,
										76775
									],
									[
										76864,
										76877
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								76771,
								76771
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 10,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 31179.0,
						"zoom_level": 1.0
					},
					"stack_index": 102,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/Mogwai/Data/ForwardRenderer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1872,
						"regions":
						{
						},
						"selection":
						[
							[
								1872,
								1872
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 321,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/Mogwai/Data/BSDFViewer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 634,
						"regions":
						{
						},
						"selection":
						[
							[
								156,
								156
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 322,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "third_party/slang/external/glslang/glslang/Include/BaseTypes.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18643,
						"regions":
						{
						},
						"selection":
						[
							[
								18403,
								18403
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8214.0,
						"zoom_level": 1.0
					},
					"stack_index": 337,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "third_party/slang/external/glslang/glslang/MachineIndependent/Initialize.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 477356,
						"regions":
						{
						},
						"selection":
						[
							[
								383248,
								383248
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 141562.0,
						"zoom_level": 1.0
					},
					"stack_index": 338,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/Falcor/Scene/Raster.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4526,
						"regions":
						{
						},
						"selection":
						[
							[
								2674,
								2674
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 326,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.3d.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7187,
						"regions":
						{
						},
						"selection":
						[
							[
								5949,
								5949
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 314,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/Falcor/Scene/ShadingData.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15181,
						"regions":
						{
						},
						"selection":
						[
							[
								2978,
								2978
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 510.0,
						"zoom_level": 1.0
					},
					"stack_index": 327,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/RenderPasses/Antialiasing/TAA/TAA.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5743,
						"regions":
						{
						},
						"selection":
						[
							[
								1764,
								1764
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 336,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18635,
						"regions":
						{
						},
						"selection":
						[
							[
								2197,
								2197
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 97,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11295,
						"regions":
						{
						},
						"selection":
						[
							[
								11255,
								11255
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 393.0,
						"zoom_level": 1.0
					},
					"stack_index": 99,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41661,
						"regions":
						{
						},
						"selection":
						[
							[
								9495,
								9495
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2703.0,
						"zoom_level": 1.0
					},
					"stack_index": 96,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVH.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12420,
						"regions":
						{
						},
						"selection":
						[
							[
								5412,
								5412
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 98,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/Falcor/Utils/Algorithm/ParallelReduction.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4191,
						"regions":
						{
						},
						"selection":
						[
							[
								1791,
								1791
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 357,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewerParams.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6511,
						"regions":
						{
						},
						"selection":
						[
							[
								6078,
								6078
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1400.0,
						"zoom_level": 1.0
					},
					"stack_index": 333,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "third_party/slang/external/glslang/glslang/MachineIndependent/ParseHelper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 364782,
						"regions":
						{
						},
						"selection":
						[
							[
								97986,
								97986
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 35727.0,
						"zoom_level": 1.0
					},
					"stack_index": 362,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "third_party/slang/external/glslang/SPIRV/SpvBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 105150,
						"regions":
						{
						},
						"selection":
						[
							[
								1975,
								1975
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 734.0,
						"zoom_level": 1.0
					},
					"stack_index": 359,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "third_party/slang/source/slang/slang-ir.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 150177,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14249.0,
						"zoom_level": 1.0
					},
					"stack_index": 361,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "third_party/slang/external/glslang/SPIRV/SpvBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35460,
						"regions":
						{
						},
						"selection":
						[
							[
								2248,
								2248
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 547.0,
						"zoom_level": 1.0
					},
					"stack_index": 360,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "third_party/slang/source/slang-glslang/slang-glslang.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18679,
						"regions":
						{
						},
						"selection":
						[
							[
								9729,
								9729
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3760.0,
						"zoom_level": 1.0
					},
					"stack_index": 364,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "third_party/slang/external/spirv-tools/source/spirv_target_env.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10524,
						"regions":
						{
						},
						"selection":
						[
							[
								6159,
								6159
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2145.0,
						"zoom_level": 1.0
					},
					"stack_index": 365,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "third_party/slang/external/spirv-tools/CHANGES",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47890,
						"regions":
						{
						},
						"selection":
						[
							[
								26053,
								26053
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 969.0,
						"zoom_level": 1.0
					},
					"stack_index": 366,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/Falcor/Scene/SceneBuilder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23587,
						"regions":
						{
						},
						"selection":
						[
							[
								20564,
								20564
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6175.0,
						"zoom_level": 1.0
					},
					"stack_index": 145,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "src/Falcor/Scene/SceneTypes.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5249,
						"regions":
						{
						},
						"selection":
						[
							[
								5227,
								5227
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1842.0,
						"zoom_level": 1.0
					},
					"stack_index": 325,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "third_party/slang/source/slang/slang-type-layout.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 149248,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3250.0,
						"zoom_level": 1.0
					},
					"stack_index": 372,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "third_party/slang/source/slang/slang-type-layout.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34158,
						"regions":
						{
						},
						"selection":
						[
							[
								4752,
								4752
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7568.0,
						"zoom_level": 1.0
					},
					"stack_index": 371,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "third_party/slang/slang.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 132132,
						"regions":
						{
						},
						"selection":
						[
							[
								14421,
								14421
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1367.0,
						"zoom_level": 1.0
					},
					"stack_index": 367,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "third_party/slang/external/glm/test/core/core_type_aligned.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5440,
						"regions":
						{
						},
						"selection":
						[
							[
								1764,
								1764
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 612.0,
						"zoom_level": 1.0
					},
					"stack_index": 373,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "src/Falcor/Core/API/Formats.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19719,
						"regions":
						{
						},
						"selection":
						[
							[
								1805,
								1805
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 354,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "third_party/slang/external/glm/glm/gtx/compatibility.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14979,
						"regions":
						{
						},
						"selection":
						[
							[
								452,
								452
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 385,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "src/Falcor/Core/API/Vulkan/VKFormats.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10446,
						"regions":
						{
						},
						"selection":
						[
							[
								8644,
								8644
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1346.0,
						"zoom_level": 1.0
					},
					"stack_index": 245,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "third_party/slang/external/glslang/glslang/Include/intermediate.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 54763,
						"regions":
						{
						},
						"selection":
						[
							[
								25731,
								25731
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16441.0,
						"zoom_level": 1.0
					},
					"stack_index": 389,
					"type": "text"
				},
				{
					"buffer": 33,
					"file": "third_party/slang/docs/language-reference/04-types.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14365,
						"regions":
						{
						},
						"selection":
						[
							[
								1184,
								1184
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 392,
					"type": "text"
				},
				{
					"buffer": 34,
					"file": "third_party/slang/external/glslang/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4705,
						"regions":
						{
						},
						"selection":
						[
							[
								2012,
								2012
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 393,
					"type": "text"
				},
				{
					"buffer": 35,
					"file": "third_party/slang/external/glslang/SPIRV/GlslangToSpv.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 339007,
						"regions":
						{
						},
						"selection":
						[
							[
								1976,
								1976
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 394,
					"type": "text"
				},
				{
					"buffer": 36,
					"file": "third_party/slang/external/glslang/Test/100.frag",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4744,
						"regions":
						{
						},
						"selection":
						[
							[
								1633,
								1633
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1683.0,
						"zoom_level": 1.0
					},
					"stack_index": 395,
					"type": "text"
				},
				{
					"buffer": 37,
					"file": "third_party/slang/external/glext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 811328,
						"regions":
						{
						},
						"selection":
						[
							[
								91506,
								91506
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 29021.0,
						"zoom_level": 1.0
					},
					"stack_index": 396,
					"type": "text"
				},
				{
					"buffer": 38,
					"file": "third_party/slang/docs/wave-intrinsics.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13145,
						"regions":
						{
						},
						"selection":
						[
							[
								370,
								370
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4675.0,
						"zoom_level": 1.0
					},
					"stack_index": 363,
					"type": "text"
				},
				{
					"buffer": 39,
					"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4278,
						"regions":
						{
						},
						"selection":
						[
							[
								4017,
								4017
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 243.0,
						"zoom_level": 1.0
					},
					"stack_index": 50,
					"type": "text"
				},
				{
					"buffer": 40,
					"file": "src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8904,
						"regions":
						{
						},
						"selection":
						[
							[
								7978,
								7978
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 328.0,
						"zoom_level": 1.0
					},
					"stack_index": 377,
					"type": "text"
				},
				{
					"buffer": 41,
					"file": "src/Tools/FalcorTest/Tests/Core/RootBufferParamBlockTests.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3086,
						"regions":
						{
						},
						"selection":
						[
							[
								1883,
								1883
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 380,
					"type": "text"
				},
				{
					"buffer": 42,
					"file": "src/Tools/FalcorTest/Tests/Core/ParamBlockDefinition.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2225,
						"regions":
						{
						},
						"selection":
						[
							[
								2107,
								2107
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 381,
					"type": "text"
				},
				{
					"buffer": 43,
					"file": "src/Falcor/Core/Program/ProgramVersion.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8252,
						"regions":
						{
						},
						"selection":
						[
							[
								4136,
								4136
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1125.0,
						"zoom_level": 1.0
					},
					"stack_index": 206,
					"type": "text"
				},
				{
					"buffer": 44,
					"file": "src/Falcor/RenderGraph/RenderGraphIR.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5922,
						"regions":
						{
						},
						"selection":
						[
							[
								2350,
								2350
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 873.0,
						"zoom_level": 1.0
					},
					"stack_index": 434,
					"type": "text"
				},
				{
					"buffer": 45,
					"file": "src/Falcor/RenderGraph/RenderGraphIR.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3409,
						"regions":
						{
						},
						"selection":
						[
							[
								1773,
								1773
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 436,
					"type": "text"
				},
				{
					"buffer": 46,
					"file": "src/Falcor/Scene/Importers/AssimpImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44987,
						"regions":
						{
						},
						"selection":
						[
							[
								40724,
								40724
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14260.0,
						"zoom_level": 1.0
					},
					"stack_index": 143,
					"type": "text"
				},
				{
					"buffer": 47,
					"file": "src/Falcor/Scene/Importers/AssimpImporter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2484,
						"regions":
						{
						},
						"selection":
						[
							[
								1819,
								1819
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 118,
					"type": "text"
				},
				{
					"buffer": 48,
					"file": "src/Falcor/Scene/Importers/PythonImporter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2145,
						"regions":
						{
						},
						"selection":
						[
							[
								1987,
								1987
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 116,
					"type": "text"
				},
				{
					"buffer": 49,
					"file": "src/Falcor/Scene/Camera/Camera.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11607,
						"regions":
						{
						},
						"selection":
						[
							[
								606,
								606
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 170.0,
						"zoom_level": 1.0
					},
					"stack_index": 105,
					"type": "text"
				},
				{
					"buffer": 50,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4312,
						"regions":
						{
						},
						"selection":
						[
							[
								4312,
								4312
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 277.0,
						"zoom_level": 1.0
					},
					"stack_index": 121,
					"type": "text"
				},
				{
					"buffer": 51,
					"file": "src/Falcor/Utils/SampleGenerators/StratifiedSamplePattern.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3466,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 134,
					"type": "text"
				},
				{
					"buffer": 52,
					"file": "src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3159,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 133,
					"type": "text"
				},
				{
					"buffer": 53,
					"file": "src/Falcor/Utils/SampleGenerators/CPUSampleGenerator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2791,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 132,
					"type": "text"
				},
				{
					"buffer": 54,
					"file": "src/Falcor/Core/API/GraphicsStateObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6433,
						"regions":
						{
						},
						"selection":
						[
							[
								5115,
								5115
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 182,
					"type": "text"
				},
				{
					"buffer": 55,
					"file": "src/Falcor/Core/API/GraphicsStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4274,
						"regions":
						{
						},
						"selection":
						[
							[
								4227,
								4227
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 734.0,
						"zoom_level": 1.0
					},
					"stack_index": 181,
					"type": "text"
				},
				{
					"buffer": 56,
					"file": "src/Falcor/Core/API/Vulkan/VKFbo.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5357,
						"regions":
						{
						},
						"selection":
						[
							[
								5357,
								5357
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1481.0,
						"zoom_level": 1.0
					},
					"stack_index": 219,
					"type": "text"
				},
				{
					"buffer": 57,
					"file": "src/Falcor/Core/API/ComputeStateObject.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3496,
						"regions":
						{
						},
						"selection":
						[
							[
								3496,
								3496
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 530.0,
						"zoom_level": 1.0
					},
					"stack_index": 185,
					"type": "text"
				},
				{
					"buffer": 58,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvProbe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6616,
						"regions":
						{
						},
						"selection":
						[
							[
								1791,
								1791
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 112,
					"type": "text"
				},
				{
					"buffer": 59,
					"file": "src/Falcor/Core/API/ComputeContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3967,
						"regions":
						{
						},
						"selection":
						[
							[
								3377,
								3377
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 459.0,
						"zoom_level": 1.0
					},
					"stack_index": 257,
					"type": "text"
				},
				{
					"buffer": 60,
					"file": "src/Falcor/Core/API/GpuTimer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3787,
						"regions":
						{
						},
						"selection":
						[
							[
								2467,
								2467
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 597.0,
						"zoom_level": 1.0
					},
					"stack_index": 256,
					"type": "text"
				},
				{
					"buffer": 61,
					"file": "src/Falcor/Core/API/LowLevelContextData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3656,
						"regions":
						{
						},
						"selection":
						[
							[
								3566,
								3566
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 428.0,
						"zoom_level": 1.0
					},
					"stack_index": 224,
					"type": "text"
				},
				{
					"buffer": 62,
					"file": "src/Falcor/Utils/Timing/Profiler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8484,
						"regions":
						{
						},
						"selection":
						[
							[
								6832,
								6832
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2244.0,
						"zoom_level": 1.0
					},
					"stack_index": 77,
					"type": "text"
				},
				{
					"buffer": 63,
					"file": "src/Falcor/Core/Platform/Windows/Windows.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26025,
						"regions":
						{
						},
						"selection":
						[
							[
								25040,
								25040
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11154.0,
						"zoom_level": 1.0
					},
					"stack_index": 437,
					"type": "text"
				},
				{
					"buffer": 64,
					"file": "third_party/slang/tools/gfx/d3d12/render-d3d12.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 139342,
						"regions":
						{
						},
						"selection":
						[
							[
								17858,
								17858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7779.0,
						"zoom_level": 1.0
					},
					"stack_index": 458,
					"type": "text"
				},
				{
					"buffer": 65,
					"file": "third_party/slang/tools/gfx/vulkan/render-vk.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 99401,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7701.0,
						"zoom_level": 1.0
					},
					"stack_index": 457,
					"type": "text"
				},
				{
					"buffer": 66,
					"file": "src/Falcor/Raytracing/RtProgramVarsHelper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6214,
						"regions":
						{
						},
						"selection":
						[
							[
								5889,
								5889
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1486.0,
						"zoom_level": 1.0
					},
					"stack_index": 348,
					"type": "text"
				},
				{
					"buffer": 67,
					"file": "src/Falcor/Core/API/D3D12/FalcorD3D12.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9709,
						"regions":
						{
						},
						"selection":
						[
							[
								1759,
								1759
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 459,
					"type": "text"
				},
				{
					"buffer": 68,
					"file": "src/Falcor/Core/Platform/OS.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8771,
						"regions":
						{
						},
						"selection":
						[
							[
								5508,
								5508
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 801.0,
						"zoom_level": 1.0
					},
					"stack_index": 406,
					"type": "text"
				},
				{
					"buffer": 69,
					"file": "src/RenderPasses/SkyBox/SkyBox.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2520,
						"regions":
						{
						},
						"selection":
						[
							[
								1900,
								1900
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 405,
					"type": "text"
				},
				{
					"buffer": 70,
					"file": "src/RenderPasses/CSM/VisibilityPass.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2953,
						"regions":
						{
						},
						"selection":
						[
							[
								2130,
								2130
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 315,
					"type": "text"
				},
				{
					"buffer": 71,
					"file": "src/RenderPasses/ToneMapper/ToneMapping.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5616,
						"regions":
						{
						},
						"selection":
						[
							[
								2154,
								2154
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 404,
					"type": "text"
				},
				{
					"buffer": 72,
					"file": "src/RenderPasses/ToneMapper/Luminance.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2106,
						"regions":
						{
						},
						"selection":
						[
							[
								1729,
								1729
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 403,
					"type": "text"
				},
				{
					"buffer": 73,
					"file": "src/Falcor/Scene/Importers/PythonImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3931,
						"regions":
						{
						},
						"selection":
						[
							[
								3536,
								3536
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 144,
					"type": "text"
				},
				{
					"buffer": 74,
					"file": "src/Falcor/Scene/Importers/SceneImporter.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36435,
						"regions":
						{
						},
						"selection":
						[
							[
								2727,
								2727
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1573.0,
						"zoom_level": 1.0
					},
					"stack_index": 152,
					"type": "text"
				},
				{
					"buffer": 75,
					"file": "src/Falcor/Scene/Importers/SceneImporter.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2157,
						"regions":
						{
						},
						"selection":
						[
							[
								1980,
								1980
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 117,
					"type": "text"
				},
				{
					"buffer": 76,
					"file": "src/Falcor/Core/Program/Program.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12423,
						"regions":
						{
						},
						"selection":
						[
							[
								1815,
								1815
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3978.0,
						"zoom_level": 1.0
					},
					"stack_index": 204,
					"type": "text"
				},
				{
					"buffer": 77,
					"file": "src/Falcor/Core/Program/GraphicsProgram.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3809,
						"regions":
						{
						},
						"selection":
						[
							[
								3024,
								3024
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 275.0,
						"zoom_level": 1.0
					},
					"stack_index": 207,
					"type": "text"
				},
				{
					"buffer": 78,
					"file": "src/Falcor/Core/Program/ComputeProgram.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3818,
						"regions":
						{
						},
						"selection":
						[
							[
								2221,
								2221
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 171.0,
						"zoom_level": 1.0
					},
					"stack_index": 178,
					"type": "text"
				},
				{
					"buffer": 79,
					"file": "src/Falcor/Core/Program/GraphicsProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2616,
						"regions":
						{
						},
						"selection":
						[
							[
								2229,
								2229
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 208,
					"type": "text"
				},
				{
					"buffer": 80,
					"file": "src/Falcor/Scene/Camera/Camera.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5388,
						"regions":
						{
						},
						"selection":
						[
							[
								4265,
								4265
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 335,
					"type": "text"
				},
				{
					"buffer": 81,
					"file": "src/Falcor/Utils/ArgList.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4051,
						"regions":
						{
						},
						"selection":
						[
							[
								1841,
								1841
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 340,
					"type": "text"
				},
				{
					"buffer": 82,
					"file": "src/Mogwai/Mogwai.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22921,
						"regions":
						{
						},
						"selection":
						[
							[
								3354,
								3354
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1734.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 83,
					"file": "src/Mogwai/stdafx.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1851,
						"regions":
						{
						},
						"selection":
						[
							[
								1850,
								1850
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 449,
					"type": "text"
				},
				{
					"buffer": 84,
					"file": "src/Falcor/Core/Renderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6779,
						"regions":
						{
						},
						"selection":
						[
							[
								6710,
								6710
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1855.0,
						"zoom_level": 1.0
					},
					"stack_index": 108,
					"type": "text"
				},
				{
					"buffer": 85,
					"file": "src/Falcor/RenderGraph/RenderPassLibrary.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11235,
						"regions":
						{
						},
						"selection":
						[
							[
								3037,
								3037
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 648.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 86,
					"file": "src/Falcor/RenderGraph/RenderPassLibrary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5360,
						"regions":
						{
						},
						"selection":
						[
							[
								2717,
								2717
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 726.0,
						"zoom_level": 1.0
					},
					"stack_index": 161,
					"type": "text"
				},
				{
					"buffer": 87,
					"file": "src/Falcor/Utils/UI/UserInput.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7116,
						"regions":
						{
						},
						"selection":
						[
							[
								1793,
								1793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 396.0,
						"zoom_level": 1.0
					},
					"stack_index": 109,
					"type": "text"
				},
				{
					"buffer": 88,
					"file": "src/Externals/GLM/glm/gtx/compatibility.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14969,
						"regions":
						{
						},
						"selection":
						[
							[
								10757,
								10757
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1029.0,
						"zoom_level": 1.0
					},
					"stack_index": 111,
					"type": "text"
				},
				{
					"buffer": 89,
					"file": "src/Falcor/Core/Sample.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7503,
						"regions":
						{
						},
						"selection":
						[
							[
								7441,
								7441
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1839.0,
						"zoom_level": 1.0
					},
					"stack_index": 100,
					"type": "text"
				},
				{
					"buffer": 90,
					"file": "src/Falcor/Utils/UI/Gui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26357,
						"regions":
						{
						},
						"selection":
						[
							[
								21882,
								21882
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4284.0,
						"zoom_level": 1.0
					},
					"stack_index": 70,
					"type": "text"
				},
				{
					"buffer": 91,
					"file": "src/Falcor/Core/Window.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17937,
						"regions":
						{
						},
						"selection":
						[
							[
								14716,
								14716
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 923.0,
						"zoom_level": 1.0
					},
					"stack_index": 317,
					"type": "text"
				},
				{
					"buffer": 92,
					"file": "src/Falcor/Core/Window.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5627,
						"regions":
						{
						},
						"selection":
						[
							[
								1906,
								1906
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 925.0,
						"zoom_level": 1.0
					},
					"stack_index": 316,
					"type": "text"
				},
				{
					"buffer": 93,
					"file": "src/Falcor/Utils/ArgList.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6269,
						"regions":
						{
						},
						"selection":
						[
							[
								6268,
								6268
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1893.0,
						"zoom_level": 1.0
					},
					"stack_index": 339,
					"type": "text"
				},
				{
					"buffer": 94,
					"file": "src/Falcor/Utils/AlignedAllocator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6544,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1479.0,
						"zoom_level": 1.0
					},
					"stack_index": 311,
					"type": "text"
				},
				{
					"buffer": 95,
					"file": "src/Falcor/Core/API/Resource.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7620,
						"regions":
						{
						},
						"selection":
						[
							[
								1963,
								1963
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2958.0,
						"zoom_level": 1.0
					},
					"stack_index": 193,
					"type": "text"
				},
				{
					"buffer": 96,
					"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6996,
						"regions":
						{
						},
						"selection":
						[
							[
								1742,
								1742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1978.0,
						"zoom_level": 1.0
					},
					"stack_index": 378,
					"type": "text"
				},
				{
					"buffer": 97,
					"file": "src/Tools/FalcorTest/Tests/DebugPasses/InvalidPixelDetectionTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3746,
						"regions":
						{
						},
						"selection":
						[
							[
								2971,
								2971
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 88.0,
						"zoom_level": 1.0
					},
					"stack_index": 323,
					"type": "text"
				},
				{
					"buffer": 98,
					"file": "src/Tools/FalcorTest/Tests/ShadingUtils/ShadingUtilsTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12331,
						"regions":
						{
						},
						"selection":
						[
							[
								12306,
								12306
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 399,
					"type": "text"
				},
				{
					"buffer": 99,
					"file": "src/Falcor/Testing/UnitTest.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18208,
						"regions":
						{
						},
						"selection":
						[
							[
								4230,
								4230
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1303.0,
						"zoom_level": 1.0
					},
					"stack_index": 142,
					"type": "text"
				},
				{
					"buffer": 100,
					"file": "src/Falcor/Testing/UnitTest.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11972,
						"regions":
						{
						},
						"selection":
						[
							[
								11972,
								11972
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4227.0,
						"zoom_level": 1.0
					},
					"stack_index": 141,
					"type": "text"
				},
				{
					"buffer": 101,
					"file": "src/Falcor/Core/Program/ComputeProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2634,
						"regions":
						{
						},
						"selection":
						[
							[
								2219,
								2219
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 179,
					"type": "text"
				},
				{
					"buffer": 102,
					"file": "src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6233,
						"regions":
						{
						},
						"selection":
						[
							[
								4566,
								4566
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 379,
					"type": "text"
				},
				{
					"buffer": 103,
					"file": "src/Tools/FalcorTest/Tests/Core/BufferAccessTests.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1913,
						"regions":
						{
						},
						"selection":
						[
							[
								1913,
								1913
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 383,
					"type": "text"
				},
				{
					"buffer": 104,
					"file": "src/Falcor/Core/API/Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5154,
						"regions":
						{
						},
						"selection":
						[
							[
								4887,
								4887
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 394.0,
						"zoom_level": 1.0
					},
					"stack_index": 262,
					"type": "text"
				},
				{
					"buffer": 105,
					"file": "src/Falcor/Core/API/RenderContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11439,
						"regions":
						{
						},
						"selection":
						[
							[
								11439,
								11439
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2499.0,
						"zoom_level": 1.0
					},
					"stack_index": 237,
					"type": "text"
				},
				{
					"buffer": 106,
					"file": "src/Falcor/Core/API/RenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5599,
						"regions":
						{
						},
						"selection":
						[
							[
								5599,
								5599
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 52.0,
						"zoom_level": 1.0
					},
					"stack_index": 236,
					"type": "text"
				},
				{
					"buffer": 107,
					"file": "src/Falcor/Core/API/RasterizerState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7490,
						"regions":
						{
						},
						"selection":
						[
							[
								1841,
								1841
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2300.0,
						"zoom_level": 1.0
					},
					"stack_index": 346,
					"type": "text"
				},
				{
					"buffer": 108,
					"file": "src/Falcor/Core/API/RasterizerState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2247,
						"regions":
						{
						},
						"selection":
						[
							[
								1768,
								1768
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 347,
					"type": "text"
				},
				{
					"buffer": 109,
					"file": "src/Falcor/Core/API/Vulkan/VKRasterizerState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2034,
						"regions":
						{
						},
						"selection":
						[
							[
								1761,
								1761
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 355,
					"type": "text"
				},
				{
					"buffer": 110,
					"file": "src/Falcor/Core/API/QueryHeap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3576,
						"regions":
						{
						},
						"selection":
						[
							[
								3337,
								3337
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 223,
					"type": "text"
				},
				{
					"buffer": 111,
					"file": "src/Falcor/Core/API/Formats.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13822,
						"regions":
						{
						},
						"selection":
						[
							[
								12301,
								12301
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5661.0,
						"zoom_level": 1.0
					},
					"stack_index": 244,
					"type": "text"
				},
				{
					"buffer": 112,
					"file": "src/Falcor/Core/API/Buffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19233,
						"regions":
						{
						},
						"selection":
						[
							[
								7930,
								7930
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 188,
					"type": "text"
				},
				{
					"buffer": 113,
					"file": "src/Falcor/Experimental/Scene/Lights/EnvProbe.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3717,
						"regions":
						{
						},
						"selection":
						[
							[
								3676,
								3676
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 165,
					"type": "text"
				},
				{
					"buffer": 114,
					"file": "src/Mogwai/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1908,
						"regions":
						{
						},
						"selection":
						[
							[
								1509,
								1509
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 107,
					"type": "text"
				},
				{
					"buffer": 115,
					"file": "src/Mogwai/Extensions/Capture/CaptureTrigger.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7579,
						"regions":
						{
						},
						"selection":
						[
							[
								7161,
								7161
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1993.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 116,
					"file": "src/Mogwai/Extensions/Capture/VideoCapture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9655,
						"regions":
						{
						},
						"selection":
						[
							[
								4887,
								4887
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 852.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 117,
					"file": "src/Mogwai/Extensions/Capture/VideoCapture.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2996,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 118,
					"file": "src/Mogwai/Extensions/Capture/FrameCapture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6569,
						"regions":
						{
						},
						"selection":
						[
							[
								6478,
								6478
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1841.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 119,
					"file": "src/Mogwai/Extensions/Capture/FrameCapture.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2710,
						"regions":
						{
						},
						"selection":
						[
							[
								1765,
								1765
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 120,
					"file": "src/Tools/RenderGraphEditor/RenderGraphEditor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20892,
						"regions":
						{
						},
						"selection":
						[
							[
								2395,
								2395
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 394.0,
						"zoom_level": 1.0
					},
					"stack_index": 324,
					"type": "text"
				},
				{
					"buffer": 121,
					"file": "src/Externals/dear_imgui_addons/imguinodegrapheditor/imguinodegrapheditor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47853,
						"regions":
						{
						},
						"selection":
						[
							[
								23852,
								23852
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6018.0,
						"zoom_level": 1.0
					},
					"stack_index": 438,
					"type": "text"
				},
				{
					"buffer": 122,
					"file": "src/Tools/ImageCompare/ImageCompare.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14050,
						"regions":
						{
						},
						"selection":
						[
							[
								13223,
								13223
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6069.0,
						"zoom_level": 1.0
					},
					"stack_index": 429,
					"type": "text"
				},
				{
					"buffer": 123,
					"file": "src/Mogwai/Mogwai.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8268,
						"regions":
						{
						},
						"selection":
						[
							[
								4109,
								4109
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1243.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 124,
					"file": "src/Falcor/RenderGraph/RenderGraphImportExport.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6264,
						"regions":
						{
						},
						"selection":
						[
							[
								2379,
								2379
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2182.0,
						"zoom_level": 1.0
					},
					"stack_index": 431,
					"type": "text"
				},
				{
					"buffer": 125,
					"file": "src/Falcor/RenderGraph/ResourceCache.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8382,
						"regions":
						{
						},
						"selection":
						[
							[
								1783,
								1783
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 156,
					"type": "text"
				},
				{
					"buffer": 126,
					"file": "src/Falcor/Scene/Animation/AnimationController.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13034,
						"regions":
						{
						},
						"selection":
						[
							[
								11190,
								11190
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3009.0,
						"zoom_level": 1.0
					},
					"stack_index": 91,
					"type": "text"
				},
				{
					"buffer": 127,
					"file": "src/Falcor/RenderGraph/RenderPassReflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12090,
						"regions":
						{
						},
						"selection":
						[
							[
								9644,
								9644
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3631.0,
						"zoom_level": 1.0
					},
					"stack_index": 164,
					"type": "text"
				},
				{
					"buffer": 128,
					"file": "src/Falcor/RenderGraph/RenderPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2449,
						"regions":
						{
						},
						"selection":
						[
							[
								2365,
								2365
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 68,
					"type": "text"
				},
				{
					"buffer": 129,
					"file": "src/Falcor/RenderPasses/ResolvePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2584,
						"regions":
						{
						},
						"selection":
						[
							[
								2528,
								2528
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 60,
					"type": "text"
				},
				{
					"buffer": 130,
					"file": "src/Falcor/RenderPasses/ResolvePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3100,
						"regions":
						{
						},
						"selection":
						[
							[
								2008,
								2008
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 59,
					"type": "text"
				},
				{
					"buffer": 131,
					"file": "src/Falcor/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5056,
						"regions":
						{
						},
						"selection":
						[
							[
								1443,
								1443
							]
						],
						"settings":
						{
							"auto_name": "file( GLOB SOURCES",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 187.0,
						"zoom_level": 1.0
					},
					"stack_index": 269,
					"type": "text"
				},
				{
					"buffer": 132,
					"file": "src/Falcor/Scene/ParticleSystem/ParticleSystem.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10438,
						"regions":
						{
						},
						"selection":
						[
							[
								10145,
								10145
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3060.0,
						"zoom_level": 1.0
					},
					"stack_index": 148,
					"type": "text"
				},
				{
					"buffer": 133,
					"file": "src/Falcor/Scene/ParticleSystem/ParticleSystem.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16405,
						"regions":
						{
						},
						"selection":
						[
							[
								6210,
								6210
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1436.0,
						"zoom_level": 1.0
					},
					"stack_index": 147,
					"type": "text"
				},
				{
					"buffer": 134,
					"file": "src/Falcor/Scene/HitInfo.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3622,
						"regions":
						{
						},
						"selection":
						[
							[
								3622,
								3622
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 119,
					"type": "text"
				},
				{
					"buffer": 135,
					"file": "src/Samples/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1201,
						"regions":
						{
						},
						"selection":
						[
							[
								1105,
								1105
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 428,
					"type": "text"
				},
				{
					"buffer": 136,
					"file": "src/Tools/RenderGraphEditor/RenderGraphEditor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3325,
						"regions":
						{
						},
						"selection":
						[
							[
								1883,
								1883
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 433,
					"type": "text"
				},
				{
					"buffer": 137,
					"file": "src/RenderPasses/DebugPasses/DebugPasses.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2436,
						"regions":
						{
						},
						"selection":
						[
							[
								1981,
								1981
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 441,
					"type": "text"
				},
				{
					"buffer": 138,
					"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3041,
						"regions":
						{
						},
						"selection":
						[
							[
								2356,
								2356
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"type": "text"
				},
				{
					"buffer": 139,
					"file": "src/RenderPasses/DebugPasses/SplitScreenPass/SplitScreenPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6309,
						"regions":
						{
						},
						"selection":
						[
							[
								4841,
								4841
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 599.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"type": "text"
				},
				{
					"buffer": 140,
					"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2482,
						"regions":
						{
						},
						"selection":
						[
							[
								2331,
								2331
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 53,
					"type": "text"
				},
				{
					"buffer": 141,
					"file": "src/RenderPasses/DebugPasses/SideBySidePass/SideBySidePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3134,
						"regions":
						{
						},
						"selection":
						[
							[
								2697,
								2697
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 52,
					"type": "text"
				},
				{
					"buffer": 142,
					"file": "src/RenderPasses/DebugPasses/InvalidPixelDetectionPass/InvalidPixelDetectionPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2619,
						"regions":
						{
						},
						"selection":
						[
							[
								2442,
								2442
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 51,
					"type": "text"
				},
				{
					"buffer": 143,
					"file": "src/RenderPasses/CSM/CSM.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8949,
						"regions":
						{
						},
						"selection":
						[
							[
								5509,
								5509
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 66,
					"type": "text"
				},
				{
					"buffer": 144,
					"file": "src/RenderPasses/CSM/CSM.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35619,
						"regions":
						{
						},
						"selection":
						[
							[
								34358,
								34358
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13124.0,
						"zoom_level": 1.0
					},
					"stack_index": 65,
					"type": "text"
				},
				{
					"buffer": 145,
					"file": "src/Falcor/Utils/UI/Gui.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2501,
						"regions":
						{
						},
						"selection":
						[
							[
								1773,
								1773
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 440,
					"type": "text"
				},
				{
					"buffer": 146,
					"file": "src/Falcor/Utils/UI/TextRenderer.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2282,
						"regions":
						{
						},
						"selection":
						[
							[
								1872,
								1872
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 312,
					"type": "text"
				},
				{
					"buffer": 147,
					"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16567,
						"regions":
						{
						},
						"selection":
						[
							[
								15730,
								15730
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4815.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 148,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2960,
						"regions":
						{
						},
						"selection":
						[
							[
								2618,
								2618
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 149,
					"file": "src/RenderPasses/ErrorMeasurePass/ErrorMeasurePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4795,
						"regions":
						{
						},
						"selection":
						[
							[
								2642,
								2642
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 150,
					"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3479,
						"regions":
						{
						},
						"selection":
						[
							[
								2670,
								2670
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 49,
					"type": "text"
				},
				{
					"buffer": 151,
					"file": "src/Falcor/RenderGraph/RenderPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7147,
						"regions":
						{
						},
						"selection":
						[
							[
								6998,
								6998
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1785.0,
						"zoom_level": 1.0
					},
					"stack_index": 67,
					"type": "text"
				},
				{
					"buffer": 152,
					"file": "src/RenderPasses/PixelInspectorPass/PixelInspectorPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15137,
						"regions":
						{
						},
						"selection":
						[
							[
								15116,
								15116
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3999.0,
						"zoom_level": 1.0
					},
					"stack_index": 48,
					"type": "text"
				},
				{
					"buffer": 153,
					"file": "src/RenderPasses/SSAO/SSAO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4465,
						"regions":
						{
						},
						"selection":
						[
							[
								3259,
								3259
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 47,
					"type": "text"
				},
				{
					"buffer": 154,
					"file": "src/RenderPasses/SkyBox/SkyBox.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3377,
						"regions":
						{
						},
						"selection":
						[
							[
								2854,
								2854
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 69,
					"type": "text"
				},
				{
					"buffer": 155,
					"file": "src/RenderPasses/SkyBox/SkyBox.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8099,
						"regions":
						{
						},
						"selection":
						[
							[
								2926,
								2926
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 33,
					"type": "text"
				},
				{
					"buffer": 156,
					"file": "src/RenderPasses/Antialiasing/FXAA/FXAA.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3316,
						"regions":
						{
						},
						"selection":
						[
							[
								3095,
								3095
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 32,
					"type": "text"
				},
				{
					"buffer": 157,
					"file": "src/RenderPasses/Antialiasing/TAA/TAA.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3086,
						"regions":
						{
						},
						"selection":
						[
							[
								2743,
								2743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"type": "text"
				},
				{
					"buffer": 158,
					"file": "src/RenderPasses/Antialiasing/TAA/TAA.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5446,
						"regions":
						{
						},
						"selection":
						[
							[
								5089,
								5089
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 735.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"type": "text"
				},
				{
					"buffer": 159,
					"file": "src/RenderPasses/Antialiasing/FXAA/FXAA.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4663,
						"regions":
						{
						},
						"selection":
						[
							[
								2727,
								2727
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"type": "text"
				},
				{
					"buffer": 160,
					"file": "src/RenderPasses/SkyBox/Data/cube.obj",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 401,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 407,
					"type": "text"
				},
				{
					"buffer": 161,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4522,
						"regions":
						{
						},
						"selection":
						[
							[
								4518,
								4518
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 736.0,
						"zoom_level": 1.0
					},
					"stack_index": 63,
					"type": "text"
				},
				{
					"buffer": 162,
					"file": "src/RenderPasses/ForwardLightingPass/ForwardLightingPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9750,
						"regions":
						{
						},
						"selection":
						[
							[
								5658,
								5658
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 920.0,
						"zoom_level": 1.0
					},
					"stack_index": 35,
					"type": "text"
				},
				{
					"buffer": 163,
					"file": "src/RenderPasses/ImageLoader/ImageLoader.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2888,
						"regions":
						{
						},
						"selection":
						[
							[
								2706,
								2706
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 62,
					"type": "text"
				},
				{
					"buffer": 164,
					"file": "src/RenderPasses/ImageLoader/ImageLoader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5146,
						"regions":
						{
						},
						"selection":
						[
							[
								3341,
								3341
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 667.0,
						"zoom_level": 1.0
					},
					"stack_index": 61,
					"type": "text"
				},
				{
					"buffer": 165,
					"file": "src/RenderPasses/ToneMapper/ToneMapper.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5483,
						"regions":
						{
						},
						"selection":
						[
							[
								3702,
								3702
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 566.0,
						"zoom_level": 1.0
					},
					"stack_index": 39,
					"type": "text"
				},
				{
					"buffer": 166,
					"file": "src/RenderPasses/ToneMapper/ToneMapper.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16177,
						"regions":
						{
						},
						"selection":
						[
							[
								5942,
								5942
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1296.0,
						"zoom_level": 1.0
					},
					"stack_index": 38,
					"type": "text"
				},
				{
					"buffer": 167,
					"file": "src/RenderPasses/AccumulatePass/AccumulatePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10804,
						"regions":
						{
						},
						"selection":
						[
							[
								10527,
								10527
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2739.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"type": "text"
				},
				{
					"buffer": 168,
					"file": "src/RenderPasses/GBuffer/GBufferBase.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3675,
						"regions":
						{
						},
						"selection":
						[
							[
								2523,
								2523
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 124.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 169,
					"file": "src/RenderPasses/GBuffer/GBufferBase.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6613,
						"regions":
						{
						},
						"selection":
						[
							[
								3481,
								3481
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 328.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 170,
					"file": "src/Falcor/Utils/SampleGenerators/HaltonSamplePattern.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2647,
						"regions":
						{
						},
						"selection":
						[
							[
								2237,
								2237
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 136,
					"type": "text"
				},
				{
					"buffer": 171,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2997,
						"regions":
						{
						},
						"selection":
						[
							[
								2997,
								2997
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 444,
					"type": "text"
				},
				{
					"buffer": 172,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9973,
						"regions":
						{
						},
						"selection":
						[
							[
								9052,
								9052
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2299.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 173,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRaster.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3089,
						"regions":
						{
						},
						"selection":
						[
							[
								2542,
								2542
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 174,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3189,
						"regions":
						{
						},
						"selection":
						[
							[
								3186,
								3186
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 175,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5817,
						"regions":
						{
						},
						"selection":
						[
							[
								3525,
								3525
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 293.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"type": "text"
				},
				{
					"buffer": 176,
					"file": "src/RenderPasses/DepthPass/DepthPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5263,
						"regions":
						{
						},
						"selection":
						[
							[
								3404,
								3404
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 380.0,
						"zoom_level": 1.0
					},
					"stack_index": 34,
					"type": "text"
				},
				{
					"buffer": 177,
					"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8197,
						"regions":
						{
						},
						"selection":
						[
							[
								2426,
								2426
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 157.0,
						"zoom_level": 1.0
					},
					"stack_index": 36,
					"type": "text"
				},
				{
					"buffer": 178,
					"file": "src/RenderPasses/SSAO/SSAO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11771,
						"regions":
						{
						},
						"selection":
						[
							[
								5314,
								5314
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 769.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 179,
					"file": "src/RenderPasses/Utils/GaussianBlur/GaussianBlur.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3547,
						"regions":
						{
						},
						"selection":
						[
							[
								3392,
								3392
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 37,
					"type": "text"
				},
				{
					"buffer": 180,
					"file": "src/RenderPasses/Utils/Composite/Composite.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4310,
						"regions":
						{
						},
						"selection":
						[
							[
								2346,
								2346
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 361.0,
						"zoom_level": 1.0
					},
					"stack_index": 45,
					"type": "text"
				},
				{
					"buffer": 181,
					"file": "src/RenderPasses/TemporalDelayPass/TemporalDelayPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2703,
						"regions":
						{
						},
						"selection":
						[
							[
								2647,
								2647
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 44,
					"type": "text"
				},
				{
					"buffer": 182,
					"file": "src/RenderPasses/Utils/Composite/Composite.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2924,
						"regions":
						{
						},
						"selection":
						[
							[
								2671,
								2671
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 46,
					"type": "text"
				},
				{
					"buffer": 183,
					"file": "src/RenderPasses/DepthPass/DepthPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3357,
						"regions":
						{
						},
						"selection":
						[
							[
								3353,
								3353
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 64,
					"type": "text"
				},
				{
					"buffer": 184,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3771,
						"regions":
						{
						},
						"selection":
						[
							[
								1726,
								1726
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 443,
					"type": "text"
				},
				{
					"buffer": 185,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRT.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5767,
						"regions":
						{
						},
						"selection":
						[
							[
								1771,
								1771
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 442,
					"type": "text"
				},
				{
					"buffer": 186,
					"file": "src/RenderPasses/GBuffer/VBuffer/VBufferRaster.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5657,
						"regions":
						{
						},
						"selection":
						[
							[
								5261,
								5261
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 975.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 187,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferRT.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9623,
						"regions":
						{
						},
						"selection":
						[
							[
								9623,
								9623
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2721.0,
						"zoom_level": 1.0
					},
					"stack_index": 345,
					"type": "text"
				},
				{
					"buffer": 188,
					"file": "src/RenderPasses/Antialiasing/Antialiasing.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2797,
						"regions":
						{
						},
						"selection":
						[
							[
								2797,
								2797
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"type": "text"
				},
				{
					"buffer": 189,
					"file": "src/RenderPasses/BlitPass/BlitPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3995,
						"regions":
						{
						},
						"selection":
						[
							[
								3861,
								3861
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 57,
					"type": "text"
				},
				{
					"buffer": 190,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4307,
						"regions":
						{
						},
						"selection":
						[
							[
								3025,
								3025
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 56,
					"type": "text"
				},
				{
					"buffer": 191,
					"file": "src/RenderPasses/SVGFPass/SVGFPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18970,
						"regions":
						{
						},
						"selection":
						[
							[
								12854,
								12854
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5598.0,
						"zoom_level": 1.0
					},
					"stack_index": 41,
					"type": "text"
				},
				{
					"buffer": 192,
					"file": "src/RenderPasses/TemporalDelayPass/TemporalDelayPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6201,
						"regions":
						{
						},
						"selection":
						[
							[
								6137,
								6137
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1041.0,
						"zoom_level": 1.0
					},
					"stack_index": 43,
					"type": "text"
				},
				{
					"buffer": 193,
					"file": "src/RenderPasses/SVGFPass/SVGFPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4511,
						"regions":
						{
						},
						"selection":
						[
							[
								2587,
								2587
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 40,
					"type": "text"
				},
				{
					"buffer": 194,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18949,
						"regions":
						{
						},
						"selection":
						[
							[
								4324,
								4324
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 548.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 195,
					"file": "src/RenderPasses/DebugPasses/ComparisonPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3108,
						"regions":
						{
						},
						"selection":
						[
							[
								2227,
								2227
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 54,
					"type": "text"
				},
				{
					"buffer": 196,
					"file": "src/RenderPasses/DebugPasses/ComparisonPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5202,
						"regions":
						{
						},
						"selection":
						[
							[
								3784,
								3784
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 854.0,
						"zoom_level": 1.0
					},
					"stack_index": 55,
					"type": "text"
				},
				{
					"buffer": 197,
					"file": "src/RenderPasses/BlitPass/BlitPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2803,
						"regions":
						{
						},
						"selection":
						[
							[
								2669,
								2669
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 58,
					"type": "text"
				},
				{
					"buffer": 198,
					"file": "src/RenderPasses/AccumulatePass/AccumulatePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5448,
						"regions":
						{
						},
						"selection":
						[
							[
								3628,
								3628
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"type": "text"
				},
				{
					"buffer": 199,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3602,
						"regions":
						{
						},
						"selection":
						[
							[
								2097,
								2097
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 328,
					"type": "text"
				},
				{
					"buffer": 200,
					"file": "src/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 289,
						"regions":
						{
						},
						"selection":
						[
							[
								289,
								289
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 264,
					"type": "text"
				},
				{
					"buffer": 201,
					"file": "src/Falcor/Utils/StringUtils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12635,
						"regions":
						{
						},
						"selection":
						[
							[
								12119,
								12119
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4699.0,
						"zoom_level": 1.0
					},
					"stack_index": 342,
					"type": "text"
				},
				{
					"buffer": 202,
					"file": "src/Samples/ModelViewer/ModelViewer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9979,
						"regions":
						{
						},
						"selection":
						[
							[
								3916,
								3916
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2397.0,
						"zoom_level": 1.0
					},
					"stack_index": 421,
					"type": "text"
				},
				{
					"buffer": 203,
					"file": "src/Samples/ModelViewer/ModelViewer.ps.slang.bak",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2408,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 410,
					"type": "text"
				},
				{
					"buffer": 204,
					"file": "src/Samples/ModelViewer/ModelViewer.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2391,
						"regions":
						{
						},
						"selection":
						[
							[
								2383,
								2383
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 408,
					"type": "text"
				},
				{
					"buffer": 205,
					"file": "src/Falcor/Scene/Lights/LightProbeIntegration.ps.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7921,
						"regions":
						{
						},
						"selection":
						[
							[
								1944,
								1944
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 116.0,
						"zoom_level": 1.0
					},
					"stack_index": 418,
					"type": "text"
				},
				{
					"buffer": 206,
					"file": "src/Tools/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1429,
						"regions":
						{
						},
						"selection":
						[
							[
								1133,
								1133
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 416,
					"type": "text"
				},
				{
					"buffer": 207,
					"file": "src/Samples/ShaderToy/ShaderToy.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4229,
						"regions":
						{
						},
						"selection":
						[
							[
								4138,
								4138
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 482.0,
						"zoom_level": 1.0
					},
					"stack_index": 417,
					"type": "text"
				},
				{
					"buffer": 208,
					"file": "src/Falcor/RenderGraph/BasePasses/FullScreenPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5668,
						"regions":
						{
						},
						"selection":
						[
							[
								3852,
								3852
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 113,
					"type": "text"
				},
				{
					"buffer": 209,
					"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6372,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 166,
					"type": "text"
				},
				{
					"buffer": 210,
					"file": "src/Falcor/RenderGraph/BasePasses/FullScreenPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4025,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 239.0,
						"zoom_level": 1.0
					},
					"stack_index": 167,
					"type": "text"
				},
				{
					"buffer": 211,
					"file": "src/Falcor/RenderGraph/BasePasses/ComputePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4013,
						"regions":
						{
						},
						"selection":
						[
							[
								3937,
								3937
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 22.0,
						"zoom_level": 1.0
					},
					"stack_index": 114,
					"type": "text"
				},
				{
					"buffer": 212,
					"file": "src/Falcor/RenderGraph/BasePasses/BaseGraphicsPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2819,
						"regions":
						{
						},
						"selection":
						[
							[
								2000,
								2000
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 115,
					"type": "text"
				},
				{
					"buffer": 213,
					"file": "src/Falcor/Utils/Timing/FrameRate.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3811,
						"regions":
						{
						},
						"selection":
						[
							[
								2009,
								2009
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 87.0,
						"zoom_level": 1.0
					},
					"stack_index": 101,
					"type": "text"
				},
				{
					"buffer": 214,
					"file": "src/Falcor/Utils/Timing/FrameRate.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2265,
						"regions":
						{
						},
						"selection":
						[
							[
								1815,
								1815
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 126,
					"type": "text"
				},
				{
					"buffer": 215,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6356,
						"regions":
						{
						},
						"selection":
						[
							[
								2964,
								2964
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 455,
					"type": "text"
				},
				{
					"buffer": 216,
					"file": "src/Falcor/Experimental/Scene/Lights/LightBVHSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7714,
						"regions":
						{
						},
						"selection":
						[
							[
								7713,
								7713
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1840.0,
						"zoom_level": 1.0
					},
					"stack_index": 95,
					"type": "text"
				},
				{
					"buffer": 217,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29489,
						"regions":
						{
						},
						"selection":
						[
							[
								2921,
								2921
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 422.0,
						"zoom_level": 1.0
					},
					"stack_index": 94,
					"type": "text"
				},
				{
					"buffer": 218,
					"file": "src/Falcor/RenderGraph/BasePasses/BaseGraphicsPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3738,
						"regions":
						{
						},
						"selection":
						[
							[
								3598,
								3598
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 411.0,
						"zoom_level": 1.0
					},
					"stack_index": 169,
					"type": "text"
				},
				{
					"buffer": 219,
					"file": "src/Falcor/Experimental/Scene/Lights/LightCollection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12783,
						"regions":
						{
						},
						"selection":
						[
							[
								2005,
								2005
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 177,
					"type": "text"
				},
				{
					"buffer": 220,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 67085,
						"regions":
						{
						},
						"selection":
						[
							[
								24779,
								24779
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9519.0,
						"zoom_level": 1.0
					},
					"stack_index": 209,
					"type": "text"
				},
				{
					"buffer": 221,
					"file": "src/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15202,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 105.0,
						"zoom_level": 1.0
					},
					"stack_index": 334,
					"type": "text"
				},
				{
					"buffer": 222,
					"file": "src/Tools/FalcorTest/Tests/Core/BufferTests.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2850,
						"regions":
						{
						},
						"selection":
						[
							[
								2587,
								2587
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 367.0,
						"zoom_level": 1.0
					},
					"stack_index": 382,
					"type": "text"
				},
				{
					"buffer": 223,
					"file": "src/Falcor/Core/Program/ShaderVar.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15515,
						"regions":
						{
						},
						"selection":
						[
							[
								12657,
								12657
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4745.0,
						"zoom_level": 1.0
					},
					"stack_index": 420,
					"type": "text"
				},
				{
					"buffer": 224,
					"file": "src/Falcor/Scene/Lights/LightProbe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11503,
						"regions":
						{
						},
						"selection":
						[
							[
								6471,
								6471
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3264.0,
						"zoom_level": 1.0
					},
					"stack_index": 150,
					"type": "text"
				},
				{
					"buffer": 225,
					"file": "src/Falcor/Scene/Lights/LightProbe.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7813,
						"regions":
						{
						},
						"selection":
						[
							[
								3374,
								3374
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 149,
					"type": "text"
				},
				{
					"buffer": 226,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3371,
						"regions":
						{
						},
						"selection":
						[
							[
								2905,
								2905
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 170,
					"type": "text"
				},
				{
					"buffer": 227,
					"file": "src/Falcor/RenderGraph/RenderGraphCompiler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18153,
						"regions":
						{
						},
						"selection":
						[
							[
								1729,
								1729
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 366.0,
						"zoom_level": 1.0
					},
					"stack_index": 157,
					"type": "text"
				},
				{
					"buffer": 228,
					"file": "src/Falcor/RenderGraph/RenderGraph.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28487,
						"regions":
						{
						},
						"selection":
						[
							[
								28100,
								28100
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10809.0,
						"zoom_level": 1.0
					},
					"stack_index": 160,
					"type": "text"
				},
				{
					"buffer": 229,
					"file": "src/Falcor/RenderGraph/RenderGraphExe.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4177,
						"regions":
						{
						},
						"selection":
						[
							[
								3590,
								3590
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 412.0,
						"zoom_level": 1.0
					},
					"stack_index": 92,
					"type": "text"
				},
				{
					"buffer": 230,
					"file": "src/Falcor/RenderGraph/RenderGraphExe.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4072,
						"regions":
						{
						},
						"selection":
						[
							[
								2042,
								2042
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 93,
					"type": "text"
				},
				{
					"buffer": 231,
					"file": "src/Falcor/Utils/Scripting/Dictionary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4523,
						"regions":
						{
						},
						"selection":
						[
							[
								1943,
								1943
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 435,
					"type": "text"
				},
				{
					"buffer": 232,
					"file": "src/Falcor/RenderGraph/RenderGraphUI.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 64727,
						"regions":
						{
						},
						"selection":
						[
							[
								39130,
								39130
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14966.0,
						"zoom_level": 1.0
					},
					"stack_index": 422,
					"type": "text"
				},
				{
					"buffer": 233,
					"file": "src/Falcor/Utils/Debug/PixelDebug.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9625,
						"regions":
						{
						},
						"selection":
						[
							[
								1814,
								1814
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1683.0,
						"zoom_level": 1.0
					},
					"stack_index": 131,
					"type": "text"
				},
				{
					"buffer": 234,
					"file": "src/Falcor/Utils/Algorithm/ParallelReduction.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6148,
						"regions":
						{
						},
						"selection":
						[
							[
								1729,
								1729
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 536.0,
						"zoom_level": 1.0
					},
					"stack_index": 87,
					"type": "text"
				},
				{
					"buffer": 235,
					"file": "src/Tools/FalcorTest/Tests/Utils/ParallelReductionTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11656,
						"regions":
						{
						},
						"selection":
						[
							[
								9905,
								9905
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3213.0,
						"zoom_level": 1.0
					},
					"stack_index": 358,
					"type": "text"
				},
				{
					"buffer": 236,
					"file": "src/Tools/FalcorTest/Tests/Utils/PrefixSumTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4850,
						"regions":
						{
						},
						"selection":
						[
							[
								4793,
								4793
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 353,
					"type": "text"
				},
				{
					"buffer": 237,
					"file": "src/Falcor/Utils/Algorithm/PrefixSum.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7112,
						"regions":
						{
						},
						"selection":
						[
							[
								3289,
								3289
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 379.0,
						"zoom_level": 1.0
					},
					"stack_index": 86,
					"type": "text"
				},
				{
					"buffer": 238,
					"file": "src/Falcor/Utils/Algorithm/BitonicSort.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4470,
						"regions":
						{
						},
						"selection":
						[
							[
								2970,
								2970
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 906.0,
						"zoom_level": 1.0
					},
					"stack_index": 89,
					"type": "text"
				},
				{
					"buffer": 239,
					"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4901,
						"regions":
						{
						},
						"selection":
						[
							[
								1906,
								1906
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 612.0,
						"zoom_level": 1.0
					},
					"stack_index": 137,
					"type": "text"
				},
				{
					"buffer": 240,
					"file": "src/Falcor/Utils/Algorithm/ParallelReduction.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3575,
						"regions":
						{
						},
						"selection":
						[
							[
								3574,
								3574
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 139,
					"type": "text"
				},
				{
					"buffer": 241,
					"file": "src/Falcor/Utils/Algorithm/BitonicSort.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4169,
						"regions":
						{
						},
						"selection":
						[
							[
								4169,
								4169
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 140,
					"type": "text"
				},
				{
					"buffer": 242,
					"file": "src/Falcor/Utils/Algorithm/PrefixSum.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4191,
						"regions":
						{
						},
						"selection":
						[
							[
								4191,
								4191
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 878.0,
						"zoom_level": 1.0
					},
					"stack_index": 138,
					"type": "text"
				},
				{
					"buffer": 243,
					"file": "src/Falcor/Utils/Algorithm/ComputeParallelReduction.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9541,
						"regions":
						{
						},
						"selection":
						[
							[
								4105,
								4105
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 504.0,
						"zoom_level": 1.0
					},
					"stack_index": 88,
					"type": "text"
				},
				{
					"buffer": 244,
					"file": "src/Falcor/Utils/Scripting/Console.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4108,
						"regions":
						{
						},
						"selection":
						[
							[
								1760,
								1760
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 447,
					"type": "text"
				},
				{
					"buffer": 245,
					"file": "src/Falcor/Utils/Scripting/ScriptBindings.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4848,
						"regions":
						{
						},
						"selection":
						[
							[
								1751,
								1751
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 446,
					"type": "text"
				},
				{
					"buffer": 246,
					"file": "src/Falcor/Utils/Sampling/SampleGenerator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3452,
						"regions":
						{
						},
						"selection":
						[
							[
								3451,
								3451
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 135,
					"type": "text"
				},
				{
					"buffer": 247,
					"file": "src/Falcor/Utils/Timing/Clock.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9831,
						"regions":
						{
						},
						"selection":
						[
							[
								8210,
								8210
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3482.0,
						"zoom_level": 1.0
					},
					"stack_index": 124,
					"type": "text"
				},
				{
					"buffer": 248,
					"file": "src/Falcor/Utils/Timing/Clock.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8564,
						"regions":
						{
						},
						"selection":
						[
							[
								2111,
								2111
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 125,
					"type": "text"
				},
				{
					"buffer": 249,
					"file": "src/Falcor/Core/API/TextureLoader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24304,
						"regions":
						{
						},
						"selection":
						[
							[
								23777,
								23777
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4517.0,
						"zoom_level": 1.0
					},
					"stack_index": 127,
					"type": "text"
				},
				{
					"buffer": 250,
					"file": "third_party/assimp/include/assimp/Bitmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4295,
						"regions":
						{
						},
						"selection":
						[
							[
								2138,
								2138
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1162.0,
						"zoom_level": 1.0
					},
					"stack_index": 426,
					"type": "text"
				},
				{
					"buffer": 251,
					"file": "src/Falcor/Core/API/VAO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5144,
						"regions":
						{
						},
						"selection":
						[
							[
								2540,
								2540
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1395.0,
						"zoom_level": 1.0
					},
					"stack_index": 176,
					"type": "text"
				},
				{
					"buffer": 252,
					"file": "src/Falcor/Utils/Logger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5549,
						"regions":
						{
						},
						"selection":
						[
							[
								5549,
								5549
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 330,
					"type": "text"
				},
				{
					"buffer": 253,
					"file": "src/Falcor/Utils/Logger.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5968,
						"regions":
						{
						},
						"selection":
						[
							[
								5674,
								5674
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2115.0,
						"zoom_level": 1.0
					},
					"stack_index": 329,
					"type": "text"
				},
				{
					"buffer": 254,
					"file": "src/Falcor/Utils/BinaryFileStream.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5898,
						"regions":
						{
						},
						"selection":
						[
							[
								1843,
								1843
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 170.0,
						"zoom_level": 1.0
					},
					"stack_index": 341,
					"type": "text"
				},
				{
					"buffer": 255,
					"file": "src/Falcor/Utils/Scripting/Scripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5721,
						"regions":
						{
						},
						"selection":
						[
							[
								1749,
								1749
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 74.0,
						"zoom_level": 1.0
					},
					"stack_index": 432,
					"type": "text"
				},
				{
					"buffer": 256,
					"file": "src/Falcor/Utils/Timing/Profiler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10754,
						"regions":
						{
						},
						"selection":
						[
							[
								2524,
								2524
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 359.0,
						"zoom_level": 1.0
					},
					"stack_index": 76,
					"type": "text"
				},
				{
					"buffer": 257,
					"file": "src/Falcor/Utils/UI/Gui.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56167,
						"regions":
						{
						},
						"selection":
						[
							[
								54796,
								54796
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 19654.0,
						"zoom_level": 1.0
					},
					"stack_index": 81,
					"type": "text"
				},
				{
					"buffer": 258,
					"file": "src/Falcor/Utils/UI/PixelZoom.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5190,
						"regions":
						{
						},
						"selection":
						[
							[
								2488,
								2488
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 867.0,
						"zoom_level": 1.0
					},
					"stack_index": 72,
					"type": "text"
				},
				{
					"buffer": 259,
					"file": "src/Falcor/Utils/UI/TextRenderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7231,
						"regions":
						{
						},
						"selection":
						[
							[
								5273,
								5273
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1212.0,
						"zoom_level": 1.0
					},
					"stack_index": 74,
					"type": "text"
				},
				{
					"buffer": 260,
					"file": "src/Falcor/Utils/UI/TextRenderer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3353,
						"regions":
						{
						},
						"selection":
						[
							[
								2192,
								2192
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 75,
					"type": "text"
				},
				{
					"buffer": 261,
					"file": "src/Falcor/Utils/UI/PixelZoom.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3368,
						"regions":
						{
						},
						"selection":
						[
							[
								3286,
								3286
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 158.0,
						"zoom_level": 1.0
					},
					"stack_index": 73,
					"type": "text"
				},
				{
					"buffer": 262,
					"file": "src/Falcor/Utils/UI/DebugDrawer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4027,
						"regions":
						{
						},
						"selection":
						[
							[
								3944,
								3944
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 636.0,
						"zoom_level": 1.0
					},
					"stack_index": 85,
					"type": "text"
				},
				{
					"buffer": 263,
					"file": "src/Falcor/Utils/UI/DebugDrawer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8927,
						"regions":
						{
						},
						"selection":
						[
							[
								2050,
								2050
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 84,
					"type": "text"
				},
				{
					"buffer": 264,
					"file": "src/Falcor/Utils/UI/Font.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4060,
						"regions":
						{
						},
						"selection":
						[
							[
								2244,
								2244
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"stack_index": 83,
					"type": "text"
				},
				{
					"buffer": 265,
					"file": "third_party/slang/tools/render-test/bind-location.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19257,
						"regions":
						{
						},
						"selection":
						[
							[
								10547,
								10547
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3980.0,
						"zoom_level": 1.0
					},
					"stack_index": 419,
					"type": "text"
				},
				{
					"buffer": 266,
					"file": "src/Falcor/Utils/UI/Font.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5156,
						"regions":
						{
						},
						"selection":
						[
							[
								2559,
								2559
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 82,
					"type": "text"
				},
				{
					"buffer": 267,
					"file": "src/Falcor/Core/Program/ProgramReflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 85503,
						"regions":
						{
						},
						"selection":
						[
							[
								85503,
								85503
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 36385.0,
						"zoom_level": 1.0
					},
					"stack_index": 352,
					"type": "text"
				},
				{
					"buffer": 268,
					"file": "src/Falcor/Core/API/Vulkan/VKGraphicsStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5776,
						"regions":
						{
						},
						"selection":
						[
							[
								5776,
								5776
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 921.0,
						"zoom_level": 1.0
					},
					"stack_index": 192,
					"type": "text"
				},
				{
					"buffer": 269,
					"file": "third_party/slang/source/slang/slang-reflection.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 50216,
						"regions":
						{
						},
						"selection":
						[
							[
								2619,
								2619
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1382.0,
						"zoom_level": 1.0
					},
					"stack_index": 414,
					"type": "text"
				},
				{
					"buffer": 270,
					"file": "third_party/slang/source/slang/slang-compiler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 90183,
						"regions":
						{
						},
						"selection":
						[
							[
								83549,
								83549
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 34736.0,
						"zoom_level": 1.0
					},
					"stack_index": 413,
					"type": "text"
				},
				{
					"buffer": 271,
					"file": "third_party/slang/source/slang/slang-name.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 800,
						"regions":
						{
						},
						"selection":
						[
							[
								630,
								630
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 56.0,
						"zoom_level": 1.0
					},
					"stack_index": 412,
					"type": "text"
				},
				{
					"buffer": 272,
					"file": "third_party/slang/source/core/slang-dictionary.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13988,
						"regions":
						{
						},
						"selection":
						[
							[
								8683,
								8683
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 411,
					"type": "text"
				},
				{
					"buffer": 273,
					"file": "src/Falcor/Core/Program/ProgramVars.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14700,
						"regions":
						{
						},
						"selection":
						[
							[
								5179,
								5179
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1056.0,
						"zoom_level": 1.0
					},
					"stack_index": 258,
					"type": "text"
				},
				{
					"buffer": 274,
					"file": "src/Falcor/Raytracing/RtProgramVarsHelper.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14339,
						"regions":
						{
						},
						"selection":
						[
							[
								2753,
								2753
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 299.0,
						"zoom_level": 1.0
					},
					"stack_index": 349,
					"type": "text"
				},
				{
					"buffer": 275,
					"file": "src/Falcor/Core/Program/ProgramVars.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6787,
						"regions":
						{
						},
						"selection":
						[
							[
								6787,
								6787
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 117.0,
						"zoom_level": 1.0
					},
					"stack_index": 201,
					"type": "text"
				},
				{
					"buffer": 276,
					"file": "src/Falcor/Core/Program/ShaderVar.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17036,
						"regions":
						{
						},
						"selection":
						[
							[
								17036,
								17036
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6056.0,
						"zoom_level": 1.0
					},
					"stack_index": 200,
					"type": "text"
				},
				{
					"buffer": 277,
					"file": "src/Falcor/Core/Program/ProgramReflection.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 54819,
						"regions":
						{
						},
						"selection":
						[
							[
								35151,
								35151
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11673.0,
						"zoom_level": 1.0
					},
					"stack_index": 384,
					"type": "text"
				},
				{
					"buffer": 278,
					"file": "src/Falcor/Core/Program/Program.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34062,
						"regions":
						{
						},
						"selection":
						[
							[
								27215,
								27215
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11768.0,
						"zoom_level": 1.0
					},
					"stack_index": 203,
					"type": "text"
				},
				{
					"buffer": 279,
					"file": "src/Falcor/Core/API/Buffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13350,
						"regions":
						{
						},
						"selection":
						[
							[
								7763,
								7763
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2414.0,
						"zoom_level": 1.0
					},
					"stack_index": 259,
					"type": "text"
				},
				{
					"buffer": 280,
					"file": "src/Falcor/Core/API/FBO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18015,
						"regions":
						{
						},
						"selection":
						[
							[
								1936,
								1936
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 51.0,
						"zoom_level": 1.0
					},
					"stack_index": 246,
					"type": "text"
				},
				{
					"buffer": 281,
					"file": "src/Falcor/Core/API/BlendState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9346,
						"regions":
						{
						},
						"selection":
						[
							[
								9106,
								9106
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2535.0,
						"zoom_level": 1.0
					},
					"stack_index": 189,
					"type": "text"
				},
				{
					"buffer": 282,
					"file": "src/Falcor/Core/API/BlendState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3664,
						"regions":
						{
						},
						"selection":
						[
							[
								1729,
								1729
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 248,
					"type": "text"
				},
				{
					"buffer": 283,
					"file": "src/Falcor/Core/API/FBO.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13352,
						"regions":
						{
						},
						"selection":
						[
							[
								6641,
								6641
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1668.0,
						"zoom_level": 1.0
					},
					"stack_index": 42,
					"type": "text"
				},
				{
					"buffer": 284,
					"file": "src/Falcor/Core/API/Texture.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15073,
						"regions":
						{
						},
						"selection":
						[
							[
								1945,
								1945
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 475.0,
						"zoom_level": 1.0
					},
					"stack_index": 194,
					"type": "text"
				},
				{
					"buffer": 285,
					"file": "src/Tools/FalcorTest/Tests/ShadingUtils/RaytracingTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4882,
						"regions":
						{
						},
						"selection":
						[
							[
								4881,
								4881
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1315.0,
						"zoom_level": 1.0
					},
					"stack_index": 398,
					"type": "text"
				},
				{
					"buffer": 286,
					"file": "src/Tools/FalcorTest/Tests/Slang/SlangTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8055,
						"regions":
						{
						},
						"selection":
						[
							[
								6777,
								6777
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2518.0,
						"zoom_level": 1.0
					},
					"stack_index": 388,
					"type": "text"
				},
				{
					"buffer": 287,
					"file": "src/Tools/FalcorTest/Tests/Slang/SlangTests.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6527,
						"regions":
						{
						},
						"selection":
						[
							[
								4191,
								4191
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1297.0,
						"zoom_level": 1.0
					},
					"stack_index": 390,
					"type": "text"
				},
				{
					"buffer": 288,
					"file": "src/Tools/FalcorTest/Tests/Slang/SlangShared.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2435,
						"regions":
						{
						},
						"selection":
						[
							[
								1765,
								1765
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 391,
					"type": "text"
				},
				{
					"buffer": 289,
					"file": "src/Tools/FalcorTest/Tests/Slang/ShaderModel.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3182,
						"regions":
						{
						},
						"selection":
						[
							[
								2515,
								2515
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 75.0,
						"zoom_level": 1.0
					},
					"stack_index": 386,
					"type": "text"
				},
				{
					"buffer": 290,
					"file": "src/Tools/FalcorTest/Tests/Slang/Int64Tests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3694,
						"regions":
						{
						},
						"selection":
						[
							[
								1882,
								1882
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1060.0,
						"zoom_level": 1.0
					},
					"stack_index": 400,
					"type": "text"
				},
				{
					"buffer": 291,
					"file": "src/Tools/FalcorTest/Tests/Slang/TraceRayFlags.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3163,
						"regions":
						{
						},
						"selection":
						[
							[
								1762,
								1743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 227.0,
						"zoom_level": 1.0
					},
					"stack_index": 397,
					"type": "text"
				},
				{
					"buffer": 292,
					"file": "src/Tools/FalcorTest/Tests/Slang/TraceRayInline.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2113,
						"regions":
						{
						},
						"selection":
						[
							[
								2113,
								2113
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 402,
					"type": "text"
				},
				{
					"buffer": 293,
					"file": "src/Tools/FalcorTest/Tests/Slang/WaveOps.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6067,
						"regions":
						{
						},
						"selection":
						[
							[
								3182,
								3182
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1122.0,
						"zoom_level": 1.0
					},
					"stack_index": 387,
					"type": "text"
				},
				{
					"buffer": 294,
					"file": "src/Tools/FalcorTest/Tests/Utils/AABBTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7752,
						"regions":
						{
						},
						"selection":
						[
							[
								2261,
								2261
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 262.0,
						"zoom_level": 1.0
					},
					"stack_index": 370,
					"type": "text"
				},
				{
					"buffer": 295,
					"file": "third_party/slang/prelude/slang-cpp-types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28997,
						"regions":
						{
						},
						"selection":
						[
							[
								1493,
								1493
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 614.0,
						"zoom_level": 1.0
					},
					"stack_index": 110,
					"type": "text"
				},
				{
					"buffer": 296,
					"file": "src/Tools/FalcorTest/FalcorTest.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2143,
						"regions":
						{
						},
						"selection":
						[
							[
								1866,
								1866
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 415,
					"type": "text"
				},
				{
					"buffer": 297,
					"file": "src/Tools/FalcorTest/FalcorTest.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3605,
						"regions":
						{
						},
						"selection":
						[
							[
								3312,
								3312
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 346.0,
						"zoom_level": 1.0
					},
					"stack_index": 401,
					"type": "text"
				},
				{
					"buffer": 298,
					"file": "src/Tools/FalcorTest/Tests/Sampling/SampleGeneratorTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7287,
						"regions":
						{
						},
						"selection":
						[
							[
								4059,
								4059
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 551.0,
						"zoom_level": 1.0
					},
					"stack_index": 374,
					"type": "text"
				},
				{
					"buffer": 299,
					"file": "src/Tools/FalcorTest/Tests/Core/RootBufferTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8005,
						"regions":
						{
						},
						"selection":
						[
							[
								7231,
								7231
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2098.0,
						"zoom_level": 1.0
					},
					"stack_index": 375,
					"type": "text"
				},
				{
					"buffer": 300,
					"file": "src/Tools/FalcorTest/Tests/Core/RootBufferStructTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5631,
						"regions":
						{
						},
						"selection":
						[
							[
								4710,
								4710
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 376,
					"type": "text"
				},
				{
					"buffer": 301,
					"file": "src/Falcor/Core/API/Vulkan/VkGpuMemoryHeap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2413,
						"regions":
						{
						},
						"selection":
						[
							[
								2413,
								2413
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 225,
					"type": "text"
				},
				{
					"buffer": 302,
					"file": "src/Falcor/Core/Platform/Linux/Linux.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15074,
						"regions":
						{
						},
						"selection":
						[
							[
								14787,
								14787
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7551.0,
						"zoom_level": 1.0
					},
					"stack_index": 351,
					"type": "text"
				},
				{
					"buffer": 303,
					"file": "src/Falcor/Core/Platform/Windows/ProgressBarWin.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4513,
						"regions":
						{
						},
						"selection":
						[
							[
								2360,
								2360
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 454,
					"type": "text"
				},
				{
					"buffer": 304,
					"file": "src/Falcor/Core/Platform/OS.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15995,
						"regions":
						{
						},
						"selection":
						[
							[
								1983,
								1983
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2550.0,
						"zoom_level": 1.0
					},
					"stack_index": 423,
					"type": "text"
				},
				{
					"buffer": 305,
					"file": "src/Falcor/Core/API/Vulkan/VKState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3960,
						"regions":
						{
						},
						"selection":
						[
							[
								1712,
								1712
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 377.0,
						"zoom_level": 1.0
					},
					"stack_index": 190,
					"type": "text"
				},
				{
					"buffer": 306,
					"file": "src/Falcor/Core/API/Texture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16074,
						"regions":
						{
						},
						"selection":
						[
							[
								12969,
								12969
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3642.0,
						"zoom_level": 1.0
					},
					"stack_index": 155,
					"type": "text"
				},
				{
					"buffer": 307,
					"file": "src/USD/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47,
						"regions":
						{
						},
						"selection":
						[
							[
								47,
								47
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 270,
					"type": "text"
				},
				{
					"buffer": 308,
					"file": "src/USD/hgiVk/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2011,
						"regions":
						{
						},
						"selection":
						[
							[
								76,
								76
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 268,
					"type": "text"
				},
				{
					"buffer": 309,
					"file": "src/USD/hgiVk/commandBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8461,
						"regions":
						{
						},
						"selection":
						[
							[
								1472,
								1472
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 271,
					"type": "text"
				},
				{
					"buffer": 310,
					"file": "src/USD/hgiVk/commandBufferManager.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13416,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								184
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 309,
					"type": "text"
				},
				{
					"buffer": 311,
					"file": "src/USD/hgiVk/commandPool.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1629,
						"regions":
						{
						},
						"selection":
						[
							[
								114,
								114
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 308,
					"type": "text"
				},
				{
					"buffer": 312,
					"file": "src/USD/hgiVk/computeEncoder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1791,
						"regions":
						{
						},
						"selection":
						[
							[
								222,
								222
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 307,
					"type": "text"
				},
				{
					"buffer": 313,
					"file": "src/USD/hgiVk/conversions.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9785,
						"regions":
						{
						},
						"selection":
						[
							[
								150,
								150
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 306,
					"type": "text"
				},
				{
					"buffer": 314,
					"file": "src/USD/hgiVk/device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17769,
						"regions":
						{
						},
						"selection":
						[
							[
								209,
								209
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 305,
					"type": "text"
				},
				{
					"buffer": 315,
					"file": "src/USD/hgiVk/diagnostic.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6577,
						"regions":
						{
						},
						"selection":
						[
							[
								239,
								239
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 304,
					"type": "text"
				},
				{
					"buffer": 316,
					"file": "src/USD/hgiVk/frame.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2455,
						"regions":
						{
						},
						"selection":
						[
							[
								113,
								113
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 281,
					"type": "text"
				},
				{
					"buffer": 317,
					"file": "src/USD/hgiVk/garbageCollector.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3957,
						"regions":
						{
						},
						"selection":
						[
							[
								423,
								423
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 303,
					"type": "text"
				},
				{
					"buffer": 318,
					"file": "src/USD/hgiVk/graphicsEncoder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6479,
						"regions":
						{
						},
						"selection":
						[
							[
								405,
								405
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 302,
					"type": "text"
				},
				{
					"buffer": 319,
					"file": "src/USD/hgiVk/hgi.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14444,
						"regions":
						{
						},
						"selection":
						[
							[
								961,
								961
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 301,
					"type": "text"
				},
				{
					"buffer": 320,
					"file": "src/USD/hgiVk/instance.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1940,
						"regions":
						{
						},
						"selection":
						[
							[
								103,
								103
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 300,
					"type": "text"
				},
				{
					"buffer": 321,
					"file": "src/USD/hgiVk/parallelGraphicsEncoder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3913,
						"regions":
						{
						},
						"selection":
						[
							[
								387,
								387
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 299,
					"type": "text"
				},
				{
					"buffer": 322,
					"file": "src/USD/hgiVk/pipeline.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15055,
						"regions":
						{
						},
						"selection":
						[
							[
								348,
								348
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 298,
					"type": "text"
				},
				{
					"buffer": 323,
					"file": "src/USD/hgiVk/renderPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15805,
						"regions":
						{
						},
						"selection":
						[
							[
								264,
								264
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 274,
					"type": "text"
				},
				{
					"buffer": 324,
					"file": "src/USD/hgiVk/pipeline.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1831,
						"regions":
						{
						},
						"selection":
						[
							[
								1176,
								1176
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 273,
					"type": "text"
				},
				{
					"buffer": 325,
					"file": "src/USD/hgiVk/renderPassPipelineCache.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8095,
						"regions":
						{
						},
						"selection":
						[
							[
								322,
								322
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 297,
					"type": "text"
				},
				{
					"buffer": 326,
					"file": "src/USD/hgiVk/resourceBindings.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16563,
						"regions":
						{
						},
						"selection":
						[
							[
								276,
								276
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 296,
					"type": "text"
				},
				{
					"buffer": 327,
					"file": "src/USD/hgiVk/shaderCompiler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10186,
						"regions":
						{
						},
						"selection":
						[
							[
								285,
								285
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 295,
					"type": "text"
				},
				{
					"buffer": 328,
					"file": "src/USD/hgiVk/shaderFunction.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2509,
						"regions":
						{
						},
						"selection":
						[
							[
								149,
								149
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 294,
					"type": "text"
				},
				{
					"buffer": 329,
					"file": "src/USD/hgiVk/shaderProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 437,
						"regions":
						{
						},
						"selection":
						[
							[
								50,
								50
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 293,
					"type": "text"
				},
				{
					"buffer": 330,
					"file": "src/USD/hgiVk/surface.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3812,
						"regions":
						{
						},
						"selection":
						[
							[
								112,
								112
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1530.0,
						"zoom_level": 1.0
					},
					"stack_index": 267,
					"type": "text"
				},
				{
					"buffer": 331,
					"file": "src/USD/hgiVk/swapchain.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17443,
						"regions":
						{
						},
						"selection":
						[
							[
								253,
								253
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 292,
					"type": "text"
				},
				{
					"buffer": 332,
					"file": "src/USD/hgiVk/texture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15437,
						"regions":
						{
						},
						"selection":
						[
							[
								1497,
								1497
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 291,
					"type": "text"
				},
				{
					"buffer": 333,
					"file": "src/USD/hgiVk/buffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9825,
						"regions":
						{
						},
						"selection":
						[
							[
								182,
								182
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 290,
					"type": "text"
				},
				{
					"buffer": 334,
					"file": "src/USD/hgiVk/blitEncoder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6180,
						"regions":
						{
						},
						"selection":
						[
							[
								1024,
								1024
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 289,
					"type": "text"
				},
				{
					"buffer": 335,
					"file": "src/USD/hgiVk/blitEncoder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1319,
						"regions":
						{
						},
						"selection":
						[
							[
								378,
								378
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 266,
					"type": "text"
				},
				{
					"buffer": 336,
					"file": "src/USD/hgiVk/buffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1965,
						"regions":
						{
						},
						"selection":
						[
							[
								148,
								148
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 288,
					"type": "text"
				},
				{
					"buffer": 337,
					"file": "src/USD/hgiVk/commandBuffer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3844,
						"regions":
						{
						},
						"selection":
						[
							[
								216,
								216
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 272,
					"type": "text"
				},
				{
					"buffer": 338,
					"file": "src/USD/hgiVk/commandBufferManager.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5853,
						"regions":
						{
						},
						"selection":
						[
							[
								292,
								292
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 287,
					"type": "text"
				},
				{
					"buffer": 339,
					"file": "src/USD/hgiVk/commandPool.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1102,
						"regions":
						{
						},
						"selection":
						[
							[
								213,
								213
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 286,
					"type": "text"
				},
				{
					"buffer": 340,
					"file": "src/USD/hgiVk/computeEncoder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1631,
						"regions":
						{
						},
						"selection":
						[
							[
								252,
								252
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 285,
					"type": "text"
				},
				{
					"buffer": 341,
					"file": "src/USD/hgiVk/conversions.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1688,
						"regions":
						{
						},
						"selection":
						[
							[
								249,
								249
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 284,
					"type": "text"
				},
				{
					"buffer": 342,
					"file": "src/USD/hgiVk/device.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6599,
						"regions":
						{
						},
						"selection":
						[
							[
								357,
								357
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 283,
					"type": "text"
				},
				{
					"buffer": 343,
					"file": "src/USD/hgiVk/diagnostic.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1085,
						"regions":
						{
						},
						"selection":
						[
							[
								135,
								135
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 282,
					"type": "text"
				},
				{
					"buffer": 344,
					"file": "src/USD/hgiVk/frame.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2289,
						"regions":
						{
						},
						"selection":
						[
							[
								270,
								270
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 280,
					"type": "text"
				},
				{
					"buffer": 345,
					"file": "src/USD/hgiVk/garbageCollector.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1637,
						"regions":
						{
						},
						"selection":
						[
							[
								192,
								192
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 279,
					"type": "text"
				},
				{
					"buffer": 346,
					"file": "src/USD/hgiVk/graphicsEncoder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2732,
						"regions":
						{
						},
						"selection":
						[
							[
								307,
								307
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 278,
					"type": "text"
				},
				{
					"buffer": 347,
					"file": "src/USD/hgiVk/hgi.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4470,
						"regions":
						{
						},
						"selection":
						[
							[
								195,
								195
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 277,
					"type": "text"
				},
				{
					"buffer": 348,
					"file": "src/USD/hgiVk/instance.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 693,
						"regions":
						{
						},
						"selection":
						[
							[
								137,
								137
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 276,
					"type": "text"
				},
				{
					"buffer": 349,
					"file": "src/USD/hgiVk/parallelGraphicsEncoder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1608,
						"regions":
						{
						},
						"selection":
						[
							[
								280,
								280
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 275,
					"type": "text"
				},
				{
					"buffer": 350,
					"file": "src/Mogwai/MogwaiSettings.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2575,
						"regions":
						{
						},
						"selection":
						[
							[
								1742,
								1742
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 351,
					"file": "src/Mogwai/MogwaiSettings.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10761,
						"regions":
						{
						},
						"selection":
						[
							[
								7041,
								7041
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2368.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 352,
					"file": "src/Mogwai/MogwaiScripting.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6767,
						"regions":
						{
						},
						"selection":
						[
							[
								5949,
								5949
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1496.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 353,
					"file": "src/Falcor/Core/API/Shader.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8437,
						"regions":
						{
						},
						"selection":
						[
							[
								7321,
								7321
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2910.0,
						"zoom_level": 1.0
					},
					"stack_index": 228,
					"type": "text"
				},
				{
					"buffer": 354,
					"file": "src/Falcor/Core/API/Sampler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7871,
						"regions":
						{
						},
						"selection":
						[
							[
								5224,
								5224
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1680.0,
						"zoom_level": 1.0
					},
					"stack_index": 151,
					"type": "text"
				},
				{
					"buffer": 355,
					"file": "src/Falcor/Core/API/Sampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3887,
						"regions":
						{
						},
						"selection":
						[
							[
								3190,
								3190
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 139.0,
						"zoom_level": 1.0
					},
					"stack_index": 229,
					"type": "text"
				},
				{
					"buffer": 356,
					"file": "src/Falcor/Core/API/Vulkan/VKShader.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2775,
						"regions":
						{
						},
						"selection":
						[
							[
								2709,
								2709
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 214,
					"type": "text"
				},
				{
					"buffer": 357,
					"file": "src/Falcor/stdafx.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1831,
						"regions":
						{
						},
						"selection":
						[
							[
								1788,
								1788
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 430,
					"type": "text"
				},
				{
					"buffer": 358,
					"file": "src/Falcor/Core/API/CopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6896,
						"regions":
						{
						},
						"selection":
						[
							[
								3581,
								3581
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 391.0,
						"zoom_level": 1.0
					},
					"stack_index": 238,
					"type": "text"
				},
				{
					"buffer": 359,
					"file": "src/Falcor/Core/API/VAO.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3603,
						"regions":
						{
						},
						"selection":
						[
							[
								3603,
								3603
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 530.0,
						"zoom_level": 1.0
					},
					"stack_index": 175,
					"type": "text"
				},
				{
					"buffer": 360,
					"file": "src/Falcor/Core/API/Vulkan/VKBuffer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6571,
						"regions":
						{
						},
						"selection":
						[
							[
								5318,
								5318
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 206.0,
						"zoom_level": 1.0
					},
					"stack_index": 222,
					"type": "text"
				},
				{
					"buffer": 361,
					"file": "src/Falcor/Core/API/ComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2998,
						"regions":
						{
						},
						"selection":
						[
							[
								1989,
								1989
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 309.0,
						"zoom_level": 1.0
					},
					"stack_index": 260,
					"type": "text"
				},
				{
					"buffer": 362,
					"file": "src/Falcor/Core/API/D3D12/D3D12ComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6740,
						"regions":
						{
						},
						"selection":
						[
							[
								3585,
								3585
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 852.0,
						"zoom_level": 1.0
					},
					"stack_index": 369,
					"type": "text"
				},
				{
					"buffer": 363,
					"file": "src/Falcor/Core/API/D3D12/D3D12LowLevelContextData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4664,
						"regions":
						{
						},
						"selection":
						[
							[
								2929,
								2929
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 775.0,
						"zoom_level": 1.0
					},
					"stack_index": 453,
					"type": "text"
				},
				{
					"buffer": 364,
					"file": "src/Falcor/Core/API/Vulkan/VKLowLevelContextData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5608,
						"regions":
						{
						},
						"selection":
						[
							[
								4399,
								4399
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 218,
					"type": "text"
				},
				{
					"buffer": 365,
					"file": "src/Falcor/Core/API/FencedPool.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4321,
						"regions":
						{
						},
						"selection":
						[
							[
								3683,
								3683
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 995.0,
						"zoom_level": 1.0
					},
					"stack_index": 239,
					"type": "text"
				},
				{
					"buffer": 366,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8062,
						"regions":
						{
						},
						"selection":
						[
							[
								2892,
								2892
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 105.0,
						"zoom_level": 1.0
					},
					"stack_index": 261,
					"type": "text"
				},
				{
					"buffer": 367,
					"file": "src/Tools/FalcorTest/Tests/Utils/MathHelpersTests.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12262,
						"regions":
						{
						},
						"selection":
						[
							[
								9216,
								9216
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2856.0,
						"zoom_level": 1.0
					},
					"stack_index": 368,
					"type": "text"
				},
				{
					"buffer": 368,
					"file": "src/Falcor/Core/API/Vulkan/VKRenderContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16737,
						"regions":
						{
						},
						"selection":
						[
							[
								2378,
								2378
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 350.0,
						"zoom_level": 1.0
					},
					"stack_index": 235,
					"type": "text"
				},
				{
					"buffer": 369,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2998,
						"regions":
						{
						},
						"selection":
						[
							[
								1900,
								1900
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 172,
					"type": "text"
				},
				{
					"buffer": 370,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterPass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4407,
						"regions":
						{
						},
						"selection":
						[
							[
								4406,
								4406
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 168,
					"type": "text"
				},
				{
					"buffer": 371,
					"file": "src/Falcor/Core/API/Vulkan/VKResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12833,
						"regions":
						{
						},
						"selection":
						[
							[
								12720,
								12720
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4080.0,
						"zoom_level": 1.0
					},
					"stack_index": 217,
					"type": "text"
				},
				{
					"buffer": 372,
					"file": "src/RenderPasses/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3482,
						"regions":
						{
						},
						"selection":
						[
							[
								3314,
								3314
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 932.0,
						"zoom_level": 1.0
					},
					"stack_index": 319,
					"type": "text"
				},
				{
					"buffer": 373,
					"file": "/home/max/Desktop/gbuffer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 574,
						"regions":
						{
						},
						"selection":
						[
							[
								141,
								141
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 320,
					"type": "text"
				},
				{
					"buffer": 374,
					"file": "src/RenderPasses/GBuffer/GBuffer/GBufferParams.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2388,
						"regions":
						{
						},
						"selection":
						[
							[
								2363,
								2363
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 313,
					"type": "text"
				},
				{
					"buffer": 375,
					"file": "src/Falcor/Utils/Threading.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2799,
						"regions":
						{
						},
						"selection":
						[
							[
								1945,
								1945
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 388.0,
						"zoom_level": 1.0
					},
					"stack_index": 153,
					"type": "text"
				},
				{
					"buffer": 376,
					"file": "src/Falcor/Utils/TermColor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3484,
						"regions":
						{
						},
						"selection":
						[
							[
								2669,
								2669
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 343,
					"type": "text"
				},
				{
					"buffer": 377,
					"file": "src/Falcor/Utils/TermColor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2499,
						"regions":
						{
						},
						"selection":
						[
							[
								1843,
								1843
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 344,
					"type": "text"
				},
				{
					"buffer": 378,
					"file": "src/Falcor/Utils/Threading.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3003,
						"regions":
						{
						},
						"selection":
						[
							[
								2415,
								2415
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 507.0,
						"zoom_level": 1.0
					},
					"stack_index": 154,
					"type": "text"
				},
				{
					"buffer": 379,
					"file": "build/bin/Shaders/RenderPasses/BSDFViewer/BSDFViewer.cs.slang",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15202,
						"regions":
						{
						},
						"selection":
						[
							[
								13788,
								13788
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5865.0,
						"zoom_level": 1.0
					},
					"stack_index": 356,
					"type": "text"
				},
				{
					"buffer": 380,
					"file": "src/RenderPasses/Utils/Utils.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2234,
						"regions":
						{
						},
						"selection":
						[
							[
								2234,
								2234
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 318,
					"type": "text"
				},
				{
					"buffer": 381,
					"file": "third_party/slang/tools/render-test/cuda/cuda-compute-util.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53192,
						"regions":
						{
						},
						"selection":
						[
							[
								1255,
								1255
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 448,
					"type": "text"
				},
				{
					"buffer": 382,
					"file": "src/Falcor/Core/API/Vulkan/VkSmartHandle.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6680,
						"regions":
						{
						},
						"selection":
						[
							[
								4880,
								4880
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 510.0,
						"zoom_level": 1.0
					},
					"stack_index": 210,
					"type": "text"
				},
				{
					"buffer": 383,
					"file": "src/Falcor/Core/API/Vulkan/VKRootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8748,
						"regions":
						{
						},
						"selection":
						[
							[
								7911,
								7911
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2247.0,
						"zoom_level": 1.0
					},
					"stack_index": 216,
					"type": "text"
				},
				{
					"buffer": 384,
					"file": "src/Falcor/Core/Program/ProgramVersion.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10447,
						"regions":
						{
						},
						"selection":
						[
							[
								6330,
								6330
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2178.0,
						"zoom_level": 1.0
					},
					"stack_index": 205,
					"type": "text"
				},
				{
					"buffer": 385,
					"file": "third_party/slang/examples/model-viewer/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86920,
						"regions":
						{
						},
						"selection":
						[
							[
								7215,
								7215
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3835.0,
						"zoom_level": 1.0
					},
					"stack_index": 460,
					"type": "text"
				},
				{
					"buffer": 386,
					"file": "src/Falcor/Core/API/ResourceViews.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8714,
						"regions":
						{
						},
						"selection":
						[
							[
								3743,
								3743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 706.0,
						"zoom_level": 1.0
					},
					"stack_index": 234,
					"type": "text"
				},
				{
					"buffer": 387,
					"file": "src/Falcor/Core/API/RootSignature.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6716,
						"regions":
						{
						},
						"selection":
						[
							[
								4554,
								4554
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1386.0,
						"zoom_level": 1.0
					},
					"stack_index": 231,
					"type": "text"
				},
				{
					"buffer": 388,
					"file": "src/Falcor/Core/API/RootSignature.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8993,
						"regions":
						{
						},
						"selection":
						[
							[
								4764,
								4764
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 904.0,
						"zoom_level": 1.0
					},
					"stack_index": 230,
					"type": "text"
				},
				{
					"buffer": 389,
					"file": "src/Falcor/Core/API/Vulkan/VKSampler.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2442,
						"regions":
						{
						},
						"selection":
						[
							[
								2415,
								2415
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 215,
					"type": "text"
				},
				{
					"buffer": 390,
					"file": "third_party/slang/tools/gfx/render.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28476,
						"regions":
						{
						},
						"selection":
						[
							[
								14530,
								14530
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9715.0,
						"zoom_level": 1.0
					},
					"stack_index": 452,
					"type": "text"
				},
				{
					"buffer": 391,
					"file": "src/Falcor/Core/API/Vulkan/FalcorVK.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5196,
						"regions":
						{
						},
						"selection":
						[
							[
								4725,
								4725
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1624.0,
						"zoom_level": 1.0
					},
					"stack_index": 249,
					"type": "text"
				},
				{
					"buffer": 392,
					"file": "src/Falcor/Core/API/Engine.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3761,
						"regions":
						{
						},
						"selection":
						[
							[
								2197,
								2197
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 901.0,
						"zoom_level": 1.0
					},
					"stack_index": 263,
					"type": "text"
				},
				{
					"buffer": 393,
					"file": "src/Falcor/Core/API/Device.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11137,
						"regions":
						{
						},
						"selection":
						[
							[
								10916,
								10916
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3573.0,
						"zoom_level": 1.0
					},
					"stack_index": 79,
					"type": "text"
				},
				{
					"buffer": 394,
					"file": "src/Falcor/Core/API/GpuMemoryHeap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4090,
						"regions":
						{
						},
						"selection":
						[
							[
								3927,
								3927
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 938.0,
						"zoom_level": 1.0
					},
					"stack_index": 227,
					"type": "text"
				},
				{
					"buffer": 395,
					"file": "src/Falcor/Core/API/GpuMemoryHeap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5126,
						"regions":
						{
						},
						"selection":
						[
							[
								4817,
								4817
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1428.0,
						"zoom_level": 1.0
					},
					"stack_index": 226,
					"type": "text"
				},
				{
					"buffer": 396,
					"file": "src/Falcor/Core/API/Vulkan/VKComputeStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2823,
						"regions":
						{
						},
						"selection":
						[
							[
								2798,
								2798
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 221,
					"type": "text"
				},
				{
					"buffer": 397,
					"file": "src/Falcor/Core/API/Vulkan/VKCopyContext.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22189,
						"regions":
						{
						},
						"selection":
						[
							[
								11857,
								11857
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3587.0,
						"zoom_level": 1.0
					},
					"stack_index": 242,
					"type": "text"
				},
				{
					"buffer": 398,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorPool.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5083,
						"regions":
						{
						},
						"selection":
						[
							[
								5083,
								5083
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1312.0,
						"zoom_level": 1.0
					},
					"stack_index": 220,
					"type": "text"
				},
				{
					"buffer": 399,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7792,
						"regions":
						{
						},
						"selection":
						[
							[
								4399,
								4399
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 585.0,
						"zoom_level": 1.0
					},
					"stack_index": 250,
					"type": "text"
				},
				{
					"buffer": 400,
					"file": "src/Falcor/Core/API/Vulkan/VKDescriptorData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2550,
						"regions":
						{
						},
						"selection":
						[
							[
								2011,
								2011
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 111.0,
						"zoom_level": 1.0
					},
					"stack_index": 251,
					"type": "text"
				},
				{
					"buffer": 401,
					"file": "src/Falcor/Core/API/Vulkan/VKDevice.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28832,
						"regions":
						{
						},
						"selection":
						[
							[
								26867,
								26867
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9626.0,
						"zoom_level": 1.0
					},
					"stack_index": 162,
					"type": "text"
				},
				{
					"buffer": 402,
					"file": "src/Falcor/Core/API/Vulkan/VKGpuFence.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10228,
						"regions":
						{
						},
						"selection":
						[
							[
								10027,
								10027
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2958.0,
						"zoom_level": 1.0
					},
					"stack_index": 241,
					"type": "text"
				},
				{
					"buffer": 403,
					"file": "src/Falcor/Core/API/Vulkan/VKGpuTimer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2646,
						"regions":
						{
						},
						"selection":
						[
							[
								1791,
								1791
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 240,
					"type": "text"
				},
				{
					"buffer": 404,
					"file": "src/Falcor/Core/API/D3D12/D3D12GpuFence.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3766,
						"regions":
						{
						},
						"selection":
						[
							[
								3204,
								3204
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 462,
					"type": "text"
				},
				{
					"buffer": 405,
					"file": "src/Falcor/Core/API/GpuFence.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3526,
						"regions":
						{
						},
						"selection":
						[
							[
								2490,
								2490
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 598.0,
						"zoom_level": 1.0
					},
					"stack_index": 243,
					"type": "text"
				},
				{
					"buffer": 406,
					"file": "src/Falcor/Core/API/Vulkan/VKSmartHandle.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9717,
						"regions":
						{
						},
						"selection":
						[
							[
								2210,
								2210
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 553.0,
						"zoom_level": 1.0
					},
					"stack_index": 211,
					"type": "text"
				},
				{
					"buffer": 407,
					"file": "src/Falcor/Core/API/Vulkan/VKState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27538,
						"regions":
						{
						},
						"selection":
						[
							[
								2463,
								2463
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9370.0,
						"zoom_level": 1.0
					},
					"stack_index": 191,
					"type": "text"
				},
				{
					"buffer": 408,
					"file": "src/Falcor/Core/API/Vulkan/VKTexture.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7814,
						"regions":
						{
						},
						"selection":
						[
							[
								7672,
								7672
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1734.0,
						"zoom_level": 1.0
					},
					"stack_index": 213,
					"type": "text"
				},
				{
					"buffer": 409,
					"file": "falcor.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2302,
						"regions":
						{
						},
						"selection":
						[
							[
								2299,
								2299
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 202,
					"type": "text"
				},
				{
					"buffer": 410,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8286,
						"regions":
						{
						},
						"selection":
						[
							[
								1551,
								1597
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 450,
					"type": "text"
				},
				{
					"buffer": 411,
					"file": "third_party/slang/external/vulkan/include/vulkan/vulkan.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2369181,
						"regions":
						{
						},
						"selection":
						[
							[
								509353,
								509353
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 193521.0,
						"zoom_level": 1.0
					},
					"stack_index": 409,
					"type": "text"
				},
				{
					"buffer": 412,
					"file": "/usr/include/vulkan/vulkan.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4010350,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 451,
					"type": "text"
				},
				{
					"buffer": 413,
					"file": "third_party/slang/external/vulkan/include/vulkan/vulkan_core.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 451013,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 427,
					"type": "text"
				},
				{
					"buffer": 414,
					"file": "src/Falcor/Utils/Math/FalcorMath.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8456,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 463,
					"type": "text"
				},
				{
					"buffer": 415,
					"file": "src/Falcor/Core/Framework.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13038,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1071.0,
						"zoom_level": 1.0
					},
					"stack_index": 123,
					"type": "text"
				},
				{
					"buffer": 416,
					"file": "src/Falcor/Core/type.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6550,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 350,
					"type": "text"
				},
				{
					"buffer": 417,
					"file": "src/Falcor/Core/Framework.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2253,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 197,
					"type": "text"
				},
				{
					"buffer": 418,
					"file": "src/Falcor/Core/API/CopyContext.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7675,
						"regions":
						{
						},
						"selection":
						[
							[
								7554,
								7554
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2193.0,
						"zoom_level": 1.0
					},
					"stack_index": 247,
					"type": "text"
				},
				{
					"buffer": 419,
					"file": "src/Falcor/Core/API/VertexLayout.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1862,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 174,
					"type": "text"
				},
				{
					"buffer": 420,
					"file": "src/Falcor/Core/FalcorConfig.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2513,
						"regions":
						{
						},
						"selection":
						[
							[
								1980,
								1980
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 198,
					"type": "text"
				},
				{
					"buffer": 421,
					"file": "src/Falcor/RenderGraph/RenderPassStandardFlags.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2479,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 439,
					"type": "text"
				},
				{
					"buffer": 422,
					"file": "src/Falcor/Falcor.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6959,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 310,
					"type": "text"
				},
				{
					"buffer": 423,
					"file": "src/Falcor/Utils/Debug/PixelDebug.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5769,
						"regions":
						{
						},
						"selection":
						[
							[
								5769,
								5769
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1326.0,
						"zoom_level": 1.0
					},
					"stack_index": 130,
					"type": "text"
				},
				{
					"buffer": 424,
					"file": "src/Falcor/Utils/Image/Bitmap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6060,
						"regions":
						{
						},
						"selection":
						[
							[
								3538,
								3538
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1326.0,
						"zoom_level": 1.0
					},
					"stack_index": 129,
					"type": "text"
				},
				{
					"buffer": 425,
					"file": "src/Falcor/Utils/Image/Bitmap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21119,
						"regions":
						{
						},
						"selection":
						[
							[
								7400,
								7400
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2612.0,
						"zoom_level": 1.0
					},
					"stack_index": 128,
					"type": "text"
				},
				{
					"buffer": 426,
					"file": "src/Falcor/Utils/Scripting/ScriptBindings.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10241,
						"regions":
						{
						},
						"selection":
						[
							[
								5504,
								5504
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1653.0,
						"zoom_level": 1.0
					},
					"stack_index": 163,
					"type": "text"
				},
				{
					"buffer": 427,
					"file": "src/Falcor/Utils/Scripting/Console.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2101,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 445,
					"type": "text"
				},
				{
					"buffer": 428,
					"file": "src/Falcor/Utils/Scripting/Scripting.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5726,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 424,
					"type": "text"
				},
				{
					"buffer": 429,
					"file": "src/Falcor/Core/API/DescriptorPool.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5594,
						"regions":
						{
						},
						"selection":
						[
							[
								3744,
								3744
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1173.0,
						"zoom_level": 1.0
					},
					"stack_index": 253,
					"type": "text"
				},
				{
					"buffer": 430,
					"file": "src/Falcor/Core/API/DescriptorPool.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2661,
						"regions":
						{
						},
						"selection":
						[
							[
								2661,
								2661
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 254,
					"type": "text"
				},
				{
					"buffer": 431,
					"file": "src/Falcor/Core/State/GraphicsState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10063,
						"regions":
						{
						},
						"selection":
						[
							[
								9145,
								9145
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3188.0,
						"zoom_level": 1.0
					},
					"stack_index": 183,
					"type": "text"
				},
				{
					"buffer": 432,
					"file": "src/Falcor/Core/State/GraphicsState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8458,
						"regions":
						{
						},
						"selection":
						[
							[
								2784,
								2784
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 451.0,
						"zoom_level": 1.0
					},
					"stack_index": 180,
					"type": "text"
				},
				{
					"buffer": 433,
					"file": "src/Falcor/Core/State/ComputeState.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3405,
						"regions":
						{
						},
						"selection":
						[
							[
								2529,
								2529
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 153.0,
						"zoom_level": 1.0
					},
					"stack_index": 195,
					"type": "text"
				},
				{
					"buffer": 434,
					"file": "src/Falcor/Core/API/ComputeStateObject.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2465,
						"regions":
						{
						},
						"selection":
						[
							[
								2089,
								2089
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 184,
					"type": "text"
				},
				{
					"buffer": 435,
					"file": "src/Falcor/Core/API/GpuTimer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4479,
						"regions":
						{
						},
						"selection":
						[
							[
								3328,
								3328
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 459.0,
						"zoom_level": 1.0
					},
					"stack_index": 255,
					"type": "text"
				},
				{
					"buffer": 436,
					"file": "src/Falcor/Core/State/ComputeState.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3782,
						"regions":
						{
						},
						"selection":
						[
							[
								2662,
								2662
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 349.0,
						"zoom_level": 1.0
					},
					"stack_index": 196,
					"type": "text"
				},
				{
					"buffer": 437,
					"file": "src/Falcor/Core/State/StateGraph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4323,
						"regions":
						{
						},
						"selection":
						[
							[
								4098,
								4098
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 187,
					"type": "text"
				},
				{
					"buffer": 438,
					"file": "src/Falcor/Raytracing/RtProgram/RtProgram.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7986,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 466,
					"type": "text"
				},
				{
					"buffer": 439,
					"file": "src/Falcor/Raytracing/RtProgram/RtProgram.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6561,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 465,
					"type": "text"
				},
				{
					"buffer": 440,
					"file": "src/Mogwai/AppData.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2896,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 122,
					"type": "text"
				},
				{
					"buffer": 441,
					"file": "src/Falcor/Core/Platform/Linux/ProgressBarLinux.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5059,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 456,
					"type": "text"
				},
				{
					"buffer": 442,
					"file": "src/Mogwai/AppData.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5386,
						"regions":
						{
						},
						"selection":
						[
							[
								2276,
								2276
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 106,
					"type": "text"
				},
				{
					"buffer": 443,
					"file": "src/Mogwai/Extensions/Capture/CaptureTrigger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3849,
						"regions":
						{
						},
						"selection":
						[
							[
								3848,
								3848
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 444,
					"file": "src/Falcor/Core/Sample.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24565,
						"regions":
						{
						},
						"selection":
						[
							[
								10167,
								10167
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3749.0,
						"zoom_level": 1.0
					},
					"stack_index": 71,
					"type": "text"
				},
				{
					"buffer": 445,
					"file": "src/Falcor/Core/API/VertexLayout.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7327,
						"regions":
						{
						},
						"selection":
						[
							[
								7087,
								7087
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2542.0,
						"zoom_level": 1.0
					},
					"stack_index": 173,
					"type": "text"
				},
				{
					"buffer": 446,
					"file": "src/Falcor/Core/API/Engine.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6374,
						"regions":
						{
						},
						"selection":
						[
							[
								3541,
								3541
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1467.0,
						"zoom_level": 1.0
					},
					"stack_index": 80,
					"type": "text"
				},
				{
					"buffer": 447,
					"file": "src/Falcor/Core/API/Device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16485,
						"regions":
						{
						},
						"selection":
						[
							[
								2335,
								2335
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 462.0,
						"zoom_level": 1.0
					},
					"stack_index": 78,
					"type": "text"
				},
				{
					"buffer": 448,
					"file": "src/Falcor/Core/API/Vulkan/VkQueryHeap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2776,
						"regions":
						{
						},
						"selection":
						[
							[
								2743,
								2743
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 102.0,
						"zoom_level": 1.0
					},
					"stack_index": 212,
					"type": "text"
				},
				{
					"buffer": 449,
					"file": "src/Falcor/Core/API/D3D12/D3D12Device.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15156,
						"regions":
						{
						},
						"selection":
						[
							[
								11323,
								11323
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4233.0,
						"zoom_level": 1.0
					},
					"stack_index": 265,
					"type": "text"
				},
				{
					"buffer": 450,
					"file": "src/Falcor/Core/API/DescriptorSet.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5712,
						"regions":
						{
						},
						"selection":
						[
							[
								5172,
								5172
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1224.0,
						"zoom_level": 1.0
					},
					"stack_index": 232,
					"type": "text"
				},
				{
					"buffer": 451,
					"file": "src/Falcor/Core/API/DescriptorSet.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2524,
						"regions":
						{
						},
						"selection":
						[
							[
								2075,
								2075
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 252,
					"type": "text"
				},
				{
					"buffer": 452,
					"file": "src/Falcor/Core/API/ResourceViews.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4602,
						"regions":
						{
						},
						"selection":
						[
							[
								2387,
								2387
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 417.0,
						"zoom_level": 1.0
					},
					"stack_index": 233,
					"type": "text"
				},
				{
					"buffer": 453,
					"file": "Falcor.sln",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19418,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 464,
					"type": "text"
				},
				{
					"buffer": 454,
					"file": "src/Falcor/Scene/Scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25118,
						"regions":
						{
						},
						"selection":
						[
							[
								7107,
								7107
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 120,
					"type": "text"
				},
				{
					"buffer": 455,
					"file": "src/Falcor/RenderGraph/RenderGraphUI.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8554,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 425,
					"type": "text"
				},
				{
					"buffer": 456,
					"file": "src/Falcor/RenderGraph/RenderGraph.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11348,
						"regions":
						{
						},
						"selection":
						[
							[
								2422,
								2422
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 158,
					"type": "text"
				},
				{
					"buffer": 457,
					"file": "src/Falcor/RenderGraph/ResourceCache.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5357,
						"regions":
						{
						},
						"selection":
						[
							[
								5357,
								5357
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 663.0,
						"zoom_level": 1.0
					},
					"stack_index": 159,
					"type": "text"
				},
				{
					"buffer": 458,
					"file": "src/Falcor/RenderGraph/BasePasses/RasterScenePass.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4422,
						"regions":
						{
						},
						"selection":
						[
							[
								4185,
								4185
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 171,
					"type": "text"
				},
				{
					"buffer": 459,
					"file": "src/Falcor/Utils/Debug/DebugConsole.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4292,
						"regions":
						{
						},
						"selection":
						[
							[
								2156,
								2156
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 143.0,
						"zoom_level": 1.0
					},
					"stack_index": 331,
					"type": "text"
				},
				{
					"buffer": 460,
					"file": "src/Falcor/Scene/SceneBuilder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11802,
						"regions":
						{
						},
						"selection":
						[
							[
								10308,
								10308
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3159.0,
						"zoom_level": 1.0
					},
					"stack_index": 146,
					"type": "text"
				},
				{
					"buffer": 461,
					"file": "src/Falcor/Utils/Debug/debug.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2463,
						"regions":
						{
						},
						"selection":
						[
							[
								2269,
								2269
							]
						],
						"settings":
						{
							"auto_name": "#ifndef __FALCOR_DEBUG_H__",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 41.0,
						"zoom_level": 1.0
					},
					"stack_index": 332,
					"type": "text"
				},
				{
					"buffer": 462,
					"file": "src/Falcor/Core/BufferTypes/ParameterBlock.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20399,
						"regions":
						{
						},
						"selection":
						[
							[
								16343,
								16343
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7119.0,
						"zoom_level": 1.0
					},
					"stack_index": 199,
					"type": "text"
				},
				{
					"buffer": 463,
					"file": "src/Falcor/Scene/Scene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49068,
						"regions":
						{
						},
						"selection":
						[
							[
								5996,
								5996
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1862.0,
						"zoom_level": 1.0
					},
					"stack_index": 90,
					"type": "text"
				},
				{
					"buffer": 464,
					"file": "src/Falcor/Scene/Camera/CameraController.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9863,
						"regions":
						{
						},
						"selection":
						[
							[
								9668,
								9668
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3353.0,
						"zoom_level": 1.0
					},
					"stack_index": 104,
					"type": "text"
				},
				{
					"buffer": 465,
					"file": "src/Falcor/Scene/Camera/Camera.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13365,
						"regions":
						{
						},
						"selection":
						[
							[
								11054,
								11054
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3829.0,
						"zoom_level": 1.0
					},
					"stack_index": 103,
					"type": "text"
				},
				{
					"buffer": 466,
					"file": "src/Falcor/Core/API/D3D12/D3D12Resource.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6227,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 461,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 120.0
	},
	"output.unsaved_changes":
	{
		"height": 120.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "falcor.sublime-project",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 419.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
