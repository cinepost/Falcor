from falcor import *

def render_graph_forward_renderer():
    g = RenderGraph("forward_renderer")
    loadRenderPassLibrary("AccumulatePass.rpl")
    loadRenderPassLibrary("SSAO.rpl")
    loadRenderPassLibrary("ForwardLightingPass.rpl")
    loadRenderPassLibrary("SkyBox.rpl")
    loadRenderPassLibrary("GBuffer.rpl")
    loadRenderPassLibrary("ToneMapper.rpl")
    loadRenderPassLibrary("DepthPass.rpl")
    loadRenderPassLibrary("CSM.rpl")
    loadRenderPassLibrary("BlitPass.rpl")
    loadRenderPassLibrary("Antialiasing.rpl")
    AccumulatePass = RenderPass("AccumulatePass", {'enableAccumulation': True, 'precisionMode': AccumulatePrecision.Single})
    g.addPass(AccumulatePass, "AccumulatePass")
    SSAO = RenderPass("SSAO", {'aoMapSize': uint2(1024,1024), 'kernelSize': 16, 'noiseSize': uint2(16,16), 'radius': 0.10000000149011612, 'distribution': SampleDistribution.CosineHammersley, 'blurWidth': 5, 'blurSigma': 2.0})
    g.addPass(SSAO, "SSAO")
    SkyBox = RenderPass("SkyBox", {'texName': '', 'loadAsSrgb': True, 'filter': SamplerFilter.Linear})
    g.addPass(SkyBox, "SkyBox")
    GBufferRaster = RenderPass("GBufferRaster", {'samplePattern': SamplePattern.Center, 'sampleCount': 64, 'disableAlphaTest': False, 'forceCullMode': False, 'cull': CullMode.CullBack, 'useBentShadingNormals': True})
    g.addPass(GBufferRaster, "GBufferRaster")
    LightingPass = RenderPass("ForwardLightingPass", {'sampleCount': 1, 'enableSuperSampling': False})
    g.addPass(LightingPass, "LightingPass")
    ShadowPass = RenderPass("CSM", {'mapSize': uint2(2048,2048), 'visibilityBufferSize': uint2(0,0), 'cascadeCount': 4, 'visibilityMapBitsPerChannel': 32, 'kSdsmReadbackLatency': 1, 'blurWidth': 5, 'blurSigma': 2.0})
    g.addPass(ShadowPass, "ShadowPass")
    ToneMapping = RenderPass("ToneMapper", {'exposureCompensation': 0.0, 'autoExposure': True, 'exposureValue': 0.0, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137})
    g.addPass(ToneMapping, "ToneMapping")
    g.addEdge("SSAO.colorOut", "AccumulatePass.input")
    g.addEdge("LightingPass.color", "ToneMapping.src")
    g.addEdge("ShadowPass.visibility", "LightingPass.visibilityBuffer")
    g.addEdge("SkyBox.target", "LightingPass.color")
    g.addEdge("ToneMapping.dst", "SSAO.colorIn")
    g.addEdge("GBufferRaster.depth", "LightingPass.depth")
    g.addEdge("GBufferRaster.depth", "SkyBox.depth")
    g.addEdge("GBufferRaster.depth", "ShadowPass.depth")
    g.addEdge("LightingPass.depth", "SSAO.depth")
    g.addEdge("LightingPass.normals", "SSAO.normals")
    g.markOutput("AccumulatePass.output")
    return g

forward_renderer = render_graph_forward_renderer()
try: m.addGraph(forward_renderer)
except NameError: None
