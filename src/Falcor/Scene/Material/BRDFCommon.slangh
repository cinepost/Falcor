#pragma once

#include "Utils/Math/MathConstants.slangh"
#include "Experimental/Scene/Material/BxDFConfig.slangh"

import Scene.ShadingData;
import Scene.Lights.Lights;

float schlickWeight(float cosTheta) {
    float m = clamp(1.0f - cosTheta, 0.0f , 1.0f);
    return (m * m) * (m * m) * m;
}

float3 fresnelSchlick(float3 f0, float3 f90, float cosTheta) {
    float m = clamp(1.0f - cosTheta, 0.0f , 1.0f);
    return f0 + (f90 - f0) * (m * m) * (m * m) * m;
}

float evalGGX(float ggxAlpha, float NdotH) {
    float a2 = ggxAlpha * ggxAlpha;
    float d = ((NdotH * a2 - NdotH) * NdotH + 1);
    return a2 / (d * d);
}

float evalSmithGGX(float NdotL, float NdotV, float ggxAlpha) {
    // Optimized version of Smith, already taking into account the division by (4 * NdotV)
    float a2 = ggxAlpha * ggxAlpha;
    // `NdotV *` and `NdotL *` are inversed. It's not a mistake.
    float ggxv = NdotL * sqrt((-NdotV * a2 + NdotV) * NdotV + a2);
    float ggxl = NdotV * sqrt((-NdotL * a2 + NdotL) * NdotL + a2);
    return 0.5f / (ggxv + ggxl);

}
