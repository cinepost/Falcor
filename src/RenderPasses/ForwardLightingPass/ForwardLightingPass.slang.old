/***************************************************************************
 # Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions
 # are met:
 #  * Redistributions of source code must retain the above copyright
 #    notice, this list of conditions and the following disclaimer.
 #  * Redistributions in binary form must reproduce the above copyright
 #    notice, this list of conditions and the following disclaimer in the
 #    documentation and/or other materials provided with the distribution.
 #  * Neither the name of NVIDIA CORPORATION nor the names of its
 #    contributors may be used to endorse or promote products derived
 #    from this software without specific prior written permission.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
 # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************/
#include "Utils/Math/MathConstants.slangh"

import Scene.Raster;
import Scene.Shading;
import Utils.Helpers;

cbuffer PerFrameCB
{
    float2 gRenderTargetDim;
    float4x4 gViewInvMat;
};

SamplerState gSampler;
Texture2D aoHorizons;
Texture2D noiseTex;
Texture2D visibilityBuffer;
static VSOut vsData;

float4 unpackHorizons(float4 v) {
  return v * 2.0 - 1.0;
}

float3 transform_direction(float4x4 m, float3 v) {
  return mul(float4(v, 1.0f), m).xyz;
}

float3 _transform_direction(float4x4 m, float3 v) {
  return mul(m, float4(v, 1.0f)).xyz;
}

/* clang-format off */
float min_v2(float2 v) { return min(v.x, v.y); }
float min_v3(float3 v) { return min(v.x, min(v.y, v.z)); }
float min_v4(float4 v) { return min(min(v.x, v.y), min(v.z, v.w)); }
float max_v2(float2 v) { return max(v.x, v.y); }
float max_v3(float3 v) { return max(v.x, max(v.y, v.z)); }
float max_v4(float4 v) { return max(max(v.x, v.y), max(v.z, v.w)); }

/* [Drobot2014a] Low Level Optimizations for GCN */
float fast_sqrt(float v) {
  return asfloat(0x1fbd1df5 + (asint(v) >> 1));
  //return intBitsToFloat(0x1fbd1df5 + (floatBitsToInt(v) >> 1));
}

float2 fast_sqrt(float2 v) {
  return asfloat(0x1fbd1df5 + (asint(v) >> 1));
  //return intBitsToFloat(0x1fbd1df5 + (floatBitsToInt(v) >> 1));
}

/* [Eberly2014] GPGPU Programming for Games and Science */
float fast_acos(float v) {
  float res = -0.156583 * abs(v) + M_PI_2;
  res *= fast_sqrt(1.0 - abs(v));
  return (v >= 0) ? res : M_PI - res;
}

float2 fast_acos(float2 v) {
  float2 res = -0.156583 * abs(v) + M_PI_2;
  res *= fast_sqrt(1.0 - abs(v));
  v.x = (v.x >= 0) ? res.x : M_PI - res.x;
  v.y = (v.y >= 0) ? res.y : M_PI - res.y;
  return v;
}

float3 normalize_len(float3 v, out float len) {
  len = length(v);
  return v / len;
}


float2 get_ao_dir(float jitter) {
  /* Only a quarter of a turn because we integrate using 2 slices.
   * We use this instead of using utiltex circle noise to improve cache hits
   * since all tracing direction will be in the same quadrant. */
  jitter *= M_PI_2;
  return float2(cos(jitter), sin(jitter));
}

float2 clamp_horizons_to_hemisphere(float2 horizons, float angle_N, const float inverted) {
  /* Add a little bias to fight self shadowing. */
  const float max_angle = M_PI_2 - 0.05;

  if (inverted != 0.0) {
    horizons.x = max(horizons.x, angle_N + max_angle);
    horizons.y = min(horizons.y, angle_N - max_angle);
  }
  else {
    horizons.x = min(horizons.x, angle_N + max_angle);
    horizons.y = max(horizons.y, angle_N - max_angle);
  }
  return horizons;
}


VSOut vs(VSIn vIn)
{
    VSOut vsOut;
    vsOut = defaultVS(vIn);
#ifdef _OUTPUT_MOTION_VECTORS
    vsOut.prevPosH.xy += vsOut.prevPosH.w * 2 * float2(gScene.camera.data.jitterX, gScene.camera.data.jitterY);
#endif
    return vsOut;
}

struct PsOut
{
    float4 color : SV_TARGET0;
    float4 normal : SV_TARGET1;
#ifdef _OUTPUT_MOTION_VECTORS
    float2 motion : SV_TARGET2;
#endif
};

[earlydepthstencil]
PsOut ps(VSOut vOut, uint triangleIndex : SV_PrimitiveID) {
    PsOut psOut;

    // pixel position
    int2 ipos = int2(vOut.posH.xy);

    float3 viewDir = normalize(gScene.camera.getPosition() - vOut.posW);
    ShadingData sd = prepareShadingData(vOut, triangleIndex, viewDir);

    float4 finalColor = float4(0, 0, 0, 1);

    for (uint l = 0; l < gScene.getLightCount(); l++)
    {
        float shadowFactor = 1;
        if (l == 0)
        {
            //shadowFactor = visibilityBuffer.Load(int3(vOut.posH.xy, 0)).r;
            //shadowFactor *= sd.opacity;
        }
        finalColor.rgb += evalMaterial(sd, gScene.getLight(l), shadowFactor).color.rgb;
    }


    // Add the emissive component
    finalColor.rgb += sd.emissive;
    
    finalColor.a = sd.opacity;

    //finalColor.rgb += evalMaterial(sd, gScene.lightProbe).color.rgb;
    finalColor.rgb += evalMaterialIBL(sd, gScene.lightProbe, ipos).color.rgb;

    psOut.color = finalColor;
    psOut.normal = float4(vOut.normalW * 0.5f + 0.5f, 1.0f);

#ifdef _OUTPUT_MOTION_VECTORS
    // Using vOut.posH.xy as pixel coordinate since it has the SV_Position semantic.
    psOut.motion = calcMotionVector(vOut.posH.xy, vOut.prevPosH, gRenderTargetDim);
#endif

#if defined(_VISUALIZE_CASCADES) && defined(_ENABLE_SHADOWS)
    float3 cascadeColor = visibilityBuffer.Load(int3(ipos, 0)).gba;
    psOut.color.rgb *= cascadeColor;
#endif

    // DEBUG

    float4 ao_data = aoHorizons.Load(int3(ipos, 0));
    
    float4 horizons = unpackHorizons(ao_data);
    
    float2 noise_uv = float2(ipos.x - (ipos.x/64)*64, ipos.y - (ipos.y/64)*64) / 64.0f;
    float2 noise = noiseTex.SampleLevel(gSampler,noise_uv , 0).rg;

    float3 vDir = viewDir;
    float3 N = sd.N;
    float3 bentNormal;
    float diff_occ = occlusion_compute(N, vOut.posW, 0.0, noise, bentNormal);
    
    psOut.color.rgb = float3(1) * diff_occ;
    psOut.color.a = 1;


    //psOut.color = horizons;

    return psOut;
}
