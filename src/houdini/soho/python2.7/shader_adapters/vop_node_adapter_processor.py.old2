import hou

from enum import Enum

from code_template import CodeTemplate
from functions import getVopNodeAdapter
from vop_node_adapter_base import VopNodeAdapterBase
from vop_node_adapter_socket import VopNodeSocket

def appendSocketsAsFuncArgs(args_str, sockets):
	if not isinstance(sockets, (list, tuple)):
		raise ValueError('Wrong sockets argument of type "%s" passed, should be either list or tuple !!!' % type(sockets))

	# Filter out non slang types (line strings and shading contexts e.g 'surface', 'dispalce')
	sockets = [socket for socket in sockets if VopNodeSocket.DataType.isSlandDataType(socket.dataType)]

	if len(sockets) == 0:
		return args_str

	result = args_str

	if result:
		result += ", "

	for i in range(0, len(sockets)):
		socket = sockets[i]

		if socket.direction != VopNodeSocket.Direction.INPUT:
			result += "%s " % socket.slangTypeAccessString
		
		result += "%s %s" % (socket.slangDataTypeString, socket.codeVarName)

		if i != (len(sockets) - 1): result += ", "

	return result

class VopNodeAdapterProcessor(object):
	class ProcessorType(Enum):
		NODE    = 0
		SUBNET  = 1

	_root_node = None
	
	def __init__(self, vop_node, slang_context=None):
		super(VopNodeAdapterProcessor, self).__init__()

		if not issubclass(type(vop_node), hou.VopNode):
			raise ValueError('Wrong object of type "%s" passed as a vop node !!!' % type(vop_node))

		#if adapter.context.vopNode.isSubNetwork():
		#	self._processing_mode = VopNodeAdapterProcessor.ProcessorType.SUBNET
		#else:
		#	self._processing_mode = VopNodeAdapterProcessor.ProcessorType.NODE

		self._multi_slang_code_contexts = False
		try:
			if vop_node.supportsMultiCookCodeContexts():
				self._multi_slang_code_contexts = True
		except:
			pass

		self._root_node = vop_node
		self._slang_context = slang_context

	def processChildren(self, children_vop_nodes, slang_context=None):
		#if self._processing_mode != VopNodeAdapterProcessor.ProcessorType.SUBNET:
		#	raise Exception("Children processing allowed only in sub-networks !!!")

		result = {
			'inputs' : [],
			'outputs' : [],
			'code': "",
		}

		for child_vop_node in children_vop_nodes:
			if not child_vop_node.outputNames():
				# this is a output collection node
				continue

			res = self._process(child_vop_node, slang_context)

			result['code'] += res['code']
			result['outputs'] += res['outputs']

		return result

	def generateShaders(self):
		node = self._root_node
		shader_type = node.shaderType()
		if   shader_type == hou.shaderType.VopMaterial:
			print "generateShaders VopMaterial"
			return {
				'surface': self._process(node, 'surface'),
				#'displacement': self._process(node, 'displacement')
			}
		elif shader_type == hou.shaderType.Surface:
			print "generateShaders Surface"
			return {
				'surface': self._process(node, 'surface'),
			}
		else:
			pass

		return {}

	def process(self):
		
		resultCode = {}

		if not self._slang_context:
			if self._multi_slang_code_contexts:
				for slang_context in ['surface']:#, 'displacement']:
					resultCode[slang_context] = self._process(self._root_node, slang_context)['code']

			return resultCode

		return {'surface': self._process(self._root_node)['code']}

	def _process(self, vop_node, slang_context = 'surface'):
		from functions import getVopNodeAdapter

		if not issubclass(type(vop_node), hou.VopNode):
			raise ValueError('Wrong object of type "%s" passed as a vop node !!!' % type(vop_node))

		#vop_adapter = getVopNodeAdapter(vop_node)

		#if not vop_adapter:
		#	raise Exception('No vop adapter found for node type "%s"' % vop_node.type().name())

		inputs = []
		outputs = []

		if vop_node.isSubNetwork():
			terminals = [vop_node.subnetTerminalChild(output_name) for output_name in vop_node.outputNames()]

			for terminal in terminals:
				terminal_node = terminal[0]
				terminal_node_input_name = terminal[1]

				print "terminal node", terminal_node.path()

				for connection in terminal_node.inputConnections():
					if connection.outputName() == terminal_node_input_name:
						input_node = connection.inputNode()
						input_node_output_name = connection.inputName()

						#input_node_adapter = getVopNodeAdapter(input_node)
						result = self._process(input_node, slang_context)

						print "input_node", input_node

		else:
			if vop_node.inputConnections():
				for connection in vop_node.inputConnections():
					input_node = connection.inputNode()
					input_node_output_name = connection.inputName()

					result = self._process(input_node, slang_context)
			else:
				node_adapter = getVopNodeAdapter(vop_node)
				if node_adapter:
					code_template_string = node_adapter.getCodeTemplate()
					print "%s code_template_string " % input_node.path(), code_template_string


		return {
			'inputs' : [],
			'outputs' : [],
			'code': "",
		}
